
F411CEU6_CAR_Traff_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ab0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08011c48  08011c48  00021c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801216c  0801216c  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801216c  0801216c  0002216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012174  08012174  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08012174  08012174  00022174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801218c  0801218c  0002218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08012190  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200000a0  08012230  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08012230  000303f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001283c  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aaa  00000000  00000000  0004290c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000453b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  000463a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da4  00000000  00000000  00047260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f43  00000000  00000000  00060004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093bbc  00000000  00000000  00073f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  00107b03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000467c  00000000  00000000  00107bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      00000453  00000000  00000000  0010c250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <dw3000_driver>:
 8000198:	12 03 ca de 0f ff ff ff a8 1e 01 08 b0 1e 01 08     ................
 80001a8:	e4 1d 01 08 a8 1d 01 08 07 00 06 00                 ............

080001b4 <dw3700_driver>:
 80001b4:	13 03 ca de 0f ff ff ff a8 1e 01 08 b0 1e 01 08     ................
 80001c4:	24 1f 01 08 e8 1e 01 08 07 00 06 00                 $...........

080001d0 <dw3720_driver>:
 80001d0:	14 03 ca de 0f ff ff ff a8 1e 01 08 b0 1e 01 08     ................
 80001e0:	34 20 01 08 f8 1f 01 08 07 00 06 00                 4 ..........

080001ec <__do_global_dtors_aux>:
 80001ec:	b510      	push	{r4, lr}
 80001ee:	4c05      	ldr	r4, [pc, #20]	; (8000204 <__do_global_dtors_aux+0x18>)
 80001f0:	7823      	ldrb	r3, [r4, #0]
 80001f2:	b933      	cbnz	r3, 8000202 <__do_global_dtors_aux+0x16>
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x1c>)
 80001f6:	b113      	cbz	r3, 80001fe <__do_global_dtors_aux+0x12>
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <__do_global_dtors_aux+0x20>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	2301      	movs	r3, #1
 8000200:	7023      	strb	r3, [r4, #0]
 8000202:	bd10      	pop	{r4, pc}
 8000204:	200000a0 	.word	0x200000a0
 8000208:	00000000 	.word	0x00000000
 800020c:	08011c30 	.word	0x08011c30

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	4b03      	ldr	r3, [pc, #12]	; (8000220 <frame_dummy+0x10>)
 8000214:	b11b      	cbz	r3, 800021e <frame_dummy+0xe>
 8000216:	4903      	ldr	r1, [pc, #12]	; (8000224 <frame_dummy+0x14>)
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <frame_dummy+0x18>)
 800021a:	f3af 8000 	nop.w
 800021e:	bd08      	pop	{r3, pc}
 8000220:	00000000 	.word	0x00000000
 8000224:	200000a4 	.word	0x200000a4
 8000228:	08011c30 	.word	0x08011c30

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f7ff bff2 	b.w	800023c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <Pdoa_uwb_tx>:

/**
 * Application entry point.
 */
int Pdoa_uwb_tx(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000544:	f000 faa4 	bl	8000a90 <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8000548:	f000 fa22 	bl	8000990 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 800054c:	2002      	movs	r0, #2
 800054e:	f000 f9f3 	bl	8000938 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000552:	4822      	ldr	r0, [pc, #136]	; (80005dc <Pdoa_uwb_tx+0x9c>)
 8000554:	f003 ff9c 	bl	8004490 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 8000558:	bf00      	nop
 800055a:	f004 f851 	bl	8004600 <dwt_checkidlerc>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0fa      	beq.n	800055a <Pdoa_uwb_tx+0x1a>

    if (dwt_initialise(DWT_DW_INIT /*| DWT_READ_OTP_PID*/) == DWT_ERROR)
 8000564:	2000      	movs	r0, #0
 8000566:	f003 ffdf 	bl	8004528 <dwt_initialise>
 800056a:	4603      	mov	r3, r0
 800056c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000570:	d103      	bne.n	800057a <Pdoa_uwb_tx+0x3a>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <Pdoa_uwb_tx+0xa0>)
 8000574:	f000 fb1c 	bl	8000bb0 <test_run_info>
        while (1) { };
 8000578:	e7fe      	b.n	8000578 <Pdoa_uwb_tx+0x38>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 800057a:	2003      	movs	r0, #3
 800057c:	f004 f868 	bl	8004650 <dwt_setleds>

    /* Configure DW IC. See NOTE 5 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8000580:	4818      	ldr	r0, [pc, #96]	; (80005e4 <Pdoa_uwb_tx+0xa4>)
 8000582:	f003 ffdd 	bl	8004540 <dwt_configure>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <Pdoa_uwb_tx+0x54>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <Pdoa_uwb_tx+0xa8>)
 800058e:	f000 fb0f 	bl	8000bb0 <test_run_info>
        while (1) { };
 8000592:	e7fe      	b.n	8000592 <Pdoa_uwb_tx+0x52>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8000594:	4815      	ldr	r0, [pc, #84]	; (80005ec <Pdoa_uwb_tx+0xac>)
 8000596:	f003 ffdf 	bl	8004558 <dwt_configuretxrf>
    /* Loop forever sending frames periodically. */
    while (1){
        /* Write frame data to DW IC and prepare transmission. See NOTE 3 below.*/


    	dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 800059a:	2200      	movs	r2, #0
 800059c:	4914      	ldr	r1, [pc, #80]	; (80005f0 <Pdoa_uwb_tx+0xb0>)
 800059e:	200a      	movs	r0, #10
 80005a0:	f003 ffe6 	bl	8004570 <dwt_writetxdata>

		/* In this example since the length of the transmitted frame does not change,
		 * nor the other parameters of the dwt_writetxfctrl function, the
		 * dwt_writetxfctrl call could be outside the main while(1) loop.
		 */
		dwt_writetxfctrl(FRAME_LENGTH, 0, 0); /* Zero offset in TX buffer, no ranging. */
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	200c      	movs	r0, #12
 80005aa:	f003 ffef 	bl	800458c <dwt_writetxfctrl>

		/* Start transmission. */
		dwt_starttx(DWT_START_TX_IMMEDIATE);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f003 fffa 	bl	80045a8 <dwt_starttx>
		/* Poll DW IC until TX frame sent event set. See NOTE 4 below.
		 * STATUS register is 4 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
		 * function to access it.*/
		waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 80005b4:	2300      	movs	r3, #0
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fab6 	bl	8000b2c <waitforsysstatus>

		/* Clear TX frame sent event. */
		dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 80005c0:	2080      	movs	r0, #128	; 0x80
 80005c2:	f004 f857 	bl	8004674 <dwt_writesysstatuslo>

		/* Execute a delay between transmissions. */
		Sleep(TX_DELAY_MS);
 80005c6:	2032      	movs	r0, #50	; 0x32
 80005c8:	f000 f9b6 	bl	8000938 <Sleep>

		/* Increment the blink frame sequence number (modulo 256). */
		tx_msg[BLINK_FRAME_SN_IDX]++;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <Pdoa_uwb_tx+0xb0>)
 80005ce:	785b      	ldrb	r3, [r3, #1]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <Pdoa_uwb_tx+0xb0>)
 80005d6:	705a      	strb	r2, [r3, #1]
    	dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 80005d8:	e7df      	b.n	800059a <Pdoa_uwb_tx+0x5a>
 80005da:	bf00      	nop
 80005dc:	08011c84 	.word	0x08011c84
 80005e0:	08011c48 	.word	0x08011c48
 80005e4:	20000000 	.word	0x20000000
 80005e8:	08011c5c 	.word	0x08011c5c
 80005ec:	2000001c 	.word	0x2000001c
 80005f0:	20000010 	.word	0x20000010

080005f4 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80005fa:	f000 fa7d 	bl	8000af8 <port_GetEXT_IRQStatus>
 80005fe:	4603      	mov	r3, r0
 8000600:	607b      	str	r3, [r7, #4]

    if (s)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 8000608:	f000 fa52 	bl	8000ab0 <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
    if (s)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8000624:	f000 fa56 	bl	8000ad4 <port_EnableEXT_IRQ>
    }
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f97d 	bl	8000938 <Sleep>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f956 	bl	8000900 <usleep>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4603      	mov	r3, r0
 8000668:	81fb      	strh	r3, [r7, #14]
 800066a:	4613      	mov	r3, r2
 800066c:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 800066e:	f7ff ffc1 	bl	80005f4 <decamutexon>
 8000672:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000674:	bf00      	nop
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <writetospiwithcrc+0x90>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f95f 	bl	800293e <HAL_SPI_GetState>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d1f7      	bne.n	8000676 <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <writetospiwithcrc+0x94>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <writetospiwithcrc+0x98>)
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	; (80006f8 <writetospiwithcrc+0x9c>)
 8000692:	f001 fb1d 	bl	8001cd0 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <writetospiwithcrc+0x90>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	89fa      	ldrh	r2, [r7, #14]
 800069c:	230a      	movs	r3, #10
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	f002 f811 	bl	80026c6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <writetospiwithcrc+0x90>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	89ba      	ldrh	r2, [r7, #12]
 80006aa:	230a      	movs	r3, #10
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	f002 f80a 	bl	80026c6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <writetospiwithcrc+0x90>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	230a      	movs	r3, #10
 80006b8:	2201      	movs	r2, #1
 80006ba:	f107 0120 	add.w	r1, r7, #32
 80006be:	f002 f802 	bl	80026c6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <writetospiwithcrc+0x94>)
 80006c4:	8819      	ldrh	r1, [r3, #0]
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <writetospiwithcrc+0x98>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf0c      	ite	eq
 80006ce:	2301      	moveq	r3, #1
 80006d0:	2300      	movne	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <writetospiwithcrc+0x9c>)
 80006d8:	f001 fafa 	bl	8001cd0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80006dc:	6978      	ldr	r0, [r7, #20]
 80006de:	f7ff ff9a 	bl	8000616 <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80006e2:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000024 	.word	0x20000024
 80006f0:	20000028 	.word	0x20000028
 80006f4:	200001e8 	.word	0x200001e8
 80006f8:	40020000 	.word	0x40020000

080006fc <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4603      	mov	r3, r0
 8000708:	81fb      	strh	r3, [r7, #14]
 800070a:	4613      	mov	r3, r2
 800070c:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 800070e:	f7ff ff71 	bl	80005f4 <decamutexon>
 8000712:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000714:	bf00      	nop
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <writetospi+0x8c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f90f 	bl	800293e <HAL_SPI_GetState>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d1f7      	bne.n	8000716 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <writetospi+0x90>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <writetospi+0x94>)
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	4818      	ldr	r0, [pc, #96]	; (8000794 <writetospi+0x98>)
 8000732:	f001 facd 	bl	8001cd0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <writetospi+0x8c>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	89fa      	ldrh	r2, [r7, #14]
 800073c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	f001 ffc0 	bl	80026c6 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8000746:	89bb      	ldrh	r3, [r7, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d007      	beq.n	800075c <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <writetospi+0x8c>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	89ba      	ldrh	r2, [r7, #12]
 8000752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f001 ffb5 	bl	80026c6 <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <writetospi+0x90>)
 800075e:	8819      	ldrh	r1, [r3, #0]
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <writetospi+0x94>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf0c      	ite	eq
 8000768:	2301      	moveq	r3, #1
 800076a:	2300      	movne	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <writetospi+0x98>)
 8000772:	f001 faad 	bl	8001cd0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f7ff ff4d 	bl	8000616 <decamutexoff>

    return 0;
 800077c:	2300      	movs	r3, #0
} // end writetospi()
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000024 	.word	0x20000024
 800078c:	20000028 	.word	0x20000028
 8000790:	200001e8 	.word	0x200001e8
 8000794:	40020000 	.word	0x40020000

08000798 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4603      	mov	r3, r0
 80007a4:	81fb      	strh	r3, [r7, #14]
 80007a6:	4613      	mov	r3, r2
 80007a8:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 80007aa:	f7ff ff23 	bl	80005f4 <decamutexon>
 80007ae:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80007b0:	bf00      	nop
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <readfromspi+0xd4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 f8c1 	bl	800293e <HAL_SPI_GetState>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d1f7      	bne.n	80007b2 <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80007c2:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <readfromspi+0xd8>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	4a2b      	ldr	r2, [pc, #172]	; (8000874 <readfromspi+0xdc>)
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	482a      	ldr	r0, [pc, #168]	; (8000878 <readfromspi+0xe0>)
 80007ce:	f001 fa7f 	bl	8001cd0 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <readfromspi+0xd4>)
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	89fa      	ldrh	r2, [r7, #14]
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	f001 ff72 	bl	80026c6 <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80007e2:	bf00      	nop
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <readfromspi+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d1f7      	bne.n	80007e4 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 80007f4:	e01f      	b.n	8000836 <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 80007f6:	bf00      	nop
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <readfromspi+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	2b02      	cmp	r3, #2
 8000806:	d1f7      	bne.n	80007f8 <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <readfromspi+0xd4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8000812:	bf00      	nop
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <readfromspi+0xd4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	2b01      	cmp	r3, #1
 8000822:	d1f7      	bne.n	8000814 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <readfromspi+0xd4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	68d9      	ldr	r1, [r3, #12]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	81ba      	strh	r2, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1da      	bne.n	80007f6 <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <readfromspi+0xd8>)
 8000842:	8819      	ldrh	r1, [r3, #0]
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <readfromspi+0xdc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf0c      	ite	eq
 800084c:	2301      	moveq	r3, #1
 800084e:	2300      	movne	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <readfromspi+0xe0>)
 8000856:	f001 fa3b 	bl	8001cd0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f7ff fedb 	bl	8000616 <decamutexoff>

    return 0;
 8000860:	2300      	movs	r3, #0
} // end readfromspi()
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000024 	.word	0x20000024
 8000870:	20000028 	.word	0x20000028
 8000874:	200001e8 	.word	0x200001e8
 8000878:	40020000 	.word	0x40020000

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <__NVIC_EnableIRQ+0x38>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db12      	blt.n	80008f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	490a      	ldr	r1, [pc, #40]	; (80008fc <__NVIC_DisableIRQ+0x44>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	3320      	adds	r3, #32
 80008e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008e4:	f3bf 8f4f 	dsb	sy
}
 80008e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ea:	f3bf 8f6f 	isb	sy
}
 80008ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100

08000900 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4613      	mov	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	e003      	b.n	8000922 <usleep+0x22>
    {
        __NOP();
 800091a:	bf00      	nop
    for (i = 0; i < usec; i++)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d3f7      	bcc.n	800091a <usleep+0x1a>
    }
    return 0;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 fed9 	bl	80016f8 <HAL_Delay>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <EXTI_GetITEnStatus+0x3c>)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100

08000990 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000996:	2301      	movs	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800099a:	2311      	movs	r3, #17
 800099c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	480a      	ldr	r0, [pc, #40]	; (80009d0 <reset_DWIC+0x40>)
 80009a8:	f001 f80e 	bl	80019c8 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2101      	movs	r1, #1
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <reset_DWIC+0x40>)
 80009b2:	f001 f98d 	bl	8001cd0 <HAL_GPIO_WritePin>

    usleep(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ffa2 	bl	8000900 <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f809 	bl	80009d4 <setup_DWICRSTnIRQ>
    Sleep(2);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff ffb8 	bl	8000938 <Sleep>
}
 80009c8:	bf00      	nop
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020400 	.word	0x40020400

080009d4 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d015      	beq.n	8000a0e <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ea:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4813      	ldr	r0, [pc, #76]	; (8000a44 <setup_DWICRSTnIRQ+0x70>)
 80009f8:	f000 ffe6 	bl	80019c8 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 80009fc:	2006      	movs	r0, #6
 80009fe:	f000 ffba 	bl	8001976 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2105      	movs	r1, #5
 8000a06:	2006      	movs	r0, #6
 8000a08:	f000 ff99 	bl	800193e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8000a0c:	e015      	b.n	8000a3a <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f000 ffbf 	bl	8001992 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000a14:	2301      	movs	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a18:	2311      	movs	r3, #17
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <setup_DWICRSTnIRQ+0x70>)
 8000a2c:	f000 ffcc 	bl	80019c8 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2101      	movs	r1, #1
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <setup_DWICRSTnIRQ+0x70>)
 8000a36:	f001 f94b 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40020400 	.word	0x40020400

08000a48 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <wakeup_device_with_io+0x24>)
 8000a52:	f001 f93d 	bl	8001cd0 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff ff6e 	bl	8000938 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <wakeup_device_with_io+0x24>)
 8000a62:	f001 f935 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40020400 	.word	0x40020400

08000a70 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <port_set_dw_ic_spi_slowrate+0x1c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2218      	movs	r2, #24
 8000a7a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <port_set_dw_ic_spi_slowrate+0x1c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fd97 	bl	80025b4 <HAL_SPI_Init>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000024 	.word	0x20000024

08000a90 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <port_set_dw_ic_spi_fastrate+0x1c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <port_set_dw_ic_spi_fastrate+0x1c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fd87 	bl	80025b4 <HAL_SPI_Init>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000024 	.word	0x20000024

08000ab0 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <port_DisableEXT_IRQ+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d103      	bne.n	8000ac4 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8000abc:	2028      	movs	r0, #40	; 0x28
 8000abe:	f7ff fefb 	bl	80008b8 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 8000ac2:	e002      	b.n	8000aca <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8000ac4:	2017      	movs	r0, #23
 8000ac6:	f7ff fef7 	bl	80008b8 <__NVIC_DisableIRQ>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001e9 	.word	0x200001e9

08000ad4 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <port_EnableEXT_IRQ+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d103      	bne.n	8000ae8 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8000ae0:	2028      	movs	r0, #40	; 0x28
 8000ae2:	f7ff fecb 	bl	800087c <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8000ae6:	e002      	b.n	8000aee <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8000ae8:	2017      	movs	r0, #23
 8000aea:	f7ff fec7 	bl	800087c <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200001e9 	.word	0x200001e9

08000af8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <port_GetEXT_IRQStatus+0x30>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8000b06:	2028      	movs	r0, #40	; 0x28
 8000b08:	f7ff ff22 	bl	8000950 <EXTI_GetITEnStatus>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	e004      	b.n	8000b1c <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8000b12:	2017      	movs	r0, #23
 8000b14:	f7ff ff1c 	bl	8000950 <EXTI_GetITEnStatus>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	607b      	str	r3, [r7, #4]
    }
    return status;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001e9 	.word	0x200001e9

08000b2c <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d014      	beq.n	8000b72 <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000b48:	e00a      	b.n	8000b60 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d007      	beq.n	8000b60 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 8000b50:	f003 fdb4 	bl	80046bc <dwt_readsysstatushi>
 8000b54:	6138      	str	r0, [r7, #16]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d115      	bne.n	8000b8c <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000b60:	f003 fd9a 	bl	8004698 <dwt_readsysstatuslo>
 8000b64:	6178      	str	r0, [r7, #20]
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0ec      	beq.n	8000b4a <waitforsysstatus+0x1e>
 8000b70:	e00d      	b.n	8000b8e <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00a      	beq.n	8000b8e <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8000b78:	bf00      	nop
 8000b7a:	f003 fd9f 	bl	80046bc <dwt_readsysstatushi>
 8000b7e:	6138      	str	r0, [r7, #16]
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	4013      	ands	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f7      	beq.n	8000b7a <waitforsysstatus+0x4e>
 8000b8a:	e000      	b.n	8000b8e <waitforsysstatus+0x62>
                    break;
 8000b8c:	bf00      	nop
    }

    if (lo_result != NULL)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]
    }
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <test_run_info>:
unsigned char T_light = 0;
unsigned char T_light_cnt = 0;


void test_run_info(unsigned char *data) // UART print code will be added.
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(LED_S_GPIO_Port,LED_S_Pin, GPIO_PIN_RESET);
	uint16_t data_length;

	data_length = strlen((const char *)data);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fb37 	bl	800022c <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, data_length, 1000);
 8000bc2:	89fa      	ldrh	r2, [r7, #14]
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <test_run_info+0x28>)
 8000bcc:	f002 ff8b 	bl	8003ae6 <HAL_UART_Transmit>

	//HAL_GPIO_WritePin(LED_S_GPIO_Port,LED_S_Pin, GPIO_PIN_SET);
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001a4 	.word	0x200001a4

08000bdc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bec:	d17e      	bne.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x110>
	 switch (T_light) {
 8000bee:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d052      	beq.n	8000c9c <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	dc74      	bgt.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d028      	beq.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x78>
			else{
				T_light_cnt++;
			}
			break;
		default:
			break;
 8000c02:	e06f      	b.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x108>
			tx_msg[8] = (unsigned char)(5 - T_light_cnt + 0x31);
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c10:	721a      	strb	r2, [r3, #8]
			if (T_light_cnt > 5){
 8000c12:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b05      	cmp	r3, #5
 8000c18:	d915      	bls.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x6a>
				T_light_cnt = 0;
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
				T_light = 2; //to green
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	701a      	strb	r2, [r3, #0]
				tx_msg[9] = 'G';
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c28:	2247      	movs	r2, #71	; 0x47
 8000c2a:	725a      	strb	r2, [r3, #9]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c32:	4833      	ldr	r0, [pc, #204]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c34:	f001 f84c 	bl	8001cd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	4830      	ldr	r0, [pc, #192]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c40:	f001 f846 	bl	8001cd0 <HAL_GPIO_WritePin>
			break;
 8000c44:	e04f      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x10a>
				T_light_cnt++;
 8000c46:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c50:	701a      	strb	r2, [r3, #0]
			break;
 8000c52:	e048      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x10a>
			tx_msg[8] = '0';
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c56:	2230      	movs	r2, #48	; 0x30
 8000c58:	721a      	strb	r2, [r3, #8]
			if (T_light_cnt > 3){
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d915      	bls.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0xb2>
				T_light_cnt = 0;
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
				T_light = 0; //to red
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
				tx_msg[9] = 'R';
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c70:	2252      	movs	r2, #82	; 0x52
 8000c72:	725a      	strb	r2, [r3, #9]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c7c:	f001 f828 	bl	8001cd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c86:	481e      	ldr	r0, [pc, #120]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c88:	f001 f822 	bl	8001cd0 <HAL_GPIO_WritePin>
			break;
 8000c8c:	e02b      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x10a>
				T_light_cnt++;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c98:	701a      	strb	r2, [r3, #0]
			break;
 8000c9a:	e024      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x10a>
			tx_msg[8] = '0';
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c9e:	2230      	movs	r2, #48	; 0x30
 8000ca0:	721a      	strb	r2, [r3, #8]
			if (T_light_cnt > 8){
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d915      	bls.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0xfa>
				T_light_cnt = 0;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
				T_light = 1; //to yellow
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
				tx_msg[9] = 'Y';
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000cb8:	2259      	movs	r2, #89	; 0x59
 8000cba:	725a      	strb	r2, [r3, #9]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000cc4:	f001 f804 	bl	8001cd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000cd0:	f000 fffe 	bl	8001cd0 <HAL_GPIO_WritePin>
			break;
 8000cd4:	e007      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x10a>
				T_light_cnt++;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ce0:	701a      	strb	r2, [r3, #0]
			break;
 8000ce2:	e000      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x10a>
			break;
 8000ce4:	bf00      	nop
	}
    HAL_TIM_Base_Start_IT(&htim2);
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000ce8:	f001 ff52 	bl	8002b90 <HAL_TIM_Base_Start_IT>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200001ea 	.word	0x200001ea
 8000cf8:	200001eb 	.word	0x200001eb
 8000cfc:	20000010 	.word	0x20000010
 8000d00:	40020400 	.word	0x40020400
 8000d04:	2000015c 	.word	0x2000015c

08000d08 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fc82 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f826 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f9f4 	bl	8001100 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d18:	f000 f88c 	bl	8000e34 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d1c:	f000 f9c6 	bl	80010ac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d20:	f000 f8be 	bl	8000ea0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d24:	f000 f974 	bl	8001010 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <main+0x50>)
 8000d2a:	f001 ff31 	bl	8002b90 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 8000d2e:	f7ff febf 	bl	8000ab0 <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fe4e 	bl	80009d4 <setup_DWICRSTnIRQ>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <main+0x54>)
 8000d40:	f000 ffc6 	bl	8001cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <main+0x54>)
 8000d4c:	f000 ffc0 	bl	8001cd0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  //ss_twr_responder_uwb();
	  Pdoa_uwb_tx();
 8000d50:	f7ff fbf6 	bl	8000540 <Pdoa_uwb_tx>
 8000d54:	e7fc      	b.n	8000d50 <main+0x48>
 8000d56:	bf00      	nop
 8000d58:	2000015c 	.word	0x2000015c
 8000d5c:	40020400 	.word	0x40020400

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f010 fe92 	bl	8011a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8000dd0:	2314      	movs	r3, #20
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000dd4:	23a0      	movs	r3, #160	; 0xa0
 8000dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 ff8d 	bl	8001d04 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df0:	f000 fa32 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 f9ee 	bl	80021f4 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e1e:	f000 fa1b 	bl	8001258 <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <MX_SPI1_Init+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e68:	2210      	movs	r2, #16
 8000e6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e80:	220a      	movs	r2, #10
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_SPI1_Init+0x64>)
 8000e86:	f001 fb95 	bl	80025b4 <HAL_SPI_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e90:	f000 f9e2 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200000bc 	.word	0x200000bc
 8000e9c:	40013000 	.word	0x40013000

08000ea0 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09a      	sub	sp, #104	; 0x68
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f010 fdd5 	bl	8011a98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eee:	4b46      	ldr	r3, [pc, #280]	; (8001008 <MX_TIM1_Init+0x168>)
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <MX_TIM1_Init+0x16c>)
 8000ef2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ef4:	4b44      	ldr	r3, [pc, #272]	; (8001008 <MX_TIM1_Init+0x168>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <MX_TIM1_Init+0x168>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f00:	4b41      	ldr	r3, [pc, #260]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f10:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1c:	483a      	ldr	r0, [pc, #232]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f1e:	f001 fde7 	bl	8002af0 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000f28:	f000 f996 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f30:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f36:	4619      	mov	r1, r3
 8000f38:	4833      	ldr	r0, [pc, #204]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f3a:	f002 f849 	bl	8002fd0 <HAL_TIM_ConfigClockSource>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f44:	f000 f988 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f48:	482f      	ldr	r0, [pc, #188]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f4a:	f001 fe83 	bl	8002c54 <HAL_TIM_OC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000f54:	f000 f980 	bl	8001258 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f58:	2306      	movs	r3, #6
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f64:	4619      	mov	r1, r3
 8000f66:	4828      	ldr	r0, [pc, #160]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f68:	f002 f8f9 	bl	800315e <HAL_TIM_SlaveConfigSynchro>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000f72:	f000 f971 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f82:	4619      	mov	r1, r3
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <MX_TIM1_Init+0x168>)
 8000f86:	f002 fc8d 	bl	80038a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000f90:	f000 f962 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <MX_TIM1_Init+0x168>)
 8000fba:	f001 ffad 	bl	8002f18 <HAL_TIM_OC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000fc4:	f000 f948 	bl	8001258 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <MX_TIM1_Init+0x168>)
 8000fec:	f002 fcc8 	bl	8003980 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000ff6:	f000 f92f 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <MX_TIM1_Init+0x168>)
 8000ffc:	f000 f9e6 	bl	80013cc <HAL_TIM_MspPostInit>

}
 8001000:	bf00      	nop
 8001002:	3768      	adds	r7, #104	; 0x68
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000114 	.word	0x20000114
 800100c:	40010000 	.word	0x40010000

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_TIM2_Init+0x98>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001036:	f242 3228 	movw	r2, #9000	; 0x2328
 800103a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001044:	f241 3287 	movw	r2, #4999	; 0x1387
 8001048:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_TIM2_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001058:	f001 fd4a 	bl	8002af0 <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001062:	f000 f8f9 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001074:	f001 ffac 	bl	8002fd0 <HAL_TIM_ConfigClockSource>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800107e:	f000 f8eb 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001090:	f002 fc08 	bl	80038a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800109a:	f000 f8dd 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000015c 	.word	0x2000015c

080010ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART1_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f002 fcb2 	bl	8003a4c <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f8b3 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001a4 	.word	0x200001a4
 80010fc:	40011000 	.word	0x40011000

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <MX_GPIO_Init+0x148>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a4a      	ldr	r2, [pc, #296]	; (8001248 <MX_GPIO_Init+0x148>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <MX_GPIO_Init+0x148>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <MX_GPIO_Init+0x148>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a43      	ldr	r2, [pc, #268]	; (8001248 <MX_GPIO_Init+0x148>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <MX_GPIO_Init+0x148>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <MX_GPIO_Init+0x148>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a3c      	ldr	r2, [pc, #240]	; (8001248 <MX_GPIO_Init+0x148>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <MX_GPIO_Init+0x148>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <MX_GPIO_Init+0x148>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a35      	ldr	r2, [pc, #212]	; (8001248 <MX_GPIO_Init+0x148>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <MX_GPIO_Init+0x148>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_S_GPIO_Port, LED_S_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	482f      	ldr	r0, [pc, #188]	; (800124c <MX_GPIO_Init+0x14c>)
 800118e:	f000 fd9f 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2110      	movs	r1, #16
 8001196:	482e      	ldr	r0, [pc, #184]	; (8001250 <MX_GPIO_Init+0x150>)
 8001198:	f000 fd9a 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2103      	movs	r1, #3
 80011a0:	482c      	ldr	r0, [pc, #176]	; (8001254 <MX_GPIO_Init+0x154>)
 80011a2:	f000 fd95 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_r_Pin|LED_y_Pin|LED_g_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011ac:	4829      	ldr	r0, [pc, #164]	; (8001254 <MX_GPIO_Init+0x154>)
 80011ae:	f000 fd8f 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_S_Pin */
  GPIO_InitStruct.Pin = LED_S_Pin;
 80011b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_S_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4820      	ldr	r0, [pc, #128]	; (800124c <MX_GPIO_Init+0x14c>)
 80011cc:	f000 fbfc 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin|DW_IRQn_Pin;
 80011d0:	2306      	movs	r3, #6
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	481a      	ldr	r0, [pc, #104]	; (8001250 <MX_GPIO_Init+0x150>)
 80011e6:	f000 fbef 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80011ea:	2310      	movs	r3, #16
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x150>)
 8001202:	f000 fbe1 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_NSS1_WAKEUP_Pin;
 8001206:	2303      	movs	r3, #3
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_GPIO_Init+0x154>)
 800121e:	f000 fbd3 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_r_Pin LED_y_Pin LED_g_Pin */
  GPIO_InitStruct.Pin = LED_r_Pin|LED_y_Pin|LED_g_Pin;
 8001222:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	2301      	movs	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_GPIO_Init+0x154>)
 800123c:	f000 fbc4 	bl	80019c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40020800 	.word	0x40020800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12b      	bne.n	800132e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_SPI_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800130e:	23e0      	movs	r3, #224	; 0xe0
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800131e:	2305      	movs	r3, #5
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_SPI_MspInit+0x8c>)
 800132a:	f000 fb4d 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40013000 	.word	0x40013000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_TIM_Base_MspInit+0x80>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d116      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_TIM_Base_MspInit+0x84>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_TIM_Base_MspInit+0x84>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_TIM_Base_MspInit+0x84>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	201b      	movs	r0, #27
 8001378:	f000 fae1 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800137c:	201b      	movs	r0, #27
 800137e:	f000 fafa 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001382:	e01a      	b.n	80013ba <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138c:	d115      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_TIM_Base_MspInit+0x84>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0x84>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_TIM_Base_MspInit+0x84>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	201c      	movs	r0, #28
 80013b0:	f000 fac5 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b4:	201c      	movs	r0, #28
 80013b6:	f000 fade 	bl	8001976 <HAL_NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40010000 	.word	0x40010000
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d11e      	bne.n	800142c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800140a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_TIM_MspPostInit+0x70>)
 8001428:	f000 face 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40010000 	.word	0x40010000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x88>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149a:	23c0      	movs	r3, #192	; 0xc0
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014aa:	2307      	movs	r3, #7
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_MspInit+0x8c>)
 80014b6:	f000 fa87 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400

080014d0 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f8db 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM1_CC_IRQHandler+0x10>)
 800150e:	f001 fbfa 	bl	8002d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000114 	.word	0x20000114

0800151c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM2_IRQHandler+0x10>)
 8001522:	f001 fbf0 	bl	8002d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000015c 	.word	0x2000015c

08001530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <_sbrk+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <_sbrk+0x60>)
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x64>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <_sbrk+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001560:	f010 fa50 	bl	8011a04 <__errno>
 8001564:	4603      	mov	r3, r0
 8001566:	220c      	movs	r2, #12
 8001568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156e:	e009      	b.n	8001584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <_sbrk+0x64>)
 8001580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20020000 	.word	0x20020000
 8001590:	00000400 	.word	0x00000400
 8001594:	200001ec 	.word	0x200001ec
 8001598:	200003f8 	.word	0x200003f8

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c6:	490e      	ldr	r1, [pc, #56]	; (8001600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015dc:	4c0b      	ldr	r4, [pc, #44]	; (800160c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ea:	f7ff ffd7 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f010 fa23 	bl	8011a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff fb89 	bl	8000d08 <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001604:	08012190 	.word	0x08012190
  ldr r2, =_sbss
 8001608:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800160c:	200003f8 	.word	0x200003f8

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f973 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fe0c 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f999 	bl	80019ae <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001694:	f000 f953 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000002c 	.word	0x2000002c
 80016b0:	20000034 	.word	0x20000034
 80016b4:	20000030 	.word	0x20000030

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000034 	.word	0x20000034
 80016dc:	200001f0 	.word	0x200001f0

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200001f0 	.word	0x200001f0

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff ffee 	bl	80016e0 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffde 	bl	80016e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000034 	.word	0x20000034

08001740 <__NVIC_SetPriorityGrouping>:
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_DisableIRQ>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db12      	blt.n	8001818 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	490a      	ldr	r1, [pc, #40]	; (8001824 <__NVIC_DisableIRQ+0x44>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	3320      	adds	r3, #32
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800180c:	f3bf 8f4f 	dsb	sy
}
 8001810:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001812:	f3bf 8f6f 	isb	sy
}
 8001816:	bf00      	nop
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff05 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff1a 	bl	8001788 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff0d 	bl	80017a4 <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff1d 	bl	80017e0 <__NVIC_DisableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff94 	bl	80018e4 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e159      	b.n	8001c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8148 	bne.w	8001c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80a2 	beq.w	8001c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x202>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x1fe>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a47      	ldr	r2, [pc, #284]	; (8001cc0 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x1fa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x1f6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a45      	ldr	r2, [pc, #276]	; (8001cc8 <HAL_GPIO_Init+0x300>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x1f2>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c38:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c62:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f aea2 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cec:	e003      	b.n	8001cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	041a      	lsls	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	619a      	str	r2, [r3, #24]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e267      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d075      	beq.n	8001e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d00c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b85      	ldr	r3, [pc, #532]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d112      	bne.n	8001d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	4b82      	ldr	r3, [pc, #520]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d46:	d10b      	bne.n	8001d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	4b7e      	ldr	r3, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d05b      	beq.n	8001e0c <HAL_RCC_OscConfig+0x108>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d157      	bne.n	8001e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e242      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d106      	bne.n	8001d78 <HAL_RCC_OscConfig+0x74>
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a75      	ldr	r2, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xb0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x98>
 8001d82:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6f      	ldr	r2, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6c      	ldr	r2, [pc, #432]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xb0>
 8001d9c:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a68      	ldr	r2, [pc, #416]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a65      	ldr	r2, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc90 	bl	80016e0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fc8c 	bl	80016e0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e207      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xc0>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fc7c 	bl	80016e0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fc78 	bl	80016e0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1f3      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0xe8>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x152>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1c7      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4937      	ldr	r1, [pc, #220]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_OscConfig+0x244>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fc31 	bl	80016e0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff fc2d 	bl	80016e0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1a8      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4925      	ldr	r1, [pc, #148]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0x244>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fc10 	bl	80016e0 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fc0c 	bl	80016e0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e187      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d036      	beq.n	8001f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d016      	beq.n	8001f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_RCC_OscConfig+0x248>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff fbf0 	bl	80016e0 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f04:	f7ff fbec 	bl	80016e0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e167      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x240>)
 8001f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x200>
 8001f22:	e01b      	b.n	8001f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_OscConfig+0x248>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fbd9 	bl	80016e0 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	e00e      	b.n	8001f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff fbd5 	bl	80016e0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d907      	bls.n	8001f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e150      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
 8001f44:	40023800 	.word	0x40023800
 8001f48:	42470000 	.word	0x42470000
 8001f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ea      	bne.n	8001f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8097 	beq.w	8002098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b81      	ldr	r3, [pc, #516]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a7c      	ldr	r2, [pc, #496]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b77      	ldr	r3, [pc, #476]	; (8002178 <HAL_RCC_OscConfig+0x474>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	4b74      	ldr	r3, [pc, #464]	; (8002178 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a73      	ldr	r2, [pc, #460]	; (8002178 <HAL_RCC_OscConfig+0x474>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fb95 	bl	80016e0 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7ff fb91 	bl	80016e0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e10c      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x474>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x2ea>
 8001fe0:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	4a63      	ldr	r2, [pc, #396]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6713      	str	r3, [r2, #112]	; 0x70
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x324>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x30c>
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a5e      	ldr	r2, [pc, #376]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	4b5c      	ldr	r3, [pc, #368]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a5b      	ldr	r2, [pc, #364]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0x324>
 8002010:	4b58      	ldr	r3, [pc, #352]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	4a57      	ldr	r2, [pc, #348]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6713      	str	r3, [r2, #112]	; 0x70
 800201c:	4b55      	ldr	r3, [pc, #340]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a54      	ldr	r2, [pc, #336]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002022:	f023 0304 	bic.w	r3, r3, #4
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff fb56 	bl	80016e0 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff fb52 	bl	80016e0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0cb      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204e:	4b49      	ldr	r3, [pc, #292]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0ee      	beq.n	8002038 <HAL_RCC_OscConfig+0x334>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205c:	f7ff fb40 	bl	80016e0 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7ff fb3c 	bl	80016e0 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e0b5      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ee      	bne.n	8002064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a38      	ldr	r2, [pc, #224]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a1 	beq.w	80021e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d05c      	beq.n	8002168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d141      	bne.n	800213a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_RCC_OscConfig+0x478>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fb10 	bl	80016e0 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff fb0c 	bl	80016e0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e087      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	061b      	lsls	r3, r3, #24
 8002106:	491b      	ldr	r1, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_OscConfig+0x478>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff fae5 	bl	80016e0 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211a:	f7ff fae1 	bl	80016e0 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e05c      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x416>
 8002138:	e054      	b.n	80021e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_RCC_OscConfig+0x478>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff face 	bl	80016e0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002148:	f7ff faca 	bl	80016e0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e045      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_OscConfig+0x470>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x444>
 8002166:	e03d      	b.n	80021e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e038      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000
 800217c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x4ec>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d028      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d121      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d11a      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d111      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0cc      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d90c      	bls.n	8002230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	494d      	ldr	r1, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d044      	beq.n	8002314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e067      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4934      	ldr	r1, [pc, #208]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7ff f9fc 	bl	80016e0 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7ff f9f8 	bl	80016e0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e04f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d20c      	bcs.n	800233c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e032      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4916      	ldr	r1, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237a:	f000 f821 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800237e:	4602      	mov	r2, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	490a      	ldr	r1, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	5ccb      	ldrb	r3, [r1, r3]
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f95c 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023c00 	.word	0x40023c00
 80023b0:	40023800 	.word	0x40023800
 80023b4:	08011c90 	.word	0x08011c90
 80023b8:	2000002c 	.word	0x2000002c
 80023bc:	20000030 	.word	0x20000030

080023c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c4:	b090      	sub	sp, #64	; 0x40
 80023c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
 80023cc:	2300      	movs	r3, #0
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d0:	2300      	movs	r3, #0
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_GetSysClockFreq+0x180>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d00d      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x40>
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	f200 80a1 	bhi.w	800252c <HAL_RCC_GetSysClockFreq+0x16c>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x34>
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x3a>
 80023f2:	e09b      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_GetSysClockFreq+0x184>)
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023f8:	e09b      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023fa:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_GetSysClockFreq+0x188>)
 80023fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023fe:	e098      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002400:	4b4f      	ldr	r3, [pc, #316]	; (8002540 <HAL_RCC_GetSysClockFreq+0x180>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800240a:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <HAL_RCC_GetSysClockFreq+0x180>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d028      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCC_GetSysClockFreq+0x180>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	2200      	movs	r2, #0
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	627a      	str	r2, [r7, #36]	; 0x24
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002428:	2100      	movs	r1, #0
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_GetSysClockFreq+0x188>)
 800242c:	fb03 f201 	mul.w	r2, r3, r1
 8002430:	2300      	movs	r3, #0
 8002432:	fb00 f303 	mul.w	r3, r0, r3
 8002436:	4413      	add	r3, r2
 8002438:	4a43      	ldr	r2, [pc, #268]	; (8002548 <HAL_RCC_GetSysClockFreq+0x188>)
 800243a:	fba0 1202 	umull	r1, r2, r0, r2
 800243e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002440:	460a      	mov	r2, r1
 8002442:	62ba      	str	r2, [r7, #40]	; 0x28
 8002444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002446:	4413      	add	r3, r2
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244c:	2200      	movs	r2, #0
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	61fa      	str	r2, [r7, #28]
 8002452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800245a:	f7fd fef1 	bl	8000240 <__aeabi_uldivmod>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4613      	mov	r3, r2
 8002464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002466:	e053      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	4b35      	ldr	r3, [pc, #212]	; (8002540 <HAL_RCC_GetSysClockFreq+0x180>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	2200      	movs	r2, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	617a      	str	r2, [r7, #20]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800247a:	f04f 0b00 	mov.w	fp, #0
 800247e:	4652      	mov	r2, sl
 8002480:	465b      	mov	r3, fp
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002490:	0150      	lsls	r0, r2, #5
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	ebb2 080a 	subs.w	r8, r2, sl
 800249a:	eb63 090b 	sbc.w	r9, r3, fp
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024b2:	ebb2 0408 	subs.w	r4, r2, r8
 80024b6:	eb63 0509 	sbc.w	r5, r3, r9
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	00eb      	lsls	r3, r5, #3
 80024c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c8:	00e2      	lsls	r2, r4, #3
 80024ca:	4614      	mov	r4, r2
 80024cc:	461d      	mov	r5, r3
 80024ce:	eb14 030a 	adds.w	r3, r4, sl
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	eb45 030b 	adc.w	r3, r5, fp
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e6:	4629      	mov	r1, r5
 80024e8:	028b      	lsls	r3, r1, #10
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f0:	4621      	mov	r1, r4
 80024f2:	028a      	lsls	r2, r1, #10
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	2200      	movs	r2, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	60fa      	str	r2, [r7, #12]
 8002500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002504:	f7fd fe9c 	bl	8000240 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_GetSysClockFreq+0x180>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetSysClockFreq+0x184>)
 800252e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002534:	4618      	mov	r0, r3
 8002536:	3740      	adds	r7, #64	; 0x40
 8002538:	46bd      	mov	sp, r7
 800253a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	00f42400 	.word	0x00f42400
 8002548:	017d7840 	.word	0x017d7840

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	2000002c 	.word	0x2000002c

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08011ca0 	.word	0x08011ca0

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002590:	f7ff ffdc 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08011ca0 	.word	0x08011ca0

080025b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07b      	b.n	80026be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d108      	bne.n	80025e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d6:	d009      	beq.n	80025ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
 80025de:	e005      	b.n	80025ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fe54 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0104 	and.w	r1, r3, #4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	f003 0210 	and.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b088      	sub	sp, #32
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_SPI_Transmit+0x22>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e126      	b.n	8002936 <HAL_SPI_Transmit+0x270>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026f0:	f7fe fff6 	bl	80016e0 <HAL_GetTick>
 80026f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d002      	beq.n	800270c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002706:	2302      	movs	r3, #2
 8002708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800270a:	e10b      	b.n	8002924 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_SPI_Transmit+0x52>
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800271c:	e102      	b.n	8002924 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2203      	movs	r2, #3
 8002722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002764:	d10f      	bne.n	8002786 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002774:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002784:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d007      	beq.n	80027a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ac:	d14b      	bne.n	8002846 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_SPI_Transmit+0xf6>
 80027b6:	8afb      	ldrh	r3, [r7, #22]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d13e      	bne.n	800283a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027e0:	e02b      	b.n	800283a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d112      	bne.n	8002816 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	86da      	strh	r2, [r3, #54]	; 0x36
 8002814:	e011      	b.n	800283a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002816:	f7fe ff63 	bl	80016e0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d803      	bhi.n	800282e <HAL_SPI_Transmit+0x168>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282c:	d102      	bne.n	8002834 <HAL_SPI_Transmit+0x16e>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002838:	e074      	b.n	8002924 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ce      	bne.n	80027e2 <HAL_SPI_Transmit+0x11c>
 8002844:	e04c      	b.n	80028e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_SPI_Transmit+0x18e>
 800284e:	8afb      	ldrh	r3, [r7, #22]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d140      	bne.n	80028d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800287a:	e02c      	b.n	80028d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d113      	bne.n	80028b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	330c      	adds	r3, #12
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80028b0:	e011      	b.n	80028d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028b2:	f7fe ff15 	bl	80016e0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d803      	bhi.n	80028ca <HAL_SPI_Transmit+0x204>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c8:	d102      	bne.n	80028d0 <HAL_SPI_Transmit+0x20a>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028d4:	e026      	b.n	8002924 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1cd      	bne.n	800287c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f8c1 	bl	8002a6c <SPI_EndRxTxTransaction>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e000      	b.n	8002924 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002934:	7ffb      	ldrb	r3, [r7, #31]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800294c:	b2db      	uxtb	r3, r3
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800296c:	f7fe feb8 	bl	80016e0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4413      	add	r3, r2
 800297a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800297c:	f7fe feb0 	bl	80016e0 <HAL_GetTick>
 8002980:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002982:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	015b      	lsls	r3, r3, #5
 8002988:	0d1b      	lsrs	r3, r3, #20
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002992:	e054      	b.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299a:	d050      	beq.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800299c:	f7fe fea0 	bl	80016e0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d902      	bls.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d13d      	bne.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ca:	d111      	bne.n	80029f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d4:	d004      	beq.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d107      	bne.n	80029f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f8:	d10f      	bne.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e017      	b.n	8002a5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4013      	ands	r3, r2
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d19b      	bne.n	8002994 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000002c 	.word	0x2000002c

08002a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <SPI_EndRxTxTransaction+0x7c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <SPI_EndRxTxTransaction+0x80>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0d5b      	lsrs	r3, r3, #21
 8002a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a96:	d112      	bne.n	8002abe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff ff5a 	bl	800295c <SPI_WaitFlagStateUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e00f      	b.n	8002ade <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d0f2      	beq.n	8002abe <SPI_EndRxTxTransaction+0x52>
 8002ad8:	e000      	b.n	8002adc <SPI_EndRxTxTransaction+0x70>
        break;
 8002ada:	bf00      	nop
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000002c 	.word	0x2000002c
 8002aec:	165e9f81 	.word	0x165e9f81

08002af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e041      	b.n	8002b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fc14 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fb80 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d001      	beq.n	8002ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e044      	b.n	8002c32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x6c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d013      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x6c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_TIM_Base_Start_IT+0xb4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x6c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <HAL_TIM_Base_Start_IT+0xb8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x6c>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_TIM_Base_Start_IT+0xbc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x6c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <HAL_TIM_Base_Start_IT+0xc0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d010      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	e007      	b.n	8002c30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40000c00 	.word	0x40000c00
 8002c50:	40014000 	.word	0x40014000

08002c54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e041      	b.n	8002cea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f839 	bl	8002cf2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 face 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d122      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d11b      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0202 	mvn.w	r2, #2
 8002d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa54 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002d4e:	e005      	b.n	8002d5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fa46 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa57 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d122      	bne.n	8002db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d11b      	bne.n	8002db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0204 	mvn.w	r2, #4
 8002d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa2a 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002da2:	e005      	b.n	8002db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa1c 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa2d 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d122      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11b      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0208 	mvn.w	r2, #8
 8002dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fa00 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002df6:	e005      	b.n	8002e04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f9f2 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa03 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d122      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d11b      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0210 	mvn.w	r2, #16
 8002e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2208      	movs	r2, #8
 8002e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f9d6 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002e4a:	e005      	b.n	8002e58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9c8 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9d9 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10e      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0201 	mvn.w	r2, #1
 8002e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fd fea9 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b80      	cmp	r3, #128	; 0x80
 8002e96:	d10e      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d107      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fdc1 	bl	8003a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d10e      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d107      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f99e 	bl	800321e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d10e      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d107      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0220 	mvn.w	r2, #32
 8002f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fd8b 	bl	8003a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e048      	b.n	8002fc8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d839      	bhi.n	8002fb8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08002fb9 	.word	0x08002fb9
 8002f54:	08002fb9 	.word	0x08002fb9
 8002f58:	08002fb9 	.word	0x08002fb9
 8002f5c:	08002f8f 	.word	0x08002f8f
 8002f60:	08002fb9 	.word	0x08002fb9
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08002fb9 	.word	0x08002fb9
 8002f6c:	08002f9d 	.word	0x08002f9d
 8002f70:	08002fb9 	.word	0x08002fb9
 8002f74:	08002fb9 	.word	0x08002fb9
 8002f78:	08002fb9 	.word	0x08002fb9
 8002f7c:	08002fab 	.word	0x08002fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f9d4 	bl	8003334 <TIM_OC1_SetConfig>
      break;
 8002f8c:	e017      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fa33 	bl	8003400 <TIM_OC2_SetConfig>
      break;
 8002f9a:	e010      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fa98 	bl	80034d8 <TIM_OC3_SetConfig>
      break;
 8002fa8:	e009      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fafb 	bl	80035ac <TIM_OC4_SetConfig>
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
      break;
 8002fbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_ConfigClockSource+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0b4      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x186>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800300a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003024:	d03e      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302a:	f200 8087 	bhi.w	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	f000 8086 	beq.w	8003142 <HAL_TIM_ConfigClockSource+0x172>
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d87f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b70      	cmp	r3, #112	; 0x70
 800303e:	d01a      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xa6>
 8003040:	2b70      	cmp	r3, #112	; 0x70
 8003042:	d87b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d050      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x11a>
 8003048:	2b60      	cmp	r3, #96	; 0x60
 800304a:	d877      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b50      	cmp	r3, #80	; 0x50
 800304e:	d03c      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xfa>
 8003050:	2b50      	cmp	r3, #80	; 0x50
 8003052:	d873      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d058      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x13a>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d86f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b30      	cmp	r3, #48	; 0x30
 800305e:	d064      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	d86b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d060      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d867      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05c      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d05a      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	e062      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f000 fbec 	bl	8003862 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	609a      	str	r2, [r3, #8]
      break;
 80030a2:	e04f      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f000 fbd5 	bl	8003862 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c6:	609a      	str	r2, [r3, #8]
      break;
 80030c8:	e03c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fb49 	bl	800376e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2150      	movs	r1, #80	; 0x50
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fba2 	bl	800382c <TIM_ITRx_SetConfig>
      break;
 80030e8:	e02c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 fb68 	bl	80037cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2160      	movs	r1, #96	; 0x60
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fb92 	bl	800382c <TIM_ITRx_SetConfig>
      break;
 8003108:	e01c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	461a      	mov	r2, r3
 8003118:	f000 fb29 	bl	800376e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fb82 	bl	800382c <TIM_ITRx_SetConfig>
      break;
 8003128:	e00c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 fb79 	bl	800382c <TIM_ITRx_SetConfig>
      break;
 800313a:	e003      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      break;
 8003140:	e000      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003172:	2302      	movs	r3, #2
 8003174:	e031      	b.n	80031da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa5f 	bl	800364c <TIM_SlaveTimer_SetConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e018      	b.n	80031da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a31      	ldr	r2, [pc, #196]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a30      	ldr	r2, [pc, #192]	; (8003320 <TIM_Base_SetConfig+0xec>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d017      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a21      	ldr	r2, [pc, #132]	; (8003320 <TIM_Base_SetConfig+0xec>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <TIM_Base_SetConfig+0xf4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <TIM_Base_SetConfig+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_Base_SetConfig+0xfc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d108      	bne.n	80032d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	615a      	str	r2, [r3, #20]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800

08003334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 0302 	bic.w	r3, r3, #2
 800337c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <TIM_OC1_SetConfig+0xc8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d10c      	bne.n	80033aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0308 	bic.w	r3, r3, #8
 8003396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <TIM_OC1_SetConfig+0xc8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d111      	bne.n	80033d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40010000 	.word	0x40010000

08003400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0210 	bic.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0320 	bic.w	r3, r3, #32
 800344a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <TIM_OC2_SetConfig+0xd4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d10d      	bne.n	800347c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <TIM_OC2_SetConfig+0xd4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d113      	bne.n	80034ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000

080034d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <TIM_OC3_SetConfig+0xd0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <TIM_OC3_SetConfig+0xd0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d113      	bne.n	8003582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	621a      	str	r2, [r3, #32]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40010000 	.word	0x40010000

080035ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	031b      	lsls	r3, r3, #12
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <TIM_OC4_SetConfig+0x9c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d109      	bne.n	8003620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000

0800364c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003668:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f023 0307 	bic.w	r3, r3, #7
 800367a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b70      	cmp	r3, #112	; 0x70
 8003694:	d01a      	beq.n	80036cc <TIM_SlaveTimer_SetConfig+0x80>
 8003696:	2b70      	cmp	r3, #112	; 0x70
 8003698:	d860      	bhi.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 800369a:	2b60      	cmp	r3, #96	; 0x60
 800369c:	d054      	beq.n	8003748 <TIM_SlaveTimer_SetConfig+0xfc>
 800369e:	2b60      	cmp	r3, #96	; 0x60
 80036a0:	d85c      	bhi.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036a2:	2b50      	cmp	r3, #80	; 0x50
 80036a4:	d046      	beq.n	8003734 <TIM_SlaveTimer_SetConfig+0xe8>
 80036a6:	2b50      	cmp	r3, #80	; 0x50
 80036a8:	d858      	bhi.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d019      	beq.n	80036e2 <TIM_SlaveTimer_SetConfig+0x96>
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d854      	bhi.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d055      	beq.n	8003762 <TIM_SlaveTimer_SetConfig+0x116>
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d850      	bhi.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d051      	beq.n	8003762 <TIM_SlaveTimer_SetConfig+0x116>
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d84c      	bhi.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d04d      	beq.n	8003762 <TIM_SlaveTimer_SetConfig+0x116>
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d04b      	beq.n	8003762 <TIM_SlaveTimer_SetConfig+0x116>
 80036ca:	e047      	b.n	800375c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68d9      	ldr	r1, [r3, #12]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f000 f8c1 	bl	8003862 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80036e0:	e040      	b.n	8003764 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d101      	bne.n	80036ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e03b      	b.n	8003766 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003714:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	4313      	orrs	r3, r2
 8003720:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
      break;
 8003732:	e017      	b.n	8003764 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6899      	ldr	r1, [r3, #8]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	461a      	mov	r2, r3
 8003742:	f000 f814 	bl	800376e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003746:	e00d      	b.n	8003764 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	461a      	mov	r2, r3
 8003756:	f000 f839 	bl	80037cc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800375a:	e003      	b.n	8003764 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
      break;
 8003760:	e000      	b.n	8003764 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003762:	bf00      	nop
  }

  return status;
 8003764:	7dfb      	ldrb	r3, [r7, #23]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 0201 	bic.w	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 030a 	bic.w	r3, r3, #10
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f023 0210 	bic.w	r2, r3, #16
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	031b      	lsls	r3, r3, #12
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003808:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	f043 0307 	orr.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	609a      	str	r2, [r3, #8]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003862:	b480      	push	{r7}
 8003864:	b087      	sub	sp, #28
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	021a      	lsls	r2, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	431a      	orrs	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	609a      	str	r2, [r3, #8]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e050      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d013      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a13      	ldr	r2, [pc, #76]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40014000 	.word	0x40014000

08003980 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003998:	2302      	movs	r3, #2
 800399a:	e03d      	b.n	8003a18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e03f      	b.n	8003ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fce4 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f929 	bl	8003ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b08a      	sub	sp, #40	; 0x28
 8003aea:	af02      	add	r7, sp, #8
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d17c      	bne.n	8003c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_UART_Transmit+0x2c>
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e075      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x3e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e06e      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2221      	movs	r2, #33	; 0x21
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b3a:	f7fd fdd1 	bl	80016e0 <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	88fa      	ldrh	r2, [r7, #6]
 8003b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d108      	bne.n	8003b68 <HAL_UART_Transmit+0x82>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e003      	b.n	8003b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b78:	e02a      	b.n	8003bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f840 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e036      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3302      	adds	r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e007      	b.n	8003bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1cf      	bne.n	8003b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	; 0x40
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f810 	bl	8003c0a <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e006      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b090      	sub	sp, #64	; 0x40
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	e050      	b.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c22:	d04c      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c2a:	f7fd fd59 	bl	80016e0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d241      	bcs.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5a:	637a      	str	r2, [r7, #52]	; 0x34
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3314      	adds	r3, #20
 8003c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8e:	623a      	str	r2, [r7, #32]
 8003c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	69f9      	ldr	r1, [r7, #28]
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e5      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e00f      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d09f      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3740      	adds	r7, #64	; 0x40
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b0c0      	sub	sp, #256	; 0x100
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	ea40 0301 	orr.w	r3, r0, r1
 8003d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d40:	f021 010c 	bic.w	r1, r1, #12
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	6999      	ldr	r1, [r3, #24]
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	ea40 0301 	orr.w	r3, r0, r1
 8003d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b8f      	ldr	r3, [pc, #572]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d005      	beq.n	8003d88 <UART_SetConfig+0xa0>
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b8d      	ldr	r3, [pc, #564]	; (8003fb8 <UART_SetConfig+0x2d0>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d104      	bne.n	8003d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7fe fc00 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8003d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d90:	e003      	b.n	8003d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d92:	f7fe fbe7 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003d96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	f040 810c 	bne.w	8003fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	1891      	adds	r1, r2, r2
 8003dc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dca:	4621      	mov	r1, r4
 8003dcc:	eb12 0801 	adds.w	r8, r2, r1
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	eb43 0901 	adc.w	r9, r3, r1
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dea:	4690      	mov	r8, r2
 8003dec:	4699      	mov	r9, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	eb18 0303 	adds.w	r3, r8, r3
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003df8:	462b      	mov	r3, r5
 8003dfa:	eb49 0303 	adc.w	r3, r9, r3
 8003dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e16:	460b      	mov	r3, r1
 8003e18:	18db      	adds	r3, r3, r3
 8003e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	eb42 0303 	adc.w	r3, r2, r3
 8003e22:	657b      	str	r3, [r7, #84]	; 0x54
 8003e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e2c:	f7fc fa08 	bl	8000240 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b61      	ldr	r3, [pc, #388]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003e36:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	011c      	lsls	r4, r3, #4
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e60:	4641      	mov	r1, r8
 8003e62:	eb12 0a01 	adds.w	sl, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb43 0b01 	adc.w	fp, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e80:	4692      	mov	sl, r2
 8003e82:	469b      	mov	fp, r3
 8003e84:	4643      	mov	r3, r8
 8003e86:	eb1a 0303 	adds.w	r3, sl, r3
 8003e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	eb4b 0303 	adc.w	r3, fp, r3
 8003e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eac:	460b      	mov	r3, r1
 8003eae:	18db      	adds	r3, r3, r3
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ec2:	f7fc f9bd 	bl	8000240 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2301 	umull	r2, r3, r3, r1
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2264      	movs	r2, #100	; 0x64
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	1acb      	subs	r3, r1, r3
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ee2:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ef0:	441c      	add	r4, r3
 8003ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003efc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f14:	4641      	mov	r1, r8
 8003f16:	1851      	adds	r1, r2, r1
 8003f18:	6339      	str	r1, [r7, #48]	; 0x30
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	414b      	adcs	r3, r1
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	00cb      	lsls	r3, r1, #3
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f36:	4651      	mov	r1, sl
 8003f38:	00ca      	lsls	r2, r1, #3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4642      	mov	r2, r8
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f48:	464b      	mov	r3, r9
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f68:	460b      	mov	r3, r1
 8003f6a:	18db      	adds	r3, r3, r3
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	4613      	mov	r3, r2
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f7e:	f7fc f95f 	bl	8000240 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 0207 	and.w	r2, r3, #7
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4422      	add	r2, r4
 8003fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb0:	e105      	b.n	80041be <UART_SetConfig+0x4d6>
 8003fb2:	bf00      	nop
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	40011400 	.word	0x40011400
 8003fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	1891      	adds	r1, r2, r2
 8003fd8:	6239      	str	r1, [r7, #32]
 8003fda:	415b      	adcs	r3, r3
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	1854      	adds	r4, r2, r1
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	eb43 0501 	adc.w	r5, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	00eb      	lsls	r3, r5, #3
 8003ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	4643      	mov	r3, r8
 8004002:	18e3      	adds	r3, r4, r3
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004008:	464b      	mov	r3, r9
 800400a:	eb45 0303 	adc.w	r3, r5, r3
 800400e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800401e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800402e:	4629      	mov	r1, r5
 8004030:	008b      	lsls	r3, r1, #2
 8004032:	4621      	mov	r1, r4
 8004034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004038:	4621      	mov	r1, r4
 800403a:	008a      	lsls	r2, r1, #2
 800403c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004040:	f7fc f8fe 	bl	8000240 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4b60      	ldr	r3, [pc, #384]	; (80041cc <UART_SetConfig+0x4e4>)
 800404a:	fba3 2302 	umull	r2, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	011c      	lsls	r4, r3, #4
 8004052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800405c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	1891      	adds	r1, r2, r2
 800406a:	61b9      	str	r1, [r7, #24]
 800406c:	415b      	adcs	r3, r3
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004074:	4641      	mov	r1, r8
 8004076:	1851      	adds	r1, r2, r1
 8004078:	6139      	str	r1, [r7, #16]
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800408c:	4659      	mov	r1, fp
 800408e:	00cb      	lsls	r3, r1, #3
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004096:	4651      	mov	r1, sl
 8004098:	00ca      	lsls	r2, r1, #3
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	4642      	mov	r2, r8
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040a8:	464b      	mov	r3, r9
 80040aa:	460a      	mov	r2, r1
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80040be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040cc:	4649      	mov	r1, r9
 80040ce:	008b      	lsls	r3, r1, #2
 80040d0:	4641      	mov	r1, r8
 80040d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d6:	4641      	mov	r1, r8
 80040d8:	008a      	lsls	r2, r1, #2
 80040da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040de:	f7fc f8af 	bl	8000240 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <UART_SetConfig+0x4e4>)
 80040e8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	2164      	movs	r1, #100	; 0x64
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	3332      	adds	r3, #50	; 0x32
 80040fa:	4a34      	ldr	r2, [pc, #208]	; (80041cc <UART_SetConfig+0x4e4>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004106:	441c      	add	r4, r3
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	673b      	str	r3, [r7, #112]	; 0x70
 8004110:	677a      	str	r2, [r7, #116]	; 0x74
 8004112:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004116:	4642      	mov	r2, r8
 8004118:	464b      	mov	r3, r9
 800411a:	1891      	adds	r1, r2, r2
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	415b      	adcs	r3, r3
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004126:	4641      	mov	r1, r8
 8004128:	1851      	adds	r1, r2, r1
 800412a:	6039      	str	r1, [r7, #0]
 800412c:	4649      	mov	r1, r9
 800412e:	414b      	adcs	r3, r1
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800413e:	4659      	mov	r1, fp
 8004140:	00cb      	lsls	r3, r1, #3
 8004142:	4651      	mov	r1, sl
 8004144:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004148:	4651      	mov	r1, sl
 800414a:	00ca      	lsls	r2, r1, #3
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	4603      	mov	r3, r0
 8004152:	4642      	mov	r2, r8
 8004154:	189b      	adds	r3, r3, r2
 8004156:	66bb      	str	r3, [r7, #104]	; 0x68
 8004158:	464b      	mov	r3, r9
 800415a:	460a      	mov	r2, r1
 800415c:	eb42 0303 	adc.w	r3, r2, r3
 8004160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	663b      	str	r3, [r7, #96]	; 0x60
 800416c:	667a      	str	r2, [r7, #100]	; 0x64
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800417a:	4649      	mov	r1, r9
 800417c:	008b      	lsls	r3, r1, #2
 800417e:	4641      	mov	r1, r8
 8004180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004184:	4641      	mov	r1, r8
 8004186:	008a      	lsls	r2, r1, #2
 8004188:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800418c:	f7fc f858 	bl	8000240 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <UART_SetConfig+0x4e4>)
 8004196:	fba3 1302 	umull	r1, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2164      	movs	r1, #100	; 0x64
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <UART_SetConfig+0x4e4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 020f 	and.w	r2, r3, #15
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4422      	add	r2, r4
 80041bc:	609a      	str	r2, [r3, #8]
}
 80041be:	bf00      	nop
 80041c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <interface_tx_frame>:
 80041d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041d4:	b085      	sub	sp, #20
 80041d6:	4605      	mov	r5, r0
 80041d8:	461c      	mov	r4, r3
 80041da:	6883      	ldr	r3, [r0, #8]
 80041dc:	695e      	ldr	r6, [r3, #20]
 80041de:	b1e2      	cbz	r2, 800421a <interface_tx_frame+0x4a>
 80041e0:	9102      	str	r1, [sp, #8]
 80041e2:	fa1f f882 	uxth.w	r8, r2
 80041e6:	f8ad 800c 	strh.w	r8, [sp, #12]
 80041ea:	f04f 0900 	mov.w	r9, #0
 80041ee:	f8ad 900e 	strh.w	r9, [sp, #14]
 80041f2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80041f4:	ab02      	add	r3, sp, #8
 80041f6:	464a      	mov	r2, r9
 80041f8:	2120      	movs	r1, #32
 80041fa:	47b8      	blx	r7
 80041fc:	f8ad 8000 	strh.w	r8, [sp]
 8004200:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800420a:	f88d 3004 	strb.w	r3, [sp, #4]
 800420e:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004210:	466b      	mov	r3, sp
 8004212:	464a      	mov	r2, r9
 8004214:	2137      	movs	r1, #55	; 0x37
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	f013 0f1d 	tst.w	r3, #29
 8004220:	d005      	beq.n	800422e <interface_tx_frame+0x5e>
 8004222:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004224:	4623      	mov	r3, r4
 8004226:	2200      	movs	r2, #0
 8004228:	2105      	movs	r1, #5
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	6863      	ldr	r3, [r4, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	db0c      	blt.n	800424e <interface_tx_frame+0x7e>
 8004234:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004236:	1d23      	adds	r3, r4, #4
 8004238:	2200      	movs	r2, #0
 800423a:	2110      	movs	r1, #16
 800423c:	4628      	mov	r0, r5
 800423e:	47b8      	blx	r7
 8004240:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004242:	f104 0308 	add.w	r3, r4, #8
 8004246:	2200      	movs	r2, #0
 8004248:	2151      	movs	r1, #81	; 0x51
 800424a:	4628      	mov	r0, r5
 800424c:	47b8      	blx	r7
 800424e:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8004250:	f104 030c 	add.w	r3, r4, #12
 8004254:	2200      	movs	r2, #0
 8004256:	2104      	movs	r1, #4
 8004258:	4628      	mov	r0, r5
 800425a:	47b0      	blx	r6
 800425c:	b005      	add	sp, #20
 800425e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004262 <interface_get_timestamp>:
 8004262:	b530      	push	{r4, r5, lr}
 8004264:	b083      	sub	sp, #12
 8004266:	ab02      	add	r3, sp, #8
 8004268:	2400      	movs	r4, #0
 800426a:	2500      	movs	r5, #0
 800426c:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8004270:	6882      	ldr	r2, [r0, #8]
 8004272:	6952      	ldr	r2, [r2, #20]
 8004274:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004276:	2200      	movs	r2, #0
 8004278:	215f      	movs	r1, #95	; 0x5f
 800427a:	47a0      	blx	r4
 800427c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004280:	b003      	add	sp, #12
 8004282:	bd30      	pop	{r4, r5, pc}

08004284 <interface_rx_disable>:
 8004284:	b510      	push	{r4, lr}
 8004286:	6883      	ldr	r3, [r0, #8]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800428c:	2300      	movs	r3, #0
 800428e:	461a      	mov	r2, r3
 8004290:	2103      	movs	r1, #3
 8004292:	47a0      	blx	r4
 8004294:	bd10      	pop	{r4, pc}
	...

08004298 <interface_rx_enable>:
 8004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	4604      	mov	r4, r0
 80042a0:	6883      	ldr	r3, [r0, #8]
 80042a2:	695d      	ldr	r5, [r3, #20]
 80042a4:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80042a8:	680b      	ldr	r3, [r1, #0]
 80042aa:	9303      	str	r3, [sp, #12]
 80042ac:	684a      	ldr	r2, [r1, #4]
 80042ae:	ab04      	add	r3, sp, #16
 80042b0:	f843 2d08 	str.w	r2, [r3, #-8]!
 80042b4:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80042b6:	2200      	movs	r2, #0
 80042b8:	214f      	movs	r1, #79	; 0x4f
 80042ba:	47b8      	blx	r7
 80042bc:	4607      	mov	r7, r0
 80042be:	b118      	cbz	r0, 80042c8 <interface_rx_enable+0x30>
 80042c0:	4638      	mov	r0, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	68a3      	ldr	r3, [r4, #8]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db3c      	blt.n	800434e <interface_rx_enable+0xb6>
 80042d4:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80042d6:	ab01      	add	r3, sp, #4
 80042d8:	2200      	movs	r2, #0
 80042da:	2157      	movs	r1, #87	; 0x57
 80042dc:	4620      	mov	r0, r4
 80042de:	47b8      	blx	r7
 80042e0:	bba8      	cbnz	r0, 800434e <interface_rx_enable+0xb6>
 80042e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80042e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80042f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80042fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042fe:	f1ba 0f00 	cmp.w	sl, #0
 8004302:	d131      	bne.n	8004368 <interface_rx_enable+0xd0>
 8004304:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 8004308:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800430c:	9303      	str	r3, [sp, #12]
 800430e:	f04f 0a01 	mov.w	sl, #1
 8004312:	68a3      	ldr	r3, [r4, #8]
 8004314:	695f      	ldr	r7, [r3, #20]
 8004316:	f10d 0302 	add.w	r3, sp, #2
 800431a:	2200      	movs	r2, #0
 800431c:	217b      	movs	r1, #123	; 0x7b
 800431e:	4620      	mov	r0, r4
 8004320:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8004322:	47b0      	blx	r6
 8004324:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8004328:	2b01      	cmp	r3, #1
 800432a:	d04e      	beq.n	80043ca <interface_rx_enable+0x132>
 800432c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004330:	2201      	movs	r2, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800433a:	ea22 0203 	bic.w	r2, r2, r3
 800433e:	ab04      	add	r3, sp, #16
 8004340:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8004344:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8004346:	2200      	movs	r2, #0
 8004348:	216b      	movs	r1, #107	; 0x6b
 800434a:	4620      	mov	r0, r4
 800434c:	47b8      	blx	r7
 800434e:	f1ba 0f00 	cmp.w	sl, #0
 8004352:	d14a      	bne.n	80043ea <interface_rx_enable+0x152>
 8004354:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004356:	2300      	movs	r3, #0
 8004358:	461a      	mov	r2, r3
 800435a:	211f      	movs	r1, #31
 800435c:	4620      	mov	r0, r4
 800435e:	47a8      	blx	r5
 8004360:	4607      	mov	r7, r0
 8004362:	2800      	cmp	r0, #0
 8004364:	d150      	bne.n	8004408 <interface_rx_enable+0x170>
 8004366:	e7ab      	b.n	80042c0 <interface_rx_enable+0x28>
 8004368:	9a03      	ldr	r2, [sp, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4698      	mov	r8, r3
 800436e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8004372:	ea4f 1249 	mov.w	r2, r9, lsl #5
 8004376:	0158      	lsls	r0, r3, #5
 8004378:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 800437c:	1ac0      	subs	r0, r0, r3
 800437e:	eb61 0109 	sbc.w	r1, r1, r9
 8004382:	024b      	lsls	r3, r1, #9
 8004384:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004388:	0242      	lsls	r2, r0, #9
 800438a:	eb12 0008 	adds.w	r0, r2, r8
 800438e:	eb43 0109 	adc.w	r1, r3, r9
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004398:	0182      	lsls	r2, r0, #6
 800439a:	1a12      	subs	r2, r2, r0
 800439c:	eb63 0301 	sbc.w	r3, r3, r1
 80043a0:	4616      	mov	r6, r2
 80043a2:	461f      	mov	r7, r3
 80043a4:	4a31      	ldr	r2, [pc, #196]	; (800446c <interface_rx_enable+0x1d4>)
 80043a6:	2300      	movs	r3, #0
 80043a8:	eb16 0008 	adds.w	r0, r6, r8
 80043ac:	eb47 0109 	adc.w	r1, r7, r9
 80043b0:	f7fb ff46 	bl	8000240 <__aeabi_uldivmod>
 80043b4:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 80043b8:	ddab      	ble.n	8004312 <interface_rx_enable+0x7a>
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	695f      	ldr	r7, [r3, #20]
 80043be:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 80043c2:	d0a8      	beq.n	8004316 <interface_rx_enable+0x7e>
 80043c4:	f7fc f93f 	bl	8000646 <deca_usleep>
 80043c8:	e7a5      	b.n	8004316 <interface_rx_enable+0x7e>
 80043ca:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80043ce:	2201      	movs	r2, #1
 80043d0:	409a      	lsls	r2, r3
 80043d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	ab04      	add	r3, sp, #16
 80043da:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80043de:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80043e0:	2200      	movs	r2, #0
 80043e2:	216b      	movs	r1, #107	; 0x6b
 80043e4:	4620      	mov	r0, r4
 80043e6:	47b8      	blx	r7
 80043e8:	e7b1      	b.n	800434e <interface_rx_enable+0xb6>
 80043ea:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80043ec:	ab03      	add	r3, sp, #12
 80043ee:	2200      	movs	r2, #0
 80043f0:	2105      	movs	r1, #5
 80043f2:	4620      	mov	r0, r4
 80043f4:	47b0      	blx	r6
 80043f6:	4607      	mov	r7, r0
 80043f8:	b930      	cbnz	r0, 8004408 <interface_rx_enable+0x170>
 80043fa:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80043fc:	2300      	movs	r3, #0
 80043fe:	2201      	movs	r2, #1
 8004400:	211f      	movs	r1, #31
 8004402:	4620      	mov	r0, r4
 8004404:	47a8      	blx	r5
 8004406:	4607      	mov	r7, r0
 8004408:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800440c:	2b00      	cmp	r3, #0
 800440e:	f6ff af57 	blt.w	80042c0 <interface_rx_enable+0x28>
 8004412:	68a3      	ldr	r3, [r4, #8]
 8004414:	695d      	ldr	r5, [r3, #20]
 8004416:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8004418:	ab01      	add	r3, sp, #4
 800441a:	2200      	movs	r2, #0
 800441c:	217b      	movs	r1, #123	; 0x7b
 800441e:	4620      	mov	r0, r4
 8004420:	47b0      	blx	r6
 8004422:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8004426:	b18b      	cbz	r3, 800444c <interface_rx_enable+0x1b4>
 8004428:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800442c:	2201      	movs	r2, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004436:	ea22 0203 	bic.w	r2, r2, r3
 800443a:	ab04      	add	r3, sp, #16
 800443c:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004440:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004442:	2200      	movs	r2, #0
 8004444:	216b      	movs	r1, #107	; 0x6b
 8004446:	4620      	mov	r0, r4
 8004448:	47a8      	blx	r5
 800444a:	e739      	b.n	80042c0 <interface_rx_enable+0x28>
 800444c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004450:	2201      	movs	r2, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004458:	431a      	orrs	r2, r3
 800445a:	ab04      	add	r3, sp, #16
 800445c:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004460:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004462:	2200      	movs	r2, #0
 8004464:	216b      	movs	r1, #107	; 0x6b
 8004466:	4620      	mov	r0, r4
 8004468:	47a8      	blx	r5
 800446a:	e729      	b.n	80042c0 <interface_rx_enable+0x28>
 800446c:	0ee09800 	.word	0x0ee09800

08004470 <interface_read_rx_frame>:
 8004470:	b510      	push	{r4, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	9100      	str	r1, [sp, #0]
 8004476:	f8ad 2004 	strh.w	r2, [sp, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004480:	6883      	ldr	r3, [r0, #8]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004486:	466b      	mov	r3, sp
 8004488:	2121      	movs	r1, #33	; 0x21
 800448a:	47a0      	blx	r4
 800448c:	b002      	add	sp, #8
 800448e:	bd10      	pop	{r4, pc}

08004490 <dwt_probe>:
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	b083      	sub	sp, #12
 8004494:	6803      	ldr	r3, [r0, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d037      	beq.n	800450a <dwt_probe+0x7a>
 800449a:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <dwt_probe+0x88>)
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <dwt_probe+0x88>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6842      	ldr	r2, [r0, #4]
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	6882      	ldr	r2, [r0, #8]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f88d 2003 	strb.w	r2, [sp, #3]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681c      	ldr	r4, [r3, #0]
 80044b4:	ab01      	add	r3, sp, #4
 80044b6:	2204      	movs	r2, #4
 80044b8:	f10d 0103 	add.w	r1, sp, #3
 80044bc:	2001      	movs	r0, #1
 80044be:	47a0      	blx	r4
 80044c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044c4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80044c8:	0409      	lsls	r1, r1, #16
 80044ca:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80044ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80044d2:	4319      	orrs	r1, r3
 80044d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80044d8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <dwt_probe+0x8c>)
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <dwt_probe+0x90>)
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d216      	bcs.n	8004512 <dwt_probe+0x82>
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <dwt_probe+0x88>)
 80044e6:	681f      	ldr	r7, [r3, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ee:	2600      	movs	r6, #0
 80044f0:	4d0b      	ldr	r5, [pc, #44]	; (8004520 <dwt_probe+0x90>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	404a      	eors	r2, r1
 80044f6:	685c      	ldr	r4, [r3, #4]
 80044f8:	4222      	tst	r2, r4
 80044fa:	bf04      	itt	eq
 80044fc:	60bb      	streq	r3, [r7, #8]
 80044fe:	4630      	moveq	r0, r6
 8004500:	331c      	adds	r3, #28
 8004502:	42ab      	cmp	r3, r5
 8004504:	d3f5      	bcc.n	80044f2 <dwt_probe+0x62>
 8004506:	b003      	add	sp, #12
 8004508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450a:	4b03      	ldr	r3, [pc, #12]	; (8004518 <dwt_probe+0x88>)
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <dwt_probe+0x94>)
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e7c5      	b.n	800449e <dwt_probe+0xe>
 8004512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004516:	e7f6      	b.n	8004506 <dwt_probe+0x76>
 8004518:	200001f4 	.word	0x200001f4
 800451c:	08000198 	.word	0x08000198
 8004520:	080001ec 	.word	0x080001ec
 8004524:	200001f8 	.word	0x200001f8

08004528 <dwt_initialise>:
 8004528:	b508      	push	{r3, lr}
 800452a:	4b04      	ldr	r3, [pc, #16]	; (800453c <dwt_initialise+0x14>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	6912      	ldr	r2, [r2, #16]
 8004532:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004534:	4601      	mov	r1, r0
 8004536:	4618      	mov	r0, r3
 8004538:	4790      	blx	r2
 800453a:	bd08      	pop	{r3, pc}
 800453c:	200001f4 	.word	0x200001f4

08004540 <dwt_configure>:
 8004540:	b508      	push	{r3, lr}
 8004542:	4b04      	ldr	r3, [pc, #16]	; (8004554 <dwt_configure+0x14>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	6912      	ldr	r2, [r2, #16]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4601      	mov	r1, r0
 800454e:	4618      	mov	r0, r3
 8004550:	4790      	blx	r2
 8004552:	bd08      	pop	{r3, pc}
 8004554:	200001f4 	.word	0x200001f4

08004558 <dwt_configuretxrf>:
 8004558:	b508      	push	{r3, lr}
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <dwt_configuretxrf+0x14>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	6912      	ldr	r2, [r2, #16]
 8004562:	6992      	ldr	r2, [r2, #24]
 8004564:	4601      	mov	r1, r0
 8004566:	4618      	mov	r0, r3
 8004568:	4790      	blx	r2
 800456a:	bd08      	pop	{r3, pc}
 800456c:	200001f4 	.word	0x200001f4

08004570 <dwt_writetxdata>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <dwt_writetxdata+0x18>)
 8004574:	681c      	ldr	r4, [r3, #0]
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	685d      	ldr	r5, [r3, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	460a      	mov	r2, r1
 8004580:	4601      	mov	r1, r0
 8004582:	4620      	mov	r0, r4
 8004584:	47a8      	blx	r5
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	200001f4 	.word	0x200001f4

0800458c <dwt_writetxfctrl>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <dwt_writetxfctrl+0x18>)
 8004590:	681c      	ldr	r4, [r3, #0]
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	689d      	ldr	r5, [r3, #8]
 8004598:	4613      	mov	r3, r2
 800459a:	460a      	mov	r2, r1
 800459c:	4601      	mov	r1, r0
 800459e:	4620      	mov	r0, r4
 80045a0:	47a8      	blx	r5
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	200001f4 	.word	0x200001f4

080045a8 <dwt_starttx>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	ab02      	add	r3, sp, #8
 80045ae:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80045b2:	4a05      	ldr	r2, [pc, #20]	; (80045c8 <dwt_starttx+0x20>)
 80045b4:	6810      	ldr	r0, [r2, #0]
 80045b6:	6882      	ldr	r2, [r0, #8]
 80045b8:	6912      	ldr	r2, [r2, #16]
 80045ba:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80045bc:	2200      	movs	r2, #0
 80045be:	2104      	movs	r1, #4
 80045c0:	47a0      	blx	r4
 80045c2:	b002      	add	sp, #8
 80045c4:	bd10      	pop	{r4, pc}
 80045c6:	bf00      	nop
 80045c8:	200001f4 	.word	0x200001f4

080045cc <dwt_forcetrxoff>:
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <dwt_forcetrxoff+0x18>)
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	6883      	ldr	r3, [r0, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80045d8:	2300      	movs	r3, #0
 80045da:	461a      	mov	r2, r3
 80045dc:	2103      	movs	r1, #3
 80045de:	47a0      	blx	r4
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	bf00      	nop
 80045e4:	200001f4 	.word	0x200001f4

080045e8 <dwt_rxenable>:
 80045e8:	b508      	push	{r3, lr}
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <dwt_rxenable+0x14>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	6912      	ldr	r2, [r2, #16]
 80045f2:	6a12      	ldr	r2, [r2, #32]
 80045f4:	4601      	mov	r1, r0
 80045f6:	4618      	mov	r0, r3
 80045f8:	4790      	blx	r2
 80045fa:	bd08      	pop	{r3, pc}
 80045fc:	200001f4 	.word	0x200001f4

08004600 <dwt_checkidlerc>:
 8004600:	b510      	push	{r4, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	2200      	movs	r2, #0
 8004606:	ab02      	add	r3, sp, #8
 8004608:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800460c:	4905      	ldr	r1, [pc, #20]	; (8004624 <dwt_checkidlerc+0x24>)
 800460e:	6808      	ldr	r0, [r1, #0]
 8004610:	6881      	ldr	r1, [r0, #8]
 8004612:	6909      	ldr	r1, [r1, #16]
 8004614:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004616:	2158      	movs	r1, #88	; 0x58
 8004618:	47a0      	blx	r4
 800461a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800461e:	b002      	add	sp, #8
 8004620:	bd10      	pop	{r4, pc}
 8004622:	bf00      	nop
 8004624:	200001f4 	.word	0x200001f4

08004628 <dwt_generatecrc8>:
 8004628:	2900      	cmp	r1, #0
 800462a:	dd0d      	ble.n	8004648 <dwt_generatecrc8+0x20>
 800462c:	b410      	push	{r4}
 800462e:	1e43      	subs	r3, r0, #1
 8004630:	4419      	add	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	4c05      	ldr	r4, [pc, #20]	; (800464c <dwt_generatecrc8+0x24>)
 8004636:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800463a:	4050      	eors	r0, r2
 800463c:	5c20      	ldrb	r0, [r4, r0]
 800463e:	428b      	cmp	r3, r1
 8004640:	d1f9      	bne.n	8004636 <dwt_generatecrc8+0xe>
 8004642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	4610      	mov	r0, r2
 800464a:	4770      	bx	lr
 800464c:	08011ca8 	.word	0x08011ca8

08004650 <dwt_setleds>:
 8004650:	b510      	push	{r4, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	ab02      	add	r3, sp, #8
 8004656:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800465a:	4a05      	ldr	r2, [pc, #20]	; (8004670 <dwt_setleds+0x20>)
 800465c:	6810      	ldr	r0, [r2, #0]
 800465e:	6882      	ldr	r2, [r0, #8]
 8004660:	6912      	ldr	r2, [r2, #16]
 8004662:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004664:	2200      	movs	r2, #0
 8004666:	2155      	movs	r1, #85	; 0x55
 8004668:	47a0      	blx	r4
 800466a:	b002      	add	sp, #8
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	200001f4 	.word	0x200001f4

08004674 <dwt_writesysstatuslo>:
 8004674:	b510      	push	{r4, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	ab02      	add	r3, sp, #8
 800467a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800467e:	4a05      	ldr	r2, [pc, #20]	; (8004694 <dwt_writesysstatuslo+0x20>)
 8004680:	6810      	ldr	r0, [r2, #0]
 8004682:	6882      	ldr	r2, [r0, #8]
 8004684:	6912      	ldr	r2, [r2, #16]
 8004686:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004688:	2200      	movs	r2, #0
 800468a:	2174      	movs	r1, #116	; 0x74
 800468c:	47a0      	blx	r4
 800468e:	b002      	add	sp, #8
 8004690:	bd10      	pop	{r4, pc}
 8004692:	bf00      	nop
 8004694:	200001f4 	.word	0x200001f4

08004698 <dwt_readsysstatuslo>:
 8004698:	b510      	push	{r4, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	2200      	movs	r2, #0
 800469e:	ab02      	add	r3, sp, #8
 80046a0:	f843 2d04 	str.w	r2, [r3, #-4]!
 80046a4:	4904      	ldr	r1, [pc, #16]	; (80046b8 <dwt_readsysstatuslo+0x20>)
 80046a6:	6808      	ldr	r0, [r1, #0]
 80046a8:	6881      	ldr	r1, [r0, #8]
 80046aa:	6909      	ldr	r1, [r1, #16]
 80046ac:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80046ae:	2176      	movs	r1, #118	; 0x76
 80046b0:	47a0      	blx	r4
 80046b2:	9801      	ldr	r0, [sp, #4]
 80046b4:	b002      	add	sp, #8
 80046b6:	bd10      	pop	{r4, pc}
 80046b8:	200001f4 	.word	0x200001f4

080046bc <dwt_readsysstatushi>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	2200      	movs	r2, #0
 80046c2:	ab02      	add	r3, sp, #8
 80046c4:	f843 2d04 	str.w	r2, [r3, #-4]!
 80046c8:	4904      	ldr	r1, [pc, #16]	; (80046dc <dwt_readsysstatushi+0x20>)
 80046ca:	6808      	ldr	r0, [r1, #0]
 80046cc:	6881      	ldr	r1, [r0, #8]
 80046ce:	6909      	ldr	r1, [r1, #16]
 80046d0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80046d2:	2177      	movs	r1, #119	; 0x77
 80046d4:	47a0      	blx	r4
 80046d6:	9801      	ldr	r0, [sp, #4]
 80046d8:	b002      	add	sp, #8
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	200001f4 	.word	0x200001f4

080046e0 <dwt_dbg_fn>:
 80046e0:	2998      	cmp	r1, #152	; 0x98
 80046e2:	4802      	ldr	r0, [pc, #8]	; (80046ec <dwt_dbg_fn+0xc>)
 80046e4:	bf18      	it	ne
 80046e6:	2000      	movne	r0, #0
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	08011ea0 	.word	0x08011ea0

080046f0 <_deinit>:
 80046f0:	4770      	bx	lr

080046f2 <dwt_xfer3xxx>:
 80046f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	4605      	mov	r5, r0
 80046fa:	460e      	mov	r6, r1
 80046fc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8004700:	1990      	adds	r0, r2, r6
 8004702:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004706:	4432      	add	r2, r6
 8004708:	f3c2 4204 	ubfx	r2, r2, #16, #5
 800470c:	0084      	lsls	r4, r0, #2
 800470e:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 8004712:	ea41 0204 	orr.w	r2, r1, r4
 8004716:	0a12      	lsrs	r2, r2, #8
 8004718:	f88d 200c 	strb.w	r2, [sp, #12]
 800471c:	f001 0703 	and.w	r7, r1, #3
 8004720:	433c      	orrs	r4, r7
 8004722:	f88d 400d 	strb.w	r4, [sp, #13]
 8004726:	461f      	mov	r7, r3
 8004728:	b973      	cbnz	r3, 8004748 <dwt_xfer3xxx+0x56>
 800472a:	2900      	cmp	r1, #0
 800472c:	d05c      	beq.n	80047e8 <dwt_xfer3xxx+0xf6>
 800472e:	0073      	lsls	r3, r6, #1
 8004730:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8004734:	f88d 300c 	strb.w	r3, [sp, #12]
 8004738:	2401      	movs	r4, #1
 800473a:	2900      	cmp	r1, #0
 800473c:	d02f      	beq.n	800479e <dwt_xfer3xxx+0xac>
 800473e:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8004742:	2903      	cmp	r1, #3
 8004744:	d90a      	bls.n	800475c <dwt_xfer3xxx+0x6a>
 8004746:	e7fe      	b.n	8004746 <dwt_xfer3xxx+0x54>
 8004748:	2800      	cmp	r0, #0
 800474a:	d14f      	bne.n	80047ec <dwt_xfer3xxx+0xfa>
 800474c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004750:	d003      	beq.n	800475a <dwt_xfer3xxx+0x68>
 8004752:	2900      	cmp	r1, #0
 8004754:	d14a      	bne.n	80047ec <dwt_xfer3xxx+0xfa>
 8004756:	2401      	movs	r4, #1
 8004758:	e021      	b.n	800479e <dwt_xfer3xxx+0xac>
 800475a:	2401      	movs	r4, #1
 800475c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800475e:	7d9b      	ldrb	r3, [r3, #22]
 8004760:	b94b      	cbnz	r3, 8004776 <dwt_xfer3xxx+0x84>
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	685d      	ldr	r5, [r3, #4]
 8004766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004768:	463a      	mov	r2, r7
 800476a:	a903      	add	r1, sp, #12
 800476c:	4620      	mov	r0, r4
 800476e:	47a8      	blx	r5
 8004770:	b004      	add	sp, #16
 8004772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004776:	2200      	movs	r2, #0
 8004778:	4621      	mov	r1, r4
 800477a:	a803      	add	r0, sp, #12
 800477c:	f7ff ff54 	bl	8004628 <dwt_generatecrc8>
 8004780:	4602      	mov	r2, r0
 8004782:	4639      	mov	r1, r7
 8004784:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004786:	f7ff ff4f 	bl	8004628 <dwt_generatecrc8>
 800478a:	682b      	ldr	r3, [r5, #0]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	689d      	ldr	r5, [r3, #8]
 8004790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004792:	463a      	mov	r2, r7
 8004794:	a903      	add	r1, sp, #12
 8004796:	4620      	mov	r0, r4
 8004798:	47a8      	blx	r5
 800479a:	e7e9      	b.n	8004770 <dwt_xfer3xxx+0x7e>
 800479c:	2401      	movs	r4, #1
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	f8d3 8000 	ldr.w	r8, [r3]
 80047a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a6:	463a      	mov	r2, r7
 80047a8:	a903      	add	r1, sp, #12
 80047aa:	4620      	mov	r0, r4
 80047ac:	47c0      	blx	r8
 80047ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80047b0:	7d9b      	ldrb	r3, [r3, #22]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d1dc      	bne.n	8004770 <dwt_xfer3xxx+0x7e>
 80047b6:	2e18      	cmp	r6, #24
 80047b8:	d0da      	beq.n	8004770 <dwt_xfer3xxx+0x7e>
 80047ba:	2200      	movs	r2, #0
 80047bc:	4621      	mov	r1, r4
 80047be:	a803      	add	r0, sp, #12
 80047c0:	f7ff ff32 	bl	8004628 <dwt_generatecrc8>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4639      	mov	r1, r7
 80047c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80047ca:	f7ff ff2d 	bl	8004628 <dwt_generatecrc8>
 80047ce:	4604      	mov	r4, r0
 80047d0:	2200      	movs	r2, #0
 80047d2:	2118      	movs	r1, #24
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f841 	bl	800485c <dwt_read8bitoffsetreg>
 80047da:	4284      	cmp	r4, r0
 80047dc:	d0c8      	beq.n	8004770 <dwt_xfer3xxx+0x7e>
 80047de:	68eb      	ldr	r3, [r5, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0c5      	beq.n	8004770 <dwt_xfer3xxx+0x7e>
 80047e4:	4798      	blx	r3
 80047e6:	e7c3      	b.n	8004770 <dwt_xfer3xxx+0x7e>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d0d7      	beq.n	800479c <dwt_xfer3xxx+0xaa>
 80047ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f0:	f88d 200c 	strb.w	r2, [sp, #12]
 80047f4:	2402      	movs	r4, #2
 80047f6:	e7a0      	b.n	800473a <dwt_xfer3xxx+0x48>

080047f8 <dwt_readfromdevice>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	2400      	movs	r4, #0
 80047fe:	9401      	str	r4, [sp, #4]
 8004800:	9c04      	ldr	r4, [sp, #16]
 8004802:	9400      	str	r4, [sp, #0]
 8004804:	f7ff ff75 	bl	80046f2 <dwt_xfer3xxx>
 8004808:	b002      	add	sp, #8
 800480a:	bd10      	pop	{r4, pc}

0800480c <dwt_read32bitoffsetreg>:
 800480c:	b500      	push	{lr}
 800480e:	b085      	sub	sp, #20
 8004810:	ab03      	add	r3, sp, #12
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2304      	movs	r3, #4
 8004816:	b292      	uxth	r2, r2
 8004818:	f7ff ffee 	bl	80047f8 <dwt_readfromdevice>
 800481c:	f10d 030f 	add.w	r3, sp, #15
 8004820:	f10d 010b 	add.w	r1, sp, #11
 8004824:	2000      	movs	r0, #0
 8004826:	f813 2901 	ldrb.w	r2, [r3], #-1
 800482a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800482e:	428b      	cmp	r3, r1
 8004830:	d1f9      	bne.n	8004826 <dwt_read32bitoffsetreg+0x1a>
 8004832:	b005      	add	sp, #20
 8004834:	f85d fb04 	ldr.w	pc, [sp], #4

08004838 <dwt_read16bitoffsetreg>:
 8004838:	b500      	push	{lr}
 800483a:	b085      	sub	sp, #20
 800483c:	ab03      	add	r3, sp, #12
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2302      	movs	r3, #2
 8004842:	b292      	uxth	r2, r2
 8004844:	f7ff ffd8 	bl	80047f8 <dwt_readfromdevice>
 8004848:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800484c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004850:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8004854:	b280      	uxth	r0, r0
 8004856:	b005      	add	sp, #20
 8004858:	f85d fb04 	ldr.w	pc, [sp], #4

0800485c <dwt_read8bitoffsetreg>:
 800485c:	b500      	push	{lr}
 800485e:	b085      	sub	sp, #20
 8004860:	f10d 030f 	add.w	r3, sp, #15
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2301      	movs	r3, #1
 8004868:	b292      	uxth	r2, r2
 800486a:	f7ff ffc5 	bl	80047f8 <dwt_readfromdevice>
 800486e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004872:	b005      	add	sp, #20
 8004874:	f85d fb04 	ldr.w	pc, [sp], #4

08004878 <ull_readdiagnostics>:
 8004878:	b530      	push	{r4, r5, lr}
 800487a:	b0bd      	sub	sp, #244	; 0xf4
 800487c:	4605      	mov	r5, r0
 800487e:	460c      	mov	r4, r1
 8004880:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004882:	7bda      	ldrb	r2, [r3, #15]
 8004884:	2a01      	cmp	r2, #1
 8004886:	d01c      	beq.n	80048c2 <ull_readdiagnostics+0x4a>
 8004888:	2a03      	cmp	r2, #3
 800488a:	f040 81d4 	bne.w	8004c36 <ull_readdiagnostics+0x3be>
 800488e:	7e1b      	ldrb	r3, [r3, #24]
 8004890:	f013 0f08 	tst.w	r3, #8
 8004894:	d10c      	bne.n	80048b0 <ull_readdiagnostics+0x38>
 8004896:	f013 0f04 	tst.w	r3, #4
 800489a:	ab02      	add	r3, sp, #8
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	bf14      	ite	ne
 80048a0:	2338      	movne	r3, #56	; 0x38
 80048a2:	2320      	moveq	r3, #32
 80048a4:	2200      	movs	r2, #0
 80048a6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80048aa:	f7ff ffa5 	bl	80047f8 <dwt_readfromdevice>
 80048ae:	e019      	b.n	80048e4 <ull_readdiagnostics+0x6c>
 80048b0:	ab02      	add	r3, sp, #8
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	23e8      	movs	r3, #232	; 0xe8
 80048b6:	2200      	movs	r2, #0
 80048b8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80048bc:	f7ff ff9c 	bl	80047f8 <dwt_readfromdevice>
 80048c0:	e010      	b.n	80048e4 <ull_readdiagnostics+0x6c>
 80048c2:	7e1b      	ldrb	r3, [r3, #24]
 80048c4:	f013 0f08 	tst.w	r3, #8
 80048c8:	f040 81ac 	bne.w	8004c24 <ull_readdiagnostics+0x3ac>
 80048cc:	f013 0f04 	tst.w	r3, #4
 80048d0:	ab02      	add	r3, sp, #8
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	bf14      	ite	ne
 80048d6:	2338      	movne	r3, #56	; 0x38
 80048d8:	2320      	moveq	r3, #32
 80048da:	2200      	movs	r2, #0
 80048dc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80048e0:	f7ff ff8a 	bl	80047f8 <dwt_readfromdevice>
 80048e4:	f10d 0217 	add.w	r2, sp, #23
 80048e8:	f104 031a 	add.w	r3, r4, #26
 80048ec:	f104 0020 	add.w	r0, r4, #32
 80048f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80048f4:	f803 1b01 	strb.w	r1, [r3], #1
 80048f8:	4283      	cmp	r3, r0
 80048fa:	d1f9      	bne.n	80048f0 <ull_readdiagnostics+0x78>
 80048fc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004900:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004904:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800490c:	8463      	strh	r3, [r4, #34]	; 0x22
 800490e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8004912:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004916:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800491a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800491e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004922:	bf1c      	itt	ne
 8004924:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8004928:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800492c:	8423      	strh	r3, [r4, #32]
 800492e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8004932:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8004936:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800493a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004940:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004942:	7e1b      	ldrb	r3, [r3, #24]
 8004944:	f013 0f02 	tst.w	r3, #2
 8004948:	f040 816a 	bne.w	8004c20 <ull_readdiagnostics+0x3a8>
 800494c:	aa0a      	add	r2, sp, #40	; 0x28
 800494e:	1e63      	subs	r3, r4, #1
 8004950:	1d20      	adds	r0, r4, #4
 8004952:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004956:	f803 1f01 	strb.w	r1, [r3, #1]!
 800495a:	79d1      	ldrb	r1, [r2, #7]
 800495c:	7219      	strb	r1, [r3, #8]
 800495e:	7bd1      	ldrb	r1, [r2, #15]
 8004960:	7459      	strb	r1, [r3, #17]
 8004962:	4283      	cmp	r3, r0
 8004964:	d1f5      	bne.n	8004952 <ull_readdiagnostics+0xda>
 8004966:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800496a:	7163      	strb	r3, [r4, #5]
 800496c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8004970:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8004974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004978:	80e3      	strh	r3, [r4, #6]
 800497a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800497e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004982:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004986:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800498a:	f8a4 300d 	strh.w	r3, [r4, #13]
 800498e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8004992:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800499a:	f8a4 300f 	strh.w	r3, [r4, #15]
 800499e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 80049a2:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80049a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80049aa:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 80049ae:	82e3      	strh	r3, [r4, #22]
 80049b0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 80049b4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80049b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049bc:	8323      	strh	r3, [r4, #24]
 80049be:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80049c0:	7e1b      	ldrb	r3, [r3, #24]
 80049c2:	f013 0f04 	tst.w	r3, #4
 80049c6:	f040 812b 	bne.w	8004c20 <ull_readdiagnostics+0x3a8>
 80049ca:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 80049ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80049d8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80049dc:	4313      	orrs	r3, r2
 80049de:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80049e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049e6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80049ea:	6263      	str	r3, [r4, #36]	; 0x24
 80049ec:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 80049f0:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80049fa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8004a04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a0e:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8004a12:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a1c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8004a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a2a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a30:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8004a34:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a3e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8004a48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004a50:	6323      	str	r3, [r4, #48]	; 0x30
 8004a52:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8004a56:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a60:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8004a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a6e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004a72:	6363      	str	r3, [r4, #52]	; 0x34
 8004a74:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8004a78:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a82:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8004a8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004a94:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a96:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8004a9a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8004a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004aa2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004aa4:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8004aa8:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ab2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8004abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ac0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ac4:	6423      	str	r3, [r4, #64]	; 0x40
 8004ac6:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8004aca:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8004ace:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ad2:	6463      	str	r3, [r4, #68]	; 0x44
 8004ad4:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8004ad8:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ae2:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8004aec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004af0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004af4:	64a3      	str	r3, [r4, #72]	; 0x48
 8004af6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8004afa:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b04:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8004b0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b12:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b16:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004b18:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8004b1c:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b26:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8004b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b38:	6523      	str	r3, [r4, #80]	; 0x50
 8004b3a:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8004b3e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8004b42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b4a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8004b4e:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8004b52:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8004b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004b62:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8004b66:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b70:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8004b7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b7e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004b82:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b84:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8004b88:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8004b8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b90:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004b92:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8004b96:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ba0:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8004baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004bb2:	6623      	str	r3, [r4, #96]	; 0x60
 8004bb4:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8004bb8:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004bc2:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8004bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004bd4:	6663      	str	r3, [r4, #100]	; 0x64
 8004bd6:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8004bda:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004be4:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8004bee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bf2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004bf6:	66a3      	str	r3, [r4, #104]	; 0x68
 8004bf8:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8004bfc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8004c00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004c08:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8004c0c:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8004c10:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8004c14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8004c20:	b03d      	add	sp, #244	; 0xf4
 8004c22:	bd30      	pop	{r4, r5, pc}
 8004c24:	ab02      	add	r3, sp, #8
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	23e8      	movs	r3, #232	; 0xe8
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8004c30:	f7ff fde2 	bl	80047f8 <dwt_readfromdevice>
 8004c34:	e656      	b.n	80048e4 <ull_readdiagnostics+0x6c>
 8004c36:	7e1b      	ldrb	r3, [r3, #24]
 8004c38:	f013 0f01 	tst.w	r3, #1
 8004c3c:	f000 819f 	beq.w	8004f7e <ull_readdiagnostics+0x706>
 8004c40:	ab02      	add	r3, sp, #8
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	236c      	movs	r3, #108	; 0x6c
 8004c46:	2200      	movs	r2, #0
 8004c48:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8004c4c:	f7ff fdd4 	bl	80047f8 <dwt_readfromdevice>
 8004c50:	ab1d      	add	r3, sp, #116	; 0x74
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	236c      	movs	r3, #108	; 0x6c
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f7ff fdcb 	bl	80047f8 <dwt_readfromdevice>
 8004c62:	aa02      	add	r2, sp, #8
 8004c64:	1e63      	subs	r3, r4, #1
 8004c66:	1d20      	adds	r0, r4, #4
 8004c68:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004c6c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8004c70:	79d1      	ldrb	r1, [r2, #7]
 8004c72:	7219      	strb	r1, [r3, #8]
 8004c74:	7bd1      	ldrb	r1, [r2, #15]
 8004c76:	7459      	strb	r1, [r3, #17]
 8004c78:	7dd1      	ldrb	r1, [r2, #23]
 8004c7a:	7699      	strb	r1, [r3, #26]
 8004c7c:	4283      	cmp	r3, r0
 8004c7e:	d1f3      	bne.n	8004c68 <ull_readdiagnostics+0x3f0>
 8004c80:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8004c84:	77e3      	strb	r3, [r4, #31]
 8004c86:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004c8a:	7163      	strb	r3, [r4, #5]
 8004c8c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004c90:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004c94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c98:	80e3      	strh	r3, [r4, #6]
 8004c9a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004c9e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8004ca2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8004ca6:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8004caa:	f8a4 200d 	strh.w	r2, [r4, #13]
 8004cae:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004cb2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004cb6:	f8a4 200f 	strh.w	r2, [r4, #15]
 8004cba:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8004cbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cc2:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004cc6:	82e3      	strh	r3, [r4, #22]
 8004cc8:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8004ccc:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8004cd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cd4:	8323      	strh	r3, [r4, #24]
 8004cd6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8004cda:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8004cde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ce2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004ce6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004cea:	bf1c      	itt	ne
 8004cec:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8004cf0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8004cf4:	8423      	strh	r3, [r4, #32]
 8004cf6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8004cfa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d06:	8463      	strh	r3, [r4, #34]	; 0x22
 8004d08:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8004d0c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d16:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8004d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d24:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004d28:	6263      	str	r3, [r4, #36]	; 0x24
 8004d2a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004d2c:	7e1b      	ldrb	r3, [r3, #24]
 8004d2e:	f013 0f01 	tst.w	r3, #1
 8004d32:	f43f af75 	beq.w	8004c20 <ull_readdiagnostics+0x3a8>
 8004d36:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8004d3a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d44:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8004d4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d58:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004d5c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d66:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8004d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d74:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d7a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8004d7e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d88:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8004d92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d96:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d9c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8004da0:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004daa:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8004db4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004db8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004dbc:	6363      	str	r3, [r4, #52]	; 0x34
 8004dbe:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8004dc2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004dcc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8004dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dda:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004dde:	63a3      	str	r3, [r4, #56]	; 0x38
 8004de0:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8004de4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8004de8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dec:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004dee:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8004df2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004df6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e00:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8004e04:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8004e18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e1c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004e20:	6423      	str	r3, [r4, #64]	; 0x40
 8004e22:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8004e26:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8004e2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e2e:	6463      	str	r3, [r4, #68]	; 0x44
 8004e30:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8004e34:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e3e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8004e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e50:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e52:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8004e56:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e60:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8004e6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e6e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e72:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004e74:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8004e78:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e82:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8004e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e94:	6523      	str	r3, [r4, #80]	; 0x50
 8004e96:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8004e9a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8004e9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ea2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ea6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8004eaa:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8004eae:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8004eb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eba:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004ebe:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8004ec2:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ecc:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8004ed6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004eda:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ede:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ee0:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8004ee4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8004ee8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004eec:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004eee:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8004ef2:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004efc:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8004f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f0e:	6623      	str	r3, [r4, #96]	; 0x60
 8004f10:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8004f14:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f1e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8004f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f30:	6663      	str	r3, [r4, #100]	; 0x64
 8004f32:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8004f36:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f40:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8004f4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f4e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f52:	66a3      	str	r3, [r4, #104]	; 0x68
 8004f54:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8004f58:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8004f5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f64:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8004f68:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8004f6c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8004f70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8004f7c:	e650      	b.n	8004c20 <ull_readdiagnostics+0x3a8>
 8004f7e:	ab02      	add	r3, sp, #8
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2328      	movs	r3, #40	; 0x28
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8004f8a:	f7ff fc35 	bl	80047f8 <dwt_readfromdevice>
 8004f8e:	e668      	b.n	8004c62 <ull_readdiagnostics+0x3ea>

08004f90 <ull_readrxtimestamp>:
 8004f90:	b500      	push	{lr}
 8004f92:	b083      	sub	sp, #12
 8004f94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004f96:	7bdb      	ldrb	r3, [r3, #15]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d00b      	beq.n	8004fb4 <ull_readrxtimestamp+0x24>
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d110      	bne.n	8004fc2 <ull_readrxtimestamp+0x32>
 8004fa0:	9100      	str	r1, [sp, #0]
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8004faa:	f7ff fc25 	bl	80047f8 <dwt_readfromdevice>
 8004fae:	b003      	add	sp, #12
 8004fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fb4:	9100      	str	r1, [sp, #0]
 8004fb6:	2305      	movs	r3, #5
 8004fb8:	2200      	movs	r2, #0
 8004fba:	4905      	ldr	r1, [pc, #20]	; (8004fd0 <ull_readrxtimestamp+0x40>)
 8004fbc:	f7ff fc1c 	bl	80047f8 <dwt_readfromdevice>
 8004fc0:	e7f5      	b.n	8004fae <ull_readrxtimestamp+0x1e>
 8004fc2:	9100      	str	r1, [sp, #0]
 8004fc4:	2305      	movs	r3, #5
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2164      	movs	r1, #100	; 0x64
 8004fca:	f7ff fc15 	bl	80047f8 <dwt_readfromdevice>
 8004fce:	e7ee      	b.n	8004fae <ull_readrxtimestamp+0x1e>
 8004fd0:	00180004 	.word	0x00180004

08004fd4 <dwt_writetodevice>:
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8004fdc:	9401      	str	r4, [sp, #4]
 8004fde:	9c04      	ldr	r4, [sp, #16]
 8004fe0:	9400      	str	r4, [sp, #0]
 8004fe2:	f7ff fb86 	bl	80046f2 <dwt_xfer3xxx>
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <dwt_write8bitoffsetreg>:
 8004fea:	b510      	push	{r4, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	ac04      	add	r4, sp, #16
 8004ff0:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8004ff4:	9400      	str	r4, [sp, #0]
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	f7ff ffeb 	bl	8004fd4 <dwt_writetodevice>
 8004ffe:	b004      	add	sp, #16
 8005000:	bd10      	pop	{r4, pc}
	...

08005004 <ull_getframelength>:
 8005004:	b510      	push	{r4, lr}
 8005006:	4604      	mov	r4, r0
 8005008:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800500a:	7bdb      	ldrb	r3, [r3, #15]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d013      	beq.n	8005038 <ull_getframelength+0x34>
 8005010:	2b03      	cmp	r3, #3
 8005012:	d11d      	bne.n	8005050 <ull_getframelength+0x4c>
 8005014:	23f0      	movs	r3, #240	; 0xf0
 8005016:	2200      	movs	r2, #0
 8005018:	4912      	ldr	r1, [pc, #72]	; (8005064 <ull_getframelength+0x60>)
 800501a:	f7ff ffe6 	bl	8004fea <dwt_write8bitoffsetreg>
 800501e:	2200      	movs	r2, #0
 8005020:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005024:	4620      	mov	r0, r4
 8005026:	f7ff fc07 	bl	8004838 <dwt_read16bitoffsetreg>
 800502a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800502c:	7b1a      	ldrb	r2, [r3, #12]
 800502e:	b1a2      	cbz	r2, 800505a <ull_getframelength+0x56>
 8005030:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005034:	8458      	strh	r0, [r3, #34]	; 0x22
 8005036:	bd10      	pop	{r4, pc}
 8005038:	230f      	movs	r3, #15
 800503a:	2200      	movs	r2, #0
 800503c:	4909      	ldr	r1, [pc, #36]	; (8005064 <ull_getframelength+0x60>)
 800503e:	f7ff ffd4 	bl	8004fea <dwt_write8bitoffsetreg>
 8005042:	2200      	movs	r2, #0
 8005044:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff fbf5 	bl	8004838 <dwt_read16bitoffsetreg>
 800504e:	e7ec      	b.n	800502a <ull_getframelength+0x26>
 8005050:	2200      	movs	r2, #0
 8005052:	214c      	movs	r1, #76	; 0x4c
 8005054:	f7ff fbf0 	bl	8004838 <dwt_read16bitoffsetreg>
 8005058:	e7e7      	b.n	800502a <ull_getframelength+0x26>
 800505a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800505e:	8458      	strh	r0, [r3, #34]	; 0x22
 8005060:	e7e9      	b.n	8005036 <ull_getframelength+0x32>
 8005062:	bf00      	nop
 8005064:	00010024 	.word	0x00010024

08005068 <ull_configeventcounters>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4605      	mov	r5, r0
 800506c:	460c      	mov	r4, r1
 800506e:	2302      	movs	r3, #2
 8005070:	2200      	movs	r2, #0
 8005072:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8005076:	f7ff ffb8 	bl	8004fea <dwt_write8bitoffsetreg>
 800507a:	b904      	cbnz	r4, 800507e <ull_configeventcounters+0x16>
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	2301      	movs	r3, #1
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8005086:	4628      	mov	r0, r5
 8005088:	f7ff ffaf 	bl	8004fea <dwt_write8bitoffsetreg>
 800508c:	e7f6      	b.n	800507c <ull_configeventcounters+0x14>

0800508e <dwt_write16bitoffsetreg>:
 800508e:	b500      	push	{lr}
 8005090:	b085      	sub	sp, #20
 8005092:	f88d 300c 	strb.w	r3, [sp, #12]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	f88d 300d 	strb.w	r3, [sp, #13]
 800509c:	ab03      	add	r3, sp, #12
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2302      	movs	r3, #2
 80050a2:	b292      	uxth	r2, r2
 80050a4:	f7ff ff96 	bl	8004fd4 <dwt_writetodevice>
 80050a8:	b005      	add	sp, #20
 80050aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080050b0 <ull_clearaonconfig>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4604      	mov	r4, r0
 80050b4:	2300      	movs	r3, #0
 80050b6:	461a      	mov	r2, r3
 80050b8:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 80050bc:	f7ff ffe7 	bl	800508e <dwt_write16bitoffsetreg>
 80050c0:	2300      	movs	r3, #0
 80050c2:	461a      	mov	r2, r3
 80050c4:	4908      	ldr	r1, [pc, #32]	; (80050e8 <ull_clearaonconfig+0x38>)
 80050c6:	4620      	mov	r0, r4
 80050c8:	f7ff ff8f 	bl	8004fea <dwt_write8bitoffsetreg>
 80050cc:	4d07      	ldr	r5, [pc, #28]	; (80050ec <ull_clearaonconfig+0x3c>)
 80050ce:	2300      	movs	r3, #0
 80050d0:	461a      	mov	r2, r3
 80050d2:	4629      	mov	r1, r5
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7ff ff88 	bl	8004fea <dwt_write8bitoffsetreg>
 80050da:	2302      	movs	r3, #2
 80050dc:	2200      	movs	r2, #0
 80050de:	4629      	mov	r1, r5
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7ff ff82 	bl	8004fea <dwt_write8bitoffsetreg>
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	000a0014 	.word	0x000a0014
 80050ec:	000a0004 	.word	0x000a0004

080050f0 <ull_force_clocks>:
 80050f0:	b508      	push	{r3, lr}
 80050f2:	2901      	cmp	r1, #1
 80050f4:	d002      	beq.n	80050fc <ull_force_clocks+0xc>
 80050f6:	2905      	cmp	r1, #5
 80050f8:	d007      	beq.n	800510a <ull_force_clocks+0x1a>
 80050fa:	bd08      	pop	{r3, pc}
 80050fc:	f641 0322 	movw	r3, #6178	; 0x1822
 8005100:	2200      	movs	r2, #0
 8005102:	4905      	ldr	r1, [pc, #20]	; (8005118 <ull_force_clocks+0x28>)
 8005104:	f7ff ffc3 	bl	800508e <dwt_write16bitoffsetreg>
 8005108:	e7f7      	b.n	80050fa <ull_force_clocks+0xa>
 800510a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800510e:	2200      	movs	r2, #0
 8005110:	4901      	ldr	r1, [pc, #4]	; (8005118 <ull_force_clocks+0x28>)
 8005112:	f7ff ffbc 	bl	800508e <dwt_write16bitoffsetreg>
 8005116:	e7f0      	b.n	80050fa <ull_force_clocks+0xa>
 8005118:	00110004 	.word	0x00110004

0800511c <__dwt_otp_write_wdata_id_reg>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4605      	mov	r5, r0
 8005120:	460c      	mov	r4, r1
 8005122:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8005126:	b29b      	uxth	r3, r3
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800512e:	f7ff ffae 	bl	800508e <dwt_write16bitoffsetreg>
 8005132:	b2a3      	uxth	r3, r4
 8005134:	2200      	movs	r2, #0
 8005136:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800513a:	4628      	mov	r0, r5
 800513c:	f7ff ffa7 	bl	800508e <dwt_write16bitoffsetreg>
 8005140:	bd38      	pop	{r3, r4, r5, pc}
	...

08005144 <_dwt_otpread>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	4604      	mov	r4, r0
 8005148:	460e      	mov	r6, r1
 800514a:	4d0c      	ldr	r5, [pc, #48]	; (800517c <_dwt_otpread+0x38>)
 800514c:	2301      	movs	r3, #1
 800514e:	2200      	movs	r2, #0
 8005150:	4629      	mov	r1, r5
 8005152:	f7ff ff9c 	bl	800508e <dwt_write16bitoffsetreg>
 8005156:	4633      	mov	r3, r6
 8005158:	2200      	movs	r2, #0
 800515a:	4909      	ldr	r1, [pc, #36]	; (8005180 <_dwt_otpread+0x3c>)
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff ff96 	bl	800508e <dwt_write16bitoffsetreg>
 8005162:	2302      	movs	r3, #2
 8005164:	2200      	movs	r2, #0
 8005166:	4629      	mov	r1, r5
 8005168:	4620      	mov	r0, r4
 800516a:	f7ff ff90 	bl	800508e <dwt_write16bitoffsetreg>
 800516e:	2200      	movs	r2, #0
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <_dwt_otpread+0x40>)
 8005172:	4620      	mov	r0, r4
 8005174:	f7ff fb4a 	bl	800480c <dwt_read32bitoffsetreg>
 8005178:	bd70      	pop	{r4, r5, r6, pc}
 800517a:	bf00      	nop
 800517c:	000b0008 	.word	0x000b0008
 8005180:	000b0004 	.word	0x000b0004
 8005184:	000b0010 	.word	0x000b0010

08005188 <ull_aon_read>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4604      	mov	r4, r0
 800518c:	460b      	mov	r3, r1
 800518e:	2200      	movs	r2, #0
 8005190:	490a      	ldr	r1, [pc, #40]	; (80051bc <ull_aon_read+0x34>)
 8005192:	f7ff ff7c 	bl	800508e <dwt_write16bitoffsetreg>
 8005196:	4d0a      	ldr	r5, [pc, #40]	; (80051c0 <ull_aon_read+0x38>)
 8005198:	2388      	movs	r3, #136	; 0x88
 800519a:	2200      	movs	r2, #0
 800519c:	4629      	mov	r1, r5
 800519e:	4620      	mov	r0, r4
 80051a0:	f7ff ff23 	bl	8004fea <dwt_write8bitoffsetreg>
 80051a4:	2300      	movs	r3, #0
 80051a6:	461a      	mov	r2, r3
 80051a8:	4629      	mov	r1, r5
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff ff1d 	bl	8004fea <dwt_write8bitoffsetreg>
 80051b0:	2200      	movs	r2, #0
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <ull_aon_read+0x3c>)
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff fb51 	bl	800485c <dwt_read8bitoffsetreg>
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	000a000c 	.word	0x000a000c
 80051c0:	000a0004 	.word	0x000a0004
 80051c4:	000a0008 	.word	0x000a0008

080051c8 <ull_aon_write>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4604      	mov	r4, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4615      	mov	r5, r2
 80051d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80051d4:	bf34      	ite	cc
 80051d6:	2600      	movcc	r6, #0
 80051d8:	2620      	movcs	r6, #32
 80051da:	2200      	movs	r2, #0
 80051dc:	490b      	ldr	r1, [pc, #44]	; (800520c <ull_aon_write+0x44>)
 80051de:	f7ff ff56 	bl	800508e <dwt_write16bitoffsetreg>
 80051e2:	462b      	mov	r3, r5
 80051e4:	2200      	movs	r2, #0
 80051e6:	490a      	ldr	r1, [pc, #40]	; (8005210 <ull_aon_write+0x48>)
 80051e8:	4620      	mov	r0, r4
 80051ea:	f7ff fefe 	bl	8004fea <dwt_write8bitoffsetreg>
 80051ee:	4d09      	ldr	r5, [pc, #36]	; (8005214 <ull_aon_write+0x4c>)
 80051f0:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80051f4:	2200      	movs	r2, #0
 80051f6:	4629      	mov	r1, r5
 80051f8:	4620      	mov	r0, r4
 80051fa:	f7ff fef6 	bl	8004fea <dwt_write8bitoffsetreg>
 80051fe:	2300      	movs	r3, #0
 8005200:	461a      	mov	r2, r3
 8005202:	4629      	mov	r1, r5
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff fef0 	bl	8004fea <dwt_write8bitoffsetreg>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	000a000c 	.word	0x000a000c
 8005210:	000a0010 	.word	0x000a0010
 8005214:	000a0004 	.word	0x000a0004

08005218 <ull_configuresleep>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	4616      	mov	r6, r2
 8005220:	2200      	movs	r2, #0
 8005222:	f240 110b 	movw	r1, #267	; 0x10b
 8005226:	f7ff ffcf 	bl	80051c8 <ull_aon_write>
 800522a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff ffaa 	bl	8005188 <ull_aon_read>
 8005234:	f000 021f 	and.w	r2, r0, #31
 8005238:	f44f 7182 	mov.w	r1, #260	; 0x104
 800523c:	4620      	mov	r0, r4
 800523e:	f7ff ffc3 	bl	80051c8 <ull_aon_write>
 8005242:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005244:	8a5a      	ldrh	r2, [r3, #18]
 8005246:	4315      	orrs	r5, r2
 8005248:	825d      	strh	r5, [r3, #18]
 800524a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800524c:	8a5b      	ldrh	r3, [r3, #18]
 800524e:	2200      	movs	r2, #0
 8005250:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8005254:	4620      	mov	r0, r4
 8005256:	f7ff ff1a 	bl	800508e <dwt_write16bitoffsetreg>
 800525a:	4633      	mov	r3, r6
 800525c:	2200      	movs	r2, #0
 800525e:	4902      	ldr	r1, [pc, #8]	; (8005268 <ull_configuresleep+0x50>)
 8005260:	4620      	mov	r0, r4
 8005262:	f7ff fec2 	bl	8004fea <dwt_write8bitoffsetreg>
 8005266:	bd70      	pop	{r4, r5, r6, pc}
 8005268:	000a0014 	.word	0x000a0014

0800526c <ull_signal_rx_buff_free>:
 800526c:	b510      	push	{r4, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	4604      	mov	r4, r0
 8005272:	2200      	movs	r2, #0
 8005274:	9200      	str	r2, [sp, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	2113      	movs	r1, #19
 800527a:	f7ff feab 	bl	8004fd4 <dwt_writetodevice>
 800527e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005280:	7bda      	ldrb	r2, [r3, #15]
 8005282:	2a03      	cmp	r2, #3
 8005284:	bf0c      	ite	eq
 8005286:	2201      	moveq	r2, #1
 8005288:	2203      	movne	r2, #3
 800528a:	73da      	strb	r2, [r3, #15]
 800528c:	b002      	add	sp, #8
 800528e:	bd10      	pop	{r4, pc}

08005290 <dwt_write32bitoffsetreg>:
 8005290:	b510      	push	{r4, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	f88d 300c 	strb.w	r3, [sp, #12]
 8005298:	0a1c      	lsrs	r4, r3, #8
 800529a:	f88d 400d 	strb.w	r4, [sp, #13]
 800529e:	0c1c      	lsrs	r4, r3, #16
 80052a0:	f88d 400e 	strb.w	r4, [sp, #14]
 80052a4:	0e1b      	lsrs	r3, r3, #24
 80052a6:	f88d 300f 	strb.w	r3, [sp, #15]
 80052aa:	ab03      	add	r3, sp, #12
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2304      	movs	r3, #4
 80052b0:	b292      	uxth	r2, r2
 80052b2:	f7ff fe8f 	bl	8004fd4 <dwt_writetodevice>
 80052b6:	b004      	add	sp, #16
 80052b8:	bd10      	pop	{r4, pc}
	...

080052bc <ull_isr>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	4604      	mov	r4, r0
 80052c0:	2200      	movs	r2, #0
 80052c2:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 80052c6:	f7ff fac9 	bl	800485c <dwt_read8bitoffsetreg>
 80052ca:	4605      	mov	r5, r0
 80052cc:	2200      	movs	r2, #0
 80052ce:	2144      	movs	r1, #68	; 0x44
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7ff fa9b 	bl	800480c <dwt_read32bitoffsetreg>
 80052d6:	4606      	mov	r6, r0
 80052d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80052da:	2200      	movs	r2, #0
 80052dc:	845a      	strh	r2, [r3, #34]	; 0x22
 80052de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052e2:	61da      	str	r2, [r3, #28]
 80052e4:	841a      	strh	r2, [r3, #32]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
 80052e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80052ea:	629c      	str	r4, [r3, #40]	; 0x28
 80052ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80052ee:	61d8      	str	r0, [r3, #28]
 80052f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80052f2:	7dd3      	ldrb	r3, [r2, #23]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d079      	beq.n	80053f0 <ull_isr+0x134>
 80052fc:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8005300:	d005      	beq.n	800530e <ull_isr+0x52>
 8005302:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800530e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005312:	d174      	bne.n	80053fe <ull_isr+0x142>
 8005314:	f015 0f01 	tst.w	r5, #1
 8005318:	f040 80a3 	bne.w	8005462 <ull_isr+0x1a6>
 800531c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005320:	d00b      	beq.n	800533a <ull_isr+0x7e>
 8005322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005324:	b113      	cbz	r3, 800532c <ull_isr+0x70>
 8005326:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005328:	301c      	adds	r0, #28
 800532a:	4798      	blx	r3
 800532c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005330:	2202      	movs	r2, #2
 8005332:	2144      	movs	r1, #68	; 0x44
 8005334:	4620      	mov	r0, r4
 8005336:	f7ff feaa 	bl	800508e <dwt_write16bitoffsetreg>
 800533a:	f015 0f08 	tst.w	r5, #8
 800533e:	f000 80ea 	beq.w	8005516 <ull_isr+0x25a>
 8005342:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800534a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800534c:	7bdb      	ldrb	r3, [r3, #15]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f040 8095 	bne.w	800547e <ull_isr+0x1c2>
 8005354:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005356:	61de      	str	r6, [r3, #28]
 8005358:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800535c:	f000 80a9 	beq.w	80054b2 <ull_isr+0x1f6>
 8005360:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005362:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005366:	f043 0308 	orr.w	r3, r3, #8
 800536a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800536e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8005372:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8005376:	d008      	beq.n	800538a <ull_isr+0xce>
 8005378:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800537a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800537e:	f043 0310 	orr.w	r3, r3, #16
 8005382:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005386:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800538a:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800538e:	d006      	beq.n	800539e <ull_isr+0xe2>
 8005390:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005392:	7dd3      	ldrb	r3, [r2, #23]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b03      	cmp	r3, #3
 800539a:	f000 8096 	beq.w	80054ca <ull_isr+0x20e>
 800539e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80053a2:	f040 809e 	bne.w	80054e2 <ull_isr+0x226>
 80053a6:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 80053aa:	2200      	movs	r2, #0
 80053ac:	2144      	movs	r1, #68	; 0x44
 80053ae:	4620      	mov	r0, r4
 80053b0:	f7ff ff6e 	bl	8005290 <dwt_write32bitoffsetreg>
 80053b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80053b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f040 80a1 	bne.w	8005500 <ull_isr+0x244>
 80053be:	7dc3      	ldrb	r3, [r0, #23]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	f000 809b 	beq.w	8005500 <ull_isr+0x244>
 80053ca:	69c3      	ldr	r3, [r0, #28]
 80053cc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80053d0:	61c3      	str	r3, [r0, #28]
 80053d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80053d4:	69d3      	ldr	r3, [r2, #28]
 80053d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053da:	61d3      	str	r3, [r2, #28]
 80053dc:	69e3      	ldr	r3, [r4, #28]
 80053de:	b113      	cbz	r3, 80053e6 <ull_isr+0x12a>
 80053e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80053e2:	301c      	adds	r0, #28
 80053e4:	4798      	blx	r3
 80053e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053ee:	e08b      	b.n	8005508 <ull_isr+0x24c>
 80053f0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80053f4:	bf1c      	itt	ne
 80053f6:	f045 0508 	orrne.w	r5, r5, #8
 80053fa:	b2ed      	uxtbne	r5, r5
 80053fc:	e77e      	b.n	80052fc <ull_isr+0x40>
 80053fe:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8005400:	2200      	movs	r2, #0
 8005402:	2148      	movs	r1, #72	; 0x48
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff fa17 	bl	8004838 <dwt_read16bitoffsetreg>
 800540a:	8438      	strh	r0, [r7, #32]
 800540c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800540e:	7d9a      	ldrb	r2, [r3, #22]
 8005410:	b11a      	cbz	r2, 800541a <ull_isr+0x15e>
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	f012 0f04 	tst.w	r2, #4
 8005418:	d103      	bne.n	8005422 <ull_isr+0x166>
 800541a:	8c1b      	ldrh	r3, [r3, #32]
 800541c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005420:	b18b      	cbz	r3, 8005446 <ull_isr+0x18a>
 8005422:	2304      	movs	r3, #4
 8005424:	2200      	movs	r2, #0
 8005426:	2144      	movs	r1, #68	; 0x44
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff fdde 	bl	8004fea <dwt_write8bitoffsetreg>
 800542e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8005432:	2200      	movs	r2, #0
 8005434:	2148      	movs	r1, #72	; 0x48
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff fe29 	bl	800508e <dwt_write16bitoffsetreg>
 800543c:	6a23      	ldr	r3, [r4, #32]
 800543e:	b113      	cbz	r3, 8005446 <ull_isr+0x18a>
 8005440:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005442:	301c      	adds	r0, #28
 8005444:	4798      	blx	r3
 8005446:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005448:	8c1b      	ldrh	r3, [r3, #32]
 800544a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800544e:	f43f af61 	beq.w	8005314 <ull_isr+0x58>
 8005452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005456:	2200      	movs	r2, #0
 8005458:	2148      	movs	r1, #72	; 0x48
 800545a:	4620      	mov	r0, r4
 800545c:	f7ff fe17 	bl	800508e <dwt_write16bitoffsetreg>
 8005460:	e758      	b.n	8005314 <ull_isr+0x58>
 8005462:	23f8      	movs	r3, #248	; 0xf8
 8005464:	2200      	movs	r2, #0
 8005466:	2144      	movs	r1, #68	; 0x44
 8005468:	4620      	mov	r0, r4
 800546a:	f7ff fdbe 	bl	8004fea <dwt_write8bitoffsetreg>
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f43f af53 	beq.w	800531c <ull_isr+0x60>
 8005476:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005478:	301c      	adds	r0, #28
 800547a:	4798      	blx	r3
 800547c:	e74e      	b.n	800531c <ull_isr+0x60>
 800547e:	493b      	ldr	r1, [pc, #236]	; (800556c <ull_isr+0x2b0>)
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff f9eb 	bl	800485c <dwt_read8bitoffsetreg>
 8005486:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005488:	7bdb      	ldrb	r3, [r3, #15]
 800548a:	2b03      	cmp	r3, #3
 800548c:	bf08      	it	eq
 800548e:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 8005492:	f010 0f01 	tst.w	r0, #1
 8005496:	bf18      	it	ne
 8005498:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800549c:	f010 0f02 	tst.w	r0, #2
 80054a0:	bf18      	it	ne
 80054a2:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 80054a6:	f010 0f04 	tst.w	r0, #4
 80054aa:	bf18      	it	ne
 80054ac:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 80054b0:	e750      	b.n	8005354 <ull_isr+0x98>
 80054b2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80054b6:	bf1f      	itttt	ne
 80054b8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 80054ba:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 80054be:	f043 0304 	orrne.w	r3, r3, #4
 80054c2:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 80054c6:	2700      	movs	r7, #0
 80054c8:	e753      	b.n	8005372 <ull_isr+0xb6>
 80054ca:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80054ce:	f043 0302 	orr.w	r3, r3, #2
 80054d2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80054d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054d8:	2200      	movs	r2, #0
 80054da:	845a      	strh	r2, [r3, #34]	; 0x22
 80054dc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80054e0:	e761      	b.n	80053a6 <ull_isr+0xea>
 80054e2:	4620      	mov	r0, r4
 80054e4:	f7ff fd8e 	bl	8005004 <ull_getframelength>
 80054e8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80054ec:	f43f af5b 	beq.w	80053a6 <ull_isr+0xea>
 80054f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80054f2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80054fe:	e752      	b.n	80053a6 <ull_isr+0xea>
 8005500:	6963      	ldr	r3, [r4, #20]
 8005502:	b10b      	cbz	r3, 8005508 <ull_isr+0x24c>
 8005504:	301c      	adds	r0, #28
 8005506:	4798      	blx	r3
 8005508:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800550a:	7bdb      	ldrb	r3, [r3, #15]
 800550c:	b953      	cbnz	r3, 8005524 <ull_isr+0x268>
 800550e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005516:	f015 0f10 	tst.w	r5, #16
 800551a:	d107      	bne.n	800552c <ull_isr+0x270>
 800551c:	f015 0f20 	tst.w	r5, #32
 8005520:	d114      	bne.n	800554c <ull_isr+0x290>
 8005522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fea1 	bl	800526c <ull_signal_rx_buff_free>
 800552a:	e7f0      	b.n	800550e <ull_isr+0x252>
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <ull_isr+0x2b4>)
 800552e:	2200      	movs	r2, #0
 8005530:	2144      	movs	r1, #68	; 0x44
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff feac 	bl	8005290 <dwt_write32bitoffsetreg>
 8005538:	69e3      	ldr	r3, [r4, #28]
 800553a:	b113      	cbz	r3, 8005542 <ull_isr+0x286>
 800553c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800553e:	301c      	adds	r0, #28
 8005540:	4798      	blx	r3
 8005542:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800554a:	e7e7      	b.n	800551c <ull_isr+0x260>
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <ull_isr+0x2b8>)
 800554e:	2200      	movs	r2, #0
 8005550:	2144      	movs	r1, #68	; 0x44
 8005552:	4620      	mov	r0, r4
 8005554:	f7ff fe9c 	bl	8005290 <dwt_write32bitoffsetreg>
 8005558:	69a3      	ldr	r3, [r4, #24]
 800555a:	b113      	cbz	r3, 8005562 <ull_isr+0x2a6>
 800555c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800555e:	301c      	adds	r0, #28
 8005560:	4798      	blx	r3
 8005562:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800556a:	e7da      	b.n	8005522 <ull_isr+0x266>
 800556c:	00010024 	.word	0x00010024
 8005570:	34059400 	.word	0x34059400
 8005574:	10220400 	.word	0x10220400

08005578 <_dwt_adjust_delaytime>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4604      	mov	r4, r0
 800557c:	b989      	cbnz	r1, 80055a2 <_dwt_adjust_delaytime+0x2a>
 800557e:	2200      	movs	r2, #0
 8005580:	212c      	movs	r1, #44	; 0x2c
 8005582:	f7ff f943 	bl	800480c <dwt_read32bitoffsetreg>
 8005586:	4605      	mov	r5, r0
 8005588:	2201      	movs	r2, #1
 800558a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff f964 	bl	800485c <dwt_read8bitoffsetreg>
 8005594:	1a2b      	subs	r3, r5, r0
 8005596:	2200      	movs	r2, #0
 8005598:	212c      	movs	r1, #44	; 0x2c
 800559a:	4620      	mov	r0, r4
 800559c:	f7ff fe78 	bl	8005290 <dwt_write32bitoffsetreg>
 80055a0:	bd38      	pop	{r3, r4, r5, pc}
 80055a2:	2200      	movs	r2, #0
 80055a4:	212c      	movs	r1, #44	; 0x2c
 80055a6:	f7ff f931 	bl	800480c <dwt_read32bitoffsetreg>
 80055aa:	4605      	mov	r5, r0
 80055ac:	2201      	movs	r2, #1
 80055ae:	4905      	ldr	r1, [pc, #20]	; (80055c4 <_dwt_adjust_delaytime+0x4c>)
 80055b0:	4620      	mov	r0, r4
 80055b2:	f7ff f953 	bl	800485c <dwt_read8bitoffsetreg>
 80055b6:	1a2b      	subs	r3, r5, r0
 80055b8:	2200      	movs	r2, #0
 80055ba:	212c      	movs	r1, #44	; 0x2c
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff fe67 	bl	8005290 <dwt_write32bitoffsetreg>
 80055c2:	e7ed      	b.n	80055a0 <_dwt_adjust_delaytime+0x28>
 80055c4:	00010004 	.word	0x00010004

080055c8 <ull_setrxaftertxdelay>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	4606      	mov	r6, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	4d08      	ldr	r5, [pc, #32]	; (80055f0 <ull_setrxaftertxdelay+0x28>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	4629      	mov	r1, r5
 80055d4:	f7ff f91a 	bl	800480c <dwt_read32bitoffsetreg>
 80055d8:	0d00      	lsrs	r0, r0, #20
 80055da:	0500      	lsls	r0, r0, #20
 80055dc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80055e0:	4303      	orrs	r3, r0
 80055e2:	2200      	movs	r2, #0
 80055e4:	4629      	mov	r1, r5
 80055e6:	4630      	mov	r0, r6
 80055e8:	f7ff fe52 	bl	8005290 <dwt_write32bitoffsetreg>
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
 80055ee:	bf00      	nop
 80055f0:	00010008 	.word	0x00010008

080055f4 <ull_setlnapamode>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4605      	mov	r5, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	2200      	movs	r2, #0
 80055fc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8005600:	f7ff f904 	bl	800480c <dwt_read32bitoffsetreg>
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <ull_setlnapamode+0x40>)
 8005606:	4003      	ands	r3, r0
 8005608:	f014 0f01 	tst.w	r4, #1
 800560c:	bf18      	it	ne
 800560e:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 8005612:	f014 0f02 	tst.w	r4, #2
 8005616:	bf18      	it	ne
 8005618:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 800561c:	f014 0f04 	tst.w	r4, #4
 8005620:	bf18      	it	ne
 8005622:	f043 0312 	orrne.w	r3, r3, #18
 8005626:	2200      	movs	r2, #0
 8005628:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800562c:	4628      	mov	r0, r5
 800562e:	f7ff fe2f 	bl	8005290 <dwt_write32bitoffsetreg>
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	ffe00fc0 	.word	0xffe00fc0

08005638 <ull_configurestskey>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4605      	mov	r5, r0
 800563c:	460c      	mov	r4, r1
 800563e:	680b      	ldr	r3, [r1, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	490b      	ldr	r1, [pc, #44]	; (8005670 <ull_configurestskey+0x38>)
 8005644:	f7ff fe24 	bl	8005290 <dwt_write32bitoffsetreg>
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	4909      	ldr	r1, [pc, #36]	; (8005674 <ull_configurestskey+0x3c>)
 800564e:	4628      	mov	r0, r5
 8005650:	f7ff fe1e 	bl	8005290 <dwt_write32bitoffsetreg>
 8005654:	68a3      	ldr	r3, [r4, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	4907      	ldr	r1, [pc, #28]	; (8005678 <ull_configurestskey+0x40>)
 800565a:	4628      	mov	r0, r5
 800565c:	f7ff fe18 	bl	8005290 <dwt_write32bitoffsetreg>
 8005660:	68e3      	ldr	r3, [r4, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	4905      	ldr	r1, [pc, #20]	; (800567c <ull_configurestskey+0x44>)
 8005666:	4628      	mov	r0, r5
 8005668:	f7ff fe12 	bl	8005290 <dwt_write32bitoffsetreg>
 800566c:	bd38      	pop	{r3, r4, r5, pc}
 800566e:	bf00      	nop
 8005670:	0002000c 	.word	0x0002000c
 8005674:	00020010 	.word	0x00020010
 8005678:	00020014 	.word	0x00020014
 800567c:	00020018 	.word	0x00020018

08005680 <ull_configurestsiv>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	460c      	mov	r4, r1
 8005686:	680b      	ldr	r3, [r1, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	490b      	ldr	r1, [pc, #44]	; (80056b8 <ull_configurestsiv+0x38>)
 800568c:	f7ff fe00 	bl	8005290 <dwt_write32bitoffsetreg>
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	4909      	ldr	r1, [pc, #36]	; (80056bc <ull_configurestsiv+0x3c>)
 8005696:	4628      	mov	r0, r5
 8005698:	f7ff fdfa 	bl	8005290 <dwt_write32bitoffsetreg>
 800569c:	68a3      	ldr	r3, [r4, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	4907      	ldr	r1, [pc, #28]	; (80056c0 <ull_configurestsiv+0x40>)
 80056a2:	4628      	mov	r0, r5
 80056a4:	f7ff fdf4 	bl	8005290 <dwt_write32bitoffsetreg>
 80056a8:	68e3      	ldr	r3, [r4, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	4905      	ldr	r1, [pc, #20]	; (80056c4 <ull_configurestsiv+0x44>)
 80056ae:	4628      	mov	r0, r5
 80056b0:	f7ff fdee 	bl	8005290 <dwt_write32bitoffsetreg>
 80056b4:	bd38      	pop	{r3, r4, r5, pc}
 80056b6:	bf00      	nop
 80056b8:	0002001c 	.word	0x0002001c
 80056bc:	00020020 	.word	0x00020020
 80056c0:	00020024 	.word	0x00020024
 80056c4:	00020028 	.word	0x00020028

080056c8 <ull_configmrxlut>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	4604      	mov	r4, r0
 80056ce:	2905      	cmp	r1, #5
 80056d0:	d040      	beq.n	8005754 <ull_configmrxlut+0x8c>
 80056d2:	4d26      	ldr	r5, [pc, #152]	; (800576c <ull_configmrxlut+0xa4>)
 80056d4:	462e      	mov	r6, r5
 80056d6:	4f26      	ldr	r7, [pc, #152]	; (8005770 <ull_configmrxlut+0xa8>)
 80056d8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80057b4 <ull_configmrxlut+0xec>
 80056dc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80057b8 <ull_configmrxlut+0xf0>
 80056e0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80057bc <ull_configmrxlut+0xf4>
 80056e4:	4b23      	ldr	r3, [pc, #140]	; (8005774 <ull_configmrxlut+0xac>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	4923      	ldr	r1, [pc, #140]	; (8005778 <ull_configmrxlut+0xb0>)
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7ff fdd0 	bl	8005290 <dwt_write32bitoffsetreg>
 80056f0:	4653      	mov	r3, sl
 80056f2:	2200      	movs	r2, #0
 80056f4:	4921      	ldr	r1, [pc, #132]	; (800577c <ull_configmrxlut+0xb4>)
 80056f6:	4620      	mov	r0, r4
 80056f8:	f7ff fdca 	bl	8005290 <dwt_write32bitoffsetreg>
 80056fc:	464b      	mov	r3, r9
 80056fe:	2200      	movs	r2, #0
 8005700:	491f      	ldr	r1, [pc, #124]	; (8005780 <ull_configmrxlut+0xb8>)
 8005702:	4620      	mov	r0, r4
 8005704:	f7ff fdc4 	bl	8005290 <dwt_write32bitoffsetreg>
 8005708:	4643      	mov	r3, r8
 800570a:	2200      	movs	r2, #0
 800570c:	491d      	ldr	r1, [pc, #116]	; (8005784 <ull_configmrxlut+0xbc>)
 800570e:	4620      	mov	r0, r4
 8005710:	f7ff fdbe 	bl	8005290 <dwt_write32bitoffsetreg>
 8005714:	463b      	mov	r3, r7
 8005716:	2200      	movs	r2, #0
 8005718:	491b      	ldr	r1, [pc, #108]	; (8005788 <ull_configmrxlut+0xc0>)
 800571a:	4620      	mov	r0, r4
 800571c:	f7ff fdb8 	bl	8005290 <dwt_write32bitoffsetreg>
 8005720:	4633      	mov	r3, r6
 8005722:	2200      	movs	r2, #0
 8005724:	4919      	ldr	r1, [pc, #100]	; (800578c <ull_configmrxlut+0xc4>)
 8005726:	4620      	mov	r0, r4
 8005728:	f7ff fdb2 	bl	8005290 <dwt_write32bitoffsetreg>
 800572c:	462b      	mov	r3, r5
 800572e:	2200      	movs	r2, #0
 8005730:	4917      	ldr	r1, [pc, #92]	; (8005790 <ull_configmrxlut+0xc8>)
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff fdac 	bl	8005290 <dwt_write32bitoffsetreg>
 8005738:	4b16      	ldr	r3, [pc, #88]	; (8005794 <ull_configmrxlut+0xcc>)
 800573a:	2200      	movs	r2, #0
 800573c:	4916      	ldr	r1, [pc, #88]	; (8005798 <ull_configmrxlut+0xd0>)
 800573e:	4620      	mov	r0, r4
 8005740:	f7ff fda6 	bl	8005290 <dwt_write32bitoffsetreg>
 8005744:	4b15      	ldr	r3, [pc, #84]	; (800579c <ull_configmrxlut+0xd4>)
 8005746:	2200      	movs	r2, #0
 8005748:	4915      	ldr	r1, [pc, #84]	; (80057a0 <ull_configmrxlut+0xd8>)
 800574a:	4620      	mov	r0, r4
 800574c:	f7ff fda0 	bl	8005290 <dwt_write32bitoffsetreg>
 8005750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005754:	4d13      	ldr	r5, [pc, #76]	; (80057a4 <ull_configmrxlut+0xdc>)
 8005756:	4e14      	ldr	r6, [pc, #80]	; (80057a8 <ull_configmrxlut+0xe0>)
 8005758:	4f14      	ldr	r7, [pc, #80]	; (80057ac <ull_configmrxlut+0xe4>)
 800575a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80057c0 <ull_configmrxlut+0xf8>
 800575e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80057c4 <ull_configmrxlut+0xfc>
 8005762:	f8df a064 	ldr.w	sl, [pc, #100]	; 80057c8 <ull_configmrxlut+0x100>
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <ull_configmrxlut+0xe8>)
 8005768:	e7bd      	b.n	80056e6 <ull_configmrxlut+0x1e>
 800576a:	bf00      	nop
 800576c:	0002afb5 	.word	0x0002afb5
 8005770:	0002af7d 	.word	0x0002af7d
 8005774:	0002a8fe 	.word	0x0002a8fe
 8005778:	00030038 	.word	0x00030038
 800577c:	0003003c 	.word	0x0003003c
 8005780:	00030040 	.word	0x00030040
 8005784:	00030044 	.word	0x00030044
 8005788:	00030048 	.word	0x00030048
 800578c:	0003004c 	.word	0x0003004c
 8005790:	00030050 	.word	0x00030050
 8005794:	10000240 	.word	0x10000240
 8005798:	0003001c 	.word	0x0003001c
 800579c:	1b6da489 	.word	0x1b6da489
 80057a0:	00030020 	.word	0x00030020
 80057a4:	0001cff5 	.word	0x0001cff5
 80057a8:	0001cfb5 	.word	0x0001cfb5
 80057ac:	0001cf36 	.word	0x0001cf36
 80057b0:	0001c0fd 	.word	0x0001c0fd
 80057b4:	0002af3e 	.word	0x0002af3e
 80057b8:	0002a5fe 	.word	0x0002a5fe
 80057bc:	0002ac36 	.word	0x0002ac36
 80057c0:	0001c77e 	.word	0x0001c77e
 80057c4:	0001c6be 	.word	0x0001c6be
 80057c8:	0001c43e 	.word	0x0001c43e

080057cc <ull_disable_rftx_blocks>:
 80057cc:	b508      	push	{r3, lr}
 80057ce:	2300      	movs	r3, #0
 80057d0:	461a      	mov	r2, r3
 80057d2:	4902      	ldr	r1, [pc, #8]	; (80057dc <ull_disable_rftx_blocks+0x10>)
 80057d4:	f7ff fd5c 	bl	8005290 <dwt_write32bitoffsetreg>
 80057d8:	bd08      	pop	{r3, pc}
 80057da:	bf00      	nop
 80057dc:	00070004 	.word	0x00070004

080057e0 <ull_disable_rf_tx>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4604      	mov	r4, r0
 80057e4:	460d      	mov	r5, r1
 80057e6:	2300      	movs	r3, #0
 80057e8:	461a      	mov	r2, r3
 80057ea:	490a      	ldr	r1, [pc, #40]	; (8005814 <ull_disable_rf_tx+0x34>)
 80057ec:	f7ff fd50 	bl	8005290 <dwt_write32bitoffsetreg>
 80057f0:	2300      	movs	r3, #0
 80057f2:	461a      	mov	r2, r3
 80057f4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80057f8:	4620      	mov	r0, r4
 80057fa:	f7ff fd49 	bl	8005290 <dwt_write32bitoffsetreg>
 80057fe:	b905      	cbnz	r5, 8005802 <ull_disable_rf_tx+0x22>
 8005800:	bd38      	pop	{r3, r4, r5, pc}
 8005802:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8005806:	2200      	movs	r2, #0
 8005808:	4903      	ldr	r1, [pc, #12]	; (8005818 <ull_disable_rf_tx+0x38>)
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff fd40 	bl	8005290 <dwt_write32bitoffsetreg>
 8005810:	e7f6      	b.n	8005800 <ull_disable_rf_tx+0x20>
 8005812:	bf00      	nop
 8005814:	00070048 	.word	0x00070048
 8005818:	00070014 	.word	0x00070014

0800581c <ull_readrxdata>:
 800581c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581e:	b083      	sub	sp, #12
 8005820:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005822:	7be4      	ldrb	r4, [r4, #15]
 8005824:	2c03      	cmp	r4, #3
 8005826:	bf0c      	ite	eq
 8005828:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800582c:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8005830:	189c      	adds	r4, r3, r2
 8005832:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005836:	da19      	bge.n	800586c <ull_readrxdata+0x50>
 8005838:	461d      	mov	r5, r3
 800583a:	4616      	mov	r6, r2
 800583c:	460f      	mov	r7, r1
 800583e:	4604      	mov	r4, r0
 8005840:	2b7f      	cmp	r3, #127	; 0x7f
 8005842:	d915      	bls.n	8005870 <ull_readrxdata+0x54>
 8005844:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8005848:	2200      	movs	r2, #0
 800584a:	490d      	ldr	r1, [pc, #52]	; (8005880 <ull_readrxdata+0x64>)
 800584c:	f7ff fd20 	bl	8005290 <dwt_write32bitoffsetreg>
 8005850:	462b      	mov	r3, r5
 8005852:	2200      	movs	r2, #0
 8005854:	490b      	ldr	r1, [pc, #44]	; (8005884 <ull_readrxdata+0x68>)
 8005856:	4620      	mov	r0, r4
 8005858:	f7ff fd1a 	bl	8005290 <dwt_write32bitoffsetreg>
 800585c:	9700      	str	r7, [sp, #0]
 800585e:	4633      	mov	r3, r6
 8005860:	2200      	movs	r2, #0
 8005862:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8005866:	4620      	mov	r0, r4
 8005868:	f7fe ffc6 	bl	80047f8 <dwt_readfromdevice>
 800586c:	b003      	add	sp, #12
 800586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005870:	9100      	str	r1, [sp, #0]
 8005872:	4613      	mov	r3, r2
 8005874:	462a      	mov	r2, r5
 8005876:	4661      	mov	r1, ip
 8005878:	f7fe ffbe 	bl	80047f8 <dwt_readfromdevice>
 800587c:	e7f6      	b.n	800586c <ull_readrxdata+0x50>
 800587e:	bf00      	nop
 8005880:	001f0004 	.word	0x001f0004
 8005884:	001f0008 	.word	0x001f0008

08005888 <ull_rxenable>:
 8005888:	b530      	push	{r4, r5, lr}
 800588a:	b083      	sub	sp, #12
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b171      	cbz	r1, 80058b0 <ull_rxenable+0x28>
 8005892:	f021 0302 	bic.w	r3, r1, #2
 8005896:	3b01      	subs	r3, #1
 8005898:	2b0f      	cmp	r3, #15
 800589a:	d856      	bhi.n	800594a <ull_rxenable+0xc2>
 800589c:	e8df f003 	tbb	[pc, r3]
 80058a0:	21555510 	.word	0x21555510
 80058a4:	28555555 	.word	0x28555555
 80058a8:	55555555 	.word	0x55555555
 80058ac:	33555555 	.word	0x33555555
 80058b0:	2200      	movs	r2, #0
 80058b2:	9200      	str	r2, [sp, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	2102      	movs	r1, #2
 80058b8:	f7ff fb8c 	bl	8004fd4 <dwt_writetodevice>
 80058bc:	4620      	mov	r0, r4
 80058be:	e00e      	b.n	80058de <ull_rxenable+0x56>
 80058c0:	2200      	movs	r2, #0
 80058c2:	9200      	str	r2, [sp, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	2104      	movs	r1, #4
 80058c8:	f7ff fb84 	bl	8004fd4 <dwt_writetodevice>
 80058cc:	2203      	movs	r2, #3
 80058ce:	2144      	movs	r1, #68	; 0x44
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7fe ffc3 	bl	800485c <dwt_read8bitoffsetreg>
 80058d6:	f010 0f08 	tst.w	r0, #8
 80058da:	d11f      	bne.n	800591c <ull_rxenable+0x94>
 80058dc:	2000      	movs	r0, #0
 80058de:	b003      	add	sp, #12
 80058e0:	bd30      	pop	{r4, r5, pc}
 80058e2:	2200      	movs	r2, #0
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	4613      	mov	r3, r2
 80058e8:	210a      	movs	r1, #10
 80058ea:	f7ff fb73 	bl	8004fd4 <dwt_writetodevice>
 80058ee:	e7ed      	b.n	80058cc <ull_rxenable+0x44>
 80058f0:	2100      	movs	r1, #0
 80058f2:	f7ff fe41 	bl	8005578 <_dwt_adjust_delaytime>
 80058f6:	2200      	movs	r2, #0
 80058f8:	9200      	str	r2, [sp, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	2108      	movs	r1, #8
 80058fe:	4628      	mov	r0, r5
 8005900:	f7ff fb68 	bl	8004fd4 <dwt_writetodevice>
 8005904:	e7e2      	b.n	80058cc <ull_rxenable+0x44>
 8005906:	2101      	movs	r1, #1
 8005908:	f7ff fe36 	bl	8005578 <_dwt_adjust_delaytime>
 800590c:	2200      	movs	r2, #0
 800590e:	9200      	str	r2, [sp, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	2106      	movs	r1, #6
 8005914:	4628      	mov	r0, r5
 8005916:	f7ff fb5d 	bl	8004fd4 <dwt_writetodevice>
 800591a:	e7d7      	b.n	80058cc <ull_rxenable+0x44>
 800591c:	2100      	movs	r1, #0
 800591e:	9100      	str	r1, [sp, #0]
 8005920:	460b      	mov	r3, r1
 8005922:	460a      	mov	r2, r1
 8005924:	4628      	mov	r0, r5
 8005926:	f7ff fb55 	bl	8004fd4 <dwt_writetodevice>
 800592a:	f014 0f02 	tst.w	r4, #2
 800592e:	d002      	beq.n	8005936 <ull_rxenable+0xae>
 8005930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005934:	e7d3      	b.n	80058de <ull_rxenable+0x56>
 8005936:	2200      	movs	r2, #0
 8005938:	9200      	str	r2, [sp, #0]
 800593a:	4613      	mov	r3, r2
 800593c:	2102      	movs	r1, #2
 800593e:	4628      	mov	r0, r5
 8005940:	f7ff fb48 	bl	8004fd4 <dwt_writetodevice>
 8005944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005948:	e7c9      	b.n	80058de <ull_rxenable+0x56>
 800594a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800594e:	e7c6      	b.n	80058de <ull_rxenable+0x56>

08005950 <ull_writetxdata>:
 8005950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005952:	b083      	sub	sp, #12
 8005954:	185c      	adds	r4, r3, r1
 8005956:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800595a:	da24      	bge.n	80059a6 <ull_writetxdata+0x56>
 800595c:	461c      	mov	r4, r3
 800595e:	4617      	mov	r7, r2
 8005960:	460e      	mov	r6, r1
 8005962:	4605      	mov	r5, r0
 8005964:	2b7f      	cmp	r3, #127	; 0x7f
 8005966:	d915      	bls.n	8005994 <ull_writetxdata+0x44>
 8005968:	2314      	movs	r3, #20
 800596a:	2200      	movs	r2, #0
 800596c:	490f      	ldr	r1, [pc, #60]	; (80059ac <ull_writetxdata+0x5c>)
 800596e:	f7ff fc8f 	bl	8005290 <dwt_write32bitoffsetreg>
 8005972:	4623      	mov	r3, r4
 8005974:	2200      	movs	r2, #0
 8005976:	490e      	ldr	r1, [pc, #56]	; (80059b0 <ull_writetxdata+0x60>)
 8005978:	4628      	mov	r0, r5
 800597a:	f7ff fc89 	bl	8005290 <dwt_write32bitoffsetreg>
 800597e:	9700      	str	r7, [sp, #0]
 8005980:	4633      	mov	r3, r6
 8005982:	2200      	movs	r2, #0
 8005984:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8005988:	4628      	mov	r0, r5
 800598a:	f7ff fb23 	bl	8004fd4 <dwt_writetodevice>
 800598e:	2000      	movs	r0, #0
 8005990:	b003      	add	sp, #12
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005994:	9200      	str	r2, [sp, #0]
 8005996:	460b      	mov	r3, r1
 8005998:	4622      	mov	r2, r4
 800599a:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800599e:	f7ff fb19 	bl	8004fd4 <dwt_writetodevice>
 80059a2:	2000      	movs	r0, #0
 80059a4:	e7f4      	b.n	8005990 <ull_writetxdata+0x40>
 80059a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059aa:	e7f1      	b.n	8005990 <ull_writetxdata+0x40>
 80059ac:	001f0004 	.word	0x001f0004
 80059b0:	001f0008 	.word	0x001f0008

080059b4 <dwt_modify32bitoffsetreg>:
 80059b4:	b530      	push	{r4, r5, lr}
 80059b6:	b085      	sub	sp, #20
 80059b8:	9c08      	ldr	r4, [sp, #32]
 80059ba:	f88d 3008 	strb.w	r3, [sp, #8]
 80059be:	0a1d      	lsrs	r5, r3, #8
 80059c0:	f88d 5009 	strb.w	r5, [sp, #9]
 80059c4:	0c1d      	lsrs	r5, r3, #16
 80059c6:	f88d 500a 	strb.w	r5, [sp, #10]
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	f88d 300b 	strb.w	r3, [sp, #11]
 80059d0:	f88d 400c 	strb.w	r4, [sp, #12]
 80059d4:	0a23      	lsrs	r3, r4, #8
 80059d6:	f88d 300d 	strb.w	r3, [sp, #13]
 80059da:	0c23      	lsrs	r3, r4, #16
 80059dc:	f88d 300e 	strb.w	r3, [sp, #14]
 80059e0:	0e24      	lsrs	r4, r4, #24
 80059e2:	f88d 400f 	strb.w	r4, [sp, #15]
 80059e6:	f248 0303 	movw	r3, #32771	; 0x8003
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	ab02      	add	r3, sp, #8
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	2308      	movs	r3, #8
 80059f2:	b292      	uxth	r2, r2
 80059f4:	f7fe fe7d 	bl	80046f2 <dwt_xfer3xxx>
 80059f8:	b005      	add	sp, #20
 80059fa:	bd30      	pop	{r4, r5, pc}

080059fc <_dwt_kick_dgc_on_wakeup>:
 80059fc:	b500      	push	{lr}
 80059fe:	b083      	sub	sp, #12
 8005a00:	2905      	cmp	r1, #5
 8005a02:	d004      	beq.n	8005a0e <_dwt_kick_dgc_on_wakeup+0x12>
 8005a04:	2909      	cmp	r1, #9
 8005a06:	d00b      	beq.n	8005a20 <_dwt_kick_dgc_on_wakeup+0x24>
 8005a08:	b003      	add	sp, #12
 8005a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a0e:	2340      	movs	r3, #64	; 0x40
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005a16:	2200      	movs	r2, #0
 8005a18:	4906      	ldr	r1, [pc, #24]	; (8005a34 <_dwt_kick_dgc_on_wakeup+0x38>)
 8005a1a:	f7ff ffcb 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005a1e:	e7f3      	b.n	8005a08 <_dwt_kick_dgc_on_wakeup+0xc>
 8005a20:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4901      	ldr	r1, [pc, #4]	; (8005a34 <_dwt_kick_dgc_on_wakeup+0x38>)
 8005a2e:	f7ff ffc1 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005a32:	e7e9      	b.n	8005a08 <_dwt_kick_dgc_on_wakeup+0xc>
 8005a34:	000b0008 	.word	0x000b0008

08005a38 <ull_enable_rf_tx>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460e      	mov	r6, r1
 8005a40:	4d13      	ldr	r5, [pc, #76]	; (8005a90 <ull_enable_rf_tx+0x58>)
 8005a42:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7ff ffb0 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005a54:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4629      	mov	r1, r5
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7ff ffa6 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <ull_enable_rf_tx+0x5c>)
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a70:	2200      	movs	r2, #0
 8005a72:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7ff ff9c 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005a7c:	b90e      	cbnz	r6, 8005a82 <ull_enable_rf_tx+0x4a>
 8005a7e:	b002      	add	sp, #8
 8005a80:	bd70      	pop	{r4, r5, r6, pc}
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <ull_enable_rf_tx+0x60>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	4905      	ldr	r1, [pc, #20]	; (8005a9c <ull_enable_rf_tx+0x64>)
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f7ff fc01 	bl	8005290 <dwt_write32bitoffsetreg>
 8005a8e:	e7f6      	b.n	8005a7e <ull_enable_rf_tx+0x46>
 8005a90:	00070048 	.word	0x00070048
 8005a94:	02003c00 	.word	0x02003c00
 8005a98:	01011100 	.word	0x01011100
 8005a9c:	00070014 	.word	0x00070014

08005aa0 <ull_enable_rftx_blocks>:
 8005aa0:	b500      	push	{lr}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <ull_enable_rftx_blocks+0x1c>)
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aac:	2200      	movs	r2, #0
 8005aae:	4904      	ldr	r1, [pc, #16]	; (8005ac0 <ull_enable_rftx_blocks+0x20>)
 8005ab0:	f7ff ff80 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005ab4:	b003      	add	sp, #12
 8005ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aba:	bf00      	nop
 8005abc:	02003c00 	.word	0x02003c00
 8005ac0:	00070004 	.word	0x00070004

08005ac4 <_dwt_otpprogword32>:
 8005ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	4604      	mov	r4, r0
 8005acc:	460d      	mov	r5, r1
 8005ace:	4617      	mov	r7, r2
 8005ad0:	4e56      	ldr	r6, [pc, #344]	; (8005c2c <_dwt_otpprogword32+0x168>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	f7fe fe99 	bl	800480c <dwt_read32bitoffsetreg>
 8005ada:	4681      	mov	r9, r0
 8005adc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4631      	mov	r1, r6
 8005aea:	4620      	mov	r0, r4
 8005aec:	f7ff ff62 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005af0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8005c30 <_dwt_otpprogword32+0x16c>
 8005af4:	2318      	movs	r3, #24
 8005af6:	2200      	movs	r2, #0
 8005af8:	4641      	mov	r1, r8
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff fac7 	bl	800508e <dwt_write16bitoffsetreg>
 8005b00:	2125      	movs	r1, #37	; 0x25
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff fb0a 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7ff fb06 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b10:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8005b14:	4620      	mov	r0, r4
 8005b16:	f7ff fb01 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b1a:	b2f9      	uxtb	r1, r7
 8005b1c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005b20:	4620      	mov	r0, r4
 8005b22:	f7ff fafb 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7ff faf6 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b30:	2100      	movs	r1, #0
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7ff faf2 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b38:	2102      	movs	r1, #2
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f7ff faee 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b40:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7ff fae9 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b4a:	b2e9      	uxtb	r1, r5
 8005b4c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7ff fae3 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b56:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8005b5a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff fadc 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b64:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8005b68:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff fad5 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b72:	0e29      	lsrs	r1, r5, #24
 8005b74:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7ff facf 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4620      	mov	r0, r4
 8005b82:	f7ff facb 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b86:	213a      	movs	r1, #58	; 0x3a
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f7ff fac7 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b92:	4620      	mov	r0, r4
 8005b94:	f7ff fac2 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005b98:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f7ff fabd 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7ff fab9 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005baa:	213a      	movs	r1, #58	; 0x3a
 8005bac:	4620      	mov	r0, r4
 8005bae:	f7ff fab5 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005bb2:	f240 1101 	movw	r1, #257	; 0x101
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7ff fab0 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fa62 	bl	800508e <dwt_write16bitoffsetreg>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff fa5b 	bl	800508e <dwt_write16bitoffsetreg>
 8005bd8:	2002      	movs	r0, #2
 8005bda:	f7fa fd29 	bl	8000630 <deca_sleep>
 8005bde:	213a      	movs	r1, #58	; 0x3a
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7ff fa9b 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005be6:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005bea:	4620      	mov	r0, r4
 8005bec:	f7ff fa96 	bl	800511c <__dwt_otp_write_wdata_id_reg>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f7ff fa48 	bl	800508e <dwt_write16bitoffsetreg>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	461a      	mov	r2, r3
 8005c02:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7ff fa41 	bl	800508e <dwt_write16bitoffsetreg>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4641      	mov	r1, r8
 8005c12:	4620      	mov	r0, r4
 8005c14:	f7ff fa3b 	bl	800508e <dwt_write16bitoffsetreg>
 8005c18:	464b      	mov	r3, r9
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f7ff fb36 	bl	8005290 <dwt_write32bitoffsetreg>
 8005c24:	b003      	add	sp, #12
 8005c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c2a:	bf00      	nop
 8005c2c:	00070044 	.word	0x00070044
 8005c30:	000b0008 	.word	0x000b0008

08005c34 <ull_setgpiomode>:
 8005c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c36:	b083      	sub	sp, #12
 8005c38:	2400      	movs	r4, #0
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	2601      	movs	r6, #1
 8005c3e:	2707      	movs	r7, #7
 8005c40:	e002      	b.n	8005c48 <ull_setgpiomode+0x14>
 8005c42:	3401      	adds	r4, #1
 8005c44:	2c09      	cmp	r4, #9
 8005c46:	d009      	beq.n	8005c5c <ull_setgpiomode+0x28>
 8005c48:	fa06 f504 	lsl.w	r5, r6, r4
 8005c4c:	420d      	tst	r5, r1
 8005c4e:	d0f8      	beq.n	8005c42 <ull_setgpiomode+0xe>
 8005c50:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005c54:	fa07 f505 	lsl.w	r5, r7, r5
 8005c58:	432b      	orrs	r3, r5
 8005c5a:	e7f2      	b.n	8005c42 <ull_setgpiomode+0xe>
 8005c5c:	401a      	ands	r2, r3
 8005c5e:	9200      	str	r2, [sp, #0]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	2200      	movs	r2, #0
 8005c64:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8005c68:	f7ff fea4 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005c6c:	b003      	add	sp, #12
 8005c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c70 <ull_setinterrupt>:
 8005c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	4604      	mov	r4, r0
 8005c78:	4688      	mov	r8, r1
 8005c7a:	4617      	mov	r7, r2
 8005c7c:	461d      	mov	r5, r3
 8005c7e:	f7fa fcb9 	bl	80005f4 <decamutexon>
 8005c82:	4606      	mov	r6, r0
 8005c84:	2d02      	cmp	r5, #2
 8005c86:	d02d      	beq.n	8005ce4 <ull_setinterrupt+0x74>
 8005c88:	2d01      	cmp	r5, #1
 8005c8a:	d038      	beq.n	8005cfe <ull_setinterrupt+0x8e>
 8005c8c:	2500      	movs	r5, #0
 8005c8e:	9500      	str	r5, [sp, #0]
 8005c90:	ea6f 0308 	mvn.w	r3, r8
 8005c94:	462a      	mov	r2, r5
 8005c96:	213c      	movs	r1, #60	; 0x3c
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7ff fe8b 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005c9e:	9500      	str	r5, [sp, #0]
 8005ca0:	43fb      	mvns	r3, r7
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	2140      	movs	r1, #64	; 0x40
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f7ff fe84 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005cac:	2200      	movs	r2, #0
 8005cae:	213c      	movs	r1, #60	; 0x3c
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f7fe fdab 	bl	800480c <dwt_read32bitoffsetreg>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2144      	movs	r1, #68	; 0x44
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff fae7 	bl	8005290 <dwt_write32bitoffsetreg>
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2140      	movs	r1, #64	; 0x40
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f7fe fda0 	bl	800480c <dwt_read32bitoffsetreg>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2148      	movs	r1, #72	; 0x48
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7ff fadc 	bl	8005290 <dwt_write32bitoffsetreg>
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f7fa fc9c 	bl	8000616 <decamutexoff>
 8005cde:	b002      	add	sp, #8
 8005ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce4:	4643      	mov	r3, r8
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	213c      	movs	r1, #60	; 0x3c
 8005cea:	4620      	mov	r0, r4
 8005cec:	f7ff fad0 	bl	8005290 <dwt_write32bitoffsetreg>
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f7ff faca 	bl	8005290 <dwt_write32bitoffsetreg>
 8005cfc:	e7d6      	b.n	8005cac <ull_setinterrupt+0x3c>
 8005cfe:	f8cd 8000 	str.w	r8, [sp]
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d06:	2200      	movs	r2, #0
 8005d08:	213c      	movs	r1, #60	; 0x3c
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7ff fe52 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005d10:	9700      	str	r7, [sp, #0]
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d16:	2200      	movs	r2, #0
 8005d18:	2140      	movs	r1, #64	; 0x40
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff fe4a 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005d20:	e7c4      	b.n	8005cac <ull_setinterrupt+0x3c>
	...

08005d24 <ull_writetxfctrl>:
 8005d24:	b510      	push	{r4, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	4604      	mov	r4, r0
 8005d2a:	2a7f      	cmp	r2, #127	; 0x7f
 8005d2c:	d912      	bls.n	8005d54 <ull_writetxfctrl+0x30>
 8005d2e:	3280      	adds	r2, #128	; 0x80
 8005d30:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8005d34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d38:	9100      	str	r1, [sp, #0]
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <ull_writetxfctrl+0x48>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2124      	movs	r1, #36	; 0x24
 8005d40:	f7ff fe38 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005d44:	2200      	movs	r2, #0
 8005d46:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7fe fd86 	bl	800485c <dwt_read8bitoffsetreg>
 8005d50:	b002      	add	sp, #8
 8005d52:	bd10      	pop	{r4, pc}
 8005d54:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8005d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d5c:	9100      	str	r1, [sp, #0]
 8005d5e:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <ull_writetxfctrl+0x48>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	2124      	movs	r1, #36	; 0x24
 8005d64:	f7ff fe26 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005d68:	e7f2      	b.n	8005d50 <ull_writetxfctrl+0x2c>
 8005d6a:	bf00      	nop
 8005d6c:	fc00f400 	.word	0xfc00f400

08005d70 <prs_sys_status_and_or>:
 8005d70:	b500      	push	{lr}
 8005d72:	b083      	sub	sp, #12
 8005d74:	9200      	str	r2, [sp, #0]
 8005d76:	460b      	mov	r3, r1
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2144      	movs	r1, #68	; 0x44
 8005d7c:	f7ff fe1a 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005d80:	2000      	movs	r0, #0
 8005d82:	b003      	add	sp, #12
 8005d84:	f85d fb04 	ldr.w	pc, [sp], #4

08005d88 <dwt_modify8bitoffsetreg>:
 8005d88:	b500      	push	{lr}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	f88d 300c 	strb.w	r3, [sp, #12]
 8005d90:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005d94:	f88d 300d 	strb.w	r3, [sp, #13]
 8005d98:	f248 0301 	movw	r3, #32769	; 0x8001
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	ab03      	add	r3, sp, #12
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	2302      	movs	r3, #2
 8005da4:	b292      	uxth	r2, r2
 8005da6:	f7fe fca4 	bl	80046f2 <dwt_xfer3xxx>
 8005daa:	b005      	add	sp, #20
 8005dac:	f85d fb04 	ldr.w	pc, [sp], #4

08005db0 <ull_configciadiag>:
 8005db0:	b530      	push	{r4, r5, lr}
 8005db2:	b083      	sub	sp, #12
 8005db4:	4604      	mov	r4, r0
 8005db6:	460d      	mov	r5, r1
 8005db8:	f011 0f01 	tst.w	r1, #1
 8005dbc:	d015      	beq.n	8005dea <ull_configciadiag+0x3a>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	23ef      	movs	r3, #239	; 0xef
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005dca:	f7ff ffdd 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005dce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005dd0:	761d      	strb	r5, [r3, #24]
 8005dd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005dd4:	7e1b      	ldrb	r3, [r3, #24]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	d010      	beq.n	8005dfc <ull_configciadiag+0x4c>
 8005dda:	086b      	lsrs	r3, r5, #1
 8005ddc:	2200      	movs	r2, #0
 8005dde:	490e      	ldr	r1, [pc, #56]	; (8005e18 <ull_configciadiag+0x68>)
 8005de0:	4620      	mov	r0, r4
 8005de2:	f7ff f902 	bl	8004fea <dwt_write8bitoffsetreg>
 8005de6:	b003      	add	sp, #12
 8005de8:	bd30      	pop	{r4, r5, pc}
 8005dea:	2310      	movs	r3, #16
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	23ff      	movs	r3, #255	; 0xff
 8005df0:	2202      	movs	r2, #2
 8005df2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005df6:	f7ff ffc7 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005dfa:	e7e8      	b.n	8005dce <ull_configciadiag+0x1e>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	23ff      	movs	r3, #255	; 0xff
 8005e02:	2200      	movs	r2, #0
 8005e04:	4904      	ldr	r1, [pc, #16]	; (8005e18 <ull_configciadiag+0x68>)
 8005e06:	4620      	mov	r0, r4
 8005e08:	f7ff ffbe 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005e0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005e0e:	7e13      	ldrb	r3, [r2, #24]
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	7613      	strb	r3, [r2, #24]
 8005e16:	e7e6      	b.n	8005de6 <ull_configciadiag+0x36>
 8005e18:	00010028 	.word	0x00010028

08005e1c <ull_calcbandwidthadj>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	4604      	mov	r4, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	2101      	movs	r1, #1
 8005e26:	f7ff f963 	bl	80050f0 <ull_force_clocks>
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7ff fe03 	bl	8005a38 <ull_enable_rf_tx>
 8005e32:	4620      	mov	r0, r4
 8005e34:	f7ff fe34 	bl	8005aa0 <ull_enable_rftx_blocks>
 8005e38:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	4915      	ldr	r1, [pc, #84]	; (8005e94 <ull_calcbandwidthadj+0x78>)
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7ff f924 	bl	800508e <dwt_write16bitoffsetreg>
 8005e46:	2303      	movs	r3, #3
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	23ff      	movs	r3, #255	; 0xff
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4912      	ldr	r1, [pc, #72]	; (8005e98 <ull_calcbandwidthadj+0x7c>)
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7ff ff99 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005e56:	4e10      	ldr	r6, [pc, #64]	; (8005e98 <ull_calcbandwidthadj+0x7c>)
 8005e58:	2500      	movs	r5, #0
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7fe fcfc 	bl	800485c <dwt_read8bitoffsetreg>
 8005e64:	f010 0f01 	tst.w	r0, #1
 8005e68:	d1f7      	bne.n	8005e5a <ull_calcbandwidthadj+0x3e>
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f7ff fcae 	bl	80057cc <ull_disable_rftx_blocks>
 8005e70:	2100      	movs	r1, #0
 8005e72:	4620      	mov	r0, r4
 8005e74:	f7ff fcb4 	bl	80057e0 <ull_disable_rf_tx>
 8005e78:	2105      	movs	r1, #5
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff f938 	bl	80050f0 <ull_force_clocks>
 8005e80:	2200      	movs	r2, #0
 8005e82:	4906      	ldr	r1, [pc, #24]	; (8005e9c <ull_calcbandwidthadj+0x80>)
 8005e84:	4620      	mov	r0, r4
 8005e86:	f7fe fce9 	bl	800485c <dwt_read8bitoffsetreg>
 8005e8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005e8e:	b002      	add	sp, #8
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
 8005e92:	bf00      	nop
 8005e94:	0008001c 	.word	0x0008001c
 8005e98:	00080010 	.word	0x00080010
 8005e9c:	0007001c 	.word	0x0007001c

08005ea0 <ull_configuretxrf>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8005eaa:	b149      	cbz	r1, 8005ec0 <ull_configuretxrf+0x20>
 8005eac:	f7ff ffb6 	bl	8005e1c <ull_calcbandwidthadj>
 8005eb0:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4905      	ldr	r1, [pc, #20]	; (8005ecc <ull_configuretxrf+0x2c>)
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7ff f9e9 	bl	8005290 <dwt_write32bitoffsetreg>
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	7823      	ldrb	r3, [r4, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4902      	ldr	r1, [pc, #8]	; (8005ed0 <ull_configuretxrf+0x30>)
 8005ec6:	f7ff f890 	bl	8004fea <dwt_write8bitoffsetreg>
 8005eca:	e7f1      	b.n	8005eb0 <ull_configuretxrf+0x10>
 8005ecc:	0001000c 	.word	0x0001000c
 8005ed0:	0007001c 	.word	0x0007001c

08005ed4 <ull_repeated_frames>:
 8005ed4:	b530      	push	{r4, r5, lr}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	2310      	movs	r3, #16
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	23ff      	movs	r3, #255	; 0xff
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4906      	ldr	r1, [pc, #24]	; (8005f00 <ull_repeated_frames+0x2c>)
 8005ee6:	f7ff ff4f 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005eea:	462b      	mov	r3, r5
 8005eec:	2d02      	cmp	r5, #2
 8005eee:	bf38      	it	cc
 8005ef0:	2302      	movcc	r3, #2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	212c      	movs	r1, #44	; 0x2c
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff f9ca 	bl	8005290 <dwt_write32bitoffsetreg>
 8005efc:	b003      	add	sp, #12
 8005efe:	bd30      	pop	{r4, r5, pc}
 8005f00:	000f0024 	.word	0x000f0024

08005f04 <ull_setdwstate>:
 8005f04:	b530      	push	{r4, r5, lr}
 8005f06:	b083      	sub	sp, #12
 8005f08:	4604      	mov	r4, r0
 8005f0a:	2901      	cmp	r1, #1
 8005f0c:	d01d      	beq.n	8005f4a <ull_setdwstate+0x46>
 8005f0e:	2902      	cmp	r1, #2
 8005f10:	d030      	beq.n	8005f74 <ull_setdwstate+0x70>
 8005f12:	2301      	movs	r3, #1
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	23ff      	movs	r3, #255	; 0xff
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4926      	ldr	r1, [pc, #152]	; (8005fb4 <ull_setdwstate+0xb0>)
 8005f1c:	f7ff ff34 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005f20:	4d25      	ldr	r5, [pc, #148]	; (8005fb8 <ull_setdwstate+0xb4>)
 8005f22:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff fd3f 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005f36:	2300      	movs	r3, #0
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	237f      	movs	r3, #127	; 0x7f
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff ff21 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005f46:	b003      	add	sp, #12
 8005f48:	bd30      	pop	{r4, r5, pc}
 8005f4a:	2105      	movs	r1, #5
 8005f4c:	f7ff f8d0 	bl	80050f0 <ull_force_clocks>
 8005f50:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4917      	ldr	r1, [pc, #92]	; (8005fbc <ull_setdwstate+0xb8>)
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7ff fd28 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005f64:	2201      	movs	r2, #1
 8005f66:	9200      	str	r2, [sp, #0]
 8005f68:	23ff      	movs	r3, #255	; 0xff
 8005f6a:	4913      	ldr	r1, [pc, #76]	; (8005fb8 <ull_setdwstate+0xb4>)
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f7ff ff0b 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005f72:	e7e8      	b.n	8005f46 <ull_setdwstate+0x42>
 8005f74:	2303      	movs	r3, #3
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	23ff      	movs	r3, #255	; 0xff
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	490d      	ldr	r1, [pc, #52]	; (8005fb4 <ull_setdwstate+0xb0>)
 8005f7e:	f7ff ff03 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005f82:	4d0d      	ldr	r5, [pc, #52]	; (8005fb8 <ull_setdwstate+0xb4>)
 8005f84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4629      	mov	r1, r5
 8005f92:	4620      	mov	r0, r4
 8005f94:	f7ff fd0e 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	237f      	movs	r3, #127	; 0x7f
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7ff fef0 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005fa8:	2105      	movs	r1, #5
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7ff f8a0 	bl	80050f0 <ull_force_clocks>
 8005fb0:	e7c9      	b.n	8005f46 <ull_setdwstate+0x42>
 8005fb2:	bf00      	nop
 8005fb4:	00110004 	.word	0x00110004
 8005fb8:	00110008 	.word	0x00110008
 8005fbc:	00090008 	.word	0x00090008

08005fc0 <ull_configureframefilter>:
 8005fc0:	b530      	push	{r4, r5, lr}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	2902      	cmp	r1, #2
 8005fc8:	d00e      	beq.n	8005fe8 <ull_configureframefilter+0x28>
 8005fca:	2400      	movs	r4, #0
 8005fcc:	9400      	str	r4, [sp, #0]
 8005fce:	23fe      	movs	r3, #254	; 0xfe
 8005fd0:	4622      	mov	r2, r4
 8005fd2:	2110      	movs	r1, #16
 8005fd4:	f7ff fed8 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005fd8:	4623      	mov	r3, r4
 8005fda:	4622      	mov	r2, r4
 8005fdc:	2114      	movs	r1, #20
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f7ff f855 	bl	800508e <dwt_write16bitoffsetreg>
 8005fe4:	b003      	add	sp, #12
 8005fe6:	bd30      	pop	{r4, r5, pc}
 8005fe8:	4614      	mov	r4, r2
 8005fea:	2301      	movs	r3, #1
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	23ff      	movs	r3, #255	; 0xff
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2110      	movs	r1, #16
 8005ff4:	f7ff fec8 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2114      	movs	r1, #20
 8005ffe:	4628      	mov	r0, r5
 8006000:	f7ff f845 	bl	800508e <dwt_write16bitoffsetreg>
 8006004:	e7ee      	b.n	8005fe4 <ull_configureframefilter+0x24>
	...

08006008 <ull_run_pgfcal>:
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	4605      	mov	r5, r0
 8006010:	4c29      	ldr	r4, [pc, #164]	; (80060b8 <ull_run_pgfcal+0xb0>)
 8006012:	4b2a      	ldr	r3, [pc, #168]	; (80060bc <ull_run_pgfcal+0xb4>)
 8006014:	2200      	movs	r2, #0
 8006016:	4621      	mov	r1, r4
 8006018:	f7ff f93a 	bl	8005290 <dwt_write32bitoffsetreg>
 800601c:	2310      	movs	r3, #16
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	23ff      	movs	r3, #255	; 0xff
 8006022:	2200      	movs	r2, #0
 8006024:	4621      	mov	r1, r4
 8006026:	4628      	mov	r0, r5
 8006028:	f7ff feae 	bl	8005d88 <dwt_modify8bitoffsetreg>
 800602c:	2403      	movs	r4, #3
 800602e:	f04f 0814 	mov.w	r8, #20
 8006032:	4f23      	ldr	r7, [pc, #140]	; (80060c0 <ull_run_pgfcal+0xb8>)
 8006034:	2600      	movs	r6, #0
 8006036:	4640      	mov	r0, r8
 8006038:	f7fa fb05 	bl	8000646 <deca_usleep>
 800603c:	4632      	mov	r2, r6
 800603e:	4639      	mov	r1, r7
 8006040:	4628      	mov	r0, r5
 8006042:	f7fe fc0b 	bl	800485c <dwt_read8bitoffsetreg>
 8006046:	2801      	cmp	r0, #1
 8006048:	d034      	beq.n	80060b4 <ull_run_pgfcal+0xac>
 800604a:	1e63      	subs	r3, r4, #1
 800604c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8006050:	d1f1      	bne.n	8006036 <ull_run_pgfcal+0x2e>
 8006052:	f06f 0402 	mvn.w	r4, #2
 8006056:	4e18      	ldr	r6, [pc, #96]	; (80060b8 <ull_run_pgfcal+0xb0>)
 8006058:	2300      	movs	r3, #0
 800605a:	461a      	mov	r2, r3
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	f7fe ffc3 	bl	8004fea <dwt_write8bitoffsetreg>
 8006064:	2301      	movs	r3, #1
 8006066:	2200      	movs	r2, #0
 8006068:	4915      	ldr	r1, [pc, #84]	; (80060c0 <ull_run_pgfcal+0xb8>)
 800606a:	4628      	mov	r0, r5
 800606c:	f7fe ffbd 	bl	8004fea <dwt_write8bitoffsetreg>
 8006070:	2301      	movs	r3, #1
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	23ff      	movs	r3, #255	; 0xff
 8006076:	2202      	movs	r2, #2
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	f7ff fe84 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8006080:	2200      	movs	r2, #0
 8006082:	4910      	ldr	r1, [pc, #64]	; (80060c4 <ull_run_pgfcal+0xbc>)
 8006084:	4628      	mov	r0, r5
 8006086:	f7fe fbc1 	bl	800480c <dwt_read32bitoffsetreg>
 800608a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800608e:	4298      	cmp	r0, r3
 8006090:	bf08      	it	eq
 8006092:	f06f 0403 	mvneq.w	r4, #3
 8006096:	2200      	movs	r2, #0
 8006098:	490b      	ldr	r1, [pc, #44]	; (80060c8 <ull_run_pgfcal+0xc0>)
 800609a:	4628      	mov	r0, r5
 800609c:	f7fe fbb6 	bl	800480c <dwt_read32bitoffsetreg>
 80060a0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80060a4:	4298      	cmp	r0, r3
 80060a6:	bf14      	ite	ne
 80060a8:	4620      	movne	r0, r4
 80060aa:	f06f 0004 	mvneq.w	r0, #4
 80060ae:	b002      	add	sp, #8
 80060b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b4:	2400      	movs	r4, #0
 80060b6:	e7ce      	b.n	8006056 <ull_run_pgfcal+0x4e>
 80060b8:	0004000c 	.word	0x0004000c
 80060bc:	00020001 	.word	0x00020001
 80060c0:	00040020 	.word	0x00040020
 80060c4:	00040014 	.word	0x00040014
 80060c8:	0004001c 	.word	0x0004001c

080060cc <prs_ack_enable>:
 80060cc:	b500      	push	{lr}
 80060ce:	b083      	sub	sp, #12
 80060d0:	2900      	cmp	r1, #0
 80060d2:	bf0b      	itete	eq
 80060d4:	23ff      	moveq	r3, #255	; 0xff
 80060d6:	23f7      	movne	r3, #247	; 0xf7
 80060d8:	2200      	moveq	r2, #0
 80060da:	2208      	movne	r2, #8
 80060dc:	9200      	str	r2, [sp, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	2110      	movs	r1, #16
 80060e2:	f7ff fe51 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80060e6:	b003      	add	sp, #12
 80060e8:	f85d fb04 	ldr.w	pc, [sp], #4

080060ec <dwt_modify16bitoffsetreg>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80060f4:	f88d 300c 	strb.w	r3, [sp, #12]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	f88d 300d 	strb.w	r3, [sp, #13]
 80060fe:	f88d 400e 	strb.w	r4, [sp, #14]
 8006102:	0a24      	lsrs	r4, r4, #8
 8006104:	f88d 400f 	strb.w	r4, [sp, #15]
 8006108:	f248 0302 	movw	r3, #32770	; 0x8002
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	ab03      	add	r3, sp, #12
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	2304      	movs	r3, #4
 8006114:	b292      	uxth	r2, r2
 8006116:	f7fe faec 	bl	80046f2 <dwt_xfer3xxx>
 800611a:	b004      	add	sp, #16
 800611c:	bd10      	pop	{r4, pc}
	...

08006120 <_dwt_prog_ldo_and_bias_tune>:
 8006120:	b510      	push	{r4, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	4604      	mov	r4, r0
 8006126:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006130:	2200      	movs	r2, #0
 8006132:	4907      	ldr	r1, [pc, #28]	; (8006150 <_dwt_prog_ldo_and_bias_tune+0x30>)
 8006134:	f7ff ffda 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006138:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800613a:	7a1b      	ldrb	r3, [r3, #8]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006142:	2200      	movs	r2, #0
 8006144:	4903      	ldr	r1, [pc, #12]	; (8006154 <_dwt_prog_ldo_and_bias_tune+0x34>)
 8006146:	4620      	mov	r0, r4
 8006148:	f7ff ffd0 	bl	80060ec <dwt_modify16bitoffsetreg>
 800614c:	b002      	add	sp, #8
 800614e:	bd10      	pop	{r4, pc}
 8006150:	000b0008 	.word	0x000b0008
 8006154:	0011001f 	.word	0x0011001f

08006158 <ull_setleds>:
 8006158:	b530      	push	{r4, r5, lr}
 800615a:	b083      	sub	sp, #12
 800615c:	4604      	mov	r4, r0
 800615e:	f011 0f01 	tst.w	r1, #1
 8006162:	d01f      	beq.n	80061a4 <ull_setleds+0x4c>
 8006164:	460d      	mov	r5, r1
 8006166:	f44f 7310 	mov.w	r3, #576	; 0x240
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8006170:	2200      	movs	r2, #0
 8006172:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006176:	f7ff fc1d 	bl	80059b4 <dwt_modify32bitoffsetreg>
 800617a:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006184:	2200      	movs	r2, #0
 8006186:	4918      	ldr	r1, [pc, #96]	; (80061e8 <ull_setleds+0x90>)
 8006188:	4620      	mov	r0, r4
 800618a:	f7ff fc13 	bl	80059b4 <dwt_modify32bitoffsetreg>
 800618e:	f015 0f02 	tst.w	r5, #2
 8006192:	d11a      	bne.n	80061ca <ull_setleds+0x72>
 8006194:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006198:	2200      	movs	r2, #0
 800619a:	4914      	ldr	r1, [pc, #80]	; (80061ec <ull_setleds+0x94>)
 800619c:	4620      	mov	r0, r4
 800619e:	f7ff f877 	bl	8005290 <dwt_write32bitoffsetreg>
 80061a2:	e010      	b.n	80061c6 <ull_setleds+0x6e>
 80061a4:	2500      	movs	r5, #0
 80061a6:	9500      	str	r5, [sp, #0]
 80061a8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80061ac:	462a      	mov	r2, r5
 80061ae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80061b2:	f7ff fbff 	bl	80059b4 <dwt_modify32bitoffsetreg>
 80061b6:	9500      	str	r5, [sp, #0]
 80061b8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80061bc:	462a      	mov	r2, r5
 80061be:	490b      	ldr	r1, [pc, #44]	; (80061ec <ull_setleds+0x94>)
 80061c0:	4620      	mov	r0, r4
 80061c2:	f7ff ff93 	bl	80060ec <dwt_modify16bitoffsetreg>
 80061c6:	b003      	add	sp, #12
 80061c8:	bd30      	pop	{r4, r5, pc}
 80061ca:	4d08      	ldr	r5, [pc, #32]	; (80061ec <ull_setleds+0x94>)
 80061cc:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <ull_setleds+0x98>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	4629      	mov	r1, r5
 80061d2:	4620      	mov	r0, r4
 80061d4:	f7ff f85c 	bl	8005290 <dwt_write32bitoffsetreg>
 80061d8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80061dc:	2200      	movs	r2, #0
 80061de:	4629      	mov	r1, r5
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7ff f855 	bl	8005290 <dwt_write32bitoffsetreg>
 80061e6:	e7ee      	b.n	80061c6 <ull_setleds+0x6e>
 80061e8:	00110004 	.word	0x00110004
 80061ec:	00110016 	.word	0x00110016
 80061f0:	000f0110 	.word	0x000f0110

080061f4 <ull_pgf_cal>:
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	b083      	sub	sp, #12
 80061f8:	4604      	mov	r4, r0
 80061fa:	2901      	cmp	r1, #1
 80061fc:	d009      	beq.n	8006212 <ull_pgf_cal+0x1e>
 80061fe:	2014      	movs	r0, #20
 8006200:	f7fa fa21 	bl	8000646 <deca_usleep>
 8006204:	4620      	mov	r0, r4
 8006206:	f7ff feff 	bl	8006008 <ull_run_pgfcal>
 800620a:	4605      	mov	r5, r0
 800620c:	4628      	mov	r0, r5
 800620e:	b003      	add	sp, #12
 8006210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006212:	4e0f      	ldr	r6, [pc, #60]	; (8006250 <ull_pgf_cal+0x5c>)
 8006214:	2200      	movs	r2, #0
 8006216:	4631      	mov	r1, r6
 8006218:	f7fe fb0e 	bl	8004838 <dwt_read16bitoffsetreg>
 800621c:	4607      	mov	r7, r0
 800621e:	f240 1305 	movw	r3, #261	; 0x105
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006228:	2200      	movs	r2, #0
 800622a:	4631      	mov	r1, r6
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff ff5d 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006232:	2014      	movs	r0, #20
 8006234:	f7fa fa07 	bl	8000646 <deca_usleep>
 8006238:	4620      	mov	r0, r4
 800623a:	f7ff fee5 	bl	8006008 <ull_run_pgfcal>
 800623e:	4605      	mov	r5, r0
 8006240:	2200      	movs	r2, #0
 8006242:	9200      	str	r2, [sp, #0]
 8006244:	463b      	mov	r3, r7
 8006246:	4631      	mov	r1, r6
 8006248:	4620      	mov	r0, r4
 800624a:	f7ff ff4f 	bl	80060ec <dwt_modify16bitoffsetreg>
 800624e:	e7dd      	b.n	800620c <ull_pgf_cal+0x18>
 8006250:	00070048 	.word	0x00070048

08006254 <ull_setgpiovalue>:
 8006254:	b500      	push	{lr}
 8006256:	b083      	sub	sp, #12
 8006258:	2a01      	cmp	r2, #1
 800625a:	d009      	beq.n	8006270 <ull_setgpiovalue+0x1c>
 800625c:	43cb      	mvns	r3, r1
 800625e:	2200      	movs	r2, #0
 8006260:	9200      	str	r2, [sp, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	4906      	ldr	r1, [pc, #24]	; (8006280 <ull_setgpiovalue+0x2c>)
 8006266:	f7ff ff41 	bl	80060ec <dwt_modify16bitoffsetreg>
 800626a:	b003      	add	sp, #12
 800626c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006270:	9100      	str	r1, [sp, #0]
 8006272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006276:	2200      	movs	r2, #0
 8006278:	4901      	ldr	r1, [pc, #4]	; (8006280 <ull_setgpiovalue+0x2c>)
 800627a:	f7ff ff37 	bl	80060ec <dwt_modify16bitoffsetreg>
 800627e:	e7f4      	b.n	800626a <ull_setgpiovalue+0x16>
 8006280:	0005000c 	.word	0x0005000c

08006284 <ull_readaccdata>:
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	b083      	sub	sp, #12
 8006288:	4604      	mov	r4, r0
 800628a:	460f      	mov	r7, r1
 800628c:	4616      	mov	r6, r2
 800628e:	461d      	mov	r5, r3
 8006290:	f248 0340 	movw	r3, #32832	; 0x8040
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800629a:	2200      	movs	r2, #0
 800629c:	4918      	ldr	r1, [pc, #96]	; (8006300 <ull_readaccdata+0x7c>)
 800629e:	f7ff ff25 	bl	80060ec <dwt_modify16bitoffsetreg>
 80062a2:	19aa      	adds	r2, r5, r6
 80062a4:	f243 0301 	movw	r3, #12289	; 0x3001
 80062a8:	429a      	cmp	r2, r3
 80062aa:	dc15      	bgt.n	80062d8 <ull_readaccdata+0x54>
 80062ac:	2d7f      	cmp	r5, #127	; 0x7f
 80062ae:	d91d      	bls.n	80062ec <ull_readaccdata+0x68>
 80062b0:	2315      	movs	r3, #21
 80062b2:	2200      	movs	r2, #0
 80062b4:	4913      	ldr	r1, [pc, #76]	; (8006304 <ull_readaccdata+0x80>)
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7fe ffea 	bl	8005290 <dwt_write32bitoffsetreg>
 80062bc:	462b      	mov	r3, r5
 80062be:	2200      	movs	r2, #0
 80062c0:	4911      	ldr	r1, [pc, #68]	; (8006308 <ull_readaccdata+0x84>)
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7fe ffe4 	bl	8005290 <dwt_write32bitoffsetreg>
 80062c8:	9700      	str	r7, [sp, #0]
 80062ca:	4633      	mov	r3, r6
 80062cc:	2200      	movs	r2, #0
 80062ce:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80062d2:	4620      	mov	r0, r4
 80062d4:	f7fe fa90 	bl	80047f8 <dwt_readfromdevice>
 80062d8:	2200      	movs	r2, #0
 80062da:	9200      	str	r2, [sp, #0]
 80062dc:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80062e0:	4907      	ldr	r1, [pc, #28]	; (8006300 <ull_readaccdata+0x7c>)
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7ff ff02 	bl	80060ec <dwt_modify16bitoffsetreg>
 80062e8:	b003      	add	sp, #12
 80062ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ec:	9700      	str	r7, [sp, #0]
 80062ee:	4633      	mov	r3, r6
 80062f0:	462a      	mov	r2, r5
 80062f2:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80062f6:	4620      	mov	r0, r4
 80062f8:	f7fe fa7e 	bl	80047f8 <dwt_readfromdevice>
 80062fc:	e7ec      	b.n	80062d8 <ull_readaccdata+0x54>
 80062fe:	bf00      	nop
 8006300:	00110004 	.word	0x00110004
 8006304:	001f0004 	.word	0x001f0004
 8006308:	001f0008 	.word	0x001f0008

0800630c <ull_repeated_cw>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4606      	mov	r6, r0
 8006310:	460c      	mov	r4, r1
 8006312:	4615      	mov	r5, r2
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <ull_repeated_cw+0x44>)
 8006316:	2202      	movs	r2, #2
 8006318:	490e      	ldr	r1, [pc, #56]	; (8006354 <ull_repeated_cw+0x48>)
 800631a:	f7fe ffb9 	bl	8005290 <dwt_write32bitoffsetreg>
 800631e:	2d0f      	cmp	r5, #15
 8006320:	bfa8      	it	ge
 8006322:	250f      	movge	r5, #15
 8006324:	1e63      	subs	r3, r4, #1
 8006326:	2b03      	cmp	r3, #3
 8006328:	bf28      	it	cs
 800632a:	2404      	movcs	r4, #4
 800632c:	2310      	movs	r3, #16
 800632e:	4123      	asrs	r3, r4
 8006330:	2200      	movs	r2, #0
 8006332:	4909      	ldr	r1, [pc, #36]	; (8006358 <ull_repeated_cw+0x4c>)
 8006334:	4630      	mov	r0, r6
 8006336:	f7fe ffab 	bl	8005290 <dwt_write32bitoffsetreg>
 800633a:	1e63      	subs	r3, r4, #1
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	fa05 f303 	lsl.w	r3, r5, r3
 8006342:	2200      	movs	r2, #0
 8006344:	4905      	ldr	r1, [pc, #20]	; (800635c <ull_repeated_cw+0x50>)
 8006346:	4630      	mov	r0, r6
 8006348:	f7fe ffa2 	bl	8005290 <dwt_write32bitoffsetreg>
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	bf00      	nop
 8006350:	00d20874 	.word	0x00d20874
 8006354:	00110010 	.word	0x00110010
 8006358:	00070028 	.word	0x00070028
 800635c:	00080018 	.word	0x00080018

08006360 <ull_configure>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	b083      	sub	sp, #12
 8006366:	4604      	mov	r4, r0
 8006368:	460d      	mov	r5, r1
 800636a:	f891 9000 	ldrb.w	r9, [r1]
 800636e:	790b      	ldrb	r3, [r1, #4]
 8006370:	2b18      	cmp	r3, #24
 8006372:	d814      	bhi.n	800639e <ull_configure+0x3e>
 8006374:	78cf      	ldrb	r7, [r1, #3]
 8006376:	2f18      	cmp	r7, #24
 8006378:	bf94      	ite	ls
 800637a:	2700      	movls	r7, #0
 800637c:	2701      	movhi	r7, #1
 800637e:	b2ff      	uxtb	r7, r7
 8006380:	79eb      	ldrb	r3, [r5, #7]
 8006382:	2b01      	cmp	r3, #1
 8006384:	bf0c      	ite	eq
 8006386:	2110      	moveq	r1, #16
 8006388:	2100      	movne	r1, #0
 800638a:	786b      	ldrb	r3, [r5, #1]
 800638c:	3b01      	subs	r3, #1
 800638e:	2b06      	cmp	r3, #6
 8006390:	d810      	bhi.n	80063b4 <ull_configure+0x54>
 8006392:	e8df f003 	tbb	[pc, r3]
 8006396:	0f06      	.short	0x0f06
 8006398:	0f0c120f 	.word	0x0f0c120f
 800639c:	09          	.byte	0x09
 800639d:	00          	.byte	0x00
 800639e:	2701      	movs	r7, #1
 80063a0:	e7ed      	b.n	800637e <ull_configure+0x1e>
 80063a2:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80063a6:	e00a      	b.n	80063be <ull_configure+0x5e>
 80063a8:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80063ac:	e007      	b.n	80063be <ull_configure+0x5e>
 80063ae:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80063b2:	e004      	b.n	80063be <ull_configure+0x5e>
 80063b4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80063b8:	e001      	b.n	80063be <ull_configure+0x5e>
 80063ba:	f04f 0a20 	mov.w	sl, #32
 80063be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80063c0:	8a53      	ldrh	r3, [r2, #18]
 80063c2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80063c6:	8253      	strh	r3, [r2, #18]
 80063c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063ca:	79ea      	ldrb	r2, [r5, #7]
 80063cc:	731a      	strb	r2, [r3, #12]
 80063ce:	7b2e      	ldrb	r6, [r5, #12]
 80063d0:	1cb3      	adds	r3, r6, #2
 80063d2:	2601      	movs	r6, #1
 80063d4:	409e      	lsls	r6, r3
 80063d6:	fa1f f886 	uxth.w	r8, r6
 80063da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80063dc:	4bc7      	ldr	r3, [pc, #796]	; (80066fc <ull_configure+0x39c>)
 80063de:	fb03 f308 	mul.w	r3, r3, r8
 80063e2:	0bdb      	lsrs	r3, r3, #15
 80063e4:	8293      	strh	r3, [r2, #20]
 80063e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063e8:	7aea      	ldrb	r2, [r5, #11]
 80063ea:	75da      	strb	r2, [r3, #23]
 80063ec:	7a2b      	ldrb	r3, [r5, #8]
 80063ee:	015b      	lsls	r3, r3, #5
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	7b6a      	ldrb	r2, [r5, #13]
 80063f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fa:	7aea      	ldrb	r2, [r5, #11]
 80063fc:	0312      	lsls	r2, r2, #12
 80063fe:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8006402:	4313      	orrs	r3, r2
 8006404:	430b      	orrs	r3, r1
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4bbd      	ldr	r3, [pc, #756]	; (8006700 <ull_configure+0x3a0>)
 800640a:	2200      	movs	r2, #0
 800640c:	2110      	movs	r1, #16
 800640e:	4620      	mov	r0, r4
 8006410:	f7ff fad0 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8006414:	2f00      	cmp	r7, #0
 8006416:	f040 80f6 	bne.w	8006606 <ull_configure+0x2a6>
 800641a:	7aeb      	ldrb	r3, [r5, #11]
 800641c:	b1f3      	cbz	r3, 800645c <ull_configure+0xfc>
 800641e:	7b6b      	ldrb	r3, [r5, #13]
 8006420:	2b01      	cmp	r3, #1
 8006422:	f240 811c 	bls.w	800665e <ull_configure+0x2fe>
 8006426:	7b2a      	ldrb	r2, [r5, #12]
 8006428:	4bb6      	ldr	r3, [pc, #728]	; (8006704 <ull_configure+0x3a4>)
 800642a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800642e:	0112      	lsls	r2, r2, #4
 8006430:	0ad3      	lsrs	r3, r2, #11
 8006432:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800643a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800643e:	bf28      	it	cs
 8006440:	3301      	addcs	r3, #1
 8006442:	b29b      	uxth	r3, r3
 8006444:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8006448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8006452:	2202      	movs	r2, #2
 8006454:	49ac      	ldr	r1, [pc, #688]	; (8006708 <ull_configure+0x3a8>)
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff fe48 	bl	80060ec <dwt_modify16bitoffsetreg>
 800645c:	2394      	movs	r3, #148	; 0x94
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4baa      	ldr	r3, [pc, #680]	; (800670c <ull_configure+0x3ac>)
 8006462:	2200      	movs	r2, #0
 8006464:	49aa      	ldr	r1, [pc, #680]	; (8006710 <ull_configure+0x3b0>)
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff faa4 	bl	80059b4 <dwt_modify32bitoffsetreg>
 800646c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8006470:	f340 8108 	ble.w	8006684 <ull_configure+0x324>
 8006474:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006476:	8a53      	ldrh	r3, [r2, #18]
 8006478:	f043 0320 	orr.w	r3, r3, #32
 800647c:	8253      	strh	r3, [r2, #18]
 800647e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8006488:	2200      	movs	r2, #0
 800648a:	49a2      	ldr	r1, [pc, #648]	; (8006714 <ull_configure+0x3b4>)
 800648c:	4620      	mov	r0, r4
 800648e:	f7ff fe2d 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006492:	7b6b      	ldrb	r3, [r5, #13]
 8006494:	2b01      	cmp	r3, #1
 8006496:	f000 8100 	beq.w	800669a <ull_configure+0x33a>
 800649a:	78ab      	ldrb	r3, [r5, #2]
 800649c:	f043 0310 	orr.w	r3, r3, #16
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	23fc      	movs	r3, #252	; 0xfc
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff fc6c 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80064b0:	1e73      	subs	r3, r6, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2200      	movs	r2, #0
 80064b6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7fe fd95 	bl	8004fea <dwt_write8bitoffsetreg>
 80064c0:	786b      	ldrb	r3, [r5, #1]
 80064c2:	2b07      	cmp	r3, #7
 80064c4:	bf0c      	ite	eq
 80064c6:	2308      	moveq	r3, #8
 80064c8:	2300      	movne	r3, #0
 80064ca:	2201      	movs	r2, #1
 80064cc:	2128      	movs	r1, #40	; 0x28
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7fe fd8b 	bl	8004fea <dwt_write8bitoffsetreg>
 80064d4:	4b90      	ldr	r3, [pc, #576]	; (8006718 <ull_configure+0x3b8>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	4990      	ldr	r1, [pc, #576]	; (800671c <ull_configure+0x3bc>)
 80064da:	4620      	mov	r0, r4
 80064dc:	f7fe fed8 	bl	8005290 <dwt_write32bitoffsetreg>
 80064e0:	2200      	movs	r2, #0
 80064e2:	498f      	ldr	r1, [pc, #572]	; (8006720 <ull_configure+0x3c0>)
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7fe f991 	bl	800480c <dwt_read32bitoffsetreg>
 80064ea:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80064ee:	f020 001f 	bic.w	r0, r0, #31
 80064f2:	f1b9 0f09 	cmp.w	r9, #9
 80064f6:	bf08      	it	eq
 80064f8:	f040 0001 	orreq.w	r0, r0, #1
 80064fc:	792a      	ldrb	r2, [r5, #4]
 80064fe:	0212      	lsls	r2, r2, #8
 8006500:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8006504:	78eb      	ldrb	r3, [r5, #3]
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	b2db      	uxtb	r3, r3
 800650a:	431a      	orrs	r2, r3
 800650c:	796b      	ldrb	r3, [r5, #5]
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	f003 0306 	and.w	r3, r3, #6
 8006514:	4313      	orrs	r3, r2
 8006516:	4303      	orrs	r3, r0
 8006518:	2200      	movs	r2, #0
 800651a:	4981      	ldr	r1, [pc, #516]	; (8006720 <ull_configure+0x3c0>)
 800651c:	4620      	mov	r0, r4
 800651e:	f7fe feb7 	bl	8005290 <dwt_write32bitoffsetreg>
 8006522:	79aa      	ldrb	r2, [r5, #6]
 8006524:	786b      	ldrb	r3, [r5, #1]
 8006526:	031b      	lsls	r3, r3, #12
 8006528:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 8006532:	2200      	movs	r2, #0
 8006534:	2124      	movs	r1, #36	; 0x24
 8006536:	4620      	mov	r0, r4
 8006538:	f7ff fa3c 	bl	80059b4 <dwt_modify32bitoffsetreg>
 800653c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8006540:	b923      	cbnz	r3, 800654c <ull_configure+0x1ec>
 8006542:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8006546:	726b      	strb	r3, [r5, #9]
 8006548:	2300      	movs	r3, #0
 800654a:	72ab      	strb	r3, [r5, #10]
 800654c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8006550:	2202      	movs	r2, #2
 8006552:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8006556:	4620      	mov	r0, r4
 8006558:	f7fe fd99 	bl	800508e <dwt_write16bitoffsetreg>
 800655c:	2202      	movs	r2, #2
 800655e:	4971      	ldr	r1, [pc, #452]	; (8006724 <ull_configure+0x3c4>)
 8006560:	4620      	mov	r0, r4
 8006562:	f7fe f97b 	bl	800485c <dwt_read8bitoffsetreg>
 8006566:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006568:	7c1b      	ldrb	r3, [r3, #16]
 800656a:	454b      	cmp	r3, r9
 800656c:	f000 809f 	beq.w	80066ae <ull_configure+0x34e>
 8006570:	2803      	cmp	r0, #3
 8006572:	f000 80a0 	beq.w	80066b6 <ull_configure+0x356>
 8006576:	f1b9 0f09 	cmp.w	r9, #9
 800657a:	f000 80a1 	beq.w	80066c0 <ull_configure+0x360>
 800657e:	4b6a      	ldr	r3, [pc, #424]	; (8006728 <ull_configure+0x3c8>)
 8006580:	2200      	movs	r2, #0
 8006582:	496a      	ldr	r1, [pc, #424]	; (800672c <ull_configure+0x3cc>)
 8006584:	4620      	mov	r0, r4
 8006586:	f7fe fe83 	bl	8005290 <dwt_write32bitoffsetreg>
 800658a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800658e:	2200      	movs	r2, #0
 8006590:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8006594:	4620      	mov	r0, r4
 8006596:	f7fe fd7a 	bl	800508e <dwt_write16bitoffsetreg>
 800659a:	2314      	movs	r3, #20
 800659c:	2201      	movs	r2, #1
 800659e:	4964      	ldr	r1, [pc, #400]	; (8006730 <ull_configure+0x3d0>)
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7fe fd22 	bl	8004fea <dwt_write8bitoffsetreg>
 80065a6:	230e      	movs	r3, #14
 80065a8:	2202      	movs	r2, #2
 80065aa:	4962      	ldr	r1, [pc, #392]	; (8006734 <ull_configure+0x3d4>)
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7fe fd1c 	bl	8004fea <dwt_write8bitoffsetreg>
 80065b2:	2381      	movs	r3, #129	; 0x81
 80065b4:	2200      	movs	r2, #0
 80065b6:	4960      	ldr	r1, [pc, #384]	; (8006738 <ull_configure+0x3d8>)
 80065b8:	4620      	mov	r0, r4
 80065ba:	f7fe fd16 	bl	8004fea <dwt_write8bitoffsetreg>
 80065be:	2302      	movs	r3, #2
 80065c0:	2200      	movs	r2, #0
 80065c2:	2144      	movs	r1, #68	; 0x44
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7fe fd10 	bl	8004fea <dwt_write8bitoffsetreg>
 80065ca:	2101      	movs	r1, #1
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7ff fc99 	bl	8005f04 <ull_setdwstate>
 80065d2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80065d6:	f04f 0814 	mov.w	r8, #20
 80065da:	2700      	movs	r7, #0
 80065dc:	2644      	movs	r6, #68	; 0x44
 80065de:	4640      	mov	r0, r8
 80065e0:	f7fa f831 	bl	8000646 <deca_usleep>
 80065e4:	463a      	mov	r2, r7
 80065e6:	4631      	mov	r1, r6
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7fe f937 	bl	800485c <dwt_read8bitoffsetreg>
 80065ee:	f010 0f02 	tst.w	r0, #2
 80065f2:	f040 80ab 	bne.w	800674c <ull_configure+0x3ec>
 80065f6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80065fa:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80065fe:	d1ee      	bne.n	80065de <ull_configure+0x27e>
 8006600:	f06f 0001 	mvn.w	r0, #1
 8006604:	e0cf      	b.n	80067a6 <ull_configure+0x446>
 8006606:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006608:	8a53      	ldrh	r3, [r2, #18]
 800660a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800660e:	8253      	strh	r3, [r2, #18]
 8006610:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800661a:	2200      	movs	r2, #0
 800661c:	493d      	ldr	r1, [pc, #244]	; (8006714 <ull_configure+0x3b4>)
 800661e:	4620      	mov	r0, r4
 8006620:	f7ff f9c8 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8006624:	f240 3306 	movw	r3, #774	; 0x306
 8006628:	2200      	movs	r2, #0
 800662a:	4944      	ldr	r1, [pc, #272]	; (800673c <ull_configure+0x3dc>)
 800662c:	4620      	mov	r0, r4
 800662e:	f7fe fe2f 	bl	8005290 <dwt_write32bitoffsetreg>
 8006632:	2300      	movs	r3, #0
 8006634:	461a      	mov	r2, r3
 8006636:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 800663a:	4620      	mov	r0, r4
 800663c:	f7fe fe28 	bl	8005290 <dwt_write32bitoffsetreg>
 8006640:	4b3f      	ldr	r3, [pc, #252]	; (8006740 <ull_configure+0x3e0>)
 8006642:	2200      	movs	r2, #0
 8006644:	4930      	ldr	r1, [pc, #192]	; (8006708 <ull_configure+0x3a8>)
 8006646:	4620      	mov	r0, r4
 8006648:	f7fe fe22 	bl	8005290 <dwt_write32bitoffsetreg>
 800664c:	239d      	movs	r3, #157	; 0x9d
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	4b2e      	ldr	r3, [pc, #184]	; (800670c <ull_configure+0x3ac>)
 8006652:	2200      	movs	r2, #0
 8006654:	492e      	ldr	r1, [pc, #184]	; (8006710 <ull_configure+0x3b0>)
 8006656:	4620      	mov	r0, r4
 8006658:	f7ff f9ac 	bl	80059b4 <dwt_modify32bitoffsetreg>
 800665c:	e719      	b.n	8006492 <ull_configure+0x132>
 800665e:	7b2a      	ldrb	r2, [r5, #12]
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <ull_configure+0x3a4>)
 8006662:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006666:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800666a:	fb02 f203 	mul.w	r2, r2, r3
 800666e:	0c93      	lsrs	r3, r2, #18
 8006670:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8006674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006678:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800667c:	bf28      	it	cs
 800667e:	3301      	addcs	r3, #1
 8006680:	b29b      	uxth	r3, r3
 8006682:	e6df      	b.n	8006444 <ull_configure+0xe4>
 8006684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800668e:	2200      	movs	r2, #0
 8006690:	4920      	ldr	r1, [pc, #128]	; (8006714 <ull_configure+0x3b4>)
 8006692:	4620      	mov	r0, r4
 8006694:	f7ff fd2a 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006698:	e6fb      	b.n	8006492 <ull_configure+0x132>
 800669a:	78ab      	ldrb	r3, [r5, #2]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	23ec      	movs	r3, #236	; 0xec
 80066a0:	2200      	movs	r2, #0
 80066a2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff fb6e 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80066ac:	e700      	b.n	80064b0 <ull_configure+0x150>
 80066ae:	2803      	cmp	r0, #3
 80066b0:	f47f af61 	bne.w	8006576 <ull_configure+0x216>
 80066b4:	e04d      	b.n	8006752 <ull_configure+0x3f2>
 80066b6:	2102      	movs	r1, #2
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7ff fc23 	bl	8005f04 <ull_setdwstate>
 80066be:	e75a      	b.n	8006576 <ull_configure+0x216>
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <ull_configure+0x3e4>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	4919      	ldr	r1, [pc, #100]	; (800672c <ull_configure+0x3cc>)
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7fe fde2 	bl	8005290 <dwt_write32bitoffsetreg>
 80066cc:	f640 733c 	movw	r3, #3900	; 0xf3c
 80066d0:	2200      	movs	r2, #0
 80066d2:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7fe fcd9 	bl	800508e <dwt_write16bitoffsetreg>
 80066dc:	e75d      	b.n	800659a <ull_configure+0x23a>
 80066de:	fa4f f189 	sxtb.w	r1, r9
 80066e2:	4620      	mov	r0, r4
 80066e4:	f7ff f98a 	bl	80059fc <_dwt_kick_dgc_on_wakeup>
 80066e8:	e040      	b.n	800676c <ull_configure+0x40c>
 80066ea:	2200      	movs	r2, #0
 80066ec:	9200      	str	r2, [sp, #0]
 80066ee:	23fe      	movs	r3, #254	; 0xfe
 80066f0:	4915      	ldr	r1, [pc, #84]	; (8006748 <ull_configure+0x3e8>)
 80066f2:	4620      	mov	r0, r4
 80066f4:	f7ff fb48 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80066f8:	e042      	b.n	8006780 <ull_configure+0x420>
 80066fa:	bf00      	nop
 80066fc:	00026668 	.word	0x00026668
 8006700:	fffc4fcf 	.word	0xfffc4fcf
 8006704:	08011ed8 	.word	0x08011ed8
 8006708:	000e0012 	.word	0x000e0012
 800670c:	bfffff00 	.word	0xbfffff00
 8006710:	000e0016 	.word	0x000e0016
 8006714:	000b0008 	.word	0x000b0008
 8006718:	af5f35cc 	.word	0xaf5f35cc
 800671c:	0006000c 	.word	0x0006000c
 8006720:	00010014 	.word	0x00010014
 8006724:	000f0030 	.word	0x000f0030
 8006728:	1c071134 	.word	0x1c071134
 800672c:	0007001c 	.word	0x0007001c
 8006730:	00070050 	.word	0x00070050
 8006734:	00070018 	.word	0x00070018
 8006738:	00090008 	.word	0x00090008
 800673c:	000e000c 	.word	0x000e000c
 8006740:	000c5a0a 	.word	0x000c5a0a
 8006744:	1c010034 	.word	0x1c010034
 8006748:	00030018 	.word	0x00030018
 800674c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800674e:	f883 9010 	strb.w	r9, [r3, #16]
 8006752:	792b      	ldrb	r3, [r5, #4]
 8006754:	3b09      	subs	r3, #9
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b0f      	cmp	r3, #15
 800675a:	d8c6      	bhi.n	80066ea <ull_configure+0x38a>
 800675c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800675e:	7a5b      	ldrb	r3, [r3, #9]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d0bc      	beq.n	80066de <ull_configure+0x37e>
 8006764:	4649      	mov	r1, r9
 8006766:	4620      	mov	r0, r4
 8006768:	f7fe ffae 	bl	80056c8 <ull_configmrxlut>
 800676c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8006776:	2200      	movs	r2, #0
 8006778:	490c      	ldr	r1, [pc, #48]	; (80067ac <ull_configure+0x44c>)
 800677a:	4620      	mov	r0, r4
 800677c:	f7ff fcb6 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006780:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8006784:	bfcc      	ite	gt
 8006786:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800678a:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006794:	2200      	movs	r2, #0
 8006796:	4906      	ldr	r1, [pc, #24]	; (80067b0 <ull_configure+0x450>)
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff f90b 	bl	80059b4 <dwt_modify32bitoffsetreg>
 800679e:	2101      	movs	r1, #1
 80067a0:	4620      	mov	r0, r4
 80067a2:	f7ff fd27 	bl	80061f4 <ull_pgf_cal>
 80067a6:	b003      	add	sp, #12
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ac:	00030018 	.word	0x00030018
 80067b0:	00060010 	.word	0x00060010

080067b4 <dwt_ioctl>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	b091      	sub	sp, #68	; 0x44
 80067ba:	4606      	mov	r6, r0
 80067bc:	4615      	mov	r5, r2
 80067be:	461c      	mov	r4, r3
 80067c0:	299c      	cmp	r1, #156	; 0x9c
 80067c2:	f200 809f 	bhi.w	8006904 <dwt_ioctl+0x150>
 80067c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80067ca:	0a6d      	.short	0x0a6d
 80067cc:	00a30a78 	.word	0x00a30a78
 80067d0:	00be00a7 	.word	0x00be00a7
 80067d4:	018e0148 	.word	0x018e0148
 80067d8:	0152016b 	.word	0x0152016b
 80067dc:	01a9019e 	.word	0x01a9019e
 80067e0:	01b901b1 	.word	0x01b901b1
 80067e4:	01c901c1 	.word	0x01c901c1
 80067e8:	01d501d1 	.word	0x01d501d1
 80067ec:	026e01dd 	.word	0x026e01dd
 80067f0:	0281027c 	.word	0x0281027c
 80067f4:	0290028b 	.word	0x0290028b
 80067f8:	029e0295 	.word	0x029e0295
 80067fc:	030902a3 	.word	0x030902a3
 8006800:	0326031b 	.word	0x0326031b
 8006804:	033b0331 	.word	0x033b0331
 8006808:	03690373 	.word	0x03690373
 800680c:	0345035f 	.word	0x0345035f
 8006810:	03c10352 	.word	0x03c10352
 8006814:	022b01f8 	.word	0x022b01f8
 8006818:	02410239 	.word	0x02410239
 800681c:	09960255 	.word	0x09960255
 8006820:	0382099b 	.word	0x0382099b
 8006824:	03e303df 	.word	0x03e303df
 8006828:	03f103ec 	.word	0x03f103ec
 800682c:	040503fb 	.word	0x040503fb
 8006830:	0437040d 	.word	0x0437040d
 8006834:	044e0443 	.word	0x044e0443
 8006838:	04590378 	.word	0x04590378
 800683c:	04740462 	.word	0x04740462
 8006840:	049e048d 	.word	0x049e048d
 8006844:	04ea04e0 	.word	0x04ea04e0
 8006848:	051a050b 	.word	0x051a050b
 800684c:	05230535 	.word	0x05230535
 8006850:	05970551 	.word	0x05970551
 8006854:	05cf05af 	.word	0x05cf05af
 8006858:	05f805e4 	.word	0x05f805e4
 800685c:	061d0601 	.word	0x061d0601
 8006860:	0773060a 	.word	0x0773060a
 8006864:	07ed079f 	.word	0x07ed079f
 8006868:	07fe07f3 	.word	0x07fe07f3
 800686c:	08370817 	.word	0x08370817
 8006870:	084b0841 	.word	0x084b0841
 8006874:	08820879 	.word	0x08820879
 8006878:	08910888 	.word	0x08910888
 800687c:	08ab089e 	.word	0x08ab089e
 8006880:	08be08b5 	.word	0x08be08b5
 8006884:	08d208c7 	.word	0x08d208c7
 8006888:	08e308dd 	.word	0x08e308dd
 800688c:	09110906 	.word	0x09110906
 8006890:	0945091c 	.word	0x0945091c
 8006894:	09720967 	.word	0x09720967
 8006898:	09a1098b 	.word	0x09a1098b
 800689c:	0a200a16 	.word	0x0a200a16
 80068a0:	0a800a2b 	.word	0x0a800a2b
 80068a4:	0a620a35 	.word	0x0a620a35
 80068a8:	09df0791 	.word	0x09df0791
 80068ac:	0aee0a00 	.word	0x0aee0a00
 80068b0:	0a8d0ae3 	.word	0x0a8d0ae3
 80068b4:	0aa30a98 	.word	0x0aa30a98
 80068b8:	0ab90aae 	.word	0x0ab90aae
 80068bc:	0acf0ac4 	.word	0x0acf0ac4
 80068c0:	0bd80ad8 	.word	0x0bd80ad8
 80068c4:	0c4d0c12 	.word	0x0c4d0c12
 80068c8:	0d290c70 	.word	0x0d290c70
 80068cc:	0b190d3e 	.word	0x0b190d3e
 80068d0:	009d009d 	.word	0x009d009d
 80068d4:	009d009d 	.word	0x009d009d
 80068d8:	009d009d 	.word	0x009d009d
 80068dc:	009d009d 	.word	0x009d009d
 80068e0:	009d009d 	.word	0x009d009d
 80068e4:	009d009d 	.word	0x009d009d
 80068e8:	009d009d 	.word	0x009d009d
 80068ec:	009d009d 	.word	0x009d009d
 80068f0:	009d009d 	.word	0x009d009d
 80068f4:	0c87009d 	.word	0x0c87009d
 80068f8:	0dce0ca5 	.word	0x0dce0ca5
 80068fc:	0ce40cef 	.word	0x0ce40cef
 8006900:	0cfa0d03 	.word	0x0cfa0d03
 8006904:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006908:	4628      	mov	r0, r5
 800690a:	b011      	add	sp, #68	; 0x44
 800690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006910:	6843      	ldr	r3, [r0, #4]
 8006912:	4798      	blx	r3
 8006914:	2500      	movs	r5, #0
 8006916:	e7f7      	b.n	8006908 <dwt_ioctl+0x154>
 8006918:	2202      	movs	r2, #2
 800691a:	49b7      	ldr	r1, [pc, #732]	; (8006bf8 <dwt_ioctl+0x444>)
 800691c:	f7fd ff9e 	bl	800485c <dwt_read8bitoffsetreg>
 8006920:	2803      	cmp	r0, #3
 8006922:	d801      	bhi.n	8006928 <dwt_ioctl+0x174>
 8006924:	2500      	movs	r5, #0
 8006926:	e7ef      	b.n	8006908 <dwt_ioctl+0x154>
 8006928:	f7f9 fe64 	bl	80005f4 <decamutexon>
 800692c:	4604      	mov	r4, r0
 800692e:	2500      	movs	r5, #0
 8006930:	9500      	str	r5, [sp, #0]
 8006932:	462b      	mov	r3, r5
 8006934:	462a      	mov	r2, r5
 8006936:	4629      	mov	r1, r5
 8006938:	4630      	mov	r0, r6
 800693a:	f7fe fb4b 	bl	8004fd4 <dwt_writetodevice>
 800693e:	4620      	mov	r0, r4
 8006940:	f7f9 fe69 	bl	8000616 <decamutexoff>
 8006944:	e7e0      	b.n	8006908 <dwt_ioctl+0x154>
 8006946:	2c00      	cmp	r4, #0
 8006948:	f001 8510 	beq.w	800836c <dwt_ioctl+0x1bb8>
 800694c:	7824      	ldrb	r4, [r4, #0]
 800694e:	f014 0f1d 	tst.w	r4, #29
 8006952:	d065      	beq.n	8006a20 <dwt_ioctl+0x26c>
 8006954:	f014 0f01 	tst.w	r4, #1
 8006958:	d026      	beq.n	80069a8 <dwt_ioctl+0x1f4>
 800695a:	f014 0f02 	tst.w	r4, #2
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	9200      	str	r2, [sp, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	bf14      	ite	ne
 8006968:	210d      	movne	r1, #13
 800696a:	2103      	moveq	r1, #3
 800696c:	f7fe fb32 	bl	8004fd4 <dwt_writetodevice>
 8006970:	2203      	movs	r2, #3
 8006972:	2144      	movs	r1, #68	; 0x44
 8006974:	4630      	mov	r0, r6
 8006976:	f7fd ff71 	bl	800485c <dwt_read8bitoffsetreg>
 800697a:	f010 0f08 	tst.w	r0, #8
 800697e:	d145      	bne.n	8006a0c <dwt_ioctl+0x258>
 8006980:	2200      	movs	r2, #0
 8006982:	499d      	ldr	r1, [pc, #628]	; (8006bf8 <dwt_ioctl+0x444>)
 8006984:	4630      	mov	r0, r6
 8006986:	f7fd ff41 	bl	800480c <dwt_read32bitoffsetreg>
 800698a:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 800698e:	bf18      	it	ne
 8006990:	2500      	movne	r5, #0
 8006992:	d1b9      	bne.n	8006908 <dwt_ioctl+0x154>
 8006994:	2100      	movs	r1, #0
 8006996:	9100      	str	r1, [sp, #0]
 8006998:	460b      	mov	r3, r1
 800699a:	460a      	mov	r2, r1
 800699c:	4630      	mov	r0, r6
 800699e:	f7fe fb19 	bl	8004fd4 <dwt_writetodevice>
 80069a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80069a6:	e7af      	b.n	8006908 <dwt_ioctl+0x154>
 80069a8:	f014 0f08 	tst.w	r4, #8
 80069ac:	d10e      	bne.n	80069cc <dwt_ioctl+0x218>
 80069ae:	f014 0f10 	tst.w	r4, #16
 80069b2:	d11b      	bne.n	80069ec <dwt_ioctl+0x238>
 80069b4:	f014 0f02 	tst.w	r4, #2
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	9200      	str	r2, [sp, #0]
 80069be:	4613      	mov	r3, r2
 80069c0:	bf14      	ite	ne
 80069c2:	2110      	movne	r1, #16
 80069c4:	2109      	moveq	r1, #9
 80069c6:	f7fe fb05 	bl	8004fd4 <dwt_writetodevice>
 80069ca:	e7d1      	b.n	8006970 <dwt_ioctl+0x1bc>
 80069cc:	2100      	movs	r1, #0
 80069ce:	f7fe fdd3 	bl	8005578 <_dwt_adjust_delaytime>
 80069d2:	f014 0f02 	tst.w	r4, #2
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	9200      	str	r2, [sp, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	bf14      	ite	ne
 80069e0:	210f      	movne	r1, #15
 80069e2:	2107      	moveq	r1, #7
 80069e4:	4630      	mov	r0, r6
 80069e6:	f7fe faf5 	bl	8004fd4 <dwt_writetodevice>
 80069ea:	e7c1      	b.n	8006970 <dwt_ioctl+0x1bc>
 80069ec:	2101      	movs	r1, #1
 80069ee:	f7fe fdc3 	bl	8005578 <_dwt_adjust_delaytime>
 80069f2:	f014 0f02 	tst.w	r4, #2
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	9200      	str	r2, [sp, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	bf14      	ite	ne
 8006a00:	210e      	movne	r1, #14
 8006a02:	2105      	moveq	r1, #5
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7fe fae5 	bl	8004fd4 <dwt_writetodevice>
 8006a0a:	e7b1      	b.n	8006970 <dwt_ioctl+0x1bc>
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	9100      	str	r1, [sp, #0]
 8006a10:	460b      	mov	r3, r1
 8006a12:	460a      	mov	r2, r1
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7fe fadd 	bl	8004fd4 <dwt_writetodevice>
 8006a1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a1e:	e773      	b.n	8006908 <dwt_ioctl+0x154>
 8006a20:	f014 0f20 	tst.w	r4, #32
 8006a24:	d00c      	beq.n	8006a40 <dwt_ioctl+0x28c>
 8006a26:	f014 0f02 	tst.w	r4, #2
 8006a2a:	f04f 0500 	mov.w	r5, #0
 8006a2e:	9500      	str	r5, [sp, #0]
 8006a30:	462b      	mov	r3, r5
 8006a32:	462a      	mov	r2, r5
 8006a34:	bf14      	ite	ne
 8006a36:	2111      	movne	r1, #17
 8006a38:	210b      	moveq	r1, #11
 8006a3a:	f7fe facb 	bl	8004fd4 <dwt_writetodevice>
 8006a3e:	e763      	b.n	8006908 <dwt_ioctl+0x154>
 8006a40:	f014 0f02 	tst.w	r4, #2
 8006a44:	f04f 0500 	mov.w	r5, #0
 8006a48:	9500      	str	r5, [sp, #0]
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	bf14      	ite	ne
 8006a50:	210c      	movne	r1, #12
 8006a52:	2101      	moveq	r1, #1
 8006a54:	f7fe fabe 	bl	8004fd4 <dwt_writetodevice>
 8006a58:	e756      	b.n	8006908 <dwt_ioctl+0x154>
 8006a5a:	2c00      	cmp	r4, #0
 8006a5c:	f001 8489 	beq.w	8008372 <dwt_ioctl+0x1bbe>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	212c      	movs	r1, #44	; 0x2c
 8006a66:	f7fe fc13 	bl	8005290 <dwt_write32bitoffsetreg>
 8006a6a:	2500      	movs	r5, #0
 8006a6c:	e74c      	b.n	8006908 <dwt_ioctl+0x154>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	2200      	movs	r2, #0
 8006a72:	4962      	ldr	r1, [pc, #392]	; (8006bfc <dwt_ioctl+0x448>)
 8006a74:	f7fe fc0c 	bl	8005290 <dwt_write32bitoffsetreg>
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4960      	ldr	r1, [pc, #384]	; (8006c00 <dwt_ioctl+0x44c>)
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7fe fc06 	bl	8005290 <dwt_write32bitoffsetreg>
 8006a84:	68a3      	ldr	r3, [r4, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	495e      	ldr	r1, [pc, #376]	; (8006c04 <dwt_ioctl+0x450>)
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7fe fc00 	bl	8005290 <dwt_write32bitoffsetreg>
 8006a90:	68e3      	ldr	r3, [r4, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	495c      	ldr	r1, [pc, #368]	; (8006c08 <dwt_ioctl+0x454>)
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7fe fbfa 	bl	8005290 <dwt_write32bitoffsetreg>
 8006a9c:	2500      	movs	r5, #0
 8006a9e:	e733      	b.n	8006908 <dwt_ioctl+0x154>
 8006aa0:	2c00      	cmp	r4, #0
 8006aa2:	f001 8469 	beq.w	8008378 <dwt_ioctl+0x1bc4>
 8006aa6:	8823      	ldrh	r3, [r4, #0]
 8006aa8:	6865      	ldr	r5, [r4, #4]
 8006aaa:	2d03      	cmp	r5, #3
 8006aac:	f201 8467 	bhi.w	800837e <dwt_ioctl+0x1bca>
 8006ab0:	e8df f005 	tbb	[pc, r5]
 8006ab4:	130d0702 	.word	0x130d0702
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4954      	ldr	r1, [pc, #336]	; (8006c0c <dwt_ioctl+0x458>)
 8006abc:	f7fe fae7 	bl	800508e <dwt_write16bitoffsetreg>
 8006ac0:	e722      	b.n	8006908 <dwt_ioctl+0x154>
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	4951      	ldr	r1, [pc, #324]	; (8006c0c <dwt_ioctl+0x458>)
 8006ac6:	f7fe fae2 	bl	800508e <dwt_write16bitoffsetreg>
 8006aca:	2500      	movs	r5, #0
 8006acc:	e71c      	b.n	8006908 <dwt_ioctl+0x154>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	494f      	ldr	r1, [pc, #316]	; (8006c10 <dwt_ioctl+0x45c>)
 8006ad2:	f7fe fadc 	bl	800508e <dwt_write16bitoffsetreg>
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	e716      	b.n	8006908 <dwt_ioctl+0x154>
 8006ada:	2202      	movs	r2, #2
 8006adc:	494c      	ldr	r1, [pc, #304]	; (8006c10 <dwt_ioctl+0x45c>)
 8006ade:	f7fe fad6 	bl	800508e <dwt_write16bitoffsetreg>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	e710      	b.n	8006908 <dwt_ioctl+0x154>
 8006ae6:	2c00      	cmp	r4, #0
 8006ae8:	f001 844c 	beq.w	8008384 <dwt_ioctl+0x1bd0>
 8006aec:	7823      	ldrb	r3, [r4, #0]
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	f003 0306 	and.w	r3, r3, #6
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	f06f 0306 	mvn.w	r3, #6
 8006afa:	2200      	movs	r2, #0
 8006afc:	4945      	ldr	r1, [pc, #276]	; (8006c14 <dwt_ioctl+0x460>)
 8006afe:	f7fe ff59 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8006b02:	2500      	movs	r5, #0
 8006b04:	e700      	b.n	8006908 <dwt_ioctl+0x154>
 8006b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b10:	2200      	movs	r2, #0
 8006b12:	4941      	ldr	r1, [pc, #260]	; (8006c18 <dwt_ioctl+0x464>)
 8006b14:	f7fe ff4e 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8006b18:	2500      	movs	r5, #0
 8006b1a:	e6f5      	b.n	8006908 <dwt_ioctl+0x154>
 8006b1c:	2c00      	cmp	r4, #0
 8006b1e:	f001 8434 	beq.w	800838a <dwt_ioctl+0x1bd6>
 8006b22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006b24:	7b5b      	ldrb	r3, [r3, #13]
 8006b26:	7023      	strb	r3, [r4, #0]
 8006b28:	2500      	movs	r5, #0
 8006b2a:	e6ed      	b.n	8006908 <dwt_ioctl+0x154>
 8006b2c:	2c00      	cmp	r4, #0
 8006b2e:	f001 842f 	beq.w	8008390 <dwt_ioctl+0x1bdc>
 8006b32:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006b34:	7a9b      	ldrb	r3, [r3, #10]
 8006b36:	7023      	strb	r3, [r4, #0]
 8006b38:	2500      	movs	r5, #0
 8006b3a:	e6e5      	b.n	8006908 <dwt_ioctl+0x154>
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	f001 842a 	beq.w	8008396 <dwt_ioctl+0x1be2>
 8006b42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006b44:	7adb      	ldrb	r3, [r3, #11]
 8006b46:	7023      	strb	r3, [r4, #0]
 8006b48:	2500      	movs	r5, #0
 8006b4a:	e6dd      	b.n	8006908 <dwt_ioctl+0x154>
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	f001 8425 	beq.w	800839c <dwt_ioctl+0x1be8>
 8006b52:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	2500      	movs	r5, #0
 8006b5a:	e6d5      	b.n	8006908 <dwt_ioctl+0x154>
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	f001 8420 	beq.w	80083a2 <dwt_ioctl+0x1bee>
 8006b62:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	2500      	movs	r5, #0
 8006b6a:	e6cd      	b.n	8006908 <dwt_ioctl+0x154>
 8006b6c:	f7fe fb7e 	bl	800526c <ull_signal_rx_buff_free>
 8006b70:	2500      	movs	r5, #0
 8006b72:	e6c9      	b.n	8006908 <dwt_ioctl+0x154>
 8006b74:	2c00      	cmp	r4, #0
 8006b76:	f001 8417 	beq.w	80083a8 <dwt_ioctl+0x1bf4>
 8006b7a:	6821      	ldr	r1, [r4, #0]
 8006b7c:	f7fe fd24 	bl	80055c8 <ull_setrxaftertxdelay>
 8006b80:	2500      	movs	r5, #0
 8006b82:	e6c1      	b.n	8006908 <dwt_ioctl+0x154>
 8006b84:	2c00      	cmp	r4, #0
 8006b86:	f001 8412 	beq.w	80083ae <dwt_ioctl+0x1bfa>
 8006b8a:	7825      	ldrb	r5, [r4, #0]
 8006b8c:	b15d      	cbz	r5, 8006ba6 <dwt_ioctl+0x3f2>
 8006b8e:	6864      	ldr	r4, [r4, #4]
 8006b90:	2340      	movs	r3, #64	; 0x40
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	23ff      	movs	r3, #255	; 0xff
 8006b96:	2200      	movs	r2, #0
 8006b98:	2110      	movs	r1, #16
 8006b9a:	f7ff f8f5 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8006b9e:	2d02      	cmp	r5, #2
 8006ba0:	d107      	bne.n	8006bb2 <dwt_ioctl+0x3fe>
 8006ba2:	60f4      	str	r4, [r6, #12]
 8006ba4:	e005      	b.n	8006bb2 <dwt_ioctl+0x3fe>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	9200      	str	r2, [sp, #0]
 8006baa:	23bf      	movs	r3, #191	; 0xbf
 8006bac:	2110      	movs	r1, #16
 8006bae:	f7ff f8eb 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8006bb2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006bb4:	759d      	strb	r5, [r3, #22]
 8006bb6:	2500      	movs	r5, #0
 8006bb8:	e6a6      	b.n	8006908 <dwt_ioctl+0x154>
 8006bba:	2c00      	cmp	r4, #0
 8006bbc:	f001 83fa 	beq.w	80083b4 <dwt_ioctl+0x1c00>
 8006bc0:	6865      	ldr	r5, [r4, #4]
 8006bc2:	7823      	ldrb	r3, [r4, #0]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	4915      	ldr	r1, [pc, #84]	; (8006c1c <dwt_ioctl+0x468>)
 8006bc8:	f7fe fa0f 	bl	8004fea <dwt_write8bitoffsetreg>
 8006bcc:	b945      	cbnz	r5, 8006be0 <dwt_ioctl+0x42c>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	9200      	str	r2, [sp, #0]
 8006bd2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8006bd6:	2110      	movs	r1, #16
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7ff fa87 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006bde:	e693      	b.n	8006908 <dwt_ioctl+0x154>
 8006be0:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bea:	2200      	movs	r2, #0
 8006bec:	2110      	movs	r1, #16
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7fe fee0 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8006bf4:	2500      	movs	r5, #0
 8006bf6:	e687      	b.n	8006908 <dwt_ioctl+0x154>
 8006bf8:	000f0030 	.word	0x000f0030
 8006bfc:	00010054 	.word	0x00010054
 8006c00:	00010058 	.word	0x00010058
 8006c04:	0001005c 	.word	0x0001005c
 8006c08:	00010060 	.word	0x00010060
 8006c0c:	00010018 	.word	0x00010018
 8006c10:	0001001c 	.word	0x0001001c
 8006c14:	00010014 	.word	0x00010014
 8006c18:	00110004 	.word	0x00110004
 8006c1c:	00010008 	.word	0x00010008
 8006c20:	2200      	movs	r2, #0
 8006c22:	4611      	mov	r1, r2
 8006c24:	f7fd fdf2 	bl	800480c <dwt_read32bitoffsetreg>
 8006c28:	68b2      	ldr	r2, [r6, #8]
 8006c2a:	6813      	ldr	r3, [r2, #0]
 8006c2c:	4043      	eors	r3, r0
 8006c2e:	6852      	ldr	r2, [r2, #4]
 8006c30:	4213      	tst	r3, r2
 8006c32:	bf14      	ite	ne
 8006c34:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8006c38:	2500      	moveq	r5, #0
 8006c3a:	e665      	b.n	8006908 <dwt_ioctl+0x154>
 8006c3c:	2c00      	cmp	r4, #0
 8006c3e:	f001 83bc 	beq.w	80083ba <dwt_ioctl+0x1c06>
 8006c42:	7821      	ldrb	r1, [r4, #0]
 8006c44:	f7ff f8b4 	bl	8005db0 <ull_configciadiag>
 8006c48:	2500      	movs	r5, #0
 8006c4a:	e65d      	b.n	8006908 <dwt_ioctl+0x154>
 8006c4c:	b93a      	cbnz	r2, 8006c5e <dwt_ioctl+0x4aa>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	9200      	str	r2, [sp, #0]
 8006c52:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8006c56:	49ae      	ldr	r1, [pc, #696]	; (8006f10 <dwt_ioctl+0x75c>)
 8006c58:	f7ff fa48 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006c5c:	e654      	b.n	8006908 <dwt_ioctl+0x154>
 8006c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c68:	2200      	movs	r2, #0
 8006c6a:	49a9      	ldr	r1, [pc, #676]	; (8006f10 <dwt_ioctl+0x75c>)
 8006c6c:	f7ff fa3e 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006c70:	2500      	movs	r5, #0
 8006c72:	e649      	b.n	8006908 <dwt_ioctl+0x154>
 8006c74:	f002 0201 	and.w	r2, r2, #1
 8006c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c7c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	bf08      	it	eq
 8006c84:	460b      	moveq	r3, r1
 8006c86:	02d2      	lsls	r2, r2, #11
 8006c88:	f015 0f02 	tst.w	r5, #2
 8006c8c:	bf12      	itee	ne
 8006c8e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c96:	b29b      	uxtheq	r3, r3
 8006c98:	9200      	str	r2, [sp, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	499c      	ldr	r1, [pc, #624]	; (8006f10 <dwt_ioctl+0x75c>)
 8006c9e:	f7ff fa25 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006ca2:	2500      	movs	r5, #0
 8006ca4:	e630      	b.n	8006908 <dwt_ioctl+0x154>
 8006ca6:	b92a      	cbnz	r2, 8006cb4 <dwt_ioctl+0x500>
 8006ca8:	4b9a      	ldr	r3, [pc, #616]	; (8006f14 <dwt_ioctl+0x760>)
 8006caa:	2202      	movs	r2, #2
 8006cac:	499a      	ldr	r1, [pc, #616]	; (8006f18 <dwt_ioctl+0x764>)
 8006cae:	f7fe faef 	bl	8005290 <dwt_write32bitoffsetreg>
 8006cb2:	e629      	b.n	8006908 <dwt_ioctl+0x154>
 8006cb4:	4b99      	ldr	r3, [pc, #612]	; (8006f1c <dwt_ioctl+0x768>)
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	4997      	ldr	r1, [pc, #604]	; (8006f18 <dwt_ioctl+0x764>)
 8006cba:	f7fe fae9 	bl	8005290 <dwt_write32bitoffsetreg>
 8006cbe:	2500      	movs	r5, #0
 8006cc0:	e622      	b.n	8006908 <dwt_ioctl+0x154>
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	f7fe fc96 	bl	80055f4 <ull_setlnapamode>
 8006cc8:	2500      	movs	r5, #0
 8006cca:	e61d      	b.n	8006908 <dwt_ioctl+0x154>
 8006ccc:	2c00      	cmp	r4, #0
 8006cce:	f001 8377 	beq.w	80083c0 <dwt_ioctl+0x1c0c>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4992      	ldr	r1, [pc, #584]	; (8006f20 <dwt_ioctl+0x76c>)
 8006cd6:	f7fd fdc1 	bl	800485c <dwt_read8bitoffsetreg>
 8006cda:	7020      	strb	r0, [r4, #0]
 8006cdc:	2500      	movs	r5, #0
 8006cde:	e613      	b.n	8006908 <dwt_ioctl+0x154>
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	f7fe fca9 	bl	8005638 <ull_configurestskey>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	e60e      	b.n	8006908 <dwt_ioctl+0x154>
 8006cea:	4621      	mov	r1, r4
 8006cec:	f7fe fcc8 	bl	8005680 <ull_configurestsiv>
 8006cf0:	2500      	movs	r5, #0
 8006cf2:	e609      	b.n	8006908 <dwt_ioctl+0x154>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	23ff      	movs	r3, #255	; 0xff
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4989      	ldr	r1, [pc, #548]	; (8006f24 <dwt_ioctl+0x770>)
 8006cfe:	f7ff f843 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8006d02:	2500      	movs	r5, #0
 8006d04:	e600      	b.n	8006908 <dwt_ioctl+0x154>
 8006d06:	4611      	mov	r1, r2
 8006d08:	f7fe fcde 	bl	80056c8 <ull_configmrxlut>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	e5fb      	b.n	8006908 <dwt_ioctl+0x154>
 8006d10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006d12:	7a1b      	ldrb	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d137      	bne.n	8006d88 <dwt_ioctl+0x5d4>
 8006d18:	2314      	movs	r3, #20
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	4982      	ldr	r1, [pc, #520]	; (8006f28 <dwt_ioctl+0x774>)
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7fe f963 	bl	8004fea <dwt_write8bitoffsetreg>
 8006d24:	2318      	movs	r3, #24
 8006d26:	2200      	movs	r2, #0
 8006d28:	4980      	ldr	r1, [pc, #512]	; (8006f2c <dwt_ioctl+0x778>)
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7fe fab0 	bl	8005290 <dwt_write32bitoffsetreg>
 8006d30:	23e8      	movs	r3, #232	; 0xe8
 8006d32:	2200      	movs	r2, #0
 8006d34:	497e      	ldr	r1, [pc, #504]	; (8006f30 <dwt_ioctl+0x77c>)
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7fe faaa 	bl	8005290 <dwt_write32bitoffsetreg>
 8006d3c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006d3e:	8a5b      	ldrh	r3, [r3, #18]
 8006d40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d022      	beq.n	8006d8e <dwt_ioctl+0x5da>
 8006d48:	2b60      	cmp	r3, #96	; 0x60
 8006d4a:	d02b      	beq.n	8006da4 <dwt_ioctl+0x5f0>
 8006d4c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006d4e:	7e1b      	ldrb	r3, [r3, #24]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	d032      	beq.n	8006dba <dwt_ioctl+0x606>
 8006d54:	2200      	movs	r2, #0
 8006d56:	4977      	ldr	r1, [pc, #476]	; (8006f34 <dwt_ioctl+0x780>)
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7fd fd6d 	bl	8004838 <dwt_read16bitoffsetreg>
 8006d5e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8006d62:	3b09      	subs	r3, #9
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	f201 832e 	bhi.w	80083c6 <dwt_ioctl+0x1c12>
 8006d6a:	f000 0001 	and.w	r0, r0, #1
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	bf0c      	ite	eq
 8006d72:	2105      	moveq	r1, #5
 8006d74:	2109      	movne	r1, #9
 8006d76:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006d78:	7a5b      	ldrb	r3, [r3, #9]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d029      	beq.n	8006dd2 <dwt_ioctl+0x61e>
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7fe fca2 	bl	80056c8 <ull_configmrxlut>
 8006d84:	2500      	movs	r5, #0
 8006d86:	e5bf      	b.n	8006908 <dwt_ioctl+0x154>
 8006d88:	f7ff f9ca 	bl	8006120 <_dwt_prog_ldo_and_bias_tune>
 8006d8c:	e7c4      	b.n	8006d18 <dwt_ioctl+0x564>
 8006d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4967      	ldr	r1, [pc, #412]	; (8006f38 <dwt_ioctl+0x784>)
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7fe fe09 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8006da2:	e7d3      	b.n	8006d4c <dwt_ioctl+0x598>
 8006da4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006dae:	2200      	movs	r2, #0
 8006db0:	4961      	ldr	r1, [pc, #388]	; (8006f38 <dwt_ioctl+0x784>)
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7fe fdfe 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8006db8:	e7c8      	b.n	8006d4c <dwt_ioctl+0x598>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	495f      	ldr	r1, [pc, #380]	; (8006f3c <dwt_ioctl+0x788>)
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7fe f912 	bl	8004fea <dwt_write8bitoffsetreg>
 8006dc6:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8006dc8:	7e13      	ldrb	r3, [r2, #24]
 8006dca:	f043 0302 	orr.w	r3, r3, #2
 8006dce:	7613      	strb	r3, [r2, #24]
 8006dd0:	e7c0      	b.n	8006d54 <dwt_ioctl+0x5a0>
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7fe fe12 	bl	80059fc <_dwt_kick_dgc_on_wakeup>
 8006dd8:	2500      	movs	r5, #0
 8006dda:	e595      	b.n	8006908 <dwt_ioctl+0x154>
 8006ddc:	2c00      	cmp	r4, #0
 8006dde:	f001 82f5 	beq.w	80083cc <dwt_ioctl+0x1c18>
 8006de2:	7823      	ldrb	r3, [r4, #0]
 8006de4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006de6:	75d3      	strb	r3, [r2, #23]
 8006de8:	031b      	lsls	r3, r3, #12
 8006dea:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8006df4:	2200      	movs	r2, #0
 8006df6:	2110      	movs	r1, #16
 8006df8:	f7ff f978 	bl	80060ec <dwt_modify16bitoffsetreg>
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	e583      	b.n	8006908 <dwt_ioctl+0x154>
 8006e00:	2c00      	cmp	r4, #0
 8006e02:	f001 82e6 	beq.w	80083d2 <dwt_ioctl+0x1c1e>
 8006e06:	8823      	ldrh	r3, [r4, #0]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006e0e:	f7fe f93e 	bl	800508e <dwt_write16bitoffsetreg>
 8006e12:	2500      	movs	r5, #0
 8006e14:	e578      	b.n	8006908 <dwt_ioctl+0x154>
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	f001 82de 	beq.w	80083d8 <dwt_ioctl+0x1c24>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006e22:	f7fd fd09 	bl	8004838 <dwt_read16bitoffsetreg>
 8006e26:	8020      	strh	r0, [r4, #0]
 8006e28:	2500      	movs	r5, #0
 8006e2a:	e56d      	b.n	8006908 <dwt_ioctl+0x154>
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	f001 82d6 	beq.w	80083de <dwt_ioctl+0x1c2a>
 8006e32:	8823      	ldrh	r3, [r4, #0]
 8006e34:	2200      	movs	r2, #0
 8006e36:	4942      	ldr	r1, [pc, #264]	; (8006f40 <dwt_ioctl+0x78c>)
 8006e38:	f7fe f929 	bl	800508e <dwt_write16bitoffsetreg>
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	e563      	b.n	8006908 <dwt_ioctl+0x154>
 8006e40:	2c00      	cmp	r4, #0
 8006e42:	f001 82cf 	beq.w	80083e4 <dwt_ioctl+0x1c30>
 8006e46:	2200      	movs	r2, #0
 8006e48:	493d      	ldr	r1, [pc, #244]	; (8006f40 <dwt_ioctl+0x78c>)
 8006e4a:	f7fd fcf5 	bl	8004838 <dwt_read16bitoffsetreg>
 8006e4e:	8020      	strh	r0, [r4, #0]
 8006e50:	2500      	movs	r5, #0
 8006e52:	e559      	b.n	8006908 <dwt_ioctl+0x154>
 8006e54:	2c00      	cmp	r4, #0
 8006e56:	f001 82c8 	beq.w	80083ea <dwt_ioctl+0x1c36>
 8006e5a:	88a3      	ldrh	r3, [r4, #4]
 8006e5c:	88e2      	ldrh	r2, [r4, #6]
 8006e5e:	6821      	ldr	r1, [r4, #0]
 8006e60:	9100      	str	r1, [sp, #0]
 8006e62:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8006e66:	f7fe f8b5 	bl	8004fd4 <dwt_writetodevice>
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	e54c      	b.n	8006908 <dwt_ioctl+0x154>
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	f001 82be 	beq.w	80083f0 <dwt_ioctl+0x1c3c>
 8006e74:	88a3      	ldrh	r3, [r4, #4]
 8006e76:	88e2      	ldrh	r2, [r4, #6]
 8006e78:	6821      	ldr	r1, [r4, #0]
 8006e7a:	9100      	str	r1, [sp, #0]
 8006e7c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8006e80:	f7fd fcba 	bl	80047f8 <dwt_readfromdevice>
 8006e84:	2500      	movs	r5, #0
 8006e86:	e53f      	b.n	8006908 <dwt_ioctl+0x154>
 8006e88:	2c00      	cmp	r4, #0
 8006e8a:	f001 82b4 	beq.w	80083f6 <dwt_ioctl+0x1c42>
 8006e8e:	88e3      	ldrh	r3, [r4, #6]
 8006e90:	88a2      	ldrh	r2, [r4, #4]
 8006e92:	6821      	ldr	r1, [r4, #0]
 8006e94:	f7fe fcc2 	bl	800581c <ull_readrxdata>
 8006e98:	2500      	movs	r5, #0
 8006e9a:	e535      	b.n	8006908 <dwt_ioctl+0x154>
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	f001 82ad 	beq.w	80083fc <dwt_ioctl+0x1c48>
 8006ea2:	88e3      	ldrh	r3, [r4, #6]
 8006ea4:	6822      	ldr	r2, [r4, #0]
 8006ea6:	88a1      	ldrh	r1, [r4, #4]
 8006ea8:	f7fe fd52 	bl	8005950 <ull_writetxdata>
 8006eac:	2500      	movs	r5, #0
 8006eae:	e52b      	b.n	8006908 <dwt_ioctl+0x154>
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	f7fe fce9 	bl	8005888 <ull_rxenable>
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	e526      	b.n	8006908 <dwt_ioctl+0x154>
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	f001 82a1 	beq.w	8008402 <dwt_ioctl+0x1c4e>
 8006ec0:	7923      	ldrb	r3, [r4, #4]
 8006ec2:	8862      	ldrh	r2, [r4, #2]
 8006ec4:	8821      	ldrh	r1, [r4, #0]
 8006ec6:	f7fe ff2d 	bl	8005d24 <ull_writetxfctrl>
 8006eca:	2500      	movs	r5, #0
 8006ecc:	e51c      	b.n	8006908 <dwt_ioctl+0x154>
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	f001 829a 	beq.w	8008408 <dwt_ioctl+0x1c54>
 8006ed4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006ed6:	7bdb      	ldrb	r3, [r3, #15]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d00c      	beq.n	8006ef6 <dwt_ioctl+0x742>
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d110      	bne.n	8006f02 <dwt_ioctl+0x74e>
 8006ee0:	220c      	movs	r2, #12
 8006ee2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8006ee6:	f7fd fca7 	bl	8004838 <dwt_read16bitoffsetreg>
 8006eea:	b200      	sxth	r0, r0
 8006eec:	f340 030c 	sbfx	r3, r0, #0, #13
 8006ef0:	8023      	strh	r3, [r4, #0]
 8006ef2:	2500      	movs	r5, #0
 8006ef4:	e508      	b.n	8006908 <dwt_ioctl+0x154>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4912      	ldr	r1, [pc, #72]	; (8006f44 <dwt_ioctl+0x790>)
 8006efa:	f7fd fc9d 	bl	8004838 <dwt_read16bitoffsetreg>
 8006efe:	b200      	sxth	r0, r0
 8006f00:	e7f4      	b.n	8006eec <dwt_ioctl+0x738>
 8006f02:	2200      	movs	r2, #0
 8006f04:	4910      	ldr	r1, [pc, #64]	; (8006f48 <dwt_ioctl+0x794>)
 8006f06:	f7fd fc97 	bl	8004838 <dwt_read16bitoffsetreg>
 8006f0a:	b200      	sxth	r0, r0
 8006f0c:	e7ee      	b.n	8006eec <dwt_ioctl+0x738>
 8006f0e:	bf00      	nop
 8006f10:	00110008 	.word	0x00110008
 8006f14:	00d20874 	.word	0x00d20874
 8006f18:	00110010 	.word	0x00110010
 8006f1c:	04d28874 	.word	0x04d28874
 8006f20:	0007001c 	.word	0x0007001c
 8006f24:	00020004 	.word	0x00020004
 8006f28:	00070050 	.word	0x00070050
 8006f2c:	001f000c 	.word	0x001f000c
 8006f30:	001f0010 	.word	0x001f0010
 8006f34:	00010014 	.word	0x00010014
 8006f38:	000b0008 	.word	0x000b0008
 8006f3c:	00010028 	.word	0x00010028
 8006f40:	00010004 	.word	0x00010004
 8006f44:	0018000c 	.word	0x0018000c
 8006f48:	000c0020 	.word	0x000c0020
 8006f4c:	2c00      	cmp	r4, #0
 8006f4e:	f001 825e 	beq.w	800840e <dwt_ioctl+0x1c5a>
 8006f52:	ab0c      	add	r3, sp, #48	; 0x30
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2303      	movs	r3, #3
 8006f58:	2200      	movs	r2, #0
 8006f5a:	49bb      	ldr	r1, [pc, #748]	; (8007248 <dwt_ioctl+0xa94>)
 8006f5c:	f7fd fc4c 	bl	80047f8 <dwt_readfromdevice>
 8006f60:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8006f64:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8006f68:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8006f6c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8006f70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006f74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006f78:	bf1c      	itt	ne
 8006f7a:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8006f7e:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	2500      	movs	r5, #0
 8006f86:	e4bf      	b.n	8006908 <dwt_ioctl+0x154>
 8006f88:	f7fe f892 	bl	80050b0 <ull_clearaonconfig>
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	e4bb      	b.n	8006908 <dwt_ioctl+0x154>
 8006f90:	2c00      	cmp	r4, #0
 8006f92:	f001 823f 	beq.w	8008414 <dwt_ioctl+0x1c60>
 8006f96:	8861      	ldrh	r1, [r4, #2]
 8006f98:	f7fe ff40 	bl	8005e1c <ull_calcbandwidthadj>
 8006f9c:	7020      	strb	r0, [r4, #0]
 8006f9e:	2500      	movs	r5, #0
 8006fa0:	e4b2      	b.n	8006908 <dwt_ioctl+0x154>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	f7fd fc68 	bl	8004878 <ull_readdiagnostics>
 8006fa8:	2500      	movs	r5, #0
 8006faa:	e4ad      	b.n	8006908 <dwt_ioctl+0x154>
 8006fac:	2c00      	cmp	r4, #0
 8006fae:	f001 8234 	beq.w	800841a <dwt_ioctl+0x1c66>
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	2174      	movs	r1, #116	; 0x74
 8006fb6:	f7fd fc29 	bl	800480c <dwt_read32bitoffsetreg>
 8006fba:	6020      	str	r0, [r4, #0]
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	e4a3      	b.n	8006908 <dwt_ioctl+0x154>
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	f001 822d 	beq.w	8008420 <dwt_ioctl+0x1c6c>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2174      	movs	r1, #116	; 0x74
 8006fca:	f7fd fc1f 	bl	800480c <dwt_read32bitoffsetreg>
 8006fce:	6020      	str	r0, [r4, #0]
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	e499      	b.n	8006908 <dwt_ioctl+0x154>
 8006fd4:	9400      	str	r4, [sp, #0]
 8006fd6:	2305      	movs	r3, #5
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2174      	movs	r1, #116	; 0x74
 8006fdc:	f7fd fc0c 	bl	80047f8 <dwt_readfromdevice>
 8006fe0:	2500      	movs	r5, #0
 8006fe2:	e491      	b.n	8006908 <dwt_ioctl+0x154>
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	f001 821e 	beq.w	8008426 <dwt_ioctl+0x1c72>
 8006fea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006fec:	7bdb      	ldrb	r3, [r3, #15]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d014      	beq.n	800701c <dwt_ioctl+0x868>
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d119      	bne.n	800702a <dwt_ioctl+0x876>
 8006ff6:	2216      	movs	r2, #22
 8006ff8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8006ffc:	f7fd fc1c 	bl	8004838 <dwt_read16bitoffsetreg>
 8007000:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007004:	b283      	uxth	r3, r0
 8007006:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800700a:	d004      	beq.n	8007016 <dwt_ioctl+0x862>
 800700c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8007010:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8007014:	b218      	sxth	r0, r3
 8007016:	8020      	strh	r0, [r4, #0]
 8007018:	2500      	movs	r5, #0
 800701a:	e475      	b.n	8006908 <dwt_ioctl+0x154>
 800701c:	2202      	movs	r2, #2
 800701e:	498b      	ldr	r1, [pc, #556]	; (800724c <dwt_ioctl+0xa98>)
 8007020:	f7fd fc0a 	bl	8004838 <dwt_read16bitoffsetreg>
 8007024:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007028:	e7ec      	b.n	8007004 <dwt_ioctl+0x850>
 800702a:	2202      	movs	r2, #2
 800702c:	4988      	ldr	r1, [pc, #544]	; (8007250 <dwt_ioctl+0xa9c>)
 800702e:	f7fd fc03 	bl	8004838 <dwt_read16bitoffsetreg>
 8007032:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007036:	e7e5      	b.n	8007004 <dwt_ioctl+0x850>
 8007038:	9400      	str	r4, [sp, #0]
 800703a:	2306      	movs	r3, #6
 800703c:	2200      	movs	r2, #0
 800703e:	4985      	ldr	r1, [pc, #532]	; (8007254 <dwt_ioctl+0xaa0>)
 8007040:	f7fd fbda 	bl	80047f8 <dwt_readfromdevice>
 8007044:	7963      	ldrb	r3, [r4, #5]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	7163      	strb	r3, [r4, #5]
 800704c:	2500      	movs	r5, #0
 800704e:	e45b      	b.n	8006908 <dwt_ioctl+0x154>
 8007050:	2c00      	cmp	r4, #0
 8007052:	f001 81eb 	beq.w	800842c <dwt_ioctl+0x1c78>
 8007056:	2201      	movs	r2, #1
 8007058:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800705c:	f7fd fbfe 	bl	800485c <dwt_read8bitoffsetreg>
 8007060:	7020      	strb	r0, [r4, #0]
 8007062:	2500      	movs	r5, #0
 8007064:	e450      	b.n	8006908 <dwt_ioctl+0x154>
 8007066:	2c00      	cmp	r4, #0
 8007068:	f001 81e3 	beq.w	8008432 <dwt_ioctl+0x1c7e>
 800706c:	2200      	movs	r2, #0
 800706e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8007072:	f7fd fbf3 	bl	800485c <dwt_read8bitoffsetreg>
 8007076:	7020      	strb	r0, [r4, #0]
 8007078:	2500      	movs	r5, #0
 800707a:	e445      	b.n	8006908 <dwt_ioctl+0x154>
 800707c:	2c00      	cmp	r4, #0
 800707e:	f001 81db 	beq.w	8008438 <dwt_ioctl+0x1c84>
 8007082:	88a2      	ldrh	r2, [r4, #4]
 8007084:	6821      	ldr	r1, [r4, #0]
 8007086:	f7fe fd1d 	bl	8005ac4 <_dwt_otpprogword32>
 800708a:	2500      	movs	r5, #0
 800708c:	e43c      	b.n	8006908 <dwt_ioctl+0x154>
 800708e:	2c00      	cmp	r4, #0
 8007090:	f001 81d5 	beq.w	800843e <dwt_ioctl+0x1c8a>
 8007094:	6825      	ldr	r5, [r4, #0]
 8007096:	88a4      	ldrh	r4, [r4, #4]
 8007098:	4622      	mov	r2, r4
 800709a:	4629      	mov	r1, r5
 800709c:	f7fe fd12 	bl	8005ac4 <_dwt_otpprogword32>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7fe f84e 	bl	8005144 <_dwt_otpread>
 80070a8:	1a2d      	subs	r5, r5, r0
 80070aa:	bf18      	it	ne
 80070ac:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80070b0:	e42a      	b.n	8006908 <dwt_ioctl+0x154>
 80070b2:	2a02      	cmp	r2, #2
 80070b4:	d00e      	beq.n	80070d4 <dwt_ioctl+0x920>
 80070b6:	4c68      	ldr	r4, [pc, #416]	; (8007258 <dwt_ioctl+0xaa4>)
 80070b8:	2300      	movs	r3, #0
 80070ba:	461a      	mov	r2, r3
 80070bc:	4621      	mov	r1, r4
 80070be:	4630      	mov	r0, r6
 80070c0:	f7fd ff93 	bl	8004fea <dwt_write8bitoffsetreg>
 80070c4:	2302      	movs	r3, #2
 80070c6:	2200      	movs	r2, #0
 80070c8:	4621      	mov	r1, r4
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7fd ff8d 	bl	8004fea <dwt_write8bitoffsetreg>
 80070d0:	2500      	movs	r5, #0
 80070d2:	e419      	b.n	8006908 <dwt_ioctl+0x154>
 80070d4:	2300      	movs	r3, #0
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	23fe      	movs	r3, #254	; 0xfe
 80070da:	2201      	movs	r2, #1
 80070dc:	495f      	ldr	r1, [pc, #380]	; (800725c <dwt_ioctl+0xaa8>)
 80070de:	f7fe fe53 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80070e2:	e7e8      	b.n	80070b6 <dwt_ioctl+0x902>
 80070e4:	2c00      	cmp	r4, #0
 80070e6:	f001 81ad 	beq.w	8008444 <dwt_ioctl+0x1c90>
 80070ea:	8824      	ldrh	r4, [r4, #0]
 80070ec:	b2e2      	uxtb	r2, r4
 80070ee:	f44f 7181 	mov.w	r1, #258	; 0x102
 80070f2:	f7fe f869 	bl	80051c8 <ull_aon_write>
 80070f6:	0a22      	lsrs	r2, r4, #8
 80070f8:	f240 1103 	movw	r1, #259	; 0x103
 80070fc:	4630      	mov	r0, r6
 80070fe:	f7fe f863 	bl	80051c8 <ull_aon_write>
 8007102:	2500      	movs	r5, #0
 8007104:	e400      	b.n	8006908 <dwt_ioctl+0x154>
 8007106:	2c00      	cmp	r4, #0
 8007108:	f001 819f 	beq.w	800844a <dwt_ioctl+0x1c96>
 800710c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8007268 <dwt_ioctl+0xab4>
 8007110:	2310      	movs	r3, #16
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	23ff      	movs	r3, #255	; 0xff
 8007116:	2200      	movs	r2, #0
 8007118:	4641      	mov	r1, r8
 800711a:	f7fe fe35 	bl	8005d88 <dwt_modify8bitoffsetreg>
 800711e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007122:	4630      	mov	r0, r6
 8007124:	f7fe f830 	bl	8005188 <ull_aon_read>
 8007128:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800712c:	462a      	mov	r2, r5
 800712e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007132:	4630      	mov	r0, r6
 8007134:	f7fe f848 	bl	80051c8 <ull_aon_write>
 8007138:	f045 0204 	orr.w	r2, r5, #4
 800713c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007140:	4630      	mov	r0, r6
 8007142:	f7fe f841 	bl	80051c8 <ull_aon_write>
 8007146:	2002      	movs	r0, #2
 8007148:	f7f9 fa72 	bl	8000630 <deca_sleep>
 800714c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8007150:	4630      	mov	r0, r6
 8007152:	f7fe f819 	bl	8005188 <ull_aon_read>
 8007156:	4607      	mov	r7, r0
 8007158:	f240 110f 	movw	r1, #271	; 0x10f
 800715c:	4630      	mov	r0, r6
 800715e:	f7fe f813 	bl	8005188 <ull_aon_read>
 8007162:	4681      	mov	r9, r0
 8007164:	462a      	mov	r2, r5
 8007166:	f44f 7182 	mov.w	r1, #260	; 0x104
 800716a:	4630      	mov	r0, r6
 800716c:	f7fe f82c 	bl	80051c8 <ull_aon_write>
 8007170:	2500      	movs	r5, #0
 8007172:	9500      	str	r5, [sp, #0]
 8007174:	23ef      	movs	r3, #239	; 0xef
 8007176:	462a      	mov	r2, r5
 8007178:	4641      	mov	r1, r8
 800717a:	4630      	mov	r0, r6
 800717c:	f7fe fe04 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8007180:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8007184:	8027      	strh	r7, [r4, #0]
 8007186:	f7ff bbbf 	b.w	8006908 <dwt_ioctl+0x154>
 800718a:	2c00      	cmp	r4, #0
 800718c:	f001 8160 	beq.w	8008450 <dwt_ioctl+0x1c9c>
 8007190:	78a2      	ldrb	r2, [r4, #2]
 8007192:	8821      	ldrh	r1, [r4, #0]
 8007194:	f7fe f840 	bl	8005218 <ull_configuresleep>
 8007198:	2500      	movs	r5, #0
 800719a:	f7ff bbb5 	b.w	8006908 <dwt_ioctl+0x154>
 800719e:	f7fd ff87 	bl	80050b0 <ull_clearaonconfig>
 80071a2:	2001      	movs	r0, #1
 80071a4:	f7f9 fa44 	bl	8000630 <deca_sleep>
 80071a8:	2303      	movs	r3, #3
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	23ff      	movs	r3, #255	; 0xff
 80071ae:	2200      	movs	r2, #0
 80071b0:	492b      	ldr	r1, [pc, #172]	; (8007260 <dwt_ioctl+0xaac>)
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7fe fde8 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80071b8:	2300      	movs	r3, #0
 80071ba:	461a      	mov	r2, r3
 80071bc:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80071c0:	4630      	mov	r0, r6
 80071c2:	f7fd ff12 	bl	8004fea <dwt_write8bitoffsetreg>
 80071c6:	2001      	movs	r0, #1
 80071c8:	f7f9 fa32 	bl	8000630 <deca_sleep>
 80071cc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80071ce:	2500      	movs	r5, #0
 80071d0:	73dd      	strb	r5, [r3, #15]
 80071d2:	2202      	movs	r2, #2
 80071d4:	825a      	strh	r2, [r3, #18]
 80071d6:	759d      	strb	r5, [r3, #22]
 80071d8:	75dd      	strb	r5, [r3, #23]
 80071da:	741d      	strb	r5, [r3, #16]
 80071dc:	f7ff bb94 	b.w	8006908 <dwt_ioctl+0x154>
 80071e0:	2c00      	cmp	r4, #0
 80071e2:	f001 8138 	beq.w	8008456 <dwt_ioctl+0x1ca2>
 80071e6:	7823      	ldrb	r3, [r4, #0]
 80071e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80071ee:	7393      	strb	r3, [r2, #14]
 80071f0:	2200      	movs	r2, #0
 80071f2:	491c      	ldr	r1, [pc, #112]	; (8007264 <dwt_ioctl+0xab0>)
 80071f4:	f7fd fef9 	bl	8004fea <dwt_write8bitoffsetreg>
 80071f8:	2500      	movs	r5, #0
 80071fa:	f7ff bb85 	b.w	8006908 <dwt_ioctl+0x154>
 80071fe:	2c00      	cmp	r4, #0
 8007200:	f001 812c 	beq.w	800845c <dwt_ioctl+0x1ca8>
 8007204:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007206:	7b9b      	ldrb	r3, [r3, #14]
 8007208:	7023      	strb	r3, [r4, #0]
 800720a:	2500      	movs	r5, #0
 800720c:	f7ff bb7c 	b.w	8006908 <dwt_ioctl+0x154>
 8007210:	2101      	movs	r1, #1
 8007212:	f7fe fc11 	bl	8005a38 <ull_enable_rf_tx>
 8007216:	4630      	mov	r0, r6
 8007218:	f7fe fc42 	bl	8005aa0 <ull_enable_rftx_blocks>
 800721c:	2101      	movs	r1, #1
 800721e:	4630      	mov	r0, r6
 8007220:	f7fd ff66 	bl	80050f0 <ull_force_clocks>
 8007224:	220f      	movs	r2, #15
 8007226:	2101      	movs	r1, #1
 8007228:	4630      	mov	r0, r6
 800722a:	f7ff f86f 	bl	800630c <ull_repeated_cw>
 800722e:	2500      	movs	r5, #0
 8007230:	f7ff bb6a 	b.w	8006908 <dwt_ioctl+0x154>
 8007234:	2c00      	cmp	r4, #0
 8007236:	f001 8114 	beq.w	8008462 <dwt_ioctl+0x1cae>
 800723a:	6862      	ldr	r2, [r4, #4]
 800723c:	6821      	ldr	r1, [r4, #0]
 800723e:	f7ff f865 	bl	800630c <ull_repeated_cw>
 8007242:	2500      	movs	r5, #0
 8007244:	f7ff bb60 	b.w	8006908 <dwt_ioctl+0x154>
 8007248:	00060029 	.word	0x00060029
 800724c:	00180014 	.word	0x00180014
 8007250:	000c001c 	.word	0x000c001c
 8007254:	000c0018 	.word	0x000c0018
 8007258:	000a0004 	.word	0x000a0004
 800725c:	00110008 	.word	0x00110008
 8007260:	00110004 	.word	0x00110004
 8007264:	00090014 	.word	0x00090014
 8007268:	00070048 	.word	0x00070048
 800726c:	2c00      	cmp	r4, #0
 800726e:	f001 80fb 	beq.w	8008468 <dwt_ioctl+0x1cb4>
 8007272:	4dd6      	ldr	r5, [pc, #856]	; (80075cc <dwt_ioctl+0xe18>)
 8007274:	2200      	movs	r2, #0
 8007276:	4629      	mov	r1, r5
 8007278:	f7fd faf0 	bl	800485c <dwt_read8bitoffsetreg>
 800727c:	4680      	mov	r8, r0
 800727e:	2302      	movs	r3, #2
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	23ff      	movs	r3, #255	; 0xff
 8007284:	2200      	movs	r2, #0
 8007286:	4629      	mov	r1, r5
 8007288:	4630      	mov	r0, r6
 800728a:	f7fe fd7d 	bl	8005d88 <dwt_modify8bitoffsetreg>
 800728e:	2304      	movs	r3, #4
 8007290:	2200      	movs	r2, #0
 8007292:	49cf      	ldr	r1, [pc, #828]	; (80075d0 <dwt_ioctl+0xe1c>)
 8007294:	4630      	mov	r0, r6
 8007296:	f7fd fea8 	bl	8004fea <dwt_write8bitoffsetreg>
 800729a:	2301      	movs	r3, #1
 800729c:	2200      	movs	r2, #0
 800729e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7fd fea1 	bl	8004fea <dwt_write8bitoffsetreg>
 80072a8:	4fca      	ldr	r7, [pc, #808]	; (80075d4 <dwt_ioctl+0xe20>)
 80072aa:	2500      	movs	r5, #0
 80072ac:	462a      	mov	r2, r5
 80072ae:	4639      	mov	r1, r7
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7fd fad3 	bl	800485c <dwt_read8bitoffsetreg>
 80072b6:	f010 0f01 	tst.w	r0, #1
 80072ba:	d0f7      	beq.n	80072ac <dwt_ioctl+0xaf8>
 80072bc:	2200      	movs	r2, #0
 80072be:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7fd fab8 	bl	8004838 <dwt_read16bitoffsetreg>
 80072c8:	4605      	mov	r5, r0
 80072ca:	2300      	movs	r3, #0
 80072cc:	461a      	mov	r2, r3
 80072ce:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7fd fe89 	bl	8004fea <dwt_write8bitoffsetreg>
 80072d8:	2300      	movs	r3, #0
 80072da:	461a      	mov	r2, r3
 80072dc:	49bc      	ldr	r1, [pc, #752]	; (80075d0 <dwt_ioctl+0xe1c>)
 80072de:	4630      	mov	r0, r6
 80072e0:	f7fd fe83 	bl	8004fea <dwt_write8bitoffsetreg>
 80072e4:	4643      	mov	r3, r8
 80072e6:	2200      	movs	r2, #0
 80072e8:	49b8      	ldr	r1, [pc, #736]	; (80075cc <dwt_ioctl+0xe18>)
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7fd fe7d 	bl	8004fea <dwt_write8bitoffsetreg>
 80072f0:	8025      	strh	r5, [r4, #0]
 80072f2:	2500      	movs	r5, #0
 80072f4:	f7ff bb08 	b.w	8006908 <dwt_ioctl+0x154>
 80072f8:	2c00      	cmp	r4, #0
 80072fa:	f001 80b8 	beq.w	800846e <dwt_ioctl+0x1cba>
 80072fe:	7923      	ldrb	r3, [r4, #4]
 8007300:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007302:	7ad2      	ldrb	r2, [r2, #11]
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800730e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80075d8 <dwt_ioctl+0xe24>
 8007312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007316:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800731a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800731e:	edc4 7a00 	vstr	s15, [r4]
 8007322:	2500      	movs	r5, #0
 8007324:	f7ff baf0 	b.w	8006908 <dwt_ioctl+0x154>
 8007328:	2c00      	cmp	r4, #0
 800732a:	f001 80a3 	beq.w	8008474 <dwt_ioctl+0x1cc0>
 800732e:	7923      	ldrb	r3, [r4, #4]
 8007330:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007332:	7a92      	ldrb	r2, [r2, #10]
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800733e:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80075dc <dwt_ioctl+0xe28>
 8007342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007346:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800734a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800734e:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80075e0 <dwt_ioctl+0xe2c>
 8007352:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007356:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800735a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800735e:	edc4 7a00 	vstr	s15, [r4]
 8007362:	2500      	movs	r5, #0
 8007364:	f7ff bad0 	b.w	8006908 <dwt_ioctl+0x154>
 8007368:	2c00      	cmp	r4, #0
 800736a:	f001 8086 	beq.w	800847a <dwt_ioctl+0x1cc6>
 800736e:	6824      	ldr	r4, [r4, #0]
 8007370:	2101      	movs	r1, #1
 8007372:	f7fe fb61 	bl	8005a38 <ull_enable_rf_tx>
 8007376:	4630      	mov	r0, r6
 8007378:	f7fe fb92 	bl	8005aa0 <ull_enable_rftx_blocks>
 800737c:	2101      	movs	r1, #1
 800737e:	4630      	mov	r0, r6
 8007380:	f7fd feb6 	bl	80050f0 <ull_force_clocks>
 8007384:	4621      	mov	r1, r4
 8007386:	4630      	mov	r0, r6
 8007388:	f7fe fda4 	bl	8005ed4 <ull_repeated_frames>
 800738c:	2500      	movs	r5, #0
 800738e:	f7ff babb 	b.w	8006908 <dwt_ioctl+0x154>
 8007392:	2500      	movs	r5, #0
 8007394:	9500      	str	r5, [sp, #0]
 8007396:	23ef      	movs	r3, #239	; 0xef
 8007398:	462a      	mov	r2, r5
 800739a:	4992      	ldr	r1, [pc, #584]	; (80075e4 <dwt_ioctl+0xe30>)
 800739c:	f7fe fcf4 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80073a0:	2105      	movs	r1, #5
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7fd fea4 	bl	80050f0 <ull_force_clocks>
 80073a8:	2101      	movs	r1, #1
 80073aa:	4630      	mov	r0, r6
 80073ac:	f7fe fa18 	bl	80057e0 <ull_disable_rf_tx>
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7fe fa0b 	bl	80057cc <ull_disable_rftx_blocks>
 80073b6:	f7ff baa7 	b.w	8006908 <dwt_ioctl+0x154>
 80073ba:	2500      	movs	r5, #0
 80073bc:	9500      	str	r5, [sp, #0]
 80073be:	23ef      	movs	r3, #239	; 0xef
 80073c0:	462a      	mov	r2, r5
 80073c2:	4988      	ldr	r1, [pc, #544]	; (80075e4 <dwt_ioctl+0xe30>)
 80073c4:	f7fe fce0 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80073c8:	f7ff ba9e 	b.w	8006908 <dwt_ioctl+0x154>
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	f001 8057 	beq.w	8008480 <dwt_ioctl+0x1ccc>
 80073d2:	6821      	ldr	r1, [r4, #0]
 80073d4:	f7fe fd7e 	bl	8005ed4 <ull_repeated_frames>
 80073d8:	2500      	movs	r5, #0
 80073da:	f7ff ba95 	b.w	8006908 <dwt_ioctl+0x154>
 80073de:	2200      	movs	r2, #0
 80073e0:	4981      	ldr	r1, [pc, #516]	; (80075e8 <dwt_ioctl+0xe34>)
 80073e2:	f7fd fa29 	bl	8004838 <dwt_read16bitoffsetreg>
 80073e6:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80073ea:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80073ee:	bf18      	it	ne
 80073f0:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80073f4:	b22d      	sxth	r5, r5
 80073f6:	8025      	strh	r5, [r4, #0]
 80073f8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80073fa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80073fe:	1aed      	subs	r5, r5, r3
 8007400:	f7ff ba82 	b.w	8006908 <dwt_ioctl+0x154>
 8007404:	2c00      	cmp	r4, #0
 8007406:	f001 806d 	beq.w	80084e4 <dwt_ioctl+0x1d30>
 800740a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800740e:	7a23      	ldrb	r3, [r4, #8]
 8007410:	f899 2013 	ldrb.w	r2, [r9, #19]
 8007414:	2aff      	cmp	r2, #255	; 0xff
 8007416:	f000 813f 	beq.w	8007698 <dwt_ioctl+0xee4>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d136      	bne.n	800748c <dwt_ioctl+0xcd8>
 800741e:	f8d9 3000 	ldr.w	r3, [r9]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	230c      	movs	r3, #12
 8007426:	2200      	movs	r2, #0
 8007428:	4970      	ldr	r1, [pc, #448]	; (80075ec <dwt_ioctl+0xe38>)
 800742a:	f7fd fdd3 	bl	8004fd4 <dwt_writetodevice>
 800742e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007432:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8007436:	18d1      	adds	r1, r2, r3
 8007438:	f899 2012 	ldrb.w	r2, [r9, #18]
 800743c:	2a00      	cmp	r2, #0
 800743e:	d15f      	bne.n	8007500 <dwt_ioctl+0xd4c>
 8007440:	f899 0010 	ldrb.w	r0, [r9, #16]
 8007444:	2800      	cmp	r0, #0
 8007446:	bf0b      	itete	eq
 8007448:	227f      	moveq	r2, #127	; 0x7f
 800744a:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800744e:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8007452:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8007456:	f899 0013 	ldrb.w	r0, [r9, #19]
 800745a:	1a12      	subs	r2, r2, r0
 800745c:	3a02      	subs	r2, #2
 800745e:	4291      	cmp	r1, r2
 8007460:	f200 8120 	bhi.w	80076a4 <dwt_ioctl+0xef0>
 8007464:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007468:	9200      	str	r2, [sp, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	4629      	mov	r1, r5
 800746e:	4630      	mov	r0, r6
 8007470:	f7fd fdb0 	bl	8004fd4 <dwt_writetodevice>
 8007474:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007478:	f899 200c 	ldrb.w	r2, [r9, #12]
 800747c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007480:	9100      	str	r1, [sp, #0]
 8007482:	4629      	mov	r1, r5
 8007484:	4630      	mov	r0, r6
 8007486:	f7fd fda5 	bl	8004fd4 <dwt_writetodevice>
 800748a:	e04a      	b.n	8007522 <dwt_ioctl+0xd6e>
 800748c:	f8d9 3000 	ldr.w	r3, [r9]
 8007490:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8007494:	7a9a      	ldrb	r2, [r3, #10]
 8007496:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800749a:	7a5a      	ldrb	r2, [r3, #9]
 800749c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 80074a0:	7a1a      	ldrb	r2, [r3, #8]
 80074a2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 80074a6:	79da      	ldrb	r2, [r3, #7]
 80074a8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80074ac:	799a      	ldrb	r2, [r3, #6]
 80074ae:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80074b2:	795a      	ldrb	r2, [r3, #5]
 80074b4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 80074b8:	791a      	ldrb	r2, [r3, #4]
 80074ba:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80074be:	78da      	ldrb	r2, [r3, #3]
 80074c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 80074c4:	789a      	ldrb	r2, [r3, #2]
 80074c6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80074ca:	785a      	ldrb	r2, [r3, #1]
 80074cc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80074d6:	2200      	movs	r2, #0
 80074d8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80074dc:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80074e0:	0a09      	lsrs	r1, r1, #8
 80074e2:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80074e6:	7b19      	ldrb	r1, [r3, #12]
 80074e8:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80074ec:	7adb      	ldrb	r3, [r3, #11]
 80074ee:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80074f2:	ab0c      	add	r3, sp, #48	; 0x30
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	2310      	movs	r3, #16
 80074f8:	493c      	ldr	r1, [pc, #240]	; (80075ec <dwt_ioctl+0xe38>)
 80074fa:	f7fd fd6b 	bl	8004fd4 <dwt_writetodevice>
 80074fe:	e796      	b.n	800742e <dwt_ioctl+0xc7a>
 8007500:	2a01      	cmp	r2, #1
 8007502:	f040 80cc 	bne.w	800769e <dwt_ioctl+0xeea>
 8007506:	f899 3011 	ldrb.w	r3, [r9, #17]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007510:	bf08      	it	eq
 8007512:	237f      	moveq	r3, #127	; 0x7f
 8007514:	f899 2013 	ldrb.w	r2, [r9, #19]
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	3b02      	subs	r3, #2
 800751c:	4299      	cmp	r1, r3
 800751e:	f200 80c4 	bhi.w	80076aa <dwt_ioctl+0xef6>
 8007522:	f899 2010 	ldrb.w	r2, [r9, #16]
 8007526:	1e53      	subs	r3, r2, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d940      	bls.n	80075b0 <dwt_ioctl+0xdfc>
 800752e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8007532:	1e59      	subs	r1, r3, #1
 8007534:	b2c9      	uxtb	r1, r1
 8007536:	2901      	cmp	r1, #1
 8007538:	d964      	bls.n	8007604 <dwt_ioctl+0xe50>
 800753a:	2b04      	cmp	r3, #4
 800753c:	d069      	beq.n	8007612 <dwt_ioctl+0xe5e>
 800753e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8007542:	2200      	movs	r2, #0
 8007544:	492a      	ldr	r1, [pc, #168]	; (80075f0 <dwt_ioctl+0xe3c>)
 8007546:	4630      	mov	r0, r6
 8007548:	f7fd fea2 	bl	8005290 <dwt_write32bitoffsetreg>
 800754c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007550:	4a28      	ldr	r2, [pc, #160]	; (80075f4 <dwt_ioctl+0xe40>)
 8007552:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8007556:	f899 300c 	ldrb.w	r3, [r9, #12]
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	4313      	orrs	r3, r2
 8007560:	2200      	movs	r2, #0
 8007562:	4925      	ldr	r1, [pc, #148]	; (80075f8 <dwt_ioctl+0xe44>)
 8007564:	4630      	mov	r0, r6
 8007566:	f7fd fe93 	bl	8005290 <dwt_write32bitoffsetreg>
 800756a:	2301      	movs	r3, #1
 800756c:	2200      	movs	r2, #0
 800756e:	4923      	ldr	r1, [pc, #140]	; (80075fc <dwt_ioctl+0xe48>)
 8007570:	4630      	mov	r0, r6
 8007572:	f7fd fd3a 	bl	8004fea <dwt_write8bitoffsetreg>
 8007576:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8007600 <dwt_ioctl+0xe4c>
 800757a:	2700      	movs	r7, #0
 800757c:	463a      	mov	r2, r7
 800757e:	4641      	mov	r1, r8
 8007580:	4630      	mov	r0, r6
 8007582:	f7fd f96b 	bl	800485c <dwt_read8bitoffsetreg>
 8007586:	f010 0f05 	tst.w	r0, #5
 800758a:	d0f7      	beq.n	800757c <dwt_ioctl+0xdc8>
 800758c:	4605      	mov	r5, r0
 800758e:	4603      	mov	r3, r0
 8007590:	2200      	movs	r2, #0
 8007592:	491b      	ldr	r1, [pc, #108]	; (8007600 <dwt_ioctl+0xe4c>)
 8007594:	4630      	mov	r0, r6
 8007596:	f7fd fd28 	bl	8004fea <dwt_write8bitoffsetreg>
 800759a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800759e:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d042      	beq.n	800762c <dwt_ioctl+0xe78>
 80075a6:	b26b      	sxtb	r3, r5
 80075a8:	7023      	strb	r3, [r4, #0]
 80075aa:	2500      	movs	r5, #0
 80075ac:	f7ff b9ac 	b.w	8006908 <dwt_ioctl+0x154>
 80075b0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80075b2:	7bdb      	ldrb	r3, [r3, #15]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	f001 802e 	beq.w	8008616 <dwt_ioctl+0x1e62>
 80075ba:	f899 3011 	ldrb.w	r3, [r9, #17]
 80075be:	1e5a      	subs	r2, r3, #1
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	2a01      	cmp	r2, #1
 80075c4:	d92c      	bls.n	8007620 <dwt_ioctl+0xe6c>
 80075c6:	2201      	movs	r2, #1
 80075c8:	e7b7      	b.n	800753a <dwt_ioctl+0xd86>
 80075ca:	bf00      	nop
 80075cc:	00070048 	.word	0x00070048
 80075d0:	00070034 	.word	0x00070034
 80075d4:	00080004 	.word	0x00080004
 80075d8:	3f866666 	.word	0x3f866666
 80075dc:	3ecccccd 	.word	0x3ecccccd
 80075e0:	437f0000 	.word	0x437f0000
 80075e4:	000f0024 	.word	0x000f0024
 80075e8:	00020008 	.word	0x00020008
 80075ec:	00010034 	.word	0x00010034
 80075f0:	00010044 	.word	0x00010044
 80075f4:	0001ff80 	.word	0x0001ff80
 80075f8:	00010048 	.word	0x00010048
 80075fc:	0001004c 	.word	0x0001004c
 8007600:	00010050 	.word	0x00010050
 8007604:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007606:	7bdb      	ldrb	r3, [r3, #15]
 8007608:	2b03      	cmp	r3, #3
 800760a:	bf0c      	ite	eq
 800760c:	2302      	moveq	r3, #2
 800760e:	2301      	movne	r3, #1
 8007610:	e795      	b.n	800753e <dwt_ioctl+0xd8a>
 8007612:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8007616:	2910      	cmp	r1, #16
 8007618:	d991      	bls.n	800753e <dwt_ioctl+0xd8a>
 800761a:	f06f 0303 	mvn.w	r3, #3
 800761e:	e7c3      	b.n	80075a8 <dwt_ioctl+0xdf4>
 8007620:	2201      	movs	r2, #1
 8007622:	4613      	mov	r3, r2
 8007624:	e78b      	b.n	800753e <dwt_ioctl+0xd8a>
 8007626:	2202      	movs	r2, #2
 8007628:	4613      	mov	r3, r2
 800762a:	e788      	b.n	800753e <dwt_ioctl+0xd8a>
 800762c:	f899 3012 	ldrb.w	r3, [r9, #18]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d1b8      	bne.n	80075a6 <dwt_ioctl+0xdf2>
 8007634:	f899 2011 	ldrb.w	r2, [r9, #17]
 8007638:	1e53      	subs	r3, r2, #1
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	d91b      	bls.n	8007678 <dwt_ioctl+0xec4>
 8007640:	2a03      	cmp	r2, #3
 8007642:	bf0c      	ite	eq
 8007644:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8007648:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800764c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007650:	b112      	cbz	r2, 8007658 <dwt_ioctl+0xea4>
 8007652:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007656:	b9c3      	cbnz	r3, 800768a <dwt_ioctl+0xed6>
 8007658:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800765c:	2900      	cmp	r1, #0
 800765e:	d0a2      	beq.n	80075a6 <dwt_ioctl+0xdf2>
 8007660:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d09e      	beq.n	80075a6 <dwt_ioctl+0xdf2>
 8007668:	f899 200c 	ldrb.w	r2, [r9, #12]
 800766c:	9100      	str	r1, [sp, #0]
 800766e:	4639      	mov	r1, r7
 8007670:	4630      	mov	r0, r6
 8007672:	f7fd f8c1 	bl	80047f8 <dwt_readfromdevice>
 8007676:	e796      	b.n	80075a6 <dwt_ioctl+0xdf2>
 8007678:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800767a:	7bdb      	ldrb	r3, [r3, #15]
 800767c:	2b03      	cmp	r3, #3
 800767e:	bf0c      	ite	eq
 8007680:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8007684:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8007688:	e7e0      	b.n	800764c <dwt_ioctl+0xe98>
 800768a:	9200      	str	r2, [sp, #0]
 800768c:	2200      	movs	r2, #0
 800768e:	4639      	mov	r1, r7
 8007690:	4630      	mov	r0, r6
 8007692:	f7fd f8b1 	bl	80047f8 <dwt_readfromdevice>
 8007696:	e7df      	b.n	8007658 <dwt_ioctl+0xea4>
 8007698:	f06f 0302 	mvn.w	r3, #2
 800769c:	e784      	b.n	80075a8 <dwt_ioctl+0xdf4>
 800769e:	f06f 0301 	mvn.w	r3, #1
 80076a2:	e781      	b.n	80075a8 <dwt_ioctl+0xdf4>
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076a8:	e77e      	b.n	80075a8 <dwt_ioctl+0xdf4>
 80076aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ae:	e77b      	b.n	80075a8 <dwt_ioctl+0xdf4>
 80076b0:	7a23      	ldrb	r3, [r4, #8]
 80076b2:	79e1      	ldrb	r1, [r4, #7]
 80076b4:	79a2      	ldrb	r2, [r4, #6]
 80076b6:	00d2      	lsls	r2, r2, #3
 80076b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80076bc:	4313      	orrs	r3, r2
 80076be:	7962      	ldrb	r2, [r4, #5]
 80076c0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80076c4:	7922      	ldrb	r2, [r4, #4]
 80076c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80076ca:	78e2      	ldrb	r2, [r4, #3]
 80076cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076d0:	78a2      	ldrb	r2, [r4, #2]
 80076d2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80076d6:	7862      	ldrb	r2, [r4, #1]
 80076d8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2200      	movs	r2, #0
 80076e0:	49cd      	ldr	r1, [pc, #820]	; (8007a18 <dwt_ioctl+0x1264>)
 80076e2:	f7fd fcd4 	bl	800508e <dwt_write16bitoffsetreg>
 80076e6:	2500      	movs	r5, #0
 80076e8:	f7ff b90e 	b.w	8006908 <dwt_ioctl+0x154>
 80076ec:	2c00      	cmp	r4, #0
 80076ee:	f000 86fc 	beq.w	80084ea <dwt_ioctl+0x1d36>
 80076f2:	7863      	ldrb	r3, [r4, #1]
 80076f4:	b133      	cbz	r3, 8007704 <dwt_ioctl+0xf50>
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	7023      	strb	r3, [r4, #0]
 80076fe:	2500      	movs	r5, #0
 8007700:	f7ff b902 	b.w	8006908 <dwt_ioctl+0x154>
 8007704:	2300      	movs	r3, #0
 8007706:	e7f9      	b.n	80076fc <dwt_ioctl+0xf48>
 8007708:	2200      	movs	r2, #0
 800770a:	49c4      	ldr	r1, [pc, #784]	; (8007a1c <dwt_ioctl+0x1268>)
 800770c:	f7fd f87e 	bl	800480c <dwt_read32bitoffsetreg>
 8007710:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007714:	8023      	strh	r3, [r4, #0]
 8007716:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800771a:	8060      	strh	r0, [r4, #2]
 800771c:	2200      	movs	r2, #0
 800771e:	49c0      	ldr	r1, [pc, #768]	; (8007a20 <dwt_ioctl+0x126c>)
 8007720:	4630      	mov	r0, r6
 8007722:	f7fd f873 	bl	800480c <dwt_read32bitoffsetreg>
 8007726:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800772a:	80a3      	strh	r3, [r4, #4]
 800772c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007730:	80e0      	strh	r0, [r4, #6]
 8007732:	2200      	movs	r2, #0
 8007734:	49bb      	ldr	r1, [pc, #748]	; (8007a24 <dwt_ioctl+0x1270>)
 8007736:	4630      	mov	r0, r6
 8007738:	f7fd f868 	bl	800480c <dwt_read32bitoffsetreg>
 800773c:	7220      	strb	r0, [r4, #8]
 800773e:	0c00      	lsrs	r0, r0, #16
 8007740:	7260      	strb	r0, [r4, #9]
 8007742:	2200      	movs	r2, #0
 8007744:	49b8      	ldr	r1, [pc, #736]	; (8007a28 <dwt_ioctl+0x1274>)
 8007746:	4630      	mov	r0, r6
 8007748:	f7fd f860 	bl	800480c <dwt_read32bitoffsetreg>
 800774c:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8007750:	81a3      	strh	r3, [r4, #12]
 8007752:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007756:	8160      	strh	r0, [r4, #10]
 8007758:	2200      	movs	r2, #0
 800775a:	49b4      	ldr	r1, [pc, #720]	; (8007a2c <dwt_ioctl+0x1278>)
 800775c:	4630      	mov	r0, r6
 800775e:	f7fd f855 	bl	800480c <dwt_read32bitoffsetreg>
 8007762:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8007766:	f8a4 300f 	strh.w	r3, [r4, #15]
 800776a:	73a0      	strb	r0, [r4, #14]
 800776c:	2200      	movs	r2, #0
 800776e:	49b0      	ldr	r1, [pc, #704]	; (8007a30 <dwt_ioctl+0x127c>)
 8007770:	4630      	mov	r0, r6
 8007772:	f7fd f84b 	bl	800480c <dwt_read32bitoffsetreg>
 8007776:	7460      	strb	r0, [r4, #17]
 8007778:	0c00      	lsrs	r0, r0, #16
 800777a:	74a0      	strb	r0, [r4, #18]
 800777c:	2200      	movs	r2, #0
 800777e:	49ad      	ldr	r1, [pc, #692]	; (8007a34 <dwt_ioctl+0x1280>)
 8007780:	4630      	mov	r0, r6
 8007782:	f7fd f843 	bl	800480c <dwt_read32bitoffsetreg>
 8007786:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800778a:	f8a4 0013 	strh.w	r0, [r4, #19]
 800778e:	2500      	movs	r5, #0
 8007790:	7565      	strb	r5, [r4, #21]
 8007792:	75a5      	strb	r5, [r4, #22]
 8007794:	462a      	mov	r2, r5
 8007796:	49a8      	ldr	r1, [pc, #672]	; (8007a38 <dwt_ioctl+0x1284>)
 8007798:	4630      	mov	r0, r6
 800779a:	f7fd f85f 	bl	800485c <dwt_read8bitoffsetreg>
 800779e:	75e0      	strb	r0, [r4, #23]
 80077a0:	f7ff b8b2 	b.w	8006908 <dwt_ioctl+0x154>
 80077a4:	4611      	mov	r1, r2
 80077a6:	f7fd fc5f 	bl	8005068 <ull_configeventcounters>
 80077aa:	2500      	movs	r5, #0
 80077ac:	f7ff b8ac 	b.w	8006908 <dwt_ioctl+0x154>
 80077b0:	2c00      	cmp	r4, #0
 80077b2:	f000 869d 	beq.w	80084f0 <dwt_ioctl+0x1d3c>
 80077b6:	8823      	ldrh	r3, [r4, #0]
 80077b8:	2200      	movs	r2, #0
 80077ba:	49a0      	ldr	r1, [pc, #640]	; (8007a3c <dwt_ioctl+0x1288>)
 80077bc:	f7fd fc67 	bl	800508e <dwt_write16bitoffsetreg>
 80077c0:	2500      	movs	r5, #0
 80077c2:	f7ff b8a1 	b.w	8006908 <dwt_ioctl+0x154>
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	f000 8695 	beq.w	80084f6 <dwt_ioctl+0x1d42>
 80077cc:	6825      	ldr	r5, [r4, #0]
 80077ce:	b935      	cbnz	r5, 80077de <dwt_ioctl+0x102a>
 80077d0:	2300      	movs	r3, #0
 80077d2:	461a      	mov	r2, r3
 80077d4:	499a      	ldr	r1, [pc, #616]	; (8007a40 <dwt_ioctl+0x128c>)
 80077d6:	f7fd fc5a 	bl	800508e <dwt_write16bitoffsetreg>
 80077da:	f7ff b895 	b.w	8006908 <dwt_ioctl+0x154>
 80077de:	7962      	ldrb	r2, [r4, #5]
 80077e0:	7923      	ldrb	r3, [r4, #4]
 80077e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ea:	2200      	movs	r2, #0
 80077ec:	4994      	ldr	r1, [pc, #592]	; (8007a40 <dwt_ioctl+0x128c>)
 80077ee:	f7fd fc4e 	bl	800508e <dwt_write16bitoffsetreg>
 80077f2:	2500      	movs	r5, #0
 80077f4:	f7ff b888 	b.w	8006908 <dwt_ioctl+0x154>
 80077f8:	2c00      	cmp	r4, #0
 80077fa:	f000 867f 	beq.w	80084fc <dwt_ioctl+0x1d48>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	b94b      	cbnz	r3, 8007816 <dwt_ioctl+0x1062>
 8007802:	2500      	movs	r5, #0
 8007804:	9500      	str	r5, [sp, #0]
 8007806:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800780a:	462a      	mov	r2, r5
 800780c:	2110      	movs	r1, #16
 800780e:	f7fe fc6d 	bl	80060ec <dwt_modify16bitoffsetreg>
 8007812:	f7ff b879 	b.w	8006908 <dwt_ioctl+0x154>
 8007816:	2200      	movs	r2, #0
 8007818:	2134      	movs	r1, #52	; 0x34
 800781a:	f7fd fd39 	bl	8005290 <dwt_write32bitoffsetreg>
 800781e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007828:	2200      	movs	r2, #0
 800782a:	2110      	movs	r1, #16
 800782c:	4630      	mov	r0, r6
 800782e:	f7fe fc5d 	bl	80060ec <dwt_modify16bitoffsetreg>
 8007832:	2500      	movs	r5, #0
 8007834:	f7ff b868 	b.w	8006908 <dwt_ioctl+0x154>
 8007838:	2c00      	cmp	r4, #0
 800783a:	f000 8662 	beq.w	8008502 <dwt_ioctl+0x1d4e>
 800783e:	8861      	ldrh	r1, [r4, #2]
 8007840:	f7fd fca2 	bl	8005188 <ull_aon_read>
 8007844:	7020      	strb	r0, [r4, #0]
 8007846:	2500      	movs	r5, #0
 8007848:	f7ff b85e 	b.w	8006908 <dwt_ioctl+0x154>
 800784c:	2c00      	cmp	r4, #0
 800784e:	f000 865b 	beq.w	8008508 <dwt_ioctl+0x1d54>
 8007852:	78a2      	ldrb	r2, [r4, #2]
 8007854:	8821      	ldrh	r1, [r4, #0]
 8007856:	f7fd fcb7 	bl	80051c8 <ull_aon_write>
 800785a:	2500      	movs	r5, #0
 800785c:	f7ff b854 	b.w	8006908 <dwt_ioctl+0x154>
 8007860:	4b78      	ldr	r3, [pc, #480]	; (8007a44 <dwt_ioctl+0x1290>)
 8007862:	4a79      	ldr	r2, [pc, #484]	; (8007a48 <dwt_ioctl+0x1294>)
 8007864:	2d01      	cmp	r5, #1
 8007866:	bf18      	it	ne
 8007868:	4613      	movne	r3, r2
 800786a:	2d01      	cmp	r5, #1
 800786c:	4977      	ldr	r1, [pc, #476]	; (8007a4c <dwt_ioctl+0x1298>)
 800786e:	bf18      	it	ne
 8007870:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8007874:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007876:	7bd2      	ldrb	r2, [r2, #15]
 8007878:	2a01      	cmp	r2, #1
 800787a:	d012      	beq.n	80078a2 <dwt_ioctl+0x10ee>
 800787c:	2a03      	cmp	r2, #3
 800787e:	d117      	bne.n	80078b0 <dwt_ioctl+0x10fc>
 8007880:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8007884:	3a01      	subs	r2, #1
 8007886:	441a      	add	r2, r3
 8007888:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800788c:	f7fc ffd4 	bl	8004838 <dwt_read16bitoffsetreg>
 8007890:	09c0      	lsrs	r0, r0, #7
 8007892:	8020      	strh	r0, [r4, #0]
 8007894:	8825      	ldrh	r5, [r4, #0]
 8007896:	3500      	adds	r5, #0
 8007898:	bf18      	it	ne
 800789a:	2501      	movne	r5, #1
 800789c:	426d      	negs	r5, r5
 800789e:	f7ff b833 	b.w	8006908 <dwt_ioctl+0x154>
 80078a2:	2202      	movs	r2, #2
 80078a4:	4619      	mov	r1, r3
 80078a6:	f7fc ffc7 	bl	8004838 <dwt_read16bitoffsetreg>
 80078aa:	09c0      	lsrs	r0, r0, #7
 80078ac:	8020      	strh	r0, [r4, #0]
 80078ae:	e7f1      	b.n	8007894 <dwt_ioctl+0x10e0>
 80078b0:	2202      	movs	r2, #2
 80078b2:	f7fc ffc1 	bl	8004838 <dwt_read16bitoffsetreg>
 80078b6:	09c0      	lsrs	r0, r0, #7
 80078b8:	8020      	strh	r0, [r4, #0]
 80078ba:	e7eb      	b.n	8007894 <dwt_ioctl+0x10e0>
 80078bc:	2c00      	cmp	r4, #0
 80078be:	f000 8626 	beq.w	800850e <dwt_ioctl+0x1d5a>
 80078c2:	7821      	ldrb	r1, [r4, #0]
 80078c4:	f7fe fc48 	bl	8006158 <ull_setleds>
 80078c8:	2500      	movs	r5, #0
 80078ca:	f7ff b81d 	b.w	8006908 <dwt_ioctl+0x154>
 80078ce:	4611      	mov	r1, r2
 80078d0:	f7fe fb18 	bl	8005f04 <ull_setdwstate>
 80078d4:	2500      	movs	r5, #0
 80078d6:	f7ff b817 	b.w	8006908 <dwt_ioctl+0x154>
 80078da:	9400      	str	r4, [sp, #0]
 80078dc:	2304      	movs	r3, #4
 80078de:	2200      	movs	r2, #0
 80078e0:	211c      	movs	r1, #28
 80078e2:	f7fc ff89 	bl	80047f8 <dwt_readfromdevice>
 80078e6:	2500      	movs	r5, #0
 80078e8:	f7ff b80e 	b.w	8006908 <dwt_ioctl+0x154>
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	f000 8611 	beq.w	8008514 <dwt_ioctl+0x1d60>
 80078f2:	2202      	movs	r2, #2
 80078f4:	2144      	movs	r1, #68	; 0x44
 80078f6:	f7fc ff9f 	bl	8004838 <dwt_read16bitoffsetreg>
 80078fa:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80078fe:	7020      	strb	r0, [r4, #0]
 8007900:	2500      	movs	r5, #0
 8007902:	f7ff b801 	b.w	8006908 <dwt_ioctl+0x154>
 8007906:	2c00      	cmp	r4, #0
 8007908:	f000 8607 	beq.w	800851a <dwt_ioctl+0x1d66>
 800790c:	2200      	movs	r2, #0
 800790e:	2144      	movs	r1, #68	; 0x44
 8007910:	f7fc ffa4 	bl	800485c <dwt_read8bitoffsetreg>
 8007914:	f000 0001 	and.w	r0, r0, #1
 8007918:	7020      	strb	r0, [r4, #0]
 800791a:	2500      	movs	r5, #0
 800791c:	f7fe bff4 	b.w	8006908 <dwt_ioctl+0x154>
 8007920:	2c00      	cmp	r4, #0
 8007922:	f000 85fd 	beq.w	8008520 <dwt_ioctl+0x1d6c>
 8007926:	8862      	ldrh	r2, [r4, #2]
 8007928:	8821      	ldrh	r1, [r4, #0]
 800792a:	f7fe fb49 	bl	8005fc0 <ull_configureframefilter>
 800792e:	2500      	movs	r5, #0
 8007930:	f7fe bfea 	b.w	8006908 <dwt_ioctl+0x154>
 8007934:	9400      	str	r4, [sp, #0]
 8007936:	2308      	movs	r3, #8
 8007938:	2200      	movs	r2, #0
 800793a:	2104      	movs	r1, #4
 800793c:	f7fd fb4a 	bl	8004fd4 <dwt_writetodevice>
 8007940:	2500      	movs	r5, #0
 8007942:	f7fe bfe1 	b.w	8006908 <dwt_ioctl+0x154>
 8007946:	9400      	str	r4, [sp, #0]
 8007948:	2308      	movs	r3, #8
 800794a:	2200      	movs	r2, #0
 800794c:	2104      	movs	r1, #4
 800794e:	f7fc ff53 	bl	80047f8 <dwt_readfromdevice>
 8007952:	2500      	movs	r5, #0
 8007954:	f7fe bfd8 	b.w	8006908 <dwt_ioctl+0x154>
 8007958:	2c00      	cmp	r4, #0
 800795a:	f000 85e4 	beq.w	8008526 <dwt_ioctl+0x1d72>
 800795e:	8823      	ldrh	r3, [r4, #0]
 8007960:	2202      	movs	r2, #2
 8007962:	210c      	movs	r1, #12
 8007964:	f7fd fb93 	bl	800508e <dwt_write16bitoffsetreg>
 8007968:	2500      	movs	r5, #0
 800796a:	f7fe bfcd 	b.w	8006908 <dwt_ioctl+0x154>
 800796e:	2c00      	cmp	r4, #0
 8007970:	f000 85dc 	beq.w	800852c <dwt_ioctl+0x1d78>
 8007974:	8823      	ldrh	r3, [r4, #0]
 8007976:	2200      	movs	r2, #0
 8007978:	210c      	movs	r1, #12
 800797a:	f7fd fb88 	bl	800508e <dwt_write16bitoffsetreg>
 800797e:	2500      	movs	r5, #0
 8007980:	f7fe bfc2 	b.w	8006908 <dwt_ioctl+0x154>
 8007984:	4621      	mov	r1, r4
 8007986:	f7fd fb03 	bl	8004f90 <ull_readrxtimestamp>
 800798a:	2500      	movs	r5, #0
 800798c:	f7fe bfbc 	b.w	8006908 <dwt_ioctl+0x154>
 8007990:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007992:	7bdb      	ldrb	r3, [r3, #15]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d00b      	beq.n	80079b0 <dwt_ioctl+0x11fc>
 8007998:	2b03      	cmp	r3, #3
 800799a:	d112      	bne.n	80079c2 <dwt_ioctl+0x120e>
 800799c:	9400      	str	r4, [sp, #0]
 800799e:	2305      	movs	r3, #5
 80079a0:	2220      	movs	r2, #32
 80079a2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80079a6:	f7fc ff27 	bl	80047f8 <dwt_readfromdevice>
 80079aa:	2500      	movs	r5, #0
 80079ac:	f7fe bfac 	b.w	8006908 <dwt_ioctl+0x154>
 80079b0:	9400      	str	r4, [sp, #0]
 80079b2:	2305      	movs	r3, #5
 80079b4:	2200      	movs	r2, #0
 80079b6:	4926      	ldr	r1, [pc, #152]	; (8007a50 <dwt_ioctl+0x129c>)
 80079b8:	f7fc ff1e 	bl	80047f8 <dwt_readfromdevice>
 80079bc:	2500      	movs	r5, #0
 80079be:	f7fe bfa3 	b.w	8006908 <dwt_ioctl+0x154>
 80079c2:	9400      	str	r4, [sp, #0]
 80079c4:	2305      	movs	r3, #5
 80079c6:	2200      	movs	r2, #0
 80079c8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80079cc:	f7fc ff14 	bl	80047f8 <dwt_readfromdevice>
 80079d0:	2500      	movs	r5, #0
 80079d2:	f7fe bf99 	b.w	8006908 <dwt_ioctl+0x154>
 80079d6:	2500      	movs	r5, #0
 80079d8:	f804 5b01 	strb.w	r5, [r4], #1
 80079dc:	9400      	str	r4, [sp, #0]
 80079de:	2304      	movs	r3, #4
 80079e0:	462a      	mov	r2, r5
 80079e2:	2170      	movs	r1, #112	; 0x70
 80079e4:	f7fc ff08 	bl	80047f8 <dwt_readfromdevice>
 80079e8:	f7fe bf8e 	b.w	8006908 <dwt_ioctl+0x154>
 80079ec:	2c00      	cmp	r4, #0
 80079ee:	f000 85a0 	beq.w	8008532 <dwt_ioctl+0x1d7e>
 80079f2:	2201      	movs	r2, #1
 80079f4:	2164      	movs	r1, #100	; 0x64
 80079f6:	f7fc ff09 	bl	800480c <dwt_read32bitoffsetreg>
 80079fa:	6020      	str	r0, [r4, #0]
 80079fc:	2500      	movs	r5, #0
 80079fe:	f7fe bf83 	b.w	8006908 <dwt_ioctl+0x154>
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	f000 8598 	beq.w	8008538 <dwt_ioctl+0x1d84>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2164      	movs	r1, #100	; 0x64
 8007a0c:	f7fc fefe 	bl	800480c <dwt_read32bitoffsetreg>
 8007a10:	6020      	str	r0, [r4, #0]
 8007a12:	2500      	movs	r5, #0
 8007a14:	f7fe bf78 	b.w	8006908 <dwt_ioctl+0x154>
 8007a18:	00010030 	.word	0x00010030
 8007a1c:	000f0004 	.word	0x000f0004
 8007a20:	000f0008 	.word	0x000f0008
 8007a24:	000f000c 	.word	0x000f000c
 8007a28:	000f0010 	.word	0x000f0010
 8007a2c:	000f0014 	.word	0x000f0014
 8007a30:	000f0018 	.word	0x000f0018
 8007a34:	000f001c 	.word	0x000f001c
 8007a38:	000f0028 	.word	0x000f0028
 8007a3c:	00060004 	.word	0x00060004
 8007a40:	0011001a 	.word	0x0011001a
 8007a44:	00180034 	.word	0x00180034
 8007a48:	0018002c 	.word	0x0018002c
 8007a4c:	000c0014 	.word	0x000c0014
 8007a50:	00180020 	.word	0x00180020
 8007a54:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007a56:	7bdb      	ldrb	r3, [r3, #15]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d00b      	beq.n	8007a74 <dwt_ioctl+0x12c0>
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d112      	bne.n	8007a86 <dwt_ioctl+0x12d2>
 8007a60:	9400      	str	r4, [sp, #0]
 8007a62:	2305      	movs	r3, #5
 8007a64:	2228      	movs	r2, #40	; 0x28
 8007a66:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007a6a:	f7fc fec5 	bl	80047f8 <dwt_readfromdevice>
 8007a6e:	2500      	movs	r5, #0
 8007a70:	f7fe bf4a 	b.w	8006908 <dwt_ioctl+0x154>
 8007a74:	9400      	str	r4, [sp, #0]
 8007a76:	2305      	movs	r3, #5
 8007a78:	2200      	movs	r2, #0
 8007a7a:	49d3      	ldr	r1, [pc, #844]	; (8007dc8 <dwt_ioctl+0x1614>)
 8007a7c:	f7fc febc 	bl	80047f8 <dwt_readfromdevice>
 8007a80:	2500      	movs	r5, #0
 8007a82:	f7fe bf41 	b.w	8006908 <dwt_ioctl+0x154>
 8007a86:	9400      	str	r4, [sp, #0]
 8007a88:	2305      	movs	r3, #5
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	49cf      	ldr	r1, [pc, #828]	; (8007dcc <dwt_ioctl+0x1618>)
 8007a8e:	f7fc feb3 	bl	80047f8 <dwt_readfromdevice>
 8007a92:	2500      	movs	r5, #0
 8007a94:	f7fe bf38 	b.w	8006908 <dwt_ioctl+0x154>
 8007a98:	2c00      	cmp	r4, #0
 8007a9a:	f000 8550 	beq.w	800853e <dwt_ioctl+0x1d8a>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	211c      	movs	r1, #28
 8007aa2:	f7fc feb3 	bl	800480c <dwt_read32bitoffsetreg>
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	2500      	movs	r5, #0
 8007aaa:	f7fe bf2d 	b.w	8006908 <dwt_ioctl+0x154>
 8007aae:	2c00      	cmp	r4, #0
 8007ab0:	f000 8548 	beq.w	8008544 <dwt_ioctl+0x1d90>
 8007ab4:	8825      	ldrh	r5, [r4, #0]
 8007ab6:	6867      	ldr	r7, [r4, #4]
 8007ab8:	7a23      	ldrb	r3, [r4, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8545 	beq.w	800854a <dwt_ioctl+0x1d96>
 8007ac0:	463c      	mov	r4, r7
 8007ac2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7fd fb3b 	bl	8005144 <_dwt_otpread>
 8007ace:	f844 0b04 	str.w	r0, [r4], #4
 8007ad2:	3501      	adds	r5, #1
 8007ad4:	b2ad      	uxth	r5, r5
 8007ad6:	42bc      	cmp	r4, r7
 8007ad8:	d1f5      	bne.n	8007ac6 <dwt_ioctl+0x1312>
 8007ada:	2500      	movs	r5, #0
 8007adc:	f7fe bf14 	b.w	8006908 <dwt_ioctl+0x154>
 8007ae0:	2c00      	cmp	r4, #0
 8007ae2:	f000 8535 	beq.w	8008550 <dwt_ioctl+0x1d9c>
 8007ae6:	7823      	ldrb	r3, [r4, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	2128      	movs	r1, #40	; 0x28
 8007aec:	f7fd fa7d 	bl	8004fea <dwt_write8bitoffsetreg>
 8007af0:	2500      	movs	r5, #0
 8007af2:	f7fe bf09 	b.w	8006908 <dwt_ioctl+0x154>
 8007af6:	f7fe fa87 	bl	8006008 <ull_run_pgfcal>
 8007afa:	4605      	mov	r5, r0
 8007afc:	f7fe bf04 	b.w	8006908 <dwt_ioctl+0x154>
 8007b00:	4611      	mov	r1, r2
 8007b02:	f7fe fb77 	bl	80061f4 <ull_pgf_cal>
 8007b06:	4605      	mov	r5, r0
 8007b08:	f7fe befe 	b.w	8006908 <dwt_ioctl+0x154>
 8007b0c:	2c00      	cmp	r4, #0
 8007b0e:	f000 8522 	beq.w	8008556 <dwt_ioctl+0x1da2>
 8007b12:	78a5      	ldrb	r5, [r4, #2]
 8007b14:	2101      	movs	r1, #1
 8007b16:	f7fd faeb 	bl	80050f0 <ull_force_clocks>
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f7fd ff8b 	bl	8005a38 <ull_enable_rf_tx>
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7fd ffbc 	bl	8005aa0 <ull_enable_rftx_blocks>
 8007b28:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	49a8      	ldr	r1, [pc, #672]	; (8007dd0 <dwt_ioctl+0x161c>)
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7fd fa5a 	bl	8004fea <dwt_write8bitoffsetreg>
 8007b36:	2301      	movs	r3, #1
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	23ff      	movs	r3, #255	; 0xff
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	49a5      	ldr	r1, [pc, #660]	; (8007dd4 <dwt_ioctl+0x1620>)
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7fe f921 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8007b46:	4fa3      	ldr	r7, [pc, #652]	; (8007dd4 <dwt_ioctl+0x1620>)
 8007b48:	2500      	movs	r5, #0
 8007b4a:	462a      	mov	r2, r5
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7fc fe84 	bl	800485c <dwt_read8bitoffsetreg>
 8007b54:	f010 0f01 	tst.w	r0, #1
 8007b58:	d1f7      	bne.n	8007b4a <dwt_ioctl+0x1396>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	499e      	ldr	r1, [pc, #632]	; (8007dd8 <dwt_ioctl+0x1624>)
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7fc fe6a 	bl	8004838 <dwt_read16bitoffsetreg>
 8007b64:	4605      	mov	r5, r0
 8007b66:	4630      	mov	r0, r6
 8007b68:	f7fd fe30 	bl	80057cc <ull_disable_rftx_blocks>
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7fd fe36 	bl	80057e0 <ull_disable_rf_tx>
 8007b74:	2105      	movs	r1, #5
 8007b76:	4630      	mov	r0, r6
 8007b78:	f7fd faba 	bl	80050f0 <ull_force_clocks>
 8007b7c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8007b80:	8025      	strh	r5, [r4, #0]
 8007b82:	2500      	movs	r5, #0
 8007b84:	f7fe bec0 	b.w	8006908 <dwt_ioctl+0x154>
 8007b88:	2102      	movs	r1, #2
 8007b8a:	f7fe f9bb 	bl	8005f04 <ull_setdwstate>
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4630      	mov	r0, r6
 8007b92:	f7fe f9b7 	bl	8005f04 <ull_setdwstate>
 8007b96:	2432      	movs	r4, #50	; 0x32
 8007b98:	f04f 0814 	mov.w	r8, #20
 8007b9c:	2700      	movs	r7, #0
 8007b9e:	2544      	movs	r5, #68	; 0x44
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	f7f8 fd50 	bl	8000646 <deca_usleep>
 8007ba6:	463a      	mov	r2, r7
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7fc fe56 	bl	800485c <dwt_read8bitoffsetreg>
 8007bb0:	f010 0f02 	tst.w	r0, #2
 8007bb4:	d105      	bne.n	8007bc2 <dwt_ioctl+0x140e>
 8007bb6:	1e63      	subs	r3, r4, #1
 8007bb8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007bbc:	d1f0      	bne.n	8007ba0 <dwt_ioctl+0x13ec>
 8007bbe:	2501      	movs	r5, #1
 8007bc0:	e000      	b.n	8007bc4 <dwt_ioctl+0x1410>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	426d      	negs	r5, r5
 8007bc6:	f7fe be9f 	b.w	8006908 <dwt_ioctl+0x154>
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	f000 84c6 	beq.w	800855c <dwt_ioctl+0x1da8>
 8007bd0:	7823      	ldrb	r3, [r4, #0]
 8007bd2:	031b      	lsls	r3, r3, #12
 8007bd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007bd8:	7862      	ldrb	r2, [r4, #1]
 8007bda:	2a01      	cmp	r2, #1
 8007bdc:	bf08      	it	eq
 8007bde:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8007be8:	2200      	movs	r2, #0
 8007bea:	497c      	ldr	r1, [pc, #496]	; (8007ddc <dwt_ioctl+0x1628>)
 8007bec:	f7fd fee2 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8007bf0:	2500      	movs	r5, #0
 8007bf2:	f7fe be89 	b.w	8006908 <dwt_ioctl+0x154>
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	f000 84b3 	beq.w	8008562 <dwt_ioctl+0x1dae>
 8007bfc:	6862      	ldr	r2, [r4, #4]
 8007bfe:	6821      	ldr	r1, [r4, #0]
 8007c00:	f7fe f818 	bl	8005c34 <ull_setgpiomode>
 8007c04:	2500      	movs	r5, #0
 8007c06:	f7fe be7f 	b.w	8006908 <dwt_ioctl+0x154>
 8007c0a:	2c00      	cmp	r4, #0
 8007c0c:	f000 84ac 	beq.w	8008568 <dwt_ioctl+0x1db4>
 8007c10:	8823      	ldrh	r3, [r4, #0]
 8007c12:	2200      	movs	r2, #0
 8007c14:	4972      	ldr	r1, [pc, #456]	; (8007de0 <dwt_ioctl+0x162c>)
 8007c16:	f7fd fa3a 	bl	800508e <dwt_write16bitoffsetreg>
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	f7fe be74 	b.w	8006908 <dwt_ioctl+0x154>
 8007c20:	2c00      	cmp	r4, #0
 8007c22:	f000 84a4 	beq.w	800856e <dwt_ioctl+0x1dba>
 8007c26:	6862      	ldr	r2, [r4, #4]
 8007c28:	8821      	ldrh	r1, [r4, #0]
 8007c2a:	f7fe fb13 	bl	8006254 <ull_setgpiovalue>
 8007c2e:	2500      	movs	r5, #0
 8007c30:	f7fe be6a 	b.w	8006908 <dwt_ioctl+0x154>
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	f000 849d 	beq.w	8008574 <dwt_ioctl+0x1dc0>
 8007c3a:	7865      	ldrb	r5, [r4, #1]
 8007c3c:	7823      	ldrb	r3, [r4, #0]
 8007c3e:	b18b      	cbz	r3, 8007c64 <dwt_ioctl+0x14b0>
 8007c40:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007c42:	2200      	movs	r2, #0
 8007c44:	73da      	strb	r2, [r3, #15]
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	b1e5      	cbz	r5, 8007c88 <dwt_ioctl+0x14d4>
 8007c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c52:	9200      	str	r2, [sp, #0]
 8007c54:	2200      	movs	r2, #0
 8007c56:	2110      	movs	r1, #16
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7fd feab 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8007c5e:	2500      	movs	r5, #0
 8007c60:	f7fe be52 	b.w	8006908 <dwt_ioctl+0x154>
 8007c64:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007c66:	2201      	movs	r2, #1
 8007c68:	73da      	strb	r2, [r3, #15]
 8007c6a:	2318      	movs	r3, #24
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	495d      	ldr	r1, [pc, #372]	; (8007de4 <dwt_ioctl+0x1630>)
 8007c70:	f7fd fb0e 	bl	8005290 <dwt_write32bitoffsetreg>
 8007c74:	23e8      	movs	r3, #232	; 0xe8
 8007c76:	2200      	movs	r2, #0
 8007c78:	495b      	ldr	r1, [pc, #364]	; (8007de8 <dwt_ioctl+0x1634>)
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7fd fb08 	bl	8005290 <dwt_write32bitoffsetreg>
 8007c80:	f06f 0308 	mvn.w	r3, #8
 8007c84:	2200      	movs	r2, #0
 8007c86:	e7e1      	b.n	8007c4c <dwt_ioctl+0x1498>
 8007c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8c:	e7e1      	b.n	8007c52 <dwt_ioctl+0x149e>
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	f000 8473 	beq.w	800857a <dwt_ioctl+0x1dc6>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	2200      	movs	r2, #0
 8007c98:	2130      	movs	r1, #48	; 0x30
 8007c9a:	f7fd faf9 	bl	8005290 <dwt_write32bitoffsetreg>
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	f7fe be32 	b.w	8006908 <dwt_ioctl+0x154>
 8007ca4:	2c00      	cmp	r4, #0
 8007ca6:	f000 846b 	beq.w	8008580 <dwt_ioctl+0x1dcc>
 8007caa:	2200      	movs	r2, #0
 8007cac:	4629      	mov	r1, r5
 8007cae:	f7fc fdad 	bl	800480c <dwt_read32bitoffsetreg>
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	2500      	movs	r5, #0
 8007cb6:	f7fe be27 	b.w	8006908 <dwt_ioctl+0x154>
 8007cba:	4623      	mov	r3, r4
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7fd fae6 	bl	8005290 <dwt_write32bitoffsetreg>
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	f7fe be1f 	b.w	8006908 <dwt_ioctl+0x154>
 8007cca:	2c00      	cmp	r4, #0
 8007ccc:	f000 845b 	beq.w	8008586 <dwt_ioctl+0x1dd2>
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	4946      	ldr	r1, [pc, #280]	; (8007dec <dwt_ioctl+0x1638>)
 8007cd4:	f7fc fdc2 	bl	800485c <dwt_read8bitoffsetreg>
 8007cd8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8007cdc:	7020      	strb	r0, [r4, #0]
 8007cde:	2500      	movs	r5, #0
 8007ce0:	f7fe be12 	b.w	8006908 <dwt_ioctl+0x154>
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	f000 8451 	beq.w	800858c <dwt_ioctl+0x1dd8>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	2200      	movs	r2, #0
 8007cee:	2144      	movs	r1, #68	; 0x44
 8007cf0:	f7fd face 	bl	8005290 <dwt_write32bitoffsetreg>
 8007cf4:	2500      	movs	r5, #0
 8007cf6:	f7fe be07 	b.w	8006908 <dwt_ioctl+0x154>
 8007cfa:	2c00      	cmp	r4, #0
 8007cfc:	f000 8449 	beq.w	8008592 <dwt_ioctl+0x1dde>
 8007d00:	8823      	ldrh	r3, [r4, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	2148      	movs	r1, #72	; 0x48
 8007d06:	f7fd f9c2 	bl	800508e <dwt_write16bitoffsetreg>
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	f7fe bdfc 	b.w	8006908 <dwt_ioctl+0x154>
 8007d10:	2c00      	cmp	r4, #0
 8007d12:	f000 8441 	beq.w	8008598 <dwt_ioctl+0x1de4>
 8007d16:	2200      	movs	r2, #0
 8007d18:	2144      	movs	r1, #68	; 0x44
 8007d1a:	f7fc fd77 	bl	800480c <dwt_read32bitoffsetreg>
 8007d1e:	6020      	str	r0, [r4, #0]
 8007d20:	2500      	movs	r5, #0
 8007d22:	f7fe bdf1 	b.w	8006908 <dwt_ioctl+0x154>
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	f000 8439 	beq.w	800859e <dwt_ioctl+0x1dea>
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2148      	movs	r1, #72	; 0x48
 8007d30:	f7fc fd82 	bl	8004838 <dwt_read16bitoffsetreg>
 8007d34:	6020      	str	r0, [r4, #0]
 8007d36:	2500      	movs	r5, #0
 8007d38:	f7fe bde6 	b.w	8006908 <dwt_ioctl+0x154>
 8007d3c:	2c00      	cmp	r4, #0
 8007d3e:	f000 8431 	beq.w	80085a4 <dwt_ioctl+0x1df0>
 8007d42:	7823      	ldrb	r3, [r4, #0]
 8007d44:	2200      	movs	r2, #0
 8007d46:	492a      	ldr	r1, [pc, #168]	; (8007df0 <dwt_ioctl+0x163c>)
 8007d48:	f7fd f94f 	bl	8004fea <dwt_write8bitoffsetreg>
 8007d4c:	2500      	movs	r5, #0
 8007d4e:	f7fe bddb 	b.w	8006908 <dwt_ioctl+0x154>
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	f000 8429 	beq.w	80085aa <dwt_ioctl+0x1df6>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2144      	movs	r1, #68	; 0x44
 8007d5c:	f7fc fd7e 	bl	800485c <dwt_read8bitoffsetreg>
 8007d60:	7020      	strb	r0, [r4, #0]
 8007d62:	2500      	movs	r5, #0
 8007d64:	f7fe bdd0 	b.w	8006908 <dwt_ioctl+0x154>
 8007d68:	2c00      	cmp	r4, #0
 8007d6a:	f000 8421 	beq.w	80085b0 <dwt_ioctl+0x1dfc>
 8007d6e:	f7fd f949 	bl	8005004 <ull_getframelength>
 8007d72:	6020      	str	r0, [r4, #0]
 8007d74:	2500      	movs	r5, #0
 8007d76:	f7fe bdc7 	b.w	8006908 <dwt_ioctl+0x154>
 8007d7a:	2c00      	cmp	r4, #0
 8007d7c:	f000 841b 	beq.w	80085b6 <dwt_ioctl+0x1e02>
 8007d80:	2200      	movs	r2, #0
 8007d82:	491c      	ldr	r1, [pc, #112]	; (8007df4 <dwt_ioctl+0x1640>)
 8007d84:	f7fc fd58 	bl	8004838 <dwt_read16bitoffsetreg>
 8007d88:	8020      	strh	r0, [r4, #0]
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	f7fe bdbc 	b.w	8006908 <dwt_ioctl+0x154>
 8007d90:	2c00      	cmp	r4, #0
 8007d92:	f000 8413 	beq.w	80085bc <dwt_ioctl+0x1e08>
 8007d96:	2200      	movs	r2, #0
 8007d98:	4917      	ldr	r1, [pc, #92]	; (8007df8 <dwt_ioctl+0x1644>)
 8007d9a:	f7fc fd37 	bl	800480c <dwt_read32bitoffsetreg>
 8007d9e:	6020      	str	r0, [r4, #0]
 8007da0:	2500      	movs	r5, #0
 8007da2:	f7fe bdb1 	b.w	8006908 <dwt_ioctl+0x154>
 8007da6:	2c00      	cmp	r4, #0
 8007da8:	f000 840b 	beq.w	80085c2 <dwt_ioctl+0x1e0e>
 8007dac:	8823      	ldrh	r3, [r4, #0]
 8007dae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007db8:	2200      	movs	r2, #0
 8007dba:	490f      	ldr	r1, [pc, #60]	; (8007df8 <dwt_ioctl+0x1644>)
 8007dbc:	f7fe f996 	bl	80060ec <dwt_modify16bitoffsetreg>
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	f7fe bda1 	b.w	8006908 <dwt_ioctl+0x154>
 8007dc6:	bf00      	nop
 8007dc8:	00180028 	.word	0x00180028
 8007dcc:	000c0008 	.word	0x000c0008
 8007dd0:	0007001c 	.word	0x0007001c
 8007dd4:	00080010 	.word	0x00080010
 8007dd8:	00080014 	.word	0x00080014
 8007ddc:	00070014 	.word	0x00070014
 8007de0:	00050008 	.word	0x00050008
 8007de4:	001f000c 	.word	0x001f000c
 8007de8:	001f0010 	.word	0x001f0010
 8007dec:	00030060 	.word	0x00030060
 8007df0:	00010024 	.word	0x00010024
 8007df4:	0005002c 	.word	0x0005002c
 8007df8:	000e001a 	.word	0x000e001a
 8007dfc:	2c00      	cmp	r4, #0
 8007dfe:	f000 83e3 	beq.w	80085c8 <dwt_ioctl+0x1e14>
 8007e02:	88a7      	ldrh	r7, [r4, #4]
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	9309      	str	r3, [sp, #36]	; 0x24
 8007e08:	7b21      	ldrb	r1, [r4, #12]
 8007e0a:	9106      	str	r1, [sp, #24]
 8007e0c:	6922      	ldr	r2, [r4, #16]
 8007e0e:	9204      	str	r2, [sp, #16]
 8007e10:	6962      	ldr	r2, [r4, #20]
 8007e12:	9205      	str	r2, [sp, #20]
 8007e14:	f003 0203 	and.w	r2, r3, #3
 8007e18:	f3c3 0085 	ubfx	r0, r3, #2, #6
 8007e1c:	2905      	cmp	r1, #5
 8007e1e:	d142      	bne.n	8007ea6 <dwt_ioctl+0x16f2>
 8007e20:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8007e24:	bf28      	it	cs
 8007e26:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8007e2a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800810c <dwt_ioctl+0x1958>
 8007e2e:	2f04      	cmp	r7, #4
 8007e30:	d805      	bhi.n	8007e3e <dwt_ioctl+0x168a>
 8007e32:	eb09 0300 	add.w	r3, r9, r0
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	3b05      	subs	r3, #5
 8007e3a:	429f      	cmp	r7, r3
 8007e3c:	db3b      	blt.n	8007eb6 <dwt_ioctl+0x1702>
 8007e3e:	2a01      	cmp	r2, #1
 8007e40:	d877      	bhi.n	8007f32 <dwt_ioctl+0x177e>
 8007e42:	4bae      	ldr	r3, [pc, #696]	; (80080fc <dwt_ioctl+0x1948>)
 8007e44:	5c99      	ldrb	r1, [r3, r2]
 8007e46:	463e      	mov	r6, r7
 8007e48:	42b9      	cmp	r1, r7
 8007e4a:	da74      	bge.n	8007f36 <dwt_ioctl+0x1782>
 8007e4c:	1c55      	adds	r5, r2, #1
 8007e4e:	fa53 f585 	uxtab	r5, r3, r5
 8007e52:	2300      	movs	r3, #0
 8007e54:	440b      	add	r3, r1
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3201      	adds	r2, #1
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	2a02      	cmp	r2, #2
 8007e5e:	d005      	beq.n	8007e6c <dwt_ioctl+0x16b8>
 8007e60:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007e64:	eba6 0c03 	sub.w	ip, r6, r3
 8007e68:	4561      	cmp	r1, ip
 8007e6a:	dbf3      	blt.n	8007e54 <dwt_ioctl+0x16a0>
 8007e6c:	429f      	cmp	r7, r3
 8007e6e:	bf08      	it	eq
 8007e70:	9003      	streq	r0, [sp, #12]
 8007e72:	d064      	beq.n	8007f3e <dwt_ioctl+0x178a>
 8007e74:	f107 0805 	add.w	r8, r7, #5
 8007e78:	fa1f f888 	uxth.w	r8, r8
 8007e7c:	2580      	movs	r5, #128	; 0x80
 8007e7e:	2100      	movs	r1, #0
 8007e80:	9107      	str	r1, [sp, #28]
 8007e82:	9103      	str	r1, [sp, #12]
 8007e84:	9108      	str	r1, [sp, #32]
 8007e86:	460e      	mov	r6, r1
 8007e88:	f04f 0b05 	mov.w	fp, #5
 8007e8c:	46be      	mov	lr, r7
 8007e8e:	455f      	cmp	r7, fp
 8007e90:	bf38      	it	cc
 8007e92:	46de      	movcc	lr, fp
 8007e94:	f1ae 0e05 	sub.w	lr, lr, #5
 8007e98:	fa1f fe8e 	uxth.w	lr, lr
 8007e9c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80080fc <dwt_ioctl+0x1948>
 8007ea0:	46bc      	mov	ip, r7
 8007ea2:	460f      	mov	r7, r1
 8007ea4:	e3dd      	b.n	8008662 <dwt_ioctl+0x1eae>
 8007ea6:	f240 1331 	movw	r3, #305	; 0x131
 8007eaa:	429f      	cmp	r7, r3
 8007eac:	bf28      	it	cs
 8007eae:	461f      	movcs	r7, r3
 8007eb0:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8008110 <dwt_ioctl+0x195c>
 8007eb4:	e7bb      	b.n	8007e2e <dwt_ioctl+0x167a>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9a05      	ldr	r2, [sp, #20]
 8007eba:	8013      	strh	r3, [r2, #0]
 8007ebc:	9a04      	ldr	r2, [sp, #16]
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec2:	600a      	str	r2, [r1, #0]
 8007ec4:	e04a      	b.n	8007f5c <dwt_ioctl+0x17a8>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9a05      	ldr	r2, [sp, #20]
 8007eca:	8013      	strh	r3, [r2, #0]
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed8:	e040      	b.n	8007f5c <dwt_ioctl+0x17a8>
 8007eda:	fa1f fb81 	uxth.w	fp, r1
 8007ede:	9207      	str	r2, [sp, #28]
 8007ee0:	9003      	str	r0, [sp, #12]
 8007ee2:	9308      	str	r3, [sp, #32]
 8007ee4:	2701      	movs	r7, #1
 8007ee6:	e3cd      	b.n	8008684 <dwt_ioctl+0x1ed0>
 8007ee8:	2f00      	cmp	r7, #0
 8007eea:	f040 83a1 	bne.w	8008630 <dwt_ioctl+0x1e7c>
 8007eee:	4598      	cmp	r8, r3
 8007ef0:	f200 83a3 	bhi.w	800863a <dwt_ioctl+0x1e86>
 8007ef4:	2e00      	cmp	r6, #0
 8007ef6:	d038      	beq.n	8007f6a <dwt_ioctl+0x17b6>
 8007ef8:	283f      	cmp	r0, #63	; 0x3f
 8007efa:	f000 83c8 	beq.w	800868e <dwt_ioctl+0x1eda>
 8007efe:	2700      	movs	r7, #0
 8007f00:	f819 1000 	ldrb.w	r1, [r9, r0]
 8007f04:	1a5b      	subs	r3, r3, r1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	1e46      	subs	r6, r0, #1
 8007f0a:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8007f0e:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 8007f12:	bf18      	it	ne
 8007f14:	2601      	movne	r6, #1
 8007f16:	e39c      	b.n	8008652 <dwt_ioctl+0x1e9e>
 8007f18:	9906      	ldr	r1, [sp, #24]
 8007f1a:	2909      	cmp	r1, #9
 8007f1c:	f040 83bd 	bne.w	800869a <dwt_ioctl+0x1ee6>
 8007f20:	213f      	movs	r1, #63	; 0x3f
 8007f22:	9103      	str	r1, [sp, #12]
 8007f24:	e00b      	b.n	8007f3e <dwt_ioctl+0x178a>
 8007f26:	b2b3      	uxth	r3, r6
 8007f28:	3201      	adds	r2, #1
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	213f      	movs	r1, #63	; 0x3f
 8007f2e:	9103      	str	r1, [sp, #12]
 8007f30:	e005      	b.n	8007f3e <dwt_ioctl+0x178a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	e79a      	b.n	8007e6c <dwt_ioctl+0x16b8>
 8007f36:	2300      	movs	r3, #0
 8007f38:	e798      	b.n	8007e6c <dwt_ioctl+0x16b8>
 8007f3a:	9003      	str	r0, [sp, #12]
 8007f3c:	4663      	mov	r3, ip
 8007f3e:	9905      	ldr	r1, [sp, #20]
 8007f40:	800b      	strh	r3, [r1, #0]
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	0413      	lsls	r3, r2, #16
 8007f4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007f50:	4313      	orrs	r3, r2
 8007f52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007f56:	9a04      	ldr	r2, [sp, #16]
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	2500      	movs	r5, #0
 8007f60:	f7fe bcd2 	b.w	8006908 <dwt_ioctl+0x154>
 8007f64:	9a07      	ldr	r2, [sp, #28]
 8007f66:	9b08      	ldr	r3, [sp, #32]
 8007f68:	e7e9      	b.n	8007f3e <dwt_ioctl+0x178a>
 8007f6a:	9003      	str	r0, [sp, #12]
 8007f6c:	e7e7      	b.n	8007f3e <dwt_ioctl+0x178a>
 8007f6e:	9a07      	ldr	r2, [sp, #28]
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	e7e4      	b.n	8007f3e <dwt_ioctl+0x178a>
 8007f74:	213f      	movs	r1, #63	; 0x3f
 8007f76:	9103      	str	r1, [sp, #12]
 8007f78:	e7e1      	b.n	8007f3e <dwt_ioctl+0x178a>
 8007f7a:	2c00      	cmp	r4, #0
 8007f7c:	f000 8327 	beq.w	80085ce <dwt_ioctl+0x1e1a>
 8007f80:	7825      	ldrb	r5, [r4, #0]
 8007f82:	6862      	ldr	r2, [r4, #4]
 8007f84:	2a01      	cmp	r2, #1
 8007f86:	bf15      	itete	ne
 8007f88:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8007f8c:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8007f90:	27df      	movne	r7, #223	; 0xdf
 8007f92:	27ef      	moveq	r7, #239	; 0xef
 8007f94:	bf14      	ite	ne
 8007f96:	f04f 0820 	movne.w	r8, #32
 8007f9a:	f04f 0810 	moveq.w	r8, #16
 8007f9e:	2400      	movs	r4, #0
 8007fa0:	9400      	str	r4, [sp, #0]
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8007fa8:	f7fd fd04 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8007fac:	9400      	str	r4, [sp, #0]
 8007fae:	463b      	mov	r3, r7
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	4953      	ldr	r1, [pc, #332]	; (8008100 <dwt_ioctl+0x194c>)
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7fd fee7 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8007fba:	2d01      	cmp	r5, #1
 8007fbc:	d003      	beq.n	8007fc6 <dwt_ioctl+0x1812>
 8007fbe:	b165      	cbz	r5, 8007fda <dwt_ioctl+0x1826>
 8007fc0:	2500      	movs	r5, #0
 8007fc2:	f7fe bca1 	b.w	8006908 <dwt_ioctl+0x154>
 8007fc6:	4625      	mov	r5, r4
 8007fc8:	9400      	str	r4, [sp, #0]
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4622      	mov	r2, r4
 8007fce:	494d      	ldr	r1, [pc, #308]	; (8008104 <dwt_ioctl+0x1950>)
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7fd fed9 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8007fd6:	f7fe bc97 	b.w	8006908 <dwt_ioctl+0x154>
 8007fda:	f8cd 8000 	str.w	r8, [sp]
 8007fde:	23ff      	movs	r3, #255	; 0xff
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	4948      	ldr	r1, [pc, #288]	; (8008104 <dwt_ioctl+0x1950>)
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7fd fecf 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8007fea:	f7fe bc8d 	b.w	8006908 <dwt_ioctl+0x154>
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	f000 82f0 	beq.w	80085d4 <dwt_ioctl+0x1e20>
 8007ff4:	7822      	ldrb	r2, [r4, #0]
 8007ff6:	f012 0f01 	tst.w	r2, #1
 8007ffa:	d02d      	beq.n	8008058 <dwt_ioctl+0x18a4>
 8007ffc:	0157      	lsls	r7, r2, #5
 8007ffe:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8008002:	2440      	movs	r4, #64	; 0x40
 8008004:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008008:	f012 0f04 	tst.w	r2, #4
 800800c:	d028      	beq.n	8008060 <dwt_ioctl+0x18ac>
 800800e:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8008012:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008016:	0112      	lsls	r2, r2, #4
 8008018:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800801c:	4317      	orrs	r7, r2
 800801e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008022:	9200      	str	r2, [sp, #0]
 8008024:	43db      	mvns	r3, r3
 8008026:	2200      	movs	r2, #0
 8008028:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800802c:	4630      	mov	r0, r6
 800802e:	f7fd fcc1 	bl	80059b4 <dwt_modify32bitoffsetreg>
 8008032:	43e4      	mvns	r4, r4
 8008034:	b2a4      	uxth	r4, r4
 8008036:	2500      	movs	r5, #0
 8008038:	9500      	str	r5, [sp, #0]
 800803a:	4623      	mov	r3, r4
 800803c:	462a      	mov	r2, r5
 800803e:	4930      	ldr	r1, [pc, #192]	; (8008100 <dwt_ioctl+0x194c>)
 8008040:	4630      	mov	r0, r6
 8008042:	f7fe f853 	bl	80060ec <dwt_modify16bitoffsetreg>
 8008046:	9700      	str	r7, [sp, #0]
 8008048:	4623      	mov	r3, r4
 800804a:	462a      	mov	r2, r5
 800804c:	492d      	ldr	r1, [pc, #180]	; (8008104 <dwt_ioctl+0x1950>)
 800804e:	4630      	mov	r0, r6
 8008050:	f7fe f84c 	bl	80060ec <dwt_modify16bitoffsetreg>
 8008054:	f7fe bc58 	b.w	8006908 <dwt_ioctl+0x154>
 8008058:	2700      	movs	r7, #0
 800805a:	463c      	mov	r4, r7
 800805c:	463b      	mov	r3, r7
 800805e:	e7d3      	b.n	8008008 <dwt_ioctl+0x1854>
 8008060:	2200      	movs	r2, #0
 8008062:	e7de      	b.n	8008022 <dwt_ioctl+0x186e>
 8008064:	2308      	movs	r3, #8
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	23ff      	movs	r3, #255	; 0xff
 800806a:	2201      	movs	r2, #1
 800806c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008070:	f7fd fe8a 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8008074:	4c24      	ldr	r4, [pc, #144]	; (8008108 <dwt_ioctl+0x1954>)
 8008076:	2302      	movs	r3, #2
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	23ff      	movs	r3, #255	; 0xff
 800807c:	2203      	movs	r2, #3
 800807e:	4621      	mov	r1, r4
 8008080:	4630      	mov	r0, r6
 8008082:	f7fd fe81 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8008086:	2500      	movs	r5, #0
 8008088:	9500      	str	r5, [sp, #0]
 800808a:	23f7      	movs	r3, #247	; 0xf7
 800808c:	2201      	movs	r2, #1
 800808e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008092:	4630      	mov	r0, r6
 8008094:	f7fd fe78 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8008098:	9500      	str	r5, [sp, #0]
 800809a:	23fd      	movs	r3, #253	; 0xfd
 800809c:	2203      	movs	r2, #3
 800809e:	4621      	mov	r1, r4
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7fd fe71 	bl	8005d88 <dwt_modify8bitoffsetreg>
 80080a6:	f7fe bc2f 	b.w	8006908 <dwt_ioctl+0x154>
 80080aa:	2c00      	cmp	r4, #0
 80080ac:	f000 8295 	beq.w	80085da <dwt_ioctl+0x1e26>
 80080b0:	8863      	ldrh	r3, [r4, #2]
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80080b8:	7822      	ldrb	r2, [r4, #0]
 80080ba:	b10a      	cbz	r2, 80080c0 <dwt_ioctl+0x190c>
 80080bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	f24f 0307 	movw	r3, #61447	; 0xf007
 80080c6:	2200      	movs	r2, #0
 80080c8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7fe f80d 	bl	80060ec <dwt_modify16bitoffsetreg>
 80080d2:	2500      	movs	r5, #0
 80080d4:	f7fe bc18 	b.w	8006908 <dwt_ioctl+0x154>
 80080d8:	2c00      	cmp	r4, #0
 80080da:	f000 8281 	beq.w	80085e0 <dwt_ioctl+0x1e2c>
 80080de:	b2e3      	uxtb	r3, r4
 80080e0:	1c9a      	adds	r2, r3, #2
 80080e2:	2301      	movs	r3, #1
 80080e4:	4093      	lsls	r3, r2
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2200      	movs	r2, #0
 80080ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80080f0:	f7fc ff7b 	bl	8004fea <dwt_write8bitoffsetreg>
 80080f4:	2500      	movs	r5, #0
 80080f6:	f7fe bc07 	b.w	8006908 <dwt_ioctl+0x154>
 80080fa:	bf00      	nop
 80080fc:	08011e9c 	.word	0x08011e9c
 8008100:	00050008 	.word	0x00050008
 8008104:	0005000c 	.word	0x0005000c
 8008108:	00110008 	.word	0x00110008
 800810c:	08011e1c 	.word	0x08011e1c
 8008110:	08011e5c 	.word	0x08011e5c
 8008114:	2c00      	cmp	r4, #0
 8008116:	f000 8266 	beq.w	80085e6 <dwt_ioctl+0x1e32>
 800811a:	7ae3      	ldrb	r3, [r4, #11]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 8265 	beq.w	80085ec <dwt_ioctl+0x1e38>
 8008122:	7b63      	ldrb	r3, [r4, #13]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d921      	bls.n	800816c <dwt_ioctl+0x19b8>
 8008128:	7b22      	ldrb	r2, [r4, #12]
 800812a:	4bd7      	ldr	r3, [pc, #860]	; (8008488 <dwt_ioctl+0x1cd4>)
 800812c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008130:	0112      	lsls	r2, r2, #4
 8008132:	0ad3      	lsrs	r3, r2, #11
 8008134:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008138:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800813c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008140:	bf28      	it	cs
 8008142:	3301      	addcs	r3, #1
 8008144:	b29b      	uxth	r3, r3
 8008146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8008150:	2202      	movs	r2, #2
 8008152:	49ce      	ldr	r1, [pc, #824]	; (800848c <dwt_ioctl+0x1cd8>)
 8008154:	4630      	mov	r0, r6
 8008156:	f7fd ffc9 	bl	80060ec <dwt_modify16bitoffsetreg>
 800815a:	2394      	movs	r3, #148	; 0x94
 800815c:	2200      	movs	r2, #0
 800815e:	49cc      	ldr	r1, [pc, #816]	; (8008490 <dwt_ioctl+0x1cdc>)
 8008160:	4630      	mov	r0, r6
 8008162:	f7fc ff42 	bl	8004fea <dwt_write8bitoffsetreg>
 8008166:	2500      	movs	r5, #0
 8008168:	f7fe bbce 	b.w	8006908 <dwt_ioctl+0x154>
 800816c:	7b22      	ldrb	r2, [r4, #12]
 800816e:	4bc6      	ldr	r3, [pc, #792]	; (8008488 <dwt_ioctl+0x1cd4>)
 8008170:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008174:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8008178:	fb02 f203 	mul.w	r2, r2, r3
 800817c:	0c93      	lsrs	r3, r2, #18
 800817e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8008182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008186:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800818a:	bf28      	it	cs
 800818c:	3301      	addcs	r3, #1
 800818e:	b29b      	uxth	r3, r3
 8008190:	e7d9      	b.n	8008146 <dwt_ioctl+0x1992>
 8008192:	2c00      	cmp	r4, #0
 8008194:	f000 822d 	beq.w	80085f2 <dwt_ioctl+0x1e3e>
 8008198:	2200      	movs	r2, #0
 800819a:	49be      	ldr	r1, [pc, #760]	; (8008494 <dwt_ioctl+0x1ce0>)
 800819c:	f7fc fb36 	bl	800480c <dwt_read32bitoffsetreg>
 80081a0:	6020      	str	r0, [r4, #0]
 80081a2:	2500      	movs	r5, #0
 80081a4:	f7fe bbb0 	b.w	8006908 <dwt_ioctl+0x154>
 80081a8:	2c00      	cmp	r4, #0
 80081aa:	f000 8225 	beq.w	80085f8 <dwt_ioctl+0x1e44>
 80081ae:	2200      	movs	r2, #0
 80081b0:	49b9      	ldr	r1, [pc, #740]	; (8008498 <dwt_ioctl+0x1ce4>)
 80081b2:	f7fc fb2b 	bl	800480c <dwt_read32bitoffsetreg>
 80081b6:	6020      	str	r0, [r4, #0]
 80081b8:	2500      	movs	r5, #0
 80081ba:	f7fe bba5 	b.w	8006908 <dwt_ioctl+0x154>
 80081be:	2c00      	cmp	r4, #0
 80081c0:	f000 821d 	beq.w	80085fe <dwt_ioctl+0x1e4a>
 80081c4:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	2500      	movs	r5, #0
 80081cc:	f7fe bb9c 	b.w	8006908 <dwt_ioctl+0x154>
 80081d0:	2c00      	cmp	r4, #0
 80081d2:	f000 8217 	beq.w	8008604 <dwt_ioctl+0x1e50>
 80081d6:	2500      	movs	r5, #0
 80081d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80081da:	af10      	add	r7, sp, #64	; 0x40
 80081dc:	2319      	movs	r3, #25
 80081de:	f847 3d10 	str.w	r3, [r7, #-16]!
 80081e2:	9700      	str	r7, [sp, #0]
 80081e4:	2304      	movs	r3, #4
 80081e6:	462a      	mov	r2, r5
 80081e8:	49ac      	ldr	r1, [pc, #688]	; (800849c <dwt_ioctl+0x1ce8>)
 80081ea:	f7fc fef3 	bl	8004fd4 <dwt_writetodevice>
 80081ee:	f641 7348 	movw	r3, #8008	; 0x1f48
 80081f2:	930c      	str	r3, [sp, #48]	; 0x30
 80081f4:	9700      	str	r7, [sp, #0]
 80081f6:	2304      	movs	r3, #4
 80081f8:	462a      	mov	r2, r5
 80081fa:	49a9      	ldr	r1, [pc, #676]	; (80084a0 <dwt_ioctl+0x1cec>)
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7fc fee9 	bl	8004fd4 <dwt_writetodevice>
 8008202:	ab0b      	add	r3, sp, #44	; 0x2c
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2304      	movs	r3, #4
 8008208:	462a      	mov	r2, r5
 800820a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800820e:	4630      	mov	r0, r6
 8008210:	f7fc faf2 	bl	80047f8 <dwt_readfromdevice>
 8008214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	f7fe bb76 	b.w	8006908 <dwt_ioctl+0x154>
 800821c:	2c00      	cmp	r4, #0
 800821e:	f000 81f4 	beq.w	800860a <dwt_ioctl+0x1e56>
 8008222:	2200      	movs	r2, #0
 8008224:	499f      	ldr	r1, [pc, #636]	; (80084a4 <dwt_ioctl+0x1cf0>)
 8008226:	f7fc faf1 	bl	800480c <dwt_read32bitoffsetreg>
 800822a:	b280      	uxth	r0, r0
 800822c:	6020      	str	r0, [r4, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	499d      	ldr	r1, [pc, #628]	; (80084a8 <dwt_ioctl+0x1cf4>)
 8008232:	4630      	mov	r0, r6
 8008234:	f7fc faea 	bl	800480c <dwt_read32bitoffsetreg>
 8008238:	0d43      	lsrs	r3, r0, #21
 800823a:	019b      	lsls	r3, r3, #6
 800823c:	b29b      	uxth	r3, r3
 800823e:	6063      	str	r3, [r4, #4]
 8008240:	2500      	movs	r5, #0
 8008242:	f7fe bb61 	b.w	8006908 <dwt_ioctl+0x154>
 8008246:	2c00      	cmp	r4, #0
 8008248:	f000 81e2 	beq.w	8008610 <dwt_ioctl+0x1e5c>
 800824c:	7d63      	ldrb	r3, [r4, #21]
 800824e:	b12b      	cbz	r3, 800825c <dwt_ioctl+0x1aa8>
 8008250:	2b01      	cmp	r3, #1
 8008252:	d037      	beq.n	80082c4 <dwt_ioctl+0x1b10>
 8008254:	2b02      	cmp	r3, #2
 8008256:	d05e      	beq.n	8008316 <dwt_ioctl+0x1b62>
 8008258:	23ff      	movs	r3, #255	; 0xff
 800825a:	e02f      	b.n	80082bc <dwt_ioctl+0x1b08>
 800825c:	2200      	movs	r2, #0
 800825e:	4993      	ldr	r1, [pc, #588]	; (80084ac <dwt_ioctl+0x1cf8>)
 8008260:	f7fc fad4 	bl	800480c <dwt_read32bitoffsetreg>
 8008264:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008268:	6020      	str	r0, [r4, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	4990      	ldr	r1, [pc, #576]	; (80084b0 <dwt_ioctl+0x1cfc>)
 800826e:	4630      	mov	r0, r6
 8008270:	f7fc facc 	bl	800480c <dwt_read32bitoffsetreg>
 8008274:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008278:	6060      	str	r0, [r4, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	498d      	ldr	r1, [pc, #564]	; (80084b4 <dwt_ioctl+0x1d00>)
 800827e:	4630      	mov	r0, r6
 8008280:	f7fc fac4 	bl	800480c <dwt_read32bitoffsetreg>
 8008284:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008288:	60a0      	str	r0, [r4, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	498a      	ldr	r1, [pc, #552]	; (80084b8 <dwt_ioctl+0x1d04>)
 800828e:	4630      	mov	r0, r6
 8008290:	f7fc fabc 	bl	800480c <dwt_read32bitoffsetreg>
 8008294:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008298:	60e0      	str	r0, [r4, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	4987      	ldr	r1, [pc, #540]	; (80084bc <dwt_ioctl+0x1d08>)
 800829e:	4630      	mov	r0, r6
 80082a0:	f7fc fab4 	bl	800480c <dwt_read32bitoffsetreg>
 80082a4:	f3c0 0010 	ubfx	r0, r0, #0, #17
 80082a8:	6120      	str	r0, [r4, #16]
 80082aa:	2203      	movs	r2, #3
 80082ac:	4979      	ldr	r1, [pc, #484]	; (8008494 <dwt_ioctl+0x1ce0>)
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7fc fad4 	bl	800485c <dwt_read8bitoffsetreg>
 80082b4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80082b8:	7520      	strb	r0, [r4, #20]
 80082ba:	2300      	movs	r3, #0
 80082bc:	75a3      	strb	r3, [r4, #22]
 80082be:	2500      	movs	r5, #0
 80082c0:	f7fe bb22 	b.w	8006908 <dwt_ioctl+0x154>
 80082c4:	2200      	movs	r2, #0
 80082c6:	497e      	ldr	r1, [pc, #504]	; (80084c0 <dwt_ioctl+0x1d0c>)
 80082c8:	f7fc faa0 	bl	800480c <dwt_read32bitoffsetreg>
 80082cc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80082d0:	6020      	str	r0, [r4, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	497b      	ldr	r1, [pc, #492]	; (80084c4 <dwt_ioctl+0x1d10>)
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7fc fa98 	bl	800480c <dwt_read32bitoffsetreg>
 80082dc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80082e0:	6060      	str	r0, [r4, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	4978      	ldr	r1, [pc, #480]	; (80084c8 <dwt_ioctl+0x1d14>)
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7fc fa90 	bl	800480c <dwt_read32bitoffsetreg>
 80082ec:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80082f0:	60a0      	str	r0, [r4, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80082f8:	4630      	mov	r0, r6
 80082fa:	f7fc fa87 	bl	800480c <dwt_read32bitoffsetreg>
 80082fe:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008302:	60e0      	str	r0, [r4, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	4971      	ldr	r1, [pc, #452]	; (80084cc <dwt_ioctl+0x1d18>)
 8008308:	4630      	mov	r0, r6
 800830a:	f7fc fa7f 	bl	800480c <dwt_read32bitoffsetreg>
 800830e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8008312:	6120      	str	r0, [r4, #16]
 8008314:	e7c9      	b.n	80082aa <dwt_ioctl+0x1af6>
 8008316:	2200      	movs	r2, #0
 8008318:	496d      	ldr	r1, [pc, #436]	; (80084d0 <dwt_ioctl+0x1d1c>)
 800831a:	f7fc fa77 	bl	800480c <dwt_read32bitoffsetreg>
 800831e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008322:	6020      	str	r0, [r4, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	496b      	ldr	r1, [pc, #428]	; (80084d4 <dwt_ioctl+0x1d20>)
 8008328:	4630      	mov	r0, r6
 800832a:	f7fc fa6f 	bl	800480c <dwt_read32bitoffsetreg>
 800832e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008332:	6060      	str	r0, [r4, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	4968      	ldr	r1, [pc, #416]	; (80084d8 <dwt_ioctl+0x1d24>)
 8008338:	4630      	mov	r0, r6
 800833a:	f7fc fa67 	bl	800480c <dwt_read32bitoffsetreg>
 800833e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008342:	60a0      	str	r0, [r4, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	4965      	ldr	r1, [pc, #404]	; (80084dc <dwt_ioctl+0x1d28>)
 8008348:	4630      	mov	r0, r6
 800834a:	f7fc fa5f 	bl	800480c <dwt_read32bitoffsetreg>
 800834e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008352:	60e0      	str	r0, [r4, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	4962      	ldr	r1, [pc, #392]	; (80084e0 <dwt_ioctl+0x1d2c>)
 8008358:	4630      	mov	r0, r6
 800835a:	f7fc fa57 	bl	800480c <dwt_read32bitoffsetreg>
 800835e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8008362:	6120      	str	r0, [r4, #16]
 8008364:	e7a1      	b.n	80082aa <dwt_ioctl+0x1af6>
 8008366:	2500      	movs	r5, #0
 8008368:	f7fe bace 	b.w	8006908 <dwt_ioctl+0x154>
 800836c:	2500      	movs	r5, #0
 800836e:	f7fe bacb 	b.w	8006908 <dwt_ioctl+0x154>
 8008372:	2500      	movs	r5, #0
 8008374:	f7fe bac8 	b.w	8006908 <dwt_ioctl+0x154>
 8008378:	2500      	movs	r5, #0
 800837a:	f7fe bac5 	b.w	8006908 <dwt_ioctl+0x154>
 800837e:	2500      	movs	r5, #0
 8008380:	f7fe bac2 	b.w	8006908 <dwt_ioctl+0x154>
 8008384:	2500      	movs	r5, #0
 8008386:	f7fe babf 	b.w	8006908 <dwt_ioctl+0x154>
 800838a:	2500      	movs	r5, #0
 800838c:	f7fe babc 	b.w	8006908 <dwt_ioctl+0x154>
 8008390:	2500      	movs	r5, #0
 8008392:	f7fe bab9 	b.w	8006908 <dwt_ioctl+0x154>
 8008396:	2500      	movs	r5, #0
 8008398:	f7fe bab6 	b.w	8006908 <dwt_ioctl+0x154>
 800839c:	2500      	movs	r5, #0
 800839e:	f7fe bab3 	b.w	8006908 <dwt_ioctl+0x154>
 80083a2:	2500      	movs	r5, #0
 80083a4:	f7fe bab0 	b.w	8006908 <dwt_ioctl+0x154>
 80083a8:	2500      	movs	r5, #0
 80083aa:	f7fe baad 	b.w	8006908 <dwt_ioctl+0x154>
 80083ae:	2500      	movs	r5, #0
 80083b0:	f7fe baaa 	b.w	8006908 <dwt_ioctl+0x154>
 80083b4:	2500      	movs	r5, #0
 80083b6:	f7fe baa7 	b.w	8006908 <dwt_ioctl+0x154>
 80083ba:	2500      	movs	r5, #0
 80083bc:	f7fe baa4 	b.w	8006908 <dwt_ioctl+0x154>
 80083c0:	2500      	movs	r5, #0
 80083c2:	f7fe baa1 	b.w	8006908 <dwt_ioctl+0x154>
 80083c6:	2500      	movs	r5, #0
 80083c8:	f7fe ba9e 	b.w	8006908 <dwt_ioctl+0x154>
 80083cc:	2500      	movs	r5, #0
 80083ce:	f7fe ba9b 	b.w	8006908 <dwt_ioctl+0x154>
 80083d2:	2500      	movs	r5, #0
 80083d4:	f7fe ba98 	b.w	8006908 <dwt_ioctl+0x154>
 80083d8:	2500      	movs	r5, #0
 80083da:	f7fe ba95 	b.w	8006908 <dwt_ioctl+0x154>
 80083de:	2500      	movs	r5, #0
 80083e0:	f7fe ba92 	b.w	8006908 <dwt_ioctl+0x154>
 80083e4:	2500      	movs	r5, #0
 80083e6:	f7fe ba8f 	b.w	8006908 <dwt_ioctl+0x154>
 80083ea:	2500      	movs	r5, #0
 80083ec:	f7fe ba8c 	b.w	8006908 <dwt_ioctl+0x154>
 80083f0:	2500      	movs	r5, #0
 80083f2:	f7fe ba89 	b.w	8006908 <dwt_ioctl+0x154>
 80083f6:	2500      	movs	r5, #0
 80083f8:	f7fe ba86 	b.w	8006908 <dwt_ioctl+0x154>
 80083fc:	2500      	movs	r5, #0
 80083fe:	f7fe ba83 	b.w	8006908 <dwt_ioctl+0x154>
 8008402:	2500      	movs	r5, #0
 8008404:	f7fe ba80 	b.w	8006908 <dwt_ioctl+0x154>
 8008408:	2500      	movs	r5, #0
 800840a:	f7fe ba7d 	b.w	8006908 <dwt_ioctl+0x154>
 800840e:	2500      	movs	r5, #0
 8008410:	f7fe ba7a 	b.w	8006908 <dwt_ioctl+0x154>
 8008414:	2500      	movs	r5, #0
 8008416:	f7fe ba77 	b.w	8006908 <dwt_ioctl+0x154>
 800841a:	2500      	movs	r5, #0
 800841c:	f7fe ba74 	b.w	8006908 <dwt_ioctl+0x154>
 8008420:	2500      	movs	r5, #0
 8008422:	f7fe ba71 	b.w	8006908 <dwt_ioctl+0x154>
 8008426:	2500      	movs	r5, #0
 8008428:	f7fe ba6e 	b.w	8006908 <dwt_ioctl+0x154>
 800842c:	2500      	movs	r5, #0
 800842e:	f7fe ba6b 	b.w	8006908 <dwt_ioctl+0x154>
 8008432:	2500      	movs	r5, #0
 8008434:	f7fe ba68 	b.w	8006908 <dwt_ioctl+0x154>
 8008438:	2500      	movs	r5, #0
 800843a:	f7fe ba65 	b.w	8006908 <dwt_ioctl+0x154>
 800843e:	2500      	movs	r5, #0
 8008440:	f7fe ba62 	b.w	8006908 <dwt_ioctl+0x154>
 8008444:	2500      	movs	r5, #0
 8008446:	f7fe ba5f 	b.w	8006908 <dwt_ioctl+0x154>
 800844a:	2500      	movs	r5, #0
 800844c:	f7fe ba5c 	b.w	8006908 <dwt_ioctl+0x154>
 8008450:	2500      	movs	r5, #0
 8008452:	f7fe ba59 	b.w	8006908 <dwt_ioctl+0x154>
 8008456:	2500      	movs	r5, #0
 8008458:	f7fe ba56 	b.w	8006908 <dwt_ioctl+0x154>
 800845c:	2500      	movs	r5, #0
 800845e:	f7fe ba53 	b.w	8006908 <dwt_ioctl+0x154>
 8008462:	2500      	movs	r5, #0
 8008464:	f7fe ba50 	b.w	8006908 <dwt_ioctl+0x154>
 8008468:	2500      	movs	r5, #0
 800846a:	f7fe ba4d 	b.w	8006908 <dwt_ioctl+0x154>
 800846e:	2500      	movs	r5, #0
 8008470:	f7fe ba4a 	b.w	8006908 <dwt_ioctl+0x154>
 8008474:	2500      	movs	r5, #0
 8008476:	f7fe ba47 	b.w	8006908 <dwt_ioctl+0x154>
 800847a:	2500      	movs	r5, #0
 800847c:	f7fe ba44 	b.w	8006908 <dwt_ioctl+0x154>
 8008480:	2500      	movs	r5, #0
 8008482:	f7fe ba41 	b.w	8006908 <dwt_ioctl+0x154>
 8008486:	bf00      	nop
 8008488:	08011ed8 	.word	0x08011ed8
 800848c:	000e0012 	.word	0x000e0012
 8008490:	000e0016 	.word	0x000e0016
 8008494:	00030060 	.word	0x00030060
 8008498:	000f0048 	.word	0x000f0048
 800849c:	001f0004 	.word	0x001f0004
 80084a0:	001f0008 	.word	0x001f0008
 80084a4:	000c0048 	.word	0x000c0048
 80084a8:	000c0028 	.word	0x000c0028
 80084ac:	000c0058 	.word	0x000c0058
 80084b0:	000c0030 	.word	0x000c0030
 80084b4:	000c0034 	.word	0x000c0034
 80084b8:	000c0038 	.word	0x000c0038
 80084bc:	000c002c 	.word	0x000c002c
 80084c0:	000d0020 	.word	0x000d0020
 80084c4:	000c0064 	.word	0x000c0064
 80084c8:	000c0068 	.word	0x000c0068
 80084cc:	000c0060 	.word	0x000c0060
 80084d0:	000d0068 	.word	0x000d0068
 80084d4:	000d0040 	.word	0x000d0040
 80084d8:	000d0044 	.word	0x000d0044
 80084dc:	000d0048 	.word	0x000d0048
 80084e0:	000d003c 	.word	0x000d003c
 80084e4:	2500      	movs	r5, #0
 80084e6:	f7fe ba0f 	b.w	8006908 <dwt_ioctl+0x154>
 80084ea:	2500      	movs	r5, #0
 80084ec:	f7fe ba0c 	b.w	8006908 <dwt_ioctl+0x154>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f7fe ba09 	b.w	8006908 <dwt_ioctl+0x154>
 80084f6:	2500      	movs	r5, #0
 80084f8:	f7fe ba06 	b.w	8006908 <dwt_ioctl+0x154>
 80084fc:	2500      	movs	r5, #0
 80084fe:	f7fe ba03 	b.w	8006908 <dwt_ioctl+0x154>
 8008502:	2500      	movs	r5, #0
 8008504:	f7fe ba00 	b.w	8006908 <dwt_ioctl+0x154>
 8008508:	2500      	movs	r5, #0
 800850a:	f7fe b9fd 	b.w	8006908 <dwt_ioctl+0x154>
 800850e:	2500      	movs	r5, #0
 8008510:	f7fe b9fa 	b.w	8006908 <dwt_ioctl+0x154>
 8008514:	2500      	movs	r5, #0
 8008516:	f7fe b9f7 	b.w	8006908 <dwt_ioctl+0x154>
 800851a:	2500      	movs	r5, #0
 800851c:	f7fe b9f4 	b.w	8006908 <dwt_ioctl+0x154>
 8008520:	2500      	movs	r5, #0
 8008522:	f7fe b9f1 	b.w	8006908 <dwt_ioctl+0x154>
 8008526:	2500      	movs	r5, #0
 8008528:	f7fe b9ee 	b.w	8006908 <dwt_ioctl+0x154>
 800852c:	2500      	movs	r5, #0
 800852e:	f7fe b9eb 	b.w	8006908 <dwt_ioctl+0x154>
 8008532:	2500      	movs	r5, #0
 8008534:	f7fe b9e8 	b.w	8006908 <dwt_ioctl+0x154>
 8008538:	2500      	movs	r5, #0
 800853a:	f7fe b9e5 	b.w	8006908 <dwt_ioctl+0x154>
 800853e:	2500      	movs	r5, #0
 8008540:	f7fe b9e2 	b.w	8006908 <dwt_ioctl+0x154>
 8008544:	2500      	movs	r5, #0
 8008546:	f7fe b9df 	b.w	8006908 <dwt_ioctl+0x154>
 800854a:	2500      	movs	r5, #0
 800854c:	f7fe b9dc 	b.w	8006908 <dwt_ioctl+0x154>
 8008550:	2500      	movs	r5, #0
 8008552:	f7fe b9d9 	b.w	8006908 <dwt_ioctl+0x154>
 8008556:	2500      	movs	r5, #0
 8008558:	f7fe b9d6 	b.w	8006908 <dwt_ioctl+0x154>
 800855c:	2500      	movs	r5, #0
 800855e:	f7fe b9d3 	b.w	8006908 <dwt_ioctl+0x154>
 8008562:	2500      	movs	r5, #0
 8008564:	f7fe b9d0 	b.w	8006908 <dwt_ioctl+0x154>
 8008568:	2500      	movs	r5, #0
 800856a:	f7fe b9cd 	b.w	8006908 <dwt_ioctl+0x154>
 800856e:	2500      	movs	r5, #0
 8008570:	f7fe b9ca 	b.w	8006908 <dwt_ioctl+0x154>
 8008574:	2500      	movs	r5, #0
 8008576:	f7fe b9c7 	b.w	8006908 <dwt_ioctl+0x154>
 800857a:	2500      	movs	r5, #0
 800857c:	f7fe b9c4 	b.w	8006908 <dwt_ioctl+0x154>
 8008580:	2500      	movs	r5, #0
 8008582:	f7fe b9c1 	b.w	8006908 <dwt_ioctl+0x154>
 8008586:	2500      	movs	r5, #0
 8008588:	f7fe b9be 	b.w	8006908 <dwt_ioctl+0x154>
 800858c:	2500      	movs	r5, #0
 800858e:	f7fe b9bb 	b.w	8006908 <dwt_ioctl+0x154>
 8008592:	2500      	movs	r5, #0
 8008594:	f7fe b9b8 	b.w	8006908 <dwt_ioctl+0x154>
 8008598:	2500      	movs	r5, #0
 800859a:	f7fe b9b5 	b.w	8006908 <dwt_ioctl+0x154>
 800859e:	2500      	movs	r5, #0
 80085a0:	f7fe b9b2 	b.w	8006908 <dwt_ioctl+0x154>
 80085a4:	2500      	movs	r5, #0
 80085a6:	f7fe b9af 	b.w	8006908 <dwt_ioctl+0x154>
 80085aa:	2500      	movs	r5, #0
 80085ac:	f7fe b9ac 	b.w	8006908 <dwt_ioctl+0x154>
 80085b0:	2500      	movs	r5, #0
 80085b2:	f7fe b9a9 	b.w	8006908 <dwt_ioctl+0x154>
 80085b6:	2500      	movs	r5, #0
 80085b8:	f7fe b9a6 	b.w	8006908 <dwt_ioctl+0x154>
 80085bc:	2500      	movs	r5, #0
 80085be:	f7fe b9a3 	b.w	8006908 <dwt_ioctl+0x154>
 80085c2:	2500      	movs	r5, #0
 80085c4:	f7fe b9a0 	b.w	8006908 <dwt_ioctl+0x154>
 80085c8:	2500      	movs	r5, #0
 80085ca:	f7fe b99d 	b.w	8006908 <dwt_ioctl+0x154>
 80085ce:	2500      	movs	r5, #0
 80085d0:	f7fe b99a 	b.w	8006908 <dwt_ioctl+0x154>
 80085d4:	2500      	movs	r5, #0
 80085d6:	f7fe b997 	b.w	8006908 <dwt_ioctl+0x154>
 80085da:	2500      	movs	r5, #0
 80085dc:	f7fe b994 	b.w	8006908 <dwt_ioctl+0x154>
 80085e0:	2500      	movs	r5, #0
 80085e2:	f7fe b991 	b.w	8006908 <dwt_ioctl+0x154>
 80085e6:	2500      	movs	r5, #0
 80085e8:	f7fe b98e 	b.w	8006908 <dwt_ioctl+0x154>
 80085ec:	2500      	movs	r5, #0
 80085ee:	f7fe b98b 	b.w	8006908 <dwt_ioctl+0x154>
 80085f2:	2500      	movs	r5, #0
 80085f4:	f7fe b988 	b.w	8006908 <dwt_ioctl+0x154>
 80085f8:	2500      	movs	r5, #0
 80085fa:	f7fe b985 	b.w	8006908 <dwt_ioctl+0x154>
 80085fe:	2500      	movs	r5, #0
 8008600:	f7fe b982 	b.w	8006908 <dwt_ioctl+0x154>
 8008604:	2500      	movs	r5, #0
 8008606:	f7fe b97f 	b.w	8006908 <dwt_ioctl+0x154>
 800860a:	2500      	movs	r5, #0
 800860c:	f7fe b97c 	b.w	8006908 <dwt_ioctl+0x154>
 8008610:	2500      	movs	r5, #0
 8008612:	f7fe b979 	b.w	8006908 <dwt_ioctl+0x154>
 8008616:	f899 3011 	ldrb.w	r3, [r9, #17]
 800861a:	1e5a      	subs	r2, r3, #1
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	2a01      	cmp	r2, #1
 8008620:	f67f a801 	bls.w	8007626 <dwt_ioctl+0xe72>
 8008624:	2202      	movs	r2, #2
 8008626:	f7fe bf88 	b.w	800753a <dwt_ioctl+0xd86>
 800862a:	2f00      	cmp	r7, #0
 800862c:	f43f ac62 	beq.w	8007ef4 <dwt_ioctl+0x1740>
 8008630:	f819 1000 	ldrb.w	r1, [r9, r0]
 8008634:	1a5b      	subs	r3, r3, r1
 8008636:	b29b      	uxth	r3, r3
 8008638:	e481      	b.n	8007f3e <dwt_ioctl+0x178a>
 800863a:	283f      	cmp	r0, #63	; 0x3f
 800863c:	d027      	beq.n	800868e <dwt_ioctl+0x1eda>
 800863e:	2e00      	cmp	r6, #0
 8008640:	f47f ac5e 	bne.w	8007f00 <dwt_ioctl+0x174c>
 8008644:	3001      	adds	r0, #1
 8008646:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800864a:	f819 1000 	ldrb.w	r1, [r9, r0]
 800864e:	440b      	add	r3, r1
 8008650:	b29b      	uxth	r3, r3
 8008652:	459c      	cmp	ip, r3
 8008654:	f43f ac71 	beq.w	8007f3a <dwt_ioctl+0x1786>
 8008658:	3d01      	subs	r5, #1
 800865a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800865e:	f43f ac32 	beq.w	8007ec6 <dwt_ioctl+0x1712>
 8008662:	459e      	cmp	lr, r3
 8008664:	f4bf ac40 	bcs.w	8007ee8 <dwt_ioctl+0x1734>
 8008668:	4598      	cmp	r8, r3
 800866a:	d9de      	bls.n	800862a <dwt_ioctl+0x1e76>
 800866c:	ebac 0103 	sub.w	r1, ip, r3
 8008670:	b209      	sxth	r1, r1
 8008672:	2900      	cmp	r1, #0
 8008674:	bfb8      	it	lt
 8008676:	4249      	neglt	r1, r1
 8008678:	4559      	cmp	r1, fp
 800867a:	f77f ac2e 	ble.w	8007eda <dwt_ioctl+0x1726>
 800867e:	2f00      	cmp	r7, #0
 8008680:	f47f ac70 	bne.w	8007f64 <dwt_ioctl+0x17b0>
 8008684:	283f      	cmp	r0, #63	; 0x3f
 8008686:	d1da      	bne.n	800863e <dwt_ioctl+0x1e8a>
 8008688:	2f00      	cmp	r7, #0
 800868a:	f47f ac70 	bne.w	8007f6e <dwt_ioctl+0x17ba>
 800868e:	2a03      	cmp	r2, #3
 8008690:	f43f ac70 	beq.w	8007f74 <dwt_ioctl+0x17c0>
 8008694:	2a02      	cmp	r2, #2
 8008696:	f43f ac3f 	beq.w	8007f18 <dwt_ioctl+0x1764>
 800869a:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800869e:	185e      	adds	r6, r3, r1
 80086a0:	4566      	cmp	r6, ip
 80086a2:	f77f ac40 	ble.w	8007f26 <dwt_ioctl+0x1772>
 80086a6:	440b      	add	r3, r1
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	3201      	adds	r2, #1
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	2700      	movs	r7, #0
 80086b0:	e426      	b.n	8007f00 <dwt_ioctl+0x174c>
 80086b2:	bf00      	nop

080086b4 <ull_initialise>:
 80086b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b8:	4605      	mov	r5, r0
 80086ba:	460e      	mov	r6, r1
 80086bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d05c      	beq.n	800877c <ull_initialise+0xc8>
 80086c2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80086c4:	2300      	movs	r3, #0
 80086c6:	73e3      	strb	r3, [r4, #15]
 80086c8:	2202      	movs	r2, #2
 80086ca:	8262      	strh	r2, [r4, #18]
 80086cc:	75a3      	strb	r3, [r4, #22]
 80086ce:	75e3      	strb	r3, [r4, #23]
 80086d0:	7423      	strb	r3, [r4, #16]
 80086d2:	72a3      	strb	r3, [r4, #10]
 80086d4:	72e3      	strb	r3, [r4, #11]
 80086d6:	2104      	movs	r1, #4
 80086d8:	4628      	mov	r0, r5
 80086da:	f7fc fd33 	bl	8005144 <_dwt_otpread>
 80086de:	4607      	mov	r7, r0
 80086e0:	2105      	movs	r1, #5
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7fc fd2e 	bl	8005144 <_dwt_otpread>
 80086e8:	4680      	mov	r8, r0
 80086ea:	210a      	movs	r1, #10
 80086ec:	4628      	mov	r0, r5
 80086ee:	f7fc fd29 	bl	8005144 <_dwt_otpread>
 80086f2:	f3c0 4004 	ubfx	r0, r0, #16, #5
 80086f6:	7220      	strb	r0, [r4, #8]
 80086f8:	b127      	cbz	r7, 8008704 <ull_initialise+0x50>
 80086fa:	f1b8 0f00 	cmp.w	r8, #0
 80086fe:	d001      	beq.n	8008704 <ull_initialise+0x50>
 8008700:	2800      	cmp	r0, #0
 8008702:	d140      	bne.n	8008786 <ull_initialise+0xd2>
 8008704:	2120      	movs	r1, #32
 8008706:	4628      	mov	r0, r5
 8008708:	f7fc fd1c 	bl	8005144 <_dwt_otpread>
 800870c:	4b2f      	ldr	r3, [pc, #188]	; (80087cc <ull_initialise+0x118>)
 800870e:	4298      	cmp	r0, r3
 8008710:	bf0c      	ite	eq
 8008712:	2301      	moveq	r3, #1
 8008714:	2300      	movne	r3, #0
 8008716:	7263      	strb	r3, [r4, #9]
 8008718:	f016 0f10 	tst.w	r6, #16
 800871c:	d137      	bne.n	800878e <ull_initialise+0xda>
 800871e:	f016 0f20 	tst.w	r6, #32
 8008722:	d13a      	bne.n	800879a <ull_initialise+0xe6>
 8008724:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008728:	d13d      	bne.n	80087a6 <ull_initialise+0xf2>
 800872a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800872e:	d141      	bne.n	80087b4 <ull_initialise+0x100>
 8008730:	7ae3      	ldrb	r3, [r4, #11]
 8008732:	b90b      	cbnz	r3, 8008738 <ull_initialise+0x84>
 8008734:	2385      	movs	r3, #133	; 0x85
 8008736:	72e3      	strb	r3, [r4, #11]
 8008738:	7aa3      	ldrb	r3, [r4, #10]
 800873a:	b90b      	cbnz	r3, 8008740 <ull_initialise+0x8c>
 800873c:	2374      	movs	r3, #116	; 0x74
 800873e:	72a3      	strb	r3, [r4, #10]
 8008740:	211f      	movs	r1, #31
 8008742:	4628      	mov	r0, r5
 8008744:	f7fc fcfe 	bl	8005144 <_dwt_otpread>
 8008748:	7360      	strb	r0, [r4, #13]
 800874a:	211e      	movs	r1, #30
 800874c:	4628      	mov	r0, r5
 800874e:	f7fc fcf9 	bl	8005144 <_dwt_otpread>
 8008752:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8008756:	bf12      	itee	ne
 8008758:	73a0      	strbne	r0, [r4, #14]
 800875a:	232e      	moveq	r3, #46	; 0x2e
 800875c:	73a3      	strbeq	r3, [r4, #14]
 800875e:	7ba3      	ldrb	r3, [r4, #14]
 8008760:	2200      	movs	r2, #0
 8008762:	491b      	ldr	r1, [pc, #108]	; (80087d0 <ull_initialise+0x11c>)
 8008764:	4628      	mov	r0, r5
 8008766:	f7fc fc40 	bl	8004fea <dwt_write8bitoffsetreg>
 800876a:	2135      	movs	r1, #53	; 0x35
 800876c:	4628      	mov	r0, r5
 800876e:	f7fc fce9 	bl	8005144 <_dwt_otpread>
 8008772:	4603      	mov	r3, r0
 8008774:	bb20      	cbnz	r0, 80087c0 <ull_initialise+0x10c>
 8008776:	2000      	movs	r0, #0
 8008778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800877c:	202c      	movs	r0, #44	; 0x2c
 800877e:	f009 f983 	bl	8011a88 <malloc>
 8008782:	6528      	str	r0, [r5, #80]	; 0x50
 8008784:	e79d      	b.n	80086c2 <ull_initialise+0xe>
 8008786:	4628      	mov	r0, r5
 8008788:	f7fd fcca 	bl	8006120 <_dwt_prog_ldo_and_bias_tune>
 800878c:	e7ba      	b.n	8008704 <ull_initialise+0x50>
 800878e:	2106      	movs	r1, #6
 8008790:	4628      	mov	r0, r5
 8008792:	f7fc fcd7 	bl	8005144 <_dwt_otpread>
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	e7c1      	b.n	800871e <ull_initialise+0x6a>
 800879a:	2107      	movs	r1, #7
 800879c:	4628      	mov	r0, r5
 800879e:	f7fc fcd1 	bl	8005144 <_dwt_otpread>
 80087a2:	6060      	str	r0, [r4, #4]
 80087a4:	e7be      	b.n	8008724 <ull_initialise+0x70>
 80087a6:	2108      	movs	r1, #8
 80087a8:	4628      	mov	r0, r5
 80087aa:	f7fc fccb 	bl	8005144 <_dwt_otpread>
 80087ae:	0c00      	lsrs	r0, r0, #16
 80087b0:	72a0      	strb	r0, [r4, #10]
 80087b2:	e7ba      	b.n	800872a <ull_initialise+0x76>
 80087b4:	2109      	movs	r1, #9
 80087b6:	4628      	mov	r0, r5
 80087b8:	f7fc fcc4 	bl	8005144 <_dwt_otpread>
 80087bc:	72e0      	strb	r0, [r4, #11]
 80087be:	e7b7      	b.n	8008730 <ull_initialise+0x7c>
 80087c0:	2200      	movs	r2, #0
 80087c2:	4904      	ldr	r1, [pc, #16]	; (80087d4 <ull_initialise+0x120>)
 80087c4:	4628      	mov	r0, r5
 80087c6:	f7fc fd63 	bl	8005290 <dwt_write32bitoffsetreg>
 80087ca:	e7d4      	b.n	8008776 <ull_initialise+0xc2>
 80087cc:	10000240 	.word	0x10000240
 80087d0:	00090014 	.word	0x00090014
 80087d4:	00090004 	.word	0x00090004

080087d8 <_init>:
 80087d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087da:	b085      	sub	sp, #20
 80087dc:	4604      	mov	r4, r0
 80087de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80087e0:	6819      	ldr	r1, [r3, #0]
 80087e2:	f7ff ff67 	bl	80086b4 <ull_initialise>
 80087e6:	4606      	mov	r6, r0
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	4798      	blx	r3
 80087ee:	ab03      	add	r3, sp, #12
 80087f0:	2200      	movs	r2, #0
 80087f2:	4611      	mov	r1, r2
 80087f4:	4620      	mov	r0, r4
 80087f6:	f7fd ffdd 	bl	80067b4 <dwt_ioctl>
 80087fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	4620      	mov	r0, r4
 8008802:	f7fd fdad 	bl	8006360 <ull_configure>
 8008806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	6859      	ldr	r1, [r3, #4]
 800880c:	4620      	mov	r0, r4
 800880e:	f7fd fb47 	bl	8005ea0 <ull_configuretxrf>
 8008812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	89db      	ldrh	r3, [r3, #14]
 8008818:	2200      	movs	r2, #0
 800881a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800881e:	4620      	mov	r0, r4
 8008820:	f7fc fc35 	bl	800508e <dwt_write16bitoffsetreg>
 8008824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	899b      	ldrh	r3, [r3, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	4952      	ldr	r1, [pc, #328]	; (8008978 <_init+0x1a0>)
 800882e:	4620      	mov	r0, r4
 8008830:	f7fc fc2d 	bl	800508e <dwt_write16bitoffsetreg>
 8008834:	2100      	movs	r1, #0
 8008836:	4620      	mov	r0, r4
 8008838:	f7fc fec6 	bl	80055c8 <ull_setrxaftertxdelay>
 800883c:	2500      	movs	r5, #0
 800883e:	9500      	str	r5, [sp, #0]
 8008840:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8008844:	462a      	mov	r2, r5
 8008846:	2110      	movs	r1, #16
 8008848:	4620      	mov	r0, r4
 800884a:	f7fd fc4f 	bl	80060ec <dwt_modify16bitoffsetreg>
 800884e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	895a      	ldrh	r2, [r3, #10]
 8008854:	8919      	ldrh	r1, [r3, #8]
 8008856:	4620      	mov	r0, r4
 8008858:	f7fd fbb2 	bl	8005fc0 <ull_configureframefilter>
 800885c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008860:	8a1b      	ldrh	r3, [r3, #16]
 8008862:	2202      	movs	r2, #2
 8008864:	210c      	movs	r1, #12
 8008866:	4620      	mov	r0, r4
 8008868:	f7fc fc11 	bl	800508e <dwt_write16bitoffsetreg>
 800886c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	8a5b      	ldrh	r3, [r3, #18]
 8008872:	462a      	mov	r2, r5
 8008874:	210c      	movs	r1, #12
 8008876:	4620      	mov	r0, r4
 8008878:	f7fc fc09 	bl	800508e <dwt_write16bitoffsetreg>
 800887c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800887e:	7a19      	ldrb	r1, [r3, #8]
 8008880:	4620      	mov	r0, r4
 8008882:	f7fd fc69 	bl	8006158 <ull_setleds>
 8008886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008888:	68d9      	ldr	r1, [r3, #12]
 800888a:	4620      	mov	r0, r4
 800888c:	f7fc feb2 	bl	80055f4 <ull_setlnapamode>
 8008890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008892:	7e0b      	ldrb	r3, [r1, #24]
 8008894:	694a      	ldr	r2, [r1, #20]
 8008896:	6909      	ldr	r1, [r1, #16]
 8008898:	4620      	mov	r0, r4
 800889a:	f7fd f9e9 	bl	8005c70 <ull_setinterrupt>
 800889e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088a0:	7f9a      	ldrb	r2, [r3, #30]
 80088a2:	8b99      	ldrh	r1, [r3, #28]
 80088a4:	4620      	mov	r0, r4
 80088a6:	f7fc fcb7 	bl	8005218 <ull_configuresleep>
 80088aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80088ac:	7b93      	ldrb	r3, [r2, #14]
 80088ae:	2b2e      	cmp	r3, #46	; 0x2e
 80088b0:	d005      	beq.n	80088be <_init+0xe6>
 80088b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088b8:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 80088bc:	d00a      	beq.n	80088d4 <_init+0xfc>
 80088be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088c8:	7393      	strb	r3, [r2, #14]
 80088ca:	2200      	movs	r2, #0
 80088cc:	492b      	ldr	r1, [pc, #172]	; (800897c <_init+0x1a4>)
 80088ce:	4620      	mov	r0, r4
 80088d0:	f7fc fb8b 	bl	8004fea <dwt_write8bitoffsetreg>
 80088d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088d6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80088da:	4620      	mov	r0, r4
 80088dc:	f7fd fa68 	bl	8005db0 <ull_configciadiag>
 80088e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e2:	6a19      	ldr	r1, [r3, #32]
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7fc fea7 	bl	8005638 <ull_configurestskey>
 80088ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80088ee:	4620      	mov	r0, r4
 80088f0:	f7fc fec6 	bl	8005680 <ull_configurestsiv>
 80088f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80088fa:	bba3      	cbnz	r3, 8008966 <_init+0x18e>
 80088fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088fe:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8008902:	4620      	mov	r0, r4
 8008904:	f7fc fbb0 	bl	8005068 <ull_configeventcounters>
 8008908:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800890c:	2d00      	cmp	r5, #0
 800890e:	db27      	blt.n	8008960 <_init+0x188>
 8008910:	2301      	movs	r3, #1
 8008912:	fa03 f505 	lsl.w	r5, r3, r5
 8008916:	b2af      	uxth	r7, r5
 8008918:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 800891c:	4639      	mov	r1, r7
 800891e:	4620      	mov	r0, r4
 8008920:	f7fd f988 	bl	8005c34 <ull_setgpiomode>
 8008924:	f10d 030a 	add.w	r3, sp, #10
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	2302      	movs	r3, #2
 800892c:	2200      	movs	r2, #0
 800892e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008932:	4620      	mov	r0, r4
 8008934:	f7fb ff60 	bl	80047f8 <dwt_readfromdevice>
 8008938:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800893c:	ea23 0305 	bic.w	r3, r3, r5
 8008940:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008944:	2200      	movs	r2, #0
 8008946:	490e      	ldr	r1, [pc, #56]	; (8008980 <_init+0x1a8>)
 8008948:	4620      	mov	r0, r4
 800894a:	f7fc fba0 	bl	800508e <dwt_write16bitoffsetreg>
 800894e:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8008952:	fab2 f282 	clz	r2, r2
 8008956:	0952      	lsrs	r2, r2, #5
 8008958:	4639      	mov	r1, r7
 800895a:	4620      	mov	r0, r4
 800895c:	f7fd fc7a 	bl	8006254 <ull_setgpiovalue>
 8008960:	4630      	mov	r0, r6
 8008962:	b005      	add	sp, #20
 8008964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008966:	2301      	movs	r3, #1
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	23ff      	movs	r3, #255	; 0xff
 800896c:	2200      	movs	r2, #0
 800896e:	4905      	ldr	r1, [pc, #20]	; (8008984 <_init+0x1ac>)
 8008970:	4620      	mov	r0, r4
 8008972:	f7fd fa09 	bl	8005d88 <dwt_modify8bitoffsetreg>
 8008976:	e7c1      	b.n	80088fc <_init+0x124>
 8008978:	00010004 	.word	0x00010004
 800897c:	00090014 	.word	0x00090014
 8008980:	00050008 	.word	0x00050008
 8008984:	00020004 	.word	0x00020004

08008988 <dwt_dbg_fn>:
 8008988:	2998      	cmp	r1, #152	; 0x98
 800898a:	4802      	ldr	r0, [pc, #8]	; (8008994 <dwt_dbg_fn+0xc>)
 800898c:	bf18      	it	ne
 800898e:	2000      	movne	r0, #0
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	08011fe0 	.word	0x08011fe0

08008998 <_deinit>:
 8008998:	4770      	bx	lr

0800899a <dwt_xfer3xxx>:
 800899a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	4605      	mov	r5, r0
 80089a2:	460f      	mov	r7, r1
 80089a4:	461e      	mov	r6, r3
 80089a6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80089aa:	1e59      	subs	r1, r3, #1
 80089ac:	b289      	uxth	r1, r1
 80089ae:	2901      	cmp	r1, #1
 80089b0:	d91c      	bls.n	80089ec <dwt_xfer3xxx+0x52>
 80089b2:	19d0      	adds	r0, r2, r7
 80089b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80089b8:	443a      	add	r2, r7
 80089ba:	f3c2 4104 	ubfx	r1, r2, #16, #5
 80089be:	0082      	lsls	r2, r0, #2
 80089c0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80089c4:	ea43 0102 	orr.w	r1, r3, r2
 80089c8:	0a09      	lsrs	r1, r1, #8
 80089ca:	f88d 100c 	strb.w	r1, [sp, #12]
 80089ce:	b920      	cbnz	r0, 80089da <dwt_xfer3xxx+0x40>
 80089d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d4:	d018      	beq.n	8008a08 <dwt_xfer3xxx+0x6e>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d037      	beq.n	8008a4a <dwt_xfer3xxx+0xb0>
 80089da:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80089de:	f88d 100c 	strb.w	r1, [sp, #12]
 80089e2:	431a      	orrs	r2, r3
 80089e4:	f88d 200d 	strb.w	r2, [sp, #13]
 80089e8:	2402      	movs	r4, #2
 80089ea:	e005      	b.n	80089f8 <dwt_xfer3xxx+0x5e>
 80089ec:	007a      	lsls	r2, r7, #1
 80089ee:	f062 027e 	orn	r2, r2, #126	; 0x7e
 80089f2:	f88d 200c 	strb.w	r2, [sp, #12]
 80089f6:	2401      	movs	r4, #1
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d006      	beq.n	8008a0a <dwt_xfer3xxx+0x70>
 80089fc:	d326      	bcc.n	8008a4c <dwt_xfer3xxx+0xb2>
 80089fe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d901      	bls.n	8008a0a <dwt_xfer3xxx+0x70>
 8008a06:	e7fe      	b.n	8008a06 <dwt_xfer3xxx+0x6c>
 8008a08:	2401      	movs	r4, #1
 8008a0a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008a0c:	7d1b      	ldrb	r3, [r3, #20]
 8008a0e:	b94b      	cbnz	r3, 8008a24 <dwt_xfer3xxx+0x8a>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	685d      	ldr	r5, [r3, #4]
 8008a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a16:	4632      	mov	r2, r6
 8008a18:	a903      	add	r1, sp, #12
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	47a8      	blx	r5
 8008a1e:	b004      	add	sp, #16
 8008a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a24:	2200      	movs	r2, #0
 8008a26:	4621      	mov	r1, r4
 8008a28:	a803      	add	r0, sp, #12
 8008a2a:	f7fb fdfd 	bl	8004628 <dwt_generatecrc8>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	4631      	mov	r1, r6
 8008a32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a34:	f7fb fdf8 	bl	8004628 <dwt_generatecrc8>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	9000      	str	r0, [sp, #0]
 8008a3c:	689d      	ldr	r5, [r3, #8]
 8008a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a40:	4632      	mov	r2, r6
 8008a42:	a903      	add	r1, sp, #12
 8008a44:	4620      	mov	r0, r4
 8008a46:	47a8      	blx	r5
 8008a48:	e7e9      	b.n	8008a1e <dwt_xfer3xxx+0x84>
 8008a4a:	2401      	movs	r4, #1
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	f8d3 8000 	ldr.w	r8, [r3]
 8008a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a54:	4632      	mov	r2, r6
 8008a56:	a903      	add	r1, sp, #12
 8008a58:	4620      	mov	r0, r4
 8008a5a:	47c0      	blx	r8
 8008a5c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008a5e:	7d1b      	ldrb	r3, [r3, #20]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d1dc      	bne.n	8008a1e <dwt_xfer3xxx+0x84>
 8008a64:	2f18      	cmp	r7, #24
 8008a66:	d0da      	beq.n	8008a1e <dwt_xfer3xxx+0x84>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	a803      	add	r0, sp, #12
 8008a6e:	f7fb fddb 	bl	8004628 <dwt_generatecrc8>
 8008a72:	4602      	mov	r2, r0
 8008a74:	4631      	mov	r1, r6
 8008a76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a78:	f7fb fdd6 	bl	8004628 <dwt_generatecrc8>
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2118      	movs	r1, #24
 8008a82:	4628      	mov	r0, r5
 8008a84:	f000 f839 	bl	8008afa <dwt_read8bitoffsetreg>
 8008a88:	4284      	cmp	r4, r0
 8008a8a:	d0c8      	beq.n	8008a1e <dwt_xfer3xxx+0x84>
 8008a8c:	68eb      	ldr	r3, [r5, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0c5      	beq.n	8008a1e <dwt_xfer3xxx+0x84>
 8008a92:	4798      	blx	r3
 8008a94:	e7c3      	b.n	8008a1e <dwt_xfer3xxx+0x84>

08008a96 <dwt_readfromdevice>:
 8008a96:	b510      	push	{r4, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	2400      	movs	r4, #0
 8008a9c:	9401      	str	r4, [sp, #4]
 8008a9e:	9c04      	ldr	r4, [sp, #16]
 8008aa0:	9400      	str	r4, [sp, #0]
 8008aa2:	f7ff ff7a 	bl	800899a <dwt_xfer3xxx>
 8008aa6:	b002      	add	sp, #8
 8008aa8:	bd10      	pop	{r4, pc}

08008aaa <dwt_read32bitoffsetreg>:
 8008aaa:	b500      	push	{lr}
 8008aac:	b085      	sub	sp, #20
 8008aae:	ab03      	add	r3, sp, #12
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	b292      	uxth	r2, r2
 8008ab6:	f7ff ffee 	bl	8008a96 <dwt_readfromdevice>
 8008aba:	f10d 030f 	add.w	r3, sp, #15
 8008abe:	f10d 010b 	add.w	r1, sp, #11
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	f813 2901 	ldrb.w	r2, [r3], #-1
 8008ac8:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8008acc:	428b      	cmp	r3, r1
 8008ace:	d1f9      	bne.n	8008ac4 <dwt_read32bitoffsetreg+0x1a>
 8008ad0:	b005      	add	sp, #20
 8008ad2:	f85d fb04 	ldr.w	pc, [sp], #4

08008ad6 <dwt_read16bitoffsetreg>:
 8008ad6:	b500      	push	{lr}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	ab03      	add	r3, sp, #12
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2302      	movs	r3, #2
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	f7ff ffd8 	bl	8008a96 <dwt_readfromdevice>
 8008ae6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008aea:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8008aee:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8008af2:	b280      	uxth	r0, r0
 8008af4:	b005      	add	sp, #20
 8008af6:	f85d fb04 	ldr.w	pc, [sp], #4

08008afa <dwt_read8bitoffsetreg>:
 8008afa:	b500      	push	{lr}
 8008afc:	b085      	sub	sp, #20
 8008afe:	f10d 030f 	add.w	r3, sp, #15
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	2301      	movs	r3, #1
 8008b06:	b292      	uxth	r2, r2
 8008b08:	f7ff ffc5 	bl	8008a96 <dwt_readfromdevice>
 8008b0c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8008b10:	b005      	add	sp, #20
 8008b12:	f85d fb04 	ldr.w	pc, [sp], #4

08008b16 <ull_readdiagnostics>:
 8008b16:	b530      	push	{r4, r5, lr}
 8008b18:	b0bd      	sub	sp, #244	; 0xf4
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008b20:	7b9a      	ldrb	r2, [r3, #14]
 8008b22:	2a01      	cmp	r2, #1
 8008b24:	d01c      	beq.n	8008b60 <ull_readdiagnostics+0x4a>
 8008b26:	2a03      	cmp	r2, #3
 8008b28:	f040 81e8 	bne.w	8008efc <ull_readdiagnostics+0x3e6>
 8008b2c:	7d9b      	ldrb	r3, [r3, #22]
 8008b2e:	f013 0f08 	tst.w	r3, #8
 8008b32:	d10c      	bne.n	8008b4e <ull_readdiagnostics+0x38>
 8008b34:	f013 0f04 	tst.w	r3, #4
 8008b38:	ab02      	add	r3, sp, #8
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	bf14      	ite	ne
 8008b3e:	2338      	movne	r3, #56	; 0x38
 8008b40:	2320      	moveq	r3, #32
 8008b42:	2200      	movs	r2, #0
 8008b44:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008b48:	f7ff ffa5 	bl	8008a96 <dwt_readfromdevice>
 8008b4c:	e019      	b.n	8008b82 <ull_readdiagnostics+0x6c>
 8008b4e:	ab02      	add	r3, sp, #8
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	23e8      	movs	r3, #232	; 0xe8
 8008b54:	2200      	movs	r2, #0
 8008b56:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008b5a:	f7ff ff9c 	bl	8008a96 <dwt_readfromdevice>
 8008b5e:	e010      	b.n	8008b82 <ull_readdiagnostics+0x6c>
 8008b60:	7d9b      	ldrb	r3, [r3, #22]
 8008b62:	f013 0f08 	tst.w	r3, #8
 8008b66:	f040 81c0 	bne.w	8008eea <ull_readdiagnostics+0x3d4>
 8008b6a:	f013 0f04 	tst.w	r3, #4
 8008b6e:	ab02      	add	r3, sp, #8
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	bf14      	ite	ne
 8008b74:	2338      	movne	r3, #56	; 0x38
 8008b76:	2320      	moveq	r3, #32
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8008b7e:	f7ff ff8a 	bl	8008a96 <dwt_readfromdevice>
 8008b82:	f10d 0217 	add.w	r2, sp, #23
 8008b86:	f104 031a 	add.w	r3, r4, #26
 8008b8a:	f104 0020 	add.w	r0, r4, #32
 8008b8e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008b92:	f803 1b01 	strb.w	r1, [r3], #1
 8008b96:	4283      	cmp	r3, r0
 8008b98:	d1f9      	bne.n	8008b8e <ull_readdiagnostics+0x78>
 8008b9a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8008b9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008ba2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ba6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008baa:	8463      	strh	r3, [r4, #34]	; 0x22
 8008bac:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008bb0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8008bb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008bbc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008bc0:	bf1c      	itt	ne
 8008bc2:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8008bc6:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8008bca:	8423      	strh	r3, [r4, #32]
 8008bcc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8008bd0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bdc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008bde:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008be0:	7d9b      	ldrb	r3, [r3, #22]
 8008be2:	f013 0f02 	tst.w	r3, #2
 8008be6:	f040 817e 	bne.w	8008ee6 <ull_readdiagnostics+0x3d0>
 8008bea:	aa0a      	add	r2, sp, #40	; 0x28
 8008bec:	1e63      	subs	r3, r4, #1
 8008bee:	1d20      	adds	r0, r4, #4
 8008bf0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008bf4:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008bf8:	79d1      	ldrb	r1, [r2, #7]
 8008bfa:	7219      	strb	r1, [r3, #8]
 8008bfc:	7bd1      	ldrb	r1, [r2, #15]
 8008bfe:	7459      	strb	r1, [r3, #17]
 8008c00:	4283      	cmp	r3, r0
 8008c02:	d1f5      	bne.n	8008bf0 <ull_readdiagnostics+0xda>
 8008c04:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008c08:	7163      	strb	r3, [r4, #5]
 8008c0a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8008c0e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8008c12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c16:	80e3      	strh	r3, [r4, #6]
 8008c18:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8008c1c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8008c20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008c24:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008c28:	f8a4 300d 	strh.w	r3, [r4, #13]
 8008c2c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8008c30:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8008c34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c38:	f8a4 300f 	strh.w	r3, [r4, #15]
 8008c3c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8008c40:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8008c44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008c48:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008c4c:	82e3      	strh	r3, [r4, #22]
 8008c4e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8008c52:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8008c56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c5a:	8323      	strh	r3, [r4, #24]
 8008c5c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008c5e:	7d9b      	ldrb	r3, [r3, #22]
 8008c60:	f013 0f04 	tst.w	r3, #4
 8008c64:	f040 813f 	bne.w	8008ee6 <ull_readdiagnostics+0x3d0>
 8008c68:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8008c6c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008c76:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8008c80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c84:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008c88:	6263      	str	r3, [r4, #36]	; 0x24
 8008c8a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8008c8e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008c98:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8008ca2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008caa:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cac:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8008cb0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8008cb4:	041b      	lsls	r3, r3, #16
 8008cb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008cba:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8008cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cce:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8008cd2:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8008cd6:	041b      	lsls	r3, r3, #16
 8008cd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008cdc:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8008ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008cee:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf0:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8008cf4:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8008cf8:	041b      	lsls	r3, r3, #16
 8008cfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008cfe:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008d02:	4313      	orrs	r3, r2
 8008d04:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8008d08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d10:	6363      	str	r3, [r4, #52]	; 0x34
 8008d12:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8008d16:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d20:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8008d24:	4313      	orrs	r3, r2
 8008d26:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8008d2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d2e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d32:	63a3      	str	r3, [r4, #56]	; 0x38
 8008d34:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8008d38:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008d3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d40:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8008d42:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8008d46:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8008d4a:	041b      	lsls	r3, r3, #16
 8008d4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d50:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8008d54:	4313      	orrs	r3, r2
 8008d56:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8008d5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d5e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008d62:	6423      	str	r3, [r4, #64]	; 0x40
 8008d64:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8008d68:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8008d6c:	041b      	lsls	r3, r3, #16
 8008d6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d72:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8008d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d84:	6463      	str	r3, [r4, #68]	; 0x44
 8008d86:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8008d8a:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8008d8e:	041b      	lsls	r3, r3, #16
 8008d90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d94:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8008d9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008da2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008da6:	64a3      	str	r3, [r4, #72]	; 0x48
 8008da8:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8008dac:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8008db0:	041b      	lsls	r3, r3, #16
 8008db2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008db6:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8008dc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008dc4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008dc8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008dca:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8008dce:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008dd8:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8008de2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008de6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008dea:	6523      	str	r3, [r4, #80]	; 0x50
 8008dec:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8008df0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8008df4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008df8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008dfc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8008e00:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8008e04:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8008e08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e10:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8008e14:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8008e18:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8008e1c:	041b      	lsls	r3, r3, #16
 8008e1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e22:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8008e2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e30:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e34:	65a3      	str	r3, [r4, #88]	; 0x58
 8008e36:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8008e3a:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8008e3e:	041b      	lsls	r3, r3, #16
 8008e40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e44:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8008e4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e56:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008e58:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8008e5c:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8008e60:	041b      	lsls	r3, r3, #16
 8008e62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e66:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8008e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e78:	6623      	str	r3, [r4, #96]	; 0x60
 8008e7a:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8008e7e:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e88:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8008e92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e96:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e9a:	6663      	str	r3, [r4, #100]	; 0x64
 8008e9c:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8008ea0:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8008ea4:	041b      	lsls	r3, r3, #16
 8008ea6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008eaa:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8008eb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008eb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ebc:	66a3      	str	r3, [r4, #104]	; 0x68
 8008ebe:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8008ec2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8008ec6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008eca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ece:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8008ed2:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8008ed6:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8008eda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ee2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8008ee6:	b03d      	add	sp, #244	; 0xf4
 8008ee8:	bd30      	pop	{r4, r5, pc}
 8008eea:	ab02      	add	r3, sp, #8
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	23e8      	movs	r3, #232	; 0xe8
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8008ef6:	f7ff fdce 	bl	8008a96 <dwt_readfromdevice>
 8008efa:	e642      	b.n	8008b82 <ull_readdiagnostics+0x6c>
 8008efc:	7d9b      	ldrb	r3, [r3, #22]
 8008efe:	f013 0f01 	tst.w	r3, #1
 8008f02:	f000 81b3 	beq.w	800926c <ull_readdiagnostics+0x756>
 8008f06:	ab02      	add	r3, sp, #8
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	236c      	movs	r3, #108	; 0x6c
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8008f12:	f7ff fdc0 	bl	8008a96 <dwt_readfromdevice>
 8008f16:	ab1d      	add	r3, sp, #116	; 0x74
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	236c      	movs	r3, #108	; 0x6c
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8008f22:	4628      	mov	r0, r5
 8008f24:	f7ff fdb7 	bl	8008a96 <dwt_readfromdevice>
 8008f28:	aa02      	add	r2, sp, #8
 8008f2a:	1e63      	subs	r3, r4, #1
 8008f2c:	1d20      	adds	r0, r4, #4
 8008f2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f32:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008f36:	79d1      	ldrb	r1, [r2, #7]
 8008f38:	7219      	strb	r1, [r3, #8]
 8008f3a:	7bd1      	ldrb	r1, [r2, #15]
 8008f3c:	7459      	strb	r1, [r3, #17]
 8008f3e:	7dd1      	ldrb	r1, [r2, #23]
 8008f40:	7699      	strb	r1, [r3, #26]
 8008f42:	4283      	cmp	r3, r0
 8008f44:	d1f3      	bne.n	8008f2e <ull_readdiagnostics+0x418>
 8008f46:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8008f4a:	77e3      	strb	r3, [r4, #31]
 8008f4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008f50:	7163      	strb	r3, [r4, #5]
 8008f52:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8008f56:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f5e:	80e3      	strh	r3, [r4, #6]
 8008f60:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008f64:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8008f68:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8008f6c:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8008f70:	f8a4 200d 	strh.w	r2, [r4, #13]
 8008f74:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8008f78:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008f7c:	f8a4 200f 	strh.w	r2, [r4, #15]
 8008f80:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008f84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f88:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008f8c:	82e3      	strh	r3, [r4, #22]
 8008f8e:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8008f92:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8008f96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f9a:	8323      	strh	r3, [r4, #24]
 8008f9c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8008fa0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8008fa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008fac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008fb0:	bf1c      	itt	ne
 8008fb2:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8008fb6:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8008fba:	8423      	strh	r3, [r4, #32]
 8008fbc:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8008fc0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8008fc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fcc:	8463      	strh	r3, [r4, #34]	; 0x22
 8008fce:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8008fd2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8008fd6:	041b      	lsls	r3, r3, #16
 8008fd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008fdc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8008fe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fea:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008fee:	6263      	str	r3, [r4, #36]	; 0x24
 8008ff0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008ff2:	7d9b      	ldrb	r3, [r3, #22]
 8008ff4:	f013 0f01 	tst.w	r3, #1
 8008ff8:	f43f af75 	beq.w	8008ee6 <ull_readdiagnostics+0x3d0>
 8008ffc:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8009000:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8009004:	041b      	lsls	r3, r3, #16
 8009006:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800900a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800900e:	4313      	orrs	r3, r2
 8009010:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8009014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800901c:	62a3      	str	r3, [r4, #40]	; 0x28
 800901e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8009022:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009026:	041b      	lsls	r3, r3, #16
 8009028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800902c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8009030:	4313      	orrs	r3, r2
 8009032:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8009036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800903a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800903e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009040:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8009044:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8009048:	041b      	lsls	r3, r3, #16
 800904a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800904e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8009052:	4313      	orrs	r3, r2
 8009054:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8009058:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800905c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009060:	6323      	str	r3, [r4, #48]	; 0x30
 8009062:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8009066:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800906a:	041b      	lsls	r3, r3, #16
 800906c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009070:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8009074:	4313      	orrs	r3, r2
 8009076:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800907a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800907e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009082:	6363      	str	r3, [r4, #52]	; 0x34
 8009084:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8009088:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800908c:	041b      	lsls	r3, r3, #16
 800908e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009092:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8009096:	4313      	orrs	r3, r2
 8009098:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800909c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80090a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80090a6:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80090aa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80090ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090b2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80090b4:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80090b8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80090bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80090c6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80090ca:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80090ce:	041b      	lsls	r3, r3, #16
 80090d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80090d8:	4313      	orrs	r3, r2
 80090da:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80090de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80090e6:	6423      	str	r3, [r4, #64]	; 0x40
 80090e8:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80090ec:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090f6:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8009100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009108:	6463      	str	r3, [r4, #68]	; 0x44
 800910a:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800910e:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8009112:	041b      	lsls	r3, r3, #16
 8009114:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009118:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800911c:	4313      	orrs	r3, r2
 800911e:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8009122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009126:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800912a:	64a3      	str	r3, [r4, #72]	; 0x48
 800912c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8009130:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800913a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800913e:	4313      	orrs	r3, r2
 8009140:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8009144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009148:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800914c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800914e:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8009152:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8009156:	041b      	lsls	r3, r3, #16
 8009158:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800915c:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8009160:	4313      	orrs	r3, r2
 8009162:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8009166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800916a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800916e:	6523      	str	r3, [r4, #80]	; 0x50
 8009170:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8009174:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8009178:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800917c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009180:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8009184:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8009188:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800918c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009194:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8009198:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800919c:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 80091a0:	041b      	lsls	r3, r3, #16
 80091a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091a6:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 80091b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091b4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80091ba:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 80091be:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 80091c2:	041b      	lsls	r3, r3, #16
 80091c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091c8:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80091d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80091dc:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80091e0:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80091e4:	041b      	lsls	r3, r3, #16
 80091e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091ea:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80091f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091fc:	6623      	str	r3, [r4, #96]	; 0x60
 80091fe:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8009202:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800920c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8009210:	4313      	orrs	r3, r2
 8009212:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8009216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800921a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800921e:	6663      	str	r3, [r4, #100]	; 0x64
 8009220:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8009224:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8009228:	041b      	lsls	r3, r3, #16
 800922a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800922e:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8009232:	4313      	orrs	r3, r2
 8009234:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8009238:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800923c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009240:	66a3      	str	r3, [r4, #104]	; 0x68
 8009242:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8009246:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800924a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800924e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009252:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8009256:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800925a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800925e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009266:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800926a:	e63c      	b.n	8008ee6 <ull_readdiagnostics+0x3d0>
 800926c:	ab02      	add	r3, sp, #8
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2328      	movs	r3, #40	; 0x28
 8009272:	2200      	movs	r2, #0
 8009274:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8009278:	f7ff fc0d 	bl	8008a96 <dwt_readfromdevice>
 800927c:	e654      	b.n	8008f28 <ull_readdiagnostics+0x412>
	...

08009280 <ull_readrxtimestamp>:
 8009280:	b500      	push	{lr}
 8009282:	b083      	sub	sp, #12
 8009284:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009286:	7b9b      	ldrb	r3, [r3, #14]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d00b      	beq.n	80092a4 <ull_readrxtimestamp+0x24>
 800928c:	2b03      	cmp	r3, #3
 800928e:	d110      	bne.n	80092b2 <ull_readrxtimestamp+0x32>
 8009290:	9100      	str	r1, [sp, #0]
 8009292:	2305      	movs	r3, #5
 8009294:	2204      	movs	r2, #4
 8009296:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800929a:	f7ff fbfc 	bl	8008a96 <dwt_readfromdevice>
 800929e:	b003      	add	sp, #12
 80092a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80092a4:	9100      	str	r1, [sp, #0]
 80092a6:	2305      	movs	r3, #5
 80092a8:	2200      	movs	r2, #0
 80092aa:	4905      	ldr	r1, [pc, #20]	; (80092c0 <ull_readrxtimestamp+0x40>)
 80092ac:	f7ff fbf3 	bl	8008a96 <dwt_readfromdevice>
 80092b0:	e7f5      	b.n	800929e <ull_readrxtimestamp+0x1e>
 80092b2:	9100      	str	r1, [sp, #0]
 80092b4:	2305      	movs	r3, #5
 80092b6:	2200      	movs	r2, #0
 80092b8:	2160      	movs	r1, #96	; 0x60
 80092ba:	f7ff fbec 	bl	8008a96 <dwt_readfromdevice>
 80092be:	e7ee      	b.n	800929e <ull_readrxtimestamp+0x1e>
 80092c0:	00180004 	.word	0x00180004

080092c4 <dwt_writetodevice>:
 80092c4:	b510      	push	{r4, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80092cc:	9401      	str	r4, [sp, #4]
 80092ce:	9c04      	ldr	r4, [sp, #16]
 80092d0:	9400      	str	r4, [sp, #0]
 80092d2:	f7ff fb62 	bl	800899a <dwt_xfer3xxx>
 80092d6:	b002      	add	sp, #8
 80092d8:	bd10      	pop	{r4, pc}

080092da <dwt_write16bitoffsetreg>:
 80092da:	b500      	push	{lr}
 80092dc:	b085      	sub	sp, #20
 80092de:	f88d 300c 	strb.w	r3, [sp, #12]
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	f88d 300d 	strb.w	r3, [sp, #13]
 80092e8:	ab03      	add	r3, sp, #12
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	2302      	movs	r3, #2
 80092ee:	b292      	uxth	r2, r2
 80092f0:	f7ff ffe8 	bl	80092c4 <dwt_writetodevice>
 80092f4:	b005      	add	sp, #20
 80092f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080092fc <ull_force_clocks>:
 80092fc:	b508      	push	{r3, lr}
 80092fe:	2901      	cmp	r1, #1
 8009300:	d002      	beq.n	8009308 <ull_force_clocks+0xc>
 8009302:	2905      	cmp	r1, #5
 8009304:	d007      	beq.n	8009316 <ull_force_clocks+0x1a>
 8009306:	bd08      	pop	{r3, pc}
 8009308:	f641 0322 	movw	r3, #6178	; 0x1822
 800930c:	2200      	movs	r2, #0
 800930e:	4905      	ldr	r1, [pc, #20]	; (8009324 <ull_force_clocks+0x28>)
 8009310:	f7ff ffe3 	bl	80092da <dwt_write16bitoffsetreg>
 8009314:	e7f7      	b.n	8009306 <ull_force_clocks+0xa>
 8009316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800931a:	2200      	movs	r2, #0
 800931c:	4901      	ldr	r1, [pc, #4]	; (8009324 <ull_force_clocks+0x28>)
 800931e:	f7ff ffdc 	bl	80092da <dwt_write16bitoffsetreg>
 8009322:	e7f0      	b.n	8009306 <ull_force_clocks+0xa>
 8009324:	00110004 	.word	0x00110004

08009328 <__dwt_otp_write_wdata_id_reg>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4605      	mov	r5, r0
 800932c:	460c      	mov	r4, r1
 800932e:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8009332:	b29b      	uxth	r3, r3
 8009334:	2200      	movs	r2, #0
 8009336:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800933a:	f7ff ffce 	bl	80092da <dwt_write16bitoffsetreg>
 800933e:	b2a3      	uxth	r3, r4
 8009340:	2200      	movs	r2, #0
 8009342:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009346:	4628      	mov	r0, r5
 8009348:	f7ff ffc7 	bl	80092da <dwt_write16bitoffsetreg>
 800934c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009350 <_dwt_otpread>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	4604      	mov	r4, r0
 8009354:	460e      	mov	r6, r1
 8009356:	4d0c      	ldr	r5, [pc, #48]	; (8009388 <_dwt_otpread+0x38>)
 8009358:	2301      	movs	r3, #1
 800935a:	2200      	movs	r2, #0
 800935c:	4629      	mov	r1, r5
 800935e:	f7ff ffbc 	bl	80092da <dwt_write16bitoffsetreg>
 8009362:	4633      	mov	r3, r6
 8009364:	2200      	movs	r2, #0
 8009366:	4909      	ldr	r1, [pc, #36]	; (800938c <_dwt_otpread+0x3c>)
 8009368:	4620      	mov	r0, r4
 800936a:	f7ff ffb6 	bl	80092da <dwt_write16bitoffsetreg>
 800936e:	2302      	movs	r3, #2
 8009370:	2200      	movs	r2, #0
 8009372:	4629      	mov	r1, r5
 8009374:	4620      	mov	r0, r4
 8009376:	f7ff ffb0 	bl	80092da <dwt_write16bitoffsetreg>
 800937a:	2200      	movs	r2, #0
 800937c:	4904      	ldr	r1, [pc, #16]	; (8009390 <_dwt_otpread+0x40>)
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff fb93 	bl	8008aaa <dwt_read32bitoffsetreg>
 8009384:	bd70      	pop	{r4, r5, r6, pc}
 8009386:	bf00      	nop
 8009388:	000b0008 	.word	0x000b0008
 800938c:	000b0004 	.word	0x000b0004
 8009390:	000b0010 	.word	0x000b0010

08009394 <dwt_write32bitoffsetreg>:
 8009394:	b510      	push	{r4, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	f88d 300c 	strb.w	r3, [sp, #12]
 800939c:	0a1c      	lsrs	r4, r3, #8
 800939e:	f88d 400d 	strb.w	r4, [sp, #13]
 80093a2:	0c1c      	lsrs	r4, r3, #16
 80093a4:	f88d 400e 	strb.w	r4, [sp, #14]
 80093a8:	0e1b      	lsrs	r3, r3, #24
 80093aa:	f88d 300f 	strb.w	r3, [sp, #15]
 80093ae:	ab03      	add	r3, sp, #12
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	2304      	movs	r3, #4
 80093b4:	b292      	uxth	r2, r2
 80093b6:	f7ff ff85 	bl	80092c4 <dwt_writetodevice>
 80093ba:	b004      	add	sp, #16
 80093bc:	bd10      	pop	{r4, pc}

080093be <_dwt_adjust_delaytime>:
 80093be:	b538      	push	{r3, r4, r5, lr}
 80093c0:	4604      	mov	r4, r0
 80093c2:	b989      	cbnz	r1, 80093e8 <_dwt_adjust_delaytime+0x2a>
 80093c4:	2200      	movs	r2, #0
 80093c6:	2128      	movs	r1, #40	; 0x28
 80093c8:	f7ff fb6f 	bl	8008aaa <dwt_read32bitoffsetreg>
 80093cc:	4605      	mov	r5, r0
 80093ce:	2201      	movs	r2, #1
 80093d0:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7ff fb90 	bl	8008afa <dwt_read8bitoffsetreg>
 80093da:	1a2b      	subs	r3, r5, r0
 80093dc:	2200      	movs	r2, #0
 80093de:	2128      	movs	r1, #40	; 0x28
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff ffd7 	bl	8009394 <dwt_write32bitoffsetreg>
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	2200      	movs	r2, #0
 80093ea:	2128      	movs	r1, #40	; 0x28
 80093ec:	f7ff fb5d 	bl	8008aaa <dwt_read32bitoffsetreg>
 80093f0:	4605      	mov	r5, r0
 80093f2:	2201      	movs	r2, #1
 80093f4:	217c      	movs	r1, #124	; 0x7c
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff fb7f 	bl	8008afa <dwt_read8bitoffsetreg>
 80093fc:	1a2b      	subs	r3, r5, r0
 80093fe:	2200      	movs	r2, #0
 8009400:	2128      	movs	r1, #40	; 0x28
 8009402:	4620      	mov	r0, r4
 8009404:	f7ff ffc6 	bl	8009394 <dwt_write32bitoffsetreg>
 8009408:	e7ed      	b.n	80093e6 <_dwt_adjust_delaytime+0x28>

0800940a <ull_setrxaftertxdelay>:
 800940a:	b538      	push	{r3, r4, r5, lr}
 800940c:	4605      	mov	r5, r0
 800940e:	460c      	mov	r4, r1
 8009410:	2200      	movs	r2, #0
 8009412:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009416:	f7ff fb48 	bl	8008aaa <dwt_read32bitoffsetreg>
 800941a:	0d00      	lsrs	r0, r0, #20
 800941c:	0500      	lsls	r0, r0, #20
 800941e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009422:	4303      	orrs	r3, r0
 8009424:	2200      	movs	r2, #0
 8009426:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800942a:	4628      	mov	r0, r5
 800942c:	f7ff ffb2 	bl	8009394 <dwt_write32bitoffsetreg>
 8009430:	bd38      	pop	{r3, r4, r5, pc}

08009432 <ull_setlnapamode>:
 8009432:	b538      	push	{r3, r4, r5, lr}
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	2200      	movs	r2, #0
 800943a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800943e:	f7ff fb34 	bl	8008aaa <dwt_read32bitoffsetreg>
 8009442:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 8009446:	f014 0f01 	tst.w	r4, #1
 800944a:	bf18      	it	ne
 800944c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8009450:	f014 0f02 	tst.w	r4, #2
 8009454:	bf18      	it	ne
 8009456:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800945a:	f014 0f04 	tst.w	r4, #4
 800945e:	bf18      	it	ne
 8009460:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 8009464:	2200      	movs	r2, #0
 8009466:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800946a:	4628      	mov	r0, r5
 800946c:	f7ff ff92 	bl	8009394 <dwt_write32bitoffsetreg>
 8009470:	bd38      	pop	{r3, r4, r5, pc}
	...

08009474 <ull_configurestskey>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4605      	mov	r5, r0
 8009478:	460c      	mov	r4, r1
 800947a:	680b      	ldr	r3, [r1, #0]
 800947c:	2200      	movs	r2, #0
 800947e:	490b      	ldr	r1, [pc, #44]	; (80094ac <ull_configurestskey+0x38>)
 8009480:	f7ff ff88 	bl	8009394 <dwt_write32bitoffsetreg>
 8009484:	6863      	ldr	r3, [r4, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	4909      	ldr	r1, [pc, #36]	; (80094b0 <ull_configurestskey+0x3c>)
 800948a:	4628      	mov	r0, r5
 800948c:	f7ff ff82 	bl	8009394 <dwt_write32bitoffsetreg>
 8009490:	68a3      	ldr	r3, [r4, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	4907      	ldr	r1, [pc, #28]	; (80094b4 <ull_configurestskey+0x40>)
 8009496:	4628      	mov	r0, r5
 8009498:	f7ff ff7c 	bl	8009394 <dwt_write32bitoffsetreg>
 800949c:	68e3      	ldr	r3, [r4, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	4905      	ldr	r1, [pc, #20]	; (80094b8 <ull_configurestskey+0x44>)
 80094a2:	4628      	mov	r0, r5
 80094a4:	f7ff ff76 	bl	8009394 <dwt_write32bitoffsetreg>
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	bf00      	nop
 80094ac:	0002000c 	.word	0x0002000c
 80094b0:	00020010 	.word	0x00020010
 80094b4:	00020014 	.word	0x00020014
 80094b8:	00020018 	.word	0x00020018

080094bc <ull_configurestsiv>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4605      	mov	r5, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	680b      	ldr	r3, [r1, #0]
 80094c4:	2200      	movs	r2, #0
 80094c6:	490b      	ldr	r1, [pc, #44]	; (80094f4 <ull_configurestsiv+0x38>)
 80094c8:	f7ff ff64 	bl	8009394 <dwt_write32bitoffsetreg>
 80094cc:	6863      	ldr	r3, [r4, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	4909      	ldr	r1, [pc, #36]	; (80094f8 <ull_configurestsiv+0x3c>)
 80094d2:	4628      	mov	r0, r5
 80094d4:	f7ff ff5e 	bl	8009394 <dwt_write32bitoffsetreg>
 80094d8:	68a3      	ldr	r3, [r4, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	4907      	ldr	r1, [pc, #28]	; (80094fc <ull_configurestsiv+0x40>)
 80094de:	4628      	mov	r0, r5
 80094e0:	f7ff ff58 	bl	8009394 <dwt_write32bitoffsetreg>
 80094e4:	68e3      	ldr	r3, [r4, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	4905      	ldr	r1, [pc, #20]	; (8009500 <ull_configurestsiv+0x44>)
 80094ea:	4628      	mov	r0, r5
 80094ec:	f7ff ff52 	bl	8009394 <dwt_write32bitoffsetreg>
 80094f0:	bd38      	pop	{r3, r4, r5, pc}
 80094f2:	bf00      	nop
 80094f4:	0002001c 	.word	0x0002001c
 80094f8:	00020020 	.word	0x00020020
 80094fc:	00020024 	.word	0x00020024
 8009500:	00020028 	.word	0x00020028

08009504 <ull_configmrxlut>:
 8009504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009508:	4604      	mov	r4, r0
 800950a:	2905      	cmp	r1, #5
 800950c:	d03a      	beq.n	8009584 <ull_configmrxlut+0x80>
 800950e:	4d23      	ldr	r5, [pc, #140]	; (800959c <ull_configmrxlut+0x98>)
 8009510:	462e      	mov	r6, r5
 8009512:	4f23      	ldr	r7, [pc, #140]	; (80095a0 <ull_configmrxlut+0x9c>)
 8009514:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80095dc <ull_configmrxlut+0xd8>
 8009518:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80095e0 <ull_configmrxlut+0xdc>
 800951c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80095e4 <ull_configmrxlut+0xe0>
 8009520:	4b20      	ldr	r3, [pc, #128]	; (80095a4 <ull_configmrxlut+0xa0>)
 8009522:	2200      	movs	r2, #0
 8009524:	4920      	ldr	r1, [pc, #128]	; (80095a8 <ull_configmrxlut+0xa4>)
 8009526:	4620      	mov	r0, r4
 8009528:	f7ff ff34 	bl	8009394 <dwt_write32bitoffsetreg>
 800952c:	4653      	mov	r3, sl
 800952e:	2200      	movs	r2, #0
 8009530:	491e      	ldr	r1, [pc, #120]	; (80095ac <ull_configmrxlut+0xa8>)
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff ff2e 	bl	8009394 <dwt_write32bitoffsetreg>
 8009538:	464b      	mov	r3, r9
 800953a:	2200      	movs	r2, #0
 800953c:	491c      	ldr	r1, [pc, #112]	; (80095b0 <ull_configmrxlut+0xac>)
 800953e:	4620      	mov	r0, r4
 8009540:	f7ff ff28 	bl	8009394 <dwt_write32bitoffsetreg>
 8009544:	4643      	mov	r3, r8
 8009546:	2200      	movs	r2, #0
 8009548:	491a      	ldr	r1, [pc, #104]	; (80095b4 <ull_configmrxlut+0xb0>)
 800954a:	4620      	mov	r0, r4
 800954c:	f7ff ff22 	bl	8009394 <dwt_write32bitoffsetreg>
 8009550:	463b      	mov	r3, r7
 8009552:	2200      	movs	r2, #0
 8009554:	4918      	ldr	r1, [pc, #96]	; (80095b8 <ull_configmrxlut+0xb4>)
 8009556:	4620      	mov	r0, r4
 8009558:	f7ff ff1c 	bl	8009394 <dwt_write32bitoffsetreg>
 800955c:	4633      	mov	r3, r6
 800955e:	2200      	movs	r2, #0
 8009560:	4916      	ldr	r1, [pc, #88]	; (80095bc <ull_configmrxlut+0xb8>)
 8009562:	4620      	mov	r0, r4
 8009564:	f7ff ff16 	bl	8009394 <dwt_write32bitoffsetreg>
 8009568:	462b      	mov	r3, r5
 800956a:	2200      	movs	r2, #0
 800956c:	4914      	ldr	r1, [pc, #80]	; (80095c0 <ull_configmrxlut+0xbc>)
 800956e:	4620      	mov	r0, r4
 8009570:	f7ff ff10 	bl	8009394 <dwt_write32bitoffsetreg>
 8009574:	4b13      	ldr	r3, [pc, #76]	; (80095c4 <ull_configmrxlut+0xc0>)
 8009576:	2200      	movs	r2, #0
 8009578:	4913      	ldr	r1, [pc, #76]	; (80095c8 <ull_configmrxlut+0xc4>)
 800957a:	4620      	mov	r0, r4
 800957c:	f7ff ff0a 	bl	8009394 <dwt_write32bitoffsetreg>
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	4d11      	ldr	r5, [pc, #68]	; (80095cc <ull_configmrxlut+0xc8>)
 8009586:	4e12      	ldr	r6, [pc, #72]	; (80095d0 <ull_configmrxlut+0xcc>)
 8009588:	4f12      	ldr	r7, [pc, #72]	; (80095d4 <ull_configmrxlut+0xd0>)
 800958a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80095e8 <ull_configmrxlut+0xe4>
 800958e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80095ec <ull_configmrxlut+0xe8>
 8009592:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80095f0 <ull_configmrxlut+0xec>
 8009596:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <ull_configmrxlut+0xd4>)
 8009598:	e7c3      	b.n	8009522 <ull_configmrxlut+0x1e>
 800959a:	bf00      	nop
 800959c:	0002afb5 	.word	0x0002afb5
 80095a0:	0002af7d 	.word	0x0002af7d
 80095a4:	0002a8fe 	.word	0x0002a8fe
 80095a8:	00030038 	.word	0x00030038
 80095ac:	0003003c 	.word	0x0003003c
 80095b0:	00030040 	.word	0x00030040
 80095b4:	00030044 	.word	0x00030044
 80095b8:	00030048 	.word	0x00030048
 80095bc:	0003004c 	.word	0x0003004c
 80095c0:	00030050 	.word	0x00030050
 80095c4:	10000240 	.word	0x10000240
 80095c8:	0003001c 	.word	0x0003001c
 80095cc:	0001cff5 	.word	0x0001cff5
 80095d0:	0001cfb5 	.word	0x0001cfb5
 80095d4:	0001cf36 	.word	0x0001cf36
 80095d8:	0001c0fd 	.word	0x0001c0fd
 80095dc:	0002af3e 	.word	0x0002af3e
 80095e0:	0002a5fe 	.word	0x0002a5fe
 80095e4:	0002ac36 	.word	0x0002ac36
 80095e8:	0001c77e 	.word	0x0001c77e
 80095ec:	0001c6be 	.word	0x0001c6be
 80095f0:	0001c43e 	.word	0x0001c43e

080095f4 <ull_disable_rftx_blocks>:
 80095f4:	b508      	push	{r3, lr}
 80095f6:	2300      	movs	r3, #0
 80095f8:	461a      	mov	r2, r3
 80095fa:	4902      	ldr	r1, [pc, #8]	; (8009604 <ull_disable_rftx_blocks+0x10>)
 80095fc:	f7ff feca 	bl	8009394 <dwt_write32bitoffsetreg>
 8009600:	bd08      	pop	{r3, pc}
 8009602:	bf00      	nop
 8009604:	00070004 	.word	0x00070004

08009608 <ull_disable_rf_tx>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4604      	mov	r4, r0
 800960c:	460d      	mov	r5, r1
 800960e:	2300      	movs	r3, #0
 8009610:	461a      	mov	r2, r3
 8009612:	490a      	ldr	r1, [pc, #40]	; (800963c <ull_disable_rf_tx+0x34>)
 8009614:	f7ff febe 	bl	8009394 <dwt_write32bitoffsetreg>
 8009618:	2300      	movs	r3, #0
 800961a:	461a      	mov	r2, r3
 800961c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8009620:	4620      	mov	r0, r4
 8009622:	f7ff feb7 	bl	8009394 <dwt_write32bitoffsetreg>
 8009626:	b905      	cbnz	r5, 800962a <ull_disable_rf_tx+0x22>
 8009628:	bd38      	pop	{r3, r4, r5, pc}
 800962a:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800962e:	2200      	movs	r2, #0
 8009630:	4903      	ldr	r1, [pc, #12]	; (8009640 <ull_disable_rf_tx+0x38>)
 8009632:	4620      	mov	r0, r4
 8009634:	f7ff feae 	bl	8009394 <dwt_write32bitoffsetreg>
 8009638:	e7f6      	b.n	8009628 <ull_disable_rf_tx+0x20>
 800963a:	bf00      	nop
 800963c:	00070048 	.word	0x00070048
 8009640:	00070014 	.word	0x00070014

08009644 <ull_readrxdata>:
 8009644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009646:	b083      	sub	sp, #12
 8009648:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800964a:	7ba4      	ldrb	r4, [r4, #14]
 800964c:	2c03      	cmp	r4, #3
 800964e:	bf0c      	ite	eq
 8009650:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8009654:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8009658:	189c      	adds	r4, r3, r2
 800965a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800965e:	da19      	bge.n	8009694 <ull_readrxdata+0x50>
 8009660:	461d      	mov	r5, r3
 8009662:	4616      	mov	r6, r2
 8009664:	460f      	mov	r7, r1
 8009666:	4604      	mov	r4, r0
 8009668:	2b7f      	cmp	r3, #127	; 0x7f
 800966a:	d915      	bls.n	8009698 <ull_readrxdata+0x54>
 800966c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8009670:	2200      	movs	r2, #0
 8009672:	490d      	ldr	r1, [pc, #52]	; (80096a8 <ull_readrxdata+0x64>)
 8009674:	f7ff fe8e 	bl	8009394 <dwt_write32bitoffsetreg>
 8009678:	462b      	mov	r3, r5
 800967a:	2200      	movs	r2, #0
 800967c:	490b      	ldr	r1, [pc, #44]	; (80096ac <ull_readrxdata+0x68>)
 800967e:	4620      	mov	r0, r4
 8009680:	f7ff fe88 	bl	8009394 <dwt_write32bitoffsetreg>
 8009684:	9700      	str	r7, [sp, #0]
 8009686:	4633      	mov	r3, r6
 8009688:	2200      	movs	r2, #0
 800968a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800968e:	4620      	mov	r0, r4
 8009690:	f7ff fa01 	bl	8008a96 <dwt_readfromdevice>
 8009694:	b003      	add	sp, #12
 8009696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009698:	9100      	str	r1, [sp, #0]
 800969a:	4613      	mov	r3, r2
 800969c:	462a      	mov	r2, r5
 800969e:	4661      	mov	r1, ip
 80096a0:	f7ff f9f9 	bl	8008a96 <dwt_readfromdevice>
 80096a4:	e7f6      	b.n	8009694 <ull_readrxdata+0x50>
 80096a6:	bf00      	nop
 80096a8:	001f0004 	.word	0x001f0004
 80096ac:	001f0008 	.word	0x001f0008

080096b0 <dwt_write8bitoffsetreg>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	ac04      	add	r4, sp, #16
 80096b6:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80096ba:	9400      	str	r4, [sp, #0]
 80096bc:	2301      	movs	r3, #1
 80096be:	b292      	uxth	r2, r2
 80096c0:	f7ff fe00 	bl	80092c4 <dwt_writetodevice>
 80096c4:	b004      	add	sp, #16
 80096c6:	bd10      	pop	{r4, pc}

080096c8 <ull_getframelength>:
 80096c8:	b510      	push	{r4, lr}
 80096ca:	4604      	mov	r4, r0
 80096cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80096ce:	7b9b      	ldrb	r3, [r3, #14]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d013      	beq.n	80096fc <ull_getframelength+0x34>
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d11d      	bne.n	8009714 <ull_getframelength+0x4c>
 80096d8:	23f0      	movs	r3, #240	; 0xf0
 80096da:	2200      	movs	r2, #0
 80096dc:	4912      	ldr	r1, [pc, #72]	; (8009728 <ull_getframelength+0x60>)
 80096de:	f7ff ffe7 	bl	80096b0 <dwt_write8bitoffsetreg>
 80096e2:	2200      	movs	r2, #0
 80096e4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80096e8:	4620      	mov	r0, r4
 80096ea:	f7ff f9f4 	bl	8008ad6 <dwt_read16bitoffsetreg>
 80096ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80096f0:	7ada      	ldrb	r2, [r3, #11]
 80096f2:	b1a2      	cbz	r2, 800971e <ull_getframelength+0x56>
 80096f4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80096f8:	83d8      	strh	r0, [r3, #30]
 80096fa:	bd10      	pop	{r4, pc}
 80096fc:	230f      	movs	r3, #15
 80096fe:	2200      	movs	r2, #0
 8009700:	4909      	ldr	r1, [pc, #36]	; (8009728 <ull_getframelength+0x60>)
 8009702:	f7ff ffd5 	bl	80096b0 <dwt_write8bitoffsetreg>
 8009706:	2200      	movs	r2, #0
 8009708:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800970c:	4620      	mov	r0, r4
 800970e:	f7ff f9e2 	bl	8008ad6 <dwt_read16bitoffsetreg>
 8009712:	e7ec      	b.n	80096ee <ull_getframelength+0x26>
 8009714:	2200      	movs	r2, #0
 8009716:	214c      	movs	r1, #76	; 0x4c
 8009718:	f7ff f9dd 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800971c:	e7e7      	b.n	80096ee <ull_getframelength+0x26>
 800971e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009722:	83d8      	strh	r0, [r3, #30]
 8009724:	e7e9      	b.n	80096fa <ull_getframelength+0x32>
 8009726:	bf00      	nop
 8009728:	00010018 	.word	0x00010018

0800972c <_dwt_clear_db_events>:
 800972c:	b510      	push	{r4, lr}
 800972e:	4604      	mov	r4, r0
 8009730:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009732:	7b9b      	ldrb	r3, [r3, #14]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d004      	beq.n	8009742 <_dwt_clear_db_events+0x16>
 8009738:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800973a:	7b9b      	ldrb	r3, [r3, #14]
 800973c:	2b03      	cmp	r3, #3
 800973e:	d006      	beq.n	800974e <_dwt_clear_db_events+0x22>
 8009740:	bd10      	pop	{r4, pc}
 8009742:	230f      	movs	r3, #15
 8009744:	2200      	movs	r2, #0
 8009746:	4905      	ldr	r1, [pc, #20]	; (800975c <_dwt_clear_db_events+0x30>)
 8009748:	f7ff ffb2 	bl	80096b0 <dwt_write8bitoffsetreg>
 800974c:	e7f4      	b.n	8009738 <_dwt_clear_db_events+0xc>
 800974e:	23f0      	movs	r3, #240	; 0xf0
 8009750:	2200      	movs	r2, #0
 8009752:	4902      	ldr	r1, [pc, #8]	; (800975c <_dwt_clear_db_events+0x30>)
 8009754:	4620      	mov	r0, r4
 8009756:	f7ff ffab 	bl	80096b0 <dwt_write8bitoffsetreg>
 800975a:	e7f1      	b.n	8009740 <_dwt_clear_db_events+0x14>
 800975c:	00010018 	.word	0x00010018

08009760 <ull_clearaonconfig>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4604      	mov	r4, r0
 8009764:	2300      	movs	r3, #0
 8009766:	461a      	mov	r2, r3
 8009768:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800976c:	f7ff fdb5 	bl	80092da <dwt_write16bitoffsetreg>
 8009770:	2300      	movs	r3, #0
 8009772:	461a      	mov	r2, r3
 8009774:	4908      	ldr	r1, [pc, #32]	; (8009798 <ull_clearaonconfig+0x38>)
 8009776:	4620      	mov	r0, r4
 8009778:	f7ff ff9a 	bl	80096b0 <dwt_write8bitoffsetreg>
 800977c:	4d07      	ldr	r5, [pc, #28]	; (800979c <ull_clearaonconfig+0x3c>)
 800977e:	2300      	movs	r3, #0
 8009780:	461a      	mov	r2, r3
 8009782:	4629      	mov	r1, r5
 8009784:	4620      	mov	r0, r4
 8009786:	f7ff ff93 	bl	80096b0 <dwt_write8bitoffsetreg>
 800978a:	2302      	movs	r3, #2
 800978c:	2200      	movs	r2, #0
 800978e:	4629      	mov	r1, r5
 8009790:	4620      	mov	r0, r4
 8009792:	f7ff ff8d 	bl	80096b0 <dwt_write8bitoffsetreg>
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	000a0014 	.word	0x000a0014
 800979c:	000a0004 	.word	0x000a0004

080097a0 <ull_configeventcounters>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4605      	mov	r5, r0
 80097a4:	460c      	mov	r4, r1
 80097a6:	2302      	movs	r3, #2
 80097a8:	2200      	movs	r2, #0
 80097aa:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80097ae:	f7ff ff7f 	bl	80096b0 <dwt_write8bitoffsetreg>
 80097b2:	b904      	cbnz	r4, 80097b6 <ull_configeventcounters+0x16>
 80097b4:	bd38      	pop	{r3, r4, r5, pc}
 80097b6:	2301      	movs	r3, #1
 80097b8:	2200      	movs	r2, #0
 80097ba:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80097be:	4628      	mov	r0, r5
 80097c0:	f7ff ff76 	bl	80096b0 <dwt_write8bitoffsetreg>
 80097c4:	e7f6      	b.n	80097b4 <ull_configeventcounters+0x14>
	...

080097c8 <ull_aon_read>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4604      	mov	r4, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	2200      	movs	r2, #0
 80097d0:	490a      	ldr	r1, [pc, #40]	; (80097fc <ull_aon_read+0x34>)
 80097d2:	f7ff fd82 	bl	80092da <dwt_write16bitoffsetreg>
 80097d6:	4d0a      	ldr	r5, [pc, #40]	; (8009800 <ull_aon_read+0x38>)
 80097d8:	2388      	movs	r3, #136	; 0x88
 80097da:	2200      	movs	r2, #0
 80097dc:	4629      	mov	r1, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	f7ff ff66 	bl	80096b0 <dwt_write8bitoffsetreg>
 80097e4:	2300      	movs	r3, #0
 80097e6:	461a      	mov	r2, r3
 80097e8:	4629      	mov	r1, r5
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff ff60 	bl	80096b0 <dwt_write8bitoffsetreg>
 80097f0:	2200      	movs	r2, #0
 80097f2:	4904      	ldr	r1, [pc, #16]	; (8009804 <ull_aon_read+0x3c>)
 80097f4:	4620      	mov	r0, r4
 80097f6:	f7ff f980 	bl	8008afa <dwt_read8bitoffsetreg>
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	000a000c 	.word	0x000a000c
 8009800:	000a0004 	.word	0x000a0004
 8009804:	000a0008 	.word	0x000a0008

08009808 <ull_aon_write>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	4604      	mov	r4, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4615      	mov	r5, r2
 8009810:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009814:	bf34      	ite	cc
 8009816:	2600      	movcc	r6, #0
 8009818:	2620      	movcs	r6, #32
 800981a:	2200      	movs	r2, #0
 800981c:	490b      	ldr	r1, [pc, #44]	; (800984c <ull_aon_write+0x44>)
 800981e:	f7ff fd5c 	bl	80092da <dwt_write16bitoffsetreg>
 8009822:	462b      	mov	r3, r5
 8009824:	2200      	movs	r2, #0
 8009826:	490a      	ldr	r1, [pc, #40]	; (8009850 <ull_aon_write+0x48>)
 8009828:	4620      	mov	r0, r4
 800982a:	f7ff ff41 	bl	80096b0 <dwt_write8bitoffsetreg>
 800982e:	4d09      	ldr	r5, [pc, #36]	; (8009854 <ull_aon_write+0x4c>)
 8009830:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8009834:	2200      	movs	r2, #0
 8009836:	4629      	mov	r1, r5
 8009838:	4620      	mov	r0, r4
 800983a:	f7ff ff39 	bl	80096b0 <dwt_write8bitoffsetreg>
 800983e:	2300      	movs	r3, #0
 8009840:	461a      	mov	r2, r3
 8009842:	4629      	mov	r1, r5
 8009844:	4620      	mov	r0, r4
 8009846:	f7ff ff33 	bl	80096b0 <dwt_write8bitoffsetreg>
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	000a000c 	.word	0x000a000c
 8009850:	000a0010 	.word	0x000a0010
 8009854:	000a0004 	.word	0x000a0004

08009858 <ull_configuresleep>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4604      	mov	r4, r0
 800985c:	460d      	mov	r5, r1
 800985e:	4616      	mov	r6, r2
 8009860:	2200      	movs	r2, #0
 8009862:	f240 110b 	movw	r1, #267	; 0x10b
 8009866:	f7ff ffcf 	bl	8009808 <ull_aon_write>
 800986a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff ffaa 	bl	80097c8 <ull_aon_read>
 8009874:	f000 021f 	and.w	r2, r0, #31
 8009878:	f44f 7182 	mov.w	r1, #260	; 0x104
 800987c:	4620      	mov	r0, r4
 800987e:	f7ff ffc3 	bl	8009808 <ull_aon_write>
 8009882:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009884:	8a1a      	ldrh	r2, [r3, #16]
 8009886:	4315      	orrs	r5, r2
 8009888:	821d      	strh	r5, [r3, #16]
 800988a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800988c:	8a1b      	ldrh	r3, [r3, #16]
 800988e:	2200      	movs	r2, #0
 8009890:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8009894:	4620      	mov	r0, r4
 8009896:	f7ff fd20 	bl	80092da <dwt_write16bitoffsetreg>
 800989a:	4633      	mov	r3, r6
 800989c:	2200      	movs	r2, #0
 800989e:	4902      	ldr	r1, [pc, #8]	; (80098a8 <ull_configuresleep+0x50>)
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7ff ff05 	bl	80096b0 <dwt_write8bitoffsetreg>
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	000a0014 	.word	0x000a0014

080098ac <ull_writetxdata>:
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	b083      	sub	sp, #12
 80098b0:	185c      	adds	r4, r3, r1
 80098b2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80098b6:	da24      	bge.n	8009902 <ull_writetxdata+0x56>
 80098b8:	461c      	mov	r4, r3
 80098ba:	4617      	mov	r7, r2
 80098bc:	460e      	mov	r6, r1
 80098be:	4605      	mov	r5, r0
 80098c0:	2b7f      	cmp	r3, #127	; 0x7f
 80098c2:	d915      	bls.n	80098f0 <ull_writetxdata+0x44>
 80098c4:	2314      	movs	r3, #20
 80098c6:	2200      	movs	r2, #0
 80098c8:	490f      	ldr	r1, [pc, #60]	; (8009908 <ull_writetxdata+0x5c>)
 80098ca:	f7ff fd63 	bl	8009394 <dwt_write32bitoffsetreg>
 80098ce:	4623      	mov	r3, r4
 80098d0:	2200      	movs	r2, #0
 80098d2:	490e      	ldr	r1, [pc, #56]	; (800990c <ull_writetxdata+0x60>)
 80098d4:	4628      	mov	r0, r5
 80098d6:	f7ff fd5d 	bl	8009394 <dwt_write32bitoffsetreg>
 80098da:	9700      	str	r7, [sp, #0]
 80098dc:	4633      	mov	r3, r6
 80098de:	2200      	movs	r2, #0
 80098e0:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80098e4:	4628      	mov	r0, r5
 80098e6:	f7ff fced 	bl	80092c4 <dwt_writetodevice>
 80098ea:	2000      	movs	r0, #0
 80098ec:	b003      	add	sp, #12
 80098ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f0:	9200      	str	r2, [sp, #0]
 80098f2:	460b      	mov	r3, r1
 80098f4:	4622      	mov	r2, r4
 80098f6:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 80098fa:	f7ff fce3 	bl	80092c4 <dwt_writetodevice>
 80098fe:	2000      	movs	r0, #0
 8009900:	e7f4      	b.n	80098ec <ull_writetxdata+0x40>
 8009902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009906:	e7f1      	b.n	80098ec <ull_writetxdata+0x40>
 8009908:	001f0004 	.word	0x001f0004
 800990c:	001f0008 	.word	0x001f0008

08009910 <ull_signal_rx_buff_free>:
 8009910:	b510      	push	{r4, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	4604      	mov	r4, r0
 8009916:	2302      	movs	r3, #2
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	9200      	str	r2, [sp, #0]
 800991e:	4613      	mov	r3, r2
 8009920:	2113      	movs	r1, #19
 8009922:	f7ff f83a 	bl	800899a <dwt_xfer3xxx>
 8009926:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009928:	7b9a      	ldrb	r2, [r3, #14]
 800992a:	2a03      	cmp	r2, #3
 800992c:	bf0c      	ite	eq
 800992e:	2201      	moveq	r2, #1
 8009930:	2203      	movne	r2, #3
 8009932:	739a      	strb	r2, [r3, #14]
 8009934:	b002      	add	sp, #8
 8009936:	bd10      	pop	{r4, pc}

08009938 <ull_isr>:
 8009938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	4604      	mov	r4, r0
 800993e:	2200      	movs	r2, #0
 8009940:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8009944:	f7ff f8d9 	bl	8008afa <dwt_read8bitoffsetreg>
 8009948:	4605      	mov	r5, r0
 800994a:	2200      	movs	r2, #0
 800994c:	2144      	movs	r1, #68	; 0x44
 800994e:	4620      	mov	r0, r4
 8009950:	f7ff f8ab 	bl	8008aaa <dwt_read32bitoffsetreg>
 8009954:	4606      	mov	r6, r0
 8009956:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009958:	2200      	movs	r2, #0
 800995a:	83da      	strh	r2, [r3, #30]
 800995c:	f883 2020 	strb.w	r2, [r3, #32]
 8009960:	619a      	str	r2, [r3, #24]
 8009962:	839a      	strh	r2, [r3, #28]
 8009964:	625a      	str	r2, [r3, #36]	; 0x24
 8009966:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009968:	625c      	str	r4, [r3, #36]	; 0x24
 800996a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800996c:	7b9f      	ldrb	r7, [r3, #14]
 800996e:	2f00      	cmp	r7, #0
 8009970:	d17f      	bne.n	8009a72 <ull_isr+0x13a>
 8009972:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009974:	619e      	str	r6, [r3, #24]
 8009976:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800997a:	f898 3015 	ldrb.w	r3, [r8, #21]
 800997e:	f003 0303 	and.w	r3, r3, #3
 8009982:	2b03      	cmp	r3, #3
 8009984:	f000 8090 	beq.w	8009aa8 <ull_isr+0x170>
 8009988:	f015 0f80 	tst.w	r5, #128	; 0x80
 800998c:	f040 8093 	bne.w	8009ab6 <ull_isr+0x17e>
 8009990:	f015 0f01 	tst.w	r5, #1
 8009994:	f040 80c1 	bne.w	8009b1a <ull_isr+0x1e2>
 8009998:	f015 0f40 	tst.w	r5, #64	; 0x40
 800999c:	d00b      	beq.n	80099b6 <ull_isr+0x7e>
 800999e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a0:	b113      	cbz	r3, 80099a8 <ull_isr+0x70>
 80099a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80099a4:	3018      	adds	r0, #24
 80099a6:	4798      	blx	r3
 80099a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80099ac:	2202      	movs	r2, #2
 80099ae:	2144      	movs	r1, #68	; 0x44
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff fc92 	bl	80092da <dwt_write16bitoffsetreg>
 80099b6:	f015 0f08 	tst.w	r5, #8
 80099ba:	d107      	bne.n	80099cc <ull_isr+0x94>
 80099bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80099be:	7b9b      	ldrb	r3, [r3, #14]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 80ea 	beq.w	8009b9a <ull_isr+0x262>
 80099c6:	2f00      	cmp	r7, #0
 80099c8:	f000 80e7 	beq.w	8009b9a <ull_isr+0x262>
 80099cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2020 	strb.w	r2, [r3, #32]
 80099d4:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 80099d8:	f000 80ad 	beq.w	8009b36 <ull_isr+0x1fe>
 80099dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80099de:	f892 3020 	ldrb.w	r3, [r2, #32]
 80099e2:	f043 0308 	orr.w	r3, r3, #8
 80099e6:	f882 3020 	strb.w	r3, [r2, #32]
 80099ea:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80099ee:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 80099f2:	d008      	beq.n	8009a06 <ull_isr+0xce>
 80099f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80099f6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80099fa:	f043 0310 	orr.w	r3, r3, #16
 80099fe:	f882 3020 	strb.w	r3, [r2, #32]
 8009a02:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8009a06:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009a0a:	d006      	beq.n	8009a1a <ull_isr+0xe2>
 8009a0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009a0e:	7d53      	ldrb	r3, [r2, #21]
 8009a10:	f003 0303 	and.w	r3, r3, #3
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	f000 809a 	beq.w	8009b4e <ull_isr+0x216>
 8009a1a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8009a1e:	f040 80a2 	bne.w	8009b66 <ull_isr+0x22e>
 8009a22:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8009a26:	2200      	movs	r2, #0
 8009a28:	2144      	movs	r1, #68	; 0x44
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7ff fcb2 	bl	8009394 <dwt_write32bitoffsetreg>
 8009a30:	4620      	mov	r0, r4
 8009a32:	f7ff fe7b 	bl	800972c <_dwt_clear_db_events>
 8009a36:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009a38:	8bc3      	ldrh	r3, [r0, #30]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 80a2 	bne.w	8009b84 <ull_isr+0x24c>
 8009a40:	7d43      	ldrb	r3, [r0, #21]
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	f000 809c 	beq.w	8009b84 <ull_isr+0x24c>
 8009a4c:	6983      	ldr	r3, [r0, #24]
 8009a4e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009a52:	6183      	str	r3, [r0, #24]
 8009a54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009a56:	6993      	ldr	r3, [r2, #24]
 8009a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a5c:	6193      	str	r3, [r2, #24]
 8009a5e:	69e3      	ldr	r3, [r4, #28]
 8009a60:	b113      	cbz	r3, 8009a68 <ull_isr+0x130>
 8009a62:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009a64:	3018      	adds	r0, #24
 8009a66:	4798      	blx	r3
 8009a68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2020 	strb.w	r2, [r3, #32]
 8009a70:	e08c      	b.n	8009b8c <ull_isr+0x254>
 8009a72:	496d      	ldr	r1, [pc, #436]	; (8009c28 <ull_isr+0x2f0>)
 8009a74:	4620      	mov	r0, r4
 8009a76:	f7ff f840 	bl	8008afa <dwt_read8bitoffsetreg>
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a7e:	7b9b      	ldrb	r3, [r3, #14]
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	bf08      	it	eq
 8009a84:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 8009a88:	f017 0f01 	tst.w	r7, #1
 8009a8c:	bf18      	it	ne
 8009a8e:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8009a92:	f017 0f02 	tst.w	r7, #2
 8009a96:	bf18      	it	ne
 8009a98:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8009a9c:	f017 0f04 	tst.w	r7, #4
 8009aa0:	bf18      	it	ne
 8009aa2:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8009aa6:	e764      	b.n	8009972 <ull_isr+0x3a>
 8009aa8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009aac:	bf1c      	itt	ne
 8009aae:	f045 0508 	orrne.w	r5, r5, #8
 8009ab2:	b2ed      	uxtbne	r5, r5
 8009ab4:	e768      	b.n	8009988 <ull_isr+0x50>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2148      	movs	r1, #72	; 0x48
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff f80b 	bl	8008ad6 <dwt_read16bitoffsetreg>
 8009ac0:	f8a8 001c 	strh.w	r0, [r8, #28]
 8009ac4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ac6:	7d1a      	ldrb	r2, [r3, #20]
 8009ac8:	b11a      	cbz	r2, 8009ad2 <ull_isr+0x19a>
 8009aca:	699a      	ldr	r2, [r3, #24]
 8009acc:	f012 0f04 	tst.w	r2, #4
 8009ad0:	d103      	bne.n	8009ada <ull_isr+0x1a2>
 8009ad2:	8b9b      	ldrh	r3, [r3, #28]
 8009ad4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009ad8:	b18b      	cbz	r3, 8009afe <ull_isr+0x1c6>
 8009ada:	2304      	movs	r3, #4
 8009adc:	2200      	movs	r2, #0
 8009ade:	2144      	movs	r1, #68	; 0x44
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f7ff fde5 	bl	80096b0 <dwt_write8bitoffsetreg>
 8009ae6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8009aea:	2200      	movs	r2, #0
 8009aec:	2148      	movs	r1, #72	; 0x48
 8009aee:	4620      	mov	r0, r4
 8009af0:	f7ff fbf3 	bl	80092da <dwt_write16bitoffsetreg>
 8009af4:	6a23      	ldr	r3, [r4, #32]
 8009af6:	b113      	cbz	r3, 8009afe <ull_isr+0x1c6>
 8009af8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009afa:	3018      	adds	r0, #24
 8009afc:	4798      	blx	r3
 8009afe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b00:	8b9b      	ldrh	r3, [r3, #28]
 8009b02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009b06:	f43f af43 	beq.w	8009990 <ull_isr+0x58>
 8009b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2148      	movs	r1, #72	; 0x48
 8009b12:	4620      	mov	r0, r4
 8009b14:	f7ff fbe1 	bl	80092da <dwt_write16bitoffsetreg>
 8009b18:	e73a      	b.n	8009990 <ull_isr+0x58>
 8009b1a:	23f8      	movs	r3, #248	; 0xf8
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2144      	movs	r1, #68	; 0x44
 8009b20:	4620      	mov	r0, r4
 8009b22:	f7ff fdc5 	bl	80096b0 <dwt_write8bitoffsetreg>
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f43f af35 	beq.w	8009998 <ull_isr+0x60>
 8009b2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009b30:	3018      	adds	r0, #24
 8009b32:	4798      	blx	r3
 8009b34:	e730      	b.n	8009998 <ull_isr+0x60>
 8009b36:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8009b3a:	bf1f      	itttt	ne
 8009b3c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8009b3e:	f892 3020 	ldrbne.w	r3, [r2, #32]
 8009b42:	f043 0304 	orrne.w	r3, r3, #4
 8009b46:	f882 3020 	strbne.w	r3, [r2, #32]
 8009b4a:	2700      	movs	r7, #0
 8009b4c:	e74f      	b.n	80099ee <ull_isr+0xb6>
 8009b4e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009b52:	f043 0302 	orr.w	r3, r3, #2
 8009b56:	f882 3020 	strb.w	r3, [r2, #32]
 8009b5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	83da      	strh	r2, [r3, #30]
 8009b60:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8009b64:	e75d      	b.n	8009a22 <ull_isr+0xea>
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7ff fdae 	bl	80096c8 <ull_getframelength>
 8009b6c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009b70:	f43f af57 	beq.w	8009a22 <ull_isr+0xea>
 8009b74:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b76:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009b7a:	f043 0301 	orr.w	r3, r3, #1
 8009b7e:	f882 3020 	strb.w	r3, [r2, #32]
 8009b82:	e74e      	b.n	8009a22 <ull_isr+0xea>
 8009b84:	6963      	ldr	r3, [r4, #20]
 8009b86:	b10b      	cbz	r3, 8009b8c <ull_isr+0x254>
 8009b88:	3018      	adds	r0, #24
 8009b8a:	4798      	blx	r3
 8009b8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b8e:	7b9b      	ldrb	r3, [r3, #14]
 8009b90:	bb03      	cbnz	r3, 8009bd4 <ull_isr+0x29c>
 8009b92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2020 	strb.w	r2, [r3, #32]
 8009b9a:	f015 0f10 	tst.w	r5, #16
 8009b9e:	d11d      	bne.n	8009bdc <ull_isr+0x2a4>
 8009ba0:	f015 0f20 	tst.w	r5, #32
 8009ba4:	d12d      	bne.n	8009c02 <ull_isr+0x2ca>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4920      	ldr	r1, [pc, #128]	; (8009c2c <ull_isr+0x2f4>)
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7fe ffa5 	bl	8008afa <dwt_read8bitoffsetreg>
 8009bb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009bb2:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8009bb6:	f010 0303 	ands.w	r3, r0, #3
 8009bba:	d009      	beq.n	8009bd0 <ull_isr+0x298>
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	491b      	ldr	r1, [pc, #108]	; (8009c2c <ull_isr+0x2f4>)
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff fd75 	bl	80096b0 <dwt_write8bitoffsetreg>
 8009bc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009bc8:	b113      	cbz	r3, 8009bd0 <ull_isr+0x298>
 8009bca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009bcc:	3018      	adds	r0, #24
 8009bce:	4798      	blx	r3
 8009bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7ff fe9b 	bl	8009910 <ull_signal_rx_buff_free>
 8009bda:	e7da      	b.n	8009b92 <ull_isr+0x25a>
 8009bdc:	4b14      	ldr	r3, [pc, #80]	; (8009c30 <ull_isr+0x2f8>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	2144      	movs	r1, #68	; 0x44
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7ff fbd6 	bl	8009394 <dwt_write32bitoffsetreg>
 8009be8:	4620      	mov	r0, r4
 8009bea:	f7ff fd9f 	bl	800972c <_dwt_clear_db_events>
 8009bee:	69e3      	ldr	r3, [r4, #28]
 8009bf0:	b113      	cbz	r3, 8009bf8 <ull_isr+0x2c0>
 8009bf2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009bf4:	3018      	adds	r0, #24
 8009bf6:	4798      	blx	r3
 8009bf8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2020 	strb.w	r2, [r3, #32]
 8009c00:	e7ce      	b.n	8009ba0 <ull_isr+0x268>
 8009c02:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <ull_isr+0x2fc>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	2144      	movs	r1, #68	; 0x44
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f7ff fbc3 	bl	8009394 <dwt_write32bitoffsetreg>
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f7ff fd8c 	bl	800972c <_dwt_clear_db_events>
 8009c14:	69a3      	ldr	r3, [r4, #24]
 8009c16:	b113      	cbz	r3, 8009c1e <ull_isr+0x2e6>
 8009c18:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009c1a:	3018      	adds	r0, #24
 8009c1c:	4798      	blx	r3
 8009c1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2020 	strb.w	r2, [r3, #32]
 8009c26:	e7be      	b.n	8009ba6 <ull_isr+0x26e>
 8009c28:	00010018 	.word	0x00010018
 8009c2c:	00110038 	.word	0x00110038
 8009c30:	34059400 	.word	0x34059400
 8009c34:	10220400 	.word	0x10220400

08009c38 <dwt_modify32bitoffsetreg>:
 8009c38:	b530      	push	{r4, r5, lr}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	9c08      	ldr	r4, [sp, #32]
 8009c3e:	f88d 3008 	strb.w	r3, [sp, #8]
 8009c42:	0a1d      	lsrs	r5, r3, #8
 8009c44:	f88d 5009 	strb.w	r5, [sp, #9]
 8009c48:	0c1d      	lsrs	r5, r3, #16
 8009c4a:	f88d 500a 	strb.w	r5, [sp, #10]
 8009c4e:	0e1b      	lsrs	r3, r3, #24
 8009c50:	f88d 300b 	strb.w	r3, [sp, #11]
 8009c54:	f88d 400c 	strb.w	r4, [sp, #12]
 8009c58:	0a23      	lsrs	r3, r4, #8
 8009c5a:	f88d 300d 	strb.w	r3, [sp, #13]
 8009c5e:	0c23      	lsrs	r3, r4, #16
 8009c60:	f88d 300e 	strb.w	r3, [sp, #14]
 8009c64:	0e24      	lsrs	r4, r4, #24
 8009c66:	f88d 400f 	strb.w	r4, [sp, #15]
 8009c6a:	f248 0303 	movw	r3, #32771	; 0x8003
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	ab02      	add	r3, sp, #8
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	2308      	movs	r3, #8
 8009c76:	b292      	uxth	r2, r2
 8009c78:	f7fe fe8f 	bl	800899a <dwt_xfer3xxx>
 8009c7c:	b005      	add	sp, #20
 8009c7e:	bd30      	pop	{r4, r5, pc}

08009c80 <ull_enable_rf_tx>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	4604      	mov	r4, r0
 8009c86:	460e      	mov	r6, r1
 8009c88:	4d13      	ldr	r5, [pc, #76]	; (8009cd8 <ull_enable_rf_tx+0x58>)
 8009c8a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c94:	2200      	movs	r2, #0
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7ff ffce 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009c9c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4620      	mov	r0, r4
 8009cac:	f7ff ffc4 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <ull_enable_rf_tx+0x5c>)
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7ff ffba 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009cc4:	b90e      	cbnz	r6, 8009cca <ull_enable_rf_tx+0x4a>
 8009cc6:	b002      	add	sp, #8
 8009cc8:	bd70      	pop	{r4, r5, r6, pc}
 8009cca:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <ull_enable_rf_tx+0x60>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4905      	ldr	r1, [pc, #20]	; (8009ce4 <ull_enable_rf_tx+0x64>)
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f7ff fb5f 	bl	8009394 <dwt_write32bitoffsetreg>
 8009cd6:	e7f6      	b.n	8009cc6 <ull_enable_rf_tx+0x46>
 8009cd8:	00070048 	.word	0x00070048
 8009cdc:	02003c00 	.word	0x02003c00
 8009ce0:	01011100 	.word	0x01011100
 8009ce4:	00070014 	.word	0x00070014

08009ce8 <ull_enable_rftx_blocks>:
 8009ce8:	b500      	push	{lr}
 8009cea:	b083      	sub	sp, #12
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <ull_enable_rftx_blocks+0x1c>)
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4904      	ldr	r1, [pc, #16]	; (8009d08 <ull_enable_rftx_blocks+0x20>)
 8009cf8:	f7ff ff9e 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009cfc:	b003      	add	sp, #12
 8009cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d02:	bf00      	nop
 8009d04:	02003c00 	.word	0x02003c00
 8009d08:	00070004 	.word	0x00070004

08009d0c <_dwt_otpprogword32>:
 8009d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d10:	b083      	sub	sp, #12
 8009d12:	4604      	mov	r4, r0
 8009d14:	460d      	mov	r5, r1
 8009d16:	4617      	mov	r7, r2
 8009d18:	4e56      	ldr	r6, [pc, #344]	; (8009e74 <_dwt_otpprogword32+0x168>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	f7fe fec4 	bl	8008aaa <dwt_read32bitoffsetreg>
 8009d22:	4681      	mov	r9, r0
 8009d24:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4631      	mov	r1, r6
 8009d32:	4620      	mov	r0, r4
 8009d34:	f7ff ff80 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009d38:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8009e78 <_dwt_otpprogword32+0x16c>
 8009d3c:	2318      	movs	r3, #24
 8009d3e:	2200      	movs	r2, #0
 8009d40:	4641      	mov	r1, r8
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fac9 	bl	80092da <dwt_write16bitoffsetreg>
 8009d48:	2125      	movs	r1, #37	; 0x25
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff faec 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d50:	2102      	movs	r1, #2
 8009d52:	4620      	mov	r0, r4
 8009d54:	f7ff fae8 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d58:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7ff fae3 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d62:	b2f9      	uxtb	r1, r7
 8009d64:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f7ff fadd 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d72:	4620      	mov	r0, r4
 8009d74:	f7ff fad8 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff fad4 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d80:	2102      	movs	r1, #2
 8009d82:	4620      	mov	r0, r4
 8009d84:	f7ff fad0 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d88:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f7ff facb 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d92:	b2e9      	uxtb	r1, r5
 8009d94:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f7ff fac5 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009d9e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8009da2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009da6:	4620      	mov	r0, r4
 8009da8:	f7ff fabe 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009dac:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8009db0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009db4:	4620      	mov	r0, r4
 8009db6:	f7ff fab7 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009dba:	0e29      	lsrs	r1, r5, #24
 8009dbc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7ff fab1 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f7ff faad 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009dce:	213a      	movs	r1, #58	; 0x3a
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7ff faa9 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009dd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f7ff faa4 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009de0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7ff fa9f 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009dea:	2100      	movs	r1, #0
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff fa9b 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009df2:	213a      	movs	r1, #58	; 0x3a
 8009df4:	4620      	mov	r0, r4
 8009df6:	f7ff fa97 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009dfa:	f240 1101 	movw	r1, #257	; 0x101
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f7ff fa92 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009e04:	2302      	movs	r3, #2
 8009e06:	2200      	movs	r2, #0
 8009e08:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f7ff fa64 	bl	80092da <dwt_write16bitoffsetreg>
 8009e12:	2300      	movs	r3, #0
 8009e14:	461a      	mov	r2, r3
 8009e16:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f7ff fa5d 	bl	80092da <dwt_write16bitoffsetreg>
 8009e20:	2002      	movs	r0, #2
 8009e22:	f7f6 fc05 	bl	8000630 <deca_sleep>
 8009e26:	213a      	movs	r1, #58	; 0x3a
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7ff fa7d 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009e2e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7ff fa78 	bl	8009328 <__dwt_otp_write_wdata_id_reg>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009e40:	4620      	mov	r0, r4
 8009e42:	f7ff fa4a 	bl	80092da <dwt_write16bitoffsetreg>
 8009e46:	2300      	movs	r3, #0
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f7ff fa43 	bl	80092da <dwt_write16bitoffsetreg>
 8009e54:	2300      	movs	r3, #0
 8009e56:	461a      	mov	r2, r3
 8009e58:	4641      	mov	r1, r8
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f7ff fa3d 	bl	80092da <dwt_write16bitoffsetreg>
 8009e60:	464b      	mov	r3, r9
 8009e62:	2200      	movs	r2, #0
 8009e64:	4631      	mov	r1, r6
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7ff fa94 	bl	8009394 <dwt_write32bitoffsetreg>
 8009e6c:	b003      	add	sp, #12
 8009e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e72:	bf00      	nop
 8009e74:	00070044 	.word	0x00070044
 8009e78:	000b0008 	.word	0x000b0008

08009e7c <ull_setgpiomode>:
 8009e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	2400      	movs	r4, #0
 8009e82:	4623      	mov	r3, r4
 8009e84:	2601      	movs	r6, #1
 8009e86:	2707      	movs	r7, #7
 8009e88:	e002      	b.n	8009e90 <ull_setgpiomode+0x14>
 8009e8a:	3401      	adds	r4, #1
 8009e8c:	2c09      	cmp	r4, #9
 8009e8e:	d009      	beq.n	8009ea4 <ull_setgpiomode+0x28>
 8009e90:	fa06 f504 	lsl.w	r5, r6, r4
 8009e94:	420d      	tst	r5, r1
 8009e96:	d0f8      	beq.n	8009e8a <ull_setgpiomode+0xe>
 8009e98:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8009e9c:	fa07 f505 	lsl.w	r5, r7, r5
 8009ea0:	432b      	orrs	r3, r5
 8009ea2:	e7f2      	b.n	8009e8a <ull_setgpiomode+0xe>
 8009ea4:	401a      	ands	r2, r3
 8009ea6:	9200      	str	r2, [sp, #0]
 8009ea8:	43db      	mvns	r3, r3
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009eb0:	f7ff fec2 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009eb4:	b003      	add	sp, #12
 8009eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009eb8 <ull_writetxfctrl>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	2a7f      	cmp	r2, #127	; 0x7f
 8009ec0:	d912      	bls.n	8009ee8 <ull_writetxfctrl+0x30>
 8009ec2:	3280      	adds	r2, #128	; 0x80
 8009ec4:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8009ec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ecc:	9100      	str	r1, [sp, #0]
 8009ece:	4b0c      	ldr	r3, [pc, #48]	; (8009f00 <ull_writetxfctrl+0x48>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2120      	movs	r1, #32
 8009ed4:	f7ff feb0 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f7fe fe0b 	bl	8008afa <dwt_read8bitoffsetreg>
 8009ee4:	b002      	add	sp, #8
 8009ee6:	bd10      	pop	{r4, pc}
 8009ee8:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8009eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ef0:	9100      	str	r1, [sp, #0]
 8009ef2:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <ull_writetxfctrl+0x48>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2120      	movs	r1, #32
 8009ef8:	f7ff fe9e 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009efc:	e7f2      	b.n	8009ee4 <ull_writetxfctrl+0x2c>
 8009efe:	bf00      	nop
 8009f00:	fc00f400 	.word	0xfc00f400

08009f04 <prs_sys_status_and_or>:
 8009f04:	b500      	push	{lr}
 8009f06:	b083      	sub	sp, #12
 8009f08:	9200      	str	r2, [sp, #0]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2144      	movs	r1, #68	; 0x44
 8009f10:	f7ff fe92 	bl	8009c38 <dwt_modify32bitoffsetreg>
 8009f14:	2000      	movs	r0, #0
 8009f16:	b003      	add	sp, #12
 8009f18:	f85d fb04 	ldr.w	pc, [sp], #4

08009f1c <dwt_modify8bitoffsetreg>:
 8009f1c:	b500      	push	{lr}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	f88d 300c 	strb.w	r3, [sp, #12]
 8009f24:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009f28:	f88d 300d 	strb.w	r3, [sp, #13]
 8009f2c:	f248 0301 	movw	r3, #32769	; 0x8001
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	ab03      	add	r3, sp, #12
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	2302      	movs	r3, #2
 8009f38:	b292      	uxth	r2, r2
 8009f3a:	f7fe fd2e 	bl	800899a <dwt_xfer3xxx>
 8009f3e:	b005      	add	sp, #20
 8009f40:	f85d fb04 	ldr.w	pc, [sp], #4

08009f44 <ull_configciadiag>:
 8009f44:	b530      	push	{r4, r5, lr}
 8009f46:	b083      	sub	sp, #12
 8009f48:	4604      	mov	r4, r0
 8009f4a:	460d      	mov	r5, r1
 8009f4c:	f011 0f01 	tst.w	r1, #1
 8009f50:	d015      	beq.n	8009f7e <ull_configciadiag+0x3a>
 8009f52:	2300      	movs	r3, #0
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	23ef      	movs	r3, #239	; 0xef
 8009f58:	2202      	movs	r2, #2
 8009f5a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8009f5e:	f7ff ffdd 	bl	8009f1c <dwt_modify8bitoffsetreg>
 8009f62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009f64:	759d      	strb	r5, [r3, #22]
 8009f66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009f68:	7d9b      	ldrb	r3, [r3, #22]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	d010      	beq.n	8009f90 <ull_configciadiag+0x4c>
 8009f6e:	086b      	lsrs	r3, r5, #1
 8009f70:	2200      	movs	r2, #0
 8009f72:	490e      	ldr	r1, [pc, #56]	; (8009fac <ull_configciadiag+0x68>)
 8009f74:	4620      	mov	r0, r4
 8009f76:	f7ff fb9b 	bl	80096b0 <dwt_write8bitoffsetreg>
 8009f7a:	b003      	add	sp, #12
 8009f7c:	bd30      	pop	{r4, r5, pc}
 8009f7e:	2310      	movs	r3, #16
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	23ff      	movs	r3, #255	; 0xff
 8009f84:	2202      	movs	r2, #2
 8009f86:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8009f8a:	f7ff ffc7 	bl	8009f1c <dwt_modify8bitoffsetreg>
 8009f8e:	e7e8      	b.n	8009f62 <ull_configciadiag+0x1e>
 8009f90:	2301      	movs	r3, #1
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	23ff      	movs	r3, #255	; 0xff
 8009f96:	2200      	movs	r2, #0
 8009f98:	4904      	ldr	r1, [pc, #16]	; (8009fac <ull_configciadiag+0x68>)
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f7ff ffbe 	bl	8009f1c <dwt_modify8bitoffsetreg>
 8009fa0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009fa2:	7d93      	ldrb	r3, [r2, #22]
 8009fa4:	f043 0302 	orr.w	r3, r3, #2
 8009fa8:	7593      	strb	r3, [r2, #22]
 8009faa:	e7e6      	b.n	8009f7a <ull_configciadiag+0x36>
 8009fac:	00010020 	.word	0x00010020

08009fb0 <ull_calcbandwidthadj>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	2101      	movs	r1, #1
 8009fba:	f7ff f99f 	bl	80092fc <ull_force_clocks>
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f7ff fe5d 	bl	8009c80 <ull_enable_rf_tx>
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7ff fe8e 	bl	8009ce8 <ull_enable_rftx_blocks>
 8009fcc:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4915      	ldr	r1, [pc, #84]	; (800a028 <ull_calcbandwidthadj+0x78>)
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f7ff f980 	bl	80092da <dwt_write16bitoffsetreg>
 8009fda:	2303      	movs	r3, #3
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	23ff      	movs	r3, #255	; 0xff
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4912      	ldr	r1, [pc, #72]	; (800a02c <ull_calcbandwidthadj+0x7c>)
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f7ff ff99 	bl	8009f1c <dwt_modify8bitoffsetreg>
 8009fea:	4e10      	ldr	r6, [pc, #64]	; (800a02c <ull_calcbandwidthadj+0x7c>)
 8009fec:	2500      	movs	r5, #0
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7fe fd81 	bl	8008afa <dwt_read8bitoffsetreg>
 8009ff8:	f010 0f01 	tst.w	r0, #1
 8009ffc:	d1f7      	bne.n	8009fee <ull_calcbandwidthadj+0x3e>
 8009ffe:	4620      	mov	r0, r4
 800a000:	f7ff faf8 	bl	80095f4 <ull_disable_rftx_blocks>
 800a004:	2100      	movs	r1, #0
 800a006:	4620      	mov	r0, r4
 800a008:	f7ff fafe 	bl	8009608 <ull_disable_rf_tx>
 800a00c:	2105      	movs	r1, #5
 800a00e:	4620      	mov	r0, r4
 800a010:	f7ff f974 	bl	80092fc <ull_force_clocks>
 800a014:	2200      	movs	r2, #0
 800a016:	4906      	ldr	r1, [pc, #24]	; (800a030 <ull_calcbandwidthadj+0x80>)
 800a018:	4620      	mov	r0, r4
 800a01a:	f7fe fd6e 	bl	8008afa <dwt_read8bitoffsetreg>
 800a01e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a022:	b002      	add	sp, #8
 800a024:	bd70      	pop	{r4, r5, r6, pc}
 800a026:	bf00      	nop
 800a028:	0008001c 	.word	0x0008001c
 800a02c:	00080010 	.word	0x00080010
 800a030:	0007001c 	.word	0x0007001c

0800a034 <ull_configuretxrf>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4605      	mov	r5, r0
 800a038:	460c      	mov	r4, r1
 800a03a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800a03e:	b149      	cbz	r1, 800a054 <ull_configuretxrf+0x20>
 800a040:	f7ff ffb6 	bl	8009fb0 <ull_calcbandwidthadj>
 800a044:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800a048:	2200      	movs	r2, #0
 800a04a:	4905      	ldr	r1, [pc, #20]	; (800a060 <ull_configuretxrf+0x2c>)
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7ff f9a1 	bl	8009394 <dwt_write32bitoffsetreg>
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	7823      	ldrb	r3, [r4, #0]
 800a056:	2200      	movs	r2, #0
 800a058:	4902      	ldr	r1, [pc, #8]	; (800a064 <ull_configuretxrf+0x30>)
 800a05a:	f7ff fb29 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a05e:	e7f1      	b.n	800a044 <ull_configuretxrf+0x10>
 800a060:	00010004 	.word	0x00010004
 800a064:	0007001c 	.word	0x0007001c

0800a068 <ull_repeated_frames>:
 800a068:	b530      	push	{r4, r5, lr}
 800a06a:	b083      	sub	sp, #12
 800a06c:	4604      	mov	r4, r0
 800a06e:	460d      	mov	r5, r1
 800a070:	2310      	movs	r3, #16
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	23ff      	movs	r3, #255	; 0xff
 800a076:	2200      	movs	r2, #0
 800a078:	4906      	ldr	r1, [pc, #24]	; (800a094 <ull_repeated_frames+0x2c>)
 800a07a:	f7ff ff4f 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a07e:	462b      	mov	r3, r5
 800a080:	2d02      	cmp	r5, #2
 800a082:	bf38      	it	cc
 800a084:	2302      	movcc	r3, #2
 800a086:	2200      	movs	r2, #0
 800a088:	2128      	movs	r1, #40	; 0x28
 800a08a:	4620      	mov	r0, r4
 800a08c:	f7ff f982 	bl	8009394 <dwt_write32bitoffsetreg>
 800a090:	b003      	add	sp, #12
 800a092:	bd30      	pop	{r4, r5, pc}
 800a094:	000f0028 	.word	0x000f0028

0800a098 <ull_setdwstate>:
 800a098:	b530      	push	{r4, r5, lr}
 800a09a:	b083      	sub	sp, #12
 800a09c:	4604      	mov	r4, r0
 800a09e:	2901      	cmp	r1, #1
 800a0a0:	d01d      	beq.n	800a0de <ull_setdwstate+0x46>
 800a0a2:	2902      	cmp	r1, #2
 800a0a4:	d02f      	beq.n	800a106 <ull_setdwstate+0x6e>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	23ff      	movs	r3, #255	; 0xff
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	4925      	ldr	r1, [pc, #148]	; (800a144 <ull_setdwstate+0xac>)
 800a0b0:	f7ff ff34 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a0b4:	4d24      	ldr	r5, [pc, #144]	; (800a148 <ull_setdwstate+0xb0>)
 800a0b6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7ff fdb7 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	237f      	movs	r3, #127	; 0x7f
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f7ff ff21 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a0da:	b003      	add	sp, #12
 800a0dc:	bd30      	pop	{r4, r5, pc}
 800a0de:	2105      	movs	r1, #5
 800a0e0:	f7ff f90c 	bl	80092fc <ull_force_clocks>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4917      	ldr	r1, [pc, #92]	; (800a14c <ull_setdwstate+0xb4>)
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7ff fda1 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	9200      	str	r2, [sp, #0]
 800a0fa:	23ff      	movs	r3, #255	; 0xff
 800a0fc:	4912      	ldr	r1, [pc, #72]	; (800a148 <ull_setdwstate+0xb0>)
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7ff ff0c 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a104:	e7e9      	b.n	800a0da <ull_setdwstate+0x42>
 800a106:	2303      	movs	r3, #3
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	23ff      	movs	r3, #255	; 0xff
 800a10c:	2200      	movs	r2, #0
 800a10e:	490d      	ldr	r1, [pc, #52]	; (800a144 <ull_setdwstate+0xac>)
 800a110:	f7ff ff04 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a114:	4d0c      	ldr	r5, [pc, #48]	; (800a148 <ull_setdwstate+0xb0>)
 800a116:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a120:	2200      	movs	r2, #0
 800a122:	4629      	mov	r1, r5
 800a124:	4620      	mov	r0, r4
 800a126:	f7ff fd87 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a12a:	2300      	movs	r3, #0
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	237f      	movs	r3, #127	; 0x7f
 800a130:	2202      	movs	r2, #2
 800a132:	4629      	mov	r1, r5
 800a134:	4620      	mov	r0, r4
 800a136:	f7ff fef1 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a13a:	2105      	movs	r1, #5
 800a13c:	4620      	mov	r0, r4
 800a13e:	f7ff f8dd 	bl	80092fc <ull_force_clocks>
 800a142:	e7ca      	b.n	800a0da <ull_setdwstate+0x42>
 800a144:	00110004 	.word	0x00110004
 800a148:	00110008 	.word	0x00110008
 800a14c:	00090008 	.word	0x00090008

0800a150 <ull_configureframefilter>:
 800a150:	b530      	push	{r4, r5, lr}
 800a152:	b083      	sub	sp, #12
 800a154:	4605      	mov	r5, r0
 800a156:	2902      	cmp	r1, #2
 800a158:	d00e      	beq.n	800a178 <ull_configureframefilter+0x28>
 800a15a:	2400      	movs	r4, #0
 800a15c:	9400      	str	r4, [sp, #0]
 800a15e:	23fe      	movs	r3, #254	; 0xfe
 800a160:	4622      	mov	r2, r4
 800a162:	2110      	movs	r1, #16
 800a164:	f7ff feda 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a168:	4623      	mov	r3, r4
 800a16a:	4622      	mov	r2, r4
 800a16c:	2114      	movs	r1, #20
 800a16e:	4628      	mov	r0, r5
 800a170:	f7ff f8b3 	bl	80092da <dwt_write16bitoffsetreg>
 800a174:	b003      	add	sp, #12
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	4614      	mov	r4, r2
 800a17a:	2301      	movs	r3, #1
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	23ff      	movs	r3, #255	; 0xff
 800a180:	2200      	movs	r2, #0
 800a182:	2110      	movs	r1, #16
 800a184:	f7ff feca 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a188:	4623      	mov	r3, r4
 800a18a:	2200      	movs	r2, #0
 800a18c:	2114      	movs	r1, #20
 800a18e:	4628      	mov	r0, r5
 800a190:	f7ff f8a3 	bl	80092da <dwt_write16bitoffsetreg>
 800a194:	e7ee      	b.n	800a174 <ull_configureframefilter+0x24>
	...

0800a198 <ull_run_pgfcal>:
 800a198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	4605      	mov	r5, r0
 800a1a0:	4c29      	ldr	r4, [pc, #164]	; (800a248 <ull_run_pgfcal+0xb0>)
 800a1a2:	4b2a      	ldr	r3, [pc, #168]	; (800a24c <ull_run_pgfcal+0xb4>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	f7ff f8f4 	bl	8009394 <dwt_write32bitoffsetreg>
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	23ff      	movs	r3, #255	; 0xff
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f7ff feb0 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a1bc:	2403      	movs	r4, #3
 800a1be:	f04f 0814 	mov.w	r8, #20
 800a1c2:	4f23      	ldr	r7, [pc, #140]	; (800a250 <ull_run_pgfcal+0xb8>)
 800a1c4:	2600      	movs	r6, #0
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	f7f6 fa3d 	bl	8000646 <deca_usleep>
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f7fe fc92 	bl	8008afa <dwt_read8bitoffsetreg>
 800a1d6:	2801      	cmp	r0, #1
 800a1d8:	d034      	beq.n	800a244 <ull_run_pgfcal+0xac>
 800a1da:	1e63      	subs	r3, r4, #1
 800a1dc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a1e0:	d1f1      	bne.n	800a1c6 <ull_run_pgfcal+0x2e>
 800a1e2:	f06f 0402 	mvn.w	r4, #2
 800a1e6:	4e18      	ldr	r6, [pc, #96]	; (800a248 <ull_run_pgfcal+0xb0>)
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f7ff fa5e 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4915      	ldr	r1, [pc, #84]	; (800a250 <ull_run_pgfcal+0xb8>)
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f7ff fa58 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a200:	2301      	movs	r3, #1
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	23ff      	movs	r3, #255	; 0xff
 800a206:	2202      	movs	r2, #2
 800a208:	4631      	mov	r1, r6
 800a20a:	4628      	mov	r0, r5
 800a20c:	f7ff fe86 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a210:	2200      	movs	r2, #0
 800a212:	4910      	ldr	r1, [pc, #64]	; (800a254 <ull_run_pgfcal+0xbc>)
 800a214:	4628      	mov	r0, r5
 800a216:	f7fe fc48 	bl	8008aaa <dwt_read32bitoffsetreg>
 800a21a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a21e:	4298      	cmp	r0, r3
 800a220:	bf08      	it	eq
 800a222:	f06f 0403 	mvneq.w	r4, #3
 800a226:	2200      	movs	r2, #0
 800a228:	490b      	ldr	r1, [pc, #44]	; (800a258 <ull_run_pgfcal+0xc0>)
 800a22a:	4628      	mov	r0, r5
 800a22c:	f7fe fc3d 	bl	8008aaa <dwt_read32bitoffsetreg>
 800a230:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a234:	4298      	cmp	r0, r3
 800a236:	bf14      	ite	ne
 800a238:	4620      	movne	r0, r4
 800a23a:	f06f 0004 	mvneq.w	r0, #4
 800a23e:	b002      	add	sp, #8
 800a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a244:	2400      	movs	r4, #0
 800a246:	e7ce      	b.n	800a1e6 <ull_run_pgfcal+0x4e>
 800a248:	0004000c 	.word	0x0004000c
 800a24c:	00020001 	.word	0x00020001
 800a250:	00040020 	.word	0x00040020
 800a254:	00040014 	.word	0x00040014
 800a258:	0004001c 	.word	0x0004001c

0800a25c <ull_setinterrupt>:
 800a25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a260:	b083      	sub	sp, #12
 800a262:	4605      	mov	r5, r0
 800a264:	4688      	mov	r8, r1
 800a266:	4617      	mov	r7, r2
 800a268:	461c      	mov	r4, r3
 800a26a:	f7f6 f9c3 	bl	80005f4 <decamutexon>
 800a26e:	4606      	mov	r6, r0
 800a270:	2c02      	cmp	r4, #2
 800a272:	d019      	beq.n	800a2a8 <ull_setinterrupt+0x4c>
 800a274:	2c04      	cmp	r4, #4
 800a276:	d017      	beq.n	800a2a8 <ull_setinterrupt+0x4c>
 800a278:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d03f      	beq.n	800a300 <ull_setinterrupt+0xa4>
 800a280:	f04f 0900 	mov.w	r9, #0
 800a284:	f8cd 9000 	str.w	r9, [sp]
 800a288:	ea6f 0308 	mvn.w	r3, r8
 800a28c:	464a      	mov	r2, r9
 800a28e:	213c      	movs	r1, #60	; 0x3c
 800a290:	4628      	mov	r0, r5
 800a292:	f7ff fcd1 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a296:	f8cd 9000 	str.w	r9, [sp]
 800a29a:	43fb      	mvns	r3, r7
 800a29c:	464a      	mov	r2, r9
 800a29e:	2140      	movs	r1, #64	; 0x40
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f7ff fcc9 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a2a6:	e00b      	b.n	800a2c0 <ull_setinterrupt+0x64>
 800a2a8:	4643      	mov	r3, r8
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	213c      	movs	r1, #60	; 0x3c
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f7ff f870 	bl	8009394 <dwt_write32bitoffsetreg>
 800a2b4:	463b      	mov	r3, r7
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2140      	movs	r1, #64	; 0x40
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f7ff f86a 	bl	8009394 <dwt_write32bitoffsetreg>
 800a2c0:	3c03      	subs	r4, #3
 800a2c2:	b2e4      	uxtb	r4, r4
 800a2c4:	2c01      	cmp	r4, #1
 800a2c6:	d92d      	bls.n	800a324 <ull_setinterrupt+0xc8>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	213c      	movs	r1, #60	; 0x3c
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f7fe fbec 	bl	8008aaa <dwt_read32bitoffsetreg>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2144      	movs	r1, #68	; 0x44
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f7ff f85b 	bl	8009394 <dwt_write32bitoffsetreg>
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2140      	movs	r1, #64	; 0x40
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f7fe fbe1 	bl	8008aaa <dwt_read32bitoffsetreg>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2148      	movs	r1, #72	; 0x48
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f7ff f850 	bl	8009394 <dwt_write32bitoffsetreg>
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7f6 f98e 	bl	8000616 <decamutexoff>
 800a2fa:	b003      	add	sp, #12
 800a2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a300:	f8cd 8000 	str.w	r8, [sp]
 800a304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a308:	2200      	movs	r2, #0
 800a30a:	213c      	movs	r1, #60	; 0x3c
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7ff fc93 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a312:	9700      	str	r7, [sp, #0]
 800a314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a318:	2200      	movs	r2, #0
 800a31a:	2140      	movs	r1, #64	; 0x40
 800a31c:	4628      	mov	r0, r5
 800a31e:	f7ff fc8b 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a322:	e7cd      	b.n	800a2c0 <ull_setinterrupt+0x64>
 800a324:	2110      	movs	r1, #16
 800a326:	9100      	str	r1, [sp, #0]
 800a328:	23ff      	movs	r3, #255	; 0xff
 800a32a:	2202      	movs	r2, #2
 800a32c:	4628      	mov	r0, r5
 800a32e:	f7ff fdf5 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a332:	e7c9      	b.n	800a2c8 <ull_setinterrupt+0x6c>

0800a334 <prs_ack_enable>:
 800a334:	b500      	push	{lr}
 800a336:	b083      	sub	sp, #12
 800a338:	2900      	cmp	r1, #0
 800a33a:	bf0b      	itete	eq
 800a33c:	23ff      	moveq	r3, #255	; 0xff
 800a33e:	23f7      	movne	r3, #247	; 0xf7
 800a340:	2200      	moveq	r2, #0
 800a342:	2208      	movne	r2, #8
 800a344:	9200      	str	r2, [sp, #0]
 800a346:	2201      	movs	r2, #1
 800a348:	2110      	movs	r1, #16
 800a34a:	f7ff fde7 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a34e:	b003      	add	sp, #12
 800a350:	f85d fb04 	ldr.w	pc, [sp], #4

0800a354 <dwt_modify16bitoffsetreg>:
 800a354:	b510      	push	{r4, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800a35c:	f88d 300c 	strb.w	r3, [sp, #12]
 800a360:	0a1b      	lsrs	r3, r3, #8
 800a362:	f88d 300d 	strb.w	r3, [sp, #13]
 800a366:	f88d 400e 	strb.w	r4, [sp, #14]
 800a36a:	0a24      	lsrs	r4, r4, #8
 800a36c:	f88d 400f 	strb.w	r4, [sp, #15]
 800a370:	f248 0302 	movw	r3, #32770	; 0x8002
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	ab03      	add	r3, sp, #12
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	2304      	movs	r3, #4
 800a37c:	b292      	uxth	r2, r2
 800a37e:	f7fe fb0c 	bl	800899a <dwt_xfer3xxx>
 800a382:	b004      	add	sp, #16
 800a384:	bd10      	pop	{r4, pc}
	...

0800a388 <ull_setleds>:
 800a388:	b530      	push	{r4, r5, lr}
 800a38a:	b083      	sub	sp, #12
 800a38c:	4604      	mov	r4, r0
 800a38e:	f011 0f01 	tst.w	r1, #1
 800a392:	d01f      	beq.n	800a3d4 <ull_setleds+0x4c>
 800a394:	460d      	mov	r5, r1
 800a396:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a3a6:	f7ff fc47 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a3aa:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4918      	ldr	r1, [pc, #96]	; (800a418 <ull_setleds+0x90>)
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f7ff fc3d 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a3be:	f015 0f02 	tst.w	r5, #2
 800a3c2:	d11a      	bne.n	800a3fa <ull_setleds+0x72>
 800a3c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4914      	ldr	r1, [pc, #80]	; (800a41c <ull_setleds+0x94>)
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f7fe ffe1 	bl	8009394 <dwt_write32bitoffsetreg>
 800a3d2:	e010      	b.n	800a3f6 <ull_setleds+0x6e>
 800a3d4:	2500      	movs	r5, #0
 800a3d6:	9500      	str	r5, [sp, #0]
 800a3d8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a3dc:	462a      	mov	r2, r5
 800a3de:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a3e2:	f7ff fc29 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a3e6:	9500      	str	r5, [sp, #0]
 800a3e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	490b      	ldr	r1, [pc, #44]	; (800a41c <ull_setleds+0x94>)
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f7ff ffaf 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a3f6:	b003      	add	sp, #12
 800a3f8:	bd30      	pop	{r4, r5, pc}
 800a3fa:	4d08      	ldr	r5, [pc, #32]	; (800a41c <ull_setleds+0x94>)
 800a3fc:	4b08      	ldr	r3, [pc, #32]	; (800a420 <ull_setleds+0x98>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	4629      	mov	r1, r5
 800a402:	4620      	mov	r0, r4
 800a404:	f7fe ffc6 	bl	8009394 <dwt_write32bitoffsetreg>
 800a408:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a40c:	2200      	movs	r2, #0
 800a40e:	4629      	mov	r1, r5
 800a410:	4620      	mov	r0, r4
 800a412:	f7fe ffbf 	bl	8009394 <dwt_write32bitoffsetreg>
 800a416:	e7ee      	b.n	800a3f6 <ull_setleds+0x6e>
 800a418:	00110004 	.word	0x00110004
 800a41c:	00110018 	.word	0x00110018
 800a420:	000f0110 	.word	0x000f0110

0800a424 <ull_pgf_cal>:
 800a424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a426:	b083      	sub	sp, #12
 800a428:	4604      	mov	r4, r0
 800a42a:	2901      	cmp	r1, #1
 800a42c:	d009      	beq.n	800a442 <ull_pgf_cal+0x1e>
 800a42e:	2014      	movs	r0, #20
 800a430:	f7f6 f909 	bl	8000646 <deca_usleep>
 800a434:	4620      	mov	r0, r4
 800a436:	f7ff feaf 	bl	800a198 <ull_run_pgfcal>
 800a43a:	4605      	mov	r5, r0
 800a43c:	4628      	mov	r0, r5
 800a43e:	b003      	add	sp, #12
 800a440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a442:	4e0f      	ldr	r6, [pc, #60]	; (800a480 <ull_pgf_cal+0x5c>)
 800a444:	2200      	movs	r2, #0
 800a446:	4631      	mov	r1, r6
 800a448:	f7fe fb45 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800a44c:	4607      	mov	r7, r0
 800a44e:	f240 1307 	movw	r3, #263	; 0x107
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a458:	2200      	movs	r2, #0
 800a45a:	4631      	mov	r1, r6
 800a45c:	4620      	mov	r0, r4
 800a45e:	f7ff ff79 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a462:	2014      	movs	r0, #20
 800a464:	f7f6 f8ef 	bl	8000646 <deca_usleep>
 800a468:	4620      	mov	r0, r4
 800a46a:	f7ff fe95 	bl	800a198 <ull_run_pgfcal>
 800a46e:	4605      	mov	r5, r0
 800a470:	2200      	movs	r2, #0
 800a472:	9200      	str	r2, [sp, #0]
 800a474:	463b      	mov	r3, r7
 800a476:	4631      	mov	r1, r6
 800a478:	4620      	mov	r0, r4
 800a47a:	f7ff ff6b 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a47e:	e7dd      	b.n	800a43c <ull_pgf_cal+0x18>
 800a480:	00070048 	.word	0x00070048

0800a484 <ull_setgpiovalue>:
 800a484:	b500      	push	{lr}
 800a486:	b083      	sub	sp, #12
 800a488:	2a01      	cmp	r2, #1
 800a48a:	d009      	beq.n	800a4a0 <ull_setgpiovalue+0x1c>
 800a48c:	43cb      	mvns	r3, r1
 800a48e:	2200      	movs	r2, #0
 800a490:	9200      	str	r2, [sp, #0]
 800a492:	b29b      	uxth	r3, r3
 800a494:	4906      	ldr	r1, [pc, #24]	; (800a4b0 <ull_setgpiovalue+0x2c>)
 800a496:	f7ff ff5d 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a49a:	b003      	add	sp, #12
 800a49c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4a0:	9100      	str	r1, [sp, #0]
 800a4a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4901      	ldr	r1, [pc, #4]	; (800a4b0 <ull_setgpiovalue+0x2c>)
 800a4aa:	f7ff ff53 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a4ae:	e7f4      	b.n	800a49a <ull_setgpiovalue+0x16>
 800a4b0:	0005000c 	.word	0x0005000c

0800a4b4 <ull_readaccdata>:
 800a4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460f      	mov	r7, r1
 800a4bc:	4616      	mov	r6, r2
 800a4be:	461d      	mov	r5, r3
 800a4c0:	f248 0340 	movw	r3, #32832	; 0x8040
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	4918      	ldr	r1, [pc, #96]	; (800a530 <ull_readaccdata+0x7c>)
 800a4ce:	f7ff ff41 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a4d2:	19aa      	adds	r2, r5, r6
 800a4d4:	f243 0301 	movw	r3, #12289	; 0x3001
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	dc15      	bgt.n	800a508 <ull_readaccdata+0x54>
 800a4dc:	2d7f      	cmp	r5, #127	; 0x7f
 800a4de:	d91d      	bls.n	800a51c <ull_readaccdata+0x68>
 800a4e0:	2315      	movs	r3, #21
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4913      	ldr	r1, [pc, #76]	; (800a534 <ull_readaccdata+0x80>)
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7fe ff54 	bl	8009394 <dwt_write32bitoffsetreg>
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	4911      	ldr	r1, [pc, #68]	; (800a538 <ull_readaccdata+0x84>)
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7fe ff4e 	bl	8009394 <dwt_write32bitoffsetreg>
 800a4f8:	9700      	str	r7, [sp, #0]
 800a4fa:	4633      	mov	r3, r6
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a502:	4620      	mov	r0, r4
 800a504:	f7fe fac7 	bl	8008a96 <dwt_readfromdevice>
 800a508:	2200      	movs	r2, #0
 800a50a:	9200      	str	r2, [sp, #0]
 800a50c:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800a510:	4907      	ldr	r1, [pc, #28]	; (800a530 <ull_readaccdata+0x7c>)
 800a512:	4620      	mov	r0, r4
 800a514:	f7ff ff1e 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a518:	b003      	add	sp, #12
 800a51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a51c:	9700      	str	r7, [sp, #0]
 800a51e:	4633      	mov	r3, r6
 800a520:	462a      	mov	r2, r5
 800a522:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800a526:	4620      	mov	r0, r4
 800a528:	f7fe fab5 	bl	8008a96 <dwt_readfromdevice>
 800a52c:	e7ec      	b.n	800a508 <ull_readaccdata+0x54>
 800a52e:	bf00      	nop
 800a530:	00110004 	.word	0x00110004
 800a534:	001f0004 	.word	0x001f0004
 800a538:	001f0008 	.word	0x001f0008

0800a53c <ull_repeated_cw>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4606      	mov	r6, r0
 800a540:	460c      	mov	r4, r1
 800a542:	4615      	mov	r5, r2
 800a544:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <ull_repeated_cw+0x44>)
 800a546:	2202      	movs	r2, #2
 800a548:	490e      	ldr	r1, [pc, #56]	; (800a584 <ull_repeated_cw+0x48>)
 800a54a:	f7fe ff23 	bl	8009394 <dwt_write32bitoffsetreg>
 800a54e:	2d0f      	cmp	r5, #15
 800a550:	bfa8      	it	ge
 800a552:	250f      	movge	r5, #15
 800a554:	1e63      	subs	r3, r4, #1
 800a556:	2b03      	cmp	r3, #3
 800a558:	bf28      	it	cs
 800a55a:	2404      	movcs	r4, #4
 800a55c:	2310      	movs	r3, #16
 800a55e:	4123      	asrs	r3, r4
 800a560:	2200      	movs	r2, #0
 800a562:	4909      	ldr	r1, [pc, #36]	; (800a588 <ull_repeated_cw+0x4c>)
 800a564:	4630      	mov	r0, r6
 800a566:	f7fe ff15 	bl	8009394 <dwt_write32bitoffsetreg>
 800a56a:	1e63      	subs	r3, r4, #1
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	fa05 f303 	lsl.w	r3, r5, r3
 800a572:	2200      	movs	r2, #0
 800a574:	4905      	ldr	r1, [pc, #20]	; (800a58c <ull_repeated_cw+0x50>)
 800a576:	4630      	mov	r0, r6
 800a578:	f7fe ff0c 	bl	8009394 <dwt_write32bitoffsetreg>
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
 800a57e:	bf00      	nop
 800a580:	00d20874 	.word	0x00d20874
 800a584:	00110010 	.word	0x00110010
 800a588:	00070028 	.word	0x00070028
 800a58c:	00080018 	.word	0x00080018

0800a590 <ull_configure>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	b083      	sub	sp, #12
 800a596:	4604      	mov	r4, r0
 800a598:	460d      	mov	r5, r1
 800a59a:	f891 9000 	ldrb.w	r9, [r1]
 800a59e:	790b      	ldrb	r3, [r1, #4]
 800a5a0:	2b18      	cmp	r3, #24
 800a5a2:	d814      	bhi.n	800a5ce <ull_configure+0x3e>
 800a5a4:	78cf      	ldrb	r7, [r1, #3]
 800a5a6:	2f18      	cmp	r7, #24
 800a5a8:	bf94      	ite	ls
 800a5aa:	2700      	movls	r7, #0
 800a5ac:	2701      	movhi	r7, #1
 800a5ae:	b2ff      	uxtb	r7, r7
 800a5b0:	79eb      	ldrb	r3, [r5, #7]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	bf0c      	ite	eq
 800a5b6:	2110      	moveq	r1, #16
 800a5b8:	2100      	movne	r1, #0
 800a5ba:	786b      	ldrb	r3, [r5, #1]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	2b06      	cmp	r3, #6
 800a5c0:	d810      	bhi.n	800a5e4 <ull_configure+0x54>
 800a5c2:	e8df f003 	tbb	[pc, r3]
 800a5c6:	0f06      	.short	0x0f06
 800a5c8:	0f0c120f 	.word	0x0f0c120f
 800a5cc:	09          	.byte	0x09
 800a5cd:	00          	.byte	0x00
 800a5ce:	2701      	movs	r7, #1
 800a5d0:	e7ed      	b.n	800a5ae <ull_configure+0x1e>
 800a5d2:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800a5d6:	e00a      	b.n	800a5ee <ull_configure+0x5e>
 800a5d8:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800a5dc:	e007      	b.n	800a5ee <ull_configure+0x5e>
 800a5de:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800a5e2:	e004      	b.n	800a5ee <ull_configure+0x5e>
 800a5e4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800a5e8:	e001      	b.n	800a5ee <ull_configure+0x5e>
 800a5ea:	f04f 0a20 	mov.w	sl, #32
 800a5ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a5f0:	8a13      	ldrh	r3, [r2, #16]
 800a5f2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a5f6:	8213      	strh	r3, [r2, #16]
 800a5f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a5fa:	79ea      	ldrb	r2, [r5, #7]
 800a5fc:	72da      	strb	r2, [r3, #11]
 800a5fe:	7b2e      	ldrb	r6, [r5, #12]
 800a600:	1cb3      	adds	r3, r6, #2
 800a602:	2601      	movs	r6, #1
 800a604:	409e      	lsls	r6, r3
 800a606:	fa1f f886 	uxth.w	r8, r6
 800a60a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a60c:	4bca      	ldr	r3, [pc, #808]	; (800a938 <ull_configure+0x3a8>)
 800a60e:	fb03 f308 	mul.w	r3, r3, r8
 800a612:	0bdb      	lsrs	r3, r3, #15
 800a614:	8253      	strh	r3, [r2, #18]
 800a616:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a618:	7aea      	ldrb	r2, [r5, #11]
 800a61a:	755a      	strb	r2, [r3, #21]
 800a61c:	7a2b      	ldrb	r3, [r5, #8]
 800a61e:	015b      	lsls	r3, r3, #5
 800a620:	f003 0320 	and.w	r3, r3, #32
 800a624:	7b6a      	ldrb	r2, [r5, #13]
 800a626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a62a:	7aea      	ldrb	r2, [r5, #11]
 800a62c:	0312      	lsls	r2, r2, #12
 800a62e:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800a632:	4313      	orrs	r3, r2
 800a634:	430b      	orrs	r3, r1
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4bc0      	ldr	r3, [pc, #768]	; (800a93c <ull_configure+0x3ac>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	2110      	movs	r1, #16
 800a63e:	4620      	mov	r0, r4
 800a640:	f7ff fafa 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a644:	2f00      	cmp	r7, #0
 800a646:	f040 80fc 	bne.w	800a842 <ull_configure+0x2b2>
 800a64a:	7aeb      	ldrb	r3, [r5, #11]
 800a64c:	b1f3      	cbz	r3, 800a68c <ull_configure+0xfc>
 800a64e:	7b6b      	ldrb	r3, [r5, #13]
 800a650:	2b01      	cmp	r3, #1
 800a652:	f240 8121 	bls.w	800a898 <ull_configure+0x308>
 800a656:	7b2a      	ldrb	r2, [r5, #12]
 800a658:	4bb9      	ldr	r3, [pc, #740]	; (800a940 <ull_configure+0x3b0>)
 800a65a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a65e:	0112      	lsls	r2, r2, #4
 800a660:	0ad3      	lsrs	r3, r2, #11
 800a662:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800a666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a66a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a66e:	bf28      	it	cs
 800a670:	3301      	addcs	r3, #1
 800a672:	b29b      	uxth	r3, r3
 800a674:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800a678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a682:	2202      	movs	r2, #2
 800a684:	49af      	ldr	r1, [pc, #700]	; (800a944 <ull_configure+0x3b4>)
 800a686:	4620      	mov	r0, r4
 800a688:	f7ff fe64 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a68c:	2394      	movs	r3, #148	; 0x94
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	4bad      	ldr	r3, [pc, #692]	; (800a948 <ull_configure+0x3b8>)
 800a692:	2200      	movs	r2, #0
 800a694:	49ad      	ldr	r1, [pc, #692]	; (800a94c <ull_configure+0x3bc>)
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff face 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a69c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800a6a0:	f340 810d 	ble.w	800a8be <ull_configure+0x32e>
 800a6a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a6a6:	8a13      	ldrh	r3, [r2, #16]
 800a6a8:	f043 0320 	orr.w	r3, r3, #32
 800a6ac:	8213      	strh	r3, [r2, #16]
 800a6ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	49a5      	ldr	r1, [pc, #660]	; (800a950 <ull_configure+0x3c0>)
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7ff fe49 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a6c2:	7b6b      	ldrb	r3, [r5, #13]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	f000 8105 	beq.w	800a8d4 <ull_configure+0x344>
 800a6ca:	78ab      	ldrb	r3, [r5, #2]
 800a6cc:	f043 0310 	orr.w	r3, r3, #16
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	23fc      	movs	r3, #252	; 0xfc
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7ff fc1e 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a6e0:	1e73      	subs	r3, r6, #1
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f7fe ffe0 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a6f0:	786b      	ldrb	r3, [r5, #1]
 800a6f2:	2b07      	cmp	r3, #7
 800a6f4:	bf0c      	ite	eq
 800a6f6:	2308      	moveq	r3, #8
 800a6f8:	2300      	movne	r3, #0
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	2124      	movs	r1, #36	; 0x24
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7fe ffd6 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a704:	7aeb      	ldrb	r3, [r5, #11]
 800a706:	f003 0303 	and.w	r3, r3, #3
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	bf0c      	ite	eq
 800a70e:	4b91      	ldreq	r3, [pc, #580]	; (800a954 <ull_configure+0x3c4>)
 800a710:	4b91      	ldrne	r3, [pc, #580]	; (800a958 <ull_configure+0x3c8>)
 800a712:	2200      	movs	r2, #0
 800a714:	4991      	ldr	r1, [pc, #580]	; (800a95c <ull_configure+0x3cc>)
 800a716:	4620      	mov	r0, r4
 800a718:	f7fe fe3c 	bl	8009394 <dwt_write32bitoffsetreg>
 800a71c:	2200      	movs	r2, #0
 800a71e:	4990      	ldr	r1, [pc, #576]	; (800a960 <ull_configure+0x3d0>)
 800a720:	4620      	mov	r0, r4
 800a722:	f7fe f9c2 	bl	8008aaa <dwt_read32bitoffsetreg>
 800a726:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800a72a:	f020 001f 	bic.w	r0, r0, #31
 800a72e:	f1b9 0f09 	cmp.w	r9, #9
 800a732:	bf08      	it	eq
 800a734:	f040 0001 	orreq.w	r0, r0, #1
 800a738:	792a      	ldrb	r2, [r5, #4]
 800a73a:	0212      	lsls	r2, r2, #8
 800a73c:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800a740:	78eb      	ldrb	r3, [r5, #3]
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	b2db      	uxtb	r3, r3
 800a746:	431a      	orrs	r2, r3
 800a748:	796b      	ldrb	r3, [r5, #5]
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	f003 0306 	and.w	r3, r3, #6
 800a750:	4313      	orrs	r3, r2
 800a752:	4303      	orrs	r3, r0
 800a754:	2200      	movs	r2, #0
 800a756:	4982      	ldr	r1, [pc, #520]	; (800a960 <ull_configure+0x3d0>)
 800a758:	4620      	mov	r0, r4
 800a75a:	f7fe fe1b 	bl	8009394 <dwt_write32bitoffsetreg>
 800a75e:	79aa      	ldrb	r2, [r5, #6]
 800a760:	786b      	ldrb	r3, [r5, #1]
 800a762:	031b      	lsls	r3, r3, #12
 800a764:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800a76e:	2200      	movs	r2, #0
 800a770:	2120      	movs	r1, #32
 800a772:	4620      	mov	r0, r4
 800a774:	f7ff fa60 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a778:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800a77c:	b923      	cbnz	r3, 800a788 <ull_configure+0x1f8>
 800a77e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800a782:	726b      	strb	r3, [r5, #9]
 800a784:	2300      	movs	r3, #0
 800a786:	72ab      	strb	r3, [r5, #10]
 800a788:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800a78c:	2202      	movs	r2, #2
 800a78e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a792:	4620      	mov	r0, r4
 800a794:	f7fe fda1 	bl	80092da <dwt_write16bitoffsetreg>
 800a798:	2202      	movs	r2, #2
 800a79a:	4972      	ldr	r1, [pc, #456]	; (800a964 <ull_configure+0x3d4>)
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7fe f9ac 	bl	8008afa <dwt_read8bitoffsetreg>
 800a7a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a7a4:	7bdb      	ldrb	r3, [r3, #15]
 800a7a6:	454b      	cmp	r3, r9
 800a7a8:	f000 809e 	beq.w	800a8e8 <ull_configure+0x358>
 800a7ac:	2803      	cmp	r0, #3
 800a7ae:	f000 809f 	beq.w	800a8f0 <ull_configure+0x360>
 800a7b2:	f1b9 0f09 	cmp.w	r9, #9
 800a7b6:	f000 80a0 	beq.w	800a8fa <ull_configure+0x36a>
 800a7ba:	4b6b      	ldr	r3, [pc, #428]	; (800a968 <ull_configure+0x3d8>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	496b      	ldr	r1, [pc, #428]	; (800a96c <ull_configure+0x3dc>)
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f7fe fde7 	bl	8009394 <dwt_write32bitoffsetreg>
 800a7c6:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f7fe fd82 	bl	80092da <dwt_write16bitoffsetreg>
 800a7d6:	2314      	movs	r3, #20
 800a7d8:	2201      	movs	r2, #1
 800a7da:	4965      	ldr	r1, [pc, #404]	; (800a970 <ull_configure+0x3e0>)
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7fe ff67 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a7e2:	230e      	movs	r3, #14
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	4963      	ldr	r1, [pc, #396]	; (800a974 <ull_configure+0x3e4>)
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7fe ff61 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a7ee:	2381      	movs	r3, #129	; 0x81
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4961      	ldr	r1, [pc, #388]	; (800a978 <ull_configure+0x3e8>)
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f7fe ff5b 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2144      	movs	r1, #68	; 0x44
 800a800:	4620      	mov	r0, r4
 800a802:	f7fe ff55 	bl	80096b0 <dwt_write8bitoffsetreg>
 800a806:	2101      	movs	r1, #1
 800a808:	4620      	mov	r0, r4
 800a80a:	f7ff fc45 	bl	800a098 <ull_setdwstate>
 800a80e:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800a812:	f04f 0814 	mov.w	r8, #20
 800a816:	2700      	movs	r7, #0
 800a818:	2644      	movs	r6, #68	; 0x44
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7f5 ff13 	bl	8000646 <deca_usleep>
 800a820:	463a      	mov	r2, r7
 800a822:	4631      	mov	r1, r6
 800a824:	4620      	mov	r0, r4
 800a826:	f7fe f968 	bl	8008afa <dwt_read8bitoffsetreg>
 800a82a:	f010 0f02 	tst.w	r0, #2
 800a82e:	f040 80b5 	bne.w	800a99c <ull_configure+0x40c>
 800a832:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a836:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800a83a:	d1ee      	bne.n	800a81a <ull_configure+0x28a>
 800a83c:	f06f 0001 	mvn.w	r0, #1
 800a840:	e0de      	b.n	800aa00 <ull_configure+0x470>
 800a842:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a844:	8a13      	ldrh	r3, [r2, #16]
 800a846:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a84a:	8213      	strh	r3, [r2, #16]
 800a84c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800a856:	2200      	movs	r2, #0
 800a858:	493d      	ldr	r1, [pc, #244]	; (800a950 <ull_configure+0x3c0>)
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff f9ec 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a860:	f240 3306 	movw	r3, #774	; 0x306
 800a864:	2200      	movs	r2, #0
 800a866:	4945      	ldr	r1, [pc, #276]	; (800a97c <ull_configure+0x3ec>)
 800a868:	4620      	mov	r0, r4
 800a86a:	f7fe fd93 	bl	8009394 <dwt_write32bitoffsetreg>
 800a86e:	2300      	movs	r3, #0
 800a870:	461a      	mov	r2, r3
 800a872:	4943      	ldr	r1, [pc, #268]	; (800a980 <ull_configure+0x3f0>)
 800a874:	4620      	mov	r0, r4
 800a876:	f7fe fd8d 	bl	8009394 <dwt_write32bitoffsetreg>
 800a87a:	4b42      	ldr	r3, [pc, #264]	; (800a984 <ull_configure+0x3f4>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	4931      	ldr	r1, [pc, #196]	; (800a944 <ull_configure+0x3b4>)
 800a880:	4620      	mov	r0, r4
 800a882:	f7fe fd87 	bl	8009394 <dwt_write32bitoffsetreg>
 800a886:	239d      	movs	r3, #157	; 0x9d
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	4b2f      	ldr	r3, [pc, #188]	; (800a948 <ull_configure+0x3b8>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	492f      	ldr	r1, [pc, #188]	; (800a94c <ull_configure+0x3bc>)
 800a890:	4620      	mov	r0, r4
 800a892:	f7ff f9d1 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a896:	e714      	b.n	800a6c2 <ull_configure+0x132>
 800a898:	7b2a      	ldrb	r2, [r5, #12]
 800a89a:	4b29      	ldr	r3, [pc, #164]	; (800a940 <ull_configure+0x3b0>)
 800a89c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a8a0:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800a8a4:	fb02 f203 	mul.w	r2, r2, r3
 800a8a8:	0c93      	lsrs	r3, r2, #18
 800a8aa:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800a8ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a8b6:	bf28      	it	cs
 800a8b8:	3301      	addcs	r3, #1
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	e6da      	b.n	800a674 <ull_configure+0xe4>
 800a8be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4921      	ldr	r1, [pc, #132]	; (800a950 <ull_configure+0x3c0>)
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f7ff fd41 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a8d2:	e6f6      	b.n	800a6c2 <ull_configure+0x132>
 800a8d4:	78ab      	ldrb	r3, [r5, #2]
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	23ec      	movs	r3, #236	; 0xec
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f7ff fb1b 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a8e6:	e6fb      	b.n	800a6e0 <ull_configure+0x150>
 800a8e8:	2803      	cmp	r0, #3
 800a8ea:	f47f af62 	bne.w	800a7b2 <ull_configure+0x222>
 800a8ee:	e058      	b.n	800a9a2 <ull_configure+0x412>
 800a8f0:	2102      	movs	r1, #2
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f7ff fbd0 	bl	800a098 <ull_setdwstate>
 800a8f8:	e75b      	b.n	800a7b2 <ull_configure+0x222>
 800a8fa:	4b23      	ldr	r3, [pc, #140]	; (800a988 <ull_configure+0x3f8>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	491b      	ldr	r1, [pc, #108]	; (800a96c <ull_configure+0x3dc>)
 800a900:	4620      	mov	r0, r4
 800a902:	f7fe fd47 	bl	8009394 <dwt_write32bitoffsetreg>
 800a906:	f640 733c 	movw	r3, #3900	; 0xf3c
 800a90a:	2200      	movs	r2, #0
 800a90c:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800a910:	4620      	mov	r0, r4
 800a912:	f7fe fce2 	bl	80092da <dwt_write16bitoffsetreg>
 800a916:	e75e      	b.n	800a7d6 <ull_configure+0x246>
 800a918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a922:	2200      	movs	r2, #0
 800a924:	490a      	ldr	r1, [pc, #40]	; (800a950 <ull_configure+0x3c0>)
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff fd14 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a92c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a92e:	8a13      	ldrh	r3, [r2, #16]
 800a930:	f043 0308 	orr.w	r3, r3, #8
 800a934:	8213      	strh	r3, [r2, #16]
 800a936:	e046      	b.n	800a9c6 <ull_configure+0x436>
 800a938:	00026668 	.word	0x00026668
 800a93c:	fffc4fcf 	.word	0xfffc4fcf
 800a940:	08011fe8 	.word	0x08011fe8
 800a944:	000e0014 	.word	0x000e0014
 800a948:	bfffff00 	.word	0xbfffff00
 800a94c:	000e0018 	.word	0x000e0018
 800a950:	000b0008 	.word	0x000b0008
 800a954:	af5f35cc 	.word	0xaf5f35cc
 800a958:	af5f584c 	.word	0xaf5f584c
 800a95c:	0006000c 	.word	0x0006000c
 800a960:	00010008 	.word	0x00010008
 800a964:	000f0030 	.word	0x000f0030
 800a968:	1c071134 	.word	0x1c071134
 800a96c:	0007001c 	.word	0x0007001c
 800a970:	00070050 	.word	0x00070050
 800a974:	00070018 	.word	0x00070018
 800a978:	00090008 	.word	0x00090008
 800a97c:	000e000c 	.word	0x000e000c
 800a980:	000e0010 	.word	0x000e0010
 800a984:	000c5a0a 	.word	0x000c5a0a
 800a988:	1c010034 	.word	0x1c010034
 800a98c:	2200      	movs	r2, #0
 800a98e:	9200      	str	r2, [sp, #0]
 800a990:	23fe      	movs	r3, #254	; 0xfe
 800a992:	491d      	ldr	r1, [pc, #116]	; (800aa08 <ull_configure+0x478>)
 800a994:	4620      	mov	r0, r4
 800a996:	f7ff fac1 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800a99a:	e01e      	b.n	800a9da <ull_configure+0x44a>
 800a99c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a99e:	f883 900f 	strb.w	r9, [r3, #15]
 800a9a2:	792b      	ldrb	r3, [r5, #4]
 800a9a4:	3b09      	subs	r3, #9
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b0f      	cmp	r3, #15
 800a9aa:	d8ef      	bhi.n	800a98c <ull_configure+0x3fc>
 800a9ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a9ae:	7a1b      	ldrb	r3, [r3, #8]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d0b1      	beq.n	800a918 <ull_configure+0x388>
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7fe fda4 	bl	8009504 <ull_configmrxlut>
 800a9bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9be:	8a13      	ldrh	r3, [r2, #16]
 800a9c0:	f023 0308 	bic.w	r3, r3, #8
 800a9c4:	8213      	strh	r3, [r2, #16]
 800a9c6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	490d      	ldr	r1, [pc, #52]	; (800aa08 <ull_configure+0x478>)
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7ff fcbd 	bl	800a354 <dwt_modify16bitoffsetreg>
 800a9da:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800a9de:	bfcc      	ite	gt
 800a9e0:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800a9e4:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	4906      	ldr	r1, [pc, #24]	; (800aa0c <ull_configure+0x47c>)
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f7ff f920 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f7ff fd12 	bl	800a424 <ull_pgf_cal>
 800aa00:	b003      	add	sp, #12
 800aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	bf00      	nop
 800aa08:	00030018 	.word	0x00030018
 800aa0c:	00060010 	.word	0x00060010

0800aa10 <ull_initialise>:
 800aa10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa12:	b083      	sub	sp, #12
 800aa14:	4605      	mov	r5, r0
 800aa16:	460e      	mov	r6, r1
 800aa18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d051      	beq.n	800aac2 <ull_initialise+0xb2>
 800aa1e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800aa20:	2300      	movs	r3, #0
 800aa22:	73a3      	strb	r3, [r4, #14]
 800aa24:	2202      	movs	r2, #2
 800aa26:	8222      	strh	r2, [r4, #16]
 800aa28:	7523      	strb	r3, [r4, #20]
 800aa2a:	7563      	strb	r3, [r4, #21]
 800aa2c:	73e3      	strb	r3, [r4, #15]
 800aa2e:	7263      	strb	r3, [r4, #9]
 800aa30:	72a3      	strb	r3, [r4, #10]
 800aa32:	2104      	movs	r1, #4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f7fe fc8b 	bl	8009350 <_dwt_otpread>
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	2105      	movs	r1, #5
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f7fe fc86 	bl	8009350 <_dwt_otpread>
 800aa44:	b10f      	cbz	r7, 800aa4a <ull_initialise+0x3a>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d140      	bne.n	800aacc <ull_initialise+0xbc>
 800aa4a:	2120      	movs	r1, #32
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7fe fc7f 	bl	8009350 <_dwt_otpread>
 800aa52:	4b35      	ldr	r3, [pc, #212]	; (800ab28 <ull_initialise+0x118>)
 800aa54:	4298      	cmp	r0, r3
 800aa56:	bf0c      	ite	eq
 800aa58:	2301      	moveq	r3, #1
 800aa5a:	2300      	movne	r3, #0
 800aa5c:	7223      	strb	r3, [r4, #8]
 800aa5e:	f016 0f10 	tst.w	r6, #16
 800aa62:	d142      	bne.n	800aaea <ull_initialise+0xda>
 800aa64:	f016 0f20 	tst.w	r6, #32
 800aa68:	d145      	bne.n	800aaf6 <ull_initialise+0xe6>
 800aa6a:	f016 0f40 	tst.w	r6, #64	; 0x40
 800aa6e:	d148      	bne.n	800ab02 <ull_initialise+0xf2>
 800aa70:	f016 0f80 	tst.w	r6, #128	; 0x80
 800aa74:	d14c      	bne.n	800ab10 <ull_initialise+0x100>
 800aa76:	7aa3      	ldrb	r3, [r4, #10]
 800aa78:	b90b      	cbnz	r3, 800aa7e <ull_initialise+0x6e>
 800aa7a:	2385      	movs	r3, #133	; 0x85
 800aa7c:	72a3      	strb	r3, [r4, #10]
 800aa7e:	7a63      	ldrb	r3, [r4, #9]
 800aa80:	b90b      	cbnz	r3, 800aa86 <ull_initialise+0x76>
 800aa82:	2374      	movs	r3, #116	; 0x74
 800aa84:	7263      	strb	r3, [r4, #9]
 800aa86:	211f      	movs	r1, #31
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f7fe fc61 	bl	8009350 <_dwt_otpread>
 800aa8e:	7320      	strb	r0, [r4, #12]
 800aa90:	211e      	movs	r1, #30
 800aa92:	4628      	mov	r0, r5
 800aa94:	f7fe fc5c 	bl	8009350 <_dwt_otpread>
 800aa98:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800aa9c:	bf12      	itee	ne
 800aa9e:	7360      	strbne	r0, [r4, #13]
 800aaa0:	232e      	moveq	r3, #46	; 0x2e
 800aaa2:	7363      	strbeq	r3, [r4, #13]
 800aaa4:	7b63      	ldrb	r3, [r4, #13]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	4920      	ldr	r1, [pc, #128]	; (800ab2c <ull_initialise+0x11c>)
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f7fe fe00 	bl	80096b0 <dwt_write8bitoffsetreg>
 800aab0:	2135      	movs	r1, #53	; 0x35
 800aab2:	4628      	mov	r0, r5
 800aab4:	f7fe fc4c 	bl	8009350 <_dwt_otpread>
 800aab8:	4603      	mov	r3, r0
 800aaba:	bb78      	cbnz	r0, 800ab1c <ull_initialise+0x10c>
 800aabc:	2000      	movs	r0, #0
 800aabe:	b003      	add	sp, #12
 800aac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac2:	2028      	movs	r0, #40	; 0x28
 800aac4:	f006 ffe0 	bl	8011a88 <malloc>
 800aac8:	6528      	str	r0, [r5, #80]	; 0x50
 800aaca:	e7a8      	b.n	800aa1e <ull_initialise+0xe>
 800aacc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aad6:	2200      	movs	r2, #0
 800aad8:	4915      	ldr	r1, [pc, #84]	; (800ab30 <ull_initialise+0x120>)
 800aada:	4628      	mov	r0, r5
 800aadc:	f7ff fc3a 	bl	800a354 <dwt_modify16bitoffsetreg>
 800aae0:	8a23      	ldrh	r3, [r4, #16]
 800aae2:	f043 0310 	orr.w	r3, r3, #16
 800aae6:	8223      	strh	r3, [r4, #16]
 800aae8:	e7af      	b.n	800aa4a <ull_initialise+0x3a>
 800aaea:	2106      	movs	r1, #6
 800aaec:	4628      	mov	r0, r5
 800aaee:	f7fe fc2f 	bl	8009350 <_dwt_otpread>
 800aaf2:	6020      	str	r0, [r4, #0]
 800aaf4:	e7b6      	b.n	800aa64 <ull_initialise+0x54>
 800aaf6:	2107      	movs	r1, #7
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f7fe fc29 	bl	8009350 <_dwt_otpread>
 800aafe:	6060      	str	r0, [r4, #4]
 800ab00:	e7b3      	b.n	800aa6a <ull_initialise+0x5a>
 800ab02:	2108      	movs	r1, #8
 800ab04:	4628      	mov	r0, r5
 800ab06:	f7fe fc23 	bl	8009350 <_dwt_otpread>
 800ab0a:	0c00      	lsrs	r0, r0, #16
 800ab0c:	7260      	strb	r0, [r4, #9]
 800ab0e:	e7af      	b.n	800aa70 <ull_initialise+0x60>
 800ab10:	2109      	movs	r1, #9
 800ab12:	4628      	mov	r0, r5
 800ab14:	f7fe fc1c 	bl	8009350 <_dwt_otpread>
 800ab18:	72a0      	strb	r0, [r4, #10]
 800ab1a:	e7ac      	b.n	800aa76 <ull_initialise+0x66>
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4905      	ldr	r1, [pc, #20]	; (800ab34 <ull_initialise+0x124>)
 800ab20:	4628      	mov	r0, r5
 800ab22:	f7fe fc37 	bl	8009394 <dwt_write32bitoffsetreg>
 800ab26:	e7c9      	b.n	800aabc <ull_initialise+0xac>
 800ab28:	10000240 	.word	0x10000240
 800ab2c:	00090014 	.word	0x00090014
 800ab30:	000b0008 	.word	0x000b0008
 800ab34:	00090004 	.word	0x00090004

0800ab38 <ull_rxenable>:
 800ab38:	b530      	push	{r4, r5, lr}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	b171      	cbz	r1, 800ab60 <ull_rxenable+0x28>
 800ab42:	f021 0302 	bic.w	r3, r1, #2
 800ab46:	3b01      	subs	r3, #1
 800ab48:	2b0f      	cmp	r3, #15
 800ab4a:	d862      	bhi.n	800ac12 <ull_rxenable+0xda>
 800ab4c:	e8df f003 	tbb	[pc, r3]
 800ab50:	24616111 	.word	0x24616111
 800ab54:	2d616161 	.word	0x2d616161
 800ab58:	61616161 	.word	0x61616161
 800ab5c:	3a616161 	.word	0x3a616161
 800ab60:	2102      	movs	r1, #2
 800ab62:	9101      	str	r1, [sp, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	9200      	str	r2, [sp, #0]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	f7fd ff16 	bl	800899a <dwt_xfer3xxx>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	e010      	b.n	800ab94 <ull_rxenable+0x5c>
 800ab72:	2302      	movs	r3, #2
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	9200      	str	r2, [sp, #0]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	2104      	movs	r1, #4
 800ab7e:	f7fd ff0c 	bl	800899a <dwt_xfer3xxx>
 800ab82:	2203      	movs	r2, #3
 800ab84:	2144      	movs	r1, #68	; 0x44
 800ab86:	4628      	mov	r0, r5
 800ab88:	f7fd ffb7 	bl	8008afa <dwt_read8bitoffsetreg>
 800ab8c:	f010 0f08 	tst.w	r0, #8
 800ab90:	d125      	bne.n	800abde <ull_rxenable+0xa6>
 800ab92:	2000      	movs	r0, #0
 800ab94:	b003      	add	sp, #12
 800ab96:	bd30      	pop	{r4, r5, pc}
 800ab98:	2302      	movs	r3, #2
 800ab9a:	9301      	str	r3, [sp, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	9200      	str	r2, [sp, #0]
 800aba0:	4613      	mov	r3, r2
 800aba2:	210a      	movs	r1, #10
 800aba4:	f7fd fef9 	bl	800899a <dwt_xfer3xxx>
 800aba8:	e7eb      	b.n	800ab82 <ull_rxenable+0x4a>
 800abaa:	2100      	movs	r1, #0
 800abac:	f7fe fc07 	bl	80093be <_dwt_adjust_delaytime>
 800abb0:	2302      	movs	r3, #2
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	9200      	str	r2, [sp, #0]
 800abb8:	4613      	mov	r3, r2
 800abba:	2108      	movs	r1, #8
 800abbc:	4628      	mov	r0, r5
 800abbe:	f7fd feec 	bl	800899a <dwt_xfer3xxx>
 800abc2:	e7de      	b.n	800ab82 <ull_rxenable+0x4a>
 800abc4:	2101      	movs	r1, #1
 800abc6:	f7fe fbfa 	bl	80093be <_dwt_adjust_delaytime>
 800abca:	2302      	movs	r3, #2
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	9200      	str	r2, [sp, #0]
 800abd2:	4613      	mov	r3, r2
 800abd4:	2106      	movs	r1, #6
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7fd fedf 	bl	800899a <dwt_xfer3xxx>
 800abdc:	e7d1      	b.n	800ab82 <ull_rxenable+0x4a>
 800abde:	2302      	movs	r3, #2
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	2100      	movs	r1, #0
 800abe4:	9100      	str	r1, [sp, #0]
 800abe6:	460b      	mov	r3, r1
 800abe8:	460a      	mov	r2, r1
 800abea:	4628      	mov	r0, r5
 800abec:	f7fd fed5 	bl	800899a <dwt_xfer3xxx>
 800abf0:	f014 0f02 	tst.w	r4, #2
 800abf4:	d002      	beq.n	800abfc <ull_rxenable+0xc4>
 800abf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abfa:	e7cb      	b.n	800ab94 <ull_rxenable+0x5c>
 800abfc:	2102      	movs	r1, #2
 800abfe:	9101      	str	r1, [sp, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	9200      	str	r2, [sp, #0]
 800ac04:	4613      	mov	r3, r2
 800ac06:	4628      	mov	r0, r5
 800ac08:	f7fd fec7 	bl	800899a <dwt_xfer3xxx>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac10:	e7c0      	b.n	800ab94 <ull_rxenable+0x5c>
 800ac12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac16:	e7bd      	b.n	800ab94 <ull_rxenable+0x5c>

0800ac18 <ull_softreset_no_sema_fcmd>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	4606      	mov	r6, r0
 800ac1e:	2502      	movs	r5, #2
 800ac20:	9501      	str	r5, [sp, #4]
 800ac22:	2400      	movs	r4, #0
 800ac24:	9400      	str	r4, [sp, #0]
 800ac26:	4623      	mov	r3, r4
 800ac28:	4622      	mov	r2, r4
 800ac2a:	2119      	movs	r1, #25
 800ac2c:	f7fd feb5 	bl	800899a <dwt_xfer3xxx>
 800ac30:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ac32:	739c      	strb	r4, [r3, #14]
 800ac34:	821d      	strh	r5, [r3, #16]
 800ac36:	751c      	strb	r4, [r3, #20]
 800ac38:	755c      	strb	r4, [r3, #21]
 800ac3a:	73dc      	strb	r4, [r3, #15]
 800ac3c:	b002      	add	sp, #8
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}

0800ac40 <ull_softreset_fcmd>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	4606      	mov	r6, r0
 800ac46:	2502      	movs	r5, #2
 800ac48:	9501      	str	r5, [sp, #4]
 800ac4a:	2400      	movs	r4, #0
 800ac4c:	9400      	str	r4, [sp, #0]
 800ac4e:	4623      	mov	r3, r4
 800ac50:	4622      	mov	r2, r4
 800ac52:	2118      	movs	r1, #24
 800ac54:	f7fd fea1 	bl	800899a <dwt_xfer3xxx>
 800ac58:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ac5a:	739c      	strb	r4, [r3, #14]
 800ac5c:	821d      	strh	r5, [r3, #16]
 800ac5e:	751c      	strb	r4, [r3, #20]
 800ac60:	755c      	strb	r4, [r3, #21]
 800ac62:	73dc      	strb	r4, [r3, #15]
 800ac64:	b002      	add	sp, #8
 800ac66:	bd70      	pop	{r4, r5, r6, pc}

0800ac68 <dwt_ioctl>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	b091      	sub	sp, #68	; 0x44
 800ac6e:	4606      	mov	r6, r0
 800ac70:	4615      	mov	r5, r2
 800ac72:	461c      	mov	r4, r3
 800ac74:	299c      	cmp	r1, #156	; 0x9c
 800ac76:	f200 809f 	bhi.w	800adb8 <dwt_ioctl+0x150>
 800ac7a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ac7e:	0a54      	.short	0x0a54
 800ac80:	00a30a5f 	.word	0x00a30a5f
 800ac84:	00c000a7 	.word	0x00c000a7
 800ac88:	0192014c 	.word	0x0192014c
 800ac8c:	0156016f 	.word	0x0156016f
 800ac90:	01ad01a2 	.word	0x01ad01a2
 800ac94:	01bd01b5 	.word	0x01bd01b5
 800ac98:	01cd01c5 	.word	0x01cd01c5
 800ac9c:	01d901d5 	.word	0x01d901d5
 800aca0:	027201e1 	.word	0x027201e1
 800aca4:	02850280 	.word	0x02850280
 800aca8:	0294028f 	.word	0x0294028f
 800acac:	02a20299 	.word	0x02a20299
 800acb0:	02dd02a7 	.word	0x02dd02a7
 800acb4:	030502fa 	.word	0x030502fa
 800acb8:	031a0310 	.word	0x031a0310
 800acbc:	03480352 	.word	0x03480352
 800acc0:	0324033e 	.word	0x0324033e
 800acc4:	03810331 	.word	0x03810331
 800acc8:	022f01fc 	.word	0x022f01fc
 800accc:	0245023d 	.word	0x0245023d
 800acd0:	097d0259 	.word	0x097d0259
 800acd4:	03610982 	.word	0x03610982
 800acd8:	03a3039f 	.word	0x03a3039f
 800acdc:	03b103ac 	.word	0x03b103ac
 800ace0:	03e503db 	.word	0x03e503db
 800ace4:	041703ed 	.word	0x041703ed
 800ace8:	042e0423 	.word	0x042e0423
 800acec:	04390357 	.word	0x04390357
 800acf0:	04540442 	.word	0x04540442
 800acf4:	047e046d 	.word	0x047e046d
 800acf8:	04ca04c0 	.word	0x04ca04c0
 800acfc:	04ff04f0 	.word	0x04ff04f0
 800ad00:	0508051a 	.word	0x0508051a
 800ad04:	056a0524 	.word	0x056a0524
 800ad08:	05a20582 	.word	0x05a20582
 800ad0c:	05e505d1 	.word	0x05e505d1
 800ad10:	060a05ee 	.word	0x060a05ee
 800ad14:	074305f7 	.word	0x074305f7
 800ad18:	07d30785 	.word	0x07d30785
 800ad1c:	07e407d9 	.word	0x07e407d9
 800ad20:	081d07fd 	.word	0x081d07fd
 800ad24:	08310827 	.word	0x08310827
 800ad28:	0868085f 	.word	0x0868085f
 800ad2c:	0877086e 	.word	0x0877086e
 800ad30:	08910884 	.word	0x08910884
 800ad34:	08a4089b 	.word	0x08a4089b
 800ad38:	08b808ad 	.word	0x08b808ad
 800ad3c:	08c908c3 	.word	0x08c908c3
 800ad40:	08f708ec 	.word	0x08f708ec
 800ad44:	090d0902 	.word	0x090d0902
 800ad48:	0959094e 	.word	0x0959094e
 800ad4c:	09880972 	.word	0x09880972
 800ad50:	0a0709fd 	.word	0x0a0709fd
 800ad54:	0a670a12 	.word	0x0a670a12
 800ad58:	0a490a1c 	.word	0x0a490a1c
 800ad5c:	09c60777 	.word	0x09c60777
 800ad60:	0ad509e7 	.word	0x0ad509e7
 800ad64:	0a740aca 	.word	0x0a740aca
 800ad68:	0a8a0a7f 	.word	0x0a8a0a7f
 800ad6c:	0aa00a95 	.word	0x0aa00a95
 800ad70:	0ab60aab 	.word	0x0ab60aab
 800ad74:	0cb50abf 	.word	0x0cb50abf
 800ad78:	0d2a0cef 	.word	0x0d2a0cef
 800ad7c:	0df90d4d 	.word	0x0df90d4d
 800ad80:	0afd0e0e 	.word	0x0afd0e0e
 800ad84:	0bf40bc1 	.word	0x0bf40bc1
 800ad88:	0c040bff 	.word	0x0c040bff
 800ad8c:	0c140c09 	.word	0x0c140c09
 800ad90:	0c320c27 	.word	0x0c320c27
 800ad94:	0c5c0c47 	.word	0x0c5c0c47
 800ad98:	009d0c98 	.word	0x009d0c98
 800ad9c:	009d009d 	.word	0x009d009d
 800ada0:	009d009d 	.word	0x009d009d
 800ada4:	009d009d 	.word	0x009d009d
 800ada8:	0d64009d 	.word	0x0d64009d
 800adac:	0ec20d75 	.word	0x0ec20d75
 800adb0:	0db40dbf 	.word	0x0db40dbf
 800adb4:	0dca0dd3 	.word	0x0dca0dd3
 800adb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800adbc:	4628      	mov	r0, r5
 800adbe:	b011      	add	sp, #68	; 0x44
 800adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc4:	6843      	ldr	r3, [r0, #4]
 800adc6:	4798      	blx	r3
 800adc8:	2500      	movs	r5, #0
 800adca:	e7f7      	b.n	800adbc <dwt_ioctl+0x154>
 800adcc:	2202      	movs	r2, #2
 800adce:	49b4      	ldr	r1, [pc, #720]	; (800b0a0 <dwt_ioctl+0x438>)
 800add0:	f7fd fe93 	bl	8008afa <dwt_read8bitoffsetreg>
 800add4:	2803      	cmp	r0, #3
 800add6:	d801      	bhi.n	800addc <dwt_ioctl+0x174>
 800add8:	2500      	movs	r5, #0
 800adda:	e7ef      	b.n	800adbc <dwt_ioctl+0x154>
 800addc:	f7f5 fc0a 	bl	80005f4 <decamutexon>
 800ade0:	4604      	mov	r4, r0
 800ade2:	2302      	movs	r3, #2
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	2500      	movs	r5, #0
 800ade8:	9500      	str	r5, [sp, #0]
 800adea:	462b      	mov	r3, r5
 800adec:	462a      	mov	r2, r5
 800adee:	4629      	mov	r1, r5
 800adf0:	4630      	mov	r0, r6
 800adf2:	f7fd fdd2 	bl	800899a <dwt_xfer3xxx>
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7f5 fc0d 	bl	8000616 <decamutexoff>
 800adfc:	e7de      	b.n	800adbc <dwt_ioctl+0x154>
 800adfe:	2c00      	cmp	r4, #0
 800ae00:	f001 8602 	beq.w	800ca08 <dwt_ioctl+0x1da0>
 800ae04:	7824      	ldrb	r4, [r4, #0]
 800ae06:	f014 0f1d 	tst.w	r4, #29
 800ae0a:	d061      	beq.n	800aed0 <dwt_ioctl+0x268>
 800ae0c:	f014 0f01 	tst.w	r4, #1
 800ae10:	d023      	beq.n	800ae5a <dwt_ioctl+0x1f2>
 800ae12:	f014 0f02 	tst.w	r4, #2
 800ae16:	f04f 0302 	mov.w	r3, #2
 800ae1a:	9301      	str	r3, [sp, #4]
 800ae1c:	f04f 0200 	mov.w	r2, #0
 800ae20:	9200      	str	r2, [sp, #0]
 800ae22:	4613      	mov	r3, r2
 800ae24:	bf14      	ite	ne
 800ae26:	210d      	movne	r1, #13
 800ae28:	2103      	moveq	r1, #3
 800ae2a:	f7fd fdb6 	bl	800899a <dwt_xfer3xxx>
 800ae2e:	2203      	movs	r2, #3
 800ae30:	2144      	movs	r1, #68	; 0x44
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7fd fe61 	bl	8008afa <dwt_read8bitoffsetreg>
 800ae38:	f010 0f08 	tst.w	r0, #8
 800ae3c:	bf08      	it	eq
 800ae3e:	2500      	moveq	r5, #0
 800ae40:	d0bc      	beq.n	800adbc <dwt_ioctl+0x154>
 800ae42:	2302      	movs	r3, #2
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	2100      	movs	r1, #0
 800ae48:	9100      	str	r1, [sp, #0]
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	460a      	mov	r2, r1
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7fd fda3 	bl	800899a <dwt_xfer3xxx>
 800ae54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ae58:	e7b0      	b.n	800adbc <dwt_ioctl+0x154>
 800ae5a:	f014 0f08 	tst.w	r4, #8
 800ae5e:	d111      	bne.n	800ae84 <dwt_ioctl+0x21c>
 800ae60:	f014 0f10 	tst.w	r4, #16
 800ae64:	d121      	bne.n	800aeaa <dwt_ioctl+0x242>
 800ae66:	f014 0f02 	tst.w	r4, #2
 800ae6a:	f04f 0302 	mov.w	r3, #2
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	f04f 0200 	mov.w	r2, #0
 800ae74:	9200      	str	r2, [sp, #0]
 800ae76:	4613      	mov	r3, r2
 800ae78:	bf14      	ite	ne
 800ae7a:	2110      	movne	r1, #16
 800ae7c:	2109      	moveq	r1, #9
 800ae7e:	f7fd fd8c 	bl	800899a <dwt_xfer3xxx>
 800ae82:	e7d4      	b.n	800ae2e <dwt_ioctl+0x1c6>
 800ae84:	2100      	movs	r1, #0
 800ae86:	f7fe fa9a 	bl	80093be <_dwt_adjust_delaytime>
 800ae8a:	f014 0f02 	tst.w	r4, #2
 800ae8e:	f04f 0302 	mov.w	r3, #2
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	f04f 0200 	mov.w	r2, #0
 800ae98:	9200      	str	r2, [sp, #0]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	bf14      	ite	ne
 800ae9e:	210f      	movne	r1, #15
 800aea0:	2107      	moveq	r1, #7
 800aea2:	4630      	mov	r0, r6
 800aea4:	f7fd fd79 	bl	800899a <dwt_xfer3xxx>
 800aea8:	e7c1      	b.n	800ae2e <dwt_ioctl+0x1c6>
 800aeaa:	2101      	movs	r1, #1
 800aeac:	f7fe fa87 	bl	80093be <_dwt_adjust_delaytime>
 800aeb0:	f014 0f02 	tst.w	r4, #2
 800aeb4:	f04f 0302 	mov.w	r3, #2
 800aeb8:	9301      	str	r3, [sp, #4]
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	9200      	str	r2, [sp, #0]
 800aec0:	4613      	mov	r3, r2
 800aec2:	bf14      	ite	ne
 800aec4:	210e      	movne	r1, #14
 800aec6:	2105      	moveq	r1, #5
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7fd fd66 	bl	800899a <dwt_xfer3xxx>
 800aece:	e7ae      	b.n	800ae2e <dwt_ioctl+0x1c6>
 800aed0:	f014 0f20 	tst.w	r4, #32
 800aed4:	d00f      	beq.n	800aef6 <dwt_ioctl+0x28e>
 800aed6:	f014 0f02 	tst.w	r4, #2
 800aeda:	f04f 0302 	mov.w	r3, #2
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	f04f 0500 	mov.w	r5, #0
 800aee4:	9500      	str	r5, [sp, #0]
 800aee6:	462b      	mov	r3, r5
 800aee8:	462a      	mov	r2, r5
 800aeea:	bf14      	ite	ne
 800aeec:	2111      	movne	r1, #17
 800aeee:	210b      	moveq	r1, #11
 800aef0:	f7fd fd53 	bl	800899a <dwt_xfer3xxx>
 800aef4:	e762      	b.n	800adbc <dwt_ioctl+0x154>
 800aef6:	f014 0f02 	tst.w	r4, #2
 800aefa:	f04f 0302 	mov.w	r3, #2
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	f04f 0500 	mov.w	r5, #0
 800af04:	9500      	str	r5, [sp, #0]
 800af06:	462b      	mov	r3, r5
 800af08:	462a      	mov	r2, r5
 800af0a:	bf14      	ite	ne
 800af0c:	210c      	movne	r1, #12
 800af0e:	2101      	moveq	r1, #1
 800af10:	f7fd fd43 	bl	800899a <dwt_xfer3xxx>
 800af14:	e752      	b.n	800adbc <dwt_ioctl+0x154>
 800af16:	2c00      	cmp	r4, #0
 800af18:	f001 8579 	beq.w	800ca0e <dwt_ioctl+0x1da6>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	2200      	movs	r2, #0
 800af20:	2128      	movs	r1, #40	; 0x28
 800af22:	f7fe fa37 	bl	8009394 <dwt_write32bitoffsetreg>
 800af26:	2500      	movs	r5, #0
 800af28:	e748      	b.n	800adbc <dwt_ioctl+0x154>
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	2200      	movs	r2, #0
 800af2e:	495d      	ldr	r1, [pc, #372]	; (800b0a4 <dwt_ioctl+0x43c>)
 800af30:	f7fe fa30 	bl	8009394 <dwt_write32bitoffsetreg>
 800af34:	6863      	ldr	r3, [r4, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	495b      	ldr	r1, [pc, #364]	; (800b0a8 <dwt_ioctl+0x440>)
 800af3a:	4630      	mov	r0, r6
 800af3c:	f7fe fa2a 	bl	8009394 <dwt_write32bitoffsetreg>
 800af40:	68a3      	ldr	r3, [r4, #8]
 800af42:	2200      	movs	r2, #0
 800af44:	4959      	ldr	r1, [pc, #356]	; (800b0ac <dwt_ioctl+0x444>)
 800af46:	4630      	mov	r0, r6
 800af48:	f7fe fa24 	bl	8009394 <dwt_write32bitoffsetreg>
 800af4c:	68e3      	ldr	r3, [r4, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	4957      	ldr	r1, [pc, #348]	; (800b0b0 <dwt_ioctl+0x448>)
 800af52:	4630      	mov	r0, r6
 800af54:	f7fe fa1e 	bl	8009394 <dwt_write32bitoffsetreg>
 800af58:	2500      	movs	r5, #0
 800af5a:	e72f      	b.n	800adbc <dwt_ioctl+0x154>
 800af5c:	2c00      	cmp	r4, #0
 800af5e:	f001 8559 	beq.w	800ca14 <dwt_ioctl+0x1dac>
 800af62:	8823      	ldrh	r3, [r4, #0]
 800af64:	6865      	ldr	r5, [r4, #4]
 800af66:	2d03      	cmp	r5, #3
 800af68:	f201 8557 	bhi.w	800ca1a <dwt_ioctl+0x1db2>
 800af6c:	e8df f005 	tbb	[pc, r5]
 800af70:	130d0702 	.word	0x130d0702
 800af74:	2200      	movs	r2, #0
 800af76:	494f      	ldr	r1, [pc, #316]	; (800b0b4 <dwt_ioctl+0x44c>)
 800af78:	f7fe f9af 	bl	80092da <dwt_write16bitoffsetreg>
 800af7c:	e71e      	b.n	800adbc <dwt_ioctl+0x154>
 800af7e:	2202      	movs	r2, #2
 800af80:	494c      	ldr	r1, [pc, #304]	; (800b0b4 <dwt_ioctl+0x44c>)
 800af82:	f7fe f9aa 	bl	80092da <dwt_write16bitoffsetreg>
 800af86:	2500      	movs	r5, #0
 800af88:	e718      	b.n	800adbc <dwt_ioctl+0x154>
 800af8a:	2200      	movs	r2, #0
 800af8c:	494a      	ldr	r1, [pc, #296]	; (800b0b8 <dwt_ioctl+0x450>)
 800af8e:	f7fe f9a4 	bl	80092da <dwt_write16bitoffsetreg>
 800af92:	2500      	movs	r5, #0
 800af94:	e712      	b.n	800adbc <dwt_ioctl+0x154>
 800af96:	2202      	movs	r2, #2
 800af98:	4947      	ldr	r1, [pc, #284]	; (800b0b8 <dwt_ioctl+0x450>)
 800af9a:	f7fe f99e 	bl	80092da <dwt_write16bitoffsetreg>
 800af9e:	2500      	movs	r5, #0
 800afa0:	e70c      	b.n	800adbc <dwt_ioctl+0x154>
 800afa2:	2c00      	cmp	r4, #0
 800afa4:	f001 853c 	beq.w	800ca20 <dwt_ioctl+0x1db8>
 800afa8:	7823      	ldrb	r3, [r4, #0]
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	f003 0306 	and.w	r3, r3, #6
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	f06f 0306 	mvn.w	r3, #6
 800afb6:	2200      	movs	r2, #0
 800afb8:	4940      	ldr	r1, [pc, #256]	; (800b0bc <dwt_ioctl+0x454>)
 800afba:	f7fe fe3d 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800afbe:	2500      	movs	r5, #0
 800afc0:	e6fc      	b.n	800adbc <dwt_ioctl+0x154>
 800afc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afcc:	2200      	movs	r2, #0
 800afce:	493c      	ldr	r1, [pc, #240]	; (800b0c0 <dwt_ioctl+0x458>)
 800afd0:	f7fe fe32 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800afd4:	2500      	movs	r5, #0
 800afd6:	e6f1      	b.n	800adbc <dwt_ioctl+0x154>
 800afd8:	2c00      	cmp	r4, #0
 800afda:	f001 8524 	beq.w	800ca26 <dwt_ioctl+0x1dbe>
 800afde:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800afe0:	7b1b      	ldrb	r3, [r3, #12]
 800afe2:	7023      	strb	r3, [r4, #0]
 800afe4:	2500      	movs	r5, #0
 800afe6:	e6e9      	b.n	800adbc <dwt_ioctl+0x154>
 800afe8:	2c00      	cmp	r4, #0
 800afea:	f001 851f 	beq.w	800ca2c <dwt_ioctl+0x1dc4>
 800afee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aff0:	7a5b      	ldrb	r3, [r3, #9]
 800aff2:	7023      	strb	r3, [r4, #0]
 800aff4:	2500      	movs	r5, #0
 800aff6:	e6e1      	b.n	800adbc <dwt_ioctl+0x154>
 800aff8:	2c00      	cmp	r4, #0
 800affa:	f001 851a 	beq.w	800ca32 <dwt_ioctl+0x1dca>
 800affe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b000:	7a9b      	ldrb	r3, [r3, #10]
 800b002:	7023      	strb	r3, [r4, #0]
 800b004:	2500      	movs	r5, #0
 800b006:	e6d9      	b.n	800adbc <dwt_ioctl+0x154>
 800b008:	2c00      	cmp	r4, #0
 800b00a:	f001 8515 	beq.w	800ca38 <dwt_ioctl+0x1dd0>
 800b00e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	2500      	movs	r5, #0
 800b016:	e6d1      	b.n	800adbc <dwt_ioctl+0x154>
 800b018:	2c00      	cmp	r4, #0
 800b01a:	f001 8510 	beq.w	800ca3e <dwt_ioctl+0x1dd6>
 800b01e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	6023      	str	r3, [r4, #0]
 800b024:	2500      	movs	r5, #0
 800b026:	e6c9      	b.n	800adbc <dwt_ioctl+0x154>
 800b028:	f7fe fc72 	bl	8009910 <ull_signal_rx_buff_free>
 800b02c:	2500      	movs	r5, #0
 800b02e:	e6c5      	b.n	800adbc <dwt_ioctl+0x154>
 800b030:	2c00      	cmp	r4, #0
 800b032:	f001 8507 	beq.w	800ca44 <dwt_ioctl+0x1ddc>
 800b036:	6821      	ldr	r1, [r4, #0]
 800b038:	f7fe f9e7 	bl	800940a <ull_setrxaftertxdelay>
 800b03c:	2500      	movs	r5, #0
 800b03e:	e6bd      	b.n	800adbc <dwt_ioctl+0x154>
 800b040:	2c00      	cmp	r4, #0
 800b042:	f001 8502 	beq.w	800ca4a <dwt_ioctl+0x1de2>
 800b046:	7825      	ldrb	r5, [r4, #0]
 800b048:	b15d      	cbz	r5, 800b062 <dwt_ioctl+0x3fa>
 800b04a:	6864      	ldr	r4, [r4, #4]
 800b04c:	2340      	movs	r3, #64	; 0x40
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	23ff      	movs	r3, #255	; 0xff
 800b052:	2200      	movs	r2, #0
 800b054:	2110      	movs	r1, #16
 800b056:	f7fe ff61 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b05a:	2d02      	cmp	r5, #2
 800b05c:	d107      	bne.n	800b06e <dwt_ioctl+0x406>
 800b05e:	60f4      	str	r4, [r6, #12]
 800b060:	e005      	b.n	800b06e <dwt_ioctl+0x406>
 800b062:	2200      	movs	r2, #0
 800b064:	9200      	str	r2, [sp, #0]
 800b066:	23bf      	movs	r3, #191	; 0xbf
 800b068:	2110      	movs	r1, #16
 800b06a:	f7fe ff57 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b06e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b070:	751d      	strb	r5, [r3, #20]
 800b072:	2500      	movs	r5, #0
 800b074:	e6a2      	b.n	800adbc <dwt_ioctl+0x154>
 800b076:	2c00      	cmp	r4, #0
 800b078:	f001 84ea 	beq.w	800ca50 <dwt_ioctl+0x1de8>
 800b07c:	6865      	ldr	r5, [r4, #4]
 800b07e:	7823      	ldrb	r3, [r4, #0]
 800b080:	2203      	movs	r2, #3
 800b082:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b086:	f7fe fb13 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b08a:	b9dd      	cbnz	r5, 800b0c4 <dwt_ioctl+0x45c>
 800b08c:	2200      	movs	r2, #0
 800b08e:	9200      	str	r2, [sp, #0]
 800b090:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b094:	2110      	movs	r1, #16
 800b096:	4630      	mov	r0, r6
 800b098:	f7ff f95c 	bl	800a354 <dwt_modify16bitoffsetreg>
 800b09c:	e68e      	b.n	800adbc <dwt_ioctl+0x154>
 800b09e:	bf00      	nop
 800b0a0:	000f0030 	.word	0x000f0030
 800b0a4:	00010054 	.word	0x00010054
 800b0a8:	00010058 	.word	0x00010058
 800b0ac:	0001005c 	.word	0x0001005c
 800b0b0:	00010060 	.word	0x00010060
 800b0b4:	0001000c 	.word	0x0001000c
 800b0b8:	00010010 	.word	0x00010010
 800b0bc:	00010008 	.word	0x00010008
 800b0c0:	00110004 	.word	0x00110004
 800b0c4:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	2110      	movs	r1, #16
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f7fe fdb0 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800b0d8:	2500      	movs	r5, #0
 800b0da:	e66f      	b.n	800adbc <dwt_ioctl+0x154>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4611      	mov	r1, r2
 800b0e0:	f7fd fce3 	bl	8008aaa <dwt_read32bitoffsetreg>
 800b0e4:	68b2      	ldr	r2, [r6, #8]
 800b0e6:	6813      	ldr	r3, [r2, #0]
 800b0e8:	4043      	eors	r3, r0
 800b0ea:	6852      	ldr	r2, [r2, #4]
 800b0ec:	4213      	tst	r3, r2
 800b0ee:	bf14      	ite	ne
 800b0f0:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b0f4:	2500      	moveq	r5, #0
 800b0f6:	e661      	b.n	800adbc <dwt_ioctl+0x154>
 800b0f8:	2c00      	cmp	r4, #0
 800b0fa:	f001 84ac 	beq.w	800ca56 <dwt_ioctl+0x1dee>
 800b0fe:	7821      	ldrb	r1, [r4, #0]
 800b100:	f7fe ff20 	bl	8009f44 <ull_configciadiag>
 800b104:	2500      	movs	r5, #0
 800b106:	e659      	b.n	800adbc <dwt_ioctl+0x154>
 800b108:	b93a      	cbnz	r2, 800b11a <dwt_ioctl+0x4b2>
 800b10a:	2200      	movs	r2, #0
 800b10c:	9200      	str	r2, [sp, #0]
 800b10e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b112:	49b8      	ldr	r1, [pc, #736]	; (800b3f4 <dwt_ioctl+0x78c>)
 800b114:	f7ff f91e 	bl	800a354 <dwt_modify16bitoffsetreg>
 800b118:	e650      	b.n	800adbc <dwt_ioctl+0x154>
 800b11a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b124:	2200      	movs	r2, #0
 800b126:	49b3      	ldr	r1, [pc, #716]	; (800b3f4 <dwt_ioctl+0x78c>)
 800b128:	f7ff f914 	bl	800a354 <dwt_modify16bitoffsetreg>
 800b12c:	2500      	movs	r5, #0
 800b12e:	e645      	b.n	800adbc <dwt_ioctl+0x154>
 800b130:	f002 0201 	and.w	r2, r2, #1
 800b134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b138:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800b13c:	2a00      	cmp	r2, #0
 800b13e:	bf08      	it	eq
 800b140:	460b      	moveq	r3, r1
 800b142:	02d2      	lsls	r2, r2, #11
 800b144:	f015 0f02 	tst.w	r5, #2
 800b148:	bf12      	itee	ne
 800b14a:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800b14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b152:	b29b      	uxtheq	r3, r3
 800b154:	9200      	str	r2, [sp, #0]
 800b156:	2200      	movs	r2, #0
 800b158:	49a6      	ldr	r1, [pc, #664]	; (800b3f4 <dwt_ioctl+0x78c>)
 800b15a:	f7ff f8fb 	bl	800a354 <dwt_modify16bitoffsetreg>
 800b15e:	2500      	movs	r5, #0
 800b160:	e62c      	b.n	800adbc <dwt_ioctl+0x154>
 800b162:	b92a      	cbnz	r2, 800b170 <dwt_ioctl+0x508>
 800b164:	4ba4      	ldr	r3, [pc, #656]	; (800b3f8 <dwt_ioctl+0x790>)
 800b166:	2202      	movs	r2, #2
 800b168:	49a4      	ldr	r1, [pc, #656]	; (800b3fc <dwt_ioctl+0x794>)
 800b16a:	f7fe f913 	bl	8009394 <dwt_write32bitoffsetreg>
 800b16e:	e625      	b.n	800adbc <dwt_ioctl+0x154>
 800b170:	4ba3      	ldr	r3, [pc, #652]	; (800b400 <dwt_ioctl+0x798>)
 800b172:	2202      	movs	r2, #2
 800b174:	49a1      	ldr	r1, [pc, #644]	; (800b3fc <dwt_ioctl+0x794>)
 800b176:	f7fe f90d 	bl	8009394 <dwt_write32bitoffsetreg>
 800b17a:	2500      	movs	r5, #0
 800b17c:	e61e      	b.n	800adbc <dwt_ioctl+0x154>
 800b17e:	4611      	mov	r1, r2
 800b180:	f7fe f957 	bl	8009432 <ull_setlnapamode>
 800b184:	2500      	movs	r5, #0
 800b186:	e619      	b.n	800adbc <dwt_ioctl+0x154>
 800b188:	2c00      	cmp	r4, #0
 800b18a:	f001 8467 	beq.w	800ca5c <dwt_ioctl+0x1df4>
 800b18e:	2200      	movs	r2, #0
 800b190:	499c      	ldr	r1, [pc, #624]	; (800b404 <dwt_ioctl+0x79c>)
 800b192:	f7fd fcb2 	bl	8008afa <dwt_read8bitoffsetreg>
 800b196:	7020      	strb	r0, [r4, #0]
 800b198:	2500      	movs	r5, #0
 800b19a:	e60f      	b.n	800adbc <dwt_ioctl+0x154>
 800b19c:	4621      	mov	r1, r4
 800b19e:	f7fe f969 	bl	8009474 <ull_configurestskey>
 800b1a2:	2500      	movs	r5, #0
 800b1a4:	e60a      	b.n	800adbc <dwt_ioctl+0x154>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	f7fe f988 	bl	80094bc <ull_configurestsiv>
 800b1ac:	2500      	movs	r5, #0
 800b1ae:	e605      	b.n	800adbc <dwt_ioctl+0x154>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	23ff      	movs	r3, #255	; 0xff
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4993      	ldr	r1, [pc, #588]	; (800b408 <dwt_ioctl+0x7a0>)
 800b1ba:	f7fe feaf 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b1be:	2500      	movs	r5, #0
 800b1c0:	e5fc      	b.n	800adbc <dwt_ioctl+0x154>
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	f7fe f99e 	bl	8009504 <ull_configmrxlut>
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	e5f7      	b.n	800adbc <dwt_ioctl+0x154>
 800b1cc:	2318      	movs	r3, #24
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	498e      	ldr	r1, [pc, #568]	; (800b40c <dwt_ioctl+0x7a4>)
 800b1d2:	f7fe f8df 	bl	8009394 <dwt_write32bitoffsetreg>
 800b1d6:	23e8      	movs	r3, #232	; 0xe8
 800b1d8:	2200      	movs	r2, #0
 800b1da:	498d      	ldr	r1, [pc, #564]	; (800b410 <dwt_ioctl+0x7a8>)
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f7fe f8d9 	bl	8009394 <dwt_write32bitoffsetreg>
 800b1e2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b1e4:	7d9b      	ldrb	r3, [r3, #22]
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	d01a      	beq.n	800b220 <dwt_ioctl+0x5b8>
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	4989      	ldr	r1, [pc, #548]	; (800b414 <dwt_ioctl+0x7ac>)
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7fd fc71 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b1f4:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800b1f8:	3b09      	subs	r3, #9
 800b1fa:	2b0f      	cmp	r3, #15
 800b1fc:	f201 8431 	bhi.w	800ca62 <dwt_ioctl+0x1dfa>
 800b200:	f000 0001 	and.w	r0, r0, #1
 800b204:	2800      	cmp	r0, #0
 800b206:	bf0c      	ite	eq
 800b208:	2105      	moveq	r1, #5
 800b20a:	2109      	movne	r1, #9
 800b20c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b20e:	7a1b      	ldrb	r3, [r3, #8]
 800b210:	2b01      	cmp	r3, #1
 800b212:	f001 8429 	beq.w	800ca68 <dwt_ioctl+0x1e00>
 800b216:	4630      	mov	r0, r6
 800b218:	f7fe f974 	bl	8009504 <ull_configmrxlut>
 800b21c:	2500      	movs	r5, #0
 800b21e:	e5cd      	b.n	800adbc <dwt_ioctl+0x154>
 800b220:	2301      	movs	r3, #1
 800b222:	2200      	movs	r2, #0
 800b224:	497c      	ldr	r1, [pc, #496]	; (800b418 <dwt_ioctl+0x7b0>)
 800b226:	4630      	mov	r0, r6
 800b228:	f7fe fa42 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b22c:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800b22e:	7d93      	ldrb	r3, [r2, #22]
 800b230:	f043 0302 	orr.w	r3, r3, #2
 800b234:	7593      	strb	r3, [r2, #22]
 800b236:	e7d8      	b.n	800b1ea <dwt_ioctl+0x582>
 800b238:	2c00      	cmp	r4, #0
 800b23a:	f001 8418 	beq.w	800ca6e <dwt_ioctl+0x1e06>
 800b23e:	7824      	ldrb	r4, [r4, #0]
 800b240:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b242:	755c      	strb	r4, [r3, #21]
 800b244:	0323      	lsls	r3, r4, #12
 800b246:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800b250:	2200      	movs	r2, #0
 800b252:	2110      	movs	r1, #16
 800b254:	f7ff f87e 	bl	800a354 <dwt_modify16bitoffsetreg>
 800b258:	f004 0403 	and.w	r4, r4, #3
 800b25c:	2c03      	cmp	r4, #3
 800b25e:	bf0c      	ite	eq
 800b260:	4b6e      	ldreq	r3, [pc, #440]	; (800b41c <dwt_ioctl+0x7b4>)
 800b262:	4b6f      	ldrne	r3, [pc, #444]	; (800b420 <dwt_ioctl+0x7b8>)
 800b264:	2200      	movs	r2, #0
 800b266:	496f      	ldr	r1, [pc, #444]	; (800b424 <dwt_ioctl+0x7bc>)
 800b268:	4630      	mov	r0, r6
 800b26a:	f7fe f893 	bl	8009394 <dwt_write32bitoffsetreg>
 800b26e:	2500      	movs	r5, #0
 800b270:	e5a4      	b.n	800adbc <dwt_ioctl+0x154>
 800b272:	2c00      	cmp	r4, #0
 800b274:	f001 83fe 	beq.w	800ca74 <dwt_ioctl+0x1e0c>
 800b278:	8823      	ldrh	r3, [r4, #0]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b280:	f7fe f82b 	bl	80092da <dwt_write16bitoffsetreg>
 800b284:	2500      	movs	r5, #0
 800b286:	e599      	b.n	800adbc <dwt_ioctl+0x154>
 800b288:	2c00      	cmp	r4, #0
 800b28a:	f001 83f6 	beq.w	800ca7a <dwt_ioctl+0x1e12>
 800b28e:	2200      	movs	r2, #0
 800b290:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b294:	f7fd fc1f 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b298:	8020      	strh	r0, [r4, #0]
 800b29a:	2500      	movs	r5, #0
 800b29c:	e58e      	b.n	800adbc <dwt_ioctl+0x154>
 800b29e:	2c00      	cmp	r4, #0
 800b2a0:	f001 83ee 	beq.w	800ca80 <dwt_ioctl+0x1e18>
 800b2a4:	8823      	ldrh	r3, [r4, #0]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	217c      	movs	r1, #124	; 0x7c
 800b2aa:	f7fe f816 	bl	80092da <dwt_write16bitoffsetreg>
 800b2ae:	2500      	movs	r5, #0
 800b2b0:	e584      	b.n	800adbc <dwt_ioctl+0x154>
 800b2b2:	2c00      	cmp	r4, #0
 800b2b4:	f001 83e7 	beq.w	800ca86 <dwt_ioctl+0x1e1e>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	217c      	movs	r1, #124	; 0x7c
 800b2bc:	f7fd fc0b 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b2c0:	8020      	strh	r0, [r4, #0]
 800b2c2:	2500      	movs	r5, #0
 800b2c4:	e57a      	b.n	800adbc <dwt_ioctl+0x154>
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	f001 83e0 	beq.w	800ca8c <dwt_ioctl+0x1e24>
 800b2cc:	88a3      	ldrh	r3, [r4, #4]
 800b2ce:	88e2      	ldrh	r2, [r4, #6]
 800b2d0:	6821      	ldr	r1, [r4, #0]
 800b2d2:	9100      	str	r1, [sp, #0]
 800b2d4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b2d8:	f7fd fff4 	bl	80092c4 <dwt_writetodevice>
 800b2dc:	2500      	movs	r5, #0
 800b2de:	e56d      	b.n	800adbc <dwt_ioctl+0x154>
 800b2e0:	2c00      	cmp	r4, #0
 800b2e2:	f001 83d6 	beq.w	800ca92 <dwt_ioctl+0x1e2a>
 800b2e6:	88a3      	ldrh	r3, [r4, #4]
 800b2e8:	88e2      	ldrh	r2, [r4, #6]
 800b2ea:	6821      	ldr	r1, [r4, #0]
 800b2ec:	9100      	str	r1, [sp, #0]
 800b2ee:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b2f2:	f7fd fbd0 	bl	8008a96 <dwt_readfromdevice>
 800b2f6:	2500      	movs	r5, #0
 800b2f8:	e560      	b.n	800adbc <dwt_ioctl+0x154>
 800b2fa:	2c00      	cmp	r4, #0
 800b2fc:	f001 83cc 	beq.w	800ca98 <dwt_ioctl+0x1e30>
 800b300:	88e3      	ldrh	r3, [r4, #6]
 800b302:	88a2      	ldrh	r2, [r4, #4]
 800b304:	6821      	ldr	r1, [r4, #0]
 800b306:	f7fe f99d 	bl	8009644 <ull_readrxdata>
 800b30a:	2500      	movs	r5, #0
 800b30c:	e556      	b.n	800adbc <dwt_ioctl+0x154>
 800b30e:	2c00      	cmp	r4, #0
 800b310:	f001 83c5 	beq.w	800ca9e <dwt_ioctl+0x1e36>
 800b314:	88e3      	ldrh	r3, [r4, #6]
 800b316:	6822      	ldr	r2, [r4, #0]
 800b318:	88a1      	ldrh	r1, [r4, #4]
 800b31a:	f7fe fac7 	bl	80098ac <ull_writetxdata>
 800b31e:	2500      	movs	r5, #0
 800b320:	e54c      	b.n	800adbc <dwt_ioctl+0x154>
 800b322:	4611      	mov	r1, r2
 800b324:	f7ff fc08 	bl	800ab38 <ull_rxenable>
 800b328:	2500      	movs	r5, #0
 800b32a:	e547      	b.n	800adbc <dwt_ioctl+0x154>
 800b32c:	2c00      	cmp	r4, #0
 800b32e:	f001 83b9 	beq.w	800caa4 <dwt_ioctl+0x1e3c>
 800b332:	7923      	ldrb	r3, [r4, #4]
 800b334:	8862      	ldrh	r2, [r4, #2]
 800b336:	8821      	ldrh	r1, [r4, #0]
 800b338:	f7fe fdbe 	bl	8009eb8 <ull_writetxfctrl>
 800b33c:	2500      	movs	r5, #0
 800b33e:	e53d      	b.n	800adbc <dwt_ioctl+0x154>
 800b340:	2c00      	cmp	r4, #0
 800b342:	f001 83b2 	beq.w	800caaa <dwt_ioctl+0x1e42>
 800b346:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b348:	7b9b      	ldrb	r3, [r3, #14]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d00c      	beq.n	800b368 <dwt_ioctl+0x700>
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d110      	bne.n	800b374 <dwt_ioctl+0x70c>
 800b352:	220c      	movs	r2, #12
 800b354:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b358:	f7fd fbbd 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b35c:	b200      	sxth	r0, r0
 800b35e:	f340 030c 	sbfx	r3, r0, #0, #13
 800b362:	8023      	strh	r3, [r4, #0]
 800b364:	2500      	movs	r5, #0
 800b366:	e529      	b.n	800adbc <dwt_ioctl+0x154>
 800b368:	2200      	movs	r2, #0
 800b36a:	492f      	ldr	r1, [pc, #188]	; (800b428 <dwt_ioctl+0x7c0>)
 800b36c:	f7fd fbb3 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b370:	b200      	sxth	r0, r0
 800b372:	e7f4      	b.n	800b35e <dwt_ioctl+0x6f6>
 800b374:	2200      	movs	r2, #0
 800b376:	492d      	ldr	r1, [pc, #180]	; (800b42c <dwt_ioctl+0x7c4>)
 800b378:	f7fd fbad 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b37c:	b200      	sxth	r0, r0
 800b37e:	e7ee      	b.n	800b35e <dwt_ioctl+0x6f6>
 800b380:	2c00      	cmp	r4, #0
 800b382:	f001 8395 	beq.w	800cab0 <dwt_ioctl+0x1e48>
 800b386:	ab0c      	add	r3, sp, #48	; 0x30
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	2303      	movs	r3, #3
 800b38c:	2200      	movs	r2, #0
 800b38e:	4928      	ldr	r1, [pc, #160]	; (800b430 <dwt_ioctl+0x7c8>)
 800b390:	f7fd fb81 	bl	8008a96 <dwt_readfromdevice>
 800b394:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800b398:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800b39c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800b3a0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b3a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b3a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b3ac:	bf1c      	itt	ne
 800b3ae:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800b3b2:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	2500      	movs	r5, #0
 800b3ba:	e4ff      	b.n	800adbc <dwt_ioctl+0x154>
 800b3bc:	f7fe f9d0 	bl	8009760 <ull_clearaonconfig>
 800b3c0:	2500      	movs	r5, #0
 800b3c2:	e4fb      	b.n	800adbc <dwt_ioctl+0x154>
 800b3c4:	2c00      	cmp	r4, #0
 800b3c6:	f001 8376 	beq.w	800cab6 <dwt_ioctl+0x1e4e>
 800b3ca:	8861      	ldrh	r1, [r4, #2]
 800b3cc:	f7fe fdf0 	bl	8009fb0 <ull_calcbandwidthadj>
 800b3d0:	7020      	strb	r0, [r4, #0]
 800b3d2:	2500      	movs	r5, #0
 800b3d4:	e4f2      	b.n	800adbc <dwt_ioctl+0x154>
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	f7fd fb9d 	bl	8008b16 <ull_readdiagnostics>
 800b3dc:	2500      	movs	r5, #0
 800b3de:	e4ed      	b.n	800adbc <dwt_ioctl+0x154>
 800b3e0:	2c00      	cmp	r4, #0
 800b3e2:	f001 836b 	beq.w	800cabc <dwt_ioctl+0x1e54>
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	2170      	movs	r1, #112	; 0x70
 800b3ea:	f7fd fb5e 	bl	8008aaa <dwt_read32bitoffsetreg>
 800b3ee:	6020      	str	r0, [r4, #0]
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	e4e3      	b.n	800adbc <dwt_ioctl+0x154>
 800b3f4:	00110008 	.word	0x00110008
 800b3f8:	00d20874 	.word	0x00d20874
 800b3fc:	00110010 	.word	0x00110010
 800b400:	04d28874 	.word	0x04d28874
 800b404:	0007001c 	.word	0x0007001c
 800b408:	00020004 	.word	0x00020004
 800b40c:	001f000c 	.word	0x001f000c
 800b410:	001f0010 	.word	0x001f0010
 800b414:	00010008 	.word	0x00010008
 800b418:	00010020 	.word	0x00010020
 800b41c:	af5f35cc 	.word	0xaf5f35cc
 800b420:	af5f584c 	.word	0xaf5f584c
 800b424:	0006000c 	.word	0x0006000c
 800b428:	0018000c 	.word	0x0018000c
 800b42c:	000c0020 	.word	0x000c0020
 800b430:	00060029 	.word	0x00060029
 800b434:	2c00      	cmp	r4, #0
 800b436:	f001 8344 	beq.w	800cac2 <dwt_ioctl+0x1e5a>
 800b43a:	2200      	movs	r2, #0
 800b43c:	2170      	movs	r1, #112	; 0x70
 800b43e:	f7fd fb34 	bl	8008aaa <dwt_read32bitoffsetreg>
 800b442:	6020      	str	r0, [r4, #0]
 800b444:	2500      	movs	r5, #0
 800b446:	e4b9      	b.n	800adbc <dwt_ioctl+0x154>
 800b448:	9400      	str	r4, [sp, #0]
 800b44a:	2305      	movs	r3, #5
 800b44c:	2200      	movs	r2, #0
 800b44e:	2170      	movs	r1, #112	; 0x70
 800b450:	f7fd fb21 	bl	8008a96 <dwt_readfromdevice>
 800b454:	2500      	movs	r5, #0
 800b456:	e4b1      	b.n	800adbc <dwt_ioctl+0x154>
 800b458:	2c00      	cmp	r4, #0
 800b45a:	f001 8335 	beq.w	800cac8 <dwt_ioctl+0x1e60>
 800b45e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b460:	7b9b      	ldrb	r3, [r3, #14]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d014      	beq.n	800b490 <dwt_ioctl+0x828>
 800b466:	2b03      	cmp	r3, #3
 800b468:	d119      	bne.n	800b49e <dwt_ioctl+0x836>
 800b46a:	2216      	movs	r2, #22
 800b46c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b470:	f7fd fb31 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b474:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b478:	b283      	uxth	r3, r0
 800b47a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b47e:	d004      	beq.n	800b48a <dwt_ioctl+0x822>
 800b480:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800b484:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800b488:	b218      	sxth	r0, r3
 800b48a:	8020      	strh	r0, [r4, #0]
 800b48c:	2500      	movs	r5, #0
 800b48e:	e495      	b.n	800adbc <dwt_ioctl+0x154>
 800b490:	2202      	movs	r2, #2
 800b492:	49d6      	ldr	r1, [pc, #856]	; (800b7ec <dwt_ioctl+0xb84>)
 800b494:	f7fd fb1f 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b498:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b49c:	e7ec      	b.n	800b478 <dwt_ioctl+0x810>
 800b49e:	2202      	movs	r2, #2
 800b4a0:	49d3      	ldr	r1, [pc, #844]	; (800b7f0 <dwt_ioctl+0xb88>)
 800b4a2:	f7fd fb18 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b4a6:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b4aa:	e7e5      	b.n	800b478 <dwt_ioctl+0x810>
 800b4ac:	9400      	str	r4, [sp, #0]
 800b4ae:	2306      	movs	r3, #6
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	49d0      	ldr	r1, [pc, #832]	; (800b7f4 <dwt_ioctl+0xb8c>)
 800b4b4:	f7fd faef 	bl	8008a96 <dwt_readfromdevice>
 800b4b8:	7963      	ldrb	r3, [r4, #5]
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	7163      	strb	r3, [r4, #5]
 800b4c0:	2500      	movs	r5, #0
 800b4c2:	e47b      	b.n	800adbc <dwt_ioctl+0x154>
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	f001 8302 	beq.w	800cace <dwt_ioctl+0x1e66>
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b4d0:	f7fd fb13 	bl	8008afa <dwt_read8bitoffsetreg>
 800b4d4:	7020      	strb	r0, [r4, #0]
 800b4d6:	2500      	movs	r5, #0
 800b4d8:	e470      	b.n	800adbc <dwt_ioctl+0x154>
 800b4da:	2c00      	cmp	r4, #0
 800b4dc:	f001 82fa 	beq.w	800cad4 <dwt_ioctl+0x1e6c>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b4e6:	f7fd fb08 	bl	8008afa <dwt_read8bitoffsetreg>
 800b4ea:	7020      	strb	r0, [r4, #0]
 800b4ec:	2500      	movs	r5, #0
 800b4ee:	e465      	b.n	800adbc <dwt_ioctl+0x154>
 800b4f0:	2c00      	cmp	r4, #0
 800b4f2:	f001 82f2 	beq.w	800cada <dwt_ioctl+0x1e72>
 800b4f6:	88a2      	ldrh	r2, [r4, #4]
 800b4f8:	6821      	ldr	r1, [r4, #0]
 800b4fa:	f7fe fc07 	bl	8009d0c <_dwt_otpprogword32>
 800b4fe:	2500      	movs	r5, #0
 800b500:	e45c      	b.n	800adbc <dwt_ioctl+0x154>
 800b502:	2c00      	cmp	r4, #0
 800b504:	f001 82ec 	beq.w	800cae0 <dwt_ioctl+0x1e78>
 800b508:	6825      	ldr	r5, [r4, #0]
 800b50a:	88a4      	ldrh	r4, [r4, #4]
 800b50c:	4622      	mov	r2, r4
 800b50e:	4629      	mov	r1, r5
 800b510:	f7fe fbfc 	bl	8009d0c <_dwt_otpprogword32>
 800b514:	4621      	mov	r1, r4
 800b516:	4630      	mov	r0, r6
 800b518:	f7fd ff1a 	bl	8009350 <_dwt_otpread>
 800b51c:	1a2d      	subs	r5, r5, r0
 800b51e:	bf18      	it	ne
 800b520:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b524:	e44a      	b.n	800adbc <dwt_ioctl+0x154>
 800b526:	2a02      	cmp	r2, #2
 800b528:	d00e      	beq.n	800b548 <dwt_ioctl+0x8e0>
 800b52a:	4cb3      	ldr	r4, [pc, #716]	; (800b7f8 <dwt_ioctl+0xb90>)
 800b52c:	2300      	movs	r3, #0
 800b52e:	461a      	mov	r2, r3
 800b530:	4621      	mov	r1, r4
 800b532:	4630      	mov	r0, r6
 800b534:	f7fe f8bc 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b538:	2302      	movs	r3, #2
 800b53a:	2200      	movs	r2, #0
 800b53c:	4621      	mov	r1, r4
 800b53e:	4630      	mov	r0, r6
 800b540:	f7fe f8b6 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b544:	2500      	movs	r5, #0
 800b546:	e439      	b.n	800adbc <dwt_ioctl+0x154>
 800b548:	2300      	movs	r3, #0
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	23fe      	movs	r3, #254	; 0xfe
 800b54e:	2201      	movs	r2, #1
 800b550:	49aa      	ldr	r1, [pc, #680]	; (800b7fc <dwt_ioctl+0xb94>)
 800b552:	f7fe fce3 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b556:	e7e8      	b.n	800b52a <dwt_ioctl+0x8c2>
 800b558:	2c00      	cmp	r4, #0
 800b55a:	f001 82c4 	beq.w	800cae6 <dwt_ioctl+0x1e7e>
 800b55e:	8824      	ldrh	r4, [r4, #0]
 800b560:	b2e2      	uxtb	r2, r4
 800b562:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b566:	f7fe f94f 	bl	8009808 <ull_aon_write>
 800b56a:	0a22      	lsrs	r2, r4, #8
 800b56c:	f240 1103 	movw	r1, #259	; 0x103
 800b570:	4630      	mov	r0, r6
 800b572:	f7fe f949 	bl	8009808 <ull_aon_write>
 800b576:	2500      	movs	r5, #0
 800b578:	e420      	b.n	800adbc <dwt_ioctl+0x154>
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	f001 82b6 	beq.w	800caec <dwt_ioctl+0x1e84>
 800b580:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800b808 <dwt_ioctl+0xba0>
 800b584:	2310      	movs	r3, #16
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	23ff      	movs	r3, #255	; 0xff
 800b58a:	2200      	movs	r2, #0
 800b58c:	4641      	mov	r1, r8
 800b58e:	f7fe fcc5 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b592:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b596:	4630      	mov	r0, r6
 800b598:	f7fe f916 	bl	80097c8 <ull_aon_read>
 800b59c:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800b5a0:	462a      	mov	r2, r5
 800b5a2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f7fe f92e 	bl	8009808 <ull_aon_write>
 800b5ac:	f045 0204 	orr.w	r2, r5, #4
 800b5b0:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7fe f927 	bl	8009808 <ull_aon_write>
 800b5ba:	2002      	movs	r0, #2
 800b5bc:	f7f5 f838 	bl	8000630 <deca_sleep>
 800b5c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	f7fe f8ff 	bl	80097c8 <ull_aon_read>
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	f240 110f 	movw	r1, #271	; 0x10f
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fe f8f9 	bl	80097c8 <ull_aon_read>
 800b5d6:	4681      	mov	r9, r0
 800b5d8:	462a      	mov	r2, r5
 800b5da:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f7fe f912 	bl	8009808 <ull_aon_write>
 800b5e4:	2500      	movs	r5, #0
 800b5e6:	9500      	str	r5, [sp, #0]
 800b5e8:	23ef      	movs	r3, #239	; 0xef
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4641      	mov	r1, r8
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7fe fc94 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b5f4:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800b5f8:	8027      	strh	r7, [r4, #0]
 800b5fa:	f7ff bbdf 	b.w	800adbc <dwt_ioctl+0x154>
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	f001 8277 	beq.w	800caf2 <dwt_ioctl+0x1e8a>
 800b604:	78a2      	ldrb	r2, [r4, #2]
 800b606:	8821      	ldrh	r1, [r4, #0]
 800b608:	f7fe f926 	bl	8009858 <ull_configuresleep>
 800b60c:	2500      	movs	r5, #0
 800b60e:	f7ff bbd5 	b.w	800adbc <dwt_ioctl+0x154>
 800b612:	2c00      	cmp	r4, #0
 800b614:	f001 8270 	beq.w	800caf8 <dwt_ioctl+0x1e90>
 800b618:	6824      	ldr	r4, [r4, #0]
 800b61a:	f7fe f8a1 	bl	8009760 <ull_clearaonconfig>
 800b61e:	2001      	movs	r0, #1
 800b620:	f7f5 f806 	bl	8000630 <deca_sleep>
 800b624:	2303      	movs	r3, #3
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	23ff      	movs	r3, #255	; 0xff
 800b62a:	2200      	movs	r2, #0
 800b62c:	4974      	ldr	r1, [pc, #464]	; (800b800 <dwt_ioctl+0xb98>)
 800b62e:	4630      	mov	r0, r6
 800b630:	f7fe fc74 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b634:	b97c      	cbnz	r4, 800b656 <dwt_ioctl+0x9ee>
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff faee 	bl	800ac18 <ull_softreset_no_sema_fcmd>
 800b63c:	2001      	movs	r0, #1
 800b63e:	f7f4 fff7 	bl	8000630 <deca_sleep>
 800b642:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b644:	2500      	movs	r5, #0
 800b646:	739d      	strb	r5, [r3, #14]
 800b648:	2202      	movs	r2, #2
 800b64a:	821a      	strh	r2, [r3, #16]
 800b64c:	751d      	strb	r5, [r3, #20]
 800b64e:	755d      	strb	r5, [r3, #21]
 800b650:	73dd      	strb	r5, [r3, #15]
 800b652:	f7ff bbb3 	b.w	800adbc <dwt_ioctl+0x154>
 800b656:	4630      	mov	r0, r6
 800b658:	f7ff faf2 	bl	800ac40 <ull_softreset_fcmd>
 800b65c:	e7ee      	b.n	800b63c <dwt_ioctl+0x9d4>
 800b65e:	2c00      	cmp	r4, #0
 800b660:	f001 824d 	beq.w	800cafe <dwt_ioctl+0x1e96>
 800b664:	7823      	ldrb	r3, [r4, #0]
 800b666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b66a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b66c:	7353      	strb	r3, [r2, #13]
 800b66e:	2200      	movs	r2, #0
 800b670:	4964      	ldr	r1, [pc, #400]	; (800b804 <dwt_ioctl+0xb9c>)
 800b672:	f7fe f81d 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b676:	2500      	movs	r5, #0
 800b678:	f7ff bba0 	b.w	800adbc <dwt_ioctl+0x154>
 800b67c:	2c00      	cmp	r4, #0
 800b67e:	f001 8241 	beq.w	800cb04 <dwt_ioctl+0x1e9c>
 800b682:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b684:	7b5b      	ldrb	r3, [r3, #13]
 800b686:	7023      	strb	r3, [r4, #0]
 800b688:	2500      	movs	r5, #0
 800b68a:	f7ff bb97 	b.w	800adbc <dwt_ioctl+0x154>
 800b68e:	2101      	movs	r1, #1
 800b690:	f7fe faf6 	bl	8009c80 <ull_enable_rf_tx>
 800b694:	4630      	mov	r0, r6
 800b696:	f7fe fb27 	bl	8009ce8 <ull_enable_rftx_blocks>
 800b69a:	2101      	movs	r1, #1
 800b69c:	4630      	mov	r0, r6
 800b69e:	f7fd fe2d 	bl	80092fc <ull_force_clocks>
 800b6a2:	220f      	movs	r2, #15
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7fe ff48 	bl	800a53c <ull_repeated_cw>
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	f7ff bb85 	b.w	800adbc <dwt_ioctl+0x154>
 800b6b2:	2c00      	cmp	r4, #0
 800b6b4:	f001 8229 	beq.w	800cb0a <dwt_ioctl+0x1ea2>
 800b6b8:	6862      	ldr	r2, [r4, #4]
 800b6ba:	6821      	ldr	r1, [r4, #0]
 800b6bc:	f7fe ff3e 	bl	800a53c <ull_repeated_cw>
 800b6c0:	2500      	movs	r5, #0
 800b6c2:	f7ff bb7b 	b.w	800adbc <dwt_ioctl+0x154>
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	f001 8222 	beq.w	800cb10 <dwt_ioctl+0x1ea8>
 800b6cc:	4d4e      	ldr	r5, [pc, #312]	; (800b808 <dwt_ioctl+0xba0>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	f7fd fa12 	bl	8008afa <dwt_read8bitoffsetreg>
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	2302      	movs	r3, #2
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	23ff      	movs	r3, #255	; 0xff
 800b6de:	2200      	movs	r2, #0
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f7fe fc1a 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b6e8:	2304      	movs	r3, #4
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	4947      	ldr	r1, [pc, #284]	; (800b80c <dwt_ioctl+0xba4>)
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f7fd ffde 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7fd ffd7 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b702:	4f43      	ldr	r7, [pc, #268]	; (800b810 <dwt_ioctl+0xba8>)
 800b704:	2500      	movs	r5, #0
 800b706:	462a      	mov	r2, r5
 800b708:	4639      	mov	r1, r7
 800b70a:	4630      	mov	r0, r6
 800b70c:	f7fd f9f5 	bl	8008afa <dwt_read8bitoffsetreg>
 800b710:	f010 0f01 	tst.w	r0, #1
 800b714:	d0f7      	beq.n	800b706 <dwt_ioctl+0xa9e>
 800b716:	2200      	movs	r2, #0
 800b718:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b71c:	4630      	mov	r0, r6
 800b71e:	f7fd f9da 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b722:	4605      	mov	r5, r0
 800b724:	2300      	movs	r3, #0
 800b726:	461a      	mov	r2, r3
 800b728:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b72c:	4630      	mov	r0, r6
 800b72e:	f7fd ffbf 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b732:	2300      	movs	r3, #0
 800b734:	461a      	mov	r2, r3
 800b736:	4935      	ldr	r1, [pc, #212]	; (800b80c <dwt_ioctl+0xba4>)
 800b738:	4630      	mov	r0, r6
 800b73a:	f7fd ffb9 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b73e:	4643      	mov	r3, r8
 800b740:	2200      	movs	r2, #0
 800b742:	4931      	ldr	r1, [pc, #196]	; (800b808 <dwt_ioctl+0xba0>)
 800b744:	4630      	mov	r0, r6
 800b746:	f7fd ffb3 	bl	80096b0 <dwt_write8bitoffsetreg>
 800b74a:	8025      	strh	r5, [r4, #0]
 800b74c:	2500      	movs	r5, #0
 800b74e:	f7ff bb35 	b.w	800adbc <dwt_ioctl+0x154>
 800b752:	2c00      	cmp	r4, #0
 800b754:	f001 81df 	beq.w	800cb16 <dwt_ioctl+0x1eae>
 800b758:	7923      	ldrb	r3, [r4, #4]
 800b75a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b75c:	7a92      	ldrb	r2, [r2, #10]
 800b75e:	1a9b      	subs	r3, r3, r2
 800b760:	ee07 3a90 	vmov	s15, r3
 800b764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b768:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b814 <dwt_ioctl+0xbac>
 800b76c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b770:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800b774:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b778:	edc4 7a00 	vstr	s15, [r4]
 800b77c:	2500      	movs	r5, #0
 800b77e:	f7ff bb1d 	b.w	800adbc <dwt_ioctl+0x154>
 800b782:	2c00      	cmp	r4, #0
 800b784:	f001 81ca 	beq.w	800cb1c <dwt_ioctl+0x1eb4>
 800b788:	7923      	ldrb	r3, [r4, #4]
 800b78a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b78c:	7a52      	ldrb	r2, [r2, #9]
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b798:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b818 <dwt_ioctl+0xbb0>
 800b79c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7a0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800b7a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7a8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800b81c <dwt_ioctl+0xbb4>
 800b7ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b7b0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800b7b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7b8:	edc4 7a00 	vstr	s15, [r4]
 800b7bc:	2500      	movs	r5, #0
 800b7be:	f7ff bafd 	b.w	800adbc <dwt_ioctl+0x154>
 800b7c2:	2c00      	cmp	r4, #0
 800b7c4:	f001 81ad 	beq.w	800cb22 <dwt_ioctl+0x1eba>
 800b7c8:	6824      	ldr	r4, [r4, #0]
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	f7fe fa58 	bl	8009c80 <ull_enable_rf_tx>
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7fe fa89 	bl	8009ce8 <ull_enable_rftx_blocks>
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7fd fd8f 	bl	80092fc <ull_force_clocks>
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7fe fc41 	bl	800a068 <ull_repeated_frames>
 800b7e6:	2500      	movs	r5, #0
 800b7e8:	f7ff bae8 	b.w	800adbc <dwt_ioctl+0x154>
 800b7ec:	00180014 	.word	0x00180014
 800b7f0:	000c001c 	.word	0x000c001c
 800b7f4:	000c0018 	.word	0x000c0018
 800b7f8:	000a0004 	.word	0x000a0004
 800b7fc:	00110008 	.word	0x00110008
 800b800:	00110004 	.word	0x00110004
 800b804:	00090014 	.word	0x00090014
 800b808:	00070048 	.word	0x00070048
 800b80c:	00070034 	.word	0x00070034
 800b810:	00080004 	.word	0x00080004
 800b814:	3f866666 	.word	0x3f866666
 800b818:	3ecccccd 	.word	0x3ecccccd
 800b81c:	437f0000 	.word	0x437f0000
 800b820:	2500      	movs	r5, #0
 800b822:	9500      	str	r5, [sp, #0]
 800b824:	23ef      	movs	r3, #239	; 0xef
 800b826:	462a      	mov	r2, r5
 800b828:	49c7      	ldr	r1, [pc, #796]	; (800bb48 <dwt_ioctl+0xee0>)
 800b82a:	f7fe fb77 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b82e:	2105      	movs	r1, #5
 800b830:	4630      	mov	r0, r6
 800b832:	f7fd fd63 	bl	80092fc <ull_force_clocks>
 800b836:	2101      	movs	r1, #1
 800b838:	4630      	mov	r0, r6
 800b83a:	f7fd fee5 	bl	8009608 <ull_disable_rf_tx>
 800b83e:	4630      	mov	r0, r6
 800b840:	f7fd fed8 	bl	80095f4 <ull_disable_rftx_blocks>
 800b844:	f7ff baba 	b.w	800adbc <dwt_ioctl+0x154>
 800b848:	2500      	movs	r5, #0
 800b84a:	9500      	str	r5, [sp, #0]
 800b84c:	23ef      	movs	r3, #239	; 0xef
 800b84e:	462a      	mov	r2, r5
 800b850:	49bd      	ldr	r1, [pc, #756]	; (800bb48 <dwt_ioctl+0xee0>)
 800b852:	f7fe fb63 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800b856:	f7ff bab1 	b.w	800adbc <dwt_ioctl+0x154>
 800b85a:	2c00      	cmp	r4, #0
 800b85c:	f001 8164 	beq.w	800cb28 <dwt_ioctl+0x1ec0>
 800b860:	6821      	ldr	r1, [r4, #0]
 800b862:	f7fe fc01 	bl	800a068 <ull_repeated_frames>
 800b866:	2500      	movs	r5, #0
 800b868:	f7ff baa8 	b.w	800adbc <dwt_ioctl+0x154>
 800b86c:	2200      	movs	r2, #0
 800b86e:	49b7      	ldr	r1, [pc, #732]	; (800bb4c <dwt_ioctl+0xee4>)
 800b870:	f7fd f931 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800b874:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800b878:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800b87c:	bf18      	it	ne
 800b87e:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800b882:	b22d      	sxth	r5, r5
 800b884:	8025      	strh	r5, [r4, #0]
 800b886:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b888:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b88c:	1aed      	subs	r5, r5, r3
 800b88e:	f7ff ba95 	b.w	800adbc <dwt_ioctl+0x154>
 800b892:	2c00      	cmp	r4, #0
 800b894:	f001 814b 	beq.w	800cb2e <dwt_ioctl+0x1ec6>
 800b898:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b89c:	7a23      	ldrb	r3, [r4, #8]
 800b89e:	f899 2013 	ldrb.w	r2, [r9, #19]
 800b8a2:	2aff      	cmp	r2, #255	; 0xff
 800b8a4:	f000 8122 	beq.w	800baec <dwt_ioctl+0xe84>
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d136      	bne.n	800b91a <dwt_ioctl+0xcb2>
 800b8ac:	f8d9 3000 	ldr.w	r3, [r9]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	49a6      	ldr	r1, [pc, #664]	; (800bb50 <dwt_ioctl+0xee8>)
 800b8b8:	f7fd fd04 	bl	80092c4 <dwt_writetodevice>
 800b8bc:	f899 300c 	ldrb.w	r3, [r9, #12]
 800b8c0:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800b8c4:	18d1      	adds	r1, r2, r3
 800b8c6:	f899 2012 	ldrb.w	r2, [r9, #18]
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	d15f      	bne.n	800b98e <dwt_ioctl+0xd26>
 800b8ce:	f899 0010 	ldrb.w	r0, [r9, #16]
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	bf0b      	itete	eq
 800b8d6:	227f      	moveq	r2, #127	; 0x7f
 800b8d8:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800b8dc:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800b8e0:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800b8e4:	f899 0013 	ldrb.w	r0, [r9, #19]
 800b8e8:	1a12      	subs	r2, r2, r0
 800b8ea:	3a02      	subs	r2, #2
 800b8ec:	4291      	cmp	r1, r2
 800b8ee:	f200 8103 	bhi.w	800baf8 <dwt_ioctl+0xe90>
 800b8f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b8f6:	9200      	str	r2, [sp, #0]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7fd fce1 	bl	80092c4 <dwt_writetodevice>
 800b902:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800b906:	f899 200c 	ldrb.w	r2, [r9, #12]
 800b90a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800b90e:	9100      	str	r1, [sp, #0]
 800b910:	4629      	mov	r1, r5
 800b912:	4630      	mov	r0, r6
 800b914:	f7fd fcd6 	bl	80092c4 <dwt_writetodevice>
 800b918:	e04a      	b.n	800b9b0 <dwt_ioctl+0xd48>
 800b91a:	f8d9 3000 	ldr.w	r3, [r9]
 800b91e:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800b922:	7a9a      	ldrb	r2, [r3, #10]
 800b924:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800b928:	7a5a      	ldrb	r2, [r3, #9]
 800b92a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800b92e:	7a1a      	ldrb	r2, [r3, #8]
 800b930:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800b934:	79da      	ldrb	r2, [r3, #7]
 800b936:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800b93a:	799a      	ldrb	r2, [r3, #6]
 800b93c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800b940:	795a      	ldrb	r2, [r3, #5]
 800b942:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800b946:	791a      	ldrb	r2, [r3, #4]
 800b948:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800b94c:	78da      	ldrb	r2, [r3, #3]
 800b94e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800b952:	789a      	ldrb	r2, [r3, #2]
 800b954:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800b958:	785a      	ldrb	r2, [r3, #1]
 800b95a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800b95e:	781a      	ldrb	r2, [r3, #0]
 800b960:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800b964:	2200      	movs	r2, #0
 800b966:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800b96a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800b96e:	0a09      	lsrs	r1, r1, #8
 800b970:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800b974:	7b19      	ldrb	r1, [r3, #12]
 800b976:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800b97a:	7adb      	ldrb	r3, [r3, #11]
 800b97c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800b980:	ab0c      	add	r3, sp, #48	; 0x30
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2310      	movs	r3, #16
 800b986:	4972      	ldr	r1, [pc, #456]	; (800bb50 <dwt_ioctl+0xee8>)
 800b988:	f7fd fc9c 	bl	80092c4 <dwt_writetodevice>
 800b98c:	e796      	b.n	800b8bc <dwt_ioctl+0xc54>
 800b98e:	2a01      	cmp	r2, #1
 800b990:	f040 80af 	bne.w	800baf2 <dwt_ioctl+0xe8a>
 800b994:	f899 3011 	ldrb.w	r3, [r9, #17]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b99e:	bf08      	it	eq
 800b9a0:	237f      	moveq	r3, #127	; 0x7f
 800b9a2:	f899 2013 	ldrb.w	r2, [r9, #19]
 800b9a6:	1a9b      	subs	r3, r3, r2
 800b9a8:	3b02      	subs	r3, #2
 800b9aa:	4299      	cmp	r1, r3
 800b9ac:	f200 80a7 	bhi.w	800bafe <dwt_ioctl+0xe96>
 800b9b0:	f899 2010 	ldrb.w	r2, [r9, #16]
 800b9b4:	1e53      	subs	r3, r2, #1
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d940      	bls.n	800ba3e <dwt_ioctl+0xdd6>
 800b9bc:	f899 3011 	ldrb.w	r3, [r9, #17]
 800b9c0:	1e59      	subs	r1, r3, #1
 800b9c2:	b2c9      	uxtb	r1, r1
 800b9c4:	2901      	cmp	r1, #1
 800b9c6:	d947      	bls.n	800ba58 <dwt_ioctl+0xdf0>
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	d04c      	beq.n	800ba66 <dwt_ioctl+0xdfe>
 800b9cc:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	4960      	ldr	r1, [pc, #384]	; (800bb54 <dwt_ioctl+0xeec>)
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7fd fcdd 	bl	8009394 <dwt_write32bitoffsetreg>
 800b9da:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800b9de:	4a5e      	ldr	r2, [pc, #376]	; (800bb58 <dwt_ioctl+0xef0>)
 800b9e0:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800b9e4:	f899 300c 	ldrb.w	r3, [r9, #12]
 800b9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	495a      	ldr	r1, [pc, #360]	; (800bb5c <dwt_ioctl+0xef4>)
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f7fd fcce 	bl	8009394 <dwt_write32bitoffsetreg>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	4958      	ldr	r1, [pc, #352]	; (800bb60 <dwt_ioctl+0xef8>)
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f7fd fe56 	bl	80096b0 <dwt_write8bitoffsetreg>
 800ba04:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800bb64 <dwt_ioctl+0xefc>
 800ba08:	2700      	movs	r7, #0
 800ba0a:	463a      	mov	r2, r7
 800ba0c:	4641      	mov	r1, r8
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7fd f873 	bl	8008afa <dwt_read8bitoffsetreg>
 800ba14:	f010 0f05 	tst.w	r0, #5
 800ba18:	d0f7      	beq.n	800ba0a <dwt_ioctl+0xda2>
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2200      	movs	r2, #0
 800ba20:	4950      	ldr	r1, [pc, #320]	; (800bb64 <dwt_ioctl+0xefc>)
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7fd fe44 	bl	80096b0 <dwt_write8bitoffsetreg>
 800ba28:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800ba2c:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d025      	beq.n	800ba80 <dwt_ioctl+0xe18>
 800ba34:	b26b      	sxtb	r3, r5
 800ba36:	7023      	strb	r3, [r4, #0]
 800ba38:	2500      	movs	r5, #0
 800ba3a:	f7ff b9bf 	b.w	800adbc <dwt_ioctl+0x154>
 800ba3e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ba40:	7b9b      	ldrb	r3, [r3, #14]
 800ba42:	2b03      	cmp	r3, #3
 800ba44:	f001 8123 	beq.w	800cc8e <dwt_ioctl+0x2026>
 800ba48:	f899 3011 	ldrb.w	r3, [r9, #17]
 800ba4c:	1e5a      	subs	r2, r3, #1
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	2a01      	cmp	r2, #1
 800ba52:	d912      	bls.n	800ba7a <dwt_ioctl+0xe12>
 800ba54:	2201      	movs	r2, #1
 800ba56:	e7b7      	b.n	800b9c8 <dwt_ioctl+0xd60>
 800ba58:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ba5a:	7b9b      	ldrb	r3, [r3, #14]
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	bf0c      	ite	eq
 800ba60:	2302      	moveq	r3, #2
 800ba62:	2301      	movne	r3, #1
 800ba64:	e7b2      	b.n	800b9cc <dwt_ioctl+0xd64>
 800ba66:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800ba6a:	2910      	cmp	r1, #16
 800ba6c:	d9ae      	bls.n	800b9cc <dwt_ioctl+0xd64>
 800ba6e:	f06f 0303 	mvn.w	r3, #3
 800ba72:	e7e0      	b.n	800ba36 <dwt_ioctl+0xdce>
 800ba74:	2202      	movs	r2, #2
 800ba76:	4613      	mov	r3, r2
 800ba78:	e7a8      	b.n	800b9cc <dwt_ioctl+0xd64>
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	e7a5      	b.n	800b9cc <dwt_ioctl+0xd64>
 800ba80:	f899 3012 	ldrb.w	r3, [r9, #18]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d1d5      	bne.n	800ba34 <dwt_ioctl+0xdcc>
 800ba88:	f899 2011 	ldrb.w	r2, [r9, #17]
 800ba8c:	1e53      	subs	r3, r2, #1
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d91b      	bls.n	800bacc <dwt_ioctl+0xe64>
 800ba94:	2a03      	cmp	r2, #3
 800ba96:	bf0c      	ite	eq
 800ba98:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800ba9c:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800baa0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800baa4:	b112      	cbz	r2, 800baac <dwt_ioctl+0xe44>
 800baa6:	f899 300c 	ldrb.w	r3, [r9, #12]
 800baaa:	b9c3      	cbnz	r3, 800bade <dwt_ioctl+0xe76>
 800baac:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800bab0:	2900      	cmp	r1, #0
 800bab2:	d0bf      	beq.n	800ba34 <dwt_ioctl+0xdcc>
 800bab4:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0bb      	beq.n	800ba34 <dwt_ioctl+0xdcc>
 800babc:	f899 200c 	ldrb.w	r2, [r9, #12]
 800bac0:	9100      	str	r1, [sp, #0]
 800bac2:	4639      	mov	r1, r7
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7fc ffe6 	bl	8008a96 <dwt_readfromdevice>
 800baca:	e7b3      	b.n	800ba34 <dwt_ioctl+0xdcc>
 800bacc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bace:	7b9b      	ldrb	r3, [r3, #14]
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	bf0c      	ite	eq
 800bad4:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800bad8:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800badc:	e7e0      	b.n	800baa0 <dwt_ioctl+0xe38>
 800bade:	9200      	str	r2, [sp, #0]
 800bae0:	2200      	movs	r2, #0
 800bae2:	4639      	mov	r1, r7
 800bae4:	4630      	mov	r0, r6
 800bae6:	f7fc ffd6 	bl	8008a96 <dwt_readfromdevice>
 800baea:	e7df      	b.n	800baac <dwt_ioctl+0xe44>
 800baec:	f06f 0302 	mvn.w	r3, #2
 800baf0:	e7a1      	b.n	800ba36 <dwt_ioctl+0xdce>
 800baf2:	f06f 0301 	mvn.w	r3, #1
 800baf6:	e79e      	b.n	800ba36 <dwt_ioctl+0xdce>
 800baf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bafc:	e79b      	b.n	800ba36 <dwt_ioctl+0xdce>
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb02:	e798      	b.n	800ba36 <dwt_ioctl+0xdce>
 800bb04:	7a23      	ldrb	r3, [r4, #8]
 800bb06:	79e1      	ldrb	r1, [r4, #7]
 800bb08:	79a2      	ldrb	r2, [r4, #6]
 800bb0a:	00d2      	lsls	r2, r2, #3
 800bb0c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800bb10:	4313      	orrs	r3, r2
 800bb12:	7962      	ldrb	r2, [r4, #5]
 800bb14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800bb18:	7922      	ldrb	r2, [r4, #4]
 800bb1a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bb1e:	78e2      	ldrb	r2, [r4, #3]
 800bb20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb24:	78a2      	ldrb	r2, [r4, #2]
 800bb26:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800bb2a:	7862      	ldrb	r2, [r4, #1]
 800bb2c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800bb30:	7822      	ldrb	r2, [r4, #0]
 800bb32:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	2200      	movs	r2, #0
 800bb3a:	490b      	ldr	r1, [pc, #44]	; (800bb68 <dwt_ioctl+0xf00>)
 800bb3c:	f7fd fbcd 	bl	80092da <dwt_write16bitoffsetreg>
 800bb40:	2500      	movs	r5, #0
 800bb42:	f7ff b93b 	b.w	800adbc <dwt_ioctl+0x154>
 800bb46:	bf00      	nop
 800bb48:	000f0028 	.word	0x000f0028
 800bb4c:	00020008 	.word	0x00020008
 800bb50:	00010034 	.word	0x00010034
 800bb54:	00010044 	.word	0x00010044
 800bb58:	0001ff80 	.word	0x0001ff80
 800bb5c:	00010048 	.word	0x00010048
 800bb60:	0001004c 	.word	0x0001004c
 800bb64:	00010050 	.word	0x00010050
 800bb68:	00010030 	.word	0x00010030
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	f000 87e1 	beq.w	800cb34 <dwt_ioctl+0x1ecc>
 800bb72:	7863      	ldrb	r3, [r4, #1]
 800bb74:	b133      	cbz	r3, 800bb84 <dwt_ioctl+0xf1c>
 800bb76:	085b      	lsrs	r3, r3, #1
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	7023      	strb	r3, [r4, #0]
 800bb7e:	2500      	movs	r5, #0
 800bb80:	f7ff b91c 	b.w	800adbc <dwt_ioctl+0x154>
 800bb84:	2300      	movs	r3, #0
 800bb86:	e7f9      	b.n	800bb7c <dwt_ioctl+0xf14>
 800bb88:	2200      	movs	r2, #0
 800bb8a:	49d0      	ldr	r1, [pc, #832]	; (800becc <dwt_ioctl+0x1264>)
 800bb8c:	f7fc ff8d 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bb90:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bb94:	8023      	strh	r3, [r4, #0]
 800bb96:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bb9a:	8060      	strh	r0, [r4, #2]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	49cc      	ldr	r1, [pc, #816]	; (800bed0 <dwt_ioctl+0x1268>)
 800bba0:	4630      	mov	r0, r6
 800bba2:	f7fc ff82 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bba6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bbaa:	80a3      	strh	r3, [r4, #4]
 800bbac:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bbb0:	80e0      	strh	r0, [r4, #6]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	49c7      	ldr	r1, [pc, #796]	; (800bed4 <dwt_ioctl+0x126c>)
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f7fc ff77 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bbbc:	7220      	strb	r0, [r4, #8]
 800bbbe:	0c00      	lsrs	r0, r0, #16
 800bbc0:	7260      	strb	r0, [r4, #9]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	49c4      	ldr	r1, [pc, #784]	; (800bed8 <dwt_ioctl+0x1270>)
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f7fc ff6f 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bbcc:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bbd6:	8160      	strh	r0, [r4, #10]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	49c0      	ldr	r1, [pc, #768]	; (800bedc <dwt_ioctl+0x1274>)
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f7fc ff64 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bbe2:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bbe6:	f8a4 300f 	strh.w	r3, [r4, #15]
 800bbea:	73a0      	strb	r0, [r4, #14]
 800bbec:	2200      	movs	r2, #0
 800bbee:	49bc      	ldr	r1, [pc, #752]	; (800bee0 <dwt_ioctl+0x1278>)
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7fc ff5a 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bbf6:	7460      	strb	r0, [r4, #17]
 800bbf8:	0c00      	lsrs	r0, r0, #16
 800bbfa:	74a0      	strb	r0, [r4, #18]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	49b9      	ldr	r1, [pc, #740]	; (800bee4 <dwt_ioctl+0x127c>)
 800bc00:	4630      	mov	r0, r6
 800bc02:	f7fc ff52 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bc06:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bc0a:	f8a4 0013 	strh.w	r0, [r4, #19]
 800bc0e:	2500      	movs	r5, #0
 800bc10:	7565      	strb	r5, [r4, #21]
 800bc12:	75a5      	strb	r5, [r4, #22]
 800bc14:	462a      	mov	r2, r5
 800bc16:	49b4      	ldr	r1, [pc, #720]	; (800bee8 <dwt_ioctl+0x1280>)
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7fc ff6e 	bl	8008afa <dwt_read8bitoffsetreg>
 800bc1e:	75e0      	strb	r0, [r4, #23]
 800bc20:	f7ff b8cc 	b.w	800adbc <dwt_ioctl+0x154>
 800bc24:	4611      	mov	r1, r2
 800bc26:	f7fd fdbb 	bl	80097a0 <ull_configeventcounters>
 800bc2a:	2500      	movs	r5, #0
 800bc2c:	f7ff b8c6 	b.w	800adbc <dwt_ioctl+0x154>
 800bc30:	2c00      	cmp	r4, #0
 800bc32:	f000 8782 	beq.w	800cb3a <dwt_ioctl+0x1ed2>
 800bc36:	8823      	ldrh	r3, [r4, #0]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	49ac      	ldr	r1, [pc, #688]	; (800beec <dwt_ioctl+0x1284>)
 800bc3c:	f7fd fb4d 	bl	80092da <dwt_write16bitoffsetreg>
 800bc40:	2500      	movs	r5, #0
 800bc42:	f7ff b8bb 	b.w	800adbc <dwt_ioctl+0x154>
 800bc46:	2c00      	cmp	r4, #0
 800bc48:	f000 877a 	beq.w	800cb40 <dwt_ioctl+0x1ed8>
 800bc4c:	6825      	ldr	r5, [r4, #0]
 800bc4e:	b935      	cbnz	r5, 800bc5e <dwt_ioctl+0xff6>
 800bc50:	2300      	movs	r3, #0
 800bc52:	461a      	mov	r2, r3
 800bc54:	49a6      	ldr	r1, [pc, #664]	; (800bef0 <dwt_ioctl+0x1288>)
 800bc56:	f7fd fb40 	bl	80092da <dwt_write16bitoffsetreg>
 800bc5a:	f7ff b8af 	b.w	800adbc <dwt_ioctl+0x154>
 800bc5e:	7962      	ldrb	r2, [r4, #5]
 800bc60:	7923      	ldrb	r3, [r4, #4]
 800bc62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	49a0      	ldr	r1, [pc, #640]	; (800bef0 <dwt_ioctl+0x1288>)
 800bc6e:	f7fd fb34 	bl	80092da <dwt_write16bitoffsetreg>
 800bc72:	2500      	movs	r5, #0
 800bc74:	f7ff b8a2 	b.w	800adbc <dwt_ioctl+0x154>
 800bc78:	2c00      	cmp	r4, #0
 800bc7a:	f000 8764 	beq.w	800cb46 <dwt_ioctl+0x1ede>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	b94b      	cbnz	r3, 800bc96 <dwt_ioctl+0x102e>
 800bc82:	2500      	movs	r5, #0
 800bc84:	9500      	str	r5, [sp, #0]
 800bc86:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	2110      	movs	r1, #16
 800bc8e:	f7fe fb61 	bl	800a354 <dwt_modify16bitoffsetreg>
 800bc92:	f7ff b893 	b.w	800adbc <dwt_ioctl+0x154>
 800bc96:	2200      	movs	r2, #0
 800bc98:	2134      	movs	r1, #52	; 0x34
 800bc9a:	f7fd fb7b 	bl	8009394 <dwt_write32bitoffsetreg>
 800bc9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2110      	movs	r1, #16
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7fe fb51 	bl	800a354 <dwt_modify16bitoffsetreg>
 800bcb2:	2500      	movs	r5, #0
 800bcb4:	f7ff b882 	b.w	800adbc <dwt_ioctl+0x154>
 800bcb8:	2c00      	cmp	r4, #0
 800bcba:	f000 8747 	beq.w	800cb4c <dwt_ioctl+0x1ee4>
 800bcbe:	8861      	ldrh	r1, [r4, #2]
 800bcc0:	f7fd fd82 	bl	80097c8 <ull_aon_read>
 800bcc4:	7020      	strb	r0, [r4, #0]
 800bcc6:	2500      	movs	r5, #0
 800bcc8:	f7ff b878 	b.w	800adbc <dwt_ioctl+0x154>
 800bccc:	2c00      	cmp	r4, #0
 800bcce:	f000 8740 	beq.w	800cb52 <dwt_ioctl+0x1eea>
 800bcd2:	78a2      	ldrb	r2, [r4, #2]
 800bcd4:	8821      	ldrh	r1, [r4, #0]
 800bcd6:	f7fd fd97 	bl	8009808 <ull_aon_write>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	f7ff b86e 	b.w	800adbc <dwt_ioctl+0x154>
 800bce0:	4b84      	ldr	r3, [pc, #528]	; (800bef4 <dwt_ioctl+0x128c>)
 800bce2:	4a85      	ldr	r2, [pc, #532]	; (800bef8 <dwt_ioctl+0x1290>)
 800bce4:	2d01      	cmp	r5, #1
 800bce6:	bf18      	it	ne
 800bce8:	4613      	movne	r3, r2
 800bcea:	2d01      	cmp	r5, #1
 800bcec:	4983      	ldr	r1, [pc, #524]	; (800befc <dwt_ioctl+0x1294>)
 800bcee:	bf18      	it	ne
 800bcf0:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800bcf4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bcf6:	7b92      	ldrb	r2, [r2, #14]
 800bcf8:	2a01      	cmp	r2, #1
 800bcfa:	d012      	beq.n	800bd22 <dwt_ioctl+0x10ba>
 800bcfc:	2a03      	cmp	r2, #3
 800bcfe:	d117      	bne.n	800bd30 <dwt_ioctl+0x10c8>
 800bd00:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800bd04:	3a01      	subs	r2, #1
 800bd06:	441a      	add	r2, r3
 800bd08:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800bd0c:	f7fc fee3 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800bd10:	09c0      	lsrs	r0, r0, #7
 800bd12:	8020      	strh	r0, [r4, #0]
 800bd14:	8825      	ldrh	r5, [r4, #0]
 800bd16:	3500      	adds	r5, #0
 800bd18:	bf18      	it	ne
 800bd1a:	2501      	movne	r5, #1
 800bd1c:	426d      	negs	r5, r5
 800bd1e:	f7ff b84d 	b.w	800adbc <dwt_ioctl+0x154>
 800bd22:	2202      	movs	r2, #2
 800bd24:	4619      	mov	r1, r3
 800bd26:	f7fc fed6 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800bd2a:	09c0      	lsrs	r0, r0, #7
 800bd2c:	8020      	strh	r0, [r4, #0]
 800bd2e:	e7f1      	b.n	800bd14 <dwt_ioctl+0x10ac>
 800bd30:	2202      	movs	r2, #2
 800bd32:	f7fc fed0 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800bd36:	09c0      	lsrs	r0, r0, #7
 800bd38:	8020      	strh	r0, [r4, #0]
 800bd3a:	e7eb      	b.n	800bd14 <dwt_ioctl+0x10ac>
 800bd3c:	2c00      	cmp	r4, #0
 800bd3e:	f000 870b 	beq.w	800cb58 <dwt_ioctl+0x1ef0>
 800bd42:	7821      	ldrb	r1, [r4, #0]
 800bd44:	f7fe fb20 	bl	800a388 <ull_setleds>
 800bd48:	2500      	movs	r5, #0
 800bd4a:	f7ff b837 	b.w	800adbc <dwt_ioctl+0x154>
 800bd4e:	4611      	mov	r1, r2
 800bd50:	f7fe f9a2 	bl	800a098 <ull_setdwstate>
 800bd54:	2500      	movs	r5, #0
 800bd56:	f7ff b831 	b.w	800adbc <dwt_ioctl+0x154>
 800bd5a:	9400      	str	r4, [sp, #0]
 800bd5c:	2304      	movs	r3, #4
 800bd5e:	2200      	movs	r2, #0
 800bd60:	211c      	movs	r1, #28
 800bd62:	f7fc fe98 	bl	8008a96 <dwt_readfromdevice>
 800bd66:	2500      	movs	r5, #0
 800bd68:	f7ff b828 	b.w	800adbc <dwt_ioctl+0x154>
 800bd6c:	2c00      	cmp	r4, #0
 800bd6e:	f000 86f6 	beq.w	800cb5e <dwt_ioctl+0x1ef6>
 800bd72:	2202      	movs	r2, #2
 800bd74:	2144      	movs	r1, #68	; 0x44
 800bd76:	f7fc feae 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800bd7a:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800bd7e:	7020      	strb	r0, [r4, #0]
 800bd80:	2500      	movs	r5, #0
 800bd82:	f7ff b81b 	b.w	800adbc <dwt_ioctl+0x154>
 800bd86:	2c00      	cmp	r4, #0
 800bd88:	f000 86ec 	beq.w	800cb64 <dwt_ioctl+0x1efc>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2144      	movs	r1, #68	; 0x44
 800bd90:	f7fc feb3 	bl	8008afa <dwt_read8bitoffsetreg>
 800bd94:	f000 0001 	and.w	r0, r0, #1
 800bd98:	7020      	strb	r0, [r4, #0]
 800bd9a:	2500      	movs	r5, #0
 800bd9c:	f7ff b80e 	b.w	800adbc <dwt_ioctl+0x154>
 800bda0:	2c00      	cmp	r4, #0
 800bda2:	f000 86e2 	beq.w	800cb6a <dwt_ioctl+0x1f02>
 800bda6:	8862      	ldrh	r2, [r4, #2]
 800bda8:	8821      	ldrh	r1, [r4, #0]
 800bdaa:	f7fe f9d1 	bl	800a150 <ull_configureframefilter>
 800bdae:	2500      	movs	r5, #0
 800bdb0:	f7ff b804 	b.w	800adbc <dwt_ioctl+0x154>
 800bdb4:	9400      	str	r4, [sp, #0]
 800bdb6:	2308      	movs	r3, #8
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2104      	movs	r1, #4
 800bdbc:	f7fd fa82 	bl	80092c4 <dwt_writetodevice>
 800bdc0:	2500      	movs	r5, #0
 800bdc2:	f7fe bffb 	b.w	800adbc <dwt_ioctl+0x154>
 800bdc6:	9400      	str	r4, [sp, #0]
 800bdc8:	2308      	movs	r3, #8
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2104      	movs	r1, #4
 800bdce:	f7fc fe62 	bl	8008a96 <dwt_readfromdevice>
 800bdd2:	2500      	movs	r5, #0
 800bdd4:	f7fe bff2 	b.w	800adbc <dwt_ioctl+0x154>
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	f000 86c9 	beq.w	800cb70 <dwt_ioctl+0x1f08>
 800bdde:	8823      	ldrh	r3, [r4, #0]
 800bde0:	2202      	movs	r2, #2
 800bde2:	210c      	movs	r1, #12
 800bde4:	f7fd fa79 	bl	80092da <dwt_write16bitoffsetreg>
 800bde8:	2500      	movs	r5, #0
 800bdea:	f7fe bfe7 	b.w	800adbc <dwt_ioctl+0x154>
 800bdee:	2c00      	cmp	r4, #0
 800bdf0:	f000 86c1 	beq.w	800cb76 <dwt_ioctl+0x1f0e>
 800bdf4:	8823      	ldrh	r3, [r4, #0]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	210c      	movs	r1, #12
 800bdfa:	f7fd fa6e 	bl	80092da <dwt_write16bitoffsetreg>
 800bdfe:	2500      	movs	r5, #0
 800be00:	f7fe bfdc 	b.w	800adbc <dwt_ioctl+0x154>
 800be04:	4621      	mov	r1, r4
 800be06:	f7fd fa3b 	bl	8009280 <ull_readrxtimestamp>
 800be0a:	2500      	movs	r5, #0
 800be0c:	f7fe bfd6 	b.w	800adbc <dwt_ioctl+0x154>
 800be10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800be12:	7b9b      	ldrb	r3, [r3, #14]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d00b      	beq.n	800be30 <dwt_ioctl+0x11c8>
 800be18:	2b03      	cmp	r3, #3
 800be1a:	d112      	bne.n	800be42 <dwt_ioctl+0x11da>
 800be1c:	9400      	str	r4, [sp, #0]
 800be1e:	2305      	movs	r3, #5
 800be20:	2220      	movs	r2, #32
 800be22:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800be26:	f7fc fe36 	bl	8008a96 <dwt_readfromdevice>
 800be2a:	2500      	movs	r5, #0
 800be2c:	f7fe bfc6 	b.w	800adbc <dwt_ioctl+0x154>
 800be30:	9400      	str	r4, [sp, #0]
 800be32:	2305      	movs	r3, #5
 800be34:	2200      	movs	r2, #0
 800be36:	4932      	ldr	r1, [pc, #200]	; (800bf00 <dwt_ioctl+0x1298>)
 800be38:	f7fc fe2d 	bl	8008a96 <dwt_readfromdevice>
 800be3c:	2500      	movs	r5, #0
 800be3e:	f7fe bfbd 	b.w	800adbc <dwt_ioctl+0x154>
 800be42:	9400      	str	r4, [sp, #0]
 800be44:	2305      	movs	r3, #5
 800be46:	2200      	movs	r2, #0
 800be48:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800be4c:	f7fc fe23 	bl	8008a96 <dwt_readfromdevice>
 800be50:	2500      	movs	r5, #0
 800be52:	f7fe bfb3 	b.w	800adbc <dwt_ioctl+0x154>
 800be56:	2500      	movs	r5, #0
 800be58:	f804 5b01 	strb.w	r5, [r4], #1
 800be5c:	9400      	str	r4, [sp, #0]
 800be5e:	2304      	movs	r3, #4
 800be60:	462a      	mov	r2, r5
 800be62:	216c      	movs	r1, #108	; 0x6c
 800be64:	f7fc fe17 	bl	8008a96 <dwt_readfromdevice>
 800be68:	f7fe bfa8 	b.w	800adbc <dwt_ioctl+0x154>
 800be6c:	2c00      	cmp	r4, #0
 800be6e:	f000 8685 	beq.w	800cb7c <dwt_ioctl+0x1f14>
 800be72:	2201      	movs	r2, #1
 800be74:	2160      	movs	r1, #96	; 0x60
 800be76:	f7fc fe18 	bl	8008aaa <dwt_read32bitoffsetreg>
 800be7a:	6020      	str	r0, [r4, #0]
 800be7c:	2500      	movs	r5, #0
 800be7e:	f7fe bf9d 	b.w	800adbc <dwt_ioctl+0x154>
 800be82:	2c00      	cmp	r4, #0
 800be84:	f000 867d 	beq.w	800cb82 <dwt_ioctl+0x1f1a>
 800be88:	2200      	movs	r2, #0
 800be8a:	2160      	movs	r1, #96	; 0x60
 800be8c:	f7fc fe0d 	bl	8008aaa <dwt_read32bitoffsetreg>
 800be90:	6020      	str	r0, [r4, #0]
 800be92:	2500      	movs	r5, #0
 800be94:	f7fe bf92 	b.w	800adbc <dwt_ioctl+0x154>
 800be98:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800be9a:	7b9b      	ldrb	r3, [r3, #14]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d00b      	beq.n	800beb8 <dwt_ioctl+0x1250>
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d131      	bne.n	800bf08 <dwt_ioctl+0x12a0>
 800bea4:	9400      	str	r4, [sp, #0]
 800bea6:	2305      	movs	r3, #5
 800bea8:	2228      	movs	r2, #40	; 0x28
 800beaa:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800beae:	f7fc fdf2 	bl	8008a96 <dwt_readfromdevice>
 800beb2:	2500      	movs	r5, #0
 800beb4:	f7fe bf82 	b.w	800adbc <dwt_ioctl+0x154>
 800beb8:	9400      	str	r4, [sp, #0]
 800beba:	2305      	movs	r3, #5
 800bebc:	2200      	movs	r2, #0
 800bebe:	4911      	ldr	r1, [pc, #68]	; (800bf04 <dwt_ioctl+0x129c>)
 800bec0:	f7fc fde9 	bl	8008a96 <dwt_readfromdevice>
 800bec4:	2500      	movs	r5, #0
 800bec6:	f7fe bf79 	b.w	800adbc <dwt_ioctl+0x154>
 800beca:	bf00      	nop
 800becc:	000f0004 	.word	0x000f0004
 800bed0:	000f0008 	.word	0x000f0008
 800bed4:	000f000c 	.word	0x000f000c
 800bed8:	000f0010 	.word	0x000f0010
 800bedc:	000f0014 	.word	0x000f0014
 800bee0:	000f0018 	.word	0x000f0018
 800bee4:	000f001c 	.word	0x000f001c
 800bee8:	000f0020 	.word	0x000f0020
 800beec:	00060004 	.word	0x00060004
 800bef0:	0011001c 	.word	0x0011001c
 800bef4:	00180034 	.word	0x00180034
 800bef8:	0018002c 	.word	0x0018002c
 800befc:	000c0014 	.word	0x000c0014
 800bf00:	00180020 	.word	0x00180020
 800bf04:	00180028 	.word	0x00180028
 800bf08:	9400      	str	r4, [sp, #0]
 800bf0a:	2305      	movs	r3, #5
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	49ce      	ldr	r1, [pc, #824]	; (800c248 <dwt_ioctl+0x15e0>)
 800bf10:	f7fc fdc1 	bl	8008a96 <dwt_readfromdevice>
 800bf14:	2500      	movs	r5, #0
 800bf16:	f7fe bf51 	b.w	800adbc <dwt_ioctl+0x154>
 800bf1a:	2c00      	cmp	r4, #0
 800bf1c:	f000 8634 	beq.w	800cb88 <dwt_ioctl+0x1f20>
 800bf20:	2200      	movs	r2, #0
 800bf22:	211c      	movs	r1, #28
 800bf24:	f7fc fdc1 	bl	8008aaa <dwt_read32bitoffsetreg>
 800bf28:	6020      	str	r0, [r4, #0]
 800bf2a:	2500      	movs	r5, #0
 800bf2c:	f7fe bf46 	b.w	800adbc <dwt_ioctl+0x154>
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	f000 862c 	beq.w	800cb8e <dwt_ioctl+0x1f26>
 800bf36:	8825      	ldrh	r5, [r4, #0]
 800bf38:	6867      	ldr	r7, [r4, #4]
 800bf3a:	7a23      	ldrb	r3, [r4, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 8629 	beq.w	800cb94 <dwt_ioctl+0x1f2c>
 800bf42:	463c      	mov	r4, r7
 800bf44:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7fd fa00 	bl	8009350 <_dwt_otpread>
 800bf50:	f844 0b04 	str.w	r0, [r4], #4
 800bf54:	3501      	adds	r5, #1
 800bf56:	b2ad      	uxth	r5, r5
 800bf58:	42bc      	cmp	r4, r7
 800bf5a:	d1f5      	bne.n	800bf48 <dwt_ioctl+0x12e0>
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	f7fe bf2d 	b.w	800adbc <dwt_ioctl+0x154>
 800bf62:	2c00      	cmp	r4, #0
 800bf64:	f000 8619 	beq.w	800cb9a <dwt_ioctl+0x1f32>
 800bf68:	7823      	ldrb	r3, [r4, #0]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	2124      	movs	r1, #36	; 0x24
 800bf6e:	f7fd fb9f 	bl	80096b0 <dwt_write8bitoffsetreg>
 800bf72:	2500      	movs	r5, #0
 800bf74:	f7fe bf22 	b.w	800adbc <dwt_ioctl+0x154>
 800bf78:	f7fe f90e 	bl	800a198 <ull_run_pgfcal>
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	f7fe bf1d 	b.w	800adbc <dwt_ioctl+0x154>
 800bf82:	4611      	mov	r1, r2
 800bf84:	f7fe fa4e 	bl	800a424 <ull_pgf_cal>
 800bf88:	4605      	mov	r5, r0
 800bf8a:	f7fe bf17 	b.w	800adbc <dwt_ioctl+0x154>
 800bf8e:	2c00      	cmp	r4, #0
 800bf90:	f000 8606 	beq.w	800cba0 <dwt_ioctl+0x1f38>
 800bf94:	78a5      	ldrb	r5, [r4, #2]
 800bf96:	2101      	movs	r1, #1
 800bf98:	f7fd f9b0 	bl	80092fc <ull_force_clocks>
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7fd fe6e 	bl	8009c80 <ull_enable_rf_tx>
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7fd fe9f 	bl	8009ce8 <ull_enable_rftx_blocks>
 800bfaa:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800bfae:	2200      	movs	r2, #0
 800bfb0:	49a6      	ldr	r1, [pc, #664]	; (800c24c <dwt_ioctl+0x15e4>)
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f7fd fb7c 	bl	80096b0 <dwt_write8bitoffsetreg>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	23ff      	movs	r3, #255	; 0xff
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	49a3      	ldr	r1, [pc, #652]	; (800c250 <dwt_ioctl+0x15e8>)
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f7fd ffaa 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800bfc8:	4fa1      	ldr	r7, [pc, #644]	; (800c250 <dwt_ioctl+0x15e8>)
 800bfca:	2500      	movs	r5, #0
 800bfcc:	462a      	mov	r2, r5
 800bfce:	4639      	mov	r1, r7
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f7fc fd92 	bl	8008afa <dwt_read8bitoffsetreg>
 800bfd6:	f010 0f01 	tst.w	r0, #1
 800bfda:	d1f7      	bne.n	800bfcc <dwt_ioctl+0x1364>
 800bfdc:	2200      	movs	r2, #0
 800bfde:	499d      	ldr	r1, [pc, #628]	; (800c254 <dwt_ioctl+0x15ec>)
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f7fc fd78 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7fd fb03 	bl	80095f4 <ull_disable_rftx_blocks>
 800bfee:	2100      	movs	r1, #0
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7fd fb09 	bl	8009608 <ull_disable_rf_tx>
 800bff6:	2105      	movs	r1, #5
 800bff8:	4630      	mov	r0, r6
 800bffa:	f7fd f97f 	bl	80092fc <ull_force_clocks>
 800bffe:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800c002:	8025      	strh	r5, [r4, #0]
 800c004:	2500      	movs	r5, #0
 800c006:	f7fe bed9 	b.w	800adbc <dwt_ioctl+0x154>
 800c00a:	2102      	movs	r1, #2
 800c00c:	f7fe f844 	bl	800a098 <ull_setdwstate>
 800c010:	2101      	movs	r1, #1
 800c012:	4630      	mov	r0, r6
 800c014:	f7fe f840 	bl	800a098 <ull_setdwstate>
 800c018:	2432      	movs	r4, #50	; 0x32
 800c01a:	f04f 0814 	mov.w	r8, #20
 800c01e:	2700      	movs	r7, #0
 800c020:	2544      	movs	r5, #68	; 0x44
 800c022:	4640      	mov	r0, r8
 800c024:	f7f4 fb0f 	bl	8000646 <deca_usleep>
 800c028:	463a      	mov	r2, r7
 800c02a:	4629      	mov	r1, r5
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7fc fd64 	bl	8008afa <dwt_read8bitoffsetreg>
 800c032:	f010 0f02 	tst.w	r0, #2
 800c036:	d105      	bne.n	800c044 <dwt_ioctl+0x13dc>
 800c038:	1e63      	subs	r3, r4, #1
 800c03a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800c03e:	d1f0      	bne.n	800c022 <dwt_ioctl+0x13ba>
 800c040:	2501      	movs	r5, #1
 800c042:	e000      	b.n	800c046 <dwt_ioctl+0x13de>
 800c044:	2500      	movs	r5, #0
 800c046:	426d      	negs	r5, r5
 800c048:	f7fe beb8 	b.w	800adbc <dwt_ioctl+0x154>
 800c04c:	2c00      	cmp	r4, #0
 800c04e:	f000 85aa 	beq.w	800cba6 <dwt_ioctl+0x1f3e>
 800c052:	7823      	ldrb	r3, [r4, #0]
 800c054:	031b      	lsls	r3, r3, #12
 800c056:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c05a:	7862      	ldrb	r2, [r4, #1]
 800c05c:	2a01      	cmp	r2, #1
 800c05e:	bf08      	it	eq
 800c060:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800c06a:	2200      	movs	r2, #0
 800c06c:	497a      	ldr	r1, [pc, #488]	; (800c258 <dwt_ioctl+0x15f0>)
 800c06e:	f7fd fde3 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800c072:	2500      	movs	r5, #0
 800c074:	f7fe bea2 	b.w	800adbc <dwt_ioctl+0x154>
 800c078:	2c00      	cmp	r4, #0
 800c07a:	f000 8597 	beq.w	800cbac <dwt_ioctl+0x1f44>
 800c07e:	6862      	ldr	r2, [r4, #4]
 800c080:	6821      	ldr	r1, [r4, #0]
 800c082:	f7fd fefb 	bl	8009e7c <ull_setgpiomode>
 800c086:	2500      	movs	r5, #0
 800c088:	f7fe be98 	b.w	800adbc <dwt_ioctl+0x154>
 800c08c:	2c00      	cmp	r4, #0
 800c08e:	f000 8590 	beq.w	800cbb2 <dwt_ioctl+0x1f4a>
 800c092:	8823      	ldrh	r3, [r4, #0]
 800c094:	2200      	movs	r2, #0
 800c096:	4971      	ldr	r1, [pc, #452]	; (800c25c <dwt_ioctl+0x15f4>)
 800c098:	f7fd f91f 	bl	80092da <dwt_write16bitoffsetreg>
 800c09c:	2500      	movs	r5, #0
 800c09e:	f7fe be8d 	b.w	800adbc <dwt_ioctl+0x154>
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	f000 8588 	beq.w	800cbb8 <dwt_ioctl+0x1f50>
 800c0a8:	6862      	ldr	r2, [r4, #4]
 800c0aa:	8821      	ldrh	r1, [r4, #0]
 800c0ac:	f7fe f9ea 	bl	800a484 <ull_setgpiovalue>
 800c0b0:	2500      	movs	r5, #0
 800c0b2:	f7fe be83 	b.w	800adbc <dwt_ioctl+0x154>
 800c0b6:	2c00      	cmp	r4, #0
 800c0b8:	f000 8581 	beq.w	800cbbe <dwt_ioctl+0x1f56>
 800c0bc:	7865      	ldrb	r5, [r4, #1]
 800c0be:	7823      	ldrb	r3, [r4, #0]
 800c0c0:	b18b      	cbz	r3, 800c0e6 <dwt_ioctl+0x147e>
 800c0c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	739a      	strb	r2, [r3, #14]
 800c0c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0cc:	2208      	movs	r2, #8
 800c0ce:	b1e5      	cbz	r5, 800c10a <dwt_ioctl+0x14a2>
 800c0d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0d4:	9200      	str	r2, [sp, #0]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	2110      	movs	r1, #16
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7fd fdac 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800c0e0:	2500      	movs	r5, #0
 800c0e2:	f7fe be6b 	b.w	800adbc <dwt_ioctl+0x154>
 800c0e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	739a      	strb	r2, [r3, #14]
 800c0ec:	2318      	movs	r3, #24
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	495b      	ldr	r1, [pc, #364]	; (800c260 <dwt_ioctl+0x15f8>)
 800c0f2:	f7fd f94f 	bl	8009394 <dwt_write32bitoffsetreg>
 800c0f6:	23e8      	movs	r3, #232	; 0xe8
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	495a      	ldr	r1, [pc, #360]	; (800c264 <dwt_ioctl+0x15fc>)
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fd f949 	bl	8009394 <dwt_write32bitoffsetreg>
 800c102:	f06f 0308 	mvn.w	r3, #8
 800c106:	2200      	movs	r2, #0
 800c108:	e7e1      	b.n	800c0ce <dwt_ioctl+0x1466>
 800c10a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c10e:	e7e1      	b.n	800c0d4 <dwt_ioctl+0x146c>
 800c110:	2c00      	cmp	r4, #0
 800c112:	f000 8557 	beq.w	800cbc4 <dwt_ioctl+0x1f5c>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	2200      	movs	r2, #0
 800c11a:	2130      	movs	r1, #48	; 0x30
 800c11c:	f7fd f93a 	bl	8009394 <dwt_write32bitoffsetreg>
 800c120:	2500      	movs	r5, #0
 800c122:	f7fe be4b 	b.w	800adbc <dwt_ioctl+0x154>
 800c126:	2c00      	cmp	r4, #0
 800c128:	f000 854f 	beq.w	800cbca <dwt_ioctl+0x1f62>
 800c12c:	2200      	movs	r2, #0
 800c12e:	4629      	mov	r1, r5
 800c130:	f7fc fcbb 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c134:	6020      	str	r0, [r4, #0]
 800c136:	2500      	movs	r5, #0
 800c138:	f7fe be40 	b.w	800adbc <dwt_ioctl+0x154>
 800c13c:	4623      	mov	r3, r4
 800c13e:	2200      	movs	r2, #0
 800c140:	4629      	mov	r1, r5
 800c142:	f7fd f927 	bl	8009394 <dwt_write32bitoffsetreg>
 800c146:	2500      	movs	r5, #0
 800c148:	f7fe be38 	b.w	800adbc <dwt_ioctl+0x154>
 800c14c:	2c00      	cmp	r4, #0
 800c14e:	f000 853f 	beq.w	800cbd0 <dwt_ioctl+0x1f68>
 800c152:	2203      	movs	r2, #3
 800c154:	4944      	ldr	r1, [pc, #272]	; (800c268 <dwt_ioctl+0x1600>)
 800c156:	f7fc fcd0 	bl	8008afa <dwt_read8bitoffsetreg>
 800c15a:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800c15e:	7020      	strb	r0, [r4, #0]
 800c160:	2500      	movs	r5, #0
 800c162:	f7fe be2b 	b.w	800adbc <dwt_ioctl+0x154>
 800c166:	2c00      	cmp	r4, #0
 800c168:	f000 8535 	beq.w	800cbd6 <dwt_ioctl+0x1f6e>
 800c16c:	6823      	ldr	r3, [r4, #0]
 800c16e:	2200      	movs	r2, #0
 800c170:	2144      	movs	r1, #68	; 0x44
 800c172:	f7fd f90f 	bl	8009394 <dwt_write32bitoffsetreg>
 800c176:	2500      	movs	r5, #0
 800c178:	f7fe be20 	b.w	800adbc <dwt_ioctl+0x154>
 800c17c:	2c00      	cmp	r4, #0
 800c17e:	f000 852d 	beq.w	800cbdc <dwt_ioctl+0x1f74>
 800c182:	8823      	ldrh	r3, [r4, #0]
 800c184:	2200      	movs	r2, #0
 800c186:	2148      	movs	r1, #72	; 0x48
 800c188:	f7fd f8a7 	bl	80092da <dwt_write16bitoffsetreg>
 800c18c:	2500      	movs	r5, #0
 800c18e:	f7fe be15 	b.w	800adbc <dwt_ioctl+0x154>
 800c192:	2c00      	cmp	r4, #0
 800c194:	f000 8525 	beq.w	800cbe2 <dwt_ioctl+0x1f7a>
 800c198:	2200      	movs	r2, #0
 800c19a:	2144      	movs	r1, #68	; 0x44
 800c19c:	f7fc fc85 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c1a0:	6020      	str	r0, [r4, #0]
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	f7fe be0a 	b.w	800adbc <dwt_ioctl+0x154>
 800c1a8:	2c00      	cmp	r4, #0
 800c1aa:	f000 851d 	beq.w	800cbe8 <dwt_ioctl+0x1f80>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	2148      	movs	r1, #72	; 0x48
 800c1b2:	f7fc fc90 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800c1b6:	6020      	str	r0, [r4, #0]
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	f7fe bdff 	b.w	800adbc <dwt_ioctl+0x154>
 800c1be:	2c00      	cmp	r4, #0
 800c1c0:	f000 8515 	beq.w	800cbee <dwt_ioctl+0x1f86>
 800c1c4:	7823      	ldrb	r3, [r4, #0]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	4928      	ldr	r1, [pc, #160]	; (800c26c <dwt_ioctl+0x1604>)
 800c1ca:	f7fd fa71 	bl	80096b0 <dwt_write8bitoffsetreg>
 800c1ce:	2500      	movs	r5, #0
 800c1d0:	f7fe bdf4 	b.w	800adbc <dwt_ioctl+0x154>
 800c1d4:	2c00      	cmp	r4, #0
 800c1d6:	f000 850d 	beq.w	800cbf4 <dwt_ioctl+0x1f8c>
 800c1da:	2200      	movs	r2, #0
 800c1dc:	2144      	movs	r1, #68	; 0x44
 800c1de:	f7fc fc8c 	bl	8008afa <dwt_read8bitoffsetreg>
 800c1e2:	7020      	strb	r0, [r4, #0]
 800c1e4:	2500      	movs	r5, #0
 800c1e6:	f7fe bde9 	b.w	800adbc <dwt_ioctl+0x154>
 800c1ea:	2c00      	cmp	r4, #0
 800c1ec:	f000 8505 	beq.w	800cbfa <dwt_ioctl+0x1f92>
 800c1f0:	f7fd fa6a 	bl	80096c8 <ull_getframelength>
 800c1f4:	6020      	str	r0, [r4, #0]
 800c1f6:	2500      	movs	r5, #0
 800c1f8:	f7fe bde0 	b.w	800adbc <dwt_ioctl+0x154>
 800c1fc:	2c00      	cmp	r4, #0
 800c1fe:	f000 84ff 	beq.w	800cc00 <dwt_ioctl+0x1f98>
 800c202:	2200      	movs	r2, #0
 800c204:	491a      	ldr	r1, [pc, #104]	; (800c270 <dwt_ioctl+0x1608>)
 800c206:	f7fc fc66 	bl	8008ad6 <dwt_read16bitoffsetreg>
 800c20a:	8020      	strh	r0, [r4, #0]
 800c20c:	2500      	movs	r5, #0
 800c20e:	f7fe bdd5 	b.w	800adbc <dwt_ioctl+0x154>
 800c212:	2c00      	cmp	r4, #0
 800c214:	f000 84f7 	beq.w	800cc06 <dwt_ioctl+0x1f9e>
 800c218:	2200      	movs	r2, #0
 800c21a:	4916      	ldr	r1, [pc, #88]	; (800c274 <dwt_ioctl+0x160c>)
 800c21c:	f7fc fc45 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c220:	6020      	str	r0, [r4, #0]
 800c222:	2500      	movs	r5, #0
 800c224:	f7fe bdca 	b.w	800adbc <dwt_ioctl+0x154>
 800c228:	2c00      	cmp	r4, #0
 800c22a:	f000 84ef 	beq.w	800cc0c <dwt_ioctl+0x1fa4>
 800c22e:	8823      	ldrh	r3, [r4, #0]
 800c230:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c23a:	2200      	movs	r2, #0
 800c23c:	490d      	ldr	r1, [pc, #52]	; (800c274 <dwt_ioctl+0x160c>)
 800c23e:	f7fe f889 	bl	800a354 <dwt_modify16bitoffsetreg>
 800c242:	2500      	movs	r5, #0
 800c244:	f7fe bdba 	b.w	800adbc <dwt_ioctl+0x154>
 800c248:	000c0008 	.word	0x000c0008
 800c24c:	0007001c 	.word	0x0007001c
 800c250:	00080010 	.word	0x00080010
 800c254:	00080014 	.word	0x00080014
 800c258:	00070014 	.word	0x00070014
 800c25c:	00050008 	.word	0x00050008
 800c260:	001f000c 	.word	0x001f000c
 800c264:	001f0010 	.word	0x001f0010
 800c268:	00030060 	.word	0x00030060
 800c26c:	00010018 	.word	0x00010018
 800c270:	0005002c 	.word	0x0005002c
 800c274:	000e001c 	.word	0x000e001c
 800c278:	2c00      	cmp	r4, #0
 800c27a:	f000 84ca 	beq.w	800cc12 <dwt_ioctl+0x1faa>
 800c27e:	88a7      	ldrh	r7, [r4, #4]
 800c280:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800c284:	7b23      	ldrb	r3, [r4, #12]
 800c286:	9306      	str	r3, [sp, #24]
 800c288:	6922      	ldr	r2, [r4, #16]
 800c28a:	9204      	str	r2, [sp, #16]
 800c28c:	6962      	ldr	r2, [r4, #20]
 800c28e:	9205      	str	r2, [sp, #20]
 800c290:	f00b 0203 	and.w	r2, fp, #3
 800c294:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800c298:	2b05      	cmp	r3, #5
 800c29a:	d145      	bne.n	800c328 <dwt_ioctl+0x16c0>
 800c29c:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800c2a0:	bf28      	it	cs
 800c2a2:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800c2a6:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800c5e0 <dwt_ioctl+0x1978>
 800c2aa:	2f04      	cmp	r7, #4
 800c2ac:	d805      	bhi.n	800c2ba <dwt_ioctl+0x1652>
 800c2ae:	eb09 0300 	add.w	r3, r9, r0
 800c2b2:	785b      	ldrb	r3, [r3, #1]
 800c2b4:	3b05      	subs	r3, #5
 800c2b6:	429f      	cmp	r7, r3
 800c2b8:	db3e      	blt.n	800c338 <dwt_ioctl+0x16d0>
 800c2ba:	2a01      	cmp	r2, #1
 800c2bc:	d87c      	bhi.n	800c3b8 <dwt_ioctl+0x1750>
 800c2be:	4bc4      	ldr	r3, [pc, #784]	; (800c5d0 <dwt_ioctl+0x1968>)
 800c2c0:	5c99      	ldrb	r1, [r3, r2]
 800c2c2:	463e      	mov	r6, r7
 800c2c4:	42b9      	cmp	r1, r7
 800c2c6:	da79      	bge.n	800c3bc <dwt_ioctl+0x1754>
 800c2c8:	1c55      	adds	r5, r2, #1
 800c2ca:	fa53 f585 	uxtab	r5, r3, r5
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	440b      	add	r3, r1
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	3201      	adds	r2, #1
 800c2d6:	b2d2      	uxtb	r2, r2
 800c2d8:	2a02      	cmp	r2, #2
 800c2da:	d005      	beq.n	800c2e8 <dwt_ioctl+0x1680>
 800c2dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c2e0:	eba6 0c03 	sub.w	ip, r6, r3
 800c2e4:	4561      	cmp	r1, ip
 800c2e6:	dbf3      	blt.n	800c2d0 <dwt_ioctl+0x1668>
 800c2e8:	429f      	cmp	r7, r3
 800c2ea:	bf08      	it	eq
 800c2ec:	9003      	streq	r0, [sp, #12]
 800c2ee:	d069      	beq.n	800c3c4 <dwt_ioctl+0x175c>
 800c2f0:	f107 0805 	add.w	r8, r7, #5
 800c2f4:	fa1f f888 	uxth.w	r8, r8
 800c2f8:	2580      	movs	r5, #128	; 0x80
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	9107      	str	r1, [sp, #28]
 800c2fe:	9103      	str	r1, [sp, #12]
 800c300:	9108      	str	r1, [sp, #32]
 800c302:	460e      	mov	r6, r1
 800c304:	2105      	movs	r1, #5
 800c306:	46be      	mov	lr, r7
 800c308:	428f      	cmp	r7, r1
 800c30a:	bf38      	it	cc
 800c30c:	468e      	movcc	lr, r1
 800c30e:	f1ae 0e05 	sub.w	lr, lr, #5
 800c312:	fa1f fe8e 	uxth.w	lr, lr
 800c316:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800c5d0 <dwt_ioctl+0x1968>
 800c31a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c31e:	468b      	mov	fp, r1
 800c320:	46bc      	mov	ip, r7
 800c322:	4637      	mov	r7, r6
 800c324:	f000 bcec 	b.w	800cd00 <dwt_ioctl+0x2098>
 800c328:	f240 1331 	movw	r3, #305	; 0x131
 800c32c:	429f      	cmp	r7, r3
 800c32e:	bf28      	it	cs
 800c330:	461f      	movcs	r7, r3
 800c332:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800c5e4 <dwt_ioctl+0x197c>
 800c336:	e7b8      	b.n	800c2aa <dwt_ioctl+0x1642>
 800c338:	2300      	movs	r3, #0
 800c33a:	9a05      	ldr	r2, [sp, #20]
 800c33c:	8013      	strh	r3, [r2, #0]
 800c33e:	9a04      	ldr	r2, [sp, #16]
 800c340:	f8c2 b000 	str.w	fp, [r2]
 800c344:	e04d      	b.n	800c3e2 <dwt_ioctl+0x177a>
 800c346:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800c34a:	2300      	movs	r3, #0
 800c34c:	9a05      	ldr	r2, [sp, #20]
 800c34e:	8013      	strh	r3, [r2, #0]
 800c350:	9b04      	ldr	r3, [sp, #16]
 800c352:	f8c3 b000 	str.w	fp, [r3]
 800c356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c35a:	e042      	b.n	800c3e2 <dwt_ioctl+0x177a>
 800c35c:	fa1f fb81 	uxth.w	fp, r1
 800c360:	9207      	str	r2, [sp, #28]
 800c362:	9003      	str	r0, [sp, #12]
 800c364:	9308      	str	r3, [sp, #32]
 800c366:	2701      	movs	r7, #1
 800c368:	f000 bcdb 	b.w	800cd22 <dwt_ioctl+0x20ba>
 800c36c:	2f00      	cmp	r7, #0
 800c36e:	f040 849b 	bne.w	800cca8 <dwt_ioctl+0x2040>
 800c372:	4598      	cmp	r8, r3
 800c374:	f200 84b0 	bhi.w	800ccd8 <dwt_ioctl+0x2070>
 800c378:	2e00      	cmp	r6, #0
 800c37a:	d039      	beq.n	800c3f0 <dwt_ioctl+0x1788>
 800c37c:	283f      	cmp	r0, #63	; 0x3f
 800c37e:	f000 84d5 	beq.w	800cd2c <dwt_ioctl+0x20c4>
 800c382:	2700      	movs	r7, #0
 800c384:	f819 1000 	ldrb.w	r1, [r9, r0]
 800c388:	1a5b      	subs	r3, r3, r1
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	1e46      	subs	r6, r0, #1
 800c38e:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800c392:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800c396:	bf18      	it	ne
 800c398:	2601      	movne	r6, #1
 800c39a:	f000 bca9 	b.w	800ccf0 <dwt_ioctl+0x2088>
 800c39e:	9906      	ldr	r1, [sp, #24]
 800c3a0:	2909      	cmp	r1, #9
 800c3a2:	f040 84c9 	bne.w	800cd38 <dwt_ioctl+0x20d0>
 800c3a6:	213f      	movs	r1, #63	; 0x3f
 800c3a8:	9103      	str	r1, [sp, #12]
 800c3aa:	e00b      	b.n	800c3c4 <dwt_ioctl+0x175c>
 800c3ac:	b2b3      	uxth	r3, r6
 800c3ae:	3201      	adds	r2, #1
 800c3b0:	b2d2      	uxtb	r2, r2
 800c3b2:	213f      	movs	r1, #63	; 0x3f
 800c3b4:	9103      	str	r1, [sp, #12]
 800c3b6:	e005      	b.n	800c3c4 <dwt_ioctl+0x175c>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	e795      	b.n	800c2e8 <dwt_ioctl+0x1680>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e793      	b.n	800c2e8 <dwt_ioctl+0x1680>
 800c3c0:	9003      	str	r0, [sp, #12]
 800c3c2:	4663      	mov	r3, ip
 800c3c4:	9905      	ldr	r1, [sp, #20]
 800c3c6:	800b      	strh	r3, [r1, #0]
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	0413      	lsls	r3, r2, #16
 800c3d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c3dc:	9a04      	ldr	r2, [sp, #16]
 800c3de:	6013      	str	r3, [r2, #0]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	6023      	str	r3, [r4, #0]
 800c3e4:	2500      	movs	r5, #0
 800c3e6:	f7fe bce9 	b.w	800adbc <dwt_ioctl+0x154>
 800c3ea:	9a07      	ldr	r2, [sp, #28]
 800c3ec:	9b08      	ldr	r3, [sp, #32]
 800c3ee:	e7e9      	b.n	800c3c4 <dwt_ioctl+0x175c>
 800c3f0:	9003      	str	r0, [sp, #12]
 800c3f2:	e7e7      	b.n	800c3c4 <dwt_ioctl+0x175c>
 800c3f4:	9a07      	ldr	r2, [sp, #28]
 800c3f6:	9b08      	ldr	r3, [sp, #32]
 800c3f8:	e7e4      	b.n	800c3c4 <dwt_ioctl+0x175c>
 800c3fa:	213f      	movs	r1, #63	; 0x3f
 800c3fc:	9103      	str	r1, [sp, #12]
 800c3fe:	e7e1      	b.n	800c3c4 <dwt_ioctl+0x175c>
 800c400:	2c00      	cmp	r4, #0
 800c402:	f000 8409 	beq.w	800cc18 <dwt_ioctl+0x1fb0>
 800c406:	7827      	ldrb	r7, [r4, #0]
 800c408:	7864      	ldrb	r4, [r4, #1]
 800c40a:	f7f4 f8f3 	bl	80005f4 <decamutexon>
 800c40e:	4605      	mov	r5, r0
 800c410:	2c02      	cmp	r4, #2
 800c412:	d00e      	beq.n	800c432 <dwt_ioctl+0x17ca>
 800c414:	2c04      	cmp	r4, #4
 800c416:	d00c      	beq.n	800c432 <dwt_ioctl+0x17ca>
 800c418:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800c41c:	2c01      	cmp	r4, #1
 800c41e:	d01a      	beq.n	800c456 <dwt_ioctl+0x17ee>
 800c420:	43fb      	mvns	r3, r7
 800c422:	2200      	movs	r2, #0
 800c424:	9200      	str	r2, [sp, #0]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	496a      	ldr	r1, [pc, #424]	; (800c5d4 <dwt_ioctl+0x196c>)
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7fd fd76 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c430:	e005      	b.n	800c43e <dwt_ioctl+0x17d6>
 800c432:	463b      	mov	r3, r7
 800c434:	2200      	movs	r2, #0
 800c436:	4967      	ldr	r1, [pc, #412]	; (800c5d4 <dwt_ioctl+0x196c>)
 800c438:	4630      	mov	r0, r6
 800c43a:	f7fd f939 	bl	80096b0 <dwt_write8bitoffsetreg>
 800c43e:	463b      	mov	r3, r7
 800c440:	2200      	movs	r2, #0
 800c442:	4965      	ldr	r1, [pc, #404]	; (800c5d8 <dwt_ioctl+0x1970>)
 800c444:	4630      	mov	r0, r6
 800c446:	f7fc ffa5 	bl	8009394 <dwt_write32bitoffsetreg>
 800c44a:	4628      	mov	r0, r5
 800c44c:	f7f4 f8e3 	bl	8000616 <decamutexoff>
 800c450:	2500      	movs	r5, #0
 800c452:	f7fe bcb3 	b.w	800adbc <dwt_ioctl+0x154>
 800c456:	9700      	str	r7, [sp, #0]
 800c458:	23ff      	movs	r3, #255	; 0xff
 800c45a:	2200      	movs	r2, #0
 800c45c:	495d      	ldr	r1, [pc, #372]	; (800c5d4 <dwt_ioctl+0x196c>)
 800c45e:	4630      	mov	r0, r6
 800c460:	f7fd fd5c 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c464:	e7eb      	b.n	800c43e <dwt_ioctl+0x17d6>
 800c466:	2302      	movs	r3, #2
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	2500      	movs	r5, #0
 800c46c:	9500      	str	r5, [sp, #0]
 800c46e:	462b      	mov	r3, r5
 800c470:	462a      	mov	r2, r5
 800c472:	211a      	movs	r1, #26
 800c474:	f7fc fa91 	bl	800899a <dwt_xfer3xxx>
 800c478:	f7fe bca0 	b.w	800adbc <dwt_ioctl+0x154>
 800c47c:	f7fe fbe0 	bl	800ac40 <ull_softreset_fcmd>
 800c480:	2500      	movs	r5, #0
 800c482:	f7fe bc9b 	b.w	800adbc <dwt_ioctl+0x154>
 800c486:	f7fe fbc7 	bl	800ac18 <ull_softreset_no_sema_fcmd>
 800c48a:	2500      	movs	r5, #0
 800c48c:	f7fe bc96 	b.w	800adbc <dwt_ioctl+0x154>
 800c490:	2302      	movs	r3, #2
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	2500      	movs	r5, #0
 800c496:	9500      	str	r5, [sp, #0]
 800c498:	462b      	mov	r3, r5
 800c49a:	462a      	mov	r2, r5
 800c49c:	2114      	movs	r1, #20
 800c49e:	f7fc fa7c 	bl	800899a <dwt_xfer3xxx>
 800c4a2:	f7fe bc8b 	b.w	800adbc <dwt_ioctl+0x154>
 800c4a6:	2402      	movs	r4, #2
 800c4a8:	9401      	str	r4, [sp, #4]
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	9500      	str	r5, [sp, #0]
 800c4ae:	462b      	mov	r3, r5
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	2115      	movs	r1, #21
 800c4b4:	f7fc fa71 	bl	800899a <dwt_xfer3xxx>
 800c4b8:	9401      	str	r4, [sp, #4]
 800c4ba:	9500      	str	r5, [sp, #0]
 800c4bc:	462b      	mov	r3, r5
 800c4be:	462a      	mov	r2, r5
 800c4c0:	2115      	movs	r1, #21
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7fc fa69 	bl	800899a <dwt_xfer3xxx>
 800c4c8:	f7fe bc78 	b.w	800adbc <dwt_ioctl+0x154>
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	2500      	movs	r5, #0
 800c4d2:	9500      	str	r5, [sp, #0]
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	462a      	mov	r2, r5
 800c4d8:	2116      	movs	r1, #22
 800c4da:	f7fc fa5e 	bl	800899a <dwt_xfer3xxx>
 800c4de:	f7fe bc6d 	b.w	800adbc <dwt_ioctl+0x154>
 800c4e2:	2c00      	cmp	r4, #0
 800c4e4:	f000 839b 	beq.w	800cc1e <dwt_ioctl+0x1fb6>
 800c4e8:	b93a      	cbnz	r2, 800c4fa <dwt_ioctl+0x1892>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c4f0:	f7fc fb03 	bl	8008afa <dwt_read8bitoffsetreg>
 800c4f4:	7020      	strb	r0, [r4, #0]
 800c4f6:	f7fe bc61 	b.w	800adbc <dwt_ioctl+0x154>
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c500:	f7fc fafb 	bl	8008afa <dwt_read8bitoffsetreg>
 800c504:	7020      	strb	r0, [r4, #0]
 800c506:	2500      	movs	r5, #0
 800c508:	f7fe bc58 	b.w	800adbc <dwt_ioctl+0x154>
 800c50c:	2c00      	cmp	r4, #0
 800c50e:	f000 8389 	beq.w	800cc24 <dwt_ioctl+0x1fbc>
 800c512:	7824      	ldrb	r4, [r4, #0]
 800c514:	2200      	movs	r2, #0
 800c516:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c51a:	f7fc faee 	bl	8008afa <dwt_read8bitoffsetreg>
 800c51e:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800c522:	4323      	orrs	r3, r4
 800c524:	2200      	movs	r2, #0
 800c526:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7fd f8c0 	bl	80096b0 <dwt_write8bitoffsetreg>
 800c530:	2500      	movs	r5, #0
 800c532:	f7fe bc43 	b.w	800adbc <dwt_ioctl+0x154>
 800c536:	2c00      	cmp	r4, #0
 800c538:	f000 8377 	beq.w	800cc2a <dwt_ioctl+0x1fc2>
 800c53c:	7824      	ldrb	r4, [r4, #0]
 800c53e:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800c542:	d01e      	beq.n	800c582 <dwt_ioctl+0x191a>
 800c544:	2d01      	cmp	r5, #1
 800c546:	f040 8373 	bne.w	800cc30 <dwt_ioctl+0x1fc8>
 800c54a:	2502      	movs	r5, #2
 800c54c:	2201      	movs	r2, #1
 800c54e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c552:	4630      	mov	r0, r6
 800c554:	f7fc fad1 	bl	8008afa <dwt_read8bitoffsetreg>
 800c558:	b9ac      	cbnz	r4, 800c586 <dwt_ioctl+0x191e>
 800c55a:	ea20 0305 	bic.w	r3, r0, r5
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2201      	movs	r2, #1
 800c562:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c566:	4630      	mov	r0, r6
 800c568:	f7fd f8a2 	bl	80096b0 <dwt_write8bitoffsetreg>
 800c56c:	2200      	movs	r2, #0
 800c56e:	2110      	movs	r1, #16
 800c570:	4630      	mov	r0, r6
 800c572:	f7fc fa9a 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c576:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800c57a:	d00b      	beq.n	800c594 <dwt_ioctl+0x192c>
 800c57c:	2500      	movs	r5, #0
 800c57e:	f7fe bc1d 	b.w	800adbc <dwt_ioctl+0x154>
 800c582:	2504      	movs	r5, #4
 800c584:	e7e2      	b.n	800c54c <dwt_ioctl+0x18e4>
 800c586:	2c01      	cmp	r4, #1
 800c588:	f040 8356 	bne.w	800cc38 <dwt_ioctl+0x1fd0>
 800c58c:	ea40 0305 	orr.w	r3, r0, r5
 800c590:	b2db      	uxtb	r3, r3
 800c592:	e7e5      	b.n	800c560 <dwt_ioctl+0x18f8>
 800c594:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2110      	movs	r1, #16
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f7fd fb48 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800c5a8:	2500      	movs	r5, #0
 800c5aa:	f7fe bc07 	b.w	800adbc <dwt_ioctl+0x154>
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	f000 8346 	beq.w	800cc40 <dwt_ioctl+0x1fd8>
 800c5b4:	7823      	ldrb	r3, [r4, #0]
 800c5b6:	035b      	lsls	r3, r3, #13
 800c5b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4905      	ldr	r1, [pc, #20]	; (800c5dc <dwt_ioctl+0x1974>)
 800c5c6:	f7fd fec5 	bl	800a354 <dwt_modify16bitoffsetreg>
 800c5ca:	2500      	movs	r5, #0
 800c5cc:	f7fe bbf6 	b.w	800adbc <dwt_ioctl+0x154>
 800c5d0:	08011fdc 	.word	0x08011fdc
 800c5d4:	0001001c 	.word	0x0001001c
 800c5d8:	00010018 	.word	0x00010018
 800c5dc:	000e000c 	.word	0x000e000c
 800c5e0:	08011f5c 	.word	0x08011f5c
 800c5e4:	08011f9c 	.word	0x08011f9c
 800c5e8:	2c00      	cmp	r4, #0
 800c5ea:	f000 832c 	beq.w	800cc46 <dwt_ioctl+0x1fde>
 800c5ee:	7825      	ldrb	r5, [r4, #0]
 800c5f0:	6862      	ldr	r2, [r4, #4]
 800c5f2:	2a01      	cmp	r2, #1
 800c5f4:	bf15      	itete	ne
 800c5f6:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800c5fa:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800c5fe:	27df      	movne	r7, #223	; 0xdf
 800c600:	27ef      	moveq	r7, #239	; 0xef
 800c602:	bf14      	ite	ne
 800c604:	f04f 0820 	movne.w	r8, #32
 800c608:	f04f 0810 	moveq.w	r8, #16
 800c60c:	2400      	movs	r4, #0
 800c60e:	9400      	str	r4, [sp, #0]
 800c610:	4622      	mov	r2, r4
 800c612:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c616:	f7fd fb0f 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800c61a:	9400      	str	r4, [sp, #0]
 800c61c:	463b      	mov	r3, r7
 800c61e:	4622      	mov	r2, r4
 800c620:	49be      	ldr	r1, [pc, #760]	; (800c91c <dwt_ioctl+0x1cb4>)
 800c622:	4630      	mov	r0, r6
 800c624:	f7fd fc7a 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c628:	2d01      	cmp	r5, #1
 800c62a:	d003      	beq.n	800c634 <dwt_ioctl+0x19cc>
 800c62c:	b165      	cbz	r5, 800c648 <dwt_ioctl+0x19e0>
 800c62e:	2500      	movs	r5, #0
 800c630:	f7fe bbc4 	b.w	800adbc <dwt_ioctl+0x154>
 800c634:	4625      	mov	r5, r4
 800c636:	9400      	str	r4, [sp, #0]
 800c638:	463b      	mov	r3, r7
 800c63a:	4622      	mov	r2, r4
 800c63c:	49b8      	ldr	r1, [pc, #736]	; (800c920 <dwt_ioctl+0x1cb8>)
 800c63e:	4630      	mov	r0, r6
 800c640:	f7fd fc6c 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c644:	f7fe bbba 	b.w	800adbc <dwt_ioctl+0x154>
 800c648:	f8cd 8000 	str.w	r8, [sp]
 800c64c:	23ff      	movs	r3, #255	; 0xff
 800c64e:	2200      	movs	r2, #0
 800c650:	49b3      	ldr	r1, [pc, #716]	; (800c920 <dwt_ioctl+0x1cb8>)
 800c652:	4630      	mov	r0, r6
 800c654:	f7fd fc62 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c658:	f7fe bbb0 	b.w	800adbc <dwt_ioctl+0x154>
 800c65c:	2c00      	cmp	r4, #0
 800c65e:	f000 82f5 	beq.w	800cc4c <dwt_ioctl+0x1fe4>
 800c662:	7822      	ldrb	r2, [r4, #0]
 800c664:	f012 0f01 	tst.w	r2, #1
 800c668:	d02d      	beq.n	800c6c6 <dwt_ioctl+0x1a5e>
 800c66a:	0157      	lsls	r7, r2, #5
 800c66c:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800c670:	2440      	movs	r4, #64	; 0x40
 800c672:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800c676:	f012 0f04 	tst.w	r2, #4
 800c67a:	d028      	beq.n	800c6ce <dwt_ioctl+0x1a66>
 800c67c:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800c680:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800c684:	0112      	lsls	r2, r2, #4
 800c686:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c68a:	4317      	orrs	r7, r2
 800c68c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c690:	9200      	str	r2, [sp, #0]
 800c692:	43db      	mvns	r3, r3
 800c694:	2200      	movs	r2, #0
 800c696:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c69a:	4630      	mov	r0, r6
 800c69c:	f7fd facc 	bl	8009c38 <dwt_modify32bitoffsetreg>
 800c6a0:	43e4      	mvns	r4, r4
 800c6a2:	b2a4      	uxth	r4, r4
 800c6a4:	2500      	movs	r5, #0
 800c6a6:	9500      	str	r5, [sp, #0]
 800c6a8:	4623      	mov	r3, r4
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	499b      	ldr	r1, [pc, #620]	; (800c91c <dwt_ioctl+0x1cb4>)
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f7fd fe50 	bl	800a354 <dwt_modify16bitoffsetreg>
 800c6b4:	9700      	str	r7, [sp, #0]
 800c6b6:	4623      	mov	r3, r4
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	4999      	ldr	r1, [pc, #612]	; (800c920 <dwt_ioctl+0x1cb8>)
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7fd fe49 	bl	800a354 <dwt_modify16bitoffsetreg>
 800c6c2:	f7fe bb7b 	b.w	800adbc <dwt_ioctl+0x154>
 800c6c6:	2700      	movs	r7, #0
 800c6c8:	463c      	mov	r4, r7
 800c6ca:	463b      	mov	r3, r7
 800c6cc:	e7d3      	b.n	800c676 <dwt_ioctl+0x1a0e>
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	e7de      	b.n	800c690 <dwt_ioctl+0x1a28>
 800c6d2:	2308      	movs	r3, #8
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	23ff      	movs	r3, #255	; 0xff
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c6de:	f7fd fc1d 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c6e2:	4c90      	ldr	r4, [pc, #576]	; (800c924 <dwt_ioctl+0x1cbc>)
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	23ff      	movs	r3, #255	; 0xff
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f7fd fc14 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c6f4:	2500      	movs	r5, #0
 800c6f6:	9500      	str	r5, [sp, #0]
 800c6f8:	23f7      	movs	r3, #247	; 0xf7
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c700:	4630      	mov	r0, r6
 800c702:	f7fd fc0b 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c706:	9500      	str	r5, [sp, #0]
 800c708:	23fd      	movs	r3, #253	; 0xfd
 800c70a:	2203      	movs	r2, #3
 800c70c:	4621      	mov	r1, r4
 800c70e:	4630      	mov	r0, r6
 800c710:	f7fd fc04 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800c714:	f7fe bb52 	b.w	800adbc <dwt_ioctl+0x154>
 800c718:	2c00      	cmp	r4, #0
 800c71a:	f000 829a 	beq.w	800cc52 <dwt_ioctl+0x1fea>
 800c71e:	8863      	ldrh	r3, [r4, #2]
 800c720:	00db      	lsls	r3, r3, #3
 800c722:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800c726:	7822      	ldrb	r2, [r4, #0]
 800c728:	b10a      	cbz	r2, 800c72e <dwt_ioctl+0x1ac6>
 800c72a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	f24f 0307 	movw	r3, #61447	; 0xf007
 800c734:	2200      	movs	r2, #0
 800c736:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c73a:	4630      	mov	r0, r6
 800c73c:	f7fd fe0a 	bl	800a354 <dwt_modify16bitoffsetreg>
 800c740:	2500      	movs	r5, #0
 800c742:	f7fe bb3b 	b.w	800adbc <dwt_ioctl+0x154>
 800c746:	2c00      	cmp	r4, #0
 800c748:	f000 8286 	beq.w	800cc58 <dwt_ioctl+0x1ff0>
 800c74c:	b2e3      	uxtb	r3, r4
 800c74e:	1c9a      	adds	r2, r3, #2
 800c750:	2301      	movs	r3, #1
 800c752:	4093      	lsls	r3, r2
 800c754:	3b01      	subs	r3, #1
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2200      	movs	r2, #0
 800c75a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800c75e:	f7fc ffa7 	bl	80096b0 <dwt_write8bitoffsetreg>
 800c762:	2500      	movs	r5, #0
 800c764:	f7fe bb2a 	b.w	800adbc <dwt_ioctl+0x154>
 800c768:	2c00      	cmp	r4, #0
 800c76a:	f000 8278 	beq.w	800cc5e <dwt_ioctl+0x1ff6>
 800c76e:	7ae3      	ldrb	r3, [r4, #11]
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 8277 	beq.w	800cc64 <dwt_ioctl+0x1ffc>
 800c776:	7b63      	ldrb	r3, [r4, #13]
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d921      	bls.n	800c7c0 <dwt_ioctl+0x1b58>
 800c77c:	7b22      	ldrb	r2, [r4, #12]
 800c77e:	4b6a      	ldr	r3, [pc, #424]	; (800c928 <dwt_ioctl+0x1cc0>)
 800c780:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c784:	0112      	lsls	r2, r2, #4
 800c786:	0ad3      	lsrs	r3, r2, #11
 800c788:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800c78c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c790:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c794:	bf28      	it	cs
 800c796:	3301      	addcs	r3, #1
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c7a4:	2202      	movs	r2, #2
 800c7a6:	4961      	ldr	r1, [pc, #388]	; (800c92c <dwt_ioctl+0x1cc4>)
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f7fd fdd3 	bl	800a354 <dwt_modify16bitoffsetreg>
 800c7ae:	2394      	movs	r3, #148	; 0x94
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	495f      	ldr	r1, [pc, #380]	; (800c930 <dwt_ioctl+0x1cc8>)
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7fc ff7b 	bl	80096b0 <dwt_write8bitoffsetreg>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	f7fe bafe 	b.w	800adbc <dwt_ioctl+0x154>
 800c7c0:	7b22      	ldrb	r2, [r4, #12]
 800c7c2:	4b59      	ldr	r3, [pc, #356]	; (800c928 <dwt_ioctl+0x1cc0>)
 800c7c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c7c8:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800c7cc:	fb02 f203 	mul.w	r2, r2, r3
 800c7d0:	0c93      	lsrs	r3, r2, #18
 800c7d2:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800c7d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c7da:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c7de:	bf28      	it	cs
 800c7e0:	3301      	addcs	r3, #1
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	e7d9      	b.n	800c79a <dwt_ioctl+0x1b32>
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	f000 823f 	beq.w	800cc6a <dwt_ioctl+0x2002>
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4951      	ldr	r1, [pc, #324]	; (800c934 <dwt_ioctl+0x1ccc>)
 800c7f0:	f7fc f95b 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c7f4:	6020      	str	r0, [r4, #0]
 800c7f6:	2500      	movs	r5, #0
 800c7f8:	f7fe bae0 	b.w	800adbc <dwt_ioctl+0x154>
 800c7fc:	2c00      	cmp	r4, #0
 800c7fe:	f000 8237 	beq.w	800cc70 <dwt_ioctl+0x2008>
 800c802:	2200      	movs	r2, #0
 800c804:	494c      	ldr	r1, [pc, #304]	; (800c938 <dwt_ioctl+0x1cd0>)
 800c806:	f7fc f950 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c80a:	6020      	str	r0, [r4, #0]
 800c80c:	2500      	movs	r5, #0
 800c80e:	f7fe bad5 	b.w	800adbc <dwt_ioctl+0x154>
 800c812:	2c00      	cmp	r4, #0
 800c814:	f000 822f 	beq.w	800cc76 <dwt_ioctl+0x200e>
 800c818:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	2500      	movs	r5, #0
 800c820:	f7fe bacc 	b.w	800adbc <dwt_ioctl+0x154>
 800c824:	2c00      	cmp	r4, #0
 800c826:	f000 8229 	beq.w	800cc7c <dwt_ioctl+0x2014>
 800c82a:	2500      	movs	r5, #0
 800c82c:	950b      	str	r5, [sp, #44]	; 0x2c
 800c82e:	af10      	add	r7, sp, #64	; 0x40
 800c830:	2319      	movs	r3, #25
 800c832:	f847 3d10 	str.w	r3, [r7, #-16]!
 800c836:	9700      	str	r7, [sp, #0]
 800c838:	2304      	movs	r3, #4
 800c83a:	462a      	mov	r2, r5
 800c83c:	493f      	ldr	r1, [pc, #252]	; (800c93c <dwt_ioctl+0x1cd4>)
 800c83e:	f7fc fd41 	bl	80092c4 <dwt_writetodevice>
 800c842:	f641 7348 	movw	r3, #8008	; 0x1f48
 800c846:	930c      	str	r3, [sp, #48]	; 0x30
 800c848:	9700      	str	r7, [sp, #0]
 800c84a:	2304      	movs	r3, #4
 800c84c:	462a      	mov	r2, r5
 800c84e:	493c      	ldr	r1, [pc, #240]	; (800c940 <dwt_ioctl+0x1cd8>)
 800c850:	4630      	mov	r0, r6
 800c852:	f7fc fd37 	bl	80092c4 <dwt_writetodevice>
 800c856:	ab0b      	add	r3, sp, #44	; 0x2c
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	2304      	movs	r3, #4
 800c85c:	462a      	mov	r2, r5
 800c85e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800c862:	4630      	mov	r0, r6
 800c864:	f7fc f917 	bl	8008a96 <dwt_readfromdevice>
 800c868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	f7fe baa6 	b.w	800adbc <dwt_ioctl+0x154>
 800c870:	2c00      	cmp	r4, #0
 800c872:	f000 8206 	beq.w	800cc82 <dwt_ioctl+0x201a>
 800c876:	2200      	movs	r2, #0
 800c878:	4932      	ldr	r1, [pc, #200]	; (800c944 <dwt_ioctl+0x1cdc>)
 800c87a:	f7fc f916 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c87e:	b280      	uxth	r0, r0
 800c880:	6020      	str	r0, [r4, #0]
 800c882:	2200      	movs	r2, #0
 800c884:	4930      	ldr	r1, [pc, #192]	; (800c948 <dwt_ioctl+0x1ce0>)
 800c886:	4630      	mov	r0, r6
 800c888:	f7fc f90f 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c88c:	0d43      	lsrs	r3, r0, #21
 800c88e:	019b      	lsls	r3, r3, #6
 800c890:	b29b      	uxth	r3, r3
 800c892:	6063      	str	r3, [r4, #4]
 800c894:	2500      	movs	r5, #0
 800c896:	f7fe ba91 	b.w	800adbc <dwt_ioctl+0x154>
 800c89a:	2c00      	cmp	r4, #0
 800c89c:	f000 81f4 	beq.w	800cc88 <dwt_ioctl+0x2020>
 800c8a0:	7d63      	ldrb	r3, [r4, #21]
 800c8a2:	b133      	cbz	r3, 800c8b2 <dwt_ioctl+0x1c4a>
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d05b      	beq.n	800c960 <dwt_ioctl+0x1cf8>
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	f000 8082 	beq.w	800c9b2 <dwt_ioctl+0x1d4a>
 800c8ae:	23ff      	movs	r3, #255	; 0xff
 800c8b0:	e02f      	b.n	800c912 <dwt_ioctl+0x1caa>
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4925      	ldr	r1, [pc, #148]	; (800c94c <dwt_ioctl+0x1ce4>)
 800c8b6:	f7fc f8f8 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c8ba:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c8be:	6020      	str	r0, [r4, #0]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4923      	ldr	r1, [pc, #140]	; (800c950 <dwt_ioctl+0x1ce8>)
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7fc f8f0 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c8ca:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c8ce:	6060      	str	r0, [r4, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	4920      	ldr	r1, [pc, #128]	; (800c954 <dwt_ioctl+0x1cec>)
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7fc f8e8 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c8da:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c8de:	60a0      	str	r0, [r4, #8]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	491d      	ldr	r1, [pc, #116]	; (800c958 <dwt_ioctl+0x1cf0>)
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7fc f8e0 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c8ea:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c8ee:	60e0      	str	r0, [r4, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	491a      	ldr	r1, [pc, #104]	; (800c95c <dwt_ioctl+0x1cf4>)
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7fc f8d8 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c8fa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c8fe:	6120      	str	r0, [r4, #16]
 800c900:	2203      	movs	r2, #3
 800c902:	490c      	ldr	r1, [pc, #48]	; (800c934 <dwt_ioctl+0x1ccc>)
 800c904:	4630      	mov	r0, r6
 800c906:	f7fc f8f8 	bl	8008afa <dwt_read8bitoffsetreg>
 800c90a:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800c90e:	7520      	strb	r0, [r4, #20]
 800c910:	2300      	movs	r3, #0
 800c912:	75a3      	strb	r3, [r4, #22]
 800c914:	2500      	movs	r5, #0
 800c916:	f7fe ba51 	b.w	800adbc <dwt_ioctl+0x154>
 800c91a:	bf00      	nop
 800c91c:	00050008 	.word	0x00050008
 800c920:	0005000c 	.word	0x0005000c
 800c924:	00110008 	.word	0x00110008
 800c928:	08011fe8 	.word	0x08011fe8
 800c92c:	000e0014 	.word	0x000e0014
 800c930:	000e0018 	.word	0x000e0018
 800c934:	00030060 	.word	0x00030060
 800c938:	000f004c 	.word	0x000f004c
 800c93c:	001f0004 	.word	0x001f0004
 800c940:	001f0008 	.word	0x001f0008
 800c944:	000c0048 	.word	0x000c0048
 800c948:	000c0028 	.word	0x000c0028
 800c94c:	000c0058 	.word	0x000c0058
 800c950:	000c0030 	.word	0x000c0030
 800c954:	000c0034 	.word	0x000c0034
 800c958:	000c0038 	.word	0x000c0038
 800c95c:	000c002c 	.word	0x000c002c
 800c960:	2200      	movs	r2, #0
 800c962:	49d4      	ldr	r1, [pc, #848]	; (800ccb4 <dwt_ioctl+0x204c>)
 800c964:	f7fc f8a1 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c968:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c96c:	6020      	str	r0, [r4, #0]
 800c96e:	2200      	movs	r2, #0
 800c970:	49d1      	ldr	r1, [pc, #836]	; (800ccb8 <dwt_ioctl+0x2050>)
 800c972:	4630      	mov	r0, r6
 800c974:	f7fc f899 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c978:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c97c:	6060      	str	r0, [r4, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	49ce      	ldr	r1, [pc, #824]	; (800ccbc <dwt_ioctl+0x2054>)
 800c982:	4630      	mov	r0, r6
 800c984:	f7fc f891 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c988:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c98c:	60a0      	str	r0, [r4, #8]
 800c98e:	2200      	movs	r2, #0
 800c990:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800c994:	4630      	mov	r0, r6
 800c996:	f7fc f888 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c99a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c99e:	60e0      	str	r0, [r4, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	49c7      	ldr	r1, [pc, #796]	; (800ccc0 <dwt_ioctl+0x2058>)
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7fc f880 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c9aa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c9ae:	6120      	str	r0, [r4, #16]
 800c9b0:	e7a6      	b.n	800c900 <dwt_ioctl+0x1c98>
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	49c3      	ldr	r1, [pc, #780]	; (800ccc4 <dwt_ioctl+0x205c>)
 800c9b6:	f7fc f878 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c9ba:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c9be:	6020      	str	r0, [r4, #0]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	49c1      	ldr	r1, [pc, #772]	; (800ccc8 <dwt_ioctl+0x2060>)
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7fc f870 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c9ca:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9ce:	6060      	str	r0, [r4, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	49be      	ldr	r1, [pc, #760]	; (800cccc <dwt_ioctl+0x2064>)
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7fc f868 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c9da:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9de:	60a0      	str	r0, [r4, #8]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	49bb      	ldr	r1, [pc, #748]	; (800ccd0 <dwt_ioctl+0x2068>)
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7fc f860 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c9ea:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9ee:	60e0      	str	r0, [r4, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	49b8      	ldr	r1, [pc, #736]	; (800ccd4 <dwt_ioctl+0x206c>)
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	f7fc f858 	bl	8008aaa <dwt_read32bitoffsetreg>
 800c9fa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c9fe:	6120      	str	r0, [r4, #16]
 800ca00:	e77e      	b.n	800c900 <dwt_ioctl+0x1c98>
 800ca02:	2500      	movs	r5, #0
 800ca04:	f7fe b9da 	b.w	800adbc <dwt_ioctl+0x154>
 800ca08:	2500      	movs	r5, #0
 800ca0a:	f7fe b9d7 	b.w	800adbc <dwt_ioctl+0x154>
 800ca0e:	2500      	movs	r5, #0
 800ca10:	f7fe b9d4 	b.w	800adbc <dwt_ioctl+0x154>
 800ca14:	2500      	movs	r5, #0
 800ca16:	f7fe b9d1 	b.w	800adbc <dwt_ioctl+0x154>
 800ca1a:	2500      	movs	r5, #0
 800ca1c:	f7fe b9ce 	b.w	800adbc <dwt_ioctl+0x154>
 800ca20:	2500      	movs	r5, #0
 800ca22:	f7fe b9cb 	b.w	800adbc <dwt_ioctl+0x154>
 800ca26:	2500      	movs	r5, #0
 800ca28:	f7fe b9c8 	b.w	800adbc <dwt_ioctl+0x154>
 800ca2c:	2500      	movs	r5, #0
 800ca2e:	f7fe b9c5 	b.w	800adbc <dwt_ioctl+0x154>
 800ca32:	2500      	movs	r5, #0
 800ca34:	f7fe b9c2 	b.w	800adbc <dwt_ioctl+0x154>
 800ca38:	2500      	movs	r5, #0
 800ca3a:	f7fe b9bf 	b.w	800adbc <dwt_ioctl+0x154>
 800ca3e:	2500      	movs	r5, #0
 800ca40:	f7fe b9bc 	b.w	800adbc <dwt_ioctl+0x154>
 800ca44:	2500      	movs	r5, #0
 800ca46:	f7fe b9b9 	b.w	800adbc <dwt_ioctl+0x154>
 800ca4a:	2500      	movs	r5, #0
 800ca4c:	f7fe b9b6 	b.w	800adbc <dwt_ioctl+0x154>
 800ca50:	2500      	movs	r5, #0
 800ca52:	f7fe b9b3 	b.w	800adbc <dwt_ioctl+0x154>
 800ca56:	2500      	movs	r5, #0
 800ca58:	f7fe b9b0 	b.w	800adbc <dwt_ioctl+0x154>
 800ca5c:	2500      	movs	r5, #0
 800ca5e:	f7fe b9ad 	b.w	800adbc <dwt_ioctl+0x154>
 800ca62:	2500      	movs	r5, #0
 800ca64:	f7fe b9aa 	b.w	800adbc <dwt_ioctl+0x154>
 800ca68:	2500      	movs	r5, #0
 800ca6a:	f7fe b9a7 	b.w	800adbc <dwt_ioctl+0x154>
 800ca6e:	2500      	movs	r5, #0
 800ca70:	f7fe b9a4 	b.w	800adbc <dwt_ioctl+0x154>
 800ca74:	2500      	movs	r5, #0
 800ca76:	f7fe b9a1 	b.w	800adbc <dwt_ioctl+0x154>
 800ca7a:	2500      	movs	r5, #0
 800ca7c:	f7fe b99e 	b.w	800adbc <dwt_ioctl+0x154>
 800ca80:	2500      	movs	r5, #0
 800ca82:	f7fe b99b 	b.w	800adbc <dwt_ioctl+0x154>
 800ca86:	2500      	movs	r5, #0
 800ca88:	f7fe b998 	b.w	800adbc <dwt_ioctl+0x154>
 800ca8c:	2500      	movs	r5, #0
 800ca8e:	f7fe b995 	b.w	800adbc <dwt_ioctl+0x154>
 800ca92:	2500      	movs	r5, #0
 800ca94:	f7fe b992 	b.w	800adbc <dwt_ioctl+0x154>
 800ca98:	2500      	movs	r5, #0
 800ca9a:	f7fe b98f 	b.w	800adbc <dwt_ioctl+0x154>
 800ca9e:	2500      	movs	r5, #0
 800caa0:	f7fe b98c 	b.w	800adbc <dwt_ioctl+0x154>
 800caa4:	2500      	movs	r5, #0
 800caa6:	f7fe b989 	b.w	800adbc <dwt_ioctl+0x154>
 800caaa:	2500      	movs	r5, #0
 800caac:	f7fe b986 	b.w	800adbc <dwt_ioctl+0x154>
 800cab0:	2500      	movs	r5, #0
 800cab2:	f7fe b983 	b.w	800adbc <dwt_ioctl+0x154>
 800cab6:	2500      	movs	r5, #0
 800cab8:	f7fe b980 	b.w	800adbc <dwt_ioctl+0x154>
 800cabc:	2500      	movs	r5, #0
 800cabe:	f7fe b97d 	b.w	800adbc <dwt_ioctl+0x154>
 800cac2:	2500      	movs	r5, #0
 800cac4:	f7fe b97a 	b.w	800adbc <dwt_ioctl+0x154>
 800cac8:	2500      	movs	r5, #0
 800caca:	f7fe b977 	b.w	800adbc <dwt_ioctl+0x154>
 800cace:	2500      	movs	r5, #0
 800cad0:	f7fe b974 	b.w	800adbc <dwt_ioctl+0x154>
 800cad4:	2500      	movs	r5, #0
 800cad6:	f7fe b971 	b.w	800adbc <dwt_ioctl+0x154>
 800cada:	2500      	movs	r5, #0
 800cadc:	f7fe b96e 	b.w	800adbc <dwt_ioctl+0x154>
 800cae0:	2500      	movs	r5, #0
 800cae2:	f7fe b96b 	b.w	800adbc <dwt_ioctl+0x154>
 800cae6:	2500      	movs	r5, #0
 800cae8:	f7fe b968 	b.w	800adbc <dwt_ioctl+0x154>
 800caec:	2500      	movs	r5, #0
 800caee:	f7fe b965 	b.w	800adbc <dwt_ioctl+0x154>
 800caf2:	2500      	movs	r5, #0
 800caf4:	f7fe b962 	b.w	800adbc <dwt_ioctl+0x154>
 800caf8:	2500      	movs	r5, #0
 800cafa:	f7fe b95f 	b.w	800adbc <dwt_ioctl+0x154>
 800cafe:	2500      	movs	r5, #0
 800cb00:	f7fe b95c 	b.w	800adbc <dwt_ioctl+0x154>
 800cb04:	2500      	movs	r5, #0
 800cb06:	f7fe b959 	b.w	800adbc <dwt_ioctl+0x154>
 800cb0a:	2500      	movs	r5, #0
 800cb0c:	f7fe b956 	b.w	800adbc <dwt_ioctl+0x154>
 800cb10:	2500      	movs	r5, #0
 800cb12:	f7fe b953 	b.w	800adbc <dwt_ioctl+0x154>
 800cb16:	2500      	movs	r5, #0
 800cb18:	f7fe b950 	b.w	800adbc <dwt_ioctl+0x154>
 800cb1c:	2500      	movs	r5, #0
 800cb1e:	f7fe b94d 	b.w	800adbc <dwt_ioctl+0x154>
 800cb22:	2500      	movs	r5, #0
 800cb24:	f7fe b94a 	b.w	800adbc <dwt_ioctl+0x154>
 800cb28:	2500      	movs	r5, #0
 800cb2a:	f7fe b947 	b.w	800adbc <dwt_ioctl+0x154>
 800cb2e:	2500      	movs	r5, #0
 800cb30:	f7fe b944 	b.w	800adbc <dwt_ioctl+0x154>
 800cb34:	2500      	movs	r5, #0
 800cb36:	f7fe b941 	b.w	800adbc <dwt_ioctl+0x154>
 800cb3a:	2500      	movs	r5, #0
 800cb3c:	f7fe b93e 	b.w	800adbc <dwt_ioctl+0x154>
 800cb40:	2500      	movs	r5, #0
 800cb42:	f7fe b93b 	b.w	800adbc <dwt_ioctl+0x154>
 800cb46:	2500      	movs	r5, #0
 800cb48:	f7fe b938 	b.w	800adbc <dwt_ioctl+0x154>
 800cb4c:	2500      	movs	r5, #0
 800cb4e:	f7fe b935 	b.w	800adbc <dwt_ioctl+0x154>
 800cb52:	2500      	movs	r5, #0
 800cb54:	f7fe b932 	b.w	800adbc <dwt_ioctl+0x154>
 800cb58:	2500      	movs	r5, #0
 800cb5a:	f7fe b92f 	b.w	800adbc <dwt_ioctl+0x154>
 800cb5e:	2500      	movs	r5, #0
 800cb60:	f7fe b92c 	b.w	800adbc <dwt_ioctl+0x154>
 800cb64:	2500      	movs	r5, #0
 800cb66:	f7fe b929 	b.w	800adbc <dwt_ioctl+0x154>
 800cb6a:	2500      	movs	r5, #0
 800cb6c:	f7fe b926 	b.w	800adbc <dwt_ioctl+0x154>
 800cb70:	2500      	movs	r5, #0
 800cb72:	f7fe b923 	b.w	800adbc <dwt_ioctl+0x154>
 800cb76:	2500      	movs	r5, #0
 800cb78:	f7fe b920 	b.w	800adbc <dwt_ioctl+0x154>
 800cb7c:	2500      	movs	r5, #0
 800cb7e:	f7fe b91d 	b.w	800adbc <dwt_ioctl+0x154>
 800cb82:	2500      	movs	r5, #0
 800cb84:	f7fe b91a 	b.w	800adbc <dwt_ioctl+0x154>
 800cb88:	2500      	movs	r5, #0
 800cb8a:	f7fe b917 	b.w	800adbc <dwt_ioctl+0x154>
 800cb8e:	2500      	movs	r5, #0
 800cb90:	f7fe b914 	b.w	800adbc <dwt_ioctl+0x154>
 800cb94:	2500      	movs	r5, #0
 800cb96:	f7fe b911 	b.w	800adbc <dwt_ioctl+0x154>
 800cb9a:	2500      	movs	r5, #0
 800cb9c:	f7fe b90e 	b.w	800adbc <dwt_ioctl+0x154>
 800cba0:	2500      	movs	r5, #0
 800cba2:	f7fe b90b 	b.w	800adbc <dwt_ioctl+0x154>
 800cba6:	2500      	movs	r5, #0
 800cba8:	f7fe b908 	b.w	800adbc <dwt_ioctl+0x154>
 800cbac:	2500      	movs	r5, #0
 800cbae:	f7fe b905 	b.w	800adbc <dwt_ioctl+0x154>
 800cbb2:	2500      	movs	r5, #0
 800cbb4:	f7fe b902 	b.w	800adbc <dwt_ioctl+0x154>
 800cbb8:	2500      	movs	r5, #0
 800cbba:	f7fe b8ff 	b.w	800adbc <dwt_ioctl+0x154>
 800cbbe:	2500      	movs	r5, #0
 800cbc0:	f7fe b8fc 	b.w	800adbc <dwt_ioctl+0x154>
 800cbc4:	2500      	movs	r5, #0
 800cbc6:	f7fe b8f9 	b.w	800adbc <dwt_ioctl+0x154>
 800cbca:	2500      	movs	r5, #0
 800cbcc:	f7fe b8f6 	b.w	800adbc <dwt_ioctl+0x154>
 800cbd0:	2500      	movs	r5, #0
 800cbd2:	f7fe b8f3 	b.w	800adbc <dwt_ioctl+0x154>
 800cbd6:	2500      	movs	r5, #0
 800cbd8:	f7fe b8f0 	b.w	800adbc <dwt_ioctl+0x154>
 800cbdc:	2500      	movs	r5, #0
 800cbde:	f7fe b8ed 	b.w	800adbc <dwt_ioctl+0x154>
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	f7fe b8ea 	b.w	800adbc <dwt_ioctl+0x154>
 800cbe8:	2500      	movs	r5, #0
 800cbea:	f7fe b8e7 	b.w	800adbc <dwt_ioctl+0x154>
 800cbee:	2500      	movs	r5, #0
 800cbf0:	f7fe b8e4 	b.w	800adbc <dwt_ioctl+0x154>
 800cbf4:	2500      	movs	r5, #0
 800cbf6:	f7fe b8e1 	b.w	800adbc <dwt_ioctl+0x154>
 800cbfa:	2500      	movs	r5, #0
 800cbfc:	f7fe b8de 	b.w	800adbc <dwt_ioctl+0x154>
 800cc00:	2500      	movs	r5, #0
 800cc02:	f7fe b8db 	b.w	800adbc <dwt_ioctl+0x154>
 800cc06:	2500      	movs	r5, #0
 800cc08:	f7fe b8d8 	b.w	800adbc <dwt_ioctl+0x154>
 800cc0c:	2500      	movs	r5, #0
 800cc0e:	f7fe b8d5 	b.w	800adbc <dwt_ioctl+0x154>
 800cc12:	2500      	movs	r5, #0
 800cc14:	f7fe b8d2 	b.w	800adbc <dwt_ioctl+0x154>
 800cc18:	2500      	movs	r5, #0
 800cc1a:	f7fe b8cf 	b.w	800adbc <dwt_ioctl+0x154>
 800cc1e:	2500      	movs	r5, #0
 800cc20:	f7fe b8cc 	b.w	800adbc <dwt_ioctl+0x154>
 800cc24:	2500      	movs	r5, #0
 800cc26:	f7fe b8c9 	b.w	800adbc <dwt_ioctl+0x154>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	f7fe b8c6 	b.w	800adbc <dwt_ioctl+0x154>
 800cc30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cc34:	f7fe b8c2 	b.w	800adbc <dwt_ioctl+0x154>
 800cc38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cc3c:	f7fe b8be 	b.w	800adbc <dwt_ioctl+0x154>
 800cc40:	2500      	movs	r5, #0
 800cc42:	f7fe b8bb 	b.w	800adbc <dwt_ioctl+0x154>
 800cc46:	2500      	movs	r5, #0
 800cc48:	f7fe b8b8 	b.w	800adbc <dwt_ioctl+0x154>
 800cc4c:	2500      	movs	r5, #0
 800cc4e:	f7fe b8b5 	b.w	800adbc <dwt_ioctl+0x154>
 800cc52:	2500      	movs	r5, #0
 800cc54:	f7fe b8b2 	b.w	800adbc <dwt_ioctl+0x154>
 800cc58:	2500      	movs	r5, #0
 800cc5a:	f7fe b8af 	b.w	800adbc <dwt_ioctl+0x154>
 800cc5e:	2500      	movs	r5, #0
 800cc60:	f7fe b8ac 	b.w	800adbc <dwt_ioctl+0x154>
 800cc64:	2500      	movs	r5, #0
 800cc66:	f7fe b8a9 	b.w	800adbc <dwt_ioctl+0x154>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	f7fe b8a6 	b.w	800adbc <dwt_ioctl+0x154>
 800cc70:	2500      	movs	r5, #0
 800cc72:	f7fe b8a3 	b.w	800adbc <dwt_ioctl+0x154>
 800cc76:	2500      	movs	r5, #0
 800cc78:	f7fe b8a0 	b.w	800adbc <dwt_ioctl+0x154>
 800cc7c:	2500      	movs	r5, #0
 800cc7e:	f7fe b89d 	b.w	800adbc <dwt_ioctl+0x154>
 800cc82:	2500      	movs	r5, #0
 800cc84:	f7fe b89a 	b.w	800adbc <dwt_ioctl+0x154>
 800cc88:	2500      	movs	r5, #0
 800cc8a:	f7fe b897 	b.w	800adbc <dwt_ioctl+0x154>
 800cc8e:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cc92:	1e5a      	subs	r2, r3, #1
 800cc94:	b2d2      	uxtb	r2, r2
 800cc96:	2a01      	cmp	r2, #1
 800cc98:	f67e aeec 	bls.w	800ba74 <dwt_ioctl+0xe0c>
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	f7fe be93 	b.w	800b9c8 <dwt_ioctl+0xd60>
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	f43f ab68 	beq.w	800c378 <dwt_ioctl+0x1710>
 800cca8:	f819 1000 	ldrb.w	r1, [r9, r0]
 800ccac:	1a5b      	subs	r3, r3, r1
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	f7ff bb88 	b.w	800c3c4 <dwt_ioctl+0x175c>
 800ccb4:	000d0020 	.word	0x000d0020
 800ccb8:	000c0064 	.word	0x000c0064
 800ccbc:	000c0068 	.word	0x000c0068
 800ccc0:	000c0060 	.word	0x000c0060
 800ccc4:	000d0068 	.word	0x000d0068
 800ccc8:	000d0040 	.word	0x000d0040
 800cccc:	000d0044 	.word	0x000d0044
 800ccd0:	000d0048 	.word	0x000d0048
 800ccd4:	000d003c 	.word	0x000d003c
 800ccd8:	283f      	cmp	r0, #63	; 0x3f
 800ccda:	d027      	beq.n	800cd2c <dwt_ioctl+0x20c4>
 800ccdc:	2e00      	cmp	r6, #0
 800ccde:	f47f ab51 	bne.w	800c384 <dwt_ioctl+0x171c>
 800cce2:	3001      	adds	r0, #1
 800cce4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cce8:	f819 1000 	ldrb.w	r1, [r9, r0]
 800ccec:	440b      	add	r3, r1
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	459c      	cmp	ip, r3
 800ccf2:	f43f ab65 	beq.w	800c3c0 <dwt_ioctl+0x1758>
 800ccf6:	3d01      	subs	r5, #1
 800ccf8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800ccfc:	f43f ab23 	beq.w	800c346 <dwt_ioctl+0x16de>
 800cd00:	459e      	cmp	lr, r3
 800cd02:	f4bf ab33 	bcs.w	800c36c <dwt_ioctl+0x1704>
 800cd06:	4598      	cmp	r8, r3
 800cd08:	d9cb      	bls.n	800cca2 <dwt_ioctl+0x203a>
 800cd0a:	ebac 0103 	sub.w	r1, ip, r3
 800cd0e:	b209      	sxth	r1, r1
 800cd10:	2900      	cmp	r1, #0
 800cd12:	bfb8      	it	lt
 800cd14:	4249      	neglt	r1, r1
 800cd16:	4559      	cmp	r1, fp
 800cd18:	f77f ab20 	ble.w	800c35c <dwt_ioctl+0x16f4>
 800cd1c:	2f00      	cmp	r7, #0
 800cd1e:	f47f ab64 	bne.w	800c3ea <dwt_ioctl+0x1782>
 800cd22:	283f      	cmp	r0, #63	; 0x3f
 800cd24:	d1da      	bne.n	800ccdc <dwt_ioctl+0x2074>
 800cd26:	2f00      	cmp	r7, #0
 800cd28:	f47f ab64 	bne.w	800c3f4 <dwt_ioctl+0x178c>
 800cd2c:	2a03      	cmp	r2, #3
 800cd2e:	f43f ab64 	beq.w	800c3fa <dwt_ioctl+0x1792>
 800cd32:	2a02      	cmp	r2, #2
 800cd34:	f43f ab33 	beq.w	800c39e <dwt_ioctl+0x1736>
 800cd38:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800cd3c:	185e      	adds	r6, r3, r1
 800cd3e:	4566      	cmp	r6, ip
 800cd40:	f77f ab34 	ble.w	800c3ac <dwt_ioctl+0x1744>
 800cd44:	440b      	add	r3, r1
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	3201      	adds	r2, #1
 800cd4a:	b2d2      	uxtb	r2, r2
 800cd4c:	2700      	movs	r7, #0
 800cd4e:	f7ff bb19 	b.w	800c384 <dwt_ioctl+0x171c>
 800cd52:	bf00      	nop

0800cd54 <_init>:
 800cd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd56:	b085      	sub	sp, #20
 800cd58:	4604      	mov	r4, r0
 800cd5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd5c:	6819      	ldr	r1, [r3, #0]
 800cd5e:	f7fd fe57 	bl	800aa10 <ull_initialise>
 800cd62:	4606      	mov	r6, r0
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	4798      	blx	r3
 800cd6a:	ab03      	add	r3, sp, #12
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	4611      	mov	r1, r2
 800cd70:	4620      	mov	r0, r4
 800cd72:	f7fd ff79 	bl	800ac68 <dwt_ioctl>
 800cd76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7a:	6819      	ldr	r1, [r3, #0]
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f7fd fc07 	bl	800a590 <ull_configure>
 800cd82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd86:	6859      	ldr	r1, [r3, #4]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f7fd f953 	bl	800a034 <ull_configuretxrf>
 800cd8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd92:	89db      	ldrh	r3, [r3, #14]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f7fc fa9d 	bl	80092da <dwt_write16bitoffsetreg>
 800cda0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda4:	899b      	ldrh	r3, [r3, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	217c      	movs	r1, #124	; 0x7c
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f7fc fa95 	bl	80092da <dwt_write16bitoffsetreg>
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f7fc fb29 	bl	800940a <ull_setrxaftertxdelay>
 800cdb8:	2500      	movs	r5, #0
 800cdba:	9500      	str	r5, [sp, #0]
 800cdbc:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	2110      	movs	r1, #16
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f7fd fac5 	bl	800a354 <dwt_modify16bitoffsetreg>
 800cdca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdce:	895a      	ldrh	r2, [r3, #10]
 800cdd0:	8919      	ldrh	r1, [r3, #8]
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7fd f9bc 	bl	800a150 <ull_configureframefilter>
 800cdd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cddc:	8a1b      	ldrh	r3, [r3, #16]
 800cdde:	2202      	movs	r2, #2
 800cde0:	210c      	movs	r1, #12
 800cde2:	4620      	mov	r0, r4
 800cde4:	f7fc fa79 	bl	80092da <dwt_write16bitoffsetreg>
 800cde8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdec:	8a5b      	ldrh	r3, [r3, #18]
 800cdee:	462a      	mov	r2, r5
 800cdf0:	210c      	movs	r1, #12
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f7fc fa71 	bl	80092da <dwt_write16bitoffsetreg>
 800cdf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdfa:	7a19      	ldrb	r1, [r3, #8]
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7fd fac3 	bl	800a388 <ull_setleds>
 800ce02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce04:	68d9      	ldr	r1, [r3, #12]
 800ce06:	4620      	mov	r0, r4
 800ce08:	f7fc fb13 	bl	8009432 <ull_setlnapamode>
 800ce0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce0e:	7e0b      	ldrb	r3, [r1, #24]
 800ce10:	694a      	ldr	r2, [r1, #20]
 800ce12:	6909      	ldr	r1, [r1, #16]
 800ce14:	4620      	mov	r0, r4
 800ce16:	f7fd fa21 	bl	800a25c <ull_setinterrupt>
 800ce1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce1c:	7f9a      	ldrb	r2, [r3, #30]
 800ce1e:	8b99      	ldrh	r1, [r3, #28]
 800ce20:	4620      	mov	r0, r4
 800ce22:	f7fc fd19 	bl	8009858 <ull_configuresleep>
 800ce26:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ce28:	7b53      	ldrb	r3, [r2, #13]
 800ce2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ce2c:	d005      	beq.n	800ce3a <_init+0xe6>
 800ce2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce34:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800ce38:	d00a      	beq.n	800ce50 <_init+0xfc>
 800ce3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce44:	7353      	strb	r3, [r2, #13]
 800ce46:	2200      	movs	r2, #0
 800ce48:	492a      	ldr	r1, [pc, #168]	; (800cef4 <_init+0x1a0>)
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f7fc fc30 	bl	80096b0 <dwt_write8bitoffsetreg>
 800ce50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce52:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800ce56:	4620      	mov	r0, r4
 800ce58:	f7fd f874 	bl	8009f44 <ull_configciadiag>
 800ce5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce5e:	6a19      	ldr	r1, [r3, #32]
 800ce60:	4620      	mov	r0, r4
 800ce62:	f7fc fb07 	bl	8009474 <ull_configurestskey>
 800ce66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f7fc fb26 	bl	80094bc <ull_configurestsiv>
 800ce70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce72:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ce76:	bb9b      	cbnz	r3, 800cee0 <_init+0x18c>
 800ce78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce7a:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f7fc fc8e 	bl	80097a0 <ull_configeventcounters>
 800ce84:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800ce88:	2d00      	cmp	r5, #0
 800ce8a:	db26      	blt.n	800ceda <_init+0x186>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	fa03 f505 	lsl.w	r5, r3, r5
 800ce92:	b2af      	uxth	r7, r5
 800ce94:	4a18      	ldr	r2, [pc, #96]	; (800cef8 <_init+0x1a4>)
 800ce96:	4639      	mov	r1, r7
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7fc ffef 	bl	8009e7c <ull_setgpiomode>
 800ce9e:	f10d 030a 	add.w	r3, sp, #10
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	2302      	movs	r3, #2
 800cea6:	2200      	movs	r2, #0
 800cea8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ceac:	4620      	mov	r0, r4
 800ceae:	f7fb fdf2 	bl	8008a96 <dwt_readfromdevice>
 800ceb2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800ceb6:	ea23 0305 	bic.w	r3, r3, r5
 800ceba:	f8ad 300a 	strh.w	r3, [sp, #10]
 800cebe:	2200      	movs	r2, #0
 800cec0:	490e      	ldr	r1, [pc, #56]	; (800cefc <_init+0x1a8>)
 800cec2:	4620      	mov	r0, r4
 800cec4:	f7fc fa09 	bl	80092da <dwt_write16bitoffsetreg>
 800cec8:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800cecc:	fab2 f282 	clz	r2, r2
 800ced0:	0952      	lsrs	r2, r2, #5
 800ced2:	4639      	mov	r1, r7
 800ced4:	4620      	mov	r0, r4
 800ced6:	f7fd fad5 	bl	800a484 <ull_setgpiovalue>
 800ceda:	4630      	mov	r0, r6
 800cedc:	b005      	add	sp, #20
 800cede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cee0:	2301      	movs	r3, #1
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	23ff      	movs	r3, #255	; 0xff
 800cee6:	2200      	movs	r2, #0
 800cee8:	4905      	ldr	r1, [pc, #20]	; (800cf00 <_init+0x1ac>)
 800ceea:	4620      	mov	r0, r4
 800ceec:	f7fd f816 	bl	8009f1c <dwt_modify8bitoffsetreg>
 800cef0:	e7c2      	b.n	800ce78 <_init+0x124>
 800cef2:	bf00      	nop
 800cef4:	00090014 	.word	0x00090014
 800cef8:	01200492 	.word	0x01200492
 800cefc:	00050008 	.word	0x00050008
 800cf00:	00020004 	.word	0x00020004

0800cf04 <ull_wakeup_ic>:
 800cf04:	b508      	push	{r3, lr}
 800cf06:	6843      	ldr	r3, [r0, #4]
 800cf08:	4798      	blx	r3
 800cf0a:	bd08      	pop	{r3, pc}

0800cf0c <get_sts_mnth>:
 800cf0c:	fb01 f100 	mul.w	r1, r1, r0
 800cf10:	2a03      	cmp	r2, #3
 800cf12:	d00a      	beq.n	800cf2a <get_sts_mnth+0x1e>
 800cf14:	0ac8      	lsrs	r0, r1, #11
 800cf16:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800cf1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf1e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800cf22:	bf28      	it	cs
 800cf24:	3001      	addcs	r0, #1
 800cf26:	b280      	uxth	r0, r0
 800cf28:	4770      	bx	lr
 800cf2a:	20b5      	movs	r0, #181	; 0xb5
 800cf2c:	fb00 f101 	mul.w	r1, r0, r1
 800cf30:	09c9      	lsrs	r1, r1, #7
 800cf32:	e7ef      	b.n	800cf14 <get_sts_mnth+0x8>

0800cf34 <dwt_dbg_fn>:
 800cf34:	2998      	cmp	r1, #152	; 0x98
 800cf36:	4802      	ldr	r0, [pc, #8]	; (800cf40 <dwt_dbg_fn+0xc>)
 800cf38:	bf18      	it	ne
 800cf3a:	2000      	movne	r0, #0
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	080120f0 	.word	0x080120f0

0800cf44 <_deinit>:
 800cf44:	4770      	bx	lr

0800cf46 <dwt_xfer3xxx>:
 800cf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	460f      	mov	r7, r1
 800cf50:	461e      	mov	r6, r3
 800cf52:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800cf56:	1e59      	subs	r1, r3, #1
 800cf58:	b289      	uxth	r1, r1
 800cf5a:	2901      	cmp	r1, #1
 800cf5c:	d91c      	bls.n	800cf98 <dwt_xfer3xxx+0x52>
 800cf5e:	19d0      	adds	r0, r2, r7
 800cf60:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cf64:	443a      	add	r2, r7
 800cf66:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800cf6a:	0082      	lsls	r2, r0, #2
 800cf6c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800cf70:	ea43 0102 	orr.w	r1, r3, r2
 800cf74:	0a09      	lsrs	r1, r1, #8
 800cf76:	f88d 100c 	strb.w	r1, [sp, #12]
 800cf7a:	b920      	cbnz	r0, 800cf86 <dwt_xfer3xxx+0x40>
 800cf7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf80:	d018      	beq.n	800cfb4 <dwt_xfer3xxx+0x6e>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d037      	beq.n	800cff6 <dwt_xfer3xxx+0xb0>
 800cf86:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800cf8a:	f88d 100c 	strb.w	r1, [sp, #12]
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	f88d 200d 	strb.w	r2, [sp, #13]
 800cf94:	2402      	movs	r4, #2
 800cf96:	e005      	b.n	800cfa4 <dwt_xfer3xxx+0x5e>
 800cf98:	007a      	lsls	r2, r7, #1
 800cf9a:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800cf9e:	f88d 200c 	strb.w	r2, [sp, #12]
 800cfa2:	2401      	movs	r4, #1
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d006      	beq.n	800cfb6 <dwt_xfer3xxx+0x70>
 800cfa8:	d326      	bcc.n	800cff8 <dwt_xfer3xxx+0xb2>
 800cfaa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d901      	bls.n	800cfb6 <dwt_xfer3xxx+0x70>
 800cfb2:	e7fe      	b.n	800cfb2 <dwt_xfer3xxx+0x6c>
 800cfb4:	2401      	movs	r4, #1
 800cfb6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cfb8:	7d1b      	ldrb	r3, [r3, #20]
 800cfba:	b94b      	cbnz	r3, 800cfd0 <dwt_xfer3xxx+0x8a>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	685d      	ldr	r5, [r3, #4]
 800cfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	a903      	add	r1, sp, #12
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	47a8      	blx	r5
 800cfca:	b004      	add	sp, #16
 800cfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	a803      	add	r0, sp, #12
 800cfd6:	f7f7 fb27 	bl	8004628 <dwt_generatecrc8>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	4631      	mov	r1, r6
 800cfde:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfe0:	f7f7 fb22 	bl	8004628 <dwt_generatecrc8>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	9000      	str	r0, [sp, #0]
 800cfe8:	689d      	ldr	r5, [r3, #8]
 800cfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfec:	4632      	mov	r2, r6
 800cfee:	a903      	add	r1, sp, #12
 800cff0:	4620      	mov	r0, r4
 800cff2:	47a8      	blx	r5
 800cff4:	e7e9      	b.n	800cfca <dwt_xfer3xxx+0x84>
 800cff6:	2401      	movs	r4, #1
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	f8d3 8000 	ldr.w	r8, [r3]
 800cffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d000:	4632      	mov	r2, r6
 800d002:	a903      	add	r1, sp, #12
 800d004:	4620      	mov	r0, r4
 800d006:	47c0      	blx	r8
 800d008:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d00a:	7d1b      	ldrb	r3, [r3, #20]
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d1dc      	bne.n	800cfca <dwt_xfer3xxx+0x84>
 800d010:	2f18      	cmp	r7, #24
 800d012:	d0da      	beq.n	800cfca <dwt_xfer3xxx+0x84>
 800d014:	2200      	movs	r2, #0
 800d016:	4621      	mov	r1, r4
 800d018:	a803      	add	r0, sp, #12
 800d01a:	f7f7 fb05 	bl	8004628 <dwt_generatecrc8>
 800d01e:	4602      	mov	r2, r0
 800d020:	4631      	mov	r1, r6
 800d022:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d024:	f7f7 fb00 	bl	8004628 <dwt_generatecrc8>
 800d028:	4604      	mov	r4, r0
 800d02a:	2200      	movs	r2, #0
 800d02c:	2118      	movs	r1, #24
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 f866 	bl	800d100 <dwt_read8bitoffsetreg>
 800d034:	4284      	cmp	r4, r0
 800d036:	d0c8      	beq.n	800cfca <dwt_xfer3xxx+0x84>
 800d038:	68eb      	ldr	r3, [r5, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0c5      	beq.n	800cfca <dwt_xfer3xxx+0x84>
 800d03e:	4798      	blx	r3
 800d040:	e7c3      	b.n	800cfca <dwt_xfer3xxx+0x84>

0800d042 <dwt_readfromdevice>:
 800d042:	b510      	push	{r4, lr}
 800d044:	b082      	sub	sp, #8
 800d046:	2400      	movs	r4, #0
 800d048:	9401      	str	r4, [sp, #4]
 800d04a:	9c04      	ldr	r4, [sp, #16]
 800d04c:	9400      	str	r4, [sp, #0]
 800d04e:	f7ff ff7a 	bl	800cf46 <dwt_xfer3xxx>
 800d052:	b002      	add	sp, #8
 800d054:	bd10      	pop	{r4, pc}

0800d056 <dwt_read32bitoffsetreg>:
 800d056:	b500      	push	{lr}
 800d058:	b085      	sub	sp, #20
 800d05a:	ab03      	add	r3, sp, #12
 800d05c:	9300      	str	r3, [sp, #0]
 800d05e:	2304      	movs	r3, #4
 800d060:	b292      	uxth	r2, r2
 800d062:	f7ff ffee 	bl	800d042 <dwt_readfromdevice>
 800d066:	f10d 030f 	add.w	r3, sp, #15
 800d06a:	f10d 010b 	add.w	r1, sp, #11
 800d06e:	2000      	movs	r0, #0
 800d070:	f813 2901 	ldrb.w	r2, [r3], #-1
 800d074:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800d078:	428b      	cmp	r3, r1
 800d07a:	d1f9      	bne.n	800d070 <dwt_read32bitoffsetreg+0x1a>
 800d07c:	b005      	add	sp, #20
 800d07e:	f85d fb04 	ldr.w	pc, [sp], #4

0800d082 <dwt_read16bitoffsetreg>:
 800d082:	b500      	push	{lr}
 800d084:	b085      	sub	sp, #20
 800d086:	ab03      	add	r3, sp, #12
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	2302      	movs	r3, #2
 800d08c:	b292      	uxth	r2, r2
 800d08e:	f7ff ffd8 	bl	800d042 <dwt_readfromdevice>
 800d092:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d096:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d09a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d09e:	b280      	uxth	r0, r0
 800d0a0:	b005      	add	sp, #20
 800d0a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800d0a6 <ull_getrxantennadelay>:
 800d0a6:	b508      	push	{r3, lr}
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800d0ae:	f7ff ffe8 	bl	800d082 <dwt_read16bitoffsetreg>
 800d0b2:	bd08      	pop	{r3, pc}

0800d0b4 <ull_gettxantennadelay>:
 800d0b4:	b508      	push	{r3, lr}
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	217c      	movs	r1, #124	; 0x7c
 800d0ba:	f7ff ffe2 	bl	800d082 <dwt_read16bitoffsetreg>
 800d0be:	bd08      	pop	{r3, pc}

0800d0c0 <ull_readclockoffset>:
 800d0c0:	b508      	push	{r3, lr}
 800d0c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d0c4:	7b9b      	ldrb	r3, [r3, #14]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d00a      	beq.n	800d0e0 <ull_readclockoffset+0x20>
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	d10e      	bne.n	800d0ec <ull_readclockoffset+0x2c>
 800d0ce:	220c      	movs	r2, #12
 800d0d0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d0d4:	f7ff ffd5 	bl	800d082 <dwt_read16bitoffsetreg>
 800d0d8:	b200      	sxth	r0, r0
 800d0da:	f340 000c 	sbfx	r0, r0, #0, #13
 800d0de:	bd08      	pop	{r3, pc}
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4905      	ldr	r1, [pc, #20]	; (800d0f8 <ull_readclockoffset+0x38>)
 800d0e4:	f7ff ffcd 	bl	800d082 <dwt_read16bitoffsetreg>
 800d0e8:	b200      	sxth	r0, r0
 800d0ea:	e7f6      	b.n	800d0da <ull_readclockoffset+0x1a>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	4903      	ldr	r1, [pc, #12]	; (800d0fc <ull_readclockoffset+0x3c>)
 800d0f0:	f7ff ffc7 	bl	800d082 <dwt_read16bitoffsetreg>
 800d0f4:	b200      	sxth	r0, r0
 800d0f6:	e7f0      	b.n	800d0da <ull_readclockoffset+0x1a>
 800d0f8:	0018000c 	.word	0x0018000c
 800d0fc:	000c0020 	.word	0x000c0020

0800d100 <dwt_read8bitoffsetreg>:
 800d100:	b500      	push	{lr}
 800d102:	b085      	sub	sp, #20
 800d104:	f10d 030f 	add.w	r3, sp, #15
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	2301      	movs	r3, #1
 800d10c:	b292      	uxth	r2, r2
 800d10e:	f7ff ff98 	bl	800d042 <dwt_readfromdevice>
 800d112:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800d116:	b005      	add	sp, #20
 800d118:	f85d fb04 	ldr.w	pc, [sp], #4

0800d11c <ull_readcarrierintegrator>:
 800d11c:	b500      	push	{lr}
 800d11e:	b085      	sub	sp, #20
 800d120:	ab03      	add	r3, sp, #12
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	2303      	movs	r3, #3
 800d126:	2200      	movs	r2, #0
 800d128:	490b      	ldr	r1, [pc, #44]	; (800d158 <ull_readcarrierintegrator+0x3c>)
 800d12a:	f7ff ff8a 	bl	800d042 <dwt_readfromdevice>
 800d12e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d132:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800d136:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800d13a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d13e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d142:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d146:	bf1c      	itt	ne
 800d148:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800d14c:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800d150:	b005      	add	sp, #20
 800d152:	f85d fb04 	ldr.w	pc, [sp], #4
 800d156:	bf00      	nop
 800d158:	00060029 	.word	0x00060029

0800d15c <ull_readdiagnostics>:
 800d15c:	b530      	push	{r4, r5, lr}
 800d15e:	b0bd      	sub	sp, #244	; 0xf4
 800d160:	4605      	mov	r5, r0
 800d162:	460c      	mov	r4, r1
 800d164:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d166:	7b9a      	ldrb	r2, [r3, #14]
 800d168:	2a01      	cmp	r2, #1
 800d16a:	d01c      	beq.n	800d1a6 <ull_readdiagnostics+0x4a>
 800d16c:	2a03      	cmp	r2, #3
 800d16e:	f040 81f1 	bne.w	800d554 <ull_readdiagnostics+0x3f8>
 800d172:	7d9b      	ldrb	r3, [r3, #22]
 800d174:	f013 0f08 	tst.w	r3, #8
 800d178:	d10c      	bne.n	800d194 <ull_readdiagnostics+0x38>
 800d17a:	f013 0f04 	tst.w	r3, #4
 800d17e:	ab02      	add	r3, sp, #8
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	bf14      	ite	ne
 800d184:	2338      	movne	r3, #56	; 0x38
 800d186:	2320      	moveq	r3, #32
 800d188:	2200      	movs	r2, #0
 800d18a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d18e:	f7ff ff58 	bl	800d042 <dwt_readfromdevice>
 800d192:	e019      	b.n	800d1c8 <ull_readdiagnostics+0x6c>
 800d194:	ab02      	add	r3, sp, #8
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	23e8      	movs	r3, #232	; 0xe8
 800d19a:	2200      	movs	r2, #0
 800d19c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d1a0:	f7ff ff4f 	bl	800d042 <dwt_readfromdevice>
 800d1a4:	e010      	b.n	800d1c8 <ull_readdiagnostics+0x6c>
 800d1a6:	7d9b      	ldrb	r3, [r3, #22]
 800d1a8:	f013 0f08 	tst.w	r3, #8
 800d1ac:	f040 81c9 	bne.w	800d542 <ull_readdiagnostics+0x3e6>
 800d1b0:	f013 0f04 	tst.w	r3, #4
 800d1b4:	ab02      	add	r3, sp, #8
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	bf14      	ite	ne
 800d1ba:	2338      	movne	r3, #56	; 0x38
 800d1bc:	2320      	moveq	r3, #32
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d1c4:	f7ff ff3d 	bl	800d042 <dwt_readfromdevice>
 800d1c8:	f10d 0217 	add.w	r2, sp, #23
 800d1cc:	f104 031a 	add.w	r3, r4, #26
 800d1d0:	f104 0020 	add.w	r0, r4, #32
 800d1d4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d1d8:	f803 1b01 	strb.w	r1, [r3], #1
 800d1dc:	4283      	cmp	r3, r0
 800d1de:	d1f9      	bne.n	800d1d4 <ull_readdiagnostics+0x78>
 800d1e0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d1e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d1e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1f0:	8463      	strh	r3, [r4, #34]	; 0x22
 800d1f2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d1f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d1fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d1fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d202:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d206:	bf1c      	itt	ne
 800d208:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d20c:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d210:	8423      	strh	r3, [r4, #32]
 800d212:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800d216:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d21a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d21e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d222:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d224:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d226:	7d9b      	ldrb	r3, [r3, #22]
 800d228:	f013 0f02 	tst.w	r3, #2
 800d22c:	f040 817e 	bne.w	800d52c <ull_readdiagnostics+0x3d0>
 800d230:	aa0a      	add	r2, sp, #40	; 0x28
 800d232:	1e63      	subs	r3, r4, #1
 800d234:	1d20      	adds	r0, r4, #4
 800d236:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d23a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d23e:	79d1      	ldrb	r1, [r2, #7]
 800d240:	7219      	strb	r1, [r3, #8]
 800d242:	7bd1      	ldrb	r1, [r2, #15]
 800d244:	7459      	strb	r1, [r3, #17]
 800d246:	4283      	cmp	r3, r0
 800d248:	d1f5      	bne.n	800d236 <ull_readdiagnostics+0xda>
 800d24a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800d24e:	7163      	strb	r3, [r4, #5]
 800d250:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800d254:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800d258:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d25c:	80e3      	strh	r3, [r4, #6]
 800d25e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d262:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d266:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d26a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d26e:	f8a4 300d 	strh.w	r3, [r4, #13]
 800d272:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800d276:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800d27a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d27e:	f8a4 300f 	strh.w	r3, [r4, #15]
 800d282:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800d286:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800d28a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d28e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d292:	82e3      	strh	r3, [r4, #22]
 800d294:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800d298:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800d29c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2a0:	8323      	strh	r3, [r4, #24]
 800d2a2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d2a4:	7d9b      	ldrb	r3, [r3, #22]
 800d2a6:	f013 0f04 	tst.w	r3, #4
 800d2aa:	f040 813f 	bne.w	800d52c <ull_readdiagnostics+0x3d0>
 800d2ae:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800d2b2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d2b6:	041b      	lsls	r3, r3, #16
 800d2b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d2bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800d2c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2ca:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d2ce:	6263      	str	r3, [r4, #36]	; 0x24
 800d2d0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800d2d4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800d2d8:	041b      	lsls	r3, r3, #16
 800d2da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d2de:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800d2e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2f2:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800d2f6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800d2fa:	041b      	lsls	r3, r3, #16
 800d2fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d300:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800d304:	4313      	orrs	r3, r2
 800d306:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800d30a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d30e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d312:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d314:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800d318:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800d31c:	041b      	lsls	r3, r3, #16
 800d31e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d322:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800d326:	4313      	orrs	r3, r2
 800d328:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800d32c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d330:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d334:	6323      	str	r3, [r4, #48]	; 0x30
 800d336:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800d33a:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800d33e:	041b      	lsls	r3, r3, #16
 800d340:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d344:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800d348:	4313      	orrs	r3, r2
 800d34a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800d34e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d352:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d356:	6363      	str	r3, [r4, #52]	; 0x34
 800d358:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800d35c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800d360:	041b      	lsls	r3, r3, #16
 800d362:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d366:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800d36a:	4313      	orrs	r3, r2
 800d36c:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800d370:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d374:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d378:	63a3      	str	r3, [r4, #56]	; 0x38
 800d37a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800d37e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d386:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800d388:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800d38c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d390:	041b      	lsls	r3, r3, #16
 800d392:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d396:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d39a:	4313      	orrs	r3, r2
 800d39c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d3a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d3a8:	6423      	str	r3, [r4, #64]	; 0x40
 800d3aa:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800d3ae:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800d3b2:	041b      	lsls	r3, r3, #16
 800d3b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3b8:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800d3c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3ca:	6463      	str	r3, [r4, #68]	; 0x44
 800d3cc:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800d3d0:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800d3d4:	041b      	lsls	r3, r3, #16
 800d3d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3da:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800d3e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d3ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800d3ee:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800d3f2:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800d3f6:	041b      	lsls	r3, r3, #16
 800d3f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3fc:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800d400:	4313      	orrs	r3, r2
 800d402:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800d406:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d40a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d40e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d410:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800d414:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800d418:	041b      	lsls	r3, r3, #16
 800d41a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d41e:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800d422:	4313      	orrs	r3, r2
 800d424:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d42c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d430:	6523      	str	r3, [r4, #80]	; 0x50
 800d432:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d436:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d43a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d43e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d442:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d446:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800d44a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800d44e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d456:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d45a:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d45e:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d462:	041b      	lsls	r3, r3, #16
 800d464:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d468:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d46c:	4313      	orrs	r3, r2
 800d46e:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d472:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d476:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d47a:	65a3      	str	r3, [r4, #88]	; 0x58
 800d47c:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800d480:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800d484:	041b      	lsls	r3, r3, #16
 800d486:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d48a:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800d48e:	4313      	orrs	r3, r2
 800d490:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800d494:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d49c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d49e:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800d4a2:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800d4a6:	041b      	lsls	r3, r3, #16
 800d4a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4ac:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800d4b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d4be:	6623      	str	r3, [r4, #96]	; 0x60
 800d4c0:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800d4c4:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800d4c8:	041b      	lsls	r3, r3, #16
 800d4ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4ce:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800d4d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d4e0:	6663      	str	r3, [r4, #100]	; 0x64
 800d4e2:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800d4e6:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800d4ea:	041b      	lsls	r3, r3, #16
 800d4ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4f0:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d4fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4fe:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d502:	66a3      	str	r3, [r4, #104]	; 0x68
 800d504:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d508:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d50c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d510:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d514:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d518:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800d51c:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800d520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d528:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d52c:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800d530:	2b00      	cmp	r3, #0
 800d532:	f2c0 81d0 	blt.w	800d8d6 <ull_readdiagnostics+0x77a>
 800d536:	7fe3      	ldrb	r3, [r4, #31]
 800d538:	f003 0301 	and.w	r3, r3, #1
 800d53c:	77e3      	strb	r3, [r4, #31]
 800d53e:	b03d      	add	sp, #244	; 0xf4
 800d540:	bd30      	pop	{r4, r5, pc}
 800d542:	ab02      	add	r3, sp, #8
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	23e8      	movs	r3, #232	; 0xe8
 800d548:	2200      	movs	r2, #0
 800d54a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d54e:	f7ff fd78 	bl	800d042 <dwt_readfromdevice>
 800d552:	e639      	b.n	800d1c8 <ull_readdiagnostics+0x6c>
 800d554:	7d9b      	ldrb	r3, [r3, #22]
 800d556:	f013 0f01 	tst.w	r3, #1
 800d55a:	f000 81b3 	beq.w	800d8c4 <ull_readdiagnostics+0x768>
 800d55e:	ab02      	add	r3, sp, #8
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	236c      	movs	r3, #108	; 0x6c
 800d564:	2200      	movs	r2, #0
 800d566:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d56a:	f7ff fd6a 	bl	800d042 <dwt_readfromdevice>
 800d56e:	ab1d      	add	r3, sp, #116	; 0x74
 800d570:	9300      	str	r3, [sp, #0]
 800d572:	236c      	movs	r3, #108	; 0x6c
 800d574:	2200      	movs	r2, #0
 800d576:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800d57a:	4628      	mov	r0, r5
 800d57c:	f7ff fd61 	bl	800d042 <dwt_readfromdevice>
 800d580:	aa02      	add	r2, sp, #8
 800d582:	1e63      	subs	r3, r4, #1
 800d584:	1d20      	adds	r0, r4, #4
 800d586:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d58a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d58e:	79d1      	ldrb	r1, [r2, #7]
 800d590:	7219      	strb	r1, [r3, #8]
 800d592:	7bd1      	ldrb	r1, [r2, #15]
 800d594:	7459      	strb	r1, [r3, #17]
 800d596:	7dd1      	ldrb	r1, [r2, #23]
 800d598:	7699      	strb	r1, [r3, #26]
 800d59a:	4283      	cmp	r3, r0
 800d59c:	d1f3      	bne.n	800d586 <ull_readdiagnostics+0x42a>
 800d59e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d5a2:	77e3      	strb	r3, [r4, #31]
 800d5a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d5a8:	7163      	strb	r3, [r4, #5]
 800d5aa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d5ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d5b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5b6:	80e3      	strh	r3, [r4, #6]
 800d5b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d5bc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d5c0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800d5c4:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800d5c8:	f8a4 200d 	strh.w	r2, [r4, #13]
 800d5cc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d5d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800d5d4:	f8a4 200f 	strh.w	r2, [r4, #15]
 800d5d8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d5dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5e0:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d5e4:	82e3      	strh	r3, [r4, #22]
 800d5e6:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800d5ea:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d5ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5f2:	8323      	strh	r3, [r4, #24]
 800d5f4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800d5f8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800d5fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d600:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d604:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d608:	bf1c      	itt	ne
 800d60a:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d60e:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d612:	8423      	strh	r3, [r4, #32]
 800d614:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800d618:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d61c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d624:	8463      	strh	r3, [r4, #34]	; 0x22
 800d626:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800d62a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d62e:	041b      	lsls	r3, r3, #16
 800d630:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d634:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800d638:	4313      	orrs	r3, r2
 800d63a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800d63e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d642:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d646:	6263      	str	r3, [r4, #36]	; 0x24
 800d648:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d64a:	7d9b      	ldrb	r3, [r3, #22]
 800d64c:	f013 0f01 	tst.w	r3, #1
 800d650:	f43f af6c 	beq.w	800d52c <ull_readdiagnostics+0x3d0>
 800d654:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800d658:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800d65c:	041b      	lsls	r3, r3, #16
 800d65e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d662:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800d666:	4313      	orrs	r3, r2
 800d668:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800d66c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d674:	62a3      	str	r3, [r4, #40]	; 0x28
 800d676:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d67a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d67e:	041b      	lsls	r3, r3, #16
 800d680:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d684:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800d688:	4313      	orrs	r3, r2
 800d68a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800d68e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d696:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d698:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800d69c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800d6a0:	041b      	lsls	r3, r3, #16
 800d6a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d6a6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800d6b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6b8:	6323      	str	r3, [r4, #48]	; 0x30
 800d6ba:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800d6be:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800d6c2:	041b      	lsls	r3, r3, #16
 800d6c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d6c8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800d6d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6d6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6da:	6363      	str	r3, [r4, #52]	; 0x34
 800d6dc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800d6e0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d6e4:	041b      	lsls	r3, r3, #16
 800d6e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d6ea:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800d6f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6fc:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6fe:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800d702:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d706:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d70a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800d70c:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800d710:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800d714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d71c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d71e:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800d722:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800d726:	041b      	lsls	r3, r3, #16
 800d728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d72c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800d730:	4313      	orrs	r3, r2
 800d732:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800d736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d73a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d73e:	6423      	str	r3, [r4, #64]	; 0x40
 800d740:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800d744:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800d748:	041b      	lsls	r3, r3, #16
 800d74a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d74e:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800d752:	4313      	orrs	r3, r2
 800d754:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800d758:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d75c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d760:	6463      	str	r3, [r4, #68]	; 0x44
 800d762:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800d766:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800d76a:	041b      	lsls	r3, r3, #16
 800d76c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d770:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800d774:	4313      	orrs	r3, r2
 800d776:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800d77a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d77e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d782:	64a3      	str	r3, [r4, #72]	; 0x48
 800d784:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800d788:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800d78c:	041b      	lsls	r3, r3, #16
 800d78e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d792:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800d796:	4313      	orrs	r3, r2
 800d798:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800d79c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7a4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d7a6:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800d7aa:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d7ae:	041b      	lsls	r3, r3, #16
 800d7b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7b4:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d7be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7c6:	6523      	str	r3, [r4, #80]	; 0x50
 800d7c8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d7cc:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800d7d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d7d8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d7dc:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d7e0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d7e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7ec:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d7f0:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800d7f4:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800d7f8:	041b      	lsls	r3, r3, #16
 800d7fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7fe:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800d802:	4313      	orrs	r3, r2
 800d804:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800d808:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d80c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d810:	65a3      	str	r3, [r4, #88]	; 0x58
 800d812:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800d816:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800d81a:	041b      	lsls	r3, r3, #16
 800d81c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d820:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800d824:	4313      	orrs	r3, r2
 800d826:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800d82a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d82e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d832:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d834:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800d838:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800d83c:	041b      	lsls	r3, r3, #16
 800d83e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d842:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800d846:	4313      	orrs	r3, r2
 800d848:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800d84c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d850:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d854:	6623      	str	r3, [r4, #96]	; 0x60
 800d856:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800d85a:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800d85e:	041b      	lsls	r3, r3, #16
 800d860:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d864:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800d868:	4313      	orrs	r3, r2
 800d86a:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800d86e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d872:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d876:	6663      	str	r3, [r4, #100]	; 0x64
 800d878:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d87c:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d880:	041b      	lsls	r3, r3, #16
 800d882:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d886:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d88a:	4313      	orrs	r3, r2
 800d88c:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d890:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d894:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d898:	66a3      	str	r3, [r4, #104]	; 0x68
 800d89a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d89e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800d8a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d8aa:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d8ae:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d8b2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d8b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8be:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d8c2:	e633      	b.n	800d52c <ull_readdiagnostics+0x3d0>
 800d8c4:	ab02      	add	r3, sp, #8
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	2328      	movs	r3, #40	; 0x28
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d8d0:	f7ff fbb7 	bl	800d042 <dwt_readfromdevice>
 800d8d4:	e654      	b.n	800d580 <ull_readdiagnostics+0x424>
 800d8d6:	23ff      	movs	r3, #255	; 0xff
 800d8d8:	7723      	strb	r3, [r4, #28]
 800d8da:	7763      	strb	r3, [r4, #29]
 800d8dc:	77a3      	strb	r3, [r4, #30]
 800d8de:	77e3      	strb	r3, [r4, #31]
 800d8e0:	e629      	b.n	800d536 <ull_readdiagnostics+0x3da>
	...

0800d8e4 <ull_readrxtimestamp>:
 800d8e4:	b500      	push	{lr}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d8ea:	7b9b      	ldrb	r3, [r3, #14]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d00b      	beq.n	800d908 <ull_readrxtimestamp+0x24>
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d110      	bne.n	800d916 <ull_readrxtimestamp+0x32>
 800d8f4:	9100      	str	r1, [sp, #0]
 800d8f6:	2305      	movs	r3, #5
 800d8f8:	2204      	movs	r2, #4
 800d8fa:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d8fe:	f7ff fba0 	bl	800d042 <dwt_readfromdevice>
 800d902:	b003      	add	sp, #12
 800d904:	f85d fb04 	ldr.w	pc, [sp], #4
 800d908:	9100      	str	r1, [sp, #0]
 800d90a:	2305      	movs	r3, #5
 800d90c:	2200      	movs	r2, #0
 800d90e:	4905      	ldr	r1, [pc, #20]	; (800d924 <ull_readrxtimestamp+0x40>)
 800d910:	f7ff fb97 	bl	800d042 <dwt_readfromdevice>
 800d914:	e7f5      	b.n	800d902 <ull_readrxtimestamp+0x1e>
 800d916:	9100      	str	r1, [sp, #0]
 800d918:	2305      	movs	r3, #5
 800d91a:	2200      	movs	r2, #0
 800d91c:	2160      	movs	r1, #96	; 0x60
 800d91e:	f7ff fb90 	bl	800d042 <dwt_readfromdevice>
 800d922:	e7ee      	b.n	800d902 <ull_readrxtimestamp+0x1e>
 800d924:	00180004 	.word	0x00180004

0800d928 <dwt_writetodevice>:
 800d928:	b510      	push	{r4, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800d930:	9401      	str	r4, [sp, #4]
 800d932:	9c04      	ldr	r4, [sp, #16]
 800d934:	9400      	str	r4, [sp, #0]
 800d936:	f7ff fb06 	bl	800cf46 <dwt_xfer3xxx>
 800d93a:	b002      	add	sp, #8
 800d93c:	bd10      	pop	{r4, pc}

0800d93e <dwt_write16bitoffsetreg>:
 800d93e:	b500      	push	{lr}
 800d940:	b085      	sub	sp, #20
 800d942:	f88d 300c 	strb.w	r3, [sp, #12]
 800d946:	0a1b      	lsrs	r3, r3, #8
 800d948:	f88d 300d 	strb.w	r3, [sp, #13]
 800d94c:	ab03      	add	r3, sp, #12
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	2302      	movs	r3, #2
 800d952:	b292      	uxth	r2, r2
 800d954:	f7ff ffe8 	bl	800d928 <dwt_writetodevice>
 800d958:	b005      	add	sp, #20
 800d95a:	f85d fb04 	ldr.w	pc, [sp], #4

0800d95e <ull_setrxantennadelay>:
 800d95e:	b508      	push	{r3, lr}
 800d960:	460b      	mov	r3, r1
 800d962:	2200      	movs	r2, #0
 800d964:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800d968:	f7ff ffe9 	bl	800d93e <dwt_write16bitoffsetreg>
 800d96c:	bd08      	pop	{r3, pc}

0800d96e <ull_settxantennadelay>:
 800d96e:	b508      	push	{r3, lr}
 800d970:	460b      	mov	r3, r1
 800d972:	2200      	movs	r2, #0
 800d974:	217c      	movs	r1, #124	; 0x7c
 800d976:	f7ff ffe2 	bl	800d93e <dwt_write16bitoffsetreg>
 800d97a:	bd08      	pop	{r3, pc}

0800d97c <ull_force_clocks>:
 800d97c:	b508      	push	{r3, lr}
 800d97e:	2901      	cmp	r1, #1
 800d980:	d002      	beq.n	800d988 <ull_force_clocks+0xc>
 800d982:	2905      	cmp	r1, #5
 800d984:	d007      	beq.n	800d996 <ull_force_clocks+0x1a>
 800d986:	bd08      	pop	{r3, pc}
 800d988:	f641 0322 	movw	r3, #6178	; 0x1822
 800d98c:	2200      	movs	r2, #0
 800d98e:	4905      	ldr	r1, [pc, #20]	; (800d9a4 <ull_force_clocks+0x28>)
 800d990:	f7ff ffd5 	bl	800d93e <dwt_write16bitoffsetreg>
 800d994:	e7f7      	b.n	800d986 <ull_force_clocks+0xa>
 800d996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d99a:	2200      	movs	r2, #0
 800d99c:	4901      	ldr	r1, [pc, #4]	; (800d9a4 <ull_force_clocks+0x28>)
 800d99e:	f7ff ffce 	bl	800d93e <dwt_write16bitoffsetreg>
 800d9a2:	e7f0      	b.n	800d986 <ull_force_clocks+0xa>
 800d9a4:	00110004 	.word	0x00110004

0800d9a8 <__dwt_otp_write_wdata_id_reg>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800d9ba:	f7ff ffc0 	bl	800d93e <dwt_write16bitoffsetreg>
 800d9be:	b2a3      	uxth	r3, r4
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f7ff ffb9 	bl	800d93e <dwt_write16bitoffsetreg>
 800d9cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d9d0 <_dwt_otpread>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	460e      	mov	r6, r1
 800d9d6:	4d0c      	ldr	r5, [pc, #48]	; (800da08 <_dwt_otpread+0x38>)
 800d9d8:	2301      	movs	r3, #1
 800d9da:	2200      	movs	r2, #0
 800d9dc:	4629      	mov	r1, r5
 800d9de:	f7ff ffae 	bl	800d93e <dwt_write16bitoffsetreg>
 800d9e2:	4633      	mov	r3, r6
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	4909      	ldr	r1, [pc, #36]	; (800da0c <_dwt_otpread+0x3c>)
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f7ff ffa8 	bl	800d93e <dwt_write16bitoffsetreg>
 800d9ee:	2302      	movs	r3, #2
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f7ff ffa2 	bl	800d93e <dwt_write16bitoffsetreg>
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	4904      	ldr	r1, [pc, #16]	; (800da10 <_dwt_otpread+0x40>)
 800d9fe:	4620      	mov	r0, r4
 800da00:	f7ff fb29 	bl	800d056 <dwt_read32bitoffsetreg>
 800da04:	bd70      	pop	{r4, r5, r6, pc}
 800da06:	bf00      	nop
 800da08:	000b0008 	.word	0x000b0008
 800da0c:	000b0004 	.word	0x000b0004
 800da10:	000b0010 	.word	0x000b0010

0800da14 <dwt_write32bitoffsetreg>:
 800da14:	b510      	push	{r4, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	f88d 300c 	strb.w	r3, [sp, #12]
 800da1c:	0a1c      	lsrs	r4, r3, #8
 800da1e:	f88d 400d 	strb.w	r4, [sp, #13]
 800da22:	0c1c      	lsrs	r4, r3, #16
 800da24:	f88d 400e 	strb.w	r4, [sp, #14]
 800da28:	0e1b      	lsrs	r3, r3, #24
 800da2a:	f88d 300f 	strb.w	r3, [sp, #15]
 800da2e:	ab03      	add	r3, sp, #12
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	2304      	movs	r3, #4
 800da34:	b292      	uxth	r2, r2
 800da36:	f7ff ff77 	bl	800d928 <dwt_writetodevice>
 800da3a:	b004      	add	sp, #16
 800da3c:	bd10      	pop	{r4, pc}

0800da3e <_dwt_adjust_delaytime>:
 800da3e:	b538      	push	{r3, r4, r5, lr}
 800da40:	4604      	mov	r4, r0
 800da42:	b989      	cbnz	r1, 800da68 <_dwt_adjust_delaytime+0x2a>
 800da44:	2200      	movs	r2, #0
 800da46:	2128      	movs	r1, #40	; 0x28
 800da48:	f7ff fb05 	bl	800d056 <dwt_read32bitoffsetreg>
 800da4c:	4605      	mov	r5, r0
 800da4e:	2201      	movs	r2, #1
 800da50:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800da54:	4620      	mov	r0, r4
 800da56:	f7ff fb53 	bl	800d100 <dwt_read8bitoffsetreg>
 800da5a:	1a2b      	subs	r3, r5, r0
 800da5c:	2200      	movs	r2, #0
 800da5e:	2128      	movs	r1, #40	; 0x28
 800da60:	4620      	mov	r0, r4
 800da62:	f7ff ffd7 	bl	800da14 <dwt_write32bitoffsetreg>
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	2200      	movs	r2, #0
 800da6a:	2128      	movs	r1, #40	; 0x28
 800da6c:	f7ff faf3 	bl	800d056 <dwt_read32bitoffsetreg>
 800da70:	4605      	mov	r5, r0
 800da72:	2201      	movs	r2, #1
 800da74:	217c      	movs	r1, #124	; 0x7c
 800da76:	4620      	mov	r0, r4
 800da78:	f7ff fb42 	bl	800d100 <dwt_read8bitoffsetreg>
 800da7c:	1a2b      	subs	r3, r5, r0
 800da7e:	2200      	movs	r2, #0
 800da80:	2128      	movs	r1, #40	; 0x28
 800da82:	4620      	mov	r0, r4
 800da84:	f7ff ffc6 	bl	800da14 <dwt_write32bitoffsetreg>
 800da88:	e7ed      	b.n	800da66 <_dwt_adjust_delaytime+0x28>

0800da8a <ull_setrxaftertxdelay>:
 800da8a:	b538      	push	{r3, r4, r5, lr}
 800da8c:	4605      	mov	r5, r0
 800da8e:	460c      	mov	r4, r1
 800da90:	2200      	movs	r2, #0
 800da92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800da96:	f7ff fade 	bl	800d056 <dwt_read32bitoffsetreg>
 800da9a:	0d00      	lsrs	r0, r0, #20
 800da9c:	0500      	lsls	r0, r0, #20
 800da9e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800daa2:	4303      	orrs	r3, r0
 800daa4:	2200      	movs	r2, #0
 800daa6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800daaa:	4628      	mov	r0, r5
 800daac:	f7ff ffb2 	bl	800da14 <dwt_write32bitoffsetreg>
 800dab0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dab4 <ull_setfinegraintxseq>:
 800dab4:	b508      	push	{r3, lr}
 800dab6:	b929      	cbnz	r1, 800dac4 <ull_setfinegraintxseq+0x10>
 800dab8:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <ull_setfinegraintxseq+0x1c>)
 800daba:	2202      	movs	r2, #2
 800dabc:	4905      	ldr	r1, [pc, #20]	; (800dad4 <ull_setfinegraintxseq+0x20>)
 800dabe:	f7ff ffa9 	bl	800da14 <dwt_write32bitoffsetreg>
 800dac2:	bd08      	pop	{r3, pc}
 800dac4:	4b04      	ldr	r3, [pc, #16]	; (800dad8 <ull_setfinegraintxseq+0x24>)
 800dac6:	2202      	movs	r2, #2
 800dac8:	4902      	ldr	r1, [pc, #8]	; (800dad4 <ull_setfinegraintxseq+0x20>)
 800daca:	f7ff ffa3 	bl	800da14 <dwt_write32bitoffsetreg>
 800dace:	e7f8      	b.n	800dac2 <ull_setfinegraintxseq+0xe>
 800dad0:	00d20874 	.word	0x00d20874
 800dad4:	00110010 	.word	0x00110010
 800dad8:	04d28874 	.word	0x04d28874

0800dadc <ull_setlnapamode>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4605      	mov	r5, r0
 800dae0:	460c      	mov	r4, r1
 800dae2:	2200      	movs	r2, #0
 800dae4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800dae8:	f7ff fab5 	bl	800d056 <dwt_read32bitoffsetreg>
 800daec:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800daf0:	f014 0f01 	tst.w	r4, #1
 800daf4:	bf18      	it	ne
 800daf6:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800dafa:	f014 0f02 	tst.w	r4, #2
 800dafe:	bf18      	it	ne
 800db00:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800db04:	f014 0f04 	tst.w	r4, #4
 800db08:	bf18      	it	ne
 800db0a:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800db0e:	2200      	movs	r2, #0
 800db10:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800db14:	4628      	mov	r0, r5
 800db16:	f7ff ff7d 	bl	800da14 <dwt_write32bitoffsetreg>
 800db1a:	bd38      	pop	{r3, r4, r5, pc}

0800db1c <ull_configurestskey>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4605      	mov	r5, r0
 800db20:	460c      	mov	r4, r1
 800db22:	680b      	ldr	r3, [r1, #0]
 800db24:	2200      	movs	r2, #0
 800db26:	490b      	ldr	r1, [pc, #44]	; (800db54 <ull_configurestskey+0x38>)
 800db28:	f7ff ff74 	bl	800da14 <dwt_write32bitoffsetreg>
 800db2c:	6863      	ldr	r3, [r4, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	4909      	ldr	r1, [pc, #36]	; (800db58 <ull_configurestskey+0x3c>)
 800db32:	4628      	mov	r0, r5
 800db34:	f7ff ff6e 	bl	800da14 <dwt_write32bitoffsetreg>
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	2200      	movs	r2, #0
 800db3c:	4907      	ldr	r1, [pc, #28]	; (800db5c <ull_configurestskey+0x40>)
 800db3e:	4628      	mov	r0, r5
 800db40:	f7ff ff68 	bl	800da14 <dwt_write32bitoffsetreg>
 800db44:	68e3      	ldr	r3, [r4, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	4905      	ldr	r1, [pc, #20]	; (800db60 <ull_configurestskey+0x44>)
 800db4a:	4628      	mov	r0, r5
 800db4c:	f7ff ff62 	bl	800da14 <dwt_write32bitoffsetreg>
 800db50:	bd38      	pop	{r3, r4, r5, pc}
 800db52:	bf00      	nop
 800db54:	0002000c 	.word	0x0002000c
 800db58:	00020010 	.word	0x00020010
 800db5c:	00020014 	.word	0x00020014
 800db60:	00020018 	.word	0x00020018

0800db64 <ull_configurestsiv>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	4605      	mov	r5, r0
 800db68:	460c      	mov	r4, r1
 800db6a:	680b      	ldr	r3, [r1, #0]
 800db6c:	2200      	movs	r2, #0
 800db6e:	490b      	ldr	r1, [pc, #44]	; (800db9c <ull_configurestsiv+0x38>)
 800db70:	f7ff ff50 	bl	800da14 <dwt_write32bitoffsetreg>
 800db74:	6863      	ldr	r3, [r4, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	4909      	ldr	r1, [pc, #36]	; (800dba0 <ull_configurestsiv+0x3c>)
 800db7a:	4628      	mov	r0, r5
 800db7c:	f7ff ff4a 	bl	800da14 <dwt_write32bitoffsetreg>
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	2200      	movs	r2, #0
 800db84:	4907      	ldr	r1, [pc, #28]	; (800dba4 <ull_configurestsiv+0x40>)
 800db86:	4628      	mov	r0, r5
 800db88:	f7ff ff44 	bl	800da14 <dwt_write32bitoffsetreg>
 800db8c:	68e3      	ldr	r3, [r4, #12]
 800db8e:	2200      	movs	r2, #0
 800db90:	4905      	ldr	r1, [pc, #20]	; (800dba8 <ull_configurestsiv+0x44>)
 800db92:	4628      	mov	r0, r5
 800db94:	f7ff ff3e 	bl	800da14 <dwt_write32bitoffsetreg>
 800db98:	bd38      	pop	{r3, r4, r5, pc}
 800db9a:	bf00      	nop
 800db9c:	0002001c 	.word	0x0002001c
 800dba0:	00020020 	.word	0x00020020
 800dba4:	00020024 	.word	0x00020024
 800dba8:	00020028 	.word	0x00020028

0800dbac <ull_configmrxlut>:
 800dbac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	4d35      	ldr	r5, [pc, #212]	; (800dc88 <ull_configmrxlut+0xdc>)
 800dbb4:	4b35      	ldr	r3, [pc, #212]	; (800dc8c <ull_configmrxlut+0xe0>)
 800dbb6:	2905      	cmp	r1, #5
 800dbb8:	bf18      	it	ne
 800dbba:	461d      	movne	r5, r3
 800dbbc:	4e34      	ldr	r6, [pc, #208]	; (800dc90 <ull_configmrxlut+0xe4>)
 800dbbe:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800dbc2:	2905      	cmp	r1, #5
 800dbc4:	bf18      	it	ne
 800dbc6:	461e      	movne	r6, r3
 800dbc8:	4f32      	ldr	r7, [pc, #200]	; (800dc94 <ull_configmrxlut+0xe8>)
 800dbca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dbce:	2905      	cmp	r1, #5
 800dbd0:	bf18      	it	ne
 800dbd2:	461f      	movne	r7, r3
 800dbd4:	4a30      	ldr	r2, [pc, #192]	; (800dc98 <ull_configmrxlut+0xec>)
 800dbd6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dbda:	2905      	cmp	r1, #5
 800dbdc:	bf0c      	ite	eq
 800dbde:	4690      	moveq	r8, r2
 800dbe0:	4698      	movne	r8, r3
 800dbe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbe6:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800dbea:	2905      	cmp	r1, #5
 800dbec:	bf0c      	ite	eq
 800dbee:	4691      	moveq	r9, r2
 800dbf0:	4699      	movne	r9, r3
 800dbf2:	4a2a      	ldr	r2, [pc, #168]	; (800dc9c <ull_configmrxlut+0xf0>)
 800dbf4:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800dbf8:	2905      	cmp	r1, #5
 800dbfa:	bf0c      	ite	eq
 800dbfc:	4692      	moveq	sl, r2
 800dbfe:	469a      	movne	sl, r3
 800dc00:	4b27      	ldr	r3, [pc, #156]	; (800dca0 <ull_configmrxlut+0xf4>)
 800dc02:	4a28      	ldr	r2, [pc, #160]	; (800dca4 <ull_configmrxlut+0xf8>)
 800dc04:	2905      	cmp	r1, #5
 800dc06:	bf0c      	ite	eq
 800dc08:	469b      	moveq	fp, r3
 800dc0a:	4693      	movne	fp, r2
 800dc0c:	f44f 7310 	mov.w	r3, #576	; 0x240
 800dc10:	2200      	movs	r2, #0
 800dc12:	4925      	ldr	r1, [pc, #148]	; (800dca8 <ull_configmrxlut+0xfc>)
 800dc14:	f7ff fefe 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc18:	4b24      	ldr	r3, [pc, #144]	; (800dcac <ull_configmrxlut+0x100>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4924      	ldr	r1, [pc, #144]	; (800dcb0 <ull_configmrxlut+0x104>)
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f7ff fef8 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc24:	4b23      	ldr	r3, [pc, #140]	; (800dcb4 <ull_configmrxlut+0x108>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	4923      	ldr	r1, [pc, #140]	; (800dcb8 <ull_configmrxlut+0x10c>)
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f7ff fef2 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc30:	465b      	mov	r3, fp
 800dc32:	2200      	movs	r2, #0
 800dc34:	4921      	ldr	r1, [pc, #132]	; (800dcbc <ull_configmrxlut+0x110>)
 800dc36:	4620      	mov	r0, r4
 800dc38:	f7ff feec 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc3c:	4653      	mov	r3, sl
 800dc3e:	2200      	movs	r2, #0
 800dc40:	491f      	ldr	r1, [pc, #124]	; (800dcc0 <ull_configmrxlut+0x114>)
 800dc42:	4620      	mov	r0, r4
 800dc44:	f7ff fee6 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc48:	464b      	mov	r3, r9
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	491d      	ldr	r1, [pc, #116]	; (800dcc4 <ull_configmrxlut+0x118>)
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f7ff fee0 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc54:	4643      	mov	r3, r8
 800dc56:	2200      	movs	r2, #0
 800dc58:	491b      	ldr	r1, [pc, #108]	; (800dcc8 <ull_configmrxlut+0x11c>)
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f7ff feda 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc60:	463b      	mov	r3, r7
 800dc62:	2200      	movs	r2, #0
 800dc64:	4919      	ldr	r1, [pc, #100]	; (800dccc <ull_configmrxlut+0x120>)
 800dc66:	4620      	mov	r0, r4
 800dc68:	f7ff fed4 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc6c:	4633      	mov	r3, r6
 800dc6e:	2200      	movs	r2, #0
 800dc70:	4917      	ldr	r1, [pc, #92]	; (800dcd0 <ull_configmrxlut+0x124>)
 800dc72:	4620      	mov	r0, r4
 800dc74:	f7ff fece 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc78:	462b      	mov	r3, r5
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4915      	ldr	r1, [pc, #84]	; (800dcd4 <ull_configmrxlut+0x128>)
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f7ff fec8 	bl	800da14 <dwt_write32bitoffsetreg>
 800dc84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc88:	00039ff6 	.word	0x00039ff6
 800dc8c:	00055ffe 	.word	0x00055ffe
 800dc90:	00039dfe 	.word	0x00039dfe
 800dc94:	00039c7e 	.word	0x00039c7e
 800dc98:	00038efe 	.word	0x00038efe
 800dc9c:	0003876e 	.word	0x0003876e
 800dca0:	0003803e 	.word	0x0003803e
 800dca4:	0005407e 	.word	0x0005407e
 800dca8:	0003001c 	.word	0x0003001c
 800dcac:	1a491248 	.word	0x1a491248
 800dcb0:	00030020 	.word	0x00030020
 800dcb4:	2db248db 	.word	0x2db248db
 800dcb8:	00030024 	.word	0x00030024
 800dcbc:	0003002c 	.word	0x0003002c
 800dcc0:	00030030 	.word	0x00030030
 800dcc4:	00030034 	.word	0x00030034
 800dcc8:	00030038 	.word	0x00030038
 800dccc:	0003003c 	.word	0x0003003c
 800dcd0:	00030040 	.word	0x00030040
 800dcd4:	00030044 	.word	0x00030044

0800dcd8 <ull_disable_rftx_blocks>:
 800dcd8:	b508      	push	{r3, lr}
 800dcda:	2300      	movs	r3, #0
 800dcdc:	461a      	mov	r2, r3
 800dcde:	4902      	ldr	r1, [pc, #8]	; (800dce8 <ull_disable_rftx_blocks+0x10>)
 800dce0:	f7ff fe98 	bl	800da14 <dwt_write32bitoffsetreg>
 800dce4:	bd08      	pop	{r3, pc}
 800dce6:	bf00      	nop
 800dce8:	00070004 	.word	0x00070004

0800dcec <ull_disable_rf_tx>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4604      	mov	r4, r0
 800dcf0:	460d      	mov	r5, r1
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	490a      	ldr	r1, [pc, #40]	; (800dd20 <ull_disable_rf_tx+0x34>)
 800dcf8:	f7ff fe8c 	bl	800da14 <dwt_write32bitoffsetreg>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	461a      	mov	r2, r3
 800dd00:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800dd04:	4620      	mov	r0, r4
 800dd06:	f7ff fe85 	bl	800da14 <dwt_write32bitoffsetreg>
 800dd0a:	b905      	cbnz	r5, 800dd0e <ull_disable_rf_tx+0x22>
 800dd0c:	bd38      	pop	{r3, r4, r5, pc}
 800dd0e:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800dd12:	2200      	movs	r2, #0
 800dd14:	4903      	ldr	r1, [pc, #12]	; (800dd24 <ull_disable_rf_tx+0x38>)
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff fe7c 	bl	800da14 <dwt_write32bitoffsetreg>
 800dd1c:	e7f6      	b.n	800dd0c <ull_disable_rf_tx+0x20>
 800dd1e:	bf00      	nop
 800dd20:	00070048 	.word	0x00070048
 800dd24:	00070014 	.word	0x00070014

0800dd28 <ull_repeated_cw>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	4615      	mov	r5, r2
 800dd30:	2100      	movs	r1, #0
 800dd32:	f7ff febf 	bl	800dab4 <ull_setfinegraintxseq>
 800dd36:	2d0f      	cmp	r5, #15
 800dd38:	bfa8      	it	ge
 800dd3a:	250f      	movge	r5, #15
 800dd3c:	1e63      	subs	r3, r4, #1
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	bf28      	it	cs
 800dd42:	2404      	movcs	r4, #4
 800dd44:	2310      	movs	r3, #16
 800dd46:	4123      	asrs	r3, r4
 800dd48:	2200      	movs	r2, #0
 800dd4a:	4907      	ldr	r1, [pc, #28]	; (800dd68 <ull_repeated_cw+0x40>)
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	f7ff fe61 	bl	800da14 <dwt_write32bitoffsetreg>
 800dd52:	1e63      	subs	r3, r4, #1
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	fa05 f303 	lsl.w	r3, r5, r3
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	4903      	ldr	r1, [pc, #12]	; (800dd6c <ull_repeated_cw+0x44>)
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f7ff fe58 	bl	800da14 <dwt_write32bitoffsetreg>
 800dd64:	bd70      	pop	{r4, r5, r6, pc}
 800dd66:	bf00      	nop
 800dd68:	00070028 	.word	0x00070028
 800dd6c:	00080018 	.word	0x00080018

0800dd70 <ull_readrxdata>:
 800dd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd72:	b083      	sub	sp, #12
 800dd74:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800dd76:	7ba4      	ldrb	r4, [r4, #14]
 800dd78:	2c03      	cmp	r4, #3
 800dd7a:	bf0c      	ite	eq
 800dd7c:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800dd80:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800dd84:	189c      	adds	r4, r3, r2
 800dd86:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dd8a:	da19      	bge.n	800ddc0 <ull_readrxdata+0x50>
 800dd8c:	461d      	mov	r5, r3
 800dd8e:	4616      	mov	r6, r2
 800dd90:	460f      	mov	r7, r1
 800dd92:	4604      	mov	r4, r0
 800dd94:	2b7f      	cmp	r3, #127	; 0x7f
 800dd96:	d915      	bls.n	800ddc4 <ull_readrxdata+0x54>
 800dd98:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	490d      	ldr	r1, [pc, #52]	; (800ddd4 <ull_readrxdata+0x64>)
 800dda0:	f7ff fe38 	bl	800da14 <dwt_write32bitoffsetreg>
 800dda4:	462b      	mov	r3, r5
 800dda6:	2200      	movs	r2, #0
 800dda8:	490b      	ldr	r1, [pc, #44]	; (800ddd8 <ull_readrxdata+0x68>)
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f7ff fe32 	bl	800da14 <dwt_write32bitoffsetreg>
 800ddb0:	9700      	str	r7, [sp, #0]
 800ddb2:	4633      	mov	r3, r6
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f7ff f941 	bl	800d042 <dwt_readfromdevice>
 800ddc0:	b003      	add	sp, #12
 800ddc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddc4:	9100      	str	r1, [sp, #0]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	462a      	mov	r2, r5
 800ddca:	4661      	mov	r1, ip
 800ddcc:	f7ff f939 	bl	800d042 <dwt_readfromdevice>
 800ddd0:	e7f6      	b.n	800ddc0 <ull_readrxdata+0x50>
 800ddd2:	bf00      	nop
 800ddd4:	001f0004 	.word	0x001f0004
 800ddd8:	001f0008 	.word	0x001f0008

0800dddc <dwt_write8bitoffsetreg>:
 800dddc:	b510      	push	{r4, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	ac04      	add	r4, sp, #16
 800dde2:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800dde6:	9400      	str	r4, [sp, #0]
 800dde8:	2301      	movs	r3, #1
 800ddea:	b292      	uxth	r2, r2
 800ddec:	f7ff fd9c 	bl	800d928 <dwt_writetodevice>
 800ddf0:	b004      	add	sp, #16
 800ddf2:	bd10      	pop	{r4, pc}

0800ddf4 <ull_getframelength>:
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ddfa:	7b9b      	ldrb	r3, [r3, #14]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d013      	beq.n	800de28 <ull_getframelength+0x34>
 800de00:	2b03      	cmp	r3, #3
 800de02:	d11d      	bne.n	800de40 <ull_getframelength+0x4c>
 800de04:	23f0      	movs	r3, #240	; 0xf0
 800de06:	2200      	movs	r2, #0
 800de08:	4912      	ldr	r1, [pc, #72]	; (800de54 <ull_getframelength+0x60>)
 800de0a:	f7ff ffe7 	bl	800dddc <dwt_write8bitoffsetreg>
 800de0e:	2200      	movs	r2, #0
 800de10:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800de14:	4620      	mov	r0, r4
 800de16:	f7ff f934 	bl	800d082 <dwt_read16bitoffsetreg>
 800de1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800de1c:	7ada      	ldrb	r2, [r3, #11]
 800de1e:	b1a2      	cbz	r2, 800de4a <ull_getframelength+0x56>
 800de20:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800de24:	83d8      	strh	r0, [r3, #30]
 800de26:	bd10      	pop	{r4, pc}
 800de28:	230f      	movs	r3, #15
 800de2a:	2200      	movs	r2, #0
 800de2c:	4909      	ldr	r1, [pc, #36]	; (800de54 <ull_getframelength+0x60>)
 800de2e:	f7ff ffd5 	bl	800dddc <dwt_write8bitoffsetreg>
 800de32:	2200      	movs	r2, #0
 800de34:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800de38:	4620      	mov	r0, r4
 800de3a:	f7ff f922 	bl	800d082 <dwt_read16bitoffsetreg>
 800de3e:	e7ec      	b.n	800de1a <ull_getframelength+0x26>
 800de40:	2200      	movs	r2, #0
 800de42:	214c      	movs	r1, #76	; 0x4c
 800de44:	f7ff f91d 	bl	800d082 <dwt_read16bitoffsetreg>
 800de48:	e7e7      	b.n	800de1a <ull_getframelength+0x26>
 800de4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800de4e:	83d8      	strh	r0, [r3, #30]
 800de50:	e7e9      	b.n	800de26 <ull_getframelength+0x32>
 800de52:	bf00      	nop
 800de54:	00010018 	.word	0x00010018

0800de58 <_dwt_clear_db_events>:
 800de58:	b510      	push	{r4, lr}
 800de5a:	4604      	mov	r4, r0
 800de5c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800de5e:	7b9b      	ldrb	r3, [r3, #14]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d004      	beq.n	800de6e <_dwt_clear_db_events+0x16>
 800de64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800de66:	7b9b      	ldrb	r3, [r3, #14]
 800de68:	2b03      	cmp	r3, #3
 800de6a:	d006      	beq.n	800de7a <_dwt_clear_db_events+0x22>
 800de6c:	bd10      	pop	{r4, pc}
 800de6e:	230f      	movs	r3, #15
 800de70:	2200      	movs	r2, #0
 800de72:	4905      	ldr	r1, [pc, #20]	; (800de88 <_dwt_clear_db_events+0x30>)
 800de74:	f7ff ffb2 	bl	800dddc <dwt_write8bitoffsetreg>
 800de78:	e7f4      	b.n	800de64 <_dwt_clear_db_events+0xc>
 800de7a:	23f0      	movs	r3, #240	; 0xf0
 800de7c:	2200      	movs	r2, #0
 800de7e:	4902      	ldr	r1, [pc, #8]	; (800de88 <_dwt_clear_db_events+0x30>)
 800de80:	4620      	mov	r0, r4
 800de82:	f7ff ffab 	bl	800dddc <dwt_write8bitoffsetreg>
 800de86:	e7f1      	b.n	800de6c <_dwt_clear_db_events+0x14>
 800de88:	00010018 	.word	0x00010018

0800de8c <ull_clearaonconfig>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	4604      	mov	r4, r0
 800de90:	2300      	movs	r3, #0
 800de92:	461a      	mov	r2, r3
 800de94:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800de98:	f7ff fd51 	bl	800d93e <dwt_write16bitoffsetreg>
 800de9c:	2300      	movs	r3, #0
 800de9e:	461a      	mov	r2, r3
 800dea0:	4908      	ldr	r1, [pc, #32]	; (800dec4 <ull_clearaonconfig+0x38>)
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7ff ff9a 	bl	800dddc <dwt_write8bitoffsetreg>
 800dea8:	4d07      	ldr	r5, [pc, #28]	; (800dec8 <ull_clearaonconfig+0x3c>)
 800deaa:	2300      	movs	r3, #0
 800deac:	461a      	mov	r2, r3
 800deae:	4629      	mov	r1, r5
 800deb0:	4620      	mov	r0, r4
 800deb2:	f7ff ff93 	bl	800dddc <dwt_write8bitoffsetreg>
 800deb6:	2302      	movs	r3, #2
 800deb8:	2200      	movs	r2, #0
 800deba:	4629      	mov	r1, r5
 800debc:	4620      	mov	r0, r4
 800debe:	f7ff ff8d 	bl	800dddc <dwt_write8bitoffsetreg>
 800dec2:	bd38      	pop	{r3, r4, r5, pc}
 800dec4:	000a0014 	.word	0x000a0014
 800dec8:	000a0004 	.word	0x000a0004

0800decc <ull_configeventcounters>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4605      	mov	r5, r0
 800ded0:	460c      	mov	r4, r1
 800ded2:	2302      	movs	r3, #2
 800ded4:	2200      	movs	r2, #0
 800ded6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800deda:	f7ff ff7f 	bl	800dddc <dwt_write8bitoffsetreg>
 800dede:	b904      	cbnz	r4, 800dee2 <ull_configeventcounters+0x16>
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	2301      	movs	r3, #1
 800dee4:	2200      	movs	r2, #0
 800dee6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800deea:	4628      	mov	r0, r5
 800deec:	f7ff ff76 	bl	800dddc <dwt_write8bitoffsetreg>
 800def0:	e7f6      	b.n	800dee0 <ull_configeventcounters+0x14>
	...

0800def4 <ull_aon_read>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	4604      	mov	r4, r0
 800def8:	460b      	mov	r3, r1
 800defa:	2200      	movs	r2, #0
 800defc:	490a      	ldr	r1, [pc, #40]	; (800df28 <ull_aon_read+0x34>)
 800defe:	f7ff fd1e 	bl	800d93e <dwt_write16bitoffsetreg>
 800df02:	4d0a      	ldr	r5, [pc, #40]	; (800df2c <ull_aon_read+0x38>)
 800df04:	2388      	movs	r3, #136	; 0x88
 800df06:	2200      	movs	r2, #0
 800df08:	4629      	mov	r1, r5
 800df0a:	4620      	mov	r0, r4
 800df0c:	f7ff ff66 	bl	800dddc <dwt_write8bitoffsetreg>
 800df10:	2300      	movs	r3, #0
 800df12:	461a      	mov	r2, r3
 800df14:	4629      	mov	r1, r5
 800df16:	4620      	mov	r0, r4
 800df18:	f7ff ff60 	bl	800dddc <dwt_write8bitoffsetreg>
 800df1c:	2200      	movs	r2, #0
 800df1e:	4904      	ldr	r1, [pc, #16]	; (800df30 <ull_aon_read+0x3c>)
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff f8ed 	bl	800d100 <dwt_read8bitoffsetreg>
 800df26:	bd38      	pop	{r3, r4, r5, pc}
 800df28:	000a000c 	.word	0x000a000c
 800df2c:	000a0004 	.word	0x000a0004
 800df30:	000a0008 	.word	0x000a0008

0800df34 <ull_aon_write>:
 800df34:	b570      	push	{r4, r5, r6, lr}
 800df36:	4604      	mov	r4, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	4615      	mov	r5, r2
 800df3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800df40:	bf34      	ite	cc
 800df42:	2600      	movcc	r6, #0
 800df44:	2620      	movcs	r6, #32
 800df46:	2200      	movs	r2, #0
 800df48:	490b      	ldr	r1, [pc, #44]	; (800df78 <ull_aon_write+0x44>)
 800df4a:	f7ff fcf8 	bl	800d93e <dwt_write16bitoffsetreg>
 800df4e:	462b      	mov	r3, r5
 800df50:	2200      	movs	r2, #0
 800df52:	490a      	ldr	r1, [pc, #40]	; (800df7c <ull_aon_write+0x48>)
 800df54:	4620      	mov	r0, r4
 800df56:	f7ff ff41 	bl	800dddc <dwt_write8bitoffsetreg>
 800df5a:	4d09      	ldr	r5, [pc, #36]	; (800df80 <ull_aon_write+0x4c>)
 800df5c:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800df60:	2200      	movs	r2, #0
 800df62:	4629      	mov	r1, r5
 800df64:	4620      	mov	r0, r4
 800df66:	f7ff ff39 	bl	800dddc <dwt_write8bitoffsetreg>
 800df6a:	2300      	movs	r3, #0
 800df6c:	461a      	mov	r2, r3
 800df6e:	4629      	mov	r1, r5
 800df70:	4620      	mov	r0, r4
 800df72:	f7ff ff33 	bl	800dddc <dwt_write8bitoffsetreg>
 800df76:	bd70      	pop	{r4, r5, r6, pc}
 800df78:	000a000c 	.word	0x000a000c
 800df7c:	000a0010 	.word	0x000a0010
 800df80:	000a0004 	.word	0x000a0004

0800df84 <ull_configuresleep>:
 800df84:	b570      	push	{r4, r5, r6, lr}
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	4616      	mov	r6, r2
 800df8c:	2200      	movs	r2, #0
 800df8e:	f240 110b 	movw	r1, #267	; 0x10b
 800df92:	f7ff ffcf 	bl	800df34 <ull_aon_write>
 800df96:	f44f 7182 	mov.w	r1, #260	; 0x104
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7ff ffaa 	bl	800def4 <ull_aon_read>
 800dfa0:	f000 021f 	and.w	r2, r0, #31
 800dfa4:	f44f 7182 	mov.w	r1, #260	; 0x104
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f7ff ffc3 	bl	800df34 <ull_aon_write>
 800dfae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dfb0:	8a1a      	ldrh	r2, [r3, #16]
 800dfb2:	4315      	orrs	r5, r2
 800dfb4:	821d      	strh	r5, [r3, #16]
 800dfb6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800dfb8:	8a13      	ldrh	r3, [r2, #16]
 800dfba:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800dfbe:	bf1c      	itt	ne
 800dfc0:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800dfc4:	8213      	strhne	r3, [r2, #16]
 800dfc6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dfc8:	8a1b      	ldrh	r3, [r3, #16]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff fcb4 	bl	800d93e <dwt_write16bitoffsetreg>
 800dfd6:	4633      	mov	r3, r6
 800dfd8:	2200      	movs	r2, #0
 800dfda:	4902      	ldr	r1, [pc, #8]	; (800dfe4 <ull_configuresleep+0x60>)
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f7ff fefd 	bl	800dddc <dwt_write8bitoffsetreg>
 800dfe2:	bd70      	pop	{r4, r5, r6, pc}
 800dfe4:	000a0014 	.word	0x000a0014

0800dfe8 <ull_setplenfine>:
 800dfe8:	b508      	push	{r3, lr}
 800dfea:	460b      	mov	r3, r1
 800dfec:	2201      	movs	r2, #1
 800dfee:	2124      	movs	r1, #36	; 0x24
 800dff0:	f7ff fef4 	bl	800dddc <dwt_write8bitoffsetreg>
 800dff4:	bd08      	pop	{r3, pc}
	...

0800dff8 <ull_update_nonce_GCM>:
 800dff8:	b500      	push	{lr}
 800dffa:	b083      	sub	sp, #12
 800dffc:	9100      	str	r1, [sp, #0]
 800dffe:	230c      	movs	r3, #12
 800e000:	2200      	movs	r2, #0
 800e002:	4903      	ldr	r1, [pc, #12]	; (800e010 <ull_update_nonce_GCM+0x18>)
 800e004:	f7ff fc90 	bl	800d928 <dwt_writetodevice>
 800e008:	b003      	add	sp, #12
 800e00a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e00e:	bf00      	nop
 800e010:	00010034 	.word	0x00010034

0800e014 <ull_update_nonce_CCM>:
 800e014:	b500      	push	{lr}
 800e016:	b087      	sub	sp, #28
 800e018:	4613      	mov	r3, r2
 800e01a:	7a8a      	ldrb	r2, [r1, #10]
 800e01c:	f88d 2008 	strb.w	r2, [sp, #8]
 800e020:	7a4a      	ldrb	r2, [r1, #9]
 800e022:	f88d 2009 	strb.w	r2, [sp, #9]
 800e026:	7a0a      	ldrb	r2, [r1, #8]
 800e028:	f88d 200a 	strb.w	r2, [sp, #10]
 800e02c:	79ca      	ldrb	r2, [r1, #7]
 800e02e:	f88d 200b 	strb.w	r2, [sp, #11]
 800e032:	798a      	ldrb	r2, [r1, #6]
 800e034:	f88d 200c 	strb.w	r2, [sp, #12]
 800e038:	794a      	ldrb	r2, [r1, #5]
 800e03a:	f88d 200d 	strb.w	r2, [sp, #13]
 800e03e:	790a      	ldrb	r2, [r1, #4]
 800e040:	f88d 200e 	strb.w	r2, [sp, #14]
 800e044:	78ca      	ldrb	r2, [r1, #3]
 800e046:	f88d 200f 	strb.w	r2, [sp, #15]
 800e04a:	788a      	ldrb	r2, [r1, #2]
 800e04c:	f88d 2010 	strb.w	r2, [sp, #16]
 800e050:	784a      	ldrb	r2, [r1, #1]
 800e052:	f88d 2011 	strb.w	r2, [sp, #17]
 800e056:	780a      	ldrb	r2, [r1, #0]
 800e058:	f88d 2012 	strb.w	r2, [sp, #18]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f88d 2013 	strb.w	r2, [sp, #19]
 800e062:	f88d 3014 	strb.w	r3, [sp, #20]
 800e066:	0a1b      	lsrs	r3, r3, #8
 800e068:	f88d 3015 	strb.w	r3, [sp, #21]
 800e06c:	7b0b      	ldrb	r3, [r1, #12]
 800e06e:	f88d 3016 	strb.w	r3, [sp, #22]
 800e072:	7acb      	ldrb	r3, [r1, #11]
 800e074:	f88d 3017 	strb.w	r3, [sp, #23]
 800e078:	ab02      	add	r3, sp, #8
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	2310      	movs	r3, #16
 800e07e:	4903      	ldr	r1, [pc, #12]	; (800e08c <ull_update_nonce_CCM+0x78>)
 800e080:	f7ff fc52 	bl	800d928 <dwt_writetodevice>
 800e084:	b007      	add	sp, #28
 800e086:	f85d fb04 	ldr.w	pc, [sp], #4
 800e08a:	bf00      	nop
 800e08c:	00010034 	.word	0x00010034

0800e090 <ull_writetxdata>:
 800e090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e092:	b083      	sub	sp, #12
 800e094:	185c      	adds	r4, r3, r1
 800e096:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e09a:	da24      	bge.n	800e0e6 <ull_writetxdata+0x56>
 800e09c:	461c      	mov	r4, r3
 800e09e:	4617      	mov	r7, r2
 800e0a0:	460e      	mov	r6, r1
 800e0a2:	4605      	mov	r5, r0
 800e0a4:	2b7f      	cmp	r3, #127	; 0x7f
 800e0a6:	d915      	bls.n	800e0d4 <ull_writetxdata+0x44>
 800e0a8:	2314      	movs	r3, #20
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	490f      	ldr	r1, [pc, #60]	; (800e0ec <ull_writetxdata+0x5c>)
 800e0ae:	f7ff fcb1 	bl	800da14 <dwt_write32bitoffsetreg>
 800e0b2:	4623      	mov	r3, r4
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	490e      	ldr	r1, [pc, #56]	; (800e0f0 <ull_writetxdata+0x60>)
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f7ff fcab 	bl	800da14 <dwt_write32bitoffsetreg>
 800e0be:	9700      	str	r7, [sp, #0]
 800e0c0:	4633      	mov	r3, r6
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f7ff fc2d 	bl	800d928 <dwt_writetodevice>
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	b003      	add	sp, #12
 800e0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0d4:	9200      	str	r2, [sp, #0]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	4622      	mov	r2, r4
 800e0da:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800e0de:	f7ff fc23 	bl	800d928 <dwt_writetodevice>
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	e7f4      	b.n	800e0d0 <ull_writetxdata+0x40>
 800e0e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0ea:	e7f1      	b.n	800e0d0 <ull_writetxdata+0x40>
 800e0ec:	001f0004 	.word	0x001f0004
 800e0f0:	001f0008 	.word	0x001f0008

0800e0f4 <ull_signal_rx_buff_free>:
 800e0f4:	b510      	push	{r4, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	9301      	str	r3, [sp, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	9200      	str	r2, [sp, #0]
 800e102:	4613      	mov	r3, r2
 800e104:	2113      	movs	r1, #19
 800e106:	f7fe ff1e 	bl	800cf46 <dwt_xfer3xxx>
 800e10a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e10c:	7b9a      	ldrb	r2, [r3, #14]
 800e10e:	2a03      	cmp	r2, #3
 800e110:	bf0c      	ite	eq
 800e112:	2201      	moveq	r2, #1
 800e114:	2203      	movne	r2, #3
 800e116:	739a      	strb	r2, [r3, #14]
 800e118:	b002      	add	sp, #8
 800e11a:	bd10      	pop	{r4, pc}

0800e11c <ull_isr>:
 800e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e120:	4604      	mov	r4, r0
 800e122:	2200      	movs	r2, #0
 800e124:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800e128:	f7fe ffea 	bl	800d100 <dwt_read8bitoffsetreg>
 800e12c:	4605      	mov	r5, r0
 800e12e:	2200      	movs	r2, #0
 800e130:	2144      	movs	r1, #68	; 0x44
 800e132:	4620      	mov	r0, r4
 800e134:	f7fe ff8f 	bl	800d056 <dwt_read32bitoffsetreg>
 800e138:	4606      	mov	r6, r0
 800e13a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e13c:	2200      	movs	r2, #0
 800e13e:	83da      	strh	r2, [r3, #30]
 800e140:	f883 2020 	strb.w	r2, [r3, #32]
 800e144:	619a      	str	r2, [r3, #24]
 800e146:	839a      	strh	r2, [r3, #28]
 800e148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800e14c:	625a      	str	r2, [r3, #36]	; 0x24
 800e14e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e150:	625c      	str	r4, [r3, #36]	; 0x24
 800e152:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e154:	7b9f      	ldrb	r7, [r3, #14]
 800e156:	2f00      	cmp	r7, #0
 800e158:	d17f      	bne.n	800e25a <ull_isr+0x13e>
 800e15a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e15c:	619e      	str	r6, [r3, #24]
 800e15e:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800e162:	f898 3015 	ldrb.w	r3, [r8, #21]
 800e166:	f003 0303 	and.w	r3, r3, #3
 800e16a:	2b03      	cmp	r3, #3
 800e16c:	f000 8090 	beq.w	800e290 <ull_isr+0x174>
 800e170:	f015 0f80 	tst.w	r5, #128	; 0x80
 800e174:	f040 8093 	bne.w	800e29e <ull_isr+0x182>
 800e178:	f015 0f01 	tst.w	r5, #1
 800e17c:	f040 80c1 	bne.w	800e302 <ull_isr+0x1e6>
 800e180:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e184:	d00b      	beq.n	800e19e <ull_isr+0x82>
 800e186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e188:	b113      	cbz	r3, 800e190 <ull_isr+0x74>
 800e18a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e18c:	3018      	adds	r0, #24
 800e18e:	4798      	blx	r3
 800e190:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800e194:	2202      	movs	r2, #2
 800e196:	2144      	movs	r1, #68	; 0x44
 800e198:	4620      	mov	r0, r4
 800e19a:	f7ff fbd0 	bl	800d93e <dwt_write16bitoffsetreg>
 800e19e:	f015 0f08 	tst.w	r5, #8
 800e1a2:	d107      	bne.n	800e1b4 <ull_isr+0x98>
 800e1a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e1a6:	7b9b      	ldrb	r3, [r3, #14]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 80ea 	beq.w	800e382 <ull_isr+0x266>
 800e1ae:	2f00      	cmp	r7, #0
 800e1b0:	f000 80e7 	beq.w	800e382 <ull_isr+0x266>
 800e1b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 2020 	strb.w	r2, [r3, #32]
 800e1bc:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800e1c0:	f000 80ad 	beq.w	800e31e <ull_isr+0x202>
 800e1c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e1c6:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e1ca:	f043 0308 	orr.w	r3, r3, #8
 800e1ce:	f882 3020 	strb.w	r3, [r2, #32]
 800e1d2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800e1d6:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800e1da:	d008      	beq.n	800e1ee <ull_isr+0xd2>
 800e1dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e1de:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e1e2:	f043 0310 	orr.w	r3, r3, #16
 800e1e6:	f882 3020 	strb.w	r3, [r2, #32]
 800e1ea:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800e1ee:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e1f2:	d006      	beq.n	800e202 <ull_isr+0xe6>
 800e1f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e1f6:	7d53      	ldrb	r3, [r2, #21]
 800e1f8:	f003 0303 	and.w	r3, r3, #3
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	f000 809a 	beq.w	800e336 <ull_isr+0x21a>
 800e202:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800e206:	f040 80a2 	bne.w	800e34e <ull_isr+0x232>
 800e20a:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800e20e:	2200      	movs	r2, #0
 800e210:	2144      	movs	r1, #68	; 0x44
 800e212:	4620      	mov	r0, r4
 800e214:	f7ff fbfe 	bl	800da14 <dwt_write32bitoffsetreg>
 800e218:	4620      	mov	r0, r4
 800e21a:	f7ff fe1d 	bl	800de58 <_dwt_clear_db_events>
 800e21e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e220:	8bc3      	ldrh	r3, [r0, #30]
 800e222:	2b00      	cmp	r3, #0
 800e224:	f040 80a2 	bne.w	800e36c <ull_isr+0x250>
 800e228:	7d43      	ldrb	r3, [r0, #21]
 800e22a:	f003 0303 	and.w	r3, r3, #3
 800e22e:	2b03      	cmp	r3, #3
 800e230:	f000 809c 	beq.w	800e36c <ull_isr+0x250>
 800e234:	6983      	ldr	r3, [r0, #24]
 800e236:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800e23a:	6183      	str	r3, [r0, #24]
 800e23c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e23e:	6993      	ldr	r3, [r2, #24]
 800e240:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e244:	6193      	str	r3, [r2, #24]
 800e246:	69e3      	ldr	r3, [r4, #28]
 800e248:	b113      	cbz	r3, 800e250 <ull_isr+0x134>
 800e24a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e24c:	3018      	adds	r0, #24
 800e24e:	4798      	blx	r3
 800e250:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2020 	strb.w	r2, [r3, #32]
 800e258:	e08c      	b.n	800e374 <ull_isr+0x258>
 800e25a:	496d      	ldr	r1, [pc, #436]	; (800e410 <ull_isr+0x2f4>)
 800e25c:	4620      	mov	r0, r4
 800e25e:	f7fe ff4f 	bl	800d100 <dwt_read8bitoffsetreg>
 800e262:	4607      	mov	r7, r0
 800e264:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e266:	7b9b      	ldrb	r3, [r3, #14]
 800e268:	2b03      	cmp	r3, #3
 800e26a:	bf08      	it	eq
 800e26c:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800e270:	f017 0f01 	tst.w	r7, #1
 800e274:	bf18      	it	ne
 800e276:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800e27a:	f017 0f02 	tst.w	r7, #2
 800e27e:	bf18      	it	ne
 800e280:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800e284:	f017 0f04 	tst.w	r7, #4
 800e288:	bf18      	it	ne
 800e28a:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800e28e:	e764      	b.n	800e15a <ull_isr+0x3e>
 800e290:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e294:	bf1c      	itt	ne
 800e296:	f045 0508 	orrne.w	r5, r5, #8
 800e29a:	b2ed      	uxtbne	r5, r5
 800e29c:	e768      	b.n	800e170 <ull_isr+0x54>
 800e29e:	2200      	movs	r2, #0
 800e2a0:	2148      	movs	r1, #72	; 0x48
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f7fe feed 	bl	800d082 <dwt_read16bitoffsetreg>
 800e2a8:	f8a8 001c 	strh.w	r0, [r8, #28]
 800e2ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e2ae:	7d1a      	ldrb	r2, [r3, #20]
 800e2b0:	b11a      	cbz	r2, 800e2ba <ull_isr+0x19e>
 800e2b2:	699a      	ldr	r2, [r3, #24]
 800e2b4:	f012 0f04 	tst.w	r2, #4
 800e2b8:	d103      	bne.n	800e2c2 <ull_isr+0x1a6>
 800e2ba:	8b9b      	ldrh	r3, [r3, #28]
 800e2bc:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800e2c0:	b18b      	cbz	r3, 800e2e6 <ull_isr+0x1ca>
 800e2c2:	2304      	movs	r3, #4
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	2144      	movs	r1, #68	; 0x44
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f7ff fd87 	bl	800dddc <dwt_write8bitoffsetreg>
 800e2ce:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	2148      	movs	r1, #72	; 0x48
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7ff fb31 	bl	800d93e <dwt_write16bitoffsetreg>
 800e2dc:	6a23      	ldr	r3, [r4, #32]
 800e2de:	b113      	cbz	r3, 800e2e6 <ull_isr+0x1ca>
 800e2e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e2e2:	3018      	adds	r0, #24
 800e2e4:	4798      	blx	r3
 800e2e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e2e8:	8b9b      	ldrh	r3, [r3, #28]
 800e2ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e2ee:	f43f af43 	beq.w	800e178 <ull_isr+0x5c>
 800e2f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	2148      	movs	r1, #72	; 0x48
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f7ff fb1f 	bl	800d93e <dwt_write16bitoffsetreg>
 800e300:	e73a      	b.n	800e178 <ull_isr+0x5c>
 800e302:	23f8      	movs	r3, #248	; 0xf8
 800e304:	2200      	movs	r2, #0
 800e306:	2144      	movs	r1, #68	; 0x44
 800e308:	4620      	mov	r0, r4
 800e30a:	f7ff fd67 	bl	800dddc <dwt_write8bitoffsetreg>
 800e30e:	6923      	ldr	r3, [r4, #16]
 800e310:	2b00      	cmp	r3, #0
 800e312:	f43f af35 	beq.w	800e180 <ull_isr+0x64>
 800e316:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e318:	3018      	adds	r0, #24
 800e31a:	4798      	blx	r3
 800e31c:	e730      	b.n	800e180 <ull_isr+0x64>
 800e31e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800e322:	bf1f      	itttt	ne
 800e324:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800e326:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800e32a:	f043 0304 	orrne.w	r3, r3, #4
 800e32e:	f882 3020 	strbne.w	r3, [r2, #32]
 800e332:	2700      	movs	r7, #0
 800e334:	e74f      	b.n	800e1d6 <ull_isr+0xba>
 800e336:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e33a:	f043 0302 	orr.w	r3, r3, #2
 800e33e:	f882 3020 	strb.w	r3, [r2, #32]
 800e342:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e344:	2200      	movs	r2, #0
 800e346:	83da      	strh	r2, [r3, #30]
 800e348:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800e34c:	e75d      	b.n	800e20a <ull_isr+0xee>
 800e34e:	4620      	mov	r0, r4
 800e350:	f7ff fd50 	bl	800ddf4 <ull_getframelength>
 800e354:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800e358:	f43f af57 	beq.w	800e20a <ull_isr+0xee>
 800e35c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e35e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e362:	f043 0301 	orr.w	r3, r3, #1
 800e366:	f882 3020 	strb.w	r3, [r2, #32]
 800e36a:	e74e      	b.n	800e20a <ull_isr+0xee>
 800e36c:	6963      	ldr	r3, [r4, #20]
 800e36e:	b10b      	cbz	r3, 800e374 <ull_isr+0x258>
 800e370:	3018      	adds	r0, #24
 800e372:	4798      	blx	r3
 800e374:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e376:	7b9b      	ldrb	r3, [r3, #14]
 800e378:	bb03      	cbnz	r3, 800e3bc <ull_isr+0x2a0>
 800e37a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e37c:	2200      	movs	r2, #0
 800e37e:	f883 2020 	strb.w	r2, [r3, #32]
 800e382:	f015 0f10 	tst.w	r5, #16
 800e386:	d11d      	bne.n	800e3c4 <ull_isr+0x2a8>
 800e388:	f015 0f20 	tst.w	r5, #32
 800e38c:	d12d      	bne.n	800e3ea <ull_isr+0x2ce>
 800e38e:	2200      	movs	r2, #0
 800e390:	4920      	ldr	r1, [pc, #128]	; (800e414 <ull_isr+0x2f8>)
 800e392:	4620      	mov	r0, r4
 800e394:	f7fe feb4 	bl	800d100 <dwt_read8bitoffsetreg>
 800e398:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e39a:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800e39e:	f010 0303 	ands.w	r3, r0, #3
 800e3a2:	d009      	beq.n	800e3b8 <ull_isr+0x29c>
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	491b      	ldr	r1, [pc, #108]	; (800e414 <ull_isr+0x2f8>)
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f7ff fd17 	bl	800dddc <dwt_write8bitoffsetreg>
 800e3ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e3b0:	b113      	cbz	r3, 800e3b8 <ull_isr+0x29c>
 800e3b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e3b4:	3018      	adds	r0, #24
 800e3b6:	4798      	blx	r3
 800e3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7ff fe99 	bl	800e0f4 <ull_signal_rx_buff_free>
 800e3c2:	e7da      	b.n	800e37a <ull_isr+0x25e>
 800e3c4:	4b14      	ldr	r3, [pc, #80]	; (800e418 <ull_isr+0x2fc>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	2144      	movs	r1, #68	; 0x44
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f7ff fb22 	bl	800da14 <dwt_write32bitoffsetreg>
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f7ff fd41 	bl	800de58 <_dwt_clear_db_events>
 800e3d6:	69e3      	ldr	r3, [r4, #28]
 800e3d8:	b113      	cbz	r3, 800e3e0 <ull_isr+0x2c4>
 800e3da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e3dc:	3018      	adds	r0, #24
 800e3de:	4798      	blx	r3
 800e3e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f883 2020 	strb.w	r2, [r3, #32]
 800e3e8:	e7ce      	b.n	800e388 <ull_isr+0x26c>
 800e3ea:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <ull_isr+0x300>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2144      	movs	r1, #68	; 0x44
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f7ff fb0f 	bl	800da14 <dwt_write32bitoffsetreg>
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f7ff fd2e 	bl	800de58 <_dwt_clear_db_events>
 800e3fc:	69a3      	ldr	r3, [r4, #24]
 800e3fe:	b113      	cbz	r3, 800e406 <ull_isr+0x2ea>
 800e400:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e402:	3018      	adds	r0, #24
 800e404:	4798      	blx	r3
 800e406:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e408:	2200      	movs	r2, #0
 800e40a:	f883 2020 	strb.w	r2, [r3, #32]
 800e40e:	e7be      	b.n	800e38e <ull_isr+0x272>
 800e410:	00010018 	.word	0x00010018
 800e414:	00110038 	.word	0x00110038
 800e418:	34059400 	.word	0x34059400
 800e41c:	10220400 	.word	0x10220400

0800e420 <dwt_modify32bitoffsetreg>:
 800e420:	b530      	push	{r4, r5, lr}
 800e422:	b085      	sub	sp, #20
 800e424:	9c08      	ldr	r4, [sp, #32]
 800e426:	f88d 3008 	strb.w	r3, [sp, #8]
 800e42a:	0a1d      	lsrs	r5, r3, #8
 800e42c:	f88d 5009 	strb.w	r5, [sp, #9]
 800e430:	0c1d      	lsrs	r5, r3, #16
 800e432:	f88d 500a 	strb.w	r5, [sp, #10]
 800e436:	0e1b      	lsrs	r3, r3, #24
 800e438:	f88d 300b 	strb.w	r3, [sp, #11]
 800e43c:	f88d 400c 	strb.w	r4, [sp, #12]
 800e440:	0a23      	lsrs	r3, r4, #8
 800e442:	f88d 300d 	strb.w	r3, [sp, #13]
 800e446:	0c23      	lsrs	r3, r4, #16
 800e448:	f88d 300e 	strb.w	r3, [sp, #14]
 800e44c:	0e24      	lsrs	r4, r4, #24
 800e44e:	f88d 400f 	strb.w	r4, [sp, #15]
 800e452:	f248 0303 	movw	r3, #32771	; 0x8003
 800e456:	9301      	str	r3, [sp, #4]
 800e458:	ab02      	add	r3, sp, #8
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	2308      	movs	r3, #8
 800e45e:	b292      	uxth	r2, r2
 800e460:	f7fe fd71 	bl	800cf46 <dwt_xfer3xxx>
 800e464:	b005      	add	sp, #20
 800e466:	bd30      	pop	{r4, r5, pc}

0800e468 <ull_enablegpioclocks>:
 800e468:	b500      	push	{lr}
 800e46a:	b083      	sub	sp, #12
 800e46c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e476:	2200      	movs	r2, #0
 800e478:	4902      	ldr	r1, [pc, #8]	; (800e484 <ull_enablegpioclocks+0x1c>)
 800e47a:	f7ff ffd1 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e47e:	b003      	add	sp, #12
 800e480:	f85d fb04 	ldr.w	pc, [sp], #4
 800e484:	00110004 	.word	0x00110004

0800e488 <ull_enable_rf_tx>:
 800e488:	b570      	push	{r4, r5, r6, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	4604      	mov	r4, r0
 800e48e:	460e      	mov	r6, r1
 800e490:	4d13      	ldr	r5, [pc, #76]	; (800e4e0 <ull_enable_rf_tx+0x58>)
 800e492:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e49c:	2200      	movs	r2, #0
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f7ff ffbe 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e4a4:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	f7ff ffb4 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e4b8:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <ull_enable_rf_tx+0x5c>)
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f7ff ffaa 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e4cc:	b90e      	cbnz	r6, 800e4d2 <ull_enable_rf_tx+0x4a>
 800e4ce:	b002      	add	sp, #8
 800e4d0:	bd70      	pop	{r4, r5, r6, pc}
 800e4d2:	4b05      	ldr	r3, [pc, #20]	; (800e4e8 <ull_enable_rf_tx+0x60>)
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	4905      	ldr	r1, [pc, #20]	; (800e4ec <ull_enable_rf_tx+0x64>)
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f7ff fa9b 	bl	800da14 <dwt_write32bitoffsetreg>
 800e4de:	e7f6      	b.n	800e4ce <ull_enable_rf_tx+0x46>
 800e4e0:	00070048 	.word	0x00070048
 800e4e4:	02003c00 	.word	0x02003c00
 800e4e8:	01011100 	.word	0x01011100
 800e4ec:	00070014 	.word	0x00070014

0800e4f0 <ull_enable_rftx_blocks>:
 800e4f0:	b500      	push	{lr}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	4b05      	ldr	r3, [pc, #20]	; (800e50c <ull_enable_rftx_blocks+0x1c>)
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4904      	ldr	r1, [pc, #16]	; (800e510 <ull_enable_rftx_blocks+0x20>)
 800e500:	f7ff ff8e 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e504:	b003      	add	sp, #12
 800e506:	f85d fb04 	ldr.w	pc, [sp], #4
 800e50a:	bf00      	nop
 800e50c:	02003c00 	.word	0x02003c00
 800e510:	00070004 	.word	0x00070004

0800e514 <_dwt_otpprogword32>:
 800e514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e518:	b083      	sub	sp, #12
 800e51a:	4604      	mov	r4, r0
 800e51c:	460d      	mov	r5, r1
 800e51e:	4617      	mov	r7, r2
 800e520:	4e56      	ldr	r6, [pc, #344]	; (800e67c <_dwt_otpprogword32+0x168>)
 800e522:	2200      	movs	r2, #0
 800e524:	4631      	mov	r1, r6
 800e526:	f7fe fd96 	bl	800d056 <dwt_read32bitoffsetreg>
 800e52a:	4681      	mov	r9, r0
 800e52c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e536:	2200      	movs	r2, #0
 800e538:	4631      	mov	r1, r6
 800e53a:	4620      	mov	r0, r4
 800e53c:	f7ff ff70 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e540:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e680 <_dwt_otpprogword32+0x16c>
 800e544:	2318      	movs	r3, #24
 800e546:	2200      	movs	r2, #0
 800e548:	4641      	mov	r1, r8
 800e54a:	4620      	mov	r0, r4
 800e54c:	f7ff f9f7 	bl	800d93e <dwt_write16bitoffsetreg>
 800e550:	2125      	movs	r1, #37	; 0x25
 800e552:	4620      	mov	r0, r4
 800e554:	f7ff fa28 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e558:	2102      	movs	r1, #2
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7ff fa24 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e560:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800e564:	4620      	mov	r0, r4
 800e566:	f7ff fa1f 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e56a:	b2f9      	uxtb	r1, r7
 800e56c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e570:	4620      	mov	r0, r4
 800e572:	f7ff fa19 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e57a:	4620      	mov	r0, r4
 800e57c:	f7ff fa14 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e580:	2100      	movs	r1, #0
 800e582:	4620      	mov	r0, r4
 800e584:	f7ff fa10 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e588:	2102      	movs	r1, #2
 800e58a:	4620      	mov	r0, r4
 800e58c:	f7ff fa0c 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e590:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800e594:	4620      	mov	r0, r4
 800e596:	f7ff fa07 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e59a:	b2e9      	uxtb	r1, r5
 800e59c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f7ff fa01 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5a6:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800e5aa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f7ff f9fa 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5b4:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800e5b8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f7ff f9f3 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5c2:	0e29      	lsrs	r1, r5, #24
 800e5c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f7ff f9ed 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f7ff f9e9 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5d6:	213a      	movs	r1, #58	; 0x3a
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f7ff f9e5 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5de:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f7ff f9e0 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5e8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f7ff f9db 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f7ff f9d7 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e5fa:	213a      	movs	r1, #58	; 0x3a
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f7ff f9d3 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e602:	f240 1101 	movw	r1, #257	; 0x101
 800e606:	4620      	mov	r0, r4
 800e608:	f7ff f9ce 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e60c:	2302      	movs	r3, #2
 800e60e:	2200      	movs	r2, #0
 800e610:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e614:	4620      	mov	r0, r4
 800e616:	f7ff f992 	bl	800d93e <dwt_write16bitoffsetreg>
 800e61a:	2300      	movs	r3, #0
 800e61c:	461a      	mov	r2, r3
 800e61e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e622:	4620      	mov	r0, r4
 800e624:	f7ff f98b 	bl	800d93e <dwt_write16bitoffsetreg>
 800e628:	2002      	movs	r0, #2
 800e62a:	f7f2 f801 	bl	8000630 <deca_sleep>
 800e62e:	213a      	movs	r1, #58	; 0x3a
 800e630:	4620      	mov	r0, r4
 800e632:	f7ff f9b9 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e636:	f44f 7181 	mov.w	r1, #258	; 0x102
 800e63a:	4620      	mov	r0, r4
 800e63c:	f7ff f9b4 	bl	800d9a8 <__dwt_otp_write_wdata_id_reg>
 800e640:	2302      	movs	r3, #2
 800e642:	2200      	movs	r2, #0
 800e644:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e648:	4620      	mov	r0, r4
 800e64a:	f7ff f978 	bl	800d93e <dwt_write16bitoffsetreg>
 800e64e:	2300      	movs	r3, #0
 800e650:	461a      	mov	r2, r3
 800e652:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e656:	4620      	mov	r0, r4
 800e658:	f7ff f971 	bl	800d93e <dwt_write16bitoffsetreg>
 800e65c:	2300      	movs	r3, #0
 800e65e:	461a      	mov	r2, r3
 800e660:	4641      	mov	r1, r8
 800e662:	4620      	mov	r0, r4
 800e664:	f7ff f96b 	bl	800d93e <dwt_write16bitoffsetreg>
 800e668:	464b      	mov	r3, r9
 800e66a:	2200      	movs	r2, #0
 800e66c:	4631      	mov	r1, r6
 800e66e:	4620      	mov	r0, r4
 800e670:	f7ff f9d0 	bl	800da14 <dwt_write32bitoffsetreg>
 800e674:	b003      	add	sp, #12
 800e676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e67a:	bf00      	nop
 800e67c:	00070044 	.word	0x00070044
 800e680:	000b0008 	.word	0x000b0008

0800e684 <ull_setgpiomode>:
 800e684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e686:	b083      	sub	sp, #12
 800e688:	2400      	movs	r4, #0
 800e68a:	4623      	mov	r3, r4
 800e68c:	2601      	movs	r6, #1
 800e68e:	2707      	movs	r7, #7
 800e690:	e002      	b.n	800e698 <ull_setgpiomode+0x14>
 800e692:	3401      	adds	r4, #1
 800e694:	2c09      	cmp	r4, #9
 800e696:	d009      	beq.n	800e6ac <ull_setgpiomode+0x28>
 800e698:	fa06 f504 	lsl.w	r5, r6, r4
 800e69c:	420d      	tst	r5, r1
 800e69e:	d0f8      	beq.n	800e692 <ull_setgpiomode+0xe>
 800e6a0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e6a4:	fa07 f505 	lsl.w	r5, r7, r5
 800e6a8:	432b      	orrs	r3, r5
 800e6aa:	e7f2      	b.n	800e692 <ull_setgpiomode+0xe>
 800e6ac:	401a      	ands	r2, r3
 800e6ae:	9200      	str	r2, [sp, #0]
 800e6b0:	43db      	mvns	r3, r3
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e6b8:	f7ff feb2 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e6bc:	b003      	add	sp, #12
 800e6be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e6c0 <ull_writetxfctrl>:
 800e6c0:	b500      	push	{lr}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	2a7f      	cmp	r2, #127	; 0x7f
 800e6c6:	bf88      	it	hi
 800e6c8:	3280      	addhi	r2, #128	; 0x80
 800e6ca:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800e6ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6d2:	9100      	str	r1, [sp, #0]
 800e6d4:	4b03      	ldr	r3, [pc, #12]	; (800e6e4 <ull_writetxfctrl+0x24>)
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	2120      	movs	r1, #32
 800e6da:	f7ff fea1 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e6de:	b003      	add	sp, #12
 800e6e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6e4:	fc00f400 	.word	0xfc00f400

0800e6e8 <prs_sys_status_and_or>:
 800e6e8:	b500      	push	{lr}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	9200      	str	r2, [sp, #0]
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	2144      	movs	r1, #68	; 0x44
 800e6f4:	f7ff fe94 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	b003      	add	sp, #12
 800e6fc:	f85d fb04 	ldr.w	pc, [sp], #4

0800e700 <dwt_modify8bitoffsetreg>:
 800e700:	b500      	push	{lr}
 800e702:	b085      	sub	sp, #20
 800e704:	f88d 300c 	strb.w	r3, [sp, #12]
 800e708:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e70c:	f88d 300d 	strb.w	r3, [sp, #13]
 800e710:	f248 0301 	movw	r3, #32769	; 0x8001
 800e714:	9301      	str	r3, [sp, #4]
 800e716:	ab03      	add	r3, sp, #12
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	2302      	movs	r3, #2
 800e71c:	b292      	uxth	r2, r2
 800e71e:	f7fe fc12 	bl	800cf46 <dwt_xfer3xxx>
 800e722:	b005      	add	sp, #20
 800e724:	f85d fb04 	ldr.w	pc, [sp], #4

0800e728 <ull_enablespicrccheck>:
 800e728:	b570      	push	{r4, r5, r6, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	4604      	mov	r4, r0
 800e72e:	460d      	mov	r5, r1
 800e730:	b159      	cbz	r1, 800e74a <ull_enablespicrccheck+0x22>
 800e732:	4616      	mov	r6, r2
 800e734:	2340      	movs	r3, #64	; 0x40
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	23ff      	movs	r3, #255	; 0xff
 800e73a:	2200      	movs	r2, #0
 800e73c:	2110      	movs	r1, #16
 800e73e:	f7ff ffdf 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e742:	2d02      	cmp	r5, #2
 800e744:	d107      	bne.n	800e756 <ull_enablespicrccheck+0x2e>
 800e746:	60e6      	str	r6, [r4, #12]
 800e748:	e005      	b.n	800e756 <ull_enablespicrccheck+0x2e>
 800e74a:	2200      	movs	r2, #0
 800e74c:	9200      	str	r2, [sp, #0]
 800e74e:	23bf      	movs	r3, #191	; 0xbf
 800e750:	2110      	movs	r1, #16
 800e752:	f7ff ffd5 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e756:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e758:	751d      	strb	r5, [r3, #20]
 800e75a:	b002      	add	sp, #8
 800e75c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e760 <ull_configciadiag>:
 800e760:	b530      	push	{r4, r5, lr}
 800e762:	b083      	sub	sp, #12
 800e764:	4604      	mov	r4, r0
 800e766:	460d      	mov	r5, r1
 800e768:	f011 0f01 	tst.w	r1, #1
 800e76c:	d015      	beq.n	800e79a <ull_configciadiag+0x3a>
 800e76e:	2300      	movs	r3, #0
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	23ef      	movs	r3, #239	; 0xef
 800e774:	2202      	movs	r2, #2
 800e776:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e77a:	f7ff ffc1 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e77e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e780:	759d      	strb	r5, [r3, #22]
 800e782:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e784:	7d9b      	ldrb	r3, [r3, #22]
 800e786:	085b      	lsrs	r3, r3, #1
 800e788:	d010      	beq.n	800e7ac <ull_configciadiag+0x4c>
 800e78a:	086b      	lsrs	r3, r5, #1
 800e78c:	2200      	movs	r2, #0
 800e78e:	490e      	ldr	r1, [pc, #56]	; (800e7c8 <ull_configciadiag+0x68>)
 800e790:	4620      	mov	r0, r4
 800e792:	f7ff fb23 	bl	800dddc <dwt_write8bitoffsetreg>
 800e796:	b003      	add	sp, #12
 800e798:	bd30      	pop	{r4, r5, pc}
 800e79a:	2310      	movs	r3, #16
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	23ff      	movs	r3, #255	; 0xff
 800e7a0:	2202      	movs	r2, #2
 800e7a2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e7a6:	f7ff ffab 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e7aa:	e7e8      	b.n	800e77e <ull_configciadiag+0x1e>
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	23ff      	movs	r3, #255	; 0xff
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	4904      	ldr	r1, [pc, #16]	; (800e7c8 <ull_configciadiag+0x68>)
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f7ff ffa2 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e7bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e7be:	7d93      	ldrb	r3, [r2, #22]
 800e7c0:	f043 0302 	orr.w	r3, r3, #2
 800e7c4:	7593      	strb	r3, [r2, #22]
 800e7c6:	e7e6      	b.n	800e796 <ull_configciadiag+0x36>
 800e7c8:	00010020 	.word	0x00010020

0800e7cc <ull_configurestsloadiv>:
 800e7cc:	b500      	push	{lr}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	23ff      	movs	r3, #255	; 0xff
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	4902      	ldr	r1, [pc, #8]	; (800e7e4 <ull_configurestsloadiv+0x18>)
 800e7da:	f7ff ff91 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e7de:	b003      	add	sp, #12
 800e7e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7e4:	00020004 	.word	0x00020004

0800e7e8 <ull_adcoffsetscalibration>:
 800e7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ec:	b08b      	sub	sp, #44	; 0x2c
 800e7ee:	4607      	mov	r7, r0
 800e7f0:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800ea14 <ull_adcoffsetscalibration+0x22c>
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4641      	mov	r1, r8
 800e7f8:	f7fe fc2d 	bl	800d056 <dwt_read32bitoffsetreg>
 800e7fc:	9004      	str	r0, [sp, #16]
 800e7fe:	4c7d      	ldr	r4, [pc, #500]	; (800e9f4 <ull_adcoffsetscalibration+0x20c>)
 800e800:	2200      	movs	r2, #0
 800e802:	4621      	mov	r1, r4
 800e804:	4638      	mov	r0, r7
 800e806:	f7fe fc26 	bl	800d056 <dwt_read32bitoffsetreg>
 800e80a:	9005      	str	r0, [sp, #20]
 800e80c:	4d7a      	ldr	r5, [pc, #488]	; (800e9f8 <ull_adcoffsetscalibration+0x210>)
 800e80e:	2200      	movs	r2, #0
 800e810:	4629      	mov	r1, r5
 800e812:	4638      	mov	r0, r7
 800e814:	f7fe fc74 	bl	800d100 <dwt_read8bitoffsetreg>
 800e818:	9006      	str	r0, [sp, #24]
 800e81a:	4e78      	ldr	r6, [pc, #480]	; (800e9fc <ull_adcoffsetscalibration+0x214>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	4631      	mov	r1, r6
 800e820:	4638      	mov	r0, r7
 800e822:	f7fe fc18 	bl	800d056 <dwt_read32bitoffsetreg>
 800e826:	4682      	mov	sl, r0
 800e828:	9007      	str	r0, [sp, #28]
 800e82a:	2200      	movs	r2, #0
 800e82c:	4974      	ldr	r1, [pc, #464]	; (800ea00 <ull_adcoffsetscalibration+0x218>)
 800e82e:	4638      	mov	r0, r7
 800e830:	f7fe fc11 	bl	800d056 <dwt_read32bitoffsetreg>
 800e834:	4681      	mov	r9, r0
 800e836:	4b73      	ldr	r3, [pc, #460]	; (800ea04 <ull_adcoffsetscalibration+0x21c>)
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800e83e:	2200      	movs	r2, #0
 800e840:	4641      	mov	r1, r8
 800e842:	4638      	mov	r0, r7
 800e844:	f7ff fdec 	bl	800e420 <dwt_modify32bitoffsetreg>
 800e848:	464b      	mov	r3, r9
 800e84a:	2200      	movs	r2, #0
 800e84c:	4631      	mov	r1, r6
 800e84e:	4638      	mov	r0, r7
 800e850:	f7ff f8e0 	bl	800da14 <dwt_write32bitoffsetreg>
 800e854:	4653      	mov	r3, sl
 800e856:	00db      	lsls	r3, r3, #3
 800e858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e860:	9300      	str	r3, [sp, #0]
 800e862:	2386      	movs	r3, #134	; 0x86
 800e864:	2200      	movs	r2, #0
 800e866:	4621      	mov	r1, r4
 800e868:	4638      	mov	r0, r7
 800e86a:	f7ff ff49 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e86e:	2300      	movs	r3, #0
 800e870:	2203      	movs	r2, #3
 800e872:	4621      	mov	r1, r4
 800e874:	4638      	mov	r0, r7
 800e876:	f7ff fab1 	bl	800dddc <dwt_write8bitoffsetreg>
 800e87a:	f04f 0900 	mov.w	r9, #0
 800e87e:	f8cd 9000 	str.w	r9, [sp]
 800e882:	23fe      	movs	r3, #254	; 0xfe
 800e884:	464a      	mov	r2, r9
 800e886:	4629      	mov	r1, r5
 800e888:	4638      	mov	r0, r7
 800e88a:	f7ff ff39 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e88e:	464a      	mov	r2, r9
 800e890:	213c      	movs	r1, #60	; 0x3c
 800e892:	4638      	mov	r0, r7
 800e894:	f7fe fbdf 	bl	800d056 <dwt_read32bitoffsetreg>
 800e898:	9008      	str	r0, [sp, #32]
 800e89a:	464a      	mov	r2, r9
 800e89c:	2140      	movs	r1, #64	; 0x40
 800e89e:	4638      	mov	r0, r7
 800e8a0:	f7fe fbd9 	bl	800d056 <dwt_read32bitoffsetreg>
 800e8a4:	9009      	str	r0, [sp, #36]	; 0x24
 800e8a6:	464b      	mov	r3, r9
 800e8a8:	464a      	mov	r2, r9
 800e8aa:	213c      	movs	r1, #60	; 0x3c
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	f7ff f8b1 	bl	800da14 <dwt_write32bitoffsetreg>
 800e8b2:	464b      	mov	r3, r9
 800e8b4:	464a      	mov	r2, r9
 800e8b6:	2140      	movs	r1, #64	; 0x40
 800e8b8:	4638      	mov	r0, r7
 800e8ba:	f7ff f8ab 	bl	800da14 <dwt_write32bitoffsetreg>
 800e8be:	f7f5 fe85 	bl	80045cc <dwt_forcetrxoff>
 800e8c2:	f04f 0b02 	mov.w	fp, #2
 800e8c6:	464c      	mov	r4, r9
 800e8c8:	464d      	mov	r5, r9
 800e8ca:	464e      	mov	r6, r9
 800e8cc:	46c8      	mov	r8, r9
 800e8ce:	f8cd 900c 	str.w	r9, [sp, #12]
 800e8d2:	46ca      	mov	sl, r9
 800e8d4:	e00e      	b.n	800e8f4 <ull_adcoffsetscalibration+0x10c>
 800e8d6:	f7f5 fe79 	bl	80045cc <dwt_forcetrxoff>
 800e8da:	9b03      	ldr	r3, [sp, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f000 8082 	beq.w	800e9e6 <ull_adcoffsetscalibration+0x1fe>
 800e8e2:	f1bb 0f01 	cmp.w	fp, #1
 800e8e6:	f000 8081 	beq.w	800e9ec <ull_adcoffsetscalibration+0x204>
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	9303      	str	r3, [sp, #12]
 800e8ee:	f1bb 0b01 	subs.w	fp, fp, #1
 800e8f2:	d043      	beq.n	800e97c <ull_adcoffsetscalibration+0x194>
 800e8f4:	4650      	mov	r0, sl
 800e8f6:	f7f5 fe77 	bl	80045e8 <dwt_rxenable>
 800e8fa:	2014      	movs	r0, #20
 800e8fc:	f7f1 fea3 	bl	8000646 <deca_usleep>
 800e900:	f04f 0904 	mov.w	r9, #4
 800e904:	f8cd a000 	str.w	sl, [sp]
 800e908:	23fe      	movs	r3, #254	; 0xfe
 800e90a:	4652      	mov	r2, sl
 800e90c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800e910:	4638      	mov	r0, r7
 800e912:	f7ff fef5 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e916:	2301      	movs	r3, #1
 800e918:	9300      	str	r3, [sp, #0]
 800e91a:	23fe      	movs	r3, #254	; 0xfe
 800e91c:	4652      	mov	r2, sl
 800e91e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800e922:	4638      	mov	r0, r7
 800e924:	f7ff feec 	bl	800e700 <dwt_modify8bitoffsetreg>
 800e928:	4652      	mov	r2, sl
 800e92a:	4937      	ldr	r1, [pc, #220]	; (800ea08 <ull_adcoffsetscalibration+0x220>)
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7fe fb92 	bl	800d056 <dwt_read32bitoffsetreg>
 800e932:	fa58 f880 	uxtab	r8, r8, r0
 800e936:	fa1f f888 	uxth.w	r8, r8
 800e93a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e93e:	441e      	add	r6, r3
 800e940:	b2b6      	uxth	r6, r6
 800e942:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e946:	441d      	add	r5, r3
 800e948:	b2ad      	uxth	r5, r5
 800e94a:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800e94e:	b2a4      	uxth	r4, r4
 800e950:	f1b9 0901 	subs.w	r9, r9, #1
 800e954:	d1d6      	bne.n	800e904 <ull_adcoffsetscalibration+0x11c>
 800e956:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800e95a:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800e95e:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800e962:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800e966:	4652      	mov	r2, sl
 800e968:	2144      	movs	r1, #68	; 0x44
 800e96a:	4638      	mov	r0, r7
 800e96c:	f7fe fb73 	bl	800d056 <dwt_read32bitoffsetreg>
 800e970:	4b26      	ldr	r3, [pc, #152]	; (800ea0c <ull_adcoffsetscalibration+0x224>)
 800e972:	4218      	tst	r0, r3
 800e974:	d0af      	beq.n	800e8d6 <ull_adcoffsetscalibration+0xee>
 800e976:	f7f5 fe29 	bl	80045cc <dwt_forcetrxoff>
 800e97a:	e7b2      	b.n	800e8e2 <ull_adcoffsetscalibration+0xfa>
 800e97c:	f04f 0900 	mov.w	r9, #0
 800e980:	9b08      	ldr	r3, [sp, #32]
 800e982:	2200      	movs	r2, #0
 800e984:	213c      	movs	r1, #60	; 0x3c
 800e986:	4638      	mov	r0, r7
 800e988:	f7ff f844 	bl	800da14 <dwt_write32bitoffsetreg>
 800e98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e98e:	2200      	movs	r2, #0
 800e990:	2140      	movs	r1, #64	; 0x40
 800e992:	4638      	mov	r0, r7
 800e994:	f7ff f83e 	bl	800da14 <dwt_write32bitoffsetreg>
 800e998:	042b      	lsls	r3, r5, #16
 800e99a:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800e99e:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800e9a2:	4443      	add	r3, r8
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	491a      	ldr	r1, [pc, #104]	; (800ea10 <ull_adcoffsetscalibration+0x228>)
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f7ff f833 	bl	800da14 <dwt_write32bitoffsetreg>
 800e9ae:	9b04      	ldr	r3, [sp, #16]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	4918      	ldr	r1, [pc, #96]	; (800ea14 <ull_adcoffsetscalibration+0x22c>)
 800e9b4:	4638      	mov	r0, r7
 800e9b6:	f7ff f82d 	bl	800da14 <dwt_write32bitoffsetreg>
 800e9ba:	9b05      	ldr	r3, [sp, #20]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	490d      	ldr	r1, [pc, #52]	; (800e9f4 <ull_adcoffsetscalibration+0x20c>)
 800e9c0:	4638      	mov	r0, r7
 800e9c2:	f7ff f827 	bl	800da14 <dwt_write32bitoffsetreg>
 800e9c6:	9b06      	ldr	r3, [sp, #24]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	490b      	ldr	r1, [pc, #44]	; (800e9f8 <ull_adcoffsetscalibration+0x210>)
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7ff fa05 	bl	800dddc <dwt_write8bitoffsetreg>
 800e9d2:	9b07      	ldr	r3, [sp, #28]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	4909      	ldr	r1, [pc, #36]	; (800e9fc <ull_adcoffsetscalibration+0x214>)
 800e9d8:	4638      	mov	r0, r7
 800e9da:	f7ff f81b 	bl	800da14 <dwt_write32bitoffsetreg>
 800e9de:	4648      	mov	r0, r9
 800e9e0:	b00b      	add	sp, #44	; 0x2c
 800e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e6:	f04f 0900 	mov.w	r9, #0
 800e9ea:	e7c9      	b.n	800e980 <ull_adcoffsetscalibration+0x198>
 800e9ec:	f06f 0905 	mvn.w	r9, #5
 800e9f0:	e7c6      	b.n	800e980 <ull_adcoffsetscalibration+0x198>
 800e9f2:	bf00      	nop
 800e9f4:	00030014 	.word	0x00030014
 800e9f8:	00030018 	.word	0x00030018
 800e9fc:	0003002c 	.word	0x0003002c
 800ea00:	00030044 	.word	0x00030044
 800ea04:	38010000 	.word	0x38010000
 800ea08:	0003004c 	.word	0x0003004c
 800ea0c:	3427ff00 	.word	0x3427ff00
 800ea10:	00030010 	.word	0x00030010
 800ea14:	00070014 	.word	0x00070014

0800ea18 <ull_restoreconfig>:
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ea1e:	7d9b      	ldrb	r3, [r3, #22]
 800ea20:	085b      	lsrs	r3, r3, #1
 800ea22:	d01a      	beq.n	800ea5a <ull_restoreconfig+0x42>
 800ea24:	2200      	movs	r2, #0
 800ea26:	4912      	ldr	r1, [pc, #72]	; (800ea70 <ull_restoreconfig+0x58>)
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f7fe fb2a 	bl	800d082 <dwt_read16bitoffsetreg>
 800ea2e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800ea32:	3b09      	subs	r3, #9
 800ea34:	2b0f      	cmp	r3, #15
 800ea36:	d80c      	bhi.n	800ea52 <ull_restoreconfig+0x3a>
 800ea38:	f000 0001 	and.w	r0, r0, #1
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	bf0c      	ite	eq
 800ea40:	2105      	moveq	r1, #5
 800ea42:	2109      	movne	r1, #9
 800ea44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ea46:	7a1b      	ldrb	r3, [r3, #8]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d002      	beq.n	800ea52 <ull_restoreconfig+0x3a>
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f7ff f8ad 	bl	800dbac <ull_configmrxlut>
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7ff fec8 	bl	800e7e8 <ull_adcoffsetscalibration>
 800ea58:	bd10      	pop	{r4, pc}
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	4905      	ldr	r1, [pc, #20]	; (800ea74 <ull_restoreconfig+0x5c>)
 800ea60:	f7ff f9bc 	bl	800dddc <dwt_write8bitoffsetreg>
 800ea64:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ea66:	7d93      	ldrb	r3, [r2, #22]
 800ea68:	f043 0302 	orr.w	r3, r3, #2
 800ea6c:	7593      	strb	r3, [r2, #22]
 800ea6e:	e7d9      	b.n	800ea24 <ull_restoreconfig+0xc>
 800ea70:	00010008 	.word	0x00010008
 800ea74:	00010020 	.word	0x00010020

0800ea78 <ull_calcbandwidthadj>:
 800ea78:	b570      	push	{r4, r5, r6, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	460d      	mov	r5, r1
 800ea80:	2101      	movs	r1, #1
 800ea82:	f7fe ff7b 	bl	800d97c <ull_force_clocks>
 800ea86:	2100      	movs	r1, #0
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f7ff fcfd 	bl	800e488 <ull_enable_rf_tx>
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f7ff fd2e 	bl	800e4f0 <ull_enable_rftx_blocks>
 800ea94:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800ea98:	2200      	movs	r2, #0
 800ea9a:	4915      	ldr	r1, [pc, #84]	; (800eaf0 <ull_calcbandwidthadj+0x78>)
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f7fe ff4e 	bl	800d93e <dwt_write16bitoffsetreg>
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	23ff      	movs	r3, #255	; 0xff
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	4912      	ldr	r1, [pc, #72]	; (800eaf4 <ull_calcbandwidthadj+0x7c>)
 800eaac:	4620      	mov	r0, r4
 800eaae:	f7ff fe27 	bl	800e700 <dwt_modify8bitoffsetreg>
 800eab2:	4e10      	ldr	r6, [pc, #64]	; (800eaf4 <ull_calcbandwidthadj+0x7c>)
 800eab4:	2500      	movs	r5, #0
 800eab6:	462a      	mov	r2, r5
 800eab8:	4631      	mov	r1, r6
 800eaba:	4620      	mov	r0, r4
 800eabc:	f7fe fb20 	bl	800d100 <dwt_read8bitoffsetreg>
 800eac0:	f010 0f01 	tst.w	r0, #1
 800eac4:	d1f7      	bne.n	800eab6 <ull_calcbandwidthadj+0x3e>
 800eac6:	4620      	mov	r0, r4
 800eac8:	f7ff f906 	bl	800dcd8 <ull_disable_rftx_blocks>
 800eacc:	2100      	movs	r1, #0
 800eace:	4620      	mov	r0, r4
 800ead0:	f7ff f90c 	bl	800dcec <ull_disable_rf_tx>
 800ead4:	2105      	movs	r1, #5
 800ead6:	4620      	mov	r0, r4
 800ead8:	f7fe ff50 	bl	800d97c <ull_force_clocks>
 800eadc:	2200      	movs	r2, #0
 800eade:	4906      	ldr	r1, [pc, #24]	; (800eaf8 <ull_calcbandwidthadj+0x80>)
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7fe fb0d 	bl	800d100 <dwt_read8bitoffsetreg>
 800eae6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800eaea:	b002      	add	sp, #8
 800eaec:	bd70      	pop	{r4, r5, r6, pc}
 800eaee:	bf00      	nop
 800eaf0:	0008001c 	.word	0x0008001c
 800eaf4:	00080010 	.word	0x00080010
 800eaf8:	0007001c 	.word	0x0007001c

0800eafc <ull_configuretxrf>:
 800eafc:	b538      	push	{r3, r4, r5, lr}
 800eafe:	4605      	mov	r5, r0
 800eb00:	460c      	mov	r4, r1
 800eb02:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800eb06:	b149      	cbz	r1, 800eb1c <ull_configuretxrf+0x20>
 800eb08:	f7ff ffb6 	bl	800ea78 <ull_calcbandwidthadj>
 800eb0c:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800eb10:	2200      	movs	r2, #0
 800eb12:	4905      	ldr	r1, [pc, #20]	; (800eb28 <ull_configuretxrf+0x2c>)
 800eb14:	4628      	mov	r0, r5
 800eb16:	f7fe ff7d 	bl	800da14 <dwt_write32bitoffsetreg>
 800eb1a:	bd38      	pop	{r3, r4, r5, pc}
 800eb1c:	7823      	ldrb	r3, [r4, #0]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4902      	ldr	r1, [pc, #8]	; (800eb2c <ull_configuretxrf+0x30>)
 800eb22:	f7ff f95b 	bl	800dddc <dwt_write8bitoffsetreg>
 800eb26:	e7f1      	b.n	800eb0c <ull_configuretxrf+0x10>
 800eb28:	00010004 	.word	0x00010004
 800eb2c:	0007001c 	.word	0x0007001c

0800eb30 <ull_repeated_frames>:
 800eb30:	b530      	push	{r4, r5, lr}
 800eb32:	b083      	sub	sp, #12
 800eb34:	4604      	mov	r4, r0
 800eb36:	460d      	mov	r5, r1
 800eb38:	2310      	movs	r3, #16
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	23ff      	movs	r3, #255	; 0xff
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4906      	ldr	r1, [pc, #24]	; (800eb5c <ull_repeated_frames+0x2c>)
 800eb42:	f7ff fddd 	bl	800e700 <dwt_modify8bitoffsetreg>
 800eb46:	462b      	mov	r3, r5
 800eb48:	2d02      	cmp	r5, #2
 800eb4a:	bf38      	it	cc
 800eb4c:	2302      	movcc	r3, #2
 800eb4e:	2200      	movs	r2, #0
 800eb50:	2128      	movs	r1, #40	; 0x28
 800eb52:	4620      	mov	r0, r4
 800eb54:	f7fe ff5e 	bl	800da14 <dwt_write32bitoffsetreg>
 800eb58:	b003      	add	sp, #12
 800eb5a:	bd30      	pop	{r4, r5, pc}
 800eb5c:	000f0028 	.word	0x000f0028

0800eb60 <ull_setdwstate>:
 800eb60:	b530      	push	{r4, r5, lr}
 800eb62:	b083      	sub	sp, #12
 800eb64:	4604      	mov	r4, r0
 800eb66:	2901      	cmp	r1, #1
 800eb68:	d01d      	beq.n	800eba6 <ull_setdwstate+0x46>
 800eb6a:	2902      	cmp	r1, #2
 800eb6c:	d030      	beq.n	800ebd0 <ull_setdwstate+0x70>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	23ff      	movs	r3, #255	; 0xff
 800eb74:	2200      	movs	r2, #0
 800eb76:	4926      	ldr	r1, [pc, #152]	; (800ec10 <ull_setdwstate+0xb0>)
 800eb78:	f7ff fdc2 	bl	800e700 <dwt_modify8bitoffsetreg>
 800eb7c:	4d25      	ldr	r5, [pc, #148]	; (800ec14 <ull_setdwstate+0xb4>)
 800eb7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eb82:	9300      	str	r3, [sp, #0]
 800eb84:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800eb88:	2200      	movs	r2, #0
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f7ff fc47 	bl	800e420 <dwt_modify32bitoffsetreg>
 800eb92:	2300      	movs	r3, #0
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	237f      	movs	r3, #127	; 0x7f
 800eb98:	2202      	movs	r2, #2
 800eb9a:	4629      	mov	r1, r5
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f7ff fdaf 	bl	800e700 <dwt_modify8bitoffsetreg>
 800eba2:	b003      	add	sp, #12
 800eba4:	bd30      	pop	{r4, r5, pc}
 800eba6:	2105      	movs	r1, #5
 800eba8:	f7fe fee8 	bl	800d97c <ull_force_clocks>
 800ebac:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	4917      	ldr	r1, [pc, #92]	; (800ec18 <ull_setdwstate+0xb8>)
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f7ff fc30 	bl	800e420 <dwt_modify32bitoffsetreg>
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	9200      	str	r2, [sp, #0]
 800ebc4:	23ff      	movs	r3, #255	; 0xff
 800ebc6:	4913      	ldr	r1, [pc, #76]	; (800ec14 <ull_setdwstate+0xb4>)
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f7ff fd99 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ebce:	e7e8      	b.n	800eba2 <ull_setdwstate+0x42>
 800ebd0:	2303      	movs	r3, #3
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	23ff      	movs	r3, #255	; 0xff
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	490d      	ldr	r1, [pc, #52]	; (800ec10 <ull_setdwstate+0xb0>)
 800ebda:	f7ff fd91 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ebde:	4d0d      	ldr	r5, [pc, #52]	; (800ec14 <ull_setdwstate+0xb4>)
 800ebe0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ebea:	2200      	movs	r2, #0
 800ebec:	4629      	mov	r1, r5
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7ff fc16 	bl	800e420 <dwt_modify32bitoffsetreg>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	237f      	movs	r3, #127	; 0x7f
 800ebfa:	2202      	movs	r2, #2
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f7ff fd7e 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ec04:	2105      	movs	r1, #5
 800ec06:	4620      	mov	r0, r4
 800ec08:	f7fe feb8 	bl	800d97c <ull_force_clocks>
 800ec0c:	e7c9      	b.n	800eba2 <ull_setdwstate+0x42>
 800ec0e:	bf00      	nop
 800ec10:	00110004 	.word	0x00110004
 800ec14:	00110008 	.word	0x00110008
 800ec18:	00090008 	.word	0x00090008

0800ec1c <ull_configureframefilter>:
 800ec1c:	b530      	push	{r4, r5, lr}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	4605      	mov	r5, r0
 800ec22:	2902      	cmp	r1, #2
 800ec24:	d00e      	beq.n	800ec44 <ull_configureframefilter+0x28>
 800ec26:	2400      	movs	r4, #0
 800ec28:	9400      	str	r4, [sp, #0]
 800ec2a:	23fe      	movs	r3, #254	; 0xfe
 800ec2c:	4622      	mov	r2, r4
 800ec2e:	2110      	movs	r1, #16
 800ec30:	f7ff fd66 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ec34:	4623      	mov	r3, r4
 800ec36:	4622      	mov	r2, r4
 800ec38:	2114      	movs	r1, #20
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	f7fe fe7f 	bl	800d93e <dwt_write16bitoffsetreg>
 800ec40:	b003      	add	sp, #12
 800ec42:	bd30      	pop	{r4, r5, pc}
 800ec44:	4614      	mov	r4, r2
 800ec46:	2301      	movs	r3, #1
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	23ff      	movs	r3, #255	; 0xff
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	2110      	movs	r1, #16
 800ec50:	f7ff fd56 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ec54:	4623      	mov	r3, r4
 800ec56:	2200      	movs	r2, #0
 800ec58:	2114      	movs	r1, #20
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f7fe fe6f 	bl	800d93e <dwt_write16bitoffsetreg>
 800ec60:	e7ee      	b.n	800ec40 <ull_configureframefilter+0x24>
	...

0800ec64 <ull_run_pgfcal>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	b082      	sub	sp, #8
 800ec6a:	4605      	mov	r5, r0
 800ec6c:	4c2a      	ldr	r4, [pc, #168]	; (800ed18 <ull_run_pgfcal+0xb4>)
 800ec6e:	2301      	movs	r3, #1
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	23ff      	movs	r3, #255	; 0xff
 800ec74:	2200      	movs	r2, #0
 800ec76:	4621      	mov	r1, r4
 800ec78:	f7ff fd42 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ec7c:	2310      	movs	r3, #16
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	23ff      	movs	r3, #255	; 0xff
 800ec82:	2200      	movs	r2, #0
 800ec84:	4621      	mov	r1, r4
 800ec86:	4628      	mov	r0, r5
 800ec88:	f7ff fd3a 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ec8c:	2403      	movs	r4, #3
 800ec8e:	f04f 0814 	mov.w	r8, #20
 800ec92:	4f22      	ldr	r7, [pc, #136]	; (800ed1c <ull_run_pgfcal+0xb8>)
 800ec94:	2600      	movs	r6, #0
 800ec96:	4640      	mov	r0, r8
 800ec98:	f7f1 fcd5 	bl	8000646 <deca_usleep>
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	4639      	mov	r1, r7
 800eca0:	4628      	mov	r0, r5
 800eca2:	f7fe fa2d 	bl	800d100 <dwt_read8bitoffsetreg>
 800eca6:	2801      	cmp	r0, #1
 800eca8:	d034      	beq.n	800ed14 <ull_run_pgfcal+0xb0>
 800ecaa:	1e63      	subs	r3, r4, #1
 800ecac:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800ecb0:	d1f1      	bne.n	800ec96 <ull_run_pgfcal+0x32>
 800ecb2:	f06f 0402 	mvn.w	r4, #2
 800ecb6:	4e18      	ldr	r6, [pc, #96]	; (800ed18 <ull_run_pgfcal+0xb4>)
 800ecb8:	2300      	movs	r3, #0
 800ecba:	461a      	mov	r2, r3
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	f7ff f88c 	bl	800dddc <dwt_write8bitoffsetreg>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	4914      	ldr	r1, [pc, #80]	; (800ed1c <ull_run_pgfcal+0xb8>)
 800ecca:	4628      	mov	r0, r5
 800eccc:	f7ff f886 	bl	800dddc <dwt_write8bitoffsetreg>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	23ff      	movs	r3, #255	; 0xff
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	4631      	mov	r1, r6
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f7ff fd10 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ece0:	2200      	movs	r2, #0
 800ece2:	490f      	ldr	r1, [pc, #60]	; (800ed20 <ull_run_pgfcal+0xbc>)
 800ece4:	4628      	mov	r0, r5
 800ece6:	f7fe f9b6 	bl	800d056 <dwt_read32bitoffsetreg>
 800ecea:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ecee:	4298      	cmp	r0, r3
 800ecf0:	bf08      	it	eq
 800ecf2:	f06f 0403 	mvneq.w	r4, #3
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	490a      	ldr	r1, [pc, #40]	; (800ed24 <ull_run_pgfcal+0xc0>)
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f7fe f9ab 	bl	800d056 <dwt_read32bitoffsetreg>
 800ed00:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ed04:	4298      	cmp	r0, r3
 800ed06:	bf14      	ite	ne
 800ed08:	4620      	movne	r0, r4
 800ed0a:	f06f 0004 	mvneq.w	r0, #4
 800ed0e:	b002      	add	sp, #8
 800ed10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed14:	2400      	movs	r4, #0
 800ed16:	e7ce      	b.n	800ecb6 <ull_run_pgfcal+0x52>
 800ed18:	0004000c 	.word	0x0004000c
 800ed1c:	00040020 	.word	0x00040020
 800ed20:	00040014 	.word	0x00040014
 800ed24:	0004001c 	.word	0x0004001c

0800ed28 <ull_setinterrupt>:
 800ed28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed2c:	b083      	sub	sp, #12
 800ed2e:	4605      	mov	r5, r0
 800ed30:	4688      	mov	r8, r1
 800ed32:	4617      	mov	r7, r2
 800ed34:	461c      	mov	r4, r3
 800ed36:	f7f1 fc5d 	bl	80005f4 <decamutexon>
 800ed3a:	4606      	mov	r6, r0
 800ed3c:	2c02      	cmp	r4, #2
 800ed3e:	d019      	beq.n	800ed74 <ull_setinterrupt+0x4c>
 800ed40:	2c04      	cmp	r4, #4
 800ed42:	d017      	beq.n	800ed74 <ull_setinterrupt+0x4c>
 800ed44:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d03f      	beq.n	800edcc <ull_setinterrupt+0xa4>
 800ed4c:	f04f 0900 	mov.w	r9, #0
 800ed50:	f8cd 9000 	str.w	r9, [sp]
 800ed54:	ea6f 0308 	mvn.w	r3, r8
 800ed58:	464a      	mov	r2, r9
 800ed5a:	213c      	movs	r1, #60	; 0x3c
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f7ff fb5f 	bl	800e420 <dwt_modify32bitoffsetreg>
 800ed62:	f8cd 9000 	str.w	r9, [sp]
 800ed66:	43fb      	mvns	r3, r7
 800ed68:	464a      	mov	r2, r9
 800ed6a:	2140      	movs	r1, #64	; 0x40
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	f7ff fb57 	bl	800e420 <dwt_modify32bitoffsetreg>
 800ed72:	e00b      	b.n	800ed8c <ull_setinterrupt+0x64>
 800ed74:	4643      	mov	r3, r8
 800ed76:	2200      	movs	r2, #0
 800ed78:	213c      	movs	r1, #60	; 0x3c
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	f7fe fe4a 	bl	800da14 <dwt_write32bitoffsetreg>
 800ed80:	463b      	mov	r3, r7
 800ed82:	2200      	movs	r2, #0
 800ed84:	2140      	movs	r1, #64	; 0x40
 800ed86:	4628      	mov	r0, r5
 800ed88:	f7fe fe44 	bl	800da14 <dwt_write32bitoffsetreg>
 800ed8c:	3c03      	subs	r4, #3
 800ed8e:	b2e4      	uxtb	r4, r4
 800ed90:	2c01      	cmp	r4, #1
 800ed92:	d92d      	bls.n	800edf0 <ull_setinterrupt+0xc8>
 800ed94:	2200      	movs	r2, #0
 800ed96:	213c      	movs	r1, #60	; 0x3c
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f7fe f95c 	bl	800d056 <dwt_read32bitoffsetreg>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2200      	movs	r2, #0
 800eda2:	2144      	movs	r1, #68	; 0x44
 800eda4:	4628      	mov	r0, r5
 800eda6:	f7fe fe35 	bl	800da14 <dwt_write32bitoffsetreg>
 800edaa:	2200      	movs	r2, #0
 800edac:	2140      	movs	r1, #64	; 0x40
 800edae:	4628      	mov	r0, r5
 800edb0:	f7fe f951 	bl	800d056 <dwt_read32bitoffsetreg>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2200      	movs	r2, #0
 800edb8:	2148      	movs	r1, #72	; 0x48
 800edba:	4628      	mov	r0, r5
 800edbc:	f7fe fe2a 	bl	800da14 <dwt_write32bitoffsetreg>
 800edc0:	4630      	mov	r0, r6
 800edc2:	f7f1 fc28 	bl	8000616 <decamutexoff>
 800edc6:	b003      	add	sp, #12
 800edc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edcc:	f8cd 8000 	str.w	r8, [sp]
 800edd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edd4:	2200      	movs	r2, #0
 800edd6:	213c      	movs	r1, #60	; 0x3c
 800edd8:	4628      	mov	r0, r5
 800edda:	f7ff fb21 	bl	800e420 <dwt_modify32bitoffsetreg>
 800edde:	9700      	str	r7, [sp, #0]
 800ede0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ede4:	2200      	movs	r2, #0
 800ede6:	2140      	movs	r1, #64	; 0x40
 800ede8:	4628      	mov	r0, r5
 800edea:	f7ff fb19 	bl	800e420 <dwt_modify32bitoffsetreg>
 800edee:	e7cd      	b.n	800ed8c <ull_setinterrupt+0x64>
 800edf0:	2110      	movs	r1, #16
 800edf2:	9100      	str	r1, [sp, #0]
 800edf4:	23ff      	movs	r3, #255	; 0xff
 800edf6:	2202      	movs	r2, #2
 800edf8:	4628      	mov	r0, r5
 800edfa:	f7ff fc81 	bl	800e700 <dwt_modify8bitoffsetreg>
 800edfe:	e7c9      	b.n	800ed94 <ull_setinterrupt+0x6c>

0800ee00 <prs_ack_enable>:
 800ee00:	b500      	push	{lr}
 800ee02:	b083      	sub	sp, #12
 800ee04:	2900      	cmp	r1, #0
 800ee06:	bf0b      	itete	eq
 800ee08:	23ff      	moveq	r3, #255	; 0xff
 800ee0a:	23f7      	movne	r3, #247	; 0xf7
 800ee0c:	2200      	moveq	r2, #0
 800ee0e:	2208      	movne	r2, #8
 800ee10:	9200      	str	r2, [sp, #0]
 800ee12:	2201      	movs	r2, #1
 800ee14:	2110      	movs	r1, #16
 800ee16:	f7ff fc73 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ee1a:	b003      	add	sp, #12
 800ee1c:	f85d fb04 	ldr.w	pc, [sp], #4

0800ee20 <dwt_modify16bitoffsetreg>:
 800ee20:	b510      	push	{r4, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800ee28:	f88d 300c 	strb.w	r3, [sp, #12]
 800ee2c:	0a1b      	lsrs	r3, r3, #8
 800ee2e:	f88d 300d 	strb.w	r3, [sp, #13]
 800ee32:	f88d 400e 	strb.w	r4, [sp, #14]
 800ee36:	0a24      	lsrs	r4, r4, #8
 800ee38:	f88d 400f 	strb.w	r4, [sp, #15]
 800ee3c:	f248 0302 	movw	r3, #32770	; 0x8002
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	ab03      	add	r3, sp, #12
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	2304      	movs	r3, #4
 800ee48:	b292      	uxth	r2, r2
 800ee4a:	f7fe f87c 	bl	800cf46 <dwt_xfer3xxx>
 800ee4e:	b004      	add	sp, #16
 800ee50:	bd10      	pop	{r4, pc}
	...

0800ee54 <ull_configurestsmode>:
 800ee54:	b530      	push	{r4, r5, lr}
 800ee56:	b083      	sub	sp, #12
 800ee58:	4605      	mov	r5, r0
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ee5e:	7559      	strb	r1, [r3, #21]
 800ee60:	030b      	lsls	r3, r1, #12
 800ee62:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	2110      	movs	r1, #16
 800ee70:	f7ff ffd6 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800ee74:	f004 0403 	and.w	r4, r4, #3
 800ee78:	2c03      	cmp	r4, #3
 800ee7a:	bf0c      	ite	eq
 800ee7c:	4b04      	ldreq	r3, [pc, #16]	; (800ee90 <ull_configurestsmode+0x3c>)
 800ee7e:	4b05      	ldrne	r3, [pc, #20]	; (800ee94 <ull_configurestsmode+0x40>)
 800ee80:	2200      	movs	r2, #0
 800ee82:	4905      	ldr	r1, [pc, #20]	; (800ee98 <ull_configurestsmode+0x44>)
 800ee84:	4628      	mov	r0, r5
 800ee86:	f7fe fdc5 	bl	800da14 <dwt_write32bitoffsetreg>
 800ee8a:	b003      	add	sp, #12
 800ee8c:	bd30      	pop	{r4, r5, pc}
 800ee8e:	bf00      	nop
 800ee90:	af5f35cc 	.word	0xaf5f35cc
 800ee94:	af5f584c 	.word	0xaf5f584c
 800ee98:	0006000c 	.word	0x0006000c

0800ee9c <ull_setleds>:
 800ee9c:	b530      	push	{r4, r5, lr}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	4604      	mov	r4, r0
 800eea2:	f011 0f01 	tst.w	r1, #1
 800eea6:	d01f      	beq.n	800eee8 <ull_setleds+0x4c>
 800eea8:	460d      	mov	r5, r1
 800eeaa:	f44f 7310 	mov.w	r3, #576	; 0x240
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800eeba:	f7ff fab1 	bl	800e420 <dwt_modify32bitoffsetreg>
 800eebe:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eec8:	2200      	movs	r2, #0
 800eeca:	4918      	ldr	r1, [pc, #96]	; (800ef2c <ull_setleds+0x90>)
 800eecc:	4620      	mov	r0, r4
 800eece:	f7ff faa7 	bl	800e420 <dwt_modify32bitoffsetreg>
 800eed2:	f015 0f02 	tst.w	r5, #2
 800eed6:	d11a      	bne.n	800ef0e <ull_setleds+0x72>
 800eed8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800eedc:	2200      	movs	r2, #0
 800eede:	4914      	ldr	r1, [pc, #80]	; (800ef30 <ull_setleds+0x94>)
 800eee0:	4620      	mov	r0, r4
 800eee2:	f7fe fd97 	bl	800da14 <dwt_write32bitoffsetreg>
 800eee6:	e010      	b.n	800ef0a <ull_setleds+0x6e>
 800eee8:	2500      	movs	r5, #0
 800eeea:	9500      	str	r5, [sp, #0]
 800eeec:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800eef0:	462a      	mov	r2, r5
 800eef2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800eef6:	f7ff fa93 	bl	800e420 <dwt_modify32bitoffsetreg>
 800eefa:	9500      	str	r5, [sp, #0]
 800eefc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ef00:	462a      	mov	r2, r5
 800ef02:	490b      	ldr	r1, [pc, #44]	; (800ef30 <ull_setleds+0x94>)
 800ef04:	4620      	mov	r0, r4
 800ef06:	f7ff ff8b 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800ef0a:	b003      	add	sp, #12
 800ef0c:	bd30      	pop	{r4, r5, pc}
 800ef0e:	4d08      	ldr	r5, [pc, #32]	; (800ef30 <ull_setleds+0x94>)
 800ef10:	4b08      	ldr	r3, [pc, #32]	; (800ef34 <ull_setleds+0x98>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	4629      	mov	r1, r5
 800ef16:	4620      	mov	r0, r4
 800ef18:	f7fe fd7c 	bl	800da14 <dwt_write32bitoffsetreg>
 800ef1c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ef20:	2200      	movs	r2, #0
 800ef22:	4629      	mov	r1, r5
 800ef24:	4620      	mov	r0, r4
 800ef26:	f7fe fd75 	bl	800da14 <dwt_write32bitoffsetreg>
 800ef2a:	e7ee      	b.n	800ef0a <ull_setleds+0x6e>
 800ef2c:	00110004 	.word	0x00110004
 800ef30:	00110018 	.word	0x00110018
 800ef34:	000f0110 	.word	0x000f0110

0800ef38 <ull_pgf_cal>:
 800ef38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	2901      	cmp	r1, #1
 800ef40:	d009      	beq.n	800ef56 <ull_pgf_cal+0x1e>
 800ef42:	2014      	movs	r0, #20
 800ef44:	f7f1 fb7f 	bl	8000646 <deca_usleep>
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f7ff fe8b 	bl	800ec64 <ull_run_pgfcal>
 800ef4e:	4605      	mov	r5, r0
 800ef50:	4628      	mov	r0, r5
 800ef52:	b003      	add	sp, #12
 800ef54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef56:	4e0f      	ldr	r6, [pc, #60]	; (800ef94 <ull_pgf_cal+0x5c>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	f7fe f891 	bl	800d082 <dwt_read16bitoffsetreg>
 800ef60:	4607      	mov	r7, r0
 800ef62:	f240 1307 	movw	r3, #263	; 0x107
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4631      	mov	r1, r6
 800ef70:	4620      	mov	r0, r4
 800ef72:	f7ff ff55 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800ef76:	2014      	movs	r0, #20
 800ef78:	f7f1 fb65 	bl	8000646 <deca_usleep>
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f7ff fe71 	bl	800ec64 <ull_run_pgfcal>
 800ef82:	4605      	mov	r5, r0
 800ef84:	2200      	movs	r2, #0
 800ef86:	9200      	str	r2, [sp, #0]
 800ef88:	463b      	mov	r3, r7
 800ef8a:	4631      	mov	r1, r6
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f7ff ff47 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800ef92:	e7dd      	b.n	800ef50 <ull_pgf_cal+0x18>
 800ef94:	00070048 	.word	0x00070048

0800ef98 <ull_setgpiovalue>:
 800ef98:	b500      	push	{lr}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	2a01      	cmp	r2, #1
 800ef9e:	d009      	beq.n	800efb4 <ull_setgpiovalue+0x1c>
 800efa0:	43cb      	mvns	r3, r1
 800efa2:	2200      	movs	r2, #0
 800efa4:	9200      	str	r2, [sp, #0]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	4906      	ldr	r1, [pc, #24]	; (800efc4 <ull_setgpiovalue+0x2c>)
 800efaa:	f7ff ff39 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800efae:	b003      	add	sp, #12
 800efb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800efb4:	9100      	str	r1, [sp, #0]
 800efb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efba:	2200      	movs	r2, #0
 800efbc:	4901      	ldr	r1, [pc, #4]	; (800efc4 <ull_setgpiovalue+0x2c>)
 800efbe:	f7ff ff2f 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800efc2:	e7f4      	b.n	800efae <ull_setgpiovalue+0x16>
 800efc4:	0005000c 	.word	0x0005000c

0800efc8 <ull_readaccdata>:
 800efc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efca:	b083      	sub	sp, #12
 800efcc:	4604      	mov	r4, r0
 800efce:	460f      	mov	r7, r1
 800efd0:	4616      	mov	r6, r2
 800efd2:	461d      	mov	r5, r3
 800efd4:	f248 0340 	movw	r3, #32832	; 0x8040
 800efd8:	9300      	str	r3, [sp, #0]
 800efda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efde:	2200      	movs	r2, #0
 800efe0:	4918      	ldr	r1, [pc, #96]	; (800f044 <ull_readaccdata+0x7c>)
 800efe2:	f7ff ff1d 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800efe6:	19aa      	adds	r2, r5, r6
 800efe8:	f243 0301 	movw	r3, #12289	; 0x3001
 800efec:	429a      	cmp	r2, r3
 800efee:	dc15      	bgt.n	800f01c <ull_readaccdata+0x54>
 800eff0:	2d7f      	cmp	r5, #127	; 0x7f
 800eff2:	d91d      	bls.n	800f030 <ull_readaccdata+0x68>
 800eff4:	2315      	movs	r3, #21
 800eff6:	2200      	movs	r2, #0
 800eff8:	4913      	ldr	r1, [pc, #76]	; (800f048 <ull_readaccdata+0x80>)
 800effa:	4620      	mov	r0, r4
 800effc:	f7fe fd0a 	bl	800da14 <dwt_write32bitoffsetreg>
 800f000:	462b      	mov	r3, r5
 800f002:	2200      	movs	r2, #0
 800f004:	4911      	ldr	r1, [pc, #68]	; (800f04c <ull_readaccdata+0x84>)
 800f006:	4620      	mov	r0, r4
 800f008:	f7fe fd04 	bl	800da14 <dwt_write32bitoffsetreg>
 800f00c:	9700      	str	r7, [sp, #0]
 800f00e:	4633      	mov	r3, r6
 800f010:	2200      	movs	r2, #0
 800f012:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f016:	4620      	mov	r0, r4
 800f018:	f7fe f813 	bl	800d042 <dwt_readfromdevice>
 800f01c:	2200      	movs	r2, #0
 800f01e:	9200      	str	r2, [sp, #0]
 800f020:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800f024:	4907      	ldr	r1, [pc, #28]	; (800f044 <ull_readaccdata+0x7c>)
 800f026:	4620      	mov	r0, r4
 800f028:	f7ff fefa 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800f02c:	b003      	add	sp, #12
 800f02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f030:	9700      	str	r7, [sp, #0]
 800f032:	4633      	mov	r3, r6
 800f034:	462a      	mov	r2, r5
 800f036:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800f03a:	4620      	mov	r0, r4
 800f03c:	f7fe f801 	bl	800d042 <dwt_readfromdevice>
 800f040:	e7ec      	b.n	800f01c <ull_readaccdata+0x54>
 800f042:	bf00      	nop
 800f044:	00110004 	.word	0x00110004
 800f048:	001f0004 	.word	0x001f0004
 800f04c:	001f0008 	.word	0x001f0008

0800f050 <ull_configure>:
 800f050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f054:	b083      	sub	sp, #12
 800f056:	4604      	mov	r4, r0
 800f058:	460d      	mov	r5, r1
 800f05a:	f891 9000 	ldrb.w	r9, [r1]
 800f05e:	790b      	ldrb	r3, [r1, #4]
 800f060:	2b18      	cmp	r3, #24
 800f062:	d814      	bhi.n	800f08e <ull_configure+0x3e>
 800f064:	78cf      	ldrb	r7, [r1, #3]
 800f066:	2f18      	cmp	r7, #24
 800f068:	bf94      	ite	ls
 800f06a:	2700      	movls	r7, #0
 800f06c:	2701      	movhi	r7, #1
 800f06e:	b2ff      	uxtb	r7, r7
 800f070:	79eb      	ldrb	r3, [r5, #7]
 800f072:	2b01      	cmp	r3, #1
 800f074:	bf0c      	ite	eq
 800f076:	2110      	moveq	r1, #16
 800f078:	2100      	movne	r1, #0
 800f07a:	786b      	ldrb	r3, [r5, #1]
 800f07c:	3b01      	subs	r3, #1
 800f07e:	2b06      	cmp	r3, #6
 800f080:	d810      	bhi.n	800f0a4 <ull_configure+0x54>
 800f082:	e8df f003 	tbb	[pc, r3]
 800f086:	0f06      	.short	0x0f06
 800f088:	0f0c120f 	.word	0x0f0c120f
 800f08c:	09          	.byte	0x09
 800f08d:	00          	.byte	0x00
 800f08e:	2701      	movs	r7, #1
 800f090:	e7ed      	b.n	800f06e <ull_configure+0x1e>
 800f092:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800f096:	e00a      	b.n	800f0ae <ull_configure+0x5e>
 800f098:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800f09c:	e007      	b.n	800f0ae <ull_configure+0x5e>
 800f09e:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800f0a2:	e004      	b.n	800f0ae <ull_configure+0x5e>
 800f0a4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800f0a8:	e001      	b.n	800f0ae <ull_configure+0x5e>
 800f0aa:	f04f 0a20 	mov.w	sl, #32
 800f0ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f0b0:	8a13      	ldrh	r3, [r2, #16]
 800f0b2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f0b6:	8213      	strh	r3, [r2, #16]
 800f0b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f0ba:	79ea      	ldrb	r2, [r5, #7]
 800f0bc:	72da      	strb	r2, [r3, #11]
 800f0be:	7b2e      	ldrb	r6, [r5, #12]
 800f0c0:	1cb3      	adds	r3, r6, #2
 800f0c2:	2601      	movs	r6, #1
 800f0c4:	409e      	lsls	r6, r3
 800f0c6:	fa1f f886 	uxth.w	r8, r6
 800f0ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f0cc:	4bca      	ldr	r3, [pc, #808]	; (800f3f8 <ull_configure+0x3a8>)
 800f0ce:	fb03 f308 	mul.w	r3, r3, r8
 800f0d2:	0bdb      	lsrs	r3, r3, #15
 800f0d4:	8253      	strh	r3, [r2, #18]
 800f0d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f0d8:	7aea      	ldrb	r2, [r5, #11]
 800f0da:	755a      	strb	r2, [r3, #21]
 800f0dc:	7a2b      	ldrb	r3, [r5, #8]
 800f0de:	015b      	lsls	r3, r3, #5
 800f0e0:	f003 0320 	and.w	r3, r3, #32
 800f0e4:	7b6a      	ldrb	r2, [r5, #13]
 800f0e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0ea:	7aea      	ldrb	r2, [r5, #11]
 800f0ec:	0312      	lsls	r2, r2, #12
 800f0ee:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	430b      	orrs	r3, r1
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	4bc0      	ldr	r3, [pc, #768]	; (800f3fc <ull_configure+0x3ac>)
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2110      	movs	r1, #16
 800f0fe:	4620      	mov	r0, r4
 800f100:	f7ff f98e 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f104:	2f00      	cmp	r7, #0
 800f106:	f040 80fe 	bne.w	800f306 <ull_configure+0x2b6>
 800f10a:	7aeb      	ldrb	r3, [r5, #11]
 800f10c:	b1bb      	cbz	r3, 800f13e <ull_configure+0xee>
 800f10e:	7b6b      	ldrb	r3, [r5, #13]
 800f110:	2b01      	cmp	r3, #1
 800f112:	7b28      	ldrb	r0, [r5, #12]
 800f114:	bf94      	ite	ls
 800f116:	2203      	movls	r2, #3
 800f118:	2204      	movhi	r2, #4
 800f11a:	2110      	movs	r1, #16
 800f11c:	4bb8      	ldr	r3, [pc, #736]	; (800f400 <ull_configure+0x3b0>)
 800f11e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f122:	f7fd fef3 	bl	800cf0c <get_sts_mnth>
 800f126:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800f12a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f12e:	9000      	str	r0, [sp, #0]
 800f130:	f64f 7380 	movw	r3, #65408	; 0xff80
 800f134:	2202      	movs	r2, #2
 800f136:	49b3      	ldr	r1, [pc, #716]	; (800f404 <ull_configure+0x3b4>)
 800f138:	4620      	mov	r0, r4
 800f13a:	f7ff fe71 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800f13e:	2394      	movs	r3, #148	; 0x94
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	4bb1      	ldr	r3, [pc, #708]	; (800f408 <ull_configure+0x3b8>)
 800f144:	2200      	movs	r2, #0
 800f146:	49b1      	ldr	r1, [pc, #708]	; (800f40c <ull_configure+0x3bc>)
 800f148:	4620      	mov	r0, r4
 800f14a:	f7ff f969 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f14e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f152:	f340 8103 	ble.w	800f35c <ull_configure+0x30c>
 800f156:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f158:	8a13      	ldrh	r3, [r2, #16]
 800f15a:	f043 0320 	orr.w	r3, r3, #32
 800f15e:	8213      	strh	r3, [r2, #16]
 800f160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f16a:	2200      	movs	r2, #0
 800f16c:	49a8      	ldr	r1, [pc, #672]	; (800f410 <ull_configure+0x3c0>)
 800f16e:	4620      	mov	r0, r4
 800f170:	f7ff fe56 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800f174:	7b6b      	ldrb	r3, [r5, #13]
 800f176:	2b01      	cmp	r3, #1
 800f178:	f000 80fb 	beq.w	800f372 <ull_configure+0x322>
 800f17c:	78ab      	ldrb	r3, [r5, #2]
 800f17e:	f043 0310 	orr.w	r3, r3, #16
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	23fc      	movs	r3, #252	; 0xfc
 800f186:	2200      	movs	r2, #0
 800f188:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f18c:	4620      	mov	r0, r4
 800f18e:	f7ff fab7 	bl	800e700 <dwt_modify8bitoffsetreg>
 800f192:	1e73      	subs	r3, r6, #1
 800f194:	b2db      	uxtb	r3, r3
 800f196:	2200      	movs	r2, #0
 800f198:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f19c:	4620      	mov	r0, r4
 800f19e:	f7fe fe1d 	bl	800dddc <dwt_write8bitoffsetreg>
 800f1a2:	786b      	ldrb	r3, [r5, #1]
 800f1a4:	2b07      	cmp	r3, #7
 800f1a6:	bf0c      	ite	eq
 800f1a8:	2108      	moveq	r1, #8
 800f1aa:	2100      	movne	r1, #0
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f7fe ff1b 	bl	800dfe8 <ull_setplenfine>
 800f1b2:	7aeb      	ldrb	r3, [r5, #11]
 800f1b4:	f003 0303 	and.w	r3, r3, #3
 800f1b8:	2b03      	cmp	r3, #3
 800f1ba:	bf0c      	ite	eq
 800f1bc:	4b95      	ldreq	r3, [pc, #596]	; (800f414 <ull_configure+0x3c4>)
 800f1be:	4b96      	ldrne	r3, [pc, #600]	; (800f418 <ull_configure+0x3c8>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4996      	ldr	r1, [pc, #600]	; (800f41c <ull_configure+0x3cc>)
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f7fe fc25 	bl	800da14 <dwt_write32bitoffsetreg>
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	4994      	ldr	r1, [pc, #592]	; (800f420 <ull_configure+0x3d0>)
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f7fd ff41 	bl	800d056 <dwt_read32bitoffsetreg>
 800f1d4:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800f1d8:	f020 001f 	bic.w	r0, r0, #31
 800f1dc:	f1b9 0f09 	cmp.w	r9, #9
 800f1e0:	bf08      	it	eq
 800f1e2:	f040 0001 	orreq.w	r0, r0, #1
 800f1e6:	792a      	ldrb	r2, [r5, #4]
 800f1e8:	0212      	lsls	r2, r2, #8
 800f1ea:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800f1ee:	78eb      	ldrb	r3, [r5, #3]
 800f1f0:	00db      	lsls	r3, r3, #3
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	431a      	orrs	r2, r3
 800f1f6:	796b      	ldrb	r3, [r5, #5]
 800f1f8:	005b      	lsls	r3, r3, #1
 800f1fa:	f003 0306 	and.w	r3, r3, #6
 800f1fe:	4313      	orrs	r3, r2
 800f200:	4303      	orrs	r3, r0
 800f202:	2200      	movs	r2, #0
 800f204:	4986      	ldr	r1, [pc, #536]	; (800f420 <ull_configure+0x3d0>)
 800f206:	4620      	mov	r0, r4
 800f208:	f7fe fc04 	bl	800da14 <dwt_write32bitoffsetreg>
 800f20c:	79aa      	ldrb	r2, [r5, #6]
 800f20e:	786b      	ldrb	r3, [r5, #1]
 800f210:	031b      	lsls	r3, r3, #12
 800f212:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800f21c:	2200      	movs	r2, #0
 800f21e:	2120      	movs	r1, #32
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff f8fd 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f226:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f22a:	b923      	cbnz	r3, 800f236 <ull_configure+0x1e6>
 800f22c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800f230:	726b      	strb	r3, [r5, #9]
 800f232:	2300      	movs	r3, #0
 800f234:	72ab      	strb	r3, [r5, #10]
 800f236:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f23a:	2202      	movs	r2, #2
 800f23c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f240:	4620      	mov	r0, r4
 800f242:	f7fe fb7c 	bl	800d93e <dwt_write16bitoffsetreg>
 800f246:	2202      	movs	r2, #2
 800f248:	4976      	ldr	r1, [pc, #472]	; (800f424 <ull_configure+0x3d4>)
 800f24a:	4620      	mov	r0, r4
 800f24c:	f7fd ff58 	bl	800d100 <dwt_read8bitoffsetreg>
 800f250:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f252:	7bdb      	ldrb	r3, [r3, #15]
 800f254:	454b      	cmp	r3, r9
 800f256:	f000 8096 	beq.w	800f386 <ull_configure+0x336>
 800f25a:	2803      	cmp	r0, #3
 800f25c:	f000 8097 	beq.w	800f38e <ull_configure+0x33e>
 800f260:	f1b9 0f09 	cmp.w	r9, #9
 800f264:	f000 8098 	beq.w	800f398 <ull_configure+0x348>
 800f268:	4b6f      	ldr	r3, [pc, #444]	; (800f428 <ull_configure+0x3d8>)
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f270:	2200      	movs	r2, #0
 800f272:	496e      	ldr	r1, [pc, #440]	; (800f42c <ull_configure+0x3dc>)
 800f274:	4620      	mov	r0, r4
 800f276:	f7ff f8d3 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f27a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800f27e:	2200      	movs	r2, #0
 800f280:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f284:	4620      	mov	r0, r4
 800f286:	f7fe fb5a 	bl	800d93e <dwt_write16bitoffsetreg>
 800f28a:	2314      	movs	r3, #20
 800f28c:	2201      	movs	r2, #1
 800f28e:	4968      	ldr	r1, [pc, #416]	; (800f430 <ull_configure+0x3e0>)
 800f290:	4620      	mov	r0, r4
 800f292:	f7fe fda3 	bl	800dddc <dwt_write8bitoffsetreg>
 800f296:	230e      	movs	r3, #14
 800f298:	2202      	movs	r2, #2
 800f29a:	4966      	ldr	r1, [pc, #408]	; (800f434 <ull_configure+0x3e4>)
 800f29c:	4620      	mov	r0, r4
 800f29e:	f7fe fd9d 	bl	800dddc <dwt_write8bitoffsetreg>
 800f2a2:	2381      	movs	r3, #129	; 0x81
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	4964      	ldr	r1, [pc, #400]	; (800f438 <ull_configure+0x3e8>)
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	f7fe fd97 	bl	800dddc <dwt_write8bitoffsetreg>
 800f2ae:	2600      	movs	r6, #0
 800f2b0:	9600      	str	r6, [sp, #0]
 800f2b2:	23fc      	movs	r3, #252	; 0xfc
 800f2b4:	2203      	movs	r2, #3
 800f2b6:	4961      	ldr	r1, [pc, #388]	; (800f43c <ull_configure+0x3ec>)
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f7ff fa21 	bl	800e700 <dwt_modify8bitoffsetreg>
 800f2be:	2302      	movs	r3, #2
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	2144      	movs	r1, #68	; 0x44
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f7fe fd89 	bl	800dddc <dwt_write8bitoffsetreg>
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f7ff fc47 	bl	800eb60 <ull_setdwstate>
 800f2d2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800f2d6:	f04f 0814 	mov.w	r8, #20
 800f2da:	4637      	mov	r7, r6
 800f2dc:	2644      	movs	r6, #68	; 0x44
 800f2de:	4640      	mov	r0, r8
 800f2e0:	f7f1 f9b1 	bl	8000646 <deca_usleep>
 800f2e4:	463a      	mov	r2, r7
 800f2e6:	4631      	mov	r1, r6
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f7fd ff09 	bl	800d100 <dwt_read8bitoffsetreg>
 800f2ee:	f010 0f02 	tst.w	r0, #2
 800f2f2:	f040 80af 	bne.w	800f454 <ull_configure+0x404>
 800f2f6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800f2fa:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800f2fe:	d1ee      	bne.n	800f2de <ull_configure+0x28e>
 800f300:	f06f 0001 	mvn.w	r0, #1
 800f304:	e0e6      	b.n	800f4d4 <ull_configure+0x484>
 800f306:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f308:	8a13      	ldrh	r3, [r2, #16]
 800f30a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f30e:	8213      	strh	r3, [r2, #16]
 800f310:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f314:	9300      	str	r3, [sp, #0]
 800f316:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800f31a:	2200      	movs	r2, #0
 800f31c:	493c      	ldr	r1, [pc, #240]	; (800f410 <ull_configure+0x3c0>)
 800f31e:	4620      	mov	r0, r4
 800f320:	f7ff f87e 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f324:	f240 3306 	movw	r3, #774	; 0x306
 800f328:	2200      	movs	r2, #0
 800f32a:	4945      	ldr	r1, [pc, #276]	; (800f440 <ull_configure+0x3f0>)
 800f32c:	4620      	mov	r0, r4
 800f32e:	f7fe fb71 	bl	800da14 <dwt_write32bitoffsetreg>
 800f332:	2300      	movs	r3, #0
 800f334:	461a      	mov	r2, r3
 800f336:	4943      	ldr	r1, [pc, #268]	; (800f444 <ull_configure+0x3f4>)
 800f338:	4620      	mov	r0, r4
 800f33a:	f7fe fb6b 	bl	800da14 <dwt_write32bitoffsetreg>
 800f33e:	4b42      	ldr	r3, [pc, #264]	; (800f448 <ull_configure+0x3f8>)
 800f340:	2200      	movs	r2, #0
 800f342:	4930      	ldr	r1, [pc, #192]	; (800f404 <ull_configure+0x3b4>)
 800f344:	4620      	mov	r0, r4
 800f346:	f7fe fb65 	bl	800da14 <dwt_write32bitoffsetreg>
 800f34a:	239d      	movs	r3, #157	; 0x9d
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	4b2e      	ldr	r3, [pc, #184]	; (800f408 <ull_configure+0x3b8>)
 800f350:	2200      	movs	r2, #0
 800f352:	492e      	ldr	r1, [pc, #184]	; (800f40c <ull_configure+0x3bc>)
 800f354:	4620      	mov	r0, r4
 800f356:	f7ff f863 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f35a:	e70b      	b.n	800f174 <ull_configure+0x124>
 800f35c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f366:	2200      	movs	r2, #0
 800f368:	4929      	ldr	r1, [pc, #164]	; (800f410 <ull_configure+0x3c0>)
 800f36a:	4620      	mov	r0, r4
 800f36c:	f7ff fd58 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800f370:	e700      	b.n	800f174 <ull_configure+0x124>
 800f372:	78ab      	ldrb	r3, [r5, #2]
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	23ec      	movs	r3, #236	; 0xec
 800f378:	2200      	movs	r2, #0
 800f37a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f37e:	4620      	mov	r0, r4
 800f380:	f7ff f9be 	bl	800e700 <dwt_modify8bitoffsetreg>
 800f384:	e705      	b.n	800f192 <ull_configure+0x142>
 800f386:	2803      	cmp	r0, #3
 800f388:	f47f af6a 	bne.w	800f260 <ull_configure+0x210>
 800f38c:	e065      	b.n	800f45a <ull_configure+0x40a>
 800f38e:	2102      	movs	r1, #2
 800f390:	4620      	mov	r0, r4
 800f392:	f7ff fbe5 	bl	800eb60 <ull_setdwstate>
 800f396:	e763      	b.n	800f260 <ull_configure+0x210>
 800f398:	4b2c      	ldr	r3, [pc, #176]	; (800f44c <ull_configure+0x3fc>)
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4922      	ldr	r1, [pc, #136]	; (800f42c <ull_configure+0x3dc>)
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f7ff f83b 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f3aa:	f640 733c 	movw	r3, #3900	; 0xf3c
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7fe fac2 	bl	800d93e <dwt_write16bitoffsetreg>
 800f3ba:	e766      	b.n	800f28a <ull_configure+0x23a>
 800f3bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4911      	ldr	r1, [pc, #68]	; (800f410 <ull_configure+0x3c0>)
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f7ff fd28 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800f3d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f3d2:	8a13      	ldrh	r3, [r2, #16]
 800f3d4:	f043 0308 	orr.w	r3, r3, #8
 800f3d8:	8213      	strh	r3, [r2, #16]
 800f3da:	e050      	b.n	800f47e <ull_configure+0x42e>
 800f3dc:	2200      	movs	r2, #0
 800f3de:	9200      	str	r2, [sp, #0]
 800f3e0:	23fe      	movs	r3, #254	; 0xfe
 800f3e2:	491b      	ldr	r1, [pc, #108]	; (800f450 <ull_configure+0x400>)
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f7ff f98b 	bl	800e700 <dwt_modify8bitoffsetreg>
 800f3ea:	e052      	b.n	800f492 <ull_configure+0x442>
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f7ff fda2 	bl	800ef38 <ull_pgf_cal>
 800f3f4:	e06b      	b.n	800f4ce <ull_configure+0x47e>
 800f3f6:	bf00      	nop
 800f3f8:	00026668 	.word	0x00026668
 800f3fc:	fffc4fcf 	.word	0xfffc4fcf
 800f400:	080120f8 	.word	0x080120f8
 800f404:	000e0014 	.word	0x000e0014
 800f408:	bfffff00 	.word	0xbfffff00
 800f40c:	000e0018 	.word	0x000e0018
 800f410:	000b0008 	.word	0x000b0008
 800f414:	af5f35cc 	.word	0xaf5f35cc
 800f418:	af5f584c 	.word	0xaf5f584c
 800f41c:	0006000c 	.word	0x0006000c
 800f420:	00010008 	.word	0x00010008
 800f424:	000f0030 	.word	0x000f0030
 800f428:	1c071134 	.word	0x1c071134
 800f42c:	0007001c 	.word	0x0007001c
 800f430:	00070050 	.word	0x00070050
 800f434:	00070018 	.word	0x00070018
 800f438:	00090008 	.word	0x00090008
 800f43c:	00090004 	.word	0x00090004
 800f440:	000e000c 	.word	0x000e000c
 800f444:	000e0010 	.word	0x000e0010
 800f448:	000c5a0a 	.word	0x000c5a0a
 800f44c:	1c010034 	.word	0x1c010034
 800f450:	00030018 	.word	0x00030018
 800f454:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f456:	f883 900f 	strb.w	r9, [r3, #15]
 800f45a:	792b      	ldrb	r3, [r5, #4]
 800f45c:	3b09      	subs	r3, #9
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	2b0f      	cmp	r3, #15
 800f462:	d8bb      	bhi.n	800f3dc <ull_configure+0x38c>
 800f464:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f466:	7a1b      	ldrb	r3, [r3, #8]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d0a7      	beq.n	800f3bc <ull_configure+0x36c>
 800f46c:	4649      	mov	r1, r9
 800f46e:	4620      	mov	r0, r4
 800f470:	f7fe fb9c 	bl	800dbac <ull_configmrxlut>
 800f474:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f476:	8a13      	ldrh	r3, [r2, #16]
 800f478:	f023 0308 	bic.w	r3, r3, #8
 800f47c:	8213      	strh	r3, [r2, #16]
 800f47e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f482:	9300      	str	r3, [sp, #0]
 800f484:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800f488:	2200      	movs	r2, #0
 800f48a:	4914      	ldr	r1, [pc, #80]	; (800f4dc <ull_configure+0x48c>)
 800f48c:	4620      	mov	r0, r4
 800f48e:	f7ff fcc7 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800f492:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800f496:	bfcc      	ite	gt
 800f498:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800f49c:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800f4a0:	9300      	str	r3, [sp, #0]
 800f4a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	490d      	ldr	r1, [pc, #52]	; (800f4e0 <ull_configure+0x490>)
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f7fe ffb8 	bl	800e420 <dwt_modify32bitoffsetreg>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	9300      	str	r3, [sp, #0]
 800f4b4:	23ff      	movs	r3, #255	; 0xff
 800f4b6:	2202      	movs	r2, #2
 800f4b8:	490a      	ldr	r1, [pc, #40]	; (800f4e4 <ull_configure+0x494>)
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f7ff f920 	bl	800e700 <dwt_modify8bitoffsetreg>
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	4909      	ldr	r1, [pc, #36]	; (800f4e8 <ull_configure+0x498>)
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	f7fd fdc6 	bl	800d056 <dwt_read32bitoffsetreg>
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d08e      	beq.n	800f3ec <ull_configure+0x39c>
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f7ff f98a 	bl	800e7e8 <ull_adcoffsetscalibration>
 800f4d4:	b003      	add	sp, #12
 800f4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4da:	bf00      	nop
 800f4dc:	00030018 	.word	0x00030018
 800f4e0:	00060010 	.word	0x00060010
 800f4e4:	0004000c 	.word	0x0004000c
 800f4e8:	00040014 	.word	0x00040014

0800f4ec <ull_initialise>:
 800f4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f0:	b082      	sub	sp, #8
 800f4f2:	4605      	mov	r5, r0
 800f4f4:	460e      	mov	r6, r1
 800f4f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d05b      	beq.n	800f5b4 <ull_initialise+0xc8>
 800f4fc:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800f4fe:	2300      	movs	r3, #0
 800f500:	73a3      	strb	r3, [r4, #14]
 800f502:	2202      	movs	r2, #2
 800f504:	8222      	strh	r2, [r4, #16]
 800f506:	7523      	strb	r3, [r4, #20]
 800f508:	7563      	strb	r3, [r4, #21]
 800f50a:	73e3      	strb	r3, [r4, #15]
 800f50c:	7263      	strb	r3, [r4, #9]
 800f50e:	72a3      	strb	r3, [r4, #10]
 800f510:	2104      	movs	r1, #4
 800f512:	4628      	mov	r0, r5
 800f514:	f7fe fa5c 	bl	800d9d0 <_dwt_otpread>
 800f518:	4607      	mov	r7, r0
 800f51a:	2105      	movs	r1, #5
 800f51c:	4628      	mov	r0, r5
 800f51e:	f7fe fa57 	bl	800d9d0 <_dwt_otpread>
 800f522:	4680      	mov	r8, r0
 800f524:	210a      	movs	r1, #10
 800f526:	4628      	mov	r0, r5
 800f528:	f7fe fa52 	bl	800d9d0 <_dwt_otpread>
 800f52c:	b12f      	cbz	r7, 800f53a <ull_initialise+0x4e>
 800f52e:	f1b8 0f00 	cmp.w	r8, #0
 800f532:	d002      	beq.n	800f53a <ull_initialise+0x4e>
 800f534:	b280      	uxth	r0, r0
 800f536:	2800      	cmp	r0, #0
 800f538:	d141      	bne.n	800f5be <ull_initialise+0xd2>
 800f53a:	2120      	movs	r1, #32
 800f53c:	4628      	mov	r0, r5
 800f53e:	f7fe fa47 	bl	800d9d0 <_dwt_otpread>
 800f542:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800f546:	bf0c      	ite	eq
 800f548:	2301      	moveq	r3, #1
 800f54a:	2300      	movne	r3, #0
 800f54c:	7223      	strb	r3, [r4, #8]
 800f54e:	f016 0f10 	tst.w	r6, #16
 800f552:	d143      	bne.n	800f5dc <ull_initialise+0xf0>
 800f554:	f016 0f20 	tst.w	r6, #32
 800f558:	d146      	bne.n	800f5e8 <ull_initialise+0xfc>
 800f55a:	f016 0f40 	tst.w	r6, #64	; 0x40
 800f55e:	d149      	bne.n	800f5f4 <ull_initialise+0x108>
 800f560:	f016 0f80 	tst.w	r6, #128	; 0x80
 800f564:	d14d      	bne.n	800f602 <ull_initialise+0x116>
 800f566:	7aa3      	ldrb	r3, [r4, #10]
 800f568:	b90b      	cbnz	r3, 800f56e <ull_initialise+0x82>
 800f56a:	2385      	movs	r3, #133	; 0x85
 800f56c:	72a3      	strb	r3, [r4, #10]
 800f56e:	7a63      	ldrb	r3, [r4, #9]
 800f570:	b90b      	cbnz	r3, 800f576 <ull_initialise+0x8a>
 800f572:	2374      	movs	r3, #116	; 0x74
 800f574:	7263      	strb	r3, [r4, #9]
 800f576:	211f      	movs	r1, #31
 800f578:	4628      	mov	r0, r5
 800f57a:	f7fe fa29 	bl	800d9d0 <_dwt_otpread>
 800f57e:	7320      	strb	r0, [r4, #12]
 800f580:	211e      	movs	r1, #30
 800f582:	4628      	mov	r0, r5
 800f584:	f7fe fa24 	bl	800d9d0 <_dwt_otpread>
 800f588:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800f58c:	bf12      	itee	ne
 800f58e:	7360      	strbne	r0, [r4, #13]
 800f590:	232e      	moveq	r3, #46	; 0x2e
 800f592:	7363      	strbeq	r3, [r4, #13]
 800f594:	7b63      	ldrb	r3, [r4, #13]
 800f596:	2200      	movs	r2, #0
 800f598:	4920      	ldr	r1, [pc, #128]	; (800f61c <ull_initialise+0x130>)
 800f59a:	4628      	mov	r0, r5
 800f59c:	f7fe fc1e 	bl	800dddc <dwt_write8bitoffsetreg>
 800f5a0:	2135      	movs	r1, #53	; 0x35
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f7fe fa14 	bl	800d9d0 <_dwt_otpread>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	bb80      	cbnz	r0, 800f60e <ull_initialise+0x122>
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	b002      	add	sp, #8
 800f5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b4:	2028      	movs	r0, #40	; 0x28
 800f5b6:	f002 fa67 	bl	8011a88 <malloc>
 800f5ba:	6528      	str	r0, [r5, #80]	; 0x50
 800f5bc:	e79e      	b.n	800f4fc <ull_initialise+0x10>
 800f5be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	4915      	ldr	r1, [pc, #84]	; (800f620 <ull_initialise+0x134>)
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	f7ff fc27 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800f5d2:	8a23      	ldrh	r3, [r4, #16]
 800f5d4:	f043 0314 	orr.w	r3, r3, #20
 800f5d8:	8223      	strh	r3, [r4, #16]
 800f5da:	e7ae      	b.n	800f53a <ull_initialise+0x4e>
 800f5dc:	2106      	movs	r1, #6
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f7fe f9f6 	bl	800d9d0 <_dwt_otpread>
 800f5e4:	6020      	str	r0, [r4, #0]
 800f5e6:	e7b5      	b.n	800f554 <ull_initialise+0x68>
 800f5e8:	2107      	movs	r1, #7
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f7fe f9f0 	bl	800d9d0 <_dwt_otpread>
 800f5f0:	6060      	str	r0, [r4, #4]
 800f5f2:	e7b2      	b.n	800f55a <ull_initialise+0x6e>
 800f5f4:	2108      	movs	r1, #8
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f7fe f9ea 	bl	800d9d0 <_dwt_otpread>
 800f5fc:	0c00      	lsrs	r0, r0, #16
 800f5fe:	7260      	strb	r0, [r4, #9]
 800f600:	e7ae      	b.n	800f560 <ull_initialise+0x74>
 800f602:	2109      	movs	r1, #9
 800f604:	4628      	mov	r0, r5
 800f606:	f7fe f9e3 	bl	800d9d0 <_dwt_otpread>
 800f60a:	72a0      	strb	r0, [r4, #10]
 800f60c:	e7ab      	b.n	800f566 <ull_initialise+0x7a>
 800f60e:	2200      	movs	r2, #0
 800f610:	4904      	ldr	r1, [pc, #16]	; (800f624 <ull_initialise+0x138>)
 800f612:	4628      	mov	r0, r5
 800f614:	f7fe f9fe 	bl	800da14 <dwt_write32bitoffsetreg>
 800f618:	e7c8      	b.n	800f5ac <ull_initialise+0xc0>
 800f61a:	bf00      	nop
 800f61c:	00090014 	.word	0x00090014
 800f620:	000b0008 	.word	0x000b0008
 800f624:	00090004 	.word	0x00090004

0800f628 <ull_rxenable>:
 800f628:	b530      	push	{r4, r5, lr}
 800f62a:	b083      	sub	sp, #12
 800f62c:	4605      	mov	r5, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	b171      	cbz	r1, 800f650 <ull_rxenable+0x28>
 800f632:	f021 0302 	bic.w	r3, r1, #2
 800f636:	3b01      	subs	r3, #1
 800f638:	2b0f      	cmp	r3, #15
 800f63a:	d862      	bhi.n	800f702 <ull_rxenable+0xda>
 800f63c:	e8df f003 	tbb	[pc, r3]
 800f640:	24616111 	.word	0x24616111
 800f644:	2d616161 	.word	0x2d616161
 800f648:	61616161 	.word	0x61616161
 800f64c:	3a616161 	.word	0x3a616161
 800f650:	2102      	movs	r1, #2
 800f652:	9101      	str	r1, [sp, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	9200      	str	r2, [sp, #0]
 800f658:	4613      	mov	r3, r2
 800f65a:	f7fd fc74 	bl	800cf46 <dwt_xfer3xxx>
 800f65e:	4620      	mov	r0, r4
 800f660:	e010      	b.n	800f684 <ull_rxenable+0x5c>
 800f662:	2302      	movs	r3, #2
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	9200      	str	r2, [sp, #0]
 800f66a:	4613      	mov	r3, r2
 800f66c:	2104      	movs	r1, #4
 800f66e:	f7fd fc6a 	bl	800cf46 <dwt_xfer3xxx>
 800f672:	2203      	movs	r2, #3
 800f674:	2144      	movs	r1, #68	; 0x44
 800f676:	4628      	mov	r0, r5
 800f678:	f7fd fd42 	bl	800d100 <dwt_read8bitoffsetreg>
 800f67c:	f010 0f08 	tst.w	r0, #8
 800f680:	d125      	bne.n	800f6ce <ull_rxenable+0xa6>
 800f682:	2000      	movs	r0, #0
 800f684:	b003      	add	sp, #12
 800f686:	bd30      	pop	{r4, r5, pc}
 800f688:	2302      	movs	r3, #2
 800f68a:	9301      	str	r3, [sp, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	9200      	str	r2, [sp, #0]
 800f690:	4613      	mov	r3, r2
 800f692:	210a      	movs	r1, #10
 800f694:	f7fd fc57 	bl	800cf46 <dwt_xfer3xxx>
 800f698:	e7eb      	b.n	800f672 <ull_rxenable+0x4a>
 800f69a:	2100      	movs	r1, #0
 800f69c:	f7fe f9cf 	bl	800da3e <_dwt_adjust_delaytime>
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	9301      	str	r3, [sp, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	9200      	str	r2, [sp, #0]
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	2108      	movs	r1, #8
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f7fd fc4a 	bl	800cf46 <dwt_xfer3xxx>
 800f6b2:	e7de      	b.n	800f672 <ull_rxenable+0x4a>
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	f7fe f9c2 	bl	800da3e <_dwt_adjust_delaytime>
 800f6ba:	2302      	movs	r3, #2
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	9200      	str	r2, [sp, #0]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	2106      	movs	r1, #6
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7fd fc3d 	bl	800cf46 <dwt_xfer3xxx>
 800f6cc:	e7d1      	b.n	800f672 <ull_rxenable+0x4a>
 800f6ce:	2302      	movs	r3, #2
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	9100      	str	r1, [sp, #0]
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	460a      	mov	r2, r1
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f7fd fc33 	bl	800cf46 <dwt_xfer3xxx>
 800f6e0:	f014 0f02 	tst.w	r4, #2
 800f6e4:	d002      	beq.n	800f6ec <ull_rxenable+0xc4>
 800f6e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6ea:	e7cb      	b.n	800f684 <ull_rxenable+0x5c>
 800f6ec:	2102      	movs	r1, #2
 800f6ee:	9101      	str	r1, [sp, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	9200      	str	r2, [sp, #0]
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	f7fd fc25 	bl	800cf46 <dwt_xfer3xxx>
 800f6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f700:	e7c0      	b.n	800f684 <ull_rxenable+0x5c>
 800f702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f706:	e7bd      	b.n	800f684 <ull_rxenable+0x5c>

0800f708 <ull_softreset_no_sema_fcmd>:
 800f708:	b570      	push	{r4, r5, r6, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	4606      	mov	r6, r0
 800f70e:	2502      	movs	r5, #2
 800f710:	9501      	str	r5, [sp, #4]
 800f712:	2400      	movs	r4, #0
 800f714:	9400      	str	r4, [sp, #0]
 800f716:	4623      	mov	r3, r4
 800f718:	4622      	mov	r2, r4
 800f71a:	2119      	movs	r1, #25
 800f71c:	f7fd fc13 	bl	800cf46 <dwt_xfer3xxx>
 800f720:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f722:	739c      	strb	r4, [r3, #14]
 800f724:	821d      	strh	r5, [r3, #16]
 800f726:	751c      	strb	r4, [r3, #20]
 800f728:	755c      	strb	r4, [r3, #21]
 800f72a:	73dc      	strb	r4, [r3, #15]
 800f72c:	b002      	add	sp, #8
 800f72e:	bd70      	pop	{r4, r5, r6, pc}

0800f730 <ull_softreset_fcmd>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	4606      	mov	r6, r0
 800f736:	2502      	movs	r5, #2
 800f738:	9501      	str	r5, [sp, #4]
 800f73a:	2400      	movs	r4, #0
 800f73c:	9400      	str	r4, [sp, #0]
 800f73e:	4623      	mov	r3, r4
 800f740:	4622      	mov	r2, r4
 800f742:	2118      	movs	r1, #24
 800f744:	f7fd fbff 	bl	800cf46 <dwt_xfer3xxx>
 800f748:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f74a:	739c      	strb	r4, [r3, #14]
 800f74c:	821d      	strh	r5, [r3, #16]
 800f74e:	751c      	strb	r4, [r3, #20]
 800f750:	755c      	strb	r4, [r3, #21]
 800f752:	73dc      	strb	r4, [r3, #15]
 800f754:	b002      	add	sp, #8
 800f756:	bd70      	pop	{r4, r5, r6, pc}

0800f758 <dwt_ioctl>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	b08d      	sub	sp, #52	; 0x34
 800f75e:	4606      	mov	r6, r0
 800f760:	4615      	mov	r5, r2
 800f762:	461c      	mov	r4, r3
 800f764:	299c      	cmp	r1, #156	; 0x9c
 800f766:	f200 809f 	bhi.w	800f8a8 <dwt_ioctl+0x150>
 800f76a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f76e:	09b9      	.short	0x09b9
 800f770:	00a109c4 	.word	0x00a109c4
 800f774:	00c100a6 	.word	0x00c100a6
 800f778:	019d0151 	.word	0x019d0151
 800f77c:	015c0176 	.word	0x015c0176
 800f780:	01b301ae 	.word	0x01b301ae
 800f784:	01c501bc 	.word	0x01c501bc
 800f788:	01d701ce 	.word	0x01d701ce
 800f78c:	01e501e0 	.word	0x01e501e0
 800f790:	027201ee 	.word	0x027201ee
 800f794:	027e0278 	.word	0x027e0278
 800f798:	028f0289 	.word	0x028f0289
 800f79c:	029a0295 	.word	0x029a0295
 800f7a0:	02a502a0 	.word	0x02a502a0
 800f7a4:	02b702ae 	.word	0x02b702ae
 800f7a8:	02c902c0 	.word	0x02c902c0
 800f7ac:	02f90304 	.word	0x02f90304
 800f7b0:	02d202ee 	.word	0x02d202ee
 800f7b4:	031e02e0 	.word	0x031e02e0
 800f7b8:	021a01f8 	.word	0x021a01f8
 800f7bc:	02420239 	.word	0x02420239
 800f7c0:	08ba0258 	.word	0x08ba0258
 800f7c4:	031508bf 	.word	0x031508bf
 800f7c8:	032c0327 	.word	0x032c0327
 800f7cc:	033c0336 	.word	0x033c0336
 800f7d0:	03520347 	.word	0x03520347
 800f7d4:	0386035b 	.word	0x0386035b
 800f7d8:	03a9039d 	.word	0x03a9039d
 800f7dc:	03b5030a 	.word	0x03b5030a
 800f7e0:	03d203bf 	.word	0x03d203bf
 800f7e4:	040b03f9 	.word	0x040b03f9
 800f7e8:	0457044d 	.word	0x0457044d
 800f7ec:	048c047d 	.word	0x048c047d
 800f7f0:	049504a7 	.word	0x049504a7
 800f7f4:	04f704b1 	.word	0x04f704b1
 800f7f8:	052f050f 	.word	0x052f050f
 800f7fc:	05580544 	.word	0x05580544
 800f800:	057d0561 	.word	0x057d0561
 800f804:	0692056a 	.word	0x0692056a
 800f808:	071106c1 	.word	0x071106c1
 800f80c:	07220717 	.word	0x07220717
 800f810:	075b073b 	.word	0x075b073b
 800f814:	078f0765 	.word	0x078f0765
 800f818:	07c607bd 	.word	0x07c607bd
 800f81c:	07d507cc 	.word	0x07d507cc
 800f820:	07ef07e2 	.word	0x07ef07e2
 800f824:	080207f9 	.word	0x080207f9
 800f828:	0816080b 	.word	0x0816080b
 800f82c:	08270821 	.word	0x08270821
 800f830:	0855084a 	.word	0x0855084a
 800f834:	086b0860 	.word	0x086b0860
 800f838:	0898088d 	.word	0x0898088d
 800f83c:	08c508b1 	.word	0x08c508b1
 800f840:	0959094f 	.word	0x0959094f
 800f844:	09cc0964 	.word	0x09cc0964
 800f848:	09ae096e 	.word	0x09ae096e
 800f84c:	090306b3 	.word	0x090306b3
 800f850:	0a3a0924 	.word	0x0a3a0924
 800f854:	09d90a2f 	.word	0x09d90a2f
 800f858:	09ef09e4 	.word	0x09ef09e4
 800f85c:	0a0509fa 	.word	0x0a0509fa
 800f860:	0a1b0a10 	.word	0x0a1b0a10
 800f864:	0c320a24 	.word	0x0c320a24
 800f868:	0ca30c69 	.word	0x0ca30c69
 800f86c:	0e2d0cc5 	.word	0x0e2d0cc5
 800f870:	0a4a0e41 	.word	0x0a4a0e41
 800f874:	0b890b57 	.word	0x0b890b57
 800f878:	0b970b93 	.word	0x0b970b93
 800f87c:	0ba50b9b 	.word	0x0ba50b9b
 800f880:	0bc10bb7 	.word	0x0bc10bb7
 800f884:	0be80bd4 	.word	0x0be80bd4
 800f888:	0cdb0c22 	.word	0x0cdb0c22
 800f88c:	0cfd0ce5 	.word	0x0cfd0ce5
 800f890:	0d2d0d18 	.word	0x0d2d0d18
 800f894:	0d890d4d 	.word	0x0d890d4d
 800f898:	0db70da1 	.word	0x0db70da1
 800f89c:	0efc0dc7 	.word	0x0efc0dc7
 800f8a0:	0dec0df6 	.word	0x0dec0df6
 800f8a4:	0e000e08 	.word	0x0e000e08
 800f8a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f8ac:	f001 be5c 	b.w	8011568 <dwt_ioctl+0x1e10>
 800f8b0:	f7fd fb28 	bl	800cf04 <ull_wakeup_ic>
 800f8b4:	2500      	movs	r5, #0
 800f8b6:	f001 be57 	b.w	8011568 <dwt_ioctl+0x1e10>
 800f8ba:	2202      	movs	r2, #2
 800f8bc:	49c0      	ldr	r1, [pc, #768]	; (800fbc0 <dwt_ioctl+0x468>)
 800f8be:	f7fd fc1f 	bl	800d100 <dwt_read8bitoffsetreg>
 800f8c2:	2803      	cmp	r0, #3
 800f8c4:	d802      	bhi.n	800f8cc <dwt_ioctl+0x174>
 800f8c6:	2500      	movs	r5, #0
 800f8c8:	f001 be4e 	b.w	8011568 <dwt_ioctl+0x1e10>
 800f8cc:	f7f0 fe92 	bl	80005f4 <decamutexon>
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	2302      	movs	r3, #2
 800f8d4:	9301      	str	r3, [sp, #4]
 800f8d6:	2500      	movs	r5, #0
 800f8d8:	9500      	str	r5, [sp, #0]
 800f8da:	462b      	mov	r3, r5
 800f8dc:	462a      	mov	r2, r5
 800f8de:	4629      	mov	r1, r5
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	f7fd fb30 	bl	800cf46 <dwt_xfer3xxx>
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f7f0 fe95 	bl	8000616 <decamutexoff>
 800f8ec:	f001 be3c 	b.w	8011568 <dwt_ioctl+0x1e10>
 800f8f0:	2c00      	cmp	r4, #0
 800f8f2:	f001 863d 	beq.w	8011570 <dwt_ioctl+0x1e18>
 800f8f6:	7824      	ldrb	r4, [r4, #0]
 800f8f8:	f014 0f1d 	tst.w	r4, #29
 800f8fc:	d063      	beq.n	800f9c6 <dwt_ioctl+0x26e>
 800f8fe:	f014 0f01 	tst.w	r4, #1
 800f902:	d025      	beq.n	800f950 <dwt_ioctl+0x1f8>
 800f904:	f014 0f02 	tst.w	r4, #2
 800f908:	f04f 0302 	mov.w	r3, #2
 800f90c:	9301      	str	r3, [sp, #4]
 800f90e:	f04f 0200 	mov.w	r2, #0
 800f912:	9200      	str	r2, [sp, #0]
 800f914:	4613      	mov	r3, r2
 800f916:	bf14      	ite	ne
 800f918:	210d      	movne	r1, #13
 800f91a:	2103      	moveq	r1, #3
 800f91c:	f7fd fb13 	bl	800cf46 <dwt_xfer3xxx>
 800f920:	2203      	movs	r2, #3
 800f922:	2144      	movs	r1, #68	; 0x44
 800f924:	4630      	mov	r0, r6
 800f926:	f7fd fbeb 	bl	800d100 <dwt_read8bitoffsetreg>
 800f92a:	f010 0f08 	tst.w	r0, #8
 800f92e:	bf08      	it	eq
 800f930:	2500      	moveq	r5, #0
 800f932:	f001 8619 	beq.w	8011568 <dwt_ioctl+0x1e10>
 800f936:	2302      	movs	r3, #2
 800f938:	9301      	str	r3, [sp, #4]
 800f93a:	2100      	movs	r1, #0
 800f93c:	9100      	str	r1, [sp, #0]
 800f93e:	460b      	mov	r3, r1
 800f940:	460a      	mov	r2, r1
 800f942:	4630      	mov	r0, r6
 800f944:	f7fd faff 	bl	800cf46 <dwt_xfer3xxx>
 800f948:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f94c:	f001 be0c 	b.w	8011568 <dwt_ioctl+0x1e10>
 800f950:	f014 0f08 	tst.w	r4, #8
 800f954:	d111      	bne.n	800f97a <dwt_ioctl+0x222>
 800f956:	f014 0f10 	tst.w	r4, #16
 800f95a:	d121      	bne.n	800f9a0 <dwt_ioctl+0x248>
 800f95c:	f014 0f02 	tst.w	r4, #2
 800f960:	f04f 0302 	mov.w	r3, #2
 800f964:	9301      	str	r3, [sp, #4]
 800f966:	f04f 0200 	mov.w	r2, #0
 800f96a:	9200      	str	r2, [sp, #0]
 800f96c:	4613      	mov	r3, r2
 800f96e:	bf14      	ite	ne
 800f970:	2110      	movne	r1, #16
 800f972:	2109      	moveq	r1, #9
 800f974:	f7fd fae7 	bl	800cf46 <dwt_xfer3xxx>
 800f978:	e7d2      	b.n	800f920 <dwt_ioctl+0x1c8>
 800f97a:	2100      	movs	r1, #0
 800f97c:	f7fe f85f 	bl	800da3e <_dwt_adjust_delaytime>
 800f980:	f014 0f02 	tst.w	r4, #2
 800f984:	f04f 0302 	mov.w	r3, #2
 800f988:	9301      	str	r3, [sp, #4]
 800f98a:	f04f 0200 	mov.w	r2, #0
 800f98e:	9200      	str	r2, [sp, #0]
 800f990:	4613      	mov	r3, r2
 800f992:	bf14      	ite	ne
 800f994:	210f      	movne	r1, #15
 800f996:	2107      	moveq	r1, #7
 800f998:	4630      	mov	r0, r6
 800f99a:	f7fd fad4 	bl	800cf46 <dwt_xfer3xxx>
 800f99e:	e7bf      	b.n	800f920 <dwt_ioctl+0x1c8>
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	f7fe f84c 	bl	800da3e <_dwt_adjust_delaytime>
 800f9a6:	f014 0f02 	tst.w	r4, #2
 800f9aa:	f04f 0302 	mov.w	r3, #2
 800f9ae:	9301      	str	r3, [sp, #4]
 800f9b0:	f04f 0200 	mov.w	r2, #0
 800f9b4:	9200      	str	r2, [sp, #0]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	bf14      	ite	ne
 800f9ba:	210e      	movne	r1, #14
 800f9bc:	2105      	moveq	r1, #5
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f7fd fac1 	bl	800cf46 <dwt_xfer3xxx>
 800f9c4:	e7ac      	b.n	800f920 <dwt_ioctl+0x1c8>
 800f9c6:	f014 0f20 	tst.w	r4, #32
 800f9ca:	d010      	beq.n	800f9ee <dwt_ioctl+0x296>
 800f9cc:	f014 0f02 	tst.w	r4, #2
 800f9d0:	f04f 0302 	mov.w	r3, #2
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	f04f 0500 	mov.w	r5, #0
 800f9da:	9500      	str	r5, [sp, #0]
 800f9dc:	462b      	mov	r3, r5
 800f9de:	462a      	mov	r2, r5
 800f9e0:	bf14      	ite	ne
 800f9e2:	2111      	movne	r1, #17
 800f9e4:	210b      	moveq	r1, #11
 800f9e6:	f7fd faae 	bl	800cf46 <dwt_xfer3xxx>
 800f9ea:	f001 bdbd 	b.w	8011568 <dwt_ioctl+0x1e10>
 800f9ee:	f014 0f02 	tst.w	r4, #2
 800f9f2:	f04f 0302 	mov.w	r3, #2
 800f9f6:	9301      	str	r3, [sp, #4]
 800f9f8:	f04f 0500 	mov.w	r5, #0
 800f9fc:	9500      	str	r5, [sp, #0]
 800f9fe:	462b      	mov	r3, r5
 800fa00:	462a      	mov	r2, r5
 800fa02:	bf14      	ite	ne
 800fa04:	210c      	movne	r1, #12
 800fa06:	2101      	moveq	r1, #1
 800fa08:	f7fd fa9d 	bl	800cf46 <dwt_xfer3xxx>
 800fa0c:	f001 bdac 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fa10:	2c00      	cmp	r4, #0
 800fa12:	f001 85af 	beq.w	8011574 <dwt_ioctl+0x1e1c>
 800fa16:	6823      	ldr	r3, [r4, #0]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	2128      	movs	r1, #40	; 0x28
 800fa1c:	f7fd fffa 	bl	800da14 <dwt_write32bitoffsetreg>
 800fa20:	2500      	movs	r5, #0
 800fa22:	f001 bda1 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fa26:	6823      	ldr	r3, [r4, #0]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	4966      	ldr	r1, [pc, #408]	; (800fbc4 <dwt_ioctl+0x46c>)
 800fa2c:	f7fd fff2 	bl	800da14 <dwt_write32bitoffsetreg>
 800fa30:	6863      	ldr	r3, [r4, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	4964      	ldr	r1, [pc, #400]	; (800fbc8 <dwt_ioctl+0x470>)
 800fa36:	4630      	mov	r0, r6
 800fa38:	f7fd ffec 	bl	800da14 <dwt_write32bitoffsetreg>
 800fa3c:	68a3      	ldr	r3, [r4, #8]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	4962      	ldr	r1, [pc, #392]	; (800fbcc <dwt_ioctl+0x474>)
 800fa42:	4630      	mov	r0, r6
 800fa44:	f7fd ffe6 	bl	800da14 <dwt_write32bitoffsetreg>
 800fa48:	68e3      	ldr	r3, [r4, #12]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4960      	ldr	r1, [pc, #384]	; (800fbd0 <dwt_ioctl+0x478>)
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7fd ffe0 	bl	800da14 <dwt_write32bitoffsetreg>
 800fa54:	2500      	movs	r5, #0
 800fa56:	f001 bd87 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fa5a:	2c00      	cmp	r4, #0
 800fa5c:	f001 858c 	beq.w	8011578 <dwt_ioctl+0x1e20>
 800fa60:	8823      	ldrh	r3, [r4, #0]
 800fa62:	6865      	ldr	r5, [r4, #4]
 800fa64:	2d03      	cmp	r5, #3
 800fa66:	f201 8589 	bhi.w	801157c <dwt_ioctl+0x1e24>
 800fa6a:	e8df f005 	tbb	[pc, r5]
 800fa6e:	0802      	.short	0x0802
 800fa70:	160f      	.short	0x160f
 800fa72:	2200      	movs	r2, #0
 800fa74:	4957      	ldr	r1, [pc, #348]	; (800fbd4 <dwt_ioctl+0x47c>)
 800fa76:	f7fd ff62 	bl	800d93e <dwt_write16bitoffsetreg>
 800fa7a:	f001 bd75 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fa7e:	2202      	movs	r2, #2
 800fa80:	4954      	ldr	r1, [pc, #336]	; (800fbd4 <dwt_ioctl+0x47c>)
 800fa82:	f7fd ff5c 	bl	800d93e <dwt_write16bitoffsetreg>
 800fa86:	2500      	movs	r5, #0
 800fa88:	f001 bd6e 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	4952      	ldr	r1, [pc, #328]	; (800fbd8 <dwt_ioctl+0x480>)
 800fa90:	f7fd ff55 	bl	800d93e <dwt_write16bitoffsetreg>
 800fa94:	2500      	movs	r5, #0
 800fa96:	f001 bd67 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fa9a:	2202      	movs	r2, #2
 800fa9c:	494e      	ldr	r1, [pc, #312]	; (800fbd8 <dwt_ioctl+0x480>)
 800fa9e:	f7fd ff4e 	bl	800d93e <dwt_write16bitoffsetreg>
 800faa2:	2500      	movs	r5, #0
 800faa4:	f001 bd60 	b.w	8011568 <dwt_ioctl+0x1e10>
 800faa8:	2c00      	cmp	r4, #0
 800faaa:	f001 8569 	beq.w	8011580 <dwt_ioctl+0x1e28>
 800faae:	7823      	ldrb	r3, [r4, #0]
 800fab0:	005b      	lsls	r3, r3, #1
 800fab2:	f003 0306 	and.w	r3, r3, #6
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	f06f 0306 	mvn.w	r3, #6
 800fabc:	2200      	movs	r2, #0
 800fabe:	4947      	ldr	r1, [pc, #284]	; (800fbdc <dwt_ioctl+0x484>)
 800fac0:	f7fe fcae 	bl	800e420 <dwt_modify32bitoffsetreg>
 800fac4:	2500      	movs	r5, #0
 800fac6:	f001 bd4f 	b.w	8011568 <dwt_ioctl+0x1e10>
 800faca:	f7fe fccd 	bl	800e468 <ull_enablegpioclocks>
 800face:	2500      	movs	r5, #0
 800fad0:	f001 bd4a 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fad4:	2c00      	cmp	r4, #0
 800fad6:	f001 8555 	beq.w	8011584 <dwt_ioctl+0x1e2c>
 800fada:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fadc:	7b1b      	ldrb	r3, [r3, #12]
 800fade:	7023      	strb	r3, [r4, #0]
 800fae0:	2500      	movs	r5, #0
 800fae2:	f001 bd41 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fae6:	2c00      	cmp	r4, #0
 800fae8:	f001 854e 	beq.w	8011588 <dwt_ioctl+0x1e30>
 800faec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800faee:	7a5b      	ldrb	r3, [r3, #9]
 800faf0:	7023      	strb	r3, [r4, #0]
 800faf2:	2500      	movs	r5, #0
 800faf4:	f001 bd38 	b.w	8011568 <dwt_ioctl+0x1e10>
 800faf8:	2c00      	cmp	r4, #0
 800fafa:	f001 8547 	beq.w	801158c <dwt_ioctl+0x1e34>
 800fafe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fb00:	7a9b      	ldrb	r3, [r3, #10]
 800fb02:	7023      	strb	r3, [r4, #0]
 800fb04:	2500      	movs	r5, #0
 800fb06:	f001 bd2f 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fb0a:	2c00      	cmp	r4, #0
 800fb0c:	f001 8540 	beq.w	8011590 <dwt_ioctl+0x1e38>
 800fb10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6023      	str	r3, [r4, #0]
 800fb16:	2500      	movs	r5, #0
 800fb18:	f001 bd26 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fb1c:	2c00      	cmp	r4, #0
 800fb1e:	f001 8539 	beq.w	8011594 <dwt_ioctl+0x1e3c>
 800fb22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	6023      	str	r3, [r4, #0]
 800fb28:	2500      	movs	r5, #0
 800fb2a:	f001 bd1d 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fb2e:	f7fe fae1 	bl	800e0f4 <ull_signal_rx_buff_free>
 800fb32:	2500      	movs	r5, #0
 800fb34:	f001 bd18 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fb38:	2c00      	cmp	r4, #0
 800fb3a:	f001 852d 	beq.w	8011598 <dwt_ioctl+0x1e40>
 800fb3e:	6821      	ldr	r1, [r4, #0]
 800fb40:	f7fd ffa3 	bl	800da8a <ull_setrxaftertxdelay>
 800fb44:	2500      	movs	r5, #0
 800fb46:	f001 bd0f 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fb4a:	2c00      	cmp	r4, #0
 800fb4c:	f001 8526 	beq.w	801159c <dwt_ioctl+0x1e44>
 800fb50:	6862      	ldr	r2, [r4, #4]
 800fb52:	7821      	ldrb	r1, [r4, #0]
 800fb54:	f7fe fde8 	bl	800e728 <ull_enablespicrccheck>
 800fb58:	2500      	movs	r5, #0
 800fb5a:	f001 bd05 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fb5e:	2c00      	cmp	r4, #0
 800fb60:	f001 851e 	beq.w	80115a0 <dwt_ioctl+0x1e48>
 800fb64:	6865      	ldr	r5, [r4, #4]
 800fb66:	7823      	ldrb	r3, [r4, #0]
 800fb68:	2203      	movs	r2, #3
 800fb6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800fb6e:	f7fe f935 	bl	800dddc <dwt_write8bitoffsetreg>
 800fb72:	b94d      	cbnz	r5, 800fb88 <dwt_ioctl+0x430>
 800fb74:	2200      	movs	r2, #0
 800fb76:	9200      	str	r2, [sp, #0]
 800fb78:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800fb7c:	2110      	movs	r1, #16
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f7ff f94e 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800fb84:	f001 bcf0 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fb88:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb92:	2200      	movs	r2, #0
 800fb94:	2110      	movs	r1, #16
 800fb96:	4630      	mov	r0, r6
 800fb98:	f7fe fc42 	bl	800e420 <dwt_modify32bitoffsetreg>
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	f001 bce3 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fba2:	2200      	movs	r2, #0
 800fba4:	4611      	mov	r1, r2
 800fba6:	f7fd fa56 	bl	800d056 <dwt_read32bitoffsetreg>
 800fbaa:	68b2      	ldr	r2, [r6, #8]
 800fbac:	6813      	ldr	r3, [r2, #0]
 800fbae:	4043      	eors	r3, r0
 800fbb0:	6852      	ldr	r2, [r2, #4]
 800fbb2:	4213      	tst	r3, r2
 800fbb4:	bf14      	ite	ne
 800fbb6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800fbba:	2500      	moveq	r5, #0
 800fbbc:	f001 bcd4 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fbc0:	000f0030 	.word	0x000f0030
 800fbc4:	00010054 	.word	0x00010054
 800fbc8:	00010058 	.word	0x00010058
 800fbcc:	0001005c 	.word	0x0001005c
 800fbd0:	00010060 	.word	0x00010060
 800fbd4:	0001000c 	.word	0x0001000c
 800fbd8:	00010010 	.word	0x00010010
 800fbdc:	00010008 	.word	0x00010008
 800fbe0:	2c00      	cmp	r4, #0
 800fbe2:	f001 84df 	beq.w	80115a4 <dwt_ioctl+0x1e4c>
 800fbe6:	7821      	ldrb	r1, [r4, #0]
 800fbe8:	f7fe fdba 	bl	800e760 <ull_configciadiag>
 800fbec:	2500      	movs	r5, #0
 800fbee:	f001 bcbb 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fbf2:	b942      	cbnz	r2, 800fc06 <dwt_ioctl+0x4ae>
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	9200      	str	r2, [sp, #0]
 800fbf8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800fbfc:	49d2      	ldr	r1, [pc, #840]	; (800ff48 <dwt_ioctl+0x7f0>)
 800fbfe:	f7ff f90f 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800fc02:	f001 bcb1 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc10:	2200      	movs	r2, #0
 800fc12:	49cd      	ldr	r1, [pc, #820]	; (800ff48 <dwt_ioctl+0x7f0>)
 800fc14:	f7ff f904 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800fc18:	2500      	movs	r5, #0
 800fc1a:	f001 bca5 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc1e:	f002 0201 	and.w	r2, r2, #1
 800fc22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc26:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800fc2a:	2a00      	cmp	r2, #0
 800fc2c:	bf08      	it	eq
 800fc2e:	460b      	moveq	r3, r1
 800fc30:	02d2      	lsls	r2, r2, #11
 800fc32:	f015 0f02 	tst.w	r5, #2
 800fc36:	bf12      	itee	ne
 800fc38:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800fc3c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc40:	b29b      	uxtheq	r3, r3
 800fc42:	9200      	str	r2, [sp, #0]
 800fc44:	2200      	movs	r2, #0
 800fc46:	49c0      	ldr	r1, [pc, #768]	; (800ff48 <dwt_ioctl+0x7f0>)
 800fc48:	f7ff f8ea 	bl	800ee20 <dwt_modify16bitoffsetreg>
 800fc4c:	2500      	movs	r5, #0
 800fc4e:	f001 bc8b 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc52:	4611      	mov	r1, r2
 800fc54:	f7fd ff2e 	bl	800dab4 <ull_setfinegraintxseq>
 800fc58:	2500      	movs	r5, #0
 800fc5a:	f001 bc85 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc5e:	4611      	mov	r1, r2
 800fc60:	f7fd ff3c 	bl	800dadc <ull_setlnapamode>
 800fc64:	2500      	movs	r5, #0
 800fc66:	f001 bc7f 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc6a:	2c00      	cmp	r4, #0
 800fc6c:	f001 849c 	beq.w	80115a8 <dwt_ioctl+0x1e50>
 800fc70:	2200      	movs	r2, #0
 800fc72:	49b6      	ldr	r1, [pc, #728]	; (800ff4c <dwt_ioctl+0x7f4>)
 800fc74:	f7fd fa44 	bl	800d100 <dwt_read8bitoffsetreg>
 800fc78:	7020      	strb	r0, [r4, #0]
 800fc7a:	2500      	movs	r5, #0
 800fc7c:	f001 bc74 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc80:	4621      	mov	r1, r4
 800fc82:	f7fd ff4b 	bl	800db1c <ull_configurestskey>
 800fc86:	2500      	movs	r5, #0
 800fc88:	f001 bc6e 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc8c:	4621      	mov	r1, r4
 800fc8e:	f7fd ff69 	bl	800db64 <ull_configurestsiv>
 800fc92:	2500      	movs	r5, #0
 800fc94:	f001 bc68 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fc98:	f7fe fd98 	bl	800e7cc <ull_configurestsloadiv>
 800fc9c:	2500      	movs	r5, #0
 800fc9e:	f001 bc63 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fca2:	4611      	mov	r1, r2
 800fca4:	f7fd ff82 	bl	800dbac <ull_configmrxlut>
 800fca8:	2500      	movs	r5, #0
 800fcaa:	f001 bc5d 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fcae:	f7fe feb3 	bl	800ea18 <ull_restoreconfig>
 800fcb2:	2500      	movs	r5, #0
 800fcb4:	f001 bc58 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fcb8:	2c00      	cmp	r4, #0
 800fcba:	f001 8477 	beq.w	80115ac <dwt_ioctl+0x1e54>
 800fcbe:	7821      	ldrb	r1, [r4, #0]
 800fcc0:	f7ff f8c8 	bl	800ee54 <ull_configurestsmode>
 800fcc4:	2500      	movs	r5, #0
 800fcc6:	f001 bc4f 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fcca:	2c00      	cmp	r4, #0
 800fccc:	f001 8470 	beq.w	80115b0 <dwt_ioctl+0x1e58>
 800fcd0:	8821      	ldrh	r1, [r4, #0]
 800fcd2:	f7fd fe44 	bl	800d95e <ull_setrxantennadelay>
 800fcd6:	2500      	movs	r5, #0
 800fcd8:	f001 bc46 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fcdc:	2c00      	cmp	r4, #0
 800fcde:	f001 8469 	beq.w	80115b4 <dwt_ioctl+0x1e5c>
 800fce2:	f7fd f9e0 	bl	800d0a6 <ull_getrxantennadelay>
 800fce6:	8020      	strh	r0, [r4, #0]
 800fce8:	2500      	movs	r5, #0
 800fcea:	f001 bc3d 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fcee:	2c00      	cmp	r4, #0
 800fcf0:	f001 8462 	beq.w	80115b8 <dwt_ioctl+0x1e60>
 800fcf4:	8821      	ldrh	r1, [r4, #0]
 800fcf6:	f7fd fe3a 	bl	800d96e <ull_settxantennadelay>
 800fcfa:	2500      	movs	r5, #0
 800fcfc:	f001 bc34 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd00:	2c00      	cmp	r4, #0
 800fd02:	f001 845b 	beq.w	80115bc <dwt_ioctl+0x1e64>
 800fd06:	f7fd f9d5 	bl	800d0b4 <ull_gettxantennadelay>
 800fd0a:	8020      	strh	r0, [r4, #0]
 800fd0c:	2500      	movs	r5, #0
 800fd0e:	f001 bc2b 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd12:	2c00      	cmp	r4, #0
 800fd14:	f001 8454 	beq.w	80115c0 <dwt_ioctl+0x1e68>
 800fd18:	88a3      	ldrh	r3, [r4, #4]
 800fd1a:	88e2      	ldrh	r2, [r4, #6]
 800fd1c:	6821      	ldr	r1, [r4, #0]
 800fd1e:	9100      	str	r1, [sp, #0]
 800fd20:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800fd24:	f7fd fe00 	bl	800d928 <dwt_writetodevice>
 800fd28:	2500      	movs	r5, #0
 800fd2a:	f001 bc1d 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd2e:	2c00      	cmp	r4, #0
 800fd30:	f001 8448 	beq.w	80115c4 <dwt_ioctl+0x1e6c>
 800fd34:	88a3      	ldrh	r3, [r4, #4]
 800fd36:	88e2      	ldrh	r2, [r4, #6]
 800fd38:	6821      	ldr	r1, [r4, #0]
 800fd3a:	9100      	str	r1, [sp, #0]
 800fd3c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800fd40:	f7fd f97f 	bl	800d042 <dwt_readfromdevice>
 800fd44:	2500      	movs	r5, #0
 800fd46:	f001 bc0f 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd4a:	2c00      	cmp	r4, #0
 800fd4c:	f001 843c 	beq.w	80115c8 <dwt_ioctl+0x1e70>
 800fd50:	88e3      	ldrh	r3, [r4, #6]
 800fd52:	88a2      	ldrh	r2, [r4, #4]
 800fd54:	6821      	ldr	r1, [r4, #0]
 800fd56:	f7fe f80b 	bl	800dd70 <ull_readrxdata>
 800fd5a:	2500      	movs	r5, #0
 800fd5c:	f001 bc04 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd60:	2c00      	cmp	r4, #0
 800fd62:	f001 8433 	beq.w	80115cc <dwt_ioctl+0x1e74>
 800fd66:	88e3      	ldrh	r3, [r4, #6]
 800fd68:	6822      	ldr	r2, [r4, #0]
 800fd6a:	88a1      	ldrh	r1, [r4, #4]
 800fd6c:	f7fe f990 	bl	800e090 <ull_writetxdata>
 800fd70:	2500      	movs	r5, #0
 800fd72:	f001 bbf9 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd76:	4611      	mov	r1, r2
 800fd78:	f7ff fc56 	bl	800f628 <ull_rxenable>
 800fd7c:	2500      	movs	r5, #0
 800fd7e:	f001 bbf3 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd82:	2c00      	cmp	r4, #0
 800fd84:	f001 8424 	beq.w	80115d0 <dwt_ioctl+0x1e78>
 800fd88:	7923      	ldrb	r3, [r4, #4]
 800fd8a:	8862      	ldrh	r2, [r4, #2]
 800fd8c:	8821      	ldrh	r1, [r4, #0]
 800fd8e:	f7fe fc97 	bl	800e6c0 <ull_writetxfctrl>
 800fd92:	2500      	movs	r5, #0
 800fd94:	f001 bbe8 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fd98:	2c00      	cmp	r4, #0
 800fd9a:	f001 841b 	beq.w	80115d4 <dwt_ioctl+0x1e7c>
 800fd9e:	f7fd f98f 	bl	800d0c0 <ull_readclockoffset>
 800fda2:	8020      	strh	r0, [r4, #0]
 800fda4:	2500      	movs	r5, #0
 800fda6:	f001 bbdf 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fdaa:	2c00      	cmp	r4, #0
 800fdac:	f001 8414 	beq.w	80115d8 <dwt_ioctl+0x1e80>
 800fdb0:	f7fd f9b4 	bl	800d11c <ull_readcarrierintegrator>
 800fdb4:	6020      	str	r0, [r4, #0]
 800fdb6:	2500      	movs	r5, #0
 800fdb8:	f001 bbd6 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fdbc:	f7fe f866 	bl	800de8c <ull_clearaonconfig>
 800fdc0:	2500      	movs	r5, #0
 800fdc2:	f001 bbd1 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fdc6:	2c00      	cmp	r4, #0
 800fdc8:	f001 8408 	beq.w	80115dc <dwt_ioctl+0x1e84>
 800fdcc:	8861      	ldrh	r1, [r4, #2]
 800fdce:	f7fe fe53 	bl	800ea78 <ull_calcbandwidthadj>
 800fdd2:	7020      	strb	r0, [r4, #0]
 800fdd4:	2500      	movs	r5, #0
 800fdd6:	f001 bbc7 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fdda:	4621      	mov	r1, r4
 800fddc:	f7fd f9be 	bl	800d15c <ull_readdiagnostics>
 800fde0:	2500      	movs	r5, #0
 800fde2:	f001 bbc1 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fde6:	2c00      	cmp	r4, #0
 800fde8:	f001 83fa 	beq.w	80115e0 <dwt_ioctl+0x1e88>
 800fdec:	2201      	movs	r2, #1
 800fdee:	2170      	movs	r1, #112	; 0x70
 800fdf0:	f7fd f931 	bl	800d056 <dwt_read32bitoffsetreg>
 800fdf4:	6020      	str	r0, [r4, #0]
 800fdf6:	2500      	movs	r5, #0
 800fdf8:	f001 bbb6 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fdfc:	2c00      	cmp	r4, #0
 800fdfe:	f001 83f1 	beq.w	80115e4 <dwt_ioctl+0x1e8c>
 800fe02:	2200      	movs	r2, #0
 800fe04:	2170      	movs	r1, #112	; 0x70
 800fe06:	f7fd f926 	bl	800d056 <dwt_read32bitoffsetreg>
 800fe0a:	6020      	str	r0, [r4, #0]
 800fe0c:	2500      	movs	r5, #0
 800fe0e:	f001 bbab 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fe12:	9400      	str	r4, [sp, #0]
 800fe14:	2305      	movs	r3, #5
 800fe16:	2200      	movs	r2, #0
 800fe18:	2170      	movs	r1, #112	; 0x70
 800fe1a:	f7fd f912 	bl	800d042 <dwt_readfromdevice>
 800fe1e:	2500      	movs	r5, #0
 800fe20:	f001 bba2 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fe24:	2c00      	cmp	r4, #0
 800fe26:	f001 83df 	beq.w	80115e8 <dwt_ioctl+0x1e90>
 800fe2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fe2c:	7b9b      	ldrb	r3, [r3, #14]
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d015      	beq.n	800fe5e <dwt_ioctl+0x706>
 800fe32:	2b03      	cmp	r3, #3
 800fe34:	d11a      	bne.n	800fe6c <dwt_ioctl+0x714>
 800fe36:	2216      	movs	r2, #22
 800fe38:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800fe3c:	f7fd f921 	bl	800d082 <dwt_read16bitoffsetreg>
 800fe40:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800fe44:	b283      	uxth	r3, r0
 800fe46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800fe4a:	d004      	beq.n	800fe56 <dwt_ioctl+0x6fe>
 800fe4c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800fe50:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800fe54:	b218      	sxth	r0, r3
 800fe56:	8020      	strh	r0, [r4, #0]
 800fe58:	2500      	movs	r5, #0
 800fe5a:	f001 bb85 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fe5e:	2202      	movs	r2, #2
 800fe60:	493b      	ldr	r1, [pc, #236]	; (800ff50 <dwt_ioctl+0x7f8>)
 800fe62:	f7fd f90e 	bl	800d082 <dwt_read16bitoffsetreg>
 800fe66:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800fe6a:	e7eb      	b.n	800fe44 <dwt_ioctl+0x6ec>
 800fe6c:	2202      	movs	r2, #2
 800fe6e:	4939      	ldr	r1, [pc, #228]	; (800ff54 <dwt_ioctl+0x7fc>)
 800fe70:	f7fd f907 	bl	800d082 <dwt_read16bitoffsetreg>
 800fe74:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800fe78:	e7e4      	b.n	800fe44 <dwt_ioctl+0x6ec>
 800fe7a:	9400      	str	r4, [sp, #0]
 800fe7c:	2306      	movs	r3, #6
 800fe7e:	2200      	movs	r2, #0
 800fe80:	4935      	ldr	r1, [pc, #212]	; (800ff58 <dwt_ioctl+0x800>)
 800fe82:	f7fd f8de 	bl	800d042 <dwt_readfromdevice>
 800fe86:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	db06      	blt.n	800fe9c <dwt_ioctl+0x744>
 800fe8e:	7963      	ldrb	r3, [r4, #5]
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	7163      	strb	r3, [r4, #5]
 800fe96:	2500      	movs	r5, #0
 800fe98:	f001 bb66 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fe9c:	23ff      	movs	r3, #255	; 0xff
 800fe9e:	70a3      	strb	r3, [r4, #2]
 800fea0:	70e3      	strb	r3, [r4, #3]
 800fea2:	7123      	strb	r3, [r4, #4]
 800fea4:	7163      	strb	r3, [r4, #5]
 800fea6:	e7f2      	b.n	800fe8e <dwt_ioctl+0x736>
 800fea8:	2c00      	cmp	r4, #0
 800feaa:	f001 839f 	beq.w	80115ec <dwt_ioctl+0x1e94>
 800feae:	2201      	movs	r2, #1
 800feb0:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800feb4:	f7fd f924 	bl	800d100 <dwt_read8bitoffsetreg>
 800feb8:	7020      	strb	r0, [r4, #0]
 800feba:	2500      	movs	r5, #0
 800febc:	f001 bb54 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fec0:	2c00      	cmp	r4, #0
 800fec2:	f001 8395 	beq.w	80115f0 <dwt_ioctl+0x1e98>
 800fec6:	2200      	movs	r2, #0
 800fec8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800fecc:	f7fd f918 	bl	800d100 <dwt_read8bitoffsetreg>
 800fed0:	7020      	strb	r0, [r4, #0]
 800fed2:	2500      	movs	r5, #0
 800fed4:	f001 bb48 	b.w	8011568 <dwt_ioctl+0x1e10>
 800fed8:	2c00      	cmp	r4, #0
 800feda:	f001 838b 	beq.w	80115f4 <dwt_ioctl+0x1e9c>
 800fede:	88a2      	ldrh	r2, [r4, #4]
 800fee0:	6821      	ldr	r1, [r4, #0]
 800fee2:	f7fe fb17 	bl	800e514 <_dwt_otpprogword32>
 800fee6:	2500      	movs	r5, #0
 800fee8:	f001 bb3e 	b.w	8011568 <dwt_ioctl+0x1e10>
 800feec:	2c00      	cmp	r4, #0
 800feee:	f001 8383 	beq.w	80115f8 <dwt_ioctl+0x1ea0>
 800fef2:	6825      	ldr	r5, [r4, #0]
 800fef4:	88a4      	ldrh	r4, [r4, #4]
 800fef6:	4622      	mov	r2, r4
 800fef8:	4629      	mov	r1, r5
 800fefa:	f7fe fb0b 	bl	800e514 <_dwt_otpprogword32>
 800fefe:	4621      	mov	r1, r4
 800ff00:	4630      	mov	r0, r6
 800ff02:	f7fd fd65 	bl	800d9d0 <_dwt_otpread>
 800ff06:	1a2d      	subs	r5, r5, r0
 800ff08:	bf18      	it	ne
 800ff0a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800ff0e:	f001 bb2b 	b.w	8011568 <dwt_ioctl+0x1e10>
 800ff12:	2a02      	cmp	r2, #2
 800ff14:	d00f      	beq.n	800ff36 <dwt_ioctl+0x7de>
 800ff16:	4c11      	ldr	r4, [pc, #68]	; (800ff5c <dwt_ioctl+0x804>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f7fd ff5c 	bl	800dddc <dwt_write8bitoffsetreg>
 800ff24:	2302      	movs	r3, #2
 800ff26:	2200      	movs	r2, #0
 800ff28:	4621      	mov	r1, r4
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	f7fd ff56 	bl	800dddc <dwt_write8bitoffsetreg>
 800ff30:	2500      	movs	r5, #0
 800ff32:	f001 bb19 	b.w	8011568 <dwt_ioctl+0x1e10>
 800ff36:	2300      	movs	r3, #0
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	23fe      	movs	r3, #254	; 0xfe
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	4902      	ldr	r1, [pc, #8]	; (800ff48 <dwt_ioctl+0x7f0>)
 800ff40:	f7fe fbde 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ff44:	e7e7      	b.n	800ff16 <dwt_ioctl+0x7be>
 800ff46:	bf00      	nop
 800ff48:	00110008 	.word	0x00110008
 800ff4c:	0007001c 	.word	0x0007001c
 800ff50:	00180014 	.word	0x00180014
 800ff54:	000c001c 	.word	0x000c001c
 800ff58:	000c0018 	.word	0x000c0018
 800ff5c:	000a0004 	.word	0x000a0004
 800ff60:	2c00      	cmp	r4, #0
 800ff62:	f001 834b 	beq.w	80115fc <dwt_ioctl+0x1ea4>
 800ff66:	8824      	ldrh	r4, [r4, #0]
 800ff68:	b2e2      	uxtb	r2, r4
 800ff6a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ff6e:	f7fd ffe1 	bl	800df34 <ull_aon_write>
 800ff72:	0a22      	lsrs	r2, r4, #8
 800ff74:	f240 1103 	movw	r1, #259	; 0x103
 800ff78:	4630      	mov	r0, r6
 800ff7a:	f7fd ffdb 	bl	800df34 <ull_aon_write>
 800ff7e:	2500      	movs	r5, #0
 800ff80:	f001 baf2 	b.w	8011568 <dwt_ioctl+0x1e10>
 800ff84:	2c00      	cmp	r4, #0
 800ff86:	f001 833b 	beq.w	8011600 <dwt_ioctl+0x1ea8>
 800ff8a:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80102fc <dwt_ioctl+0xba4>
 800ff8e:	2310      	movs	r3, #16
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	23ff      	movs	r3, #255	; 0xff
 800ff94:	2200      	movs	r2, #0
 800ff96:	4641      	mov	r1, r8
 800ff98:	f7fe fbb2 	bl	800e700 <dwt_modify8bitoffsetreg>
 800ff9c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7fd ffa7 	bl	800def4 <ull_aon_read>
 800ffa6:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800ffaa:	462a      	mov	r2, r5
 800ffac:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	f7fd ffbf 	bl	800df34 <ull_aon_write>
 800ffb6:	f045 0204 	orr.w	r2, r5, #4
 800ffba:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f7fd ffb8 	bl	800df34 <ull_aon_write>
 800ffc4:	2002      	movs	r0, #2
 800ffc6:	f7f0 fb33 	bl	8000630 <deca_sleep>
 800ffca:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f7fd ff90 	bl	800def4 <ull_aon_read>
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	f240 110f 	movw	r1, #271	; 0x10f
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f7fd ff8a 	bl	800def4 <ull_aon_read>
 800ffe0:	4681      	mov	r9, r0
 800ffe2:	462a      	mov	r2, r5
 800ffe4:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ffe8:	4630      	mov	r0, r6
 800ffea:	f7fd ffa3 	bl	800df34 <ull_aon_write>
 800ffee:	2500      	movs	r5, #0
 800fff0:	9500      	str	r5, [sp, #0]
 800fff2:	23ef      	movs	r3, #239	; 0xef
 800fff4:	462a      	mov	r2, r5
 800fff6:	4641      	mov	r1, r8
 800fff8:	4630      	mov	r0, r6
 800fffa:	f7fe fb81 	bl	800e700 <dwt_modify8bitoffsetreg>
 800fffe:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8010002:	8027      	strh	r7, [r4, #0]
 8010004:	f001 bab0 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010008:	2c00      	cmp	r4, #0
 801000a:	f001 82fb 	beq.w	8011604 <dwt_ioctl+0x1eac>
 801000e:	78a2      	ldrb	r2, [r4, #2]
 8010010:	8821      	ldrh	r1, [r4, #0]
 8010012:	f7fd ffb7 	bl	800df84 <ull_configuresleep>
 8010016:	2500      	movs	r5, #0
 8010018:	f001 baa6 	b.w	8011568 <dwt_ioctl+0x1e10>
 801001c:	2c00      	cmp	r4, #0
 801001e:	f001 82f3 	beq.w	8011608 <dwt_ioctl+0x1eb0>
 8010022:	6824      	ldr	r4, [r4, #0]
 8010024:	f7fd ff32 	bl	800de8c <ull_clearaonconfig>
 8010028:	2001      	movs	r0, #1
 801002a:	f7f0 fb01 	bl	8000630 <deca_sleep>
 801002e:	2303      	movs	r3, #3
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	23ff      	movs	r3, #255	; 0xff
 8010034:	2200      	movs	r2, #0
 8010036:	49af      	ldr	r1, [pc, #700]	; (80102f4 <dwt_ioctl+0xb9c>)
 8010038:	4630      	mov	r0, r6
 801003a:	f7fe fb61 	bl	800e700 <dwt_modify8bitoffsetreg>
 801003e:	b97c      	cbnz	r4, 8010060 <dwt_ioctl+0x908>
 8010040:	4630      	mov	r0, r6
 8010042:	f7ff fb61 	bl	800f708 <ull_softreset_no_sema_fcmd>
 8010046:	2001      	movs	r0, #1
 8010048:	f7f0 faf2 	bl	8000630 <deca_sleep>
 801004c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801004e:	2500      	movs	r5, #0
 8010050:	739d      	strb	r5, [r3, #14]
 8010052:	2202      	movs	r2, #2
 8010054:	821a      	strh	r2, [r3, #16]
 8010056:	751d      	strb	r5, [r3, #20]
 8010058:	755d      	strb	r5, [r3, #21]
 801005a:	73dd      	strb	r5, [r3, #15]
 801005c:	f001 ba84 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010060:	4630      	mov	r0, r6
 8010062:	f7ff fb65 	bl	800f730 <ull_softreset_fcmd>
 8010066:	e7ee      	b.n	8010046 <dwt_ioctl+0x8ee>
 8010068:	2c00      	cmp	r4, #0
 801006a:	f001 82cf 	beq.w	801160c <dwt_ioctl+0x1eb4>
 801006e:	7823      	ldrb	r3, [r4, #0]
 8010070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010074:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010076:	7353      	strb	r3, [r2, #13]
 8010078:	2200      	movs	r2, #0
 801007a:	499f      	ldr	r1, [pc, #636]	; (80102f8 <dwt_ioctl+0xba0>)
 801007c:	f7fd feae 	bl	800dddc <dwt_write8bitoffsetreg>
 8010080:	2500      	movs	r5, #0
 8010082:	f001 ba71 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010086:	2c00      	cmp	r4, #0
 8010088:	f001 82c2 	beq.w	8011610 <dwt_ioctl+0x1eb8>
 801008c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801008e:	7b5b      	ldrb	r3, [r3, #13]
 8010090:	7023      	strb	r3, [r4, #0]
 8010092:	2500      	movs	r5, #0
 8010094:	f001 ba68 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010098:	2101      	movs	r1, #1
 801009a:	f7fe f9f5 	bl	800e488 <ull_enable_rf_tx>
 801009e:	4630      	mov	r0, r6
 80100a0:	f7fe fa26 	bl	800e4f0 <ull_enable_rftx_blocks>
 80100a4:	2101      	movs	r1, #1
 80100a6:	4630      	mov	r0, r6
 80100a8:	f7fd fc68 	bl	800d97c <ull_force_clocks>
 80100ac:	220f      	movs	r2, #15
 80100ae:	2101      	movs	r1, #1
 80100b0:	4630      	mov	r0, r6
 80100b2:	f7fd fe39 	bl	800dd28 <ull_repeated_cw>
 80100b6:	2500      	movs	r5, #0
 80100b8:	f001 ba56 	b.w	8011568 <dwt_ioctl+0x1e10>
 80100bc:	2c00      	cmp	r4, #0
 80100be:	f001 82a9 	beq.w	8011614 <dwt_ioctl+0x1ebc>
 80100c2:	6862      	ldr	r2, [r4, #4]
 80100c4:	6821      	ldr	r1, [r4, #0]
 80100c6:	f7fd fe2f 	bl	800dd28 <ull_repeated_cw>
 80100ca:	2500      	movs	r5, #0
 80100cc:	f001 ba4c 	b.w	8011568 <dwt_ioctl+0x1e10>
 80100d0:	2c00      	cmp	r4, #0
 80100d2:	f001 82a1 	beq.w	8011618 <dwt_ioctl+0x1ec0>
 80100d6:	4d89      	ldr	r5, [pc, #548]	; (80102fc <dwt_ioctl+0xba4>)
 80100d8:	2200      	movs	r2, #0
 80100da:	4629      	mov	r1, r5
 80100dc:	f7fd f810 	bl	800d100 <dwt_read8bitoffsetreg>
 80100e0:	4680      	mov	r8, r0
 80100e2:	2302      	movs	r3, #2
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	23ff      	movs	r3, #255	; 0xff
 80100e8:	2200      	movs	r2, #0
 80100ea:	4629      	mov	r1, r5
 80100ec:	4630      	mov	r0, r6
 80100ee:	f7fe fb07 	bl	800e700 <dwt_modify8bitoffsetreg>
 80100f2:	2304      	movs	r3, #4
 80100f4:	2200      	movs	r2, #0
 80100f6:	4982      	ldr	r1, [pc, #520]	; (8010300 <dwt_ioctl+0xba8>)
 80100f8:	4630      	mov	r0, r6
 80100fa:	f7fd fe6f 	bl	800dddc <dwt_write8bitoffsetreg>
 80100fe:	2301      	movs	r3, #1
 8010100:	2200      	movs	r2, #0
 8010102:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010106:	4630      	mov	r0, r6
 8010108:	f7fd fe68 	bl	800dddc <dwt_write8bitoffsetreg>
 801010c:	4f7d      	ldr	r7, [pc, #500]	; (8010304 <dwt_ioctl+0xbac>)
 801010e:	2500      	movs	r5, #0
 8010110:	462a      	mov	r2, r5
 8010112:	4639      	mov	r1, r7
 8010114:	4630      	mov	r0, r6
 8010116:	f7fc fff3 	bl	800d100 <dwt_read8bitoffsetreg>
 801011a:	f010 0f01 	tst.w	r0, #1
 801011e:	d0f7      	beq.n	8010110 <dwt_ioctl+0x9b8>
 8010120:	2200      	movs	r2, #0
 8010122:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010126:	4630      	mov	r0, r6
 8010128:	f7fc ffab 	bl	800d082 <dwt_read16bitoffsetreg>
 801012c:	4605      	mov	r5, r0
 801012e:	2300      	movs	r3, #0
 8010130:	461a      	mov	r2, r3
 8010132:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010136:	4630      	mov	r0, r6
 8010138:	f7fd fe50 	bl	800dddc <dwt_write8bitoffsetreg>
 801013c:	2300      	movs	r3, #0
 801013e:	461a      	mov	r2, r3
 8010140:	496f      	ldr	r1, [pc, #444]	; (8010300 <dwt_ioctl+0xba8>)
 8010142:	4630      	mov	r0, r6
 8010144:	f7fd fe4a 	bl	800dddc <dwt_write8bitoffsetreg>
 8010148:	4643      	mov	r3, r8
 801014a:	2200      	movs	r2, #0
 801014c:	496b      	ldr	r1, [pc, #428]	; (80102fc <dwt_ioctl+0xba4>)
 801014e:	4630      	mov	r0, r6
 8010150:	f7fd fe44 	bl	800dddc <dwt_write8bitoffsetreg>
 8010154:	8025      	strh	r5, [r4, #0]
 8010156:	2500      	movs	r5, #0
 8010158:	f001 ba06 	b.w	8011568 <dwt_ioctl+0x1e10>
 801015c:	2c00      	cmp	r4, #0
 801015e:	f001 825d 	beq.w	801161c <dwt_ioctl+0x1ec4>
 8010162:	7923      	ldrb	r3, [r4, #4]
 8010164:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010166:	7a92      	ldrb	r2, [r2, #10]
 8010168:	1a9b      	subs	r3, r3, r2
 801016a:	ee07 3a90 	vmov	s15, r3
 801016e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010172:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8010308 <dwt_ioctl+0xbb0>
 8010176:	ee67 7a87 	vmul.f32	s15, s15, s14
 801017a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 801017e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010182:	edc4 7a00 	vstr	s15, [r4]
 8010186:	2500      	movs	r5, #0
 8010188:	f001 b9ee 	b.w	8011568 <dwt_ioctl+0x1e10>
 801018c:	2c00      	cmp	r4, #0
 801018e:	f001 8247 	beq.w	8011620 <dwt_ioctl+0x1ec8>
 8010192:	7923      	ldrb	r3, [r4, #4]
 8010194:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010196:	7a52      	ldrb	r2, [r2, #9]
 8010198:	1a9b      	subs	r3, r3, r2
 801019a:	ee07 3a90 	vmov	s15, r3
 801019e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101a2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801030c <dwt_ioctl+0xbb4>
 80101a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101aa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80101ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101b2:	eddf 6a57 	vldr	s13, [pc, #348]	; 8010310 <dwt_ioctl+0xbb8>
 80101b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80101ba:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80101be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101c2:	edc4 7a00 	vstr	s15, [r4]
 80101c6:	2500      	movs	r5, #0
 80101c8:	f001 b9ce 	b.w	8011568 <dwt_ioctl+0x1e10>
 80101cc:	2c00      	cmp	r4, #0
 80101ce:	f001 8229 	beq.w	8011624 <dwt_ioctl+0x1ecc>
 80101d2:	6824      	ldr	r4, [r4, #0]
 80101d4:	2101      	movs	r1, #1
 80101d6:	f7fe f957 	bl	800e488 <ull_enable_rf_tx>
 80101da:	4630      	mov	r0, r6
 80101dc:	f7fe f988 	bl	800e4f0 <ull_enable_rftx_blocks>
 80101e0:	2101      	movs	r1, #1
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7fd fbca 	bl	800d97c <ull_force_clocks>
 80101e8:	4621      	mov	r1, r4
 80101ea:	4630      	mov	r0, r6
 80101ec:	f7fe fca0 	bl	800eb30 <ull_repeated_frames>
 80101f0:	2500      	movs	r5, #0
 80101f2:	f001 b9b9 	b.w	8011568 <dwt_ioctl+0x1e10>
 80101f6:	2500      	movs	r5, #0
 80101f8:	9500      	str	r5, [sp, #0]
 80101fa:	23ef      	movs	r3, #239	; 0xef
 80101fc:	462a      	mov	r2, r5
 80101fe:	4945      	ldr	r1, [pc, #276]	; (8010314 <dwt_ioctl+0xbbc>)
 8010200:	f7fe fa7e 	bl	800e700 <dwt_modify8bitoffsetreg>
 8010204:	2105      	movs	r1, #5
 8010206:	4630      	mov	r0, r6
 8010208:	f7fd fbb8 	bl	800d97c <ull_force_clocks>
 801020c:	2101      	movs	r1, #1
 801020e:	4630      	mov	r0, r6
 8010210:	f7fd fd6c 	bl	800dcec <ull_disable_rf_tx>
 8010214:	4630      	mov	r0, r6
 8010216:	f7fd fd5f 	bl	800dcd8 <ull_disable_rftx_blocks>
 801021a:	f001 b9a5 	b.w	8011568 <dwt_ioctl+0x1e10>
 801021e:	2500      	movs	r5, #0
 8010220:	9500      	str	r5, [sp, #0]
 8010222:	23ef      	movs	r3, #239	; 0xef
 8010224:	462a      	mov	r2, r5
 8010226:	493b      	ldr	r1, [pc, #236]	; (8010314 <dwt_ioctl+0xbbc>)
 8010228:	f7fe fa6a 	bl	800e700 <dwt_modify8bitoffsetreg>
 801022c:	f001 b99c 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010230:	2c00      	cmp	r4, #0
 8010232:	f001 81f9 	beq.w	8011628 <dwt_ioctl+0x1ed0>
 8010236:	6821      	ldr	r1, [r4, #0]
 8010238:	f7fe fc7a 	bl	800eb30 <ull_repeated_frames>
 801023c:	2500      	movs	r5, #0
 801023e:	f001 b993 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010242:	2200      	movs	r2, #0
 8010244:	4934      	ldr	r1, [pc, #208]	; (8010318 <dwt_ioctl+0xbc0>)
 8010246:	f7fc ff1c 	bl	800d082 <dwt_read16bitoffsetreg>
 801024a:	f3c0 050b 	ubfx	r5, r0, #0, #12
 801024e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010252:	bf18      	it	ne
 8010254:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8010258:	b22d      	sxth	r5, r5
 801025a:	8025      	strh	r5, [r4, #0]
 801025c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801025e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010262:	1aed      	subs	r5, r5, r3
 8010264:	f001 b980 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010268:	2c00      	cmp	r4, #0
 801026a:	f001 81df 	beq.w	801162c <dwt_ioctl+0x1ed4>
 801026e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010272:	7a23      	ldrb	r3, [r4, #8]
 8010274:	f899 2013 	ldrb.w	r2, [r9, #19]
 8010278:	2aff      	cmp	r2, #255	; 0xff
 801027a:	f000 80fe 	beq.w	801047a <dwt_ioctl+0xd22>
 801027e:	bb93      	cbnz	r3, 80102e6 <dwt_ioctl+0xb8e>
 8010280:	f8d9 1000 	ldr.w	r1, [r9]
 8010284:	f7fd feb8 	bl	800dff8 <ull_update_nonce_GCM>
 8010288:	f899 300c 	ldrb.w	r3, [r9, #12]
 801028c:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8010290:	18d1      	adds	r1, r2, r3
 8010292:	f899 2012 	ldrb.w	r2, [r9, #18]
 8010296:	2a00      	cmp	r2, #0
 8010298:	d140      	bne.n	801031c <dwt_ioctl+0xbc4>
 801029a:	f899 0010 	ldrb.w	r0, [r9, #16]
 801029e:	2800      	cmp	r0, #0
 80102a0:	bf0b      	itete	eq
 80102a2:	227f      	moveq	r2, #127	; 0x7f
 80102a4:	f44f 6280 	movne.w	r2, #1024	; 0x400
 80102a8:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 80102ac:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 80102b0:	f899 0013 	ldrb.w	r0, [r9, #19]
 80102b4:	1a12      	subs	r2, r2, r0
 80102b6:	3a02      	subs	r2, #2
 80102b8:	4291      	cmp	r1, r2
 80102ba:	f200 80e7 	bhi.w	801048c <dwt_ioctl+0xd34>
 80102be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80102c2:	9200      	str	r2, [sp, #0]
 80102c4:	2200      	movs	r2, #0
 80102c6:	4629      	mov	r1, r5
 80102c8:	4630      	mov	r0, r6
 80102ca:	f7fd fb2d 	bl	800d928 <dwt_writetodevice>
 80102ce:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80102d2:	f899 200c 	ldrb.w	r2, [r9, #12]
 80102d6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80102da:	9100      	str	r1, [sp, #0]
 80102dc:	4629      	mov	r1, r5
 80102de:	4630      	mov	r0, r6
 80102e0:	f7fd fb22 	bl	800d928 <dwt_writetodevice>
 80102e4:	e02b      	b.n	801033e <dwt_ioctl+0xbe6>
 80102e6:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80102ea:	f8d9 1000 	ldr.w	r1, [r9]
 80102ee:	f7fd fe91 	bl	800e014 <ull_update_nonce_CCM>
 80102f2:	e7c9      	b.n	8010288 <dwt_ioctl+0xb30>
 80102f4:	00110004 	.word	0x00110004
 80102f8:	00090014 	.word	0x00090014
 80102fc:	00070048 	.word	0x00070048
 8010300:	00070034 	.word	0x00070034
 8010304:	00080004 	.word	0x00080004
 8010308:	3f866666 	.word	0x3f866666
 801030c:	3ecccccd 	.word	0x3ecccccd
 8010310:	437f0000 	.word	0x437f0000
 8010314:	000f0028 	.word	0x000f0028
 8010318:	00020008 	.word	0x00020008
 801031c:	2a01      	cmp	r2, #1
 801031e:	f040 80af 	bne.w	8010480 <dwt_ioctl+0xd28>
 8010322:	f899 3011 	ldrb.w	r3, [r9, #17]
 8010326:	2b00      	cmp	r3, #0
 8010328:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801032c:	bf08      	it	eq
 801032e:	237f      	moveq	r3, #127	; 0x7f
 8010330:	f899 2013 	ldrb.w	r2, [r9, #19]
 8010334:	1a9b      	subs	r3, r3, r2
 8010336:	3b02      	subs	r3, #2
 8010338:	4299      	cmp	r1, r3
 801033a:	f200 80a4 	bhi.w	8010486 <dwt_ioctl+0xd2e>
 801033e:	f899 2010 	ldrb.w	r2, [r9, #16]
 8010342:	1e53      	subs	r3, r2, #1
 8010344:	b2db      	uxtb	r3, r3
 8010346:	2b01      	cmp	r3, #1
 8010348:	d940      	bls.n	80103cc <dwt_ioctl+0xc74>
 801034a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801034e:	1e59      	subs	r1, r3, #1
 8010350:	b2c9      	uxtb	r1, r1
 8010352:	2901      	cmp	r1, #1
 8010354:	d947      	bls.n	80103e6 <dwt_ioctl+0xc8e>
 8010356:	2b04      	cmp	r3, #4
 8010358:	d04c      	beq.n	80103f4 <dwt_ioctl+0xc9c>
 801035a:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 801035e:	2200      	movs	r2, #0
 8010360:	49ba      	ldr	r1, [pc, #744]	; (801064c <dwt_ioctl+0xef4>)
 8010362:	4630      	mov	r0, r6
 8010364:	f7fd fb56 	bl	800da14 <dwt_write32bitoffsetreg>
 8010368:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801036c:	4ab8      	ldr	r2, [pc, #736]	; (8010650 <dwt_ioctl+0xef8>)
 801036e:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8010372:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801037a:	4313      	orrs	r3, r2
 801037c:	2200      	movs	r2, #0
 801037e:	49b5      	ldr	r1, [pc, #724]	; (8010654 <dwt_ioctl+0xefc>)
 8010380:	4630      	mov	r0, r6
 8010382:	f7fd fb47 	bl	800da14 <dwt_write32bitoffsetreg>
 8010386:	2301      	movs	r3, #1
 8010388:	2200      	movs	r2, #0
 801038a:	49b3      	ldr	r1, [pc, #716]	; (8010658 <dwt_ioctl+0xf00>)
 801038c:	4630      	mov	r0, r6
 801038e:	f7fd fd25 	bl	800dddc <dwt_write8bitoffsetreg>
 8010392:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 801065c <dwt_ioctl+0xf04>
 8010396:	2700      	movs	r7, #0
 8010398:	463a      	mov	r2, r7
 801039a:	4641      	mov	r1, r8
 801039c:	4630      	mov	r0, r6
 801039e:	f7fc feaf 	bl	800d100 <dwt_read8bitoffsetreg>
 80103a2:	f010 0f05 	tst.w	r0, #5
 80103a6:	d0f7      	beq.n	8010398 <dwt_ioctl+0xc40>
 80103a8:	4605      	mov	r5, r0
 80103aa:	4603      	mov	r3, r0
 80103ac:	2200      	movs	r2, #0
 80103ae:	49ab      	ldr	r1, [pc, #684]	; (801065c <dwt_ioctl+0xf04>)
 80103b0:	4630      	mov	r0, r6
 80103b2:	f7fd fd13 	bl	800dddc <dwt_write8bitoffsetreg>
 80103b6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80103ba:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d025      	beq.n	801040e <dwt_ioctl+0xcb6>
 80103c2:	b26b      	sxtb	r3, r5
 80103c4:	7023      	strb	r3, [r4, #0]
 80103c6:	2500      	movs	r5, #0
 80103c8:	f001 b8ce 	b.w	8011568 <dwt_ioctl+0x1e10>
 80103cc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80103ce:	7b9b      	ldrb	r3, [r3, #14]
 80103d0:	2b03      	cmp	r3, #3
 80103d2:	f001 81af 	beq.w	8011734 <dwt_ioctl+0x1fdc>
 80103d6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80103da:	1e5a      	subs	r2, r3, #1
 80103dc:	b2d2      	uxtb	r2, r2
 80103de:	2a01      	cmp	r2, #1
 80103e0:	d912      	bls.n	8010408 <dwt_ioctl+0xcb0>
 80103e2:	2201      	movs	r2, #1
 80103e4:	e7b7      	b.n	8010356 <dwt_ioctl+0xbfe>
 80103e6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80103e8:	7b9b      	ldrb	r3, [r3, #14]
 80103ea:	2b03      	cmp	r3, #3
 80103ec:	bf0c      	ite	eq
 80103ee:	2302      	moveq	r3, #2
 80103f0:	2301      	movne	r3, #1
 80103f2:	e7b2      	b.n	801035a <dwt_ioctl+0xc02>
 80103f4:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80103f8:	2910      	cmp	r1, #16
 80103fa:	d9ae      	bls.n	801035a <dwt_ioctl+0xc02>
 80103fc:	f06f 0303 	mvn.w	r3, #3
 8010400:	e7e0      	b.n	80103c4 <dwt_ioctl+0xc6c>
 8010402:	2202      	movs	r2, #2
 8010404:	4613      	mov	r3, r2
 8010406:	e7a8      	b.n	801035a <dwt_ioctl+0xc02>
 8010408:	2201      	movs	r2, #1
 801040a:	4613      	mov	r3, r2
 801040c:	e7a5      	b.n	801035a <dwt_ioctl+0xc02>
 801040e:	f899 3012 	ldrb.w	r3, [r9, #18]
 8010412:	2b01      	cmp	r3, #1
 8010414:	d1d5      	bne.n	80103c2 <dwt_ioctl+0xc6a>
 8010416:	f899 2011 	ldrb.w	r2, [r9, #17]
 801041a:	1e53      	subs	r3, r2, #1
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b01      	cmp	r3, #1
 8010420:	d91b      	bls.n	801045a <dwt_ioctl+0xd02>
 8010422:	2a03      	cmp	r2, #3
 8010424:	bf0c      	ite	eq
 8010426:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 801042a:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 801042e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010432:	b112      	cbz	r2, 801043a <dwt_ioctl+0xce2>
 8010434:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010438:	b9c3      	cbnz	r3, 801046c <dwt_ioctl+0xd14>
 801043a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801043e:	2900      	cmp	r1, #0
 8010440:	d0bf      	beq.n	80103c2 <dwt_ioctl+0xc6a>
 8010442:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d0bb      	beq.n	80103c2 <dwt_ioctl+0xc6a>
 801044a:	f899 200c 	ldrb.w	r2, [r9, #12]
 801044e:	9100      	str	r1, [sp, #0]
 8010450:	4639      	mov	r1, r7
 8010452:	4630      	mov	r0, r6
 8010454:	f7fc fdf5 	bl	800d042 <dwt_readfromdevice>
 8010458:	e7b3      	b.n	80103c2 <dwt_ioctl+0xc6a>
 801045a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801045c:	7b9b      	ldrb	r3, [r3, #14]
 801045e:	2b03      	cmp	r3, #3
 8010460:	bf0c      	ite	eq
 8010462:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8010466:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 801046a:	e7e0      	b.n	801042e <dwt_ioctl+0xcd6>
 801046c:	9200      	str	r2, [sp, #0]
 801046e:	2200      	movs	r2, #0
 8010470:	4639      	mov	r1, r7
 8010472:	4630      	mov	r0, r6
 8010474:	f7fc fde5 	bl	800d042 <dwt_readfromdevice>
 8010478:	e7df      	b.n	801043a <dwt_ioctl+0xce2>
 801047a:	f06f 0302 	mvn.w	r3, #2
 801047e:	e7a1      	b.n	80103c4 <dwt_ioctl+0xc6c>
 8010480:	f06f 0301 	mvn.w	r3, #1
 8010484:	e79e      	b.n	80103c4 <dwt_ioctl+0xc6c>
 8010486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801048a:	e79b      	b.n	80103c4 <dwt_ioctl+0xc6c>
 801048c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010490:	e798      	b.n	80103c4 <dwt_ioctl+0xc6c>
 8010492:	7a23      	ldrb	r3, [r4, #8]
 8010494:	79e1      	ldrb	r1, [r4, #7]
 8010496:	79a2      	ldrb	r2, [r4, #6]
 8010498:	00d2      	lsls	r2, r2, #3
 801049a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801049e:	4313      	orrs	r3, r2
 80104a0:	7962      	ldrb	r2, [r4, #5]
 80104a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80104a6:	7922      	ldrb	r2, [r4, #4]
 80104a8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80104ac:	78e2      	ldrb	r2, [r4, #3]
 80104ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80104b2:	78a2      	ldrb	r2, [r4, #2]
 80104b4:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80104b8:	7862      	ldrb	r2, [r4, #1]
 80104ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80104be:	7822      	ldrb	r2, [r4, #0]
 80104c0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	2200      	movs	r2, #0
 80104c8:	4965      	ldr	r1, [pc, #404]	; (8010660 <dwt_ioctl+0xf08>)
 80104ca:	f7fd fa38 	bl	800d93e <dwt_write16bitoffsetreg>
 80104ce:	2500      	movs	r5, #0
 80104d0:	f001 b84a 	b.w	8011568 <dwt_ioctl+0x1e10>
 80104d4:	2c00      	cmp	r4, #0
 80104d6:	f001 80ab 	beq.w	8011630 <dwt_ioctl+0x1ed8>
 80104da:	7863      	ldrb	r3, [r4, #1]
 80104dc:	b133      	cbz	r3, 80104ec <dwt_ioctl+0xd94>
 80104de:	085b      	lsrs	r3, r3, #1
 80104e0:	3b01      	subs	r3, #1
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	7023      	strb	r3, [r4, #0]
 80104e6:	2500      	movs	r5, #0
 80104e8:	f001 b83e 	b.w	8011568 <dwt_ioctl+0x1e10>
 80104ec:	2300      	movs	r3, #0
 80104ee:	e7f9      	b.n	80104e4 <dwt_ioctl+0xd8c>
 80104f0:	2200      	movs	r2, #0
 80104f2:	495c      	ldr	r1, [pc, #368]	; (8010664 <dwt_ioctl+0xf0c>)
 80104f4:	f7fc fdaf 	bl	800d056 <dwt_read32bitoffsetreg>
 80104f8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80104fc:	8023      	strh	r3, [r4, #0]
 80104fe:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8010502:	8060      	strh	r0, [r4, #2]
 8010504:	2200      	movs	r2, #0
 8010506:	4958      	ldr	r1, [pc, #352]	; (8010668 <dwt_ioctl+0xf10>)
 8010508:	4630      	mov	r0, r6
 801050a:	f7fc fda4 	bl	800d056 <dwt_read32bitoffsetreg>
 801050e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8010512:	80a3      	strh	r3, [r4, #4]
 8010514:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8010518:	80e0      	strh	r0, [r4, #6]
 801051a:	2200      	movs	r2, #0
 801051c:	4953      	ldr	r1, [pc, #332]	; (801066c <dwt_ioctl+0xf14>)
 801051e:	4630      	mov	r0, r6
 8010520:	f7fc fd99 	bl	800d056 <dwt_read32bitoffsetreg>
 8010524:	7220      	strb	r0, [r4, #8]
 8010526:	0c00      	lsrs	r0, r0, #16
 8010528:	7260      	strb	r0, [r4, #9]
 801052a:	2200      	movs	r2, #0
 801052c:	4950      	ldr	r1, [pc, #320]	; (8010670 <dwt_ioctl+0xf18>)
 801052e:	4630      	mov	r0, r6
 8010530:	f7fc fd91 	bl	800d056 <dwt_read32bitoffsetreg>
 8010534:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8010538:	81a3      	strh	r3, [r4, #12]
 801053a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801053e:	8160      	strh	r0, [r4, #10]
 8010540:	2200      	movs	r2, #0
 8010542:	494c      	ldr	r1, [pc, #304]	; (8010674 <dwt_ioctl+0xf1c>)
 8010544:	4630      	mov	r0, r6
 8010546:	f7fc fd86 	bl	800d056 <dwt_read32bitoffsetreg>
 801054a:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801054e:	f8a4 300f 	strh.w	r3, [r4, #15]
 8010552:	73a0      	strb	r0, [r4, #14]
 8010554:	2200      	movs	r2, #0
 8010556:	4948      	ldr	r1, [pc, #288]	; (8010678 <dwt_ioctl+0xf20>)
 8010558:	4630      	mov	r0, r6
 801055a:	f7fc fd7c 	bl	800d056 <dwt_read32bitoffsetreg>
 801055e:	7460      	strb	r0, [r4, #17]
 8010560:	0c00      	lsrs	r0, r0, #16
 8010562:	74a0      	strb	r0, [r4, #18]
 8010564:	2200      	movs	r2, #0
 8010566:	4945      	ldr	r1, [pc, #276]	; (801067c <dwt_ioctl+0xf24>)
 8010568:	4630      	mov	r0, r6
 801056a:	f7fc fd74 	bl	800d056 <dwt_read32bitoffsetreg>
 801056e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8010572:	f8a4 3013 	strh.w	r3, [r4, #19]
 8010576:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801057a:	f8a4 0015 	strh.w	r0, [r4, #21]
 801057e:	2200      	movs	r2, #0
 8010580:	493f      	ldr	r1, [pc, #252]	; (8010680 <dwt_ioctl+0xf28>)
 8010582:	4630      	mov	r0, r6
 8010584:	f7fc fdbc 	bl	800d100 <dwt_read8bitoffsetreg>
 8010588:	75e0      	strb	r0, [r4, #23]
 801058a:	2500      	movs	r5, #0
 801058c:	f000 bfec 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010590:	4611      	mov	r1, r2
 8010592:	f7fd fc9b 	bl	800decc <ull_configeventcounters>
 8010596:	2500      	movs	r5, #0
 8010598:	f000 bfe6 	b.w	8011568 <dwt_ioctl+0x1e10>
 801059c:	2c00      	cmp	r4, #0
 801059e:	f001 8049 	beq.w	8011634 <dwt_ioctl+0x1edc>
 80105a2:	8823      	ldrh	r3, [r4, #0]
 80105a4:	2200      	movs	r2, #0
 80105a6:	4937      	ldr	r1, [pc, #220]	; (8010684 <dwt_ioctl+0xf2c>)
 80105a8:	f7fd f9c9 	bl	800d93e <dwt_write16bitoffsetreg>
 80105ac:	2500      	movs	r5, #0
 80105ae:	f000 bfdb 	b.w	8011568 <dwt_ioctl+0x1e10>
 80105b2:	2c00      	cmp	r4, #0
 80105b4:	f001 8040 	beq.w	8011638 <dwt_ioctl+0x1ee0>
 80105b8:	6825      	ldr	r5, [r4, #0]
 80105ba:	b935      	cbnz	r5, 80105ca <dwt_ioctl+0xe72>
 80105bc:	2300      	movs	r3, #0
 80105be:	461a      	mov	r2, r3
 80105c0:	4931      	ldr	r1, [pc, #196]	; (8010688 <dwt_ioctl+0xf30>)
 80105c2:	f7fd f9bc 	bl	800d93e <dwt_write16bitoffsetreg>
 80105c6:	f000 bfcf 	b.w	8011568 <dwt_ioctl+0x1e10>
 80105ca:	7962      	ldrb	r2, [r4, #5]
 80105cc:	7923      	ldrb	r3, [r4, #4]
 80105ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80105d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80105d6:	2200      	movs	r2, #0
 80105d8:	492b      	ldr	r1, [pc, #172]	; (8010688 <dwt_ioctl+0xf30>)
 80105da:	f7fd f9b0 	bl	800d93e <dwt_write16bitoffsetreg>
 80105de:	2500      	movs	r5, #0
 80105e0:	f000 bfc2 	b.w	8011568 <dwt_ioctl+0x1e10>
 80105e4:	2c00      	cmp	r4, #0
 80105e6:	f001 8029 	beq.w	801163c <dwt_ioctl+0x1ee4>
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	b94b      	cbnz	r3, 8010602 <dwt_ioctl+0xeaa>
 80105ee:	2500      	movs	r5, #0
 80105f0:	9500      	str	r5, [sp, #0]
 80105f2:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80105f6:	462a      	mov	r2, r5
 80105f8:	2110      	movs	r1, #16
 80105fa:	f7fe fc11 	bl	800ee20 <dwt_modify16bitoffsetreg>
 80105fe:	f000 bfb3 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010602:	2200      	movs	r2, #0
 8010604:	2134      	movs	r1, #52	; 0x34
 8010606:	f7fd fa05 	bl	800da14 <dwt_write32bitoffsetreg>
 801060a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010614:	2200      	movs	r2, #0
 8010616:	2110      	movs	r1, #16
 8010618:	4630      	mov	r0, r6
 801061a:	f7fe fc01 	bl	800ee20 <dwt_modify16bitoffsetreg>
 801061e:	2500      	movs	r5, #0
 8010620:	f000 bfa2 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010624:	2c00      	cmp	r4, #0
 8010626:	f001 800b 	beq.w	8011640 <dwt_ioctl+0x1ee8>
 801062a:	8861      	ldrh	r1, [r4, #2]
 801062c:	f7fd fc62 	bl	800def4 <ull_aon_read>
 8010630:	7020      	strb	r0, [r4, #0]
 8010632:	2500      	movs	r5, #0
 8010634:	f000 bf98 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010638:	2c00      	cmp	r4, #0
 801063a:	f001 8003 	beq.w	8011644 <dwt_ioctl+0x1eec>
 801063e:	78a2      	ldrb	r2, [r4, #2]
 8010640:	8821      	ldrh	r1, [r4, #0]
 8010642:	f7fd fc77 	bl	800df34 <ull_aon_write>
 8010646:	2500      	movs	r5, #0
 8010648:	f000 bf8e 	b.w	8011568 <dwt_ioctl+0x1e10>
 801064c:	00010044 	.word	0x00010044
 8010650:	0001ff80 	.word	0x0001ff80
 8010654:	00010048 	.word	0x00010048
 8010658:	0001004c 	.word	0x0001004c
 801065c:	00010050 	.word	0x00010050
 8010660:	00010030 	.word	0x00010030
 8010664:	000f0004 	.word	0x000f0004
 8010668:	000f0008 	.word	0x000f0008
 801066c:	000f000c 	.word	0x000f000c
 8010670:	000f0010 	.word	0x000f0010
 8010674:	000f0014 	.word	0x000f0014
 8010678:	000f0018 	.word	0x000f0018
 801067c:	000f001c 	.word	0x000f001c
 8010680:	000f0020 	.word	0x000f0020
 8010684:	00060004 	.word	0x00060004
 8010688:	0011001c 	.word	0x0011001c
 801068c:	4bd5      	ldr	r3, [pc, #852]	; (80109e4 <dwt_ioctl+0x128c>)
 801068e:	4ad6      	ldr	r2, [pc, #856]	; (80109e8 <dwt_ioctl+0x1290>)
 8010690:	2d01      	cmp	r5, #1
 8010692:	bf18      	it	ne
 8010694:	4613      	movne	r3, r2
 8010696:	2d01      	cmp	r5, #1
 8010698:	49d4      	ldr	r1, [pc, #848]	; (80109ec <dwt_ioctl+0x1294>)
 801069a:	bf18      	it	ne
 801069c:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 80106a0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80106a2:	7b92      	ldrb	r2, [r2, #14]
 80106a4:	2a01      	cmp	r2, #1
 80106a6:	d012      	beq.n	80106ce <dwt_ioctl+0xf76>
 80106a8:	2a03      	cmp	r2, #3
 80106aa:	d117      	bne.n	80106dc <dwt_ioctl+0xf84>
 80106ac:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 80106b0:	3a01      	subs	r2, #1
 80106b2:	441a      	add	r2, r3
 80106b4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80106b8:	f7fc fce3 	bl	800d082 <dwt_read16bitoffsetreg>
 80106bc:	09c0      	lsrs	r0, r0, #7
 80106be:	8020      	strh	r0, [r4, #0]
 80106c0:	8825      	ldrh	r5, [r4, #0]
 80106c2:	3500      	adds	r5, #0
 80106c4:	bf18      	it	ne
 80106c6:	2501      	movne	r5, #1
 80106c8:	426d      	negs	r5, r5
 80106ca:	f000 bf4d 	b.w	8011568 <dwt_ioctl+0x1e10>
 80106ce:	2202      	movs	r2, #2
 80106d0:	4619      	mov	r1, r3
 80106d2:	f7fc fcd6 	bl	800d082 <dwt_read16bitoffsetreg>
 80106d6:	09c0      	lsrs	r0, r0, #7
 80106d8:	8020      	strh	r0, [r4, #0]
 80106da:	e7f1      	b.n	80106c0 <dwt_ioctl+0xf68>
 80106dc:	2202      	movs	r2, #2
 80106de:	f7fc fcd0 	bl	800d082 <dwt_read16bitoffsetreg>
 80106e2:	09c0      	lsrs	r0, r0, #7
 80106e4:	8020      	strh	r0, [r4, #0]
 80106e6:	e7eb      	b.n	80106c0 <dwt_ioctl+0xf68>
 80106e8:	2c00      	cmp	r4, #0
 80106ea:	f000 87ad 	beq.w	8011648 <dwt_ioctl+0x1ef0>
 80106ee:	7821      	ldrb	r1, [r4, #0]
 80106f0:	f7fe fbd4 	bl	800ee9c <ull_setleds>
 80106f4:	2500      	movs	r5, #0
 80106f6:	f000 bf37 	b.w	8011568 <dwt_ioctl+0x1e10>
 80106fa:	4611      	mov	r1, r2
 80106fc:	f7fe fa30 	bl	800eb60 <ull_setdwstate>
 8010700:	2500      	movs	r5, #0
 8010702:	f000 bf31 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010706:	9400      	str	r4, [sp, #0]
 8010708:	2304      	movs	r3, #4
 801070a:	2200      	movs	r2, #0
 801070c:	211c      	movs	r1, #28
 801070e:	f7fc fc98 	bl	800d042 <dwt_readfromdevice>
 8010712:	2500      	movs	r5, #0
 8010714:	f000 bf28 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010718:	2c00      	cmp	r4, #0
 801071a:	f000 8797 	beq.w	801164c <dwt_ioctl+0x1ef4>
 801071e:	2202      	movs	r2, #2
 8010720:	2144      	movs	r1, #68	; 0x44
 8010722:	f7fc fcae 	bl	800d082 <dwt_read16bitoffsetreg>
 8010726:	f3c0 2000 	ubfx	r0, r0, #8, #1
 801072a:	7020      	strb	r0, [r4, #0]
 801072c:	2500      	movs	r5, #0
 801072e:	f000 bf1b 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010732:	2c00      	cmp	r4, #0
 8010734:	f000 878c 	beq.w	8011650 <dwt_ioctl+0x1ef8>
 8010738:	2200      	movs	r2, #0
 801073a:	2144      	movs	r1, #68	; 0x44
 801073c:	f7fc fce0 	bl	800d100 <dwt_read8bitoffsetreg>
 8010740:	f000 0001 	and.w	r0, r0, #1
 8010744:	7020      	strb	r0, [r4, #0]
 8010746:	2500      	movs	r5, #0
 8010748:	f000 bf0e 	b.w	8011568 <dwt_ioctl+0x1e10>
 801074c:	2c00      	cmp	r4, #0
 801074e:	f000 8781 	beq.w	8011654 <dwt_ioctl+0x1efc>
 8010752:	8862      	ldrh	r2, [r4, #2]
 8010754:	8821      	ldrh	r1, [r4, #0]
 8010756:	f7fe fa61 	bl	800ec1c <ull_configureframefilter>
 801075a:	2500      	movs	r5, #0
 801075c:	f000 bf04 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010760:	9400      	str	r4, [sp, #0]
 8010762:	2308      	movs	r3, #8
 8010764:	2200      	movs	r2, #0
 8010766:	2104      	movs	r1, #4
 8010768:	f7fd f8de 	bl	800d928 <dwt_writetodevice>
 801076c:	2500      	movs	r5, #0
 801076e:	f000 befb 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010772:	9400      	str	r4, [sp, #0]
 8010774:	2308      	movs	r3, #8
 8010776:	2200      	movs	r2, #0
 8010778:	2104      	movs	r1, #4
 801077a:	f7fc fc62 	bl	800d042 <dwt_readfromdevice>
 801077e:	2500      	movs	r5, #0
 8010780:	f000 bef2 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010784:	2c00      	cmp	r4, #0
 8010786:	f000 8767 	beq.w	8011658 <dwt_ioctl+0x1f00>
 801078a:	8823      	ldrh	r3, [r4, #0]
 801078c:	2202      	movs	r2, #2
 801078e:	210c      	movs	r1, #12
 8010790:	f7fd f8d5 	bl	800d93e <dwt_write16bitoffsetreg>
 8010794:	2500      	movs	r5, #0
 8010796:	f000 bee7 	b.w	8011568 <dwt_ioctl+0x1e10>
 801079a:	2c00      	cmp	r4, #0
 801079c:	f000 875e 	beq.w	801165c <dwt_ioctl+0x1f04>
 80107a0:	8823      	ldrh	r3, [r4, #0]
 80107a2:	2200      	movs	r2, #0
 80107a4:	210c      	movs	r1, #12
 80107a6:	f7fd f8ca 	bl	800d93e <dwt_write16bitoffsetreg>
 80107aa:	2500      	movs	r5, #0
 80107ac:	f000 bedc 	b.w	8011568 <dwt_ioctl+0x1e10>
 80107b0:	4621      	mov	r1, r4
 80107b2:	f7fd f897 	bl	800d8e4 <ull_readrxtimestamp>
 80107b6:	2500      	movs	r5, #0
 80107b8:	f000 bed6 	b.w	8011568 <dwt_ioctl+0x1e10>
 80107bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80107be:	7b9b      	ldrb	r3, [r3, #14]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d00b      	beq.n	80107dc <dwt_ioctl+0x1084>
 80107c4:	2b03      	cmp	r3, #3
 80107c6:	d112      	bne.n	80107ee <dwt_ioctl+0x1096>
 80107c8:	9400      	str	r4, [sp, #0]
 80107ca:	2305      	movs	r3, #5
 80107cc:	2220      	movs	r2, #32
 80107ce:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80107d2:	f7fc fc36 	bl	800d042 <dwt_readfromdevice>
 80107d6:	2500      	movs	r5, #0
 80107d8:	f000 bec6 	b.w	8011568 <dwt_ioctl+0x1e10>
 80107dc:	9400      	str	r4, [sp, #0]
 80107de:	2305      	movs	r3, #5
 80107e0:	2200      	movs	r2, #0
 80107e2:	4983      	ldr	r1, [pc, #524]	; (80109f0 <dwt_ioctl+0x1298>)
 80107e4:	f7fc fc2d 	bl	800d042 <dwt_readfromdevice>
 80107e8:	2500      	movs	r5, #0
 80107ea:	f000 bebd 	b.w	8011568 <dwt_ioctl+0x1e10>
 80107ee:	9400      	str	r4, [sp, #0]
 80107f0:	2305      	movs	r3, #5
 80107f2:	2200      	movs	r2, #0
 80107f4:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80107f8:	f7fc fc23 	bl	800d042 <dwt_readfromdevice>
 80107fc:	2500      	movs	r5, #0
 80107fe:	f000 beb3 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010802:	2500      	movs	r5, #0
 8010804:	f804 5b01 	strb.w	r5, [r4], #1
 8010808:	9400      	str	r4, [sp, #0]
 801080a:	2304      	movs	r3, #4
 801080c:	462a      	mov	r2, r5
 801080e:	216c      	movs	r1, #108	; 0x6c
 8010810:	f7fc fc17 	bl	800d042 <dwt_readfromdevice>
 8010814:	f000 bea8 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010818:	2c00      	cmp	r4, #0
 801081a:	f000 8721 	beq.w	8011660 <dwt_ioctl+0x1f08>
 801081e:	2201      	movs	r2, #1
 8010820:	2160      	movs	r1, #96	; 0x60
 8010822:	f7fc fc18 	bl	800d056 <dwt_read32bitoffsetreg>
 8010826:	6020      	str	r0, [r4, #0]
 8010828:	2500      	movs	r5, #0
 801082a:	f000 be9d 	b.w	8011568 <dwt_ioctl+0x1e10>
 801082e:	2c00      	cmp	r4, #0
 8010830:	f000 8718 	beq.w	8011664 <dwt_ioctl+0x1f0c>
 8010834:	2200      	movs	r2, #0
 8010836:	2160      	movs	r1, #96	; 0x60
 8010838:	f7fc fc0d 	bl	800d056 <dwt_read32bitoffsetreg>
 801083c:	6020      	str	r0, [r4, #0]
 801083e:	2500      	movs	r5, #0
 8010840:	f000 be92 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010844:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010846:	7b9b      	ldrb	r3, [r3, #14]
 8010848:	2b01      	cmp	r3, #1
 801084a:	d00b      	beq.n	8010864 <dwt_ioctl+0x110c>
 801084c:	2b03      	cmp	r3, #3
 801084e:	d112      	bne.n	8010876 <dwt_ioctl+0x111e>
 8010850:	9400      	str	r4, [sp, #0]
 8010852:	2305      	movs	r3, #5
 8010854:	2228      	movs	r2, #40	; 0x28
 8010856:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801085a:	f7fc fbf2 	bl	800d042 <dwt_readfromdevice>
 801085e:	2500      	movs	r5, #0
 8010860:	f000 be82 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010864:	9400      	str	r4, [sp, #0]
 8010866:	2305      	movs	r3, #5
 8010868:	2200      	movs	r2, #0
 801086a:	4962      	ldr	r1, [pc, #392]	; (80109f4 <dwt_ioctl+0x129c>)
 801086c:	f7fc fbe9 	bl	800d042 <dwt_readfromdevice>
 8010870:	2500      	movs	r5, #0
 8010872:	f000 be79 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010876:	9400      	str	r4, [sp, #0]
 8010878:	2305      	movs	r3, #5
 801087a:	2200      	movs	r2, #0
 801087c:	495e      	ldr	r1, [pc, #376]	; (80109f8 <dwt_ioctl+0x12a0>)
 801087e:	f7fc fbe0 	bl	800d042 <dwt_readfromdevice>
 8010882:	2500      	movs	r5, #0
 8010884:	f000 be70 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010888:	2c00      	cmp	r4, #0
 801088a:	f000 86ed 	beq.w	8011668 <dwt_ioctl+0x1f10>
 801088e:	2200      	movs	r2, #0
 8010890:	211c      	movs	r1, #28
 8010892:	f7fc fbe0 	bl	800d056 <dwt_read32bitoffsetreg>
 8010896:	6020      	str	r0, [r4, #0]
 8010898:	2500      	movs	r5, #0
 801089a:	f000 be65 	b.w	8011568 <dwt_ioctl+0x1e10>
 801089e:	2c00      	cmp	r4, #0
 80108a0:	f000 86e4 	beq.w	801166c <dwt_ioctl+0x1f14>
 80108a4:	8825      	ldrh	r5, [r4, #0]
 80108a6:	6867      	ldr	r7, [r4, #4]
 80108a8:	7a23      	ldrb	r3, [r4, #8]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f000 86e0 	beq.w	8011670 <dwt_ioctl+0x1f18>
 80108b0:	463c      	mov	r4, r7
 80108b2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80108b6:	4629      	mov	r1, r5
 80108b8:	4630      	mov	r0, r6
 80108ba:	f7fd f889 	bl	800d9d0 <_dwt_otpread>
 80108be:	f844 0b04 	str.w	r0, [r4], #4
 80108c2:	3501      	adds	r5, #1
 80108c4:	b2ad      	uxth	r5, r5
 80108c6:	42bc      	cmp	r4, r7
 80108c8:	d1f5      	bne.n	80108b6 <dwt_ioctl+0x115e>
 80108ca:	2500      	movs	r5, #0
 80108cc:	f000 be4c 	b.w	8011568 <dwt_ioctl+0x1e10>
 80108d0:	2c00      	cmp	r4, #0
 80108d2:	f000 86cf 	beq.w	8011674 <dwt_ioctl+0x1f1c>
 80108d6:	7821      	ldrb	r1, [r4, #0]
 80108d8:	f7fd fb86 	bl	800dfe8 <ull_setplenfine>
 80108dc:	2500      	movs	r5, #0
 80108de:	f000 be43 	b.w	8011568 <dwt_ioctl+0x1e10>
 80108e2:	f7fe f9bf 	bl	800ec64 <ull_run_pgfcal>
 80108e6:	4605      	mov	r5, r0
 80108e8:	f000 be3e 	b.w	8011568 <dwt_ioctl+0x1e10>
 80108ec:	4611      	mov	r1, r2
 80108ee:	f7fe fb23 	bl	800ef38 <ull_pgf_cal>
 80108f2:	4605      	mov	r5, r0
 80108f4:	f000 be38 	b.w	8011568 <dwt_ioctl+0x1e10>
 80108f8:	2c00      	cmp	r4, #0
 80108fa:	f000 86bd 	beq.w	8011678 <dwt_ioctl+0x1f20>
 80108fe:	78a5      	ldrb	r5, [r4, #2]
 8010900:	2101      	movs	r1, #1
 8010902:	f7fd f83b 	bl	800d97c <ull_force_clocks>
 8010906:	2100      	movs	r1, #0
 8010908:	4630      	mov	r0, r6
 801090a:	f7fd fdbd 	bl	800e488 <ull_enable_rf_tx>
 801090e:	4630      	mov	r0, r6
 8010910:	f7fd fdee 	bl	800e4f0 <ull_enable_rftx_blocks>
 8010914:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8010918:	2200      	movs	r2, #0
 801091a:	4938      	ldr	r1, [pc, #224]	; (80109fc <dwt_ioctl+0x12a4>)
 801091c:	4630      	mov	r0, r6
 801091e:	f7fd fa5d 	bl	800dddc <dwt_write8bitoffsetreg>
 8010922:	2301      	movs	r3, #1
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	23ff      	movs	r3, #255	; 0xff
 8010928:	2200      	movs	r2, #0
 801092a:	4935      	ldr	r1, [pc, #212]	; (8010a00 <dwt_ioctl+0x12a8>)
 801092c:	4630      	mov	r0, r6
 801092e:	f7fd fee7 	bl	800e700 <dwt_modify8bitoffsetreg>
 8010932:	4f33      	ldr	r7, [pc, #204]	; (8010a00 <dwt_ioctl+0x12a8>)
 8010934:	2500      	movs	r5, #0
 8010936:	462a      	mov	r2, r5
 8010938:	4639      	mov	r1, r7
 801093a:	4630      	mov	r0, r6
 801093c:	f7fc fbe0 	bl	800d100 <dwt_read8bitoffsetreg>
 8010940:	f010 0f01 	tst.w	r0, #1
 8010944:	d1f7      	bne.n	8010936 <dwt_ioctl+0x11de>
 8010946:	2200      	movs	r2, #0
 8010948:	492e      	ldr	r1, [pc, #184]	; (8010a04 <dwt_ioctl+0x12ac>)
 801094a:	4630      	mov	r0, r6
 801094c:	f7fc fb99 	bl	800d082 <dwt_read16bitoffsetreg>
 8010950:	4605      	mov	r5, r0
 8010952:	4630      	mov	r0, r6
 8010954:	f7fd f9c0 	bl	800dcd8 <ull_disable_rftx_blocks>
 8010958:	2100      	movs	r1, #0
 801095a:	4630      	mov	r0, r6
 801095c:	f7fd f9c6 	bl	800dcec <ull_disable_rf_tx>
 8010960:	2105      	movs	r1, #5
 8010962:	4630      	mov	r0, r6
 8010964:	f7fd f80a 	bl	800d97c <ull_force_clocks>
 8010968:	f3c5 050b 	ubfx	r5, r5, #0, #12
 801096c:	8025      	strh	r5, [r4, #0]
 801096e:	2500      	movs	r5, #0
 8010970:	f000 bdfa 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010974:	2102      	movs	r1, #2
 8010976:	f7fe f8f3 	bl	800eb60 <ull_setdwstate>
 801097a:	2101      	movs	r1, #1
 801097c:	4630      	mov	r0, r6
 801097e:	f7fe f8ef 	bl	800eb60 <ull_setdwstate>
 8010982:	2432      	movs	r4, #50	; 0x32
 8010984:	f04f 0814 	mov.w	r8, #20
 8010988:	2700      	movs	r7, #0
 801098a:	2544      	movs	r5, #68	; 0x44
 801098c:	4640      	mov	r0, r8
 801098e:	f7ef fe5a 	bl	8000646 <deca_usleep>
 8010992:	463a      	mov	r2, r7
 8010994:	4629      	mov	r1, r5
 8010996:	4630      	mov	r0, r6
 8010998:	f7fc fbb2 	bl	800d100 <dwt_read8bitoffsetreg>
 801099c:	f010 0f02 	tst.w	r0, #2
 80109a0:	d105      	bne.n	80109ae <dwt_ioctl+0x1256>
 80109a2:	1e63      	subs	r3, r4, #1
 80109a4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80109a8:	d1f0      	bne.n	801098c <dwt_ioctl+0x1234>
 80109aa:	2501      	movs	r5, #1
 80109ac:	e000      	b.n	80109b0 <dwt_ioctl+0x1258>
 80109ae:	2500      	movs	r5, #0
 80109b0:	426d      	negs	r5, r5
 80109b2:	f000 bdd9 	b.w	8011568 <dwt_ioctl+0x1e10>
 80109b6:	2c00      	cmp	r4, #0
 80109b8:	f000 8660 	beq.w	801167c <dwt_ioctl+0x1f24>
 80109bc:	7823      	ldrb	r3, [r4, #0]
 80109be:	031b      	lsls	r3, r3, #12
 80109c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80109c4:	7862      	ldrb	r2, [r4, #1]
 80109c6:	2a01      	cmp	r2, #1
 80109c8:	bf08      	it	eq
 80109ca:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 80109d4:	2200      	movs	r2, #0
 80109d6:	490c      	ldr	r1, [pc, #48]	; (8010a08 <dwt_ioctl+0x12b0>)
 80109d8:	f7fd fd22 	bl	800e420 <dwt_modify32bitoffsetreg>
 80109dc:	2500      	movs	r5, #0
 80109de:	f000 bdc3 	b.w	8011568 <dwt_ioctl+0x1e10>
 80109e2:	bf00      	nop
 80109e4:	00180034 	.word	0x00180034
 80109e8:	0018002c 	.word	0x0018002c
 80109ec:	000c0014 	.word	0x000c0014
 80109f0:	00180020 	.word	0x00180020
 80109f4:	00180028 	.word	0x00180028
 80109f8:	000c0008 	.word	0x000c0008
 80109fc:	0007001c 	.word	0x0007001c
 8010a00:	00080010 	.word	0x00080010
 8010a04:	00080014 	.word	0x00080014
 8010a08:	00070014 	.word	0x00070014
 8010a0c:	2c00      	cmp	r4, #0
 8010a0e:	f000 8637 	beq.w	8011680 <dwt_ioctl+0x1f28>
 8010a12:	6862      	ldr	r2, [r4, #4]
 8010a14:	6821      	ldr	r1, [r4, #0]
 8010a16:	f7fd fe35 	bl	800e684 <ull_setgpiomode>
 8010a1a:	2500      	movs	r5, #0
 8010a1c:	f000 bda4 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010a20:	2c00      	cmp	r4, #0
 8010a22:	f000 862f 	beq.w	8011684 <dwt_ioctl+0x1f2c>
 8010a26:	8823      	ldrh	r3, [r4, #0]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	49c4      	ldr	r1, [pc, #784]	; (8010d3c <dwt_ioctl+0x15e4>)
 8010a2c:	f7fc ff87 	bl	800d93e <dwt_write16bitoffsetreg>
 8010a30:	2500      	movs	r5, #0
 8010a32:	f000 bd99 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010a36:	2c00      	cmp	r4, #0
 8010a38:	f000 8626 	beq.w	8011688 <dwt_ioctl+0x1f30>
 8010a3c:	6862      	ldr	r2, [r4, #4]
 8010a3e:	8821      	ldrh	r1, [r4, #0]
 8010a40:	f7fe faaa 	bl	800ef98 <ull_setgpiovalue>
 8010a44:	2500      	movs	r5, #0
 8010a46:	f000 bd8f 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010a4a:	2c00      	cmp	r4, #0
 8010a4c:	f000 861e 	beq.w	801168c <dwt_ioctl+0x1f34>
 8010a50:	7865      	ldrb	r5, [r4, #1]
 8010a52:	7823      	ldrb	r3, [r4, #0]
 8010a54:	b18b      	cbz	r3, 8010a7a <dwt_ioctl+0x1322>
 8010a56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010a58:	2200      	movs	r2, #0
 8010a5a:	739a      	strb	r2, [r3, #14]
 8010a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a60:	2208      	movs	r2, #8
 8010a62:	b37d      	cbz	r5, 8010ac4 <dwt_ioctl+0x136c>
 8010a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010a68:	9200      	str	r2, [sp, #0]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2110      	movs	r1, #16
 8010a6e:	4630      	mov	r0, r6
 8010a70:	f7fd fcd6 	bl	800e420 <dwt_modify32bitoffsetreg>
 8010a74:	2500      	movs	r5, #0
 8010a76:	f000 bd77 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010a7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	739a      	strb	r2, [r3, #14]
 8010a80:	2318      	movs	r3, #24
 8010a82:	2200      	movs	r2, #0
 8010a84:	49ae      	ldr	r1, [pc, #696]	; (8010d40 <dwt_ioctl+0x15e8>)
 8010a86:	f7fc ffc5 	bl	800da14 <dwt_write32bitoffsetreg>
 8010a8a:	23e8      	movs	r3, #232	; 0xe8
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	49ad      	ldr	r1, [pc, #692]	; (8010d44 <dwt_ioctl+0x15ec>)
 8010a90:	4630      	mov	r0, r6
 8010a92:	f7fc ffbf 	bl	800da14 <dwt_write32bitoffsetreg>
 8010a96:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010a98:	7d9b      	ldrb	r3, [r3, #22]
 8010a9a:	085b      	lsrs	r3, r3, #1
 8010a9c:	d003      	beq.n	8010aa6 <dwt_ioctl+0x134e>
 8010a9e:	f06f 0308 	mvn.w	r3, #8
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	e7dd      	b.n	8010a62 <dwt_ioctl+0x130a>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	49a7      	ldr	r1, [pc, #668]	; (8010d48 <dwt_ioctl+0x15f0>)
 8010aac:	4630      	mov	r0, r6
 8010aae:	f7fd f995 	bl	800dddc <dwt_write8bitoffsetreg>
 8010ab2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8010ab4:	7d93      	ldrb	r3, [r2, #22]
 8010ab6:	f043 0302 	orr.w	r3, r3, #2
 8010aba:	7593      	strb	r3, [r2, #22]
 8010abc:	f06f 0308 	mvn.w	r3, #8
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	e7ce      	b.n	8010a62 <dwt_ioctl+0x130a>
 8010ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ac8:	e7ce      	b.n	8010a68 <dwt_ioctl+0x1310>
 8010aca:	2c00      	cmp	r4, #0
 8010acc:	f000 85e0 	beq.w	8011690 <dwt_ioctl+0x1f38>
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	2130      	movs	r1, #48	; 0x30
 8010ad6:	f7fc ff9d 	bl	800da14 <dwt_write32bitoffsetreg>
 8010ada:	2500      	movs	r5, #0
 8010adc:	f000 bd44 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010ae0:	2c00      	cmp	r4, #0
 8010ae2:	f000 85d7 	beq.w	8011694 <dwt_ioctl+0x1f3c>
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	4629      	mov	r1, r5
 8010aea:	f7fc fab4 	bl	800d056 <dwt_read32bitoffsetreg>
 8010aee:	6020      	str	r0, [r4, #0]
 8010af0:	2500      	movs	r5, #0
 8010af2:	f000 bd39 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010af6:	4623      	mov	r3, r4
 8010af8:	2200      	movs	r2, #0
 8010afa:	4629      	mov	r1, r5
 8010afc:	f7fc ff8a 	bl	800da14 <dwt_write32bitoffsetreg>
 8010b00:	2500      	movs	r5, #0
 8010b02:	f000 bd31 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010b06:	2c00      	cmp	r4, #0
 8010b08:	f000 85c6 	beq.w	8011698 <dwt_ioctl+0x1f40>
 8010b0c:	2203      	movs	r2, #3
 8010b0e:	498f      	ldr	r1, [pc, #572]	; (8010d4c <dwt_ioctl+0x15f4>)
 8010b10:	f7fc faf6 	bl	800d100 <dwt_read8bitoffsetreg>
 8010b14:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8010b18:	7020      	strb	r0, [r4, #0]
 8010b1a:	2500      	movs	r5, #0
 8010b1c:	f000 bd24 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010b20:	2c00      	cmp	r4, #0
 8010b22:	f000 85bb 	beq.w	801169c <dwt_ioctl+0x1f44>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	2144      	movs	r1, #68	; 0x44
 8010b2c:	f7fc ff72 	bl	800da14 <dwt_write32bitoffsetreg>
 8010b30:	2500      	movs	r5, #0
 8010b32:	f000 bd19 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010b36:	2c00      	cmp	r4, #0
 8010b38:	f000 85b2 	beq.w	80116a0 <dwt_ioctl+0x1f48>
 8010b3c:	8823      	ldrh	r3, [r4, #0]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	2148      	movs	r1, #72	; 0x48
 8010b42:	f7fc fefc 	bl	800d93e <dwt_write16bitoffsetreg>
 8010b46:	2500      	movs	r5, #0
 8010b48:	f000 bd0e 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010b4c:	2c00      	cmp	r4, #0
 8010b4e:	f000 85a9 	beq.w	80116a4 <dwt_ioctl+0x1f4c>
 8010b52:	2200      	movs	r2, #0
 8010b54:	2144      	movs	r1, #68	; 0x44
 8010b56:	f7fc fa7e 	bl	800d056 <dwt_read32bitoffsetreg>
 8010b5a:	6020      	str	r0, [r4, #0]
 8010b5c:	2500      	movs	r5, #0
 8010b5e:	f000 bd03 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010b62:	2c00      	cmp	r4, #0
 8010b64:	f000 85a0 	beq.w	80116a8 <dwt_ioctl+0x1f50>
 8010b68:	2200      	movs	r2, #0
 8010b6a:	2148      	movs	r1, #72	; 0x48
 8010b6c:	f7fc fa89 	bl	800d082 <dwt_read16bitoffsetreg>
 8010b70:	6020      	str	r0, [r4, #0]
 8010b72:	2500      	movs	r5, #0
 8010b74:	f000 bcf8 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010b78:	2c00      	cmp	r4, #0
 8010b7a:	f000 8597 	beq.w	80116ac <dwt_ioctl+0x1f54>
 8010b7e:	7823      	ldrb	r3, [r4, #0]
 8010b80:	2200      	movs	r2, #0
 8010b82:	4973      	ldr	r1, [pc, #460]	; (8010d50 <dwt_ioctl+0x15f8>)
 8010b84:	f7fd f92a 	bl	800dddc <dwt_write8bitoffsetreg>
 8010b88:	2500      	movs	r5, #0
 8010b8a:	f000 bced 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010b8e:	2c00      	cmp	r4, #0
 8010b90:	f000 858e 	beq.w	80116b0 <dwt_ioctl+0x1f58>
 8010b94:	2200      	movs	r2, #0
 8010b96:	2144      	movs	r1, #68	; 0x44
 8010b98:	f7fc fab2 	bl	800d100 <dwt_read8bitoffsetreg>
 8010b9c:	7020      	strb	r0, [r4, #0]
 8010b9e:	2500      	movs	r5, #0
 8010ba0:	f000 bce2 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010ba4:	2c00      	cmp	r4, #0
 8010ba6:	f000 8585 	beq.w	80116b4 <dwt_ioctl+0x1f5c>
 8010baa:	f7fd f923 	bl	800ddf4 <ull_getframelength>
 8010bae:	6020      	str	r0, [r4, #0]
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	f000 bcd9 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010bb6:	2c00      	cmp	r4, #0
 8010bb8:	f000 857e 	beq.w	80116b8 <dwt_ioctl+0x1f60>
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	4965      	ldr	r1, [pc, #404]	; (8010d54 <dwt_ioctl+0x15fc>)
 8010bc0:	f7fc fa5f 	bl	800d082 <dwt_read16bitoffsetreg>
 8010bc4:	8020      	strh	r0, [r4, #0]
 8010bc6:	2500      	movs	r5, #0
 8010bc8:	f000 bcce 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010bcc:	2c00      	cmp	r4, #0
 8010bce:	f000 8575 	beq.w	80116bc <dwt_ioctl+0x1f64>
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	4960      	ldr	r1, [pc, #384]	; (8010d58 <dwt_ioctl+0x1600>)
 8010bd6:	f7fc fa3e 	bl	800d056 <dwt_read32bitoffsetreg>
 8010bda:	6020      	str	r0, [r4, #0]
 8010bdc:	2500      	movs	r5, #0
 8010bde:	f000 bcc3 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010be2:	2c00      	cmp	r4, #0
 8010be4:	f000 856c 	beq.w	80116c0 <dwt_ioctl+0x1f68>
 8010be8:	8823      	ldrh	r3, [r4, #0]
 8010bea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010bee:	9300      	str	r3, [sp, #0]
 8010bf0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	4958      	ldr	r1, [pc, #352]	; (8010d58 <dwt_ioctl+0x1600>)
 8010bf8:	f7fe f912 	bl	800ee20 <dwt_modify16bitoffsetreg>
 8010bfc:	2500      	movs	r5, #0
 8010bfe:	f000 bcb3 	b.w	8011568 <dwt_ioctl+0x1e10>
 8010c02:	2c00      	cmp	r4, #0
 8010c04:	f000 855e 	beq.w	80116c4 <dwt_ioctl+0x1f6c>
 8010c08:	88a7      	ldrh	r7, [r4, #4]
 8010c0a:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8010c0e:	7b23      	ldrb	r3, [r4, #12]
 8010c10:	9306      	str	r3, [sp, #24]
 8010c12:	6922      	ldr	r2, [r4, #16]
 8010c14:	9204      	str	r2, [sp, #16]
 8010c16:	6962      	ldr	r2, [r4, #20]
 8010c18:	9205      	str	r2, [sp, #20]
 8010c1a:	f00b 0203 	and.w	r2, fp, #3
 8010c1e:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8010c22:	2b05      	cmp	r3, #5
 8010c24:	d147      	bne.n	8010cb6 <dwt_ioctl+0x155e>
 8010c26:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8010c2a:	bf28      	it	cs
 8010c2c:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8010c30:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8010d60 <dwt_ioctl+0x1608>
 8010c34:	2f04      	cmp	r7, #4
 8010c36:	d805      	bhi.n	8010c44 <dwt_ioctl+0x14ec>
 8010c38:	eb09 0305 	add.w	r3, r9, r5
 8010c3c:	785b      	ldrb	r3, [r3, #1]
 8010c3e:	3b05      	subs	r3, #5
 8010c40:	429f      	cmp	r7, r3
 8010c42:	db40      	blt.n	8010cc6 <dwt_ioctl+0x156e>
 8010c44:	2a01      	cmp	r2, #1
 8010c46:	f200 80c8 	bhi.w	8010dda <dwt_ioctl+0x1682>
 8010c4a:	4b44      	ldr	r3, [pc, #272]	; (8010d5c <dwt_ioctl+0x1604>)
 8010c4c:	5c99      	ldrb	r1, [r3, r2]
 8010c4e:	463e      	mov	r6, r7
 8010c50:	42b9      	cmp	r1, r7
 8010c52:	f280 80c4 	bge.w	8010dde <dwt_ioctl+0x1686>
 8010c56:	1c50      	adds	r0, r2, #1
 8010c58:	fa53 f080 	uxtab	r0, r3, r0
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	440b      	add	r3, r1
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	3201      	adds	r2, #1
 8010c64:	b2d2      	uxtb	r2, r2
 8010c66:	2a02      	cmp	r2, #2
 8010c68:	d005      	beq.n	8010c76 <dwt_ioctl+0x151e>
 8010c6a:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010c6e:	eba6 0c03 	sub.w	ip, r6, r3
 8010c72:	4561      	cmp	r1, ip
 8010c74:	dbf3      	blt.n	8010c5e <dwt_ioctl+0x1506>
 8010c76:	429f      	cmp	r7, r3
 8010c78:	bf08      	it	eq
 8010c7a:	9503      	streq	r5, [sp, #12]
 8010c7c:	f000 80b4 	beq.w	8010de8 <dwt_ioctl+0x1690>
 8010c80:	f107 0c05 	add.w	ip, r7, #5
 8010c84:	fa1f fc8c 	uxth.w	ip, ip
 8010c88:	2680      	movs	r6, #128	; 0x80
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	9107      	str	r1, [sp, #28]
 8010c8e:	9103      	str	r1, [sp, #12]
 8010c90:	9108      	str	r1, [sp, #32]
 8010c92:	2005      	movs	r0, #5
 8010c94:	46b8      	mov	r8, r7
 8010c96:	4287      	cmp	r7, r0
 8010c98:	bf38      	it	cc
 8010c9a:	4680      	movcc	r8, r0
 8010c9c:	f1a8 0805 	sub.w	r8, r8, #5
 8010ca0:	fa1f f888 	uxth.w	r8, r8
 8010ca4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8010d5c <dwt_ioctl+0x1604>
 8010ca8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010cac:	4683      	mov	fp, r0
 8010cae:	4620      	mov	r0, r4
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	4686      	mov	lr, r0
 8010cb4:	e031      	b.n	8010d1a <dwt_ioctl+0x15c2>
 8010cb6:	f240 1331 	movw	r3, #305	; 0x131
 8010cba:	429f      	cmp	r7, r3
 8010cbc:	bf28      	it	cs
 8010cbe:	461f      	movcs	r7, r3
 8010cc0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8010d64 <dwt_ioctl+0x160c>
 8010cc4:	e7b6      	b.n	8010c34 <dwt_ioctl+0x14dc>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	9a05      	ldr	r2, [sp, #20]
 8010cca:	8013      	strh	r3, [r2, #0]
 8010ccc:	9a04      	ldr	r2, [sp, #16]
 8010cce:	f8c2 b000 	str.w	fp, [r2]
 8010cd2:	e098      	b.n	8010e06 <dwt_ioctl+0x16ae>
 8010cd4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8010cd8:	4674      	mov	r4, lr
 8010cda:	2300      	movs	r3, #0
 8010cdc:	9a05      	ldr	r2, [sp, #20]
 8010cde:	8013      	strh	r3, [r2, #0]
 8010ce0:	9b04      	ldr	r3, [sp, #16]
 8010ce2:	f8c3 b000 	str.w	fp, [r3]
 8010ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cea:	e08c      	b.n	8010e06 <dwt_ioctl+0x16ae>
 8010cec:	fa1f fb80 	uxth.w	fp, r0
 8010cf0:	9207      	str	r2, [sp, #28]
 8010cf2:	9503      	str	r5, [sp, #12]
 8010cf4:	9308      	str	r3, [sp, #32]
 8010cf6:	2401      	movs	r4, #1
 8010cf8:	2d3f      	cmp	r5, #63	; 0x3f
 8010cfa:	d050      	beq.n	8010d9e <dwt_ioctl+0x1646>
 8010cfc:	2900      	cmp	r1, #0
 8010cfe:	d139      	bne.n	8010d74 <dwt_ioctl+0x161c>
 8010d00:	3501      	adds	r5, #1
 8010d02:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8010d06:	f819 0005 	ldrb.w	r0, [r9, r5]
 8010d0a:	4403      	add	r3, r0
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	429f      	cmp	r7, r3
 8010d10:	d067      	beq.n	8010de2 <dwt_ioctl+0x168a>
 8010d12:	3e01      	subs	r6, #1
 8010d14:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8010d18:	d0dc      	beq.n	8010cd4 <dwt_ioctl+0x157c>
 8010d1a:	4543      	cmp	r3, r8
 8010d1c:	d924      	bls.n	8010d68 <dwt_ioctl+0x1610>
 8010d1e:	4563      	cmp	r3, ip
 8010d20:	d222      	bcs.n	8010d68 <dwt_ioctl+0x1610>
 8010d22:	1af8      	subs	r0, r7, r3
 8010d24:	b200      	sxth	r0, r0
 8010d26:	2800      	cmp	r0, #0
 8010d28:	bfb8      	it	lt
 8010d2a:	4240      	neglt	r0, r0
 8010d2c:	4558      	cmp	r0, fp
 8010d2e:	dddd      	ble.n	8010cec <dwt_ioctl+0x1594>
 8010d30:	2c00      	cmp	r4, #0
 8010d32:	d0e1      	beq.n	8010cf8 <dwt_ioctl+0x15a0>
 8010d34:	4674      	mov	r4, lr
 8010d36:	9a07      	ldr	r2, [sp, #28]
 8010d38:	9b08      	ldr	r3, [sp, #32]
 8010d3a:	e055      	b.n	8010de8 <dwt_ioctl+0x1690>
 8010d3c:	00050008 	.word	0x00050008
 8010d40:	001f000c 	.word	0x001f000c
 8010d44:	001f0010 	.word	0x001f0010
 8010d48:	00010020 	.word	0x00010020
 8010d4c:	00030054 	.word	0x00030054
 8010d50:	00010018 	.word	0x00010018
 8010d54:	0005002c 	.word	0x0005002c
 8010d58:	000e001c 	.word	0x000e001c
 8010d5c:	080120ec 	.word	0x080120ec
 8010d60:	0801206c 	.word	0x0801206c
 8010d64:	080120ac 	.word	0x080120ac
 8010d68:	b984      	cbnz	r4, 8010d8c <dwt_ioctl+0x1634>
 8010d6a:	4563      	cmp	r3, ip
 8010d6c:	d3c4      	bcc.n	8010cf8 <dwt_ioctl+0x15a0>
 8010d6e:	b199      	cbz	r1, 8010d98 <dwt_ioctl+0x1640>
 8010d70:	2d3f      	cmp	r5, #63	; 0x3f
 8010d72:	d014      	beq.n	8010d9e <dwt_ioctl+0x1646>
 8010d74:	f819 1005 	ldrb.w	r1, [r9, r5]
 8010d78:	1a5b      	subs	r3, r3, r1
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	1e69      	subs	r1, r5, #1
 8010d7e:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8010d82:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8010d86:	bf18      	it	ne
 8010d88:	2101      	movne	r1, #1
 8010d8a:	e7c0      	b.n	8010d0e <dwt_ioctl+0x15b6>
 8010d8c:	4674      	mov	r4, lr
 8010d8e:	f819 1005 	ldrb.w	r1, [r9, r5]
 8010d92:	1a5b      	subs	r3, r3, r1
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	e027      	b.n	8010de8 <dwt_ioctl+0x1690>
 8010d98:	4674      	mov	r4, lr
 8010d9a:	9503      	str	r5, [sp, #12]
 8010d9c:	e024      	b.n	8010de8 <dwt_ioctl+0x1690>
 8010d9e:	2c00      	cmp	r4, #0
 8010da0:	d134      	bne.n	8010e0c <dwt_ioctl+0x16b4>
 8010da2:	2a03      	cmp	r2, #3
 8010da4:	d036      	beq.n	8010e14 <dwt_ioctl+0x16bc>
 8010da6:	2a02      	cmp	r2, #2
 8010da8:	d009      	beq.n	8010dbe <dwt_ioctl+0x1666>
 8010daa:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010dae:	1858      	adds	r0, r3, r1
 8010db0:	42b8      	cmp	r0, r7
 8010db2:	dd0b      	ble.n	8010dcc <dwt_ioctl+0x1674>
 8010db4:	440b      	add	r3, r1
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	3201      	adds	r2, #1
 8010dba:	b2d2      	uxtb	r2, r2
 8010dbc:	e7da      	b.n	8010d74 <dwt_ioctl+0x161c>
 8010dbe:	9906      	ldr	r1, [sp, #24]
 8010dc0:	2909      	cmp	r1, #9
 8010dc2:	d1f2      	bne.n	8010daa <dwt_ioctl+0x1652>
 8010dc4:	4674      	mov	r4, lr
 8010dc6:	213f      	movs	r1, #63	; 0x3f
 8010dc8:	9103      	str	r1, [sp, #12]
 8010dca:	e00d      	b.n	8010de8 <dwt_ioctl+0x1690>
 8010dcc:	4674      	mov	r4, lr
 8010dce:	b283      	uxth	r3, r0
 8010dd0:	3201      	adds	r2, #1
 8010dd2:	b2d2      	uxtb	r2, r2
 8010dd4:	213f      	movs	r1, #63	; 0x3f
 8010dd6:	9103      	str	r1, [sp, #12]
 8010dd8:	e006      	b.n	8010de8 <dwt_ioctl+0x1690>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	e74b      	b.n	8010c76 <dwt_ioctl+0x151e>
 8010dde:	2300      	movs	r3, #0
 8010de0:	e749      	b.n	8010c76 <dwt_ioctl+0x151e>
 8010de2:	4674      	mov	r4, lr
 8010de4:	9503      	str	r5, [sp, #12]
 8010de6:	463b      	mov	r3, r7
 8010de8:	9905      	ldr	r1, [sp, #20]
 8010dea:	800b      	strh	r3, [r1, #0]
 8010dec:	9b03      	ldr	r3, [sp, #12]
 8010dee:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	041a      	lsls	r2, r3, #16
 8010df6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8010dfa:	431a      	orrs	r2, r3
 8010dfc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8010e00:	9a04      	ldr	r2, [sp, #16]
 8010e02:	6013      	str	r3, [r2, #0]
 8010e04:	2300      	movs	r3, #0
 8010e06:	6023      	str	r3, [r4, #0]
 8010e08:	2500      	movs	r5, #0
 8010e0a:	e3ad      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010e0c:	4674      	mov	r4, lr
 8010e0e:	9a07      	ldr	r2, [sp, #28]
 8010e10:	9b08      	ldr	r3, [sp, #32]
 8010e12:	e7e9      	b.n	8010de8 <dwt_ioctl+0x1690>
 8010e14:	4674      	mov	r4, lr
 8010e16:	213f      	movs	r1, #63	; 0x3f
 8010e18:	9103      	str	r1, [sp, #12]
 8010e1a:	e7e5      	b.n	8010de8 <dwt_ioctl+0x1690>
 8010e1c:	2c00      	cmp	r4, #0
 8010e1e:	f000 8453 	beq.w	80116c8 <dwt_ioctl+0x1f70>
 8010e22:	7827      	ldrb	r7, [r4, #0]
 8010e24:	7864      	ldrb	r4, [r4, #1]
 8010e26:	f7ef fbe5 	bl	80005f4 <decamutexon>
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	2c02      	cmp	r4, #2
 8010e2e:	d00e      	beq.n	8010e4e <dwt_ioctl+0x16f6>
 8010e30:	2c04      	cmp	r4, #4
 8010e32:	d00c      	beq.n	8010e4e <dwt_ioctl+0x16f6>
 8010e34:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8010e38:	2c01      	cmp	r4, #1
 8010e3a:	d019      	beq.n	8010e70 <dwt_ioctl+0x1718>
 8010e3c:	43fb      	mvns	r3, r7
 8010e3e:	2200      	movs	r2, #0
 8010e40:	9200      	str	r2, [sp, #0]
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	49c1      	ldr	r1, [pc, #772]	; (801114c <dwt_ioctl+0x19f4>)
 8010e46:	4630      	mov	r0, r6
 8010e48:	f7fd fc5a 	bl	800e700 <dwt_modify8bitoffsetreg>
 8010e4c:	e005      	b.n	8010e5a <dwt_ioctl+0x1702>
 8010e4e:	463b      	mov	r3, r7
 8010e50:	2200      	movs	r2, #0
 8010e52:	49be      	ldr	r1, [pc, #760]	; (801114c <dwt_ioctl+0x19f4>)
 8010e54:	4630      	mov	r0, r6
 8010e56:	f7fc ffc1 	bl	800dddc <dwt_write8bitoffsetreg>
 8010e5a:	463b      	mov	r3, r7
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	49bc      	ldr	r1, [pc, #752]	; (8011150 <dwt_ioctl+0x19f8>)
 8010e60:	4630      	mov	r0, r6
 8010e62:	f7fc fdd7 	bl	800da14 <dwt_write32bitoffsetreg>
 8010e66:	4628      	mov	r0, r5
 8010e68:	f7ef fbd5 	bl	8000616 <decamutexoff>
 8010e6c:	2500      	movs	r5, #0
 8010e6e:	e37b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010e70:	9700      	str	r7, [sp, #0]
 8010e72:	23ff      	movs	r3, #255	; 0xff
 8010e74:	2200      	movs	r2, #0
 8010e76:	49b5      	ldr	r1, [pc, #724]	; (801114c <dwt_ioctl+0x19f4>)
 8010e78:	4630      	mov	r0, r6
 8010e7a:	f7fd fc41 	bl	800e700 <dwt_modify8bitoffsetreg>
 8010e7e:	e7ec      	b.n	8010e5a <dwt_ioctl+0x1702>
 8010e80:	2302      	movs	r3, #2
 8010e82:	9301      	str	r3, [sp, #4]
 8010e84:	2500      	movs	r5, #0
 8010e86:	9500      	str	r5, [sp, #0]
 8010e88:	462b      	mov	r3, r5
 8010e8a:	462a      	mov	r2, r5
 8010e8c:	211a      	movs	r1, #26
 8010e8e:	f7fc f85a 	bl	800cf46 <dwt_xfer3xxx>
 8010e92:	e369      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010e94:	f7fe fc4c 	bl	800f730 <ull_softreset_fcmd>
 8010e98:	2500      	movs	r5, #0
 8010e9a:	e365      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010e9c:	f7fe fc34 	bl	800f708 <ull_softreset_no_sema_fcmd>
 8010ea0:	2500      	movs	r5, #0
 8010ea2:	e361      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	2500      	movs	r5, #0
 8010eaa:	9500      	str	r5, [sp, #0]
 8010eac:	462b      	mov	r3, r5
 8010eae:	462a      	mov	r2, r5
 8010eb0:	2114      	movs	r1, #20
 8010eb2:	f7fc f848 	bl	800cf46 <dwt_xfer3xxx>
 8010eb6:	e357      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010eb8:	2402      	movs	r4, #2
 8010eba:	9401      	str	r4, [sp, #4]
 8010ebc:	2500      	movs	r5, #0
 8010ebe:	9500      	str	r5, [sp, #0]
 8010ec0:	462b      	mov	r3, r5
 8010ec2:	462a      	mov	r2, r5
 8010ec4:	2115      	movs	r1, #21
 8010ec6:	f7fc f83e 	bl	800cf46 <dwt_xfer3xxx>
 8010eca:	9401      	str	r4, [sp, #4]
 8010ecc:	9500      	str	r5, [sp, #0]
 8010ece:	462b      	mov	r3, r5
 8010ed0:	462a      	mov	r2, r5
 8010ed2:	2115      	movs	r1, #21
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f7fc f836 	bl	800cf46 <dwt_xfer3xxx>
 8010eda:	e345      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010edc:	2302      	movs	r3, #2
 8010ede:	9301      	str	r3, [sp, #4]
 8010ee0:	2500      	movs	r5, #0
 8010ee2:	9500      	str	r5, [sp, #0]
 8010ee4:	462b      	mov	r3, r5
 8010ee6:	462a      	mov	r2, r5
 8010ee8:	2116      	movs	r1, #22
 8010eea:	f7fc f82c 	bl	800cf46 <dwt_xfer3xxx>
 8010eee:	e33b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010ef0:	2c00      	cmp	r4, #0
 8010ef2:	f000 83eb 	beq.w	80116cc <dwt_ioctl+0x1f74>
 8010ef6:	b932      	cbnz	r2, 8010f06 <dwt_ioctl+0x17ae>
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8010efe:	f7fc f8ff 	bl	800d100 <dwt_read8bitoffsetreg>
 8010f02:	7020      	strb	r0, [r4, #0]
 8010f04:	e330      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010f06:	2201      	movs	r2, #1
 8010f08:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8010f0c:	f7fc f8f8 	bl	800d100 <dwt_read8bitoffsetreg>
 8010f10:	7020      	strb	r0, [r4, #0]
 8010f12:	2500      	movs	r5, #0
 8010f14:	e328      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010f16:	2c00      	cmp	r4, #0
 8010f18:	f000 83da 	beq.w	80116d0 <dwt_ioctl+0x1f78>
 8010f1c:	7824      	ldrb	r4, [r4, #0]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8010f24:	f7fc f8ec 	bl	800d100 <dwt_read8bitoffsetreg>
 8010f28:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8010f2c:	4323      	orrs	r3, r4
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8010f34:	4630      	mov	r0, r6
 8010f36:	f7fc ff51 	bl	800dddc <dwt_write8bitoffsetreg>
 8010f3a:	2500      	movs	r5, #0
 8010f3c:	e314      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010f3e:	2c00      	cmp	r4, #0
 8010f40:	f000 83c8 	beq.w	80116d4 <dwt_ioctl+0x1f7c>
 8010f44:	7824      	ldrb	r4, [r4, #0]
 8010f46:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8010f4a:	d01d      	beq.n	8010f88 <dwt_ioctl+0x1830>
 8010f4c:	2d01      	cmp	r5, #1
 8010f4e:	f040 83c3 	bne.w	80116d8 <dwt_ioctl+0x1f80>
 8010f52:	2502      	movs	r5, #2
 8010f54:	2201      	movs	r2, #1
 8010f56:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	f7fc f8d0 	bl	800d100 <dwt_read8bitoffsetreg>
 8010f60:	b9a4      	cbnz	r4, 8010f8c <dwt_ioctl+0x1834>
 8010f62:	ea20 0305 	bic.w	r3, r0, r5
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8010f6e:	4630      	mov	r0, r6
 8010f70:	f7fc ff34 	bl	800dddc <dwt_write8bitoffsetreg>
 8010f74:	2200      	movs	r2, #0
 8010f76:	2110      	movs	r1, #16
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f7fc f86c 	bl	800d056 <dwt_read32bitoffsetreg>
 8010f7e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8010f82:	d00a      	beq.n	8010f9a <dwt_ioctl+0x1842>
 8010f84:	2500      	movs	r5, #0
 8010f86:	e2ef      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010f88:	2504      	movs	r5, #4
 8010f8a:	e7e3      	b.n	8010f54 <dwt_ioctl+0x17fc>
 8010f8c:	2c01      	cmp	r4, #1
 8010f8e:	f040 83a6 	bne.w	80116de <dwt_ioctl+0x1f86>
 8010f92:	ea40 0305 	orr.w	r3, r0, r5
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	e7e6      	b.n	8010f68 <dwt_ioctl+0x1810>
 8010f9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2110      	movs	r1, #16
 8010fa8:	4630      	mov	r0, r6
 8010faa:	f7fd fa39 	bl	800e420 <dwt_modify32bitoffsetreg>
 8010fae:	2500      	movs	r5, #0
 8010fb0:	e2da      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010fb2:	2c00      	cmp	r4, #0
 8010fb4:	f000 8396 	beq.w	80116e4 <dwt_ioctl+0x1f8c>
 8010fb8:	7823      	ldrb	r3, [r4, #0]
 8010fba:	035b      	lsls	r3, r3, #13
 8010fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	4962      	ldr	r1, [pc, #392]	; (8011154 <dwt_ioctl+0x19fc>)
 8010fca:	f7fd ff29 	bl	800ee20 <dwt_modify16bitoffsetreg>
 8010fce:	2500      	movs	r5, #0
 8010fd0:	e2ca      	b.n	8011568 <dwt_ioctl+0x1e10>
 8010fd2:	2c00      	cmp	r4, #0
 8010fd4:	f000 8388 	beq.w	80116e8 <dwt_ioctl+0x1f90>
 8010fd8:	7825      	ldrb	r5, [r4, #0]
 8010fda:	6862      	ldr	r2, [r4, #4]
 8010fdc:	2a01      	cmp	r2, #1
 8010fde:	bf15      	itete	ne
 8010fe0:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8010fe4:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8010fe8:	27df      	movne	r7, #223	; 0xdf
 8010fea:	27ef      	moveq	r7, #239	; 0xef
 8010fec:	bf14      	ite	ne
 8010fee:	f04f 0820 	movne.w	r8, #32
 8010ff2:	f04f 0810 	moveq.w	r8, #16
 8010ff6:	2400      	movs	r4, #0
 8010ff8:	9400      	str	r4, [sp, #0]
 8010ffa:	4622      	mov	r2, r4
 8010ffc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011000:	f7fd fa0e 	bl	800e420 <dwt_modify32bitoffsetreg>
 8011004:	9400      	str	r4, [sp, #0]
 8011006:	463b      	mov	r3, r7
 8011008:	4622      	mov	r2, r4
 801100a:	4953      	ldr	r1, [pc, #332]	; (8011158 <dwt_ioctl+0x1a00>)
 801100c:	4630      	mov	r0, r6
 801100e:	f7fd fb77 	bl	800e700 <dwt_modify8bitoffsetreg>
 8011012:	2d01      	cmp	r5, #1
 8011014:	d002      	beq.n	801101c <dwt_ioctl+0x18c4>
 8011016:	b155      	cbz	r5, 801102e <dwt_ioctl+0x18d6>
 8011018:	2500      	movs	r5, #0
 801101a:	e2a5      	b.n	8011568 <dwt_ioctl+0x1e10>
 801101c:	4625      	mov	r5, r4
 801101e:	9400      	str	r4, [sp, #0]
 8011020:	463b      	mov	r3, r7
 8011022:	4622      	mov	r2, r4
 8011024:	494d      	ldr	r1, [pc, #308]	; (801115c <dwt_ioctl+0x1a04>)
 8011026:	4630      	mov	r0, r6
 8011028:	f7fd fb6a 	bl	800e700 <dwt_modify8bitoffsetreg>
 801102c:	e29c      	b.n	8011568 <dwt_ioctl+0x1e10>
 801102e:	f8cd 8000 	str.w	r8, [sp]
 8011032:	23ff      	movs	r3, #255	; 0xff
 8011034:	2200      	movs	r2, #0
 8011036:	4949      	ldr	r1, [pc, #292]	; (801115c <dwt_ioctl+0x1a04>)
 8011038:	4630      	mov	r0, r6
 801103a:	f7fd fb61 	bl	800e700 <dwt_modify8bitoffsetreg>
 801103e:	e293      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011040:	2c00      	cmp	r4, #0
 8011042:	f000 8353 	beq.w	80116ec <dwt_ioctl+0x1f94>
 8011046:	7822      	ldrb	r2, [r4, #0]
 8011048:	f012 0f01 	tst.w	r2, #1
 801104c:	d02c      	beq.n	80110a8 <dwt_ioctl+0x1950>
 801104e:	0157      	lsls	r7, r2, #5
 8011050:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8011054:	2440      	movs	r4, #64	; 0x40
 8011056:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801105a:	f012 0f04 	tst.w	r2, #4
 801105e:	d027      	beq.n	80110b0 <dwt_ioctl+0x1958>
 8011060:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8011064:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8011068:	0112      	lsls	r2, r2, #4
 801106a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801106e:	4317      	orrs	r7, r2
 8011070:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011074:	9200      	str	r2, [sp, #0]
 8011076:	43db      	mvns	r3, r3
 8011078:	2200      	movs	r2, #0
 801107a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801107e:	4630      	mov	r0, r6
 8011080:	f7fd f9ce 	bl	800e420 <dwt_modify32bitoffsetreg>
 8011084:	43e4      	mvns	r4, r4
 8011086:	b2a4      	uxth	r4, r4
 8011088:	2500      	movs	r5, #0
 801108a:	9500      	str	r5, [sp, #0]
 801108c:	4623      	mov	r3, r4
 801108e:	462a      	mov	r2, r5
 8011090:	4931      	ldr	r1, [pc, #196]	; (8011158 <dwt_ioctl+0x1a00>)
 8011092:	4630      	mov	r0, r6
 8011094:	f7fd fec4 	bl	800ee20 <dwt_modify16bitoffsetreg>
 8011098:	9700      	str	r7, [sp, #0]
 801109a:	4623      	mov	r3, r4
 801109c:	462a      	mov	r2, r5
 801109e:	492f      	ldr	r1, [pc, #188]	; (801115c <dwt_ioctl+0x1a04>)
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7fd febd 	bl	800ee20 <dwt_modify16bitoffsetreg>
 80110a6:	e25f      	b.n	8011568 <dwt_ioctl+0x1e10>
 80110a8:	2700      	movs	r7, #0
 80110aa:	463c      	mov	r4, r7
 80110ac:	463b      	mov	r3, r7
 80110ae:	e7d4      	b.n	801105a <dwt_ioctl+0x1902>
 80110b0:	2200      	movs	r2, #0
 80110b2:	e7df      	b.n	8011074 <dwt_ioctl+0x191c>
 80110b4:	2308      	movs	r3, #8
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	23ff      	movs	r3, #255	; 0xff
 80110ba:	2201      	movs	r2, #1
 80110bc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80110c0:	f7fd fb1e 	bl	800e700 <dwt_modify8bitoffsetreg>
 80110c4:	4c26      	ldr	r4, [pc, #152]	; (8011160 <dwt_ioctl+0x1a08>)
 80110c6:	2302      	movs	r3, #2
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	23ff      	movs	r3, #255	; 0xff
 80110cc:	2203      	movs	r2, #3
 80110ce:	4621      	mov	r1, r4
 80110d0:	4630      	mov	r0, r6
 80110d2:	f7fd fb15 	bl	800e700 <dwt_modify8bitoffsetreg>
 80110d6:	2500      	movs	r5, #0
 80110d8:	9500      	str	r5, [sp, #0]
 80110da:	23f7      	movs	r3, #247	; 0xf7
 80110dc:	2201      	movs	r2, #1
 80110de:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80110e2:	4630      	mov	r0, r6
 80110e4:	f7fd fb0c 	bl	800e700 <dwt_modify8bitoffsetreg>
 80110e8:	9500      	str	r5, [sp, #0]
 80110ea:	23fd      	movs	r3, #253	; 0xfd
 80110ec:	2203      	movs	r2, #3
 80110ee:	4621      	mov	r1, r4
 80110f0:	4630      	mov	r0, r6
 80110f2:	f7fd fb05 	bl	800e700 <dwt_modify8bitoffsetreg>
 80110f6:	e237      	b.n	8011568 <dwt_ioctl+0x1e10>
 80110f8:	2c00      	cmp	r4, #0
 80110fa:	f000 82f9 	beq.w	80116f0 <dwt_ioctl+0x1f98>
 80110fe:	8863      	ldrh	r3, [r4, #2]
 8011100:	00db      	lsls	r3, r3, #3
 8011102:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8011106:	7822      	ldrb	r2, [r4, #0]
 8011108:	b10a      	cbz	r2, 801110e <dwt_ioctl+0x19b6>
 801110a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801110e:	9300      	str	r3, [sp, #0]
 8011110:	f24f 0307 	movw	r3, #61447	; 0xf007
 8011114:	2200      	movs	r2, #0
 8011116:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801111a:	4630      	mov	r0, r6
 801111c:	f7fd fe80 	bl	800ee20 <dwt_modify16bitoffsetreg>
 8011120:	2500      	movs	r5, #0
 8011122:	e221      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011124:	2500      	movs	r5, #0
 8011126:	9500      	str	r5, [sp, #0]
 8011128:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 801112c:	462a      	mov	r2, r5
 801112e:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8011132:	f7fd fe75 	bl	800ee20 <dwt_modify16bitoffsetreg>
 8011136:	e217      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011138:	2c00      	cmp	r4, #0
 801113a:	f000 82db 	beq.w	80116f4 <dwt_ioctl+0x1f9c>
 801113e:	2200      	movs	r2, #0
 8011140:	4908      	ldr	r1, [pc, #32]	; (8011164 <dwt_ioctl+0x1a0c>)
 8011142:	f7fb ff9e 	bl	800d082 <dwt_read16bitoffsetreg>
 8011146:	8020      	strh	r0, [r4, #0]
 8011148:	2500      	movs	r5, #0
 801114a:	e20d      	b.n	8011568 <dwt_ioctl+0x1e10>
 801114c:	0001001c 	.word	0x0001001c
 8011150:	00010018 	.word	0x00010018
 8011154:	000e000c 	.word	0x000e000c
 8011158:	00050008 	.word	0x00050008
 801115c:	0005000c 	.word	0x0005000c
 8011160:	00110008 	.word	0x00110008
 8011164:	00110048 	.word	0x00110048
 8011168:	2c00      	cmp	r4, #0
 801116a:	f000 82c5 	beq.w	80116f8 <dwt_ioctl+0x1fa0>
 801116e:	7823      	ldrb	r3, [r4, #0]
 8011170:	2b01      	cmp	r3, #1
 8011172:	7862      	ldrb	r2, [r4, #1]
 8011174:	78a3      	ldrb	r3, [r4, #2]
 8011176:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801117a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801117e:	78e2      	ldrb	r2, [r4, #3]
 8011180:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8011184:	7922      	ldrb	r2, [r4, #4]
 8011186:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 801118a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801118e:	bf0c      	ite	eq
 8011190:	2202      	moveq	r2, #2
 8011192:	2200      	movne	r2, #0
 8011194:	49b6      	ldr	r1, [pc, #728]	; (8011470 <dwt_ioctl+0x1d18>)
 8011196:	f7fc fbd2 	bl	800d93e <dwt_write16bitoffsetreg>
 801119a:	2500      	movs	r5, #0
 801119c:	e1e4      	b.n	8011568 <dwt_ioctl+0x1e10>
 801119e:	2c00      	cmp	r4, #0
 80111a0:	f000 82ac 	beq.w	80116fc <dwt_ioctl+0x1fa4>
 80111a4:	6863      	ldr	r3, [r4, #4]
 80111a6:	7822      	ldrb	r2, [r4, #0]
 80111a8:	b13a      	cbz	r2, 80111ba <dwt_ioctl+0x1a62>
 80111aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80111ae:	2200      	movs	r2, #0
 80111b0:	49b0      	ldr	r1, [pc, #704]	; (8011474 <dwt_ioctl+0x1d1c>)
 80111b2:	f7fc fc2f 	bl	800da14 <dwt_write32bitoffsetreg>
 80111b6:	2500      	movs	r5, #0
 80111b8:	e1d6      	b.n	8011568 <dwt_ioctl+0x1e10>
 80111ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80111be:	49ae      	ldr	r1, [pc, #696]	; (8011478 <dwt_ioctl+0x1d20>)
 80111c0:	f7fc fc28 	bl	800da14 <dwt_write32bitoffsetreg>
 80111c4:	2500      	movs	r5, #0
 80111c6:	e1cf      	b.n	8011568 <dwt_ioctl+0x1e10>
 80111c8:	2c00      	cmp	r4, #0
 80111ca:	f000 8299 	beq.w	8011700 <dwt_ioctl+0x1fa8>
 80111ce:	7823      	ldrb	r3, [r4, #0]
 80111d0:	2401      	movs	r4, #1
 80111d2:	409c      	lsls	r4, r3
 80111d4:	b2e4      	uxtb	r4, r4
 80111d6:	2310      	movs	r3, #16
 80111d8:	9300      	str	r3, [sp, #0]
 80111da:	23ff      	movs	r3, #255	; 0xff
 80111dc:	2200      	movs	r2, #0
 80111de:	49a7      	ldr	r1, [pc, #668]	; (801147c <dwt_ioctl+0x1d24>)
 80111e0:	f7fd fa8e 	bl	800e700 <dwt_modify8bitoffsetreg>
 80111e4:	43e3      	mvns	r3, r4
 80111e6:	4fa2      	ldr	r7, [pc, #648]	; (8011470 <dwt_ioctl+0x1d18>)
 80111e8:	2500      	movs	r5, #0
 80111ea:	9500      	str	r5, [sp, #0]
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	462a      	mov	r2, r5
 80111f0:	4639      	mov	r1, r7
 80111f2:	4630      	mov	r0, r6
 80111f4:	f7fd fa84 	bl	800e700 <dwt_modify8bitoffsetreg>
 80111f8:	9400      	str	r4, [sp, #0]
 80111fa:	23ff      	movs	r3, #255	; 0xff
 80111fc:	462a      	mov	r2, r5
 80111fe:	4639      	mov	r1, r7
 8011200:	4630      	mov	r0, r6
 8011202:	f7fd fa7d 	bl	800e700 <dwt_modify8bitoffsetreg>
 8011206:	e1af      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011208:	2c00      	cmp	r4, #0
 801120a:	f000 827b 	beq.w	8011704 <dwt_ioctl+0x1fac>
 801120e:	7822      	ldrb	r2, [r4, #0]
 8011210:	7863      	ldrb	r3, [r4, #1]
 8011212:	b19b      	cbz	r3, 801123c <dwt_ioctl+0x1ae4>
 8011214:	2a00      	cmp	r2, #0
 8011216:	f040 8297 	bne.w	8011748 <dwt_ioctl+0x1ff0>
 801121a:	2400      	movs	r4, #0
 801121c:	9400      	str	r4, [sp, #0]
 801121e:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8011222:	4622      	mov	r2, r4
 8011224:	2110      	movs	r1, #16
 8011226:	f7fd f8fb 	bl	800e420 <dwt_modify32bitoffsetreg>
 801122a:	9400      	str	r4, [sp, #0]
 801122c:	4b94      	ldr	r3, [pc, #592]	; (8011480 <dwt_ioctl+0x1d28>)
 801122e:	4622      	mov	r2, r4
 8011230:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011234:	4630      	mov	r0, r6
 8011236:	f7fd f8f3 	bl	800e420 <dwt_modify32bitoffsetreg>
 801123a:	e017      	b.n	801126c <dwt_ioctl+0x1b14>
 801123c:	2a00      	cmp	r2, #0
 801123e:	f000 8285 	beq.w	801174c <dwt_ioctl+0x1ff4>
 8011242:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8011246:	2400      	movs	r4, #0
 8011248:	9400      	str	r4, [sp, #0]
 801124a:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801124e:	4622      	mov	r2, r4
 8011250:	2110      	movs	r1, #16
 8011252:	4630      	mov	r0, r6
 8011254:	f7fd f8e4 	bl	800e420 <dwt_modify32bitoffsetreg>
 8011258:	9500      	str	r5, [sp, #0]
 801125a:	4b89      	ldr	r3, [pc, #548]	; (8011480 <dwt_ioctl+0x1d28>)
 801125c:	4622      	mov	r2, r4
 801125e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011262:	4630      	mov	r0, r6
 8011264:	f7fd f8dc 	bl	800e420 <dwt_modify32bitoffsetreg>
 8011268:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 801126c:	9400      	str	r4, [sp, #0]
 801126e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011272:	2200      	movs	r2, #0
 8011274:	2110      	movs	r1, #16
 8011276:	4630      	mov	r0, r6
 8011278:	f7fd f8d2 	bl	800e420 <dwt_modify32bitoffsetreg>
 801127c:	2500      	movs	r5, #0
 801127e:	e173      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011280:	2c00      	cmp	r4, #0
 8011282:	f000 8241 	beq.w	8011708 <dwt_ioctl+0x1fb0>
 8011286:	7823      	ldrb	r3, [r4, #0]
 8011288:	b93b      	cbnz	r3, 801129a <dwt_ioctl+0x1b42>
 801128a:	2500      	movs	r5, #0
 801128c:	9500      	str	r5, [sp, #0]
 801128e:	23df      	movs	r3, #223	; 0xdf
 8011290:	2203      	movs	r2, #3
 8011292:	497c      	ldr	r1, [pc, #496]	; (8011484 <dwt_ioctl+0x1d2c>)
 8011294:	f7fd fa34 	bl	800e700 <dwt_modify8bitoffsetreg>
 8011298:	e166      	b.n	8011568 <dwt_ioctl+0x1e10>
 801129a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112a4:	2200      	movs	r2, #0
 80112a6:	4977      	ldr	r1, [pc, #476]	; (8011484 <dwt_ioctl+0x1d2c>)
 80112a8:	f7fd f8ba 	bl	800e420 <dwt_modify32bitoffsetreg>
 80112ac:	2500      	movs	r5, #0
 80112ae:	e15b      	b.n	8011568 <dwt_ioctl+0x1e10>
 80112b0:	2c00      	cmp	r4, #0
 80112b2:	f000 822b 	beq.w	801170c <dwt_ioctl+0x1fb4>
 80112b6:	7823      	ldrb	r3, [r4, #0]
 80112b8:	b93b      	cbnz	r3, 80112ca <dwt_ioctl+0x1b72>
 80112ba:	2500      	movs	r5, #0
 80112bc:	9500      	str	r5, [sp, #0]
 80112be:	237f      	movs	r3, #127	; 0x7f
 80112c0:	2203      	movs	r2, #3
 80112c2:	4971      	ldr	r1, [pc, #452]	; (8011488 <dwt_ioctl+0x1d30>)
 80112c4:	f7fd fa1c 	bl	800e700 <dwt_modify8bitoffsetreg>
 80112c8:	e14e      	b.n	8011568 <dwt_ioctl+0x1e10>
 80112ca:	2380      	movs	r3, #128	; 0x80
 80112cc:	9300      	str	r3, [sp, #0]
 80112ce:	23ff      	movs	r3, #255	; 0xff
 80112d0:	2203      	movs	r2, #3
 80112d2:	496d      	ldr	r1, [pc, #436]	; (8011488 <dwt_ioctl+0x1d30>)
 80112d4:	f7fd fa14 	bl	800e700 <dwt_modify8bitoffsetreg>
 80112d8:	2500      	movs	r5, #0
 80112da:	e145      	b.n	8011568 <dwt_ioctl+0x1e10>
 80112dc:	2c00      	cmp	r4, #0
 80112de:	f000 8217 	beq.w	8011710 <dwt_ioctl+0x1fb8>
 80112e2:	b2e3      	uxtb	r3, r4
 80112e4:	1c9a      	adds	r2, r3, #2
 80112e6:	2301      	movs	r3, #1
 80112e8:	4093      	lsls	r3, r2
 80112ea:	3b01      	subs	r3, #1
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	2200      	movs	r2, #0
 80112f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80112f4:	f7fc fd72 	bl	800dddc <dwt_write8bitoffsetreg>
 80112f8:	2500      	movs	r5, #0
 80112fa:	e135      	b.n	8011568 <dwt_ioctl+0x1e10>
 80112fc:	2c00      	cmp	r4, #0
 80112fe:	f000 8209 	beq.w	8011714 <dwt_ioctl+0x1fbc>
 8011302:	7ae3      	ldrb	r3, [r4, #11]
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 8207 	beq.w	8011718 <dwt_ioctl+0x1fc0>
 801130a:	7b63      	ldrb	r3, [r4, #13]
 801130c:	2b01      	cmp	r3, #1
 801130e:	7b20      	ldrb	r0, [r4, #12]
 8011310:	bf94      	ite	ls
 8011312:	2203      	movls	r2, #3
 8011314:	2204      	movhi	r2, #4
 8011316:	2110      	movs	r1, #16
 8011318:	4b5c      	ldr	r3, [pc, #368]	; (801148c <dwt_ioctl+0x1d34>)
 801131a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801131e:	f7fb fdf5 	bl	800cf0c <get_sts_mnth>
 8011322:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011326:	9000      	str	r0, [sp, #0]
 8011328:	f64f 7380 	movw	r3, #65408	; 0xff80
 801132c:	2202      	movs	r2, #2
 801132e:	4958      	ldr	r1, [pc, #352]	; (8011490 <dwt_ioctl+0x1d38>)
 8011330:	4630      	mov	r0, r6
 8011332:	f7fd fd75 	bl	800ee20 <dwt_modify16bitoffsetreg>
 8011336:	2394      	movs	r3, #148	; 0x94
 8011338:	2200      	movs	r2, #0
 801133a:	4956      	ldr	r1, [pc, #344]	; (8011494 <dwt_ioctl+0x1d3c>)
 801133c:	4630      	mov	r0, r6
 801133e:	f7fc fd4d 	bl	800dddc <dwt_write8bitoffsetreg>
 8011342:	2500      	movs	r5, #0
 8011344:	e110      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011346:	2c00      	cmp	r4, #0
 8011348:	f000 81e8 	beq.w	801171c <dwt_ioctl+0x1fc4>
 801134c:	2200      	movs	r2, #0
 801134e:	4952      	ldr	r1, [pc, #328]	; (8011498 <dwt_ioctl+0x1d40>)
 8011350:	f7fb fe81 	bl	800d056 <dwt_read32bitoffsetreg>
 8011354:	6020      	str	r0, [r4, #0]
 8011356:	2500      	movs	r5, #0
 8011358:	e106      	b.n	8011568 <dwt_ioctl+0x1e10>
 801135a:	2c00      	cmp	r4, #0
 801135c:	f000 81e0 	beq.w	8011720 <dwt_ioctl+0x1fc8>
 8011360:	2200      	movs	r2, #0
 8011362:	494e      	ldr	r1, [pc, #312]	; (801149c <dwt_ioctl+0x1d44>)
 8011364:	f7fb fe77 	bl	800d056 <dwt_read32bitoffsetreg>
 8011368:	6020      	str	r0, [r4, #0]
 801136a:	2500      	movs	r5, #0
 801136c:	e0fc      	b.n	8011568 <dwt_ioctl+0x1e10>
 801136e:	2c00      	cmp	r4, #0
 8011370:	f000 81d8 	beq.w	8011724 <dwt_ioctl+0x1fcc>
 8011374:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8011378:	6023      	str	r3, [r4, #0]
 801137a:	2500      	movs	r5, #0
 801137c:	e0f4      	b.n	8011568 <dwt_ioctl+0x1e10>
 801137e:	2c00      	cmp	r4, #0
 8011380:	f000 81d2 	beq.w	8011728 <dwt_ioctl+0x1fd0>
 8011384:	2500      	movs	r5, #0
 8011386:	950a      	str	r5, [sp, #40]	; 0x28
 8011388:	af0c      	add	r7, sp, #48	; 0x30
 801138a:	2319      	movs	r3, #25
 801138c:	f847 3d04 	str.w	r3, [r7, #-4]!
 8011390:	9700      	str	r7, [sp, #0]
 8011392:	2304      	movs	r3, #4
 8011394:	462a      	mov	r2, r5
 8011396:	4942      	ldr	r1, [pc, #264]	; (80114a0 <dwt_ioctl+0x1d48>)
 8011398:	f7fc fac6 	bl	800d928 <dwt_writetodevice>
 801139c:	f641 7348 	movw	r3, #8008	; 0x1f48
 80113a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80113a2:	9700      	str	r7, [sp, #0]
 80113a4:	2304      	movs	r3, #4
 80113a6:	462a      	mov	r2, r5
 80113a8:	493e      	ldr	r1, [pc, #248]	; (80114a4 <dwt_ioctl+0x1d4c>)
 80113aa:	4630      	mov	r0, r6
 80113ac:	f7fc fabc 	bl	800d928 <dwt_writetodevice>
 80113b0:	ab0a      	add	r3, sp, #40	; 0x28
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	2304      	movs	r3, #4
 80113b6:	462a      	mov	r2, r5
 80113b8:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80113bc:	4630      	mov	r0, r6
 80113be:	f7fb fe40 	bl	800d042 <dwt_readfromdevice>
 80113c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	e0cf      	b.n	8011568 <dwt_ioctl+0x1e10>
 80113c8:	2c00      	cmp	r4, #0
 80113ca:	f000 81af 	beq.w	801172c <dwt_ioctl+0x1fd4>
 80113ce:	2200      	movs	r2, #0
 80113d0:	4935      	ldr	r1, [pc, #212]	; (80114a8 <dwt_ioctl+0x1d50>)
 80113d2:	f7fb fe40 	bl	800d056 <dwt_read32bitoffsetreg>
 80113d6:	b280      	uxth	r0, r0
 80113d8:	6020      	str	r0, [r4, #0]
 80113da:	2200      	movs	r2, #0
 80113dc:	4933      	ldr	r1, [pc, #204]	; (80114ac <dwt_ioctl+0x1d54>)
 80113de:	4630      	mov	r0, r6
 80113e0:	f7fb fe39 	bl	800d056 <dwt_read32bitoffsetreg>
 80113e4:	0d43      	lsrs	r3, r0, #21
 80113e6:	019b      	lsls	r3, r3, #6
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	6063      	str	r3, [r4, #4]
 80113ec:	2500      	movs	r5, #0
 80113ee:	e0bb      	b.n	8011568 <dwt_ioctl+0x1e10>
 80113f0:	2c00      	cmp	r4, #0
 80113f2:	f000 819d 	beq.w	8011730 <dwt_ioctl+0x1fd8>
 80113f6:	7d63      	ldrb	r3, [r4, #21]
 80113f8:	b133      	cbz	r3, 8011408 <dwt_ioctl+0x1cb0>
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d062      	beq.n	80114c4 <dwt_ioctl+0x1d6c>
 80113fe:	2b02      	cmp	r3, #2
 8011400:	f000 8089 	beq.w	8011516 <dwt_ioctl+0x1dbe>
 8011404:	23ff      	movs	r3, #255	; 0xff
 8011406:	e02f      	b.n	8011468 <dwt_ioctl+0x1d10>
 8011408:	2200      	movs	r2, #0
 801140a:	4929      	ldr	r1, [pc, #164]	; (80114b0 <dwt_ioctl+0x1d58>)
 801140c:	f7fb fe23 	bl	800d056 <dwt_read32bitoffsetreg>
 8011410:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011414:	6020      	str	r0, [r4, #0]
 8011416:	2200      	movs	r2, #0
 8011418:	4926      	ldr	r1, [pc, #152]	; (80114b4 <dwt_ioctl+0x1d5c>)
 801141a:	4630      	mov	r0, r6
 801141c:	f7fb fe1b 	bl	800d056 <dwt_read32bitoffsetreg>
 8011420:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011424:	6060      	str	r0, [r4, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	4923      	ldr	r1, [pc, #140]	; (80114b8 <dwt_ioctl+0x1d60>)
 801142a:	4630      	mov	r0, r6
 801142c:	f7fb fe13 	bl	800d056 <dwt_read32bitoffsetreg>
 8011430:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011434:	60a0      	str	r0, [r4, #8]
 8011436:	2200      	movs	r2, #0
 8011438:	4920      	ldr	r1, [pc, #128]	; (80114bc <dwt_ioctl+0x1d64>)
 801143a:	4630      	mov	r0, r6
 801143c:	f7fb fe0b 	bl	800d056 <dwt_read32bitoffsetreg>
 8011440:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011444:	60e0      	str	r0, [r4, #12]
 8011446:	2200      	movs	r2, #0
 8011448:	491d      	ldr	r1, [pc, #116]	; (80114c0 <dwt_ioctl+0x1d68>)
 801144a:	4630      	mov	r0, r6
 801144c:	f7fb fe03 	bl	800d056 <dwt_read32bitoffsetreg>
 8011450:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011454:	6120      	str	r0, [r4, #16]
 8011456:	2203      	movs	r2, #3
 8011458:	490f      	ldr	r1, [pc, #60]	; (8011498 <dwt_ioctl+0x1d40>)
 801145a:	4630      	mov	r0, r6
 801145c:	f7fb fe50 	bl	800d100 <dwt_read8bitoffsetreg>
 8011460:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8011464:	7520      	strb	r0, [r4, #20]
 8011466:	2300      	movs	r3, #0
 8011468:	75a3      	strb	r3, [r4, #22]
 801146a:	2500      	movs	r5, #0
 801146c:	e07c      	b.n	8011568 <dwt_ioctl+0x1e10>
 801146e:	bf00      	nop
 8011470:	0011003c 	.word	0x0011003c
 8011474:	00110044 	.word	0x00110044
 8011478:	00110040 	.word	0x00110040
 801147c:	00070048 	.word	0x00070048
 8011480:	f7fc0fff 	.word	0xf7fc0fff
 8011484:	000f0028 	.word	0x000f0028
 8011488:	0007001c 	.word	0x0007001c
 801148c:	080120f8 	.word	0x080120f8
 8011490:	000e0014 	.word	0x000e0014
 8011494:	000e0018 	.word	0x000e0018
 8011498:	00030054 	.word	0x00030054
 801149c:	000f004c 	.word	0x000f004c
 80114a0:	001f0004 	.word	0x001f0004
 80114a4:	001f0008 	.word	0x001f0008
 80114a8:	000c0048 	.word	0x000c0048
 80114ac:	000c0028 	.word	0x000c0028
 80114b0:	000c0058 	.word	0x000c0058
 80114b4:	000c0030 	.word	0x000c0030
 80114b8:	000c0034 	.word	0x000c0034
 80114bc:	000c0038 	.word	0x000c0038
 80114c0:	000c002c 	.word	0x000c002c
 80114c4:	2200      	movs	r2, #0
 80114c6:	49aa      	ldr	r1, [pc, #680]	; (8011770 <dwt_ioctl+0x2018>)
 80114c8:	f7fb fdc5 	bl	800d056 <dwt_read32bitoffsetreg>
 80114cc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80114d0:	6020      	str	r0, [r4, #0]
 80114d2:	2200      	movs	r2, #0
 80114d4:	49a7      	ldr	r1, [pc, #668]	; (8011774 <dwt_ioctl+0x201c>)
 80114d6:	4630      	mov	r0, r6
 80114d8:	f7fb fdbd 	bl	800d056 <dwt_read32bitoffsetreg>
 80114dc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80114e0:	6060      	str	r0, [r4, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	49a4      	ldr	r1, [pc, #656]	; (8011778 <dwt_ioctl+0x2020>)
 80114e6:	4630      	mov	r0, r6
 80114e8:	f7fb fdb5 	bl	800d056 <dwt_read32bitoffsetreg>
 80114ec:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80114f0:	60a0      	str	r0, [r4, #8]
 80114f2:	2200      	movs	r2, #0
 80114f4:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80114f8:	4630      	mov	r0, r6
 80114fa:	f7fb fdac 	bl	800d056 <dwt_read32bitoffsetreg>
 80114fe:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011502:	60e0      	str	r0, [r4, #12]
 8011504:	2200      	movs	r2, #0
 8011506:	499d      	ldr	r1, [pc, #628]	; (801177c <dwt_ioctl+0x2024>)
 8011508:	4630      	mov	r0, r6
 801150a:	f7fb fda4 	bl	800d056 <dwt_read32bitoffsetreg>
 801150e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011512:	6120      	str	r0, [r4, #16]
 8011514:	e79f      	b.n	8011456 <dwt_ioctl+0x1cfe>
 8011516:	2200      	movs	r2, #0
 8011518:	4999      	ldr	r1, [pc, #612]	; (8011780 <dwt_ioctl+0x2028>)
 801151a:	f7fb fd9c 	bl	800d056 <dwt_read32bitoffsetreg>
 801151e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011522:	6020      	str	r0, [r4, #0]
 8011524:	2200      	movs	r2, #0
 8011526:	4997      	ldr	r1, [pc, #604]	; (8011784 <dwt_ioctl+0x202c>)
 8011528:	4630      	mov	r0, r6
 801152a:	f7fb fd94 	bl	800d056 <dwt_read32bitoffsetreg>
 801152e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011532:	6060      	str	r0, [r4, #4]
 8011534:	2200      	movs	r2, #0
 8011536:	4994      	ldr	r1, [pc, #592]	; (8011788 <dwt_ioctl+0x2030>)
 8011538:	4630      	mov	r0, r6
 801153a:	f7fb fd8c 	bl	800d056 <dwt_read32bitoffsetreg>
 801153e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011542:	60a0      	str	r0, [r4, #8]
 8011544:	2200      	movs	r2, #0
 8011546:	4991      	ldr	r1, [pc, #580]	; (801178c <dwt_ioctl+0x2034>)
 8011548:	4630      	mov	r0, r6
 801154a:	f7fb fd84 	bl	800d056 <dwt_read32bitoffsetreg>
 801154e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011552:	60e0      	str	r0, [r4, #12]
 8011554:	2200      	movs	r2, #0
 8011556:	498e      	ldr	r1, [pc, #568]	; (8011790 <dwt_ioctl+0x2038>)
 8011558:	4630      	mov	r0, r6
 801155a:	f7fb fd7c 	bl	800d056 <dwt_read32bitoffsetreg>
 801155e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011562:	6120      	str	r0, [r4, #16]
 8011564:	e777      	b.n	8011456 <dwt_ioctl+0x1cfe>
 8011566:	2500      	movs	r5, #0
 8011568:	4628      	mov	r0, r5
 801156a:	b00d      	add	sp, #52	; 0x34
 801156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011570:	2500      	movs	r5, #0
 8011572:	e7f9      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011574:	2500      	movs	r5, #0
 8011576:	e7f7      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011578:	2500      	movs	r5, #0
 801157a:	e7f5      	b.n	8011568 <dwt_ioctl+0x1e10>
 801157c:	2500      	movs	r5, #0
 801157e:	e7f3      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011580:	2500      	movs	r5, #0
 8011582:	e7f1      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011584:	2500      	movs	r5, #0
 8011586:	e7ef      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011588:	2500      	movs	r5, #0
 801158a:	e7ed      	b.n	8011568 <dwt_ioctl+0x1e10>
 801158c:	2500      	movs	r5, #0
 801158e:	e7eb      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011590:	2500      	movs	r5, #0
 8011592:	e7e9      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011594:	2500      	movs	r5, #0
 8011596:	e7e7      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011598:	2500      	movs	r5, #0
 801159a:	e7e5      	b.n	8011568 <dwt_ioctl+0x1e10>
 801159c:	2500      	movs	r5, #0
 801159e:	e7e3      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115a0:	2500      	movs	r5, #0
 80115a2:	e7e1      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115a4:	2500      	movs	r5, #0
 80115a6:	e7df      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115a8:	2500      	movs	r5, #0
 80115aa:	e7dd      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115ac:	2500      	movs	r5, #0
 80115ae:	e7db      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115b0:	2500      	movs	r5, #0
 80115b2:	e7d9      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115b4:	2500      	movs	r5, #0
 80115b6:	e7d7      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115b8:	2500      	movs	r5, #0
 80115ba:	e7d5      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115bc:	2500      	movs	r5, #0
 80115be:	e7d3      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115c0:	2500      	movs	r5, #0
 80115c2:	e7d1      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115c4:	2500      	movs	r5, #0
 80115c6:	e7cf      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115c8:	2500      	movs	r5, #0
 80115ca:	e7cd      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115cc:	2500      	movs	r5, #0
 80115ce:	e7cb      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115d0:	2500      	movs	r5, #0
 80115d2:	e7c9      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115d4:	2500      	movs	r5, #0
 80115d6:	e7c7      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115d8:	2500      	movs	r5, #0
 80115da:	e7c5      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115dc:	2500      	movs	r5, #0
 80115de:	e7c3      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115e0:	2500      	movs	r5, #0
 80115e2:	e7c1      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115e4:	2500      	movs	r5, #0
 80115e6:	e7bf      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115e8:	2500      	movs	r5, #0
 80115ea:	e7bd      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115ec:	2500      	movs	r5, #0
 80115ee:	e7bb      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115f0:	2500      	movs	r5, #0
 80115f2:	e7b9      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115f4:	2500      	movs	r5, #0
 80115f6:	e7b7      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115f8:	2500      	movs	r5, #0
 80115fa:	e7b5      	b.n	8011568 <dwt_ioctl+0x1e10>
 80115fc:	2500      	movs	r5, #0
 80115fe:	e7b3      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011600:	2500      	movs	r5, #0
 8011602:	e7b1      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011604:	2500      	movs	r5, #0
 8011606:	e7af      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011608:	2500      	movs	r5, #0
 801160a:	e7ad      	b.n	8011568 <dwt_ioctl+0x1e10>
 801160c:	2500      	movs	r5, #0
 801160e:	e7ab      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011610:	2500      	movs	r5, #0
 8011612:	e7a9      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011614:	2500      	movs	r5, #0
 8011616:	e7a7      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011618:	2500      	movs	r5, #0
 801161a:	e7a5      	b.n	8011568 <dwt_ioctl+0x1e10>
 801161c:	2500      	movs	r5, #0
 801161e:	e7a3      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011620:	2500      	movs	r5, #0
 8011622:	e7a1      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011624:	2500      	movs	r5, #0
 8011626:	e79f      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011628:	2500      	movs	r5, #0
 801162a:	e79d      	b.n	8011568 <dwt_ioctl+0x1e10>
 801162c:	2500      	movs	r5, #0
 801162e:	e79b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011630:	2500      	movs	r5, #0
 8011632:	e799      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011634:	2500      	movs	r5, #0
 8011636:	e797      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011638:	2500      	movs	r5, #0
 801163a:	e795      	b.n	8011568 <dwt_ioctl+0x1e10>
 801163c:	2500      	movs	r5, #0
 801163e:	e793      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011640:	2500      	movs	r5, #0
 8011642:	e791      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011644:	2500      	movs	r5, #0
 8011646:	e78f      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011648:	2500      	movs	r5, #0
 801164a:	e78d      	b.n	8011568 <dwt_ioctl+0x1e10>
 801164c:	2500      	movs	r5, #0
 801164e:	e78b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011650:	2500      	movs	r5, #0
 8011652:	e789      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011654:	2500      	movs	r5, #0
 8011656:	e787      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011658:	2500      	movs	r5, #0
 801165a:	e785      	b.n	8011568 <dwt_ioctl+0x1e10>
 801165c:	2500      	movs	r5, #0
 801165e:	e783      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011660:	2500      	movs	r5, #0
 8011662:	e781      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011664:	2500      	movs	r5, #0
 8011666:	e77f      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011668:	2500      	movs	r5, #0
 801166a:	e77d      	b.n	8011568 <dwt_ioctl+0x1e10>
 801166c:	2500      	movs	r5, #0
 801166e:	e77b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011670:	2500      	movs	r5, #0
 8011672:	e779      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011674:	2500      	movs	r5, #0
 8011676:	e777      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011678:	2500      	movs	r5, #0
 801167a:	e775      	b.n	8011568 <dwt_ioctl+0x1e10>
 801167c:	2500      	movs	r5, #0
 801167e:	e773      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011680:	2500      	movs	r5, #0
 8011682:	e771      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011684:	2500      	movs	r5, #0
 8011686:	e76f      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011688:	2500      	movs	r5, #0
 801168a:	e76d      	b.n	8011568 <dwt_ioctl+0x1e10>
 801168c:	2500      	movs	r5, #0
 801168e:	e76b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011690:	2500      	movs	r5, #0
 8011692:	e769      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011694:	2500      	movs	r5, #0
 8011696:	e767      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011698:	2500      	movs	r5, #0
 801169a:	e765      	b.n	8011568 <dwt_ioctl+0x1e10>
 801169c:	2500      	movs	r5, #0
 801169e:	e763      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116a0:	2500      	movs	r5, #0
 80116a2:	e761      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116a4:	2500      	movs	r5, #0
 80116a6:	e75f      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116a8:	2500      	movs	r5, #0
 80116aa:	e75d      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116ac:	2500      	movs	r5, #0
 80116ae:	e75b      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116b0:	2500      	movs	r5, #0
 80116b2:	e759      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116b4:	2500      	movs	r5, #0
 80116b6:	e757      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116b8:	2500      	movs	r5, #0
 80116ba:	e755      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116bc:	2500      	movs	r5, #0
 80116be:	e753      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116c0:	2500      	movs	r5, #0
 80116c2:	e751      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116c4:	2500      	movs	r5, #0
 80116c6:	e74f      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116c8:	2500      	movs	r5, #0
 80116ca:	e74d      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116cc:	2500      	movs	r5, #0
 80116ce:	e74b      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116d0:	2500      	movs	r5, #0
 80116d2:	e749      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116d4:	2500      	movs	r5, #0
 80116d6:	e747      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80116dc:	e744      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80116e2:	e741      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116e4:	2500      	movs	r5, #0
 80116e6:	e73f      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116e8:	2500      	movs	r5, #0
 80116ea:	e73d      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116ec:	2500      	movs	r5, #0
 80116ee:	e73b      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116f0:	2500      	movs	r5, #0
 80116f2:	e739      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116f4:	2500      	movs	r5, #0
 80116f6:	e737      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116f8:	2500      	movs	r5, #0
 80116fa:	e735      	b.n	8011568 <dwt_ioctl+0x1e10>
 80116fc:	2500      	movs	r5, #0
 80116fe:	e733      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011700:	2500      	movs	r5, #0
 8011702:	e731      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011704:	2500      	movs	r5, #0
 8011706:	e72f      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011708:	2500      	movs	r5, #0
 801170a:	e72d      	b.n	8011568 <dwt_ioctl+0x1e10>
 801170c:	2500      	movs	r5, #0
 801170e:	e72b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011710:	2500      	movs	r5, #0
 8011712:	e729      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011714:	2500      	movs	r5, #0
 8011716:	e727      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011718:	2500      	movs	r5, #0
 801171a:	e725      	b.n	8011568 <dwt_ioctl+0x1e10>
 801171c:	2500      	movs	r5, #0
 801171e:	e723      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011720:	2500      	movs	r5, #0
 8011722:	e721      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011724:	2500      	movs	r5, #0
 8011726:	e71f      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011728:	2500      	movs	r5, #0
 801172a:	e71d      	b.n	8011568 <dwt_ioctl+0x1e10>
 801172c:	2500      	movs	r5, #0
 801172e:	e71b      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011730:	2500      	movs	r5, #0
 8011732:	e719      	b.n	8011568 <dwt_ioctl+0x1e10>
 8011734:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011738:	1e5a      	subs	r2, r3, #1
 801173a:	b2d2      	uxtb	r2, r2
 801173c:	2a01      	cmp	r2, #1
 801173e:	f67e ae60 	bls.w	8010402 <dwt_ioctl+0xcaa>
 8011742:	2202      	movs	r2, #2
 8011744:	f7fe be07 	b.w	8010356 <dwt_ioctl+0xbfe>
 8011748:	4d12      	ldr	r5, [pc, #72]	; (8011794 <dwt_ioctl+0x203c>)
 801174a:	e57c      	b.n	8011246 <dwt_ioctl+0x1aee>
 801174c:	2400      	movs	r4, #0
 801174e:	9400      	str	r4, [sp, #0]
 8011750:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8011754:	4622      	mov	r2, r4
 8011756:	2110      	movs	r1, #16
 8011758:	f7fc fe62 	bl	800e420 <dwt_modify32bitoffsetreg>
 801175c:	9400      	str	r4, [sp, #0]
 801175e:	4b0e      	ldr	r3, [pc, #56]	; (8011798 <dwt_ioctl+0x2040>)
 8011760:	4622      	mov	r2, r4
 8011762:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011766:	4630      	mov	r0, r6
 8011768:	f7fc fe5a 	bl	800e420 <dwt_modify32bitoffsetreg>
 801176c:	e57e      	b.n	801126c <dwt_ioctl+0x1b14>
 801176e:	bf00      	nop
 8011770:	000d0020 	.word	0x000d0020
 8011774:	000c0064 	.word	0x000c0064
 8011778:	000c0068 	.word	0x000c0068
 801177c:	000c0060 	.word	0x000c0060
 8011780:	000d0068 	.word	0x000d0068
 8011784:	000d0040 	.word	0x000d0040
 8011788:	000d0044 	.word	0x000d0044
 801178c:	000d0048 	.word	0x000d0048
 8011790:	000d003c 	.word	0x000d003c
 8011794:	08001000 	.word	0x08001000
 8011798:	f7fc0fff 	.word	0xf7fc0fff

0801179c <_init>:
 801179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801179e:	b085      	sub	sp, #20
 80117a0:	4604      	mov	r4, r0
 80117a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80117a4:	6819      	ldr	r1, [r3, #0]
 80117a6:	f7fd fea1 	bl	800f4ec <ull_initialise>
 80117aa:	4606      	mov	r6, r0
 80117ac:	6823      	ldr	r3, [r4, #0]
 80117ae:	691b      	ldr	r3, [r3, #16]
 80117b0:	4798      	blx	r3
 80117b2:	ab03      	add	r3, sp, #12
 80117b4:	2200      	movs	r2, #0
 80117b6:	4611      	mov	r1, r2
 80117b8:	4620      	mov	r0, r4
 80117ba:	f7fd ffcd 	bl	800f758 <dwt_ioctl>
 80117be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117c2:	6819      	ldr	r1, [r3, #0]
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7fd fc43 	bl	800f050 <ull_configure>
 80117ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ce:	6859      	ldr	r1, [r3, #4]
 80117d0:	4620      	mov	r0, r4
 80117d2:	f7fd f993 	bl	800eafc <ull_configuretxrf>
 80117d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117da:	89d9      	ldrh	r1, [r3, #14]
 80117dc:	4620      	mov	r0, r4
 80117de:	f7fc f8be 	bl	800d95e <ull_setrxantennadelay>
 80117e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e6:	8999      	ldrh	r1, [r3, #12]
 80117e8:	4620      	mov	r0, r4
 80117ea:	f7fc f8c0 	bl	800d96e <ull_settxantennadelay>
 80117ee:	2100      	movs	r1, #0
 80117f0:	4620      	mov	r0, r4
 80117f2:	f7fc f94a 	bl	800da8a <ull_setrxaftertxdelay>
 80117f6:	2500      	movs	r5, #0
 80117f8:	9500      	str	r5, [sp, #0]
 80117fa:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80117fe:	462a      	mov	r2, r5
 8011800:	2110      	movs	r1, #16
 8011802:	4620      	mov	r0, r4
 8011804:	f7fd fb0c 	bl	800ee20 <dwt_modify16bitoffsetreg>
 8011808:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801180c:	895a      	ldrh	r2, [r3, #10]
 801180e:	8919      	ldrh	r1, [r3, #8]
 8011810:	4620      	mov	r0, r4
 8011812:	f7fd fa03 	bl	800ec1c <ull_configureframefilter>
 8011816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181a:	8a1b      	ldrh	r3, [r3, #16]
 801181c:	2202      	movs	r2, #2
 801181e:	210c      	movs	r1, #12
 8011820:	4620      	mov	r0, r4
 8011822:	f7fc f88c 	bl	800d93e <dwt_write16bitoffsetreg>
 8011826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801182a:	8a5b      	ldrh	r3, [r3, #18]
 801182c:	462a      	mov	r2, r5
 801182e:	210c      	movs	r1, #12
 8011830:	4620      	mov	r0, r4
 8011832:	f7fc f884 	bl	800d93e <dwt_write16bitoffsetreg>
 8011836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011838:	7a19      	ldrb	r1, [r3, #8]
 801183a:	4620      	mov	r0, r4
 801183c:	f7fd fb2e 	bl	800ee9c <ull_setleds>
 8011840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011842:	68d9      	ldr	r1, [r3, #12]
 8011844:	4620      	mov	r0, r4
 8011846:	f7fc f949 	bl	800dadc <ull_setlnapamode>
 801184a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801184c:	7e0b      	ldrb	r3, [r1, #24]
 801184e:	694a      	ldr	r2, [r1, #20]
 8011850:	6909      	ldr	r1, [r1, #16]
 8011852:	4620      	mov	r0, r4
 8011854:	f7fd fa68 	bl	800ed28 <ull_setinterrupt>
 8011858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801185a:	7f9a      	ldrb	r2, [r3, #30]
 801185c:	8b99      	ldrh	r1, [r3, #28]
 801185e:	4620      	mov	r0, r4
 8011860:	f7fc fb90 	bl	800df84 <ull_configuresleep>
 8011864:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011866:	7b53      	ldrb	r3, [r2, #13]
 8011868:	2b2e      	cmp	r3, #46	; 0x2e
 801186a:	d005      	beq.n	8011878 <_init+0xdc>
 801186c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801186e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011872:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8011876:	d00a      	beq.n	801188e <_init+0xf2>
 8011878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801187a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801187e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011882:	7353      	strb	r3, [r2, #13]
 8011884:	2200      	movs	r2, #0
 8011886:	4928      	ldr	r1, [pc, #160]	; (8011928 <_init+0x18c>)
 8011888:	4620      	mov	r0, r4
 801188a:	f7fc faa7 	bl	800dddc <dwt_write8bitoffsetreg>
 801188e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011890:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8011894:	4620      	mov	r0, r4
 8011896:	f7fc ff63 	bl	800e760 <ull_configciadiag>
 801189a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801189c:	6a19      	ldr	r1, [r3, #32]
 801189e:	4620      	mov	r0, r4
 80118a0:	f7fc f93c 	bl	800db1c <ull_configurestskey>
 80118a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80118a8:	4620      	mov	r0, r4
 80118aa:	f7fc f95b 	bl	800db64 <ull_configurestsiv>
 80118ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118b0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80118b4:	bb9b      	cbnz	r3, 801191e <_init+0x182>
 80118b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118b8:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80118bc:	4620      	mov	r0, r4
 80118be:	f7fc fb05 	bl	800decc <ull_configeventcounters>
 80118c2:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 80118c6:	2d00      	cmp	r5, #0
 80118c8:	db26      	blt.n	8011918 <_init+0x17c>
 80118ca:	2301      	movs	r3, #1
 80118cc:	fa03 f505 	lsl.w	r5, r3, r5
 80118d0:	b2af      	uxth	r7, r5
 80118d2:	4a16      	ldr	r2, [pc, #88]	; (801192c <_init+0x190>)
 80118d4:	4639      	mov	r1, r7
 80118d6:	4620      	mov	r0, r4
 80118d8:	f7fc fed4 	bl	800e684 <ull_setgpiomode>
 80118dc:	f10d 030a 	add.w	r3, sp, #10
 80118e0:	9300      	str	r3, [sp, #0]
 80118e2:	2302      	movs	r3, #2
 80118e4:	2200      	movs	r2, #0
 80118e6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80118ea:	4620      	mov	r0, r4
 80118ec:	f7fb fba9 	bl	800d042 <dwt_readfromdevice>
 80118f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80118f4:	ea23 0305 	bic.w	r3, r3, r5
 80118f8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80118fc:	2200      	movs	r2, #0
 80118fe:	490c      	ldr	r1, [pc, #48]	; (8011930 <_init+0x194>)
 8011900:	4620      	mov	r0, r4
 8011902:	f7fc f81c 	bl	800d93e <dwt_write16bitoffsetreg>
 8011906:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 801190a:	fab2 f282 	clz	r2, r2
 801190e:	0952      	lsrs	r2, r2, #5
 8011910:	4639      	mov	r1, r7
 8011912:	4620      	mov	r0, r4
 8011914:	f7fd fb40 	bl	800ef98 <ull_setgpiovalue>
 8011918:	4630      	mov	r0, r6
 801191a:	b005      	add	sp, #20
 801191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801191e:	4620      	mov	r0, r4
 8011920:	f7fc ff54 	bl	800e7cc <ull_configurestsloadiv>
 8011924:	e7c7      	b.n	80118b6 <_init+0x11a>
 8011926:	bf00      	nop
 8011928:	00090014 	.word	0x00090014
 801192c:	01200492 	.word	0x01200492
 8011930:	00050008 	.word	0x00050008

08011934 <__register_exitproc>:
 8011934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011938:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80119f4 <__register_exitproc+0xc0>
 801193c:	4606      	mov	r6, r0
 801193e:	f8d8 0000 	ldr.w	r0, [r8]
 8011942:	461f      	mov	r7, r3
 8011944:	460d      	mov	r5, r1
 8011946:	4691      	mov	r9, r2
 8011948:	f000 f89a 	bl	8011a80 <__retarget_lock_acquire_recursive>
 801194c:	4b25      	ldr	r3, [pc, #148]	; (80119e4 <__register_exitproc+0xb0>)
 801194e:	681c      	ldr	r4, [r3, #0]
 8011950:	b934      	cbnz	r4, 8011960 <__register_exitproc+0x2c>
 8011952:	4c25      	ldr	r4, [pc, #148]	; (80119e8 <__register_exitproc+0xb4>)
 8011954:	601c      	str	r4, [r3, #0]
 8011956:	4b25      	ldr	r3, [pc, #148]	; (80119ec <__register_exitproc+0xb8>)
 8011958:	b113      	cbz	r3, 8011960 <__register_exitproc+0x2c>
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011960:	6863      	ldr	r3, [r4, #4]
 8011962:	2b1f      	cmp	r3, #31
 8011964:	dd07      	ble.n	8011976 <__register_exitproc+0x42>
 8011966:	f8d8 0000 	ldr.w	r0, [r8]
 801196a:	f000 f88b 	bl	8011a84 <__retarget_lock_release_recursive>
 801196e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011976:	b34e      	cbz	r6, 80119cc <__register_exitproc+0x98>
 8011978:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801197c:	b988      	cbnz	r0, 80119a2 <__register_exitproc+0x6e>
 801197e:	4b1c      	ldr	r3, [pc, #112]	; (80119f0 <__register_exitproc+0xbc>)
 8011980:	b923      	cbnz	r3, 801198c <__register_exitproc+0x58>
 8011982:	f8d8 0000 	ldr.w	r0, [r8]
 8011986:	f000 f87c 	bl	8011a82 <__retarget_lock_release>
 801198a:	e7f0      	b.n	801196e <__register_exitproc+0x3a>
 801198c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011990:	f000 f87a 	bl	8011a88 <malloc>
 8011994:	2800      	cmp	r0, #0
 8011996:	d0f4      	beq.n	8011982 <__register_exitproc+0x4e>
 8011998:	2300      	movs	r3, #0
 801199a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801199e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80119a2:	6863      	ldr	r3, [r4, #4]
 80119a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80119a8:	2201      	movs	r2, #1
 80119aa:	409a      	lsls	r2, r3
 80119ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80119b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80119b4:	4313      	orrs	r3, r2
 80119b6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80119ba:	2e02      	cmp	r6, #2
 80119bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80119c0:	bf02      	ittt	eq
 80119c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80119c6:	4313      	orreq	r3, r2
 80119c8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80119cc:	6863      	ldr	r3, [r4, #4]
 80119ce:	f8d8 0000 	ldr.w	r0, [r8]
 80119d2:	1c5a      	adds	r2, r3, #1
 80119d4:	3302      	adds	r3, #2
 80119d6:	6062      	str	r2, [r4, #4]
 80119d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80119dc:	f000 f852 	bl	8011a84 <__retarget_lock_release_recursive>
 80119e0:	2000      	movs	r0, #0
 80119e2:	e7c6      	b.n	8011972 <__register_exitproc+0x3e>
 80119e4:	200002d8 	.word	0x200002d8
 80119e8:	2000024c 	.word	0x2000024c
 80119ec:	08012168 	.word	0x08012168
 80119f0:	08011a89 	.word	0x08011a89
 80119f4:	20000038 	.word	0x20000038

080119f8 <atexit>:
 80119f8:	2300      	movs	r3, #0
 80119fa:	4601      	mov	r1, r0
 80119fc:	461a      	mov	r2, r3
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff bf98 	b.w	8011934 <__register_exitproc>

08011a04 <__errno>:
 8011a04:	4b01      	ldr	r3, [pc, #4]	; (8011a0c <__errno+0x8>)
 8011a06:	6818      	ldr	r0, [r3, #0]
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	2000003c 	.word	0x2000003c

08011a10 <__libc_fini_array>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	4d07      	ldr	r5, [pc, #28]	; (8011a30 <__libc_fini_array+0x20>)
 8011a14:	4c07      	ldr	r4, [pc, #28]	; (8011a34 <__libc_fini_array+0x24>)
 8011a16:	1b64      	subs	r4, r4, r5
 8011a18:	10a4      	asrs	r4, r4, #2
 8011a1a:	b91c      	cbnz	r4, 8011a24 <__libc_fini_array+0x14>
 8011a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a20:	f000 b90c 	b.w	8011c3c <_fini>
 8011a24:	3c01      	subs	r4, #1
 8011a26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011a2a:	4798      	blx	r3
 8011a2c:	e7f5      	b.n	8011a1a <__libc_fini_array+0xa>
 8011a2e:	bf00      	nop
 8011a30:	0801218c 	.word	0x0801218c
 8011a34:	08012190 	.word	0x08012190

08011a38 <__libc_init_array>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	4d0d      	ldr	r5, [pc, #52]	; (8011a70 <__libc_init_array+0x38>)
 8011a3c:	4c0d      	ldr	r4, [pc, #52]	; (8011a74 <__libc_init_array+0x3c>)
 8011a3e:	1b64      	subs	r4, r4, r5
 8011a40:	10a4      	asrs	r4, r4, #2
 8011a42:	2600      	movs	r6, #0
 8011a44:	42a6      	cmp	r6, r4
 8011a46:	d109      	bne.n	8011a5c <__libc_init_array+0x24>
 8011a48:	4d0b      	ldr	r5, [pc, #44]	; (8011a78 <__libc_init_array+0x40>)
 8011a4a:	4c0c      	ldr	r4, [pc, #48]	; (8011a7c <__libc_init_array+0x44>)
 8011a4c:	f000 f8f0 	bl	8011c30 <_init>
 8011a50:	1b64      	subs	r4, r4, r5
 8011a52:	10a4      	asrs	r4, r4, #2
 8011a54:	2600      	movs	r6, #0
 8011a56:	42a6      	cmp	r6, r4
 8011a58:	d105      	bne.n	8011a66 <__libc_init_array+0x2e>
 8011a5a:	bd70      	pop	{r4, r5, r6, pc}
 8011a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a60:	4798      	blx	r3
 8011a62:	3601      	adds	r6, #1
 8011a64:	e7ee      	b.n	8011a44 <__libc_init_array+0xc>
 8011a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a6a:	4798      	blx	r3
 8011a6c:	3601      	adds	r6, #1
 8011a6e:	e7f2      	b.n	8011a56 <__libc_init_array+0x1e>
 8011a70:	08012174 	.word	0x08012174
 8011a74:	08012174 	.word	0x08012174
 8011a78:	08012174 	.word	0x08012174
 8011a7c:	0801218c 	.word	0x0801218c

08011a80 <__retarget_lock_acquire_recursive>:
 8011a80:	4770      	bx	lr

08011a82 <__retarget_lock_release>:
 8011a82:	4770      	bx	lr

08011a84 <__retarget_lock_release_recursive>:
 8011a84:	4770      	bx	lr
	...

08011a88 <malloc>:
 8011a88:	4b02      	ldr	r3, [pc, #8]	; (8011a94 <malloc+0xc>)
 8011a8a:	4601      	mov	r1, r0
 8011a8c:	6818      	ldr	r0, [r3, #0]
 8011a8e:	f000 b837 	b.w	8011b00 <_malloc_r>
 8011a92:	bf00      	nop
 8011a94:	2000003c 	.word	0x2000003c

08011a98 <memset>:
 8011a98:	4402      	add	r2, r0
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d100      	bne.n	8011aa2 <memset+0xa>
 8011aa0:	4770      	bx	lr
 8011aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8011aa6:	e7f9      	b.n	8011a9c <memset+0x4>

08011aa8 <__malloc_lock>:
 8011aa8:	4801      	ldr	r0, [pc, #4]	; (8011ab0 <__malloc_lock+0x8>)
 8011aaa:	f7ff bfe9 	b.w	8011a80 <__retarget_lock_acquire_recursive>
 8011aae:	bf00      	nop
 8011ab0:	200002dd 	.word	0x200002dd

08011ab4 <__malloc_unlock>:
 8011ab4:	4801      	ldr	r0, [pc, #4]	; (8011abc <__malloc_unlock+0x8>)
 8011ab6:	f7ff bfe5 	b.w	8011a84 <__retarget_lock_release_recursive>
 8011aba:	bf00      	nop
 8011abc:	200002dd 	.word	0x200002dd

08011ac0 <sbrk_aligned>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	4e0e      	ldr	r6, [pc, #56]	; (8011afc <sbrk_aligned+0x3c>)
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	6831      	ldr	r1, [r6, #0]
 8011ac8:	4605      	mov	r5, r0
 8011aca:	b911      	cbnz	r1, 8011ad2 <sbrk_aligned+0x12>
 8011acc:	f000 f88c 	bl	8011be8 <_sbrk_r>
 8011ad0:	6030      	str	r0, [r6, #0]
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	f000 f887 	bl	8011be8 <_sbrk_r>
 8011ada:	1c43      	adds	r3, r0, #1
 8011adc:	d00a      	beq.n	8011af4 <sbrk_aligned+0x34>
 8011ade:	1cc4      	adds	r4, r0, #3
 8011ae0:	f024 0403 	bic.w	r4, r4, #3
 8011ae4:	42a0      	cmp	r0, r4
 8011ae6:	d007      	beq.n	8011af8 <sbrk_aligned+0x38>
 8011ae8:	1a21      	subs	r1, r4, r0
 8011aea:	4628      	mov	r0, r5
 8011aec:	f000 f87c 	bl	8011be8 <_sbrk_r>
 8011af0:	3001      	adds	r0, #1
 8011af2:	d101      	bne.n	8011af8 <sbrk_aligned+0x38>
 8011af4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011af8:	4620      	mov	r0, r4
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	200002e4 	.word	0x200002e4

08011b00 <_malloc_r>:
 8011b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b04:	1ccd      	adds	r5, r1, #3
 8011b06:	f025 0503 	bic.w	r5, r5, #3
 8011b0a:	3508      	adds	r5, #8
 8011b0c:	2d0c      	cmp	r5, #12
 8011b0e:	bf38      	it	cc
 8011b10:	250c      	movcc	r5, #12
 8011b12:	2d00      	cmp	r5, #0
 8011b14:	4607      	mov	r7, r0
 8011b16:	db01      	blt.n	8011b1c <_malloc_r+0x1c>
 8011b18:	42a9      	cmp	r1, r5
 8011b1a:	d905      	bls.n	8011b28 <_malloc_r+0x28>
 8011b1c:	230c      	movs	r3, #12
 8011b1e:	603b      	str	r3, [r7, #0]
 8011b20:	2600      	movs	r6, #0
 8011b22:	4630      	mov	r0, r6
 8011b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b28:	4e2e      	ldr	r6, [pc, #184]	; (8011be4 <_malloc_r+0xe4>)
 8011b2a:	f7ff ffbd 	bl	8011aa8 <__malloc_lock>
 8011b2e:	6833      	ldr	r3, [r6, #0]
 8011b30:	461c      	mov	r4, r3
 8011b32:	bb34      	cbnz	r4, 8011b82 <_malloc_r+0x82>
 8011b34:	4629      	mov	r1, r5
 8011b36:	4638      	mov	r0, r7
 8011b38:	f7ff ffc2 	bl	8011ac0 <sbrk_aligned>
 8011b3c:	1c43      	adds	r3, r0, #1
 8011b3e:	4604      	mov	r4, r0
 8011b40:	d14d      	bne.n	8011bde <_malloc_r+0xde>
 8011b42:	6834      	ldr	r4, [r6, #0]
 8011b44:	4626      	mov	r6, r4
 8011b46:	2e00      	cmp	r6, #0
 8011b48:	d140      	bne.n	8011bcc <_malloc_r+0xcc>
 8011b4a:	6823      	ldr	r3, [r4, #0]
 8011b4c:	4631      	mov	r1, r6
 8011b4e:	4638      	mov	r0, r7
 8011b50:	eb04 0803 	add.w	r8, r4, r3
 8011b54:	f000 f848 	bl	8011be8 <_sbrk_r>
 8011b58:	4580      	cmp	r8, r0
 8011b5a:	d13a      	bne.n	8011bd2 <_malloc_r+0xd2>
 8011b5c:	6821      	ldr	r1, [r4, #0]
 8011b5e:	3503      	adds	r5, #3
 8011b60:	1a6d      	subs	r5, r5, r1
 8011b62:	f025 0503 	bic.w	r5, r5, #3
 8011b66:	3508      	adds	r5, #8
 8011b68:	2d0c      	cmp	r5, #12
 8011b6a:	bf38      	it	cc
 8011b6c:	250c      	movcc	r5, #12
 8011b6e:	4629      	mov	r1, r5
 8011b70:	4638      	mov	r0, r7
 8011b72:	f7ff ffa5 	bl	8011ac0 <sbrk_aligned>
 8011b76:	3001      	adds	r0, #1
 8011b78:	d02b      	beq.n	8011bd2 <_malloc_r+0xd2>
 8011b7a:	6823      	ldr	r3, [r4, #0]
 8011b7c:	442b      	add	r3, r5
 8011b7e:	6023      	str	r3, [r4, #0]
 8011b80:	e00e      	b.n	8011ba0 <_malloc_r+0xa0>
 8011b82:	6822      	ldr	r2, [r4, #0]
 8011b84:	1b52      	subs	r2, r2, r5
 8011b86:	d41e      	bmi.n	8011bc6 <_malloc_r+0xc6>
 8011b88:	2a0b      	cmp	r2, #11
 8011b8a:	d916      	bls.n	8011bba <_malloc_r+0xba>
 8011b8c:	1961      	adds	r1, r4, r5
 8011b8e:	42a3      	cmp	r3, r4
 8011b90:	6025      	str	r5, [r4, #0]
 8011b92:	bf18      	it	ne
 8011b94:	6059      	strne	r1, [r3, #4]
 8011b96:	6863      	ldr	r3, [r4, #4]
 8011b98:	bf08      	it	eq
 8011b9a:	6031      	streq	r1, [r6, #0]
 8011b9c:	5162      	str	r2, [r4, r5]
 8011b9e:	604b      	str	r3, [r1, #4]
 8011ba0:	4638      	mov	r0, r7
 8011ba2:	f104 060b 	add.w	r6, r4, #11
 8011ba6:	f7ff ff85 	bl	8011ab4 <__malloc_unlock>
 8011baa:	f026 0607 	bic.w	r6, r6, #7
 8011bae:	1d23      	adds	r3, r4, #4
 8011bb0:	1af2      	subs	r2, r6, r3
 8011bb2:	d0b6      	beq.n	8011b22 <_malloc_r+0x22>
 8011bb4:	1b9b      	subs	r3, r3, r6
 8011bb6:	50a3      	str	r3, [r4, r2]
 8011bb8:	e7b3      	b.n	8011b22 <_malloc_r+0x22>
 8011bba:	6862      	ldr	r2, [r4, #4]
 8011bbc:	42a3      	cmp	r3, r4
 8011bbe:	bf0c      	ite	eq
 8011bc0:	6032      	streq	r2, [r6, #0]
 8011bc2:	605a      	strne	r2, [r3, #4]
 8011bc4:	e7ec      	b.n	8011ba0 <_malloc_r+0xa0>
 8011bc6:	4623      	mov	r3, r4
 8011bc8:	6864      	ldr	r4, [r4, #4]
 8011bca:	e7b2      	b.n	8011b32 <_malloc_r+0x32>
 8011bcc:	4634      	mov	r4, r6
 8011bce:	6876      	ldr	r6, [r6, #4]
 8011bd0:	e7b9      	b.n	8011b46 <_malloc_r+0x46>
 8011bd2:	230c      	movs	r3, #12
 8011bd4:	603b      	str	r3, [r7, #0]
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	f7ff ff6c 	bl	8011ab4 <__malloc_unlock>
 8011bdc:	e7a1      	b.n	8011b22 <_malloc_r+0x22>
 8011bde:	6025      	str	r5, [r4, #0]
 8011be0:	e7de      	b.n	8011ba0 <_malloc_r+0xa0>
 8011be2:	bf00      	nop
 8011be4:	200002e0 	.word	0x200002e0

08011be8 <_sbrk_r>:
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	4d06      	ldr	r5, [pc, #24]	; (8011c04 <_sbrk_r+0x1c>)
 8011bec:	2300      	movs	r3, #0
 8011bee:	4604      	mov	r4, r0
 8011bf0:	4608      	mov	r0, r1
 8011bf2:	602b      	str	r3, [r5, #0]
 8011bf4:	f7ef fc9c 	bl	8001530 <_sbrk>
 8011bf8:	1c43      	adds	r3, r0, #1
 8011bfa:	d102      	bne.n	8011c02 <_sbrk_r+0x1a>
 8011bfc:	682b      	ldr	r3, [r5, #0]
 8011bfe:	b103      	cbz	r3, 8011c02 <_sbrk_r+0x1a>
 8011c00:	6023      	str	r3, [r4, #0]
 8011c02:	bd38      	pop	{r3, r4, r5, pc}
 8011c04:	200003f0 	.word	0x200003f0

08011c08 <__stack_chk_init>:
 8011c08:	4b03      	ldr	r3, [pc, #12]	; (8011c18 <__stack_chk_init+0x10>)
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	b912      	cbnz	r2, 8011c14 <__stack_chk_init+0xc>
 8011c0e:	f5a2 0276 	sub.w	r2, r2, #16121856	; 0xf60000
 8011c12:	601a      	str	r2, [r3, #0]
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	200003f4 	.word	0x200003f4

08011c1c <register_fini>:
 8011c1c:	4b02      	ldr	r3, [pc, #8]	; (8011c28 <register_fini+0xc>)
 8011c1e:	b113      	cbz	r3, 8011c26 <register_fini+0xa>
 8011c20:	4802      	ldr	r0, [pc, #8]	; (8011c2c <register_fini+0x10>)
 8011c22:	f7ff bee9 	b.w	80119f8 <atexit>
 8011c26:	4770      	bx	lr
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	08011a11 	.word	0x08011a11

08011c30 <_init>:
 8011c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c32:	bf00      	nop
 8011c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c36:	bc08      	pop	{r3}
 8011c38:	469e      	mov	lr, r3
 8011c3a:	4770      	bx	lr

08011c3c <_fini>:
 8011c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c3e:	bf00      	nop
 8011c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c42:	bc08      	pop	{r3}
 8011c44:	469e      	mov	lr, r3
 8011c46:	4770      	bx	lr
