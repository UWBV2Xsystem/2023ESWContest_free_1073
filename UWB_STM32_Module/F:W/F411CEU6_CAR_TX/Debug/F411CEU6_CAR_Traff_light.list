
F411CEU6_CAR_Traff_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bc8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08011d60  08011d60  00021d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122ac  080122ac  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  080122ac  080122ac  000222ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122b4  080122b4  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  080122b4  080122b4  000222b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122cc  080122cc  000222cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080122d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200000d0  080123a0  000300d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080123a0  00030404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013171  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd4  00000000  00000000  00043271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00045f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00046f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019162  00000000  00000000  00047df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014862  00000000  00000000  00060f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093595  00000000  00000000  000757b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  00108d49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  00108e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      00000453  00000000  00000000  0010d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <dw3000_driver>:
 8000198:	12 03 ca de 0f ff ff ff e8 1f 01 08 f0 1f 01 08     ................
 80001a8:	24 1f 01 08 e8 1e 01 08 07 00 06 00                 $...........

080001b4 <dw3700_driver>:
 80001b4:	13 03 ca de 0f ff ff ff e8 1f 01 08 f0 1f 01 08     ................
 80001c4:	64 20 01 08 28 20 01 08 07 00 06 00                 d ..( ......

080001d0 <dw3720_driver>:
 80001d0:	14 03 ca de 0f ff ff ff e8 1f 01 08 f0 1f 01 08     ................
 80001e0:	74 21 01 08 38 21 01 08 07 00 06 00                 t!..8!......

080001ec <__do_global_dtors_aux>:
 80001ec:	b510      	push	{r4, lr}
 80001ee:	4c05      	ldr	r4, [pc, #20]	; (8000204 <__do_global_dtors_aux+0x18>)
 80001f0:	7823      	ldrb	r3, [r4, #0]
 80001f2:	b933      	cbnz	r3, 8000202 <__do_global_dtors_aux+0x16>
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x1c>)
 80001f6:	b113      	cbz	r3, 80001fe <__do_global_dtors_aux+0x12>
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <__do_global_dtors_aux+0x20>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	2301      	movs	r3, #1
 8000200:	7023      	strb	r3, [r4, #0]
 8000202:	bd10      	pop	{r4, pc}
 8000204:	200000d0 	.word	0x200000d0
 8000208:	00000000 	.word	0x00000000
 800020c:	08011d48 	.word	0x08011d48

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	4b03      	ldr	r3, [pc, #12]	; (8000220 <frame_dummy+0x10>)
 8000214:	b11b      	cbz	r3, 800021e <frame_dummy+0xe>
 8000216:	4903      	ldr	r1, [pc, #12]	; (8000224 <frame_dummy+0x14>)
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <frame_dummy+0x18>)
 800021a:	f3af 8000 	nop.w
 800021e:	bd08      	pop	{r3, pc}
 8000220:	00000000 	.word	0x00000000
 8000224:	200000d4 	.word	0x200000d4
 8000228:	08011d48 	.word	0x08011d48

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f7ff bff2 	b.w	800023c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <Pdoa_uwb_tx>:

/**
 * Application entry point.
 */
int Pdoa_uwb_tx(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000546:	f000 fbb1 	bl	8000cac <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 800054a:	f000 fb2f 	bl	8000bac <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 800054e:	2002      	movs	r0, #2
 8000550:	f000 fb00 	bl	8000b54 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <Pdoa_uwb_tx+0xb8>)
 8000556:	f003 ffa5 	bl	80044a4 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 800055a:	bf00      	nop
 800055c:	f004 f8aa 	bl	80046b4 <dwt_checkidlerc>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0fa      	beq.n	800055c <Pdoa_uwb_tx+0x1c>

    if (dwt_initialise(DWT_DW_INIT /*| DWT_READ_OTP_PID*/) == DWT_ERROR)
 8000566:	2000      	movs	r0, #0
 8000568:	f003 fff6 	bl	8004558 <dwt_initialise>
 800056c:	4603      	mov	r3, r0
 800056e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000572:	d103      	bne.n	800057c <Pdoa_uwb_tx+0x3c>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <Pdoa_uwb_tx+0xbc>)
 8000576:	f000 fc95 	bl	8000ea4 <test_run_info>
        while (1) { };
 800057a:	e7fe      	b.n	800057a <Pdoa_uwb_tx+0x3a>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 800057c:	2003      	movs	r0, #3
 800057e:	f004 f8cf 	bl	8004720 <dwt_setleds>

    /* Configure DW IC. See NOTE 5 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8000582:	481f      	ldr	r0, [pc, #124]	; (8000600 <Pdoa_uwb_tx+0xc0>)
 8000584:	f003 fff4 	bl	8004570 <dwt_configure>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <Pdoa_uwb_tx+0x56>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <Pdoa_uwb_tx+0xc4>)
 8000590:	f000 fc88 	bl	8000ea4 <test_run_info>
        while (1) { };
 8000594:	e7fe      	b.n	8000594 <Pdoa_uwb_tx+0x54>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8000596:	481c      	ldr	r0, [pc, #112]	; (8000608 <Pdoa_uwb_tx+0xc8>)
 8000598:	f003 fff6 	bl	8004588 <dwt_configuretxrf>
//
//        return 0;
//
//    }

    for (int var = 0; var < 5; var++) {
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e021      	b.n	80005e6 <Pdoa_uwb_tx+0xa6>

    	dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 80005a2:	2200      	movs	r2, #0
 80005a4:	4919      	ldr	r1, [pc, #100]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005a6:	200a      	movs	r0, #10
 80005a8:	f004 f81e 	bl	80045e8 <dwt_writetxdata>

		/* In this example since the length of the transmitted frame does not change,
		 * nor the other parameters of the dwt_writetxfctrl function, the
		 * dwt_writetxfctrl call could be outside the main while(1) loop.
		 */
		dwt_writetxfctrl(FRAME_LENGTH, 0, 0); /* Zero offset in TX buffer, no ranging. */
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	200c      	movs	r0, #12
 80005b2:	f004 f827 	bl	8004604 <dwt_writetxfctrl>

		/* Start transmission. */
		dwt_starttx(DWT_START_TX_IMMEDIATE);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f004 f832 	bl	8004620 <dwt_starttx>
		/* Poll DW IC until TX frame sent event set. See NOTE 4 below.
		 * STATUS register is 4 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
		 * function to access it.*/
		waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 80005bc:	2300      	movs	r3, #0
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	2100      	movs	r1, #0
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fc2d 	bl	8000e22 <waitforsysstatus>

		/* Clear TX frame sent event. */
		dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 80005c8:	2080      	movs	r0, #128	; 0x80
 80005ca:	f004 f8bb 	bl	8004744 <dwt_writesysstatuslo>

		/* Execute a delay between transmissions. */
		Sleep(TX_DELAY_MS);
 80005ce:	20c8      	movs	r0, #200	; 0xc8
 80005d0:	f000 fac0 	bl	8000b54 <Sleep>



		/* Increment the blink frame sequence number (modulo 256). */
		tx_msg[BLINK_FRAME_SN_IDX]++;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005de:	705a      	strb	r2, [r3, #1]
    for (int var = 0; var < 5; var++) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	ddda      	ble.n	80005a2 <Pdoa_uwb_tx+0x62>

	}

    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08011dc4 	.word	0x08011dc4
 80005fc:	08011d60 	.word	0x08011d60
 8000600:	20000000 	.word	0x20000000
 8000604:	08011d74 	.word	0x08011d74
 8000608:	2000004c 	.word	0x2000004c
 800060c:	20000010 	.word	0x20000010

08000610 <ss_twr_responder_uwb>:
 * @param  none
 *
 * @return none
 */
int ss_twr_responder_uwb(void)
{
 8000610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000614:	b088      	sub	sp, #32
 8000616:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */


    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000618:	f000 fb48 	bl	8000cac <port_set_dw_ic_spi_fastrate>

    /* Reset and initialize DW chip. */
    reset_DWIC(); /* Target specific drive of RSTn line into DW3000 low for a period. */
 800061c:	f000 fac6 	bl	8000bac <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fa97 	bl	8000b54 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000626:	4869      	ldr	r0, [pc, #420]	; (80007cc <ss_twr_responder_uwb+0x1bc>)
 8000628:	f003 ff3c 	bl	80044a4 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 800062c:	bf00      	nop
 800062e:	f004 f841 	bl	80046b4 <dwt_checkidlerc>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0fa      	beq.n	800062e <ss_twr_responder_uwb+0x1e>
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8000638:	2000      	movs	r0, #0
 800063a:	f003 ff8d 	bl	8004558 <dwt_initialise>
 800063e:	4603      	mov	r3, r0
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000644:	d103      	bne.n	800064e <ss_twr_responder_uwb+0x3e>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8000646:	4862      	ldr	r0, [pc, #392]	; (80007d0 <ss_twr_responder_uwb+0x1c0>)
 8000648:	f000 fc2c 	bl	8000ea4 <test_run_info>
        while (1) { };
 800064c:	e7fe      	b.n	800064c <ss_twr_responder_uwb+0x3c>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 800064e:	2003      	movs	r0, #3
 8000650:	f004 f866 	bl	8004720 <dwt_setleds>

    /* Configure DW IC. See NOTE 13 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config_twr))
 8000654:	485f      	ldr	r0, [pc, #380]	; (80007d4 <ss_twr_responder_uwb+0x1c4>)
 8000656:	f003 ff8b 	bl	8004570 <dwt_configure>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <ss_twr_responder_uwb+0x58>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8000660:	485d      	ldr	r0, [pc, #372]	; (80007d8 <ss_twr_responder_uwb+0x1c8>)
 8000662:	f000 fc1f 	bl	8000ea4 <test_run_info>
        while (1) { };
 8000666:	e7fe      	b.n	8000666 <ss_twr_responder_uwb+0x56>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8000668:	485c      	ldr	r0, [pc, #368]	; (80007dc <ss_twr_responder_uwb+0x1cc>)
 800066a:	f003 ff8d 	bl	8004588 <dwt_configuretxrf>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 800066e:	f244 0001 	movw	r0, #16385	; 0x4001
 8000672:	f003 ff95 	bl	80045a0 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8000676:	f244 0001 	movw	r0, #16385	; 0x4001
 800067a:	f003 ffa3 	bl	80045c4 <dwt_settxantennadelay>

    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 800067e:	2003      	movs	r0, #3
 8000680:	f003 ff5c 	bl	800453c <dwt_setlnapamode>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8000684:	2000      	movs	r0, #0
 8000686:	f004 f809 	bl	800469c <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 6 below. */
        waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR), 0);
 800068a:	2300      	movs	r3, #0
 800068c:	4a54      	ldr	r2, [pc, #336]	; (80007e0 <ss_twr_responder_uwb+0x1d0>)
 800068e:	2100      	movs	r1, #0
 8000690:	4854      	ldr	r0, [pc, #336]	; (80007e4 <ss_twr_responder_uwb+0x1d4>)
 8000692:	f000 fbc6 	bl	8000e22 <waitforsysstatus>

        if (status_reg & DWT_INT_RXFCG_BIT_MASK)
 8000696:	4b53      	ldr	r3, [pc, #332]	; (80007e4 <ss_twr_responder_uwb+0x1d4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f000 808a 	beq.w	80007b8 <ss_twr_responder_uwb+0x1a8>
        {
            uint16_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 80006a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006a8:	f004 f84c 	bl	8004744 <dwt_writesysstatuslo>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_getframelength();
 80006ac:	f004 f880 	bl	80047b0 <dwt_getframelength>
 80006b0:	4603      	mov	r3, r0
 80006b2:	83fb      	strh	r3, [r7, #30]
            if (frame_len <= sizeof(rx_buffer))
 80006b4:	8bfb      	ldrh	r3, [r7, #30]
 80006b6:	2b0c      	cmp	r3, #12
 80006b8:	d8e4      	bhi.n	8000684 <ss_twr_responder_uwb+0x74>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80006ba:	8bfb      	ldrh	r3, [r7, #30]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	4849      	ldr	r0, [pc, #292]	; (80007e8 <ss_twr_responder_uwb+0x1d8>)
 80006c2:	f004 f81f 	bl	8004704 <dwt_readrxdata>

                /* Check that the frame is a poll sent by "SS TWR initiator" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 80006c6:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <ss_twr_responder_uwb+0x1d8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]
                if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 80006cc:	220a      	movs	r2, #10
 80006ce:	4947      	ldr	r1, [pc, #284]	; (80007ec <ss_twr_responder_uwb+0x1dc>)
 80006d0:	4845      	ldr	r0, [pc, #276]	; (80007e8 <ss_twr_responder_uwb+0x1d8>)
 80006d2:	f011 fa5d 	bl	8011b90 <memcmp>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1d3      	bne.n	8000684 <ss_twr_responder_uwb+0x74>
                {
                    uint32_t resp_tx_time;
                    int ret;

                    /* Retrieve poll reception timestamp. */
                    poll_rx_ts = get_rx_timestamp_u64();
 80006dc:	f000 fb34 	bl	8000d48 <get_rx_timestamp_u64>
 80006e0:	4602      	mov	r2, r0
 80006e2:	460b      	mov	r3, r1
 80006e4:	4942      	ldr	r1, [pc, #264]	; (80007f0 <ss_twr_responder_uwb+0x1e0>)
 80006e6:	e9c1 2300 	strd	r2, r3, [r1]

                    /* Compute response message transmission time. See NOTE 7 below. */
                    resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80006ea:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <ss_twr_responder_uwb+0x1e0>)
 80006ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f0:	4940      	ldr	r1, [pc, #256]	; (80007f4 <ss_twr_responder_uwb+0x1e4>)
 80006f2:	eb12 0801 	adds.w	r8, r2, r1
 80006f6:	f143 0900 	adc.w	r9, r3, #0
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8000706:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 800070a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800070e:	4613      	mov	r3, r2
 8000710:	61bb      	str	r3, [r7, #24]
                    dwt_setdelayedtrxtime(resp_tx_time);
 8000712:	69b8      	ldr	r0, [r7, #24]
 8000714:	f003 ff96 	bl	8004644 <dwt_setdelayedtrxtime>

                    /* Response TX timestamp is the transmission time we programmed plus the antenna delay. */
                    resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	2200      	movs	r2, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	60fa      	str	r2, [r7, #12]
 8000720:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000724:	460b      	mov	r3, r1
 8000726:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 800072a:	460b      	mov	r3, r1
 800072c:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8000730:	f42a 74ff 	bic.w	r4, sl, #510	; 0x1fe
 8000734:	f024 0401 	bic.w	r4, r4, #1
 8000738:	f00b 05ff 	and.w	r5, fp, #255	; 0xff
 800073c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000740:	18e3      	adds	r3, r4, r3
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	f145 0300 	adc.w	r3, r5, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <ss_twr_responder_uwb+0x1e8>)
 800074c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000750:	e9c3 1200 	strd	r1, r2, [r3]

                    /* Write all timestamps in the final message. See NOTE 8 below. */
                    resp_msg_set_ts(&tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX], poll_rx_ts);
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <ss_twr_responder_uwb+0x1e0>)
 8000756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800075a:	4828      	ldr	r0, [pc, #160]	; (80007fc <ss_twr_responder_uwb+0x1ec>)
 800075c:	f000 fb35 	bl	8000dca <resp_msg_set_ts>
                    resp_msg_set_ts(&tx_resp_msg[RESP_MSG_RESP_TX_TS_IDX], resp_tx_ts);
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <ss_twr_responder_uwb+0x1e8>)
 8000762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000766:	4826      	ldr	r0, [pc, #152]	; (8000800 <ss_twr_responder_uwb+0x1f0>)
 8000768:	f000 fb2f 	bl	8000dca <resp_msg_set_ts>

                    /* Write and send the response message. See NOTE 9 below. */
                    tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <ss_twr_responder_uwb+0x1f8>)
 8000772:	709a      	strb	r2, [r3, #2]
                    dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8000774:	2200      	movs	r2, #0
 8000776:	4924      	ldr	r1, [pc, #144]	; (8000808 <ss_twr_responder_uwb+0x1f8>)
 8000778:	2014      	movs	r0, #20
 800077a:	f003 ff35 	bl	80045e8 <dwt_writetxdata>
                    dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 800077e:	2201      	movs	r2, #1
 8000780:	2100      	movs	r1, #0
 8000782:	2014      	movs	r0, #20
 8000784:	f003 ff3e 	bl	8004604 <dwt_writetxfctrl>
                    ret = dwt_starttx(DWT_START_TX_DELAYED);
 8000788:	2001      	movs	r0, #1
 800078a:	f003 ff49 	bl	8004620 <dwt_starttx>
 800078e:	6178      	str	r0, [r7, #20]

                    /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 10 below. */
                    if (ret == DWT_SUCCESS)
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d10e      	bne.n	80007b4 <ss_twr_responder_uwb+0x1a4>
                    {
                        /* Poll DW IC until TX frame sent event set. See NOTE 6 below. */
                        waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 8000796:	2300      	movs	r3, #0
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fb40 	bl	8000e22 <waitforsysstatus>

                        /* Clear TXFRS event. */
                        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	f003 ffce 	bl	8004744 <dwt_writesysstatuslo>

                        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
                        frame_seq_nb++;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 80007b2:	701a      	strb	r2, [r3, #0]


                    }
                    return 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	e003      	b.n	80007c0 <ss_twr_responder_uwb+0x1b0>
            }
        }
        else
        {
            /* Clear RX error events in the DW IC status register. */
            dwt_writesysstatuslo(SYS_STATUS_ALL_RX_ERR);
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <ss_twr_responder_uwb+0x1fc>)
 80007ba:	f003 ffc3 	bl	8004744 <dwt_writesysstatuslo>
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80007be:	e761      	b.n	8000684 <ss_twr_responder_uwb+0x74>
        }
    }
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007ca:	bf00      	nop
 80007cc:	08011dc4 	.word	0x08011dc4
 80007d0:	08011d88 	.word	0x08011d88
 80007d4:	2000001c 	.word	0x2000001c
 80007d8:	08011d9c 	.word	0x08011d9c
 80007dc:	2000004c 	.word	0x2000004c
 80007e0:	3405d000 	.word	0x3405d000
 80007e4:	200000fc 	.word	0x200000fc
 80007e8:	200000f0 	.word	0x200000f0
 80007ec:	2000002c 	.word	0x2000002c
 80007f0:	20000100 	.word	0x20000100
 80007f4:	0279c104 	.word	0x0279c104
 80007f8:	20000108 	.word	0x20000108
 80007fc:	20000042 	.word	0x20000042
 8000800:	20000046 	.word	0x20000046
 8000804:	200000ec 	.word	0x200000ec
 8000808:	20000038 	.word	0x20000038
 800080c:	34059000 	.word	0x34059000

08000810 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8000816:	f000 fa7d 	bl	8000d14 <port_GetEXT_IRQStatus>
 800081a:	4603      	mov	r3, r0
 800081c:	607b      	str	r3, [r7, #4]

    if (s)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 8000824:	f000 fa52 	bl	8000ccc <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
    if (s)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8000840:	f000 fa56 	bl	8000cf0 <port_EnableEXT_IRQ>
    }
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f97d 	bl	8000b54 <Sleep>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f956 	bl	8000b1c <usleep>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4603      	mov	r3, r0
 8000884:	81fb      	strh	r3, [r7, #14]
 8000886:	4613      	mov	r3, r2
 8000888:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 800088a:	f7ff ffc1 	bl	8000810 <decamutexon>
 800088e:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000890:	bf00      	nop
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <writetospiwithcrc+0x90>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f002 f8b5 	bl	8002a06 <HAL_SPI_GetState>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d1f7      	bne.n	8000892 <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <writetospiwithcrc+0x94>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <writetospiwithcrc+0x98>)
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4819      	ldr	r0, [pc, #100]	; (8000914 <writetospiwithcrc+0x9c>)
 80008ae:	f001 fa73 	bl	8001d98 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <writetospiwithcrc+0x90>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	89fa      	ldrh	r2, [r7, #14]
 80008b8:	230a      	movs	r3, #10
 80008ba:	68b9      	ldr	r1, [r7, #8]
 80008bc:	f001 ff67 	bl	800278e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <writetospiwithcrc+0x90>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	89ba      	ldrh	r2, [r7, #12]
 80008c6:	230a      	movs	r3, #10
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	f001 ff60 	bl	800278e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <writetospiwithcrc+0x90>)
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	230a      	movs	r3, #10
 80008d4:	2201      	movs	r2, #1
 80008d6:	f107 0120 	add.w	r1, r7, #32
 80008da:	f001 ff58 	bl	800278e <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <writetospiwithcrc+0x94>)
 80008e0:	8819      	ldrh	r1, [r3, #0]
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <writetospiwithcrc+0x98>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	bf0c      	ite	eq
 80008ea:	2301      	moveq	r3, #1
 80008ec:	2300      	movne	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <writetospiwithcrc+0x9c>)
 80008f4:	f001 fa50 	bl	8001d98 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	f7ff ff9a 	bl	8000832 <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80008fe:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000054 	.word	0x20000054
 800090c:	20000058 	.word	0x20000058
 8000910:	200001f4 	.word	0x200001f4
 8000914:	40020000 	.word	0x40020000

08000918 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4603      	mov	r3, r0
 8000924:	81fb      	strh	r3, [r7, #14]
 8000926:	4613      	mov	r3, r2
 8000928:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 800092a:	f7ff ff71 	bl	8000810 <decamutexon>
 800092e:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000930:	bf00      	nop
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <writetospi+0x8c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f865 	bl	8002a06 <HAL_SPI_GetState>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d1f7      	bne.n	8000932 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <writetospi+0x90>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	4a19      	ldr	r2, [pc, #100]	; (80009ac <writetospi+0x94>)
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	4818      	ldr	r0, [pc, #96]	; (80009b0 <writetospi+0x98>)
 800094e:	f001 fa23 	bl	8001d98 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <writetospi+0x8c>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	89fa      	ldrh	r2, [r7, #14]
 8000958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	f001 ff16 	bl	800278e <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8000962:	89bb      	ldrh	r3, [r7, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d007      	beq.n	8000978 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <writetospi+0x8c>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	89ba      	ldrh	r2, [r7, #12]
 800096e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f001 ff0b 	bl	800278e <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <writetospi+0x90>)
 800097a:	8819      	ldrh	r1, [r3, #0]
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <writetospi+0x94>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <writetospi+0x98>)
 800098e:	f001 fa03 	bl	8001d98 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff4d 	bl	8000832 <decamutexoff>

    return 0;
 8000998:	2300      	movs	r3, #0
} // end writetospi()
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000054 	.word	0x20000054
 80009a8:	20000058 	.word	0x20000058
 80009ac:	200001f4 	.word	0x200001f4
 80009b0:	40020000 	.word	0x40020000

080009b4 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	4613      	mov	r3, r2
 80009c4:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 80009c6:	f7ff ff23 	bl	8000810 <decamutexon>
 80009ca:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80009cc:	bf00      	nop
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <readfromspi+0xd4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f817 	bl	8002a06 <HAL_SPI_GetState>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d1f7      	bne.n	80009ce <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <readfromspi+0xd8>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <readfromspi+0xdc>)
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <readfromspi+0xe0>)
 80009ea:	f001 f9d5 	bl	8001d98 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <readfromspi+0xd4>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	89fa      	ldrh	r2, [r7, #14]
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	f001 fec8 	bl	800278e <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80009fe:	bf00      	nop
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <readfromspi+0xd4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d1f7      	bne.n	8000a00 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8000a10:	e01f      	b.n	8000a52 <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 8000a12:	bf00      	nop
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <readfromspi+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d1f7      	bne.n	8000a14 <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <readfromspi+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8000a2e:	bf00      	nop
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <readfromspi+0xd4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d1f7      	bne.n	8000a30 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <readfromspi+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68d9      	ldr	r1, [r3, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8000a52:	89bb      	ldrh	r3, [r7, #12]
 8000a54:	1e5a      	subs	r2, r3, #1
 8000a56:	81ba      	strh	r2, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1da      	bne.n	8000a12 <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <readfromspi+0xd8>)
 8000a5e:	8819      	ldrh	r1, [r3, #0]
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <readfromspi+0xdc>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <readfromspi+0xe0>)
 8000a72:	f001 f991 	bl	8001d98 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff fedb 	bl	8000832 <decamutexoff>

    return 0;
 8000a7c:	2300      	movs	r3, #0
} // end readfromspi()
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000054 	.word	0x20000054
 8000a8c:	20000058 	.word	0x20000058
 8000a90:	200001f4 	.word	0x200001f4
 8000a94:	40020000 	.word	0x40020000

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db12      	blt.n	8000b0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	490a      	ldr	r1, [pc, #40]	; (8000b18 <__NVIC_DisableIRQ+0x44>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	3320      	adds	r3, #32
 8000afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b00:	f3bf 8f4f 	dsb	sy
}
 8000b04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b06:	f3bf 8f6f 	isb	sy
}
 8000b0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e003      	b.n	8000b3e <usleep+0x22>
    {
        __NOP();
 8000b36:	bf00      	nop
    for (i = 0; i < usec; i++)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3f7      	bcc.n	8000b36 <usleep+0x1a>
    }
    return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 fe2f 	bl	80017c0 <HAL_Delay>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <EXTI_GetITEnStatus+0x3c>)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	095b      	lsrs	r3, r3, #5
 8000b7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 031f 	and.w	r3, r3, #31
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb6:	2311      	movs	r3, #17
 8000bb8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480a      	ldr	r0, [pc, #40]	; (8000bec <reset_DWIC+0x40>)
 8000bc4:	f000 ff64 	bl	8001a90 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <reset_DWIC+0x40>)
 8000bce:	f001 f8e3 	bl	8001d98 <HAL_GPIO_WritePin>

    usleep(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff ffa2 	bl	8000b1c <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 f809 	bl	8000bf0 <setup_DWICRSTnIRQ>
    Sleep(2);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ffb8 	bl	8000b54 <Sleep>
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020400 	.word	0x40020400

08000bf0 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d015      	beq.n	8000c2a <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c06:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <setup_DWICRSTnIRQ+0x70>)
 8000c14:	f000 ff3c 	bl	8001a90 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f000 ff10 	bl	8001a3e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	2006      	movs	r0, #6
 8000c24:	f000 feef 	bl	8001a06 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8000c28:	e015      	b.n	8000c56 <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000c2a:	2006      	movs	r0, #6
 8000c2c:	f000 ff15 	bl	8001a5a <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c34:	2311      	movs	r3, #17
 8000c36:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <setup_DWICRSTnIRQ+0x70>)
 8000c48:	f000 ff22 	bl	8001a90 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <setup_DWICRSTnIRQ+0x70>)
 8000c52:	f001 f8a1 	bl	8001d98 <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020400 	.word	0x40020400

08000c64 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <wakeup_device_with_io+0x24>)
 8000c6e:	f001 f893 	bl	8001d98 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff ff6e 	bl	8000b54 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <wakeup_device_with_io+0x24>)
 8000c7e:	f001 f88b 	bl	8001d98 <HAL_GPIO_WritePin>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020400 	.word	0x40020400

08000c8c <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <port_set_dw_ic_spi_slowrate+0x1c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2218      	movs	r2, #24
 8000c96:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <port_set_dw_ic_spi_slowrate+0x1c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fced 	bl	800267c <HAL_SPI_Init>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000054 	.word	0x20000054

08000cac <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <port_set_dw_ic_spi_fastrate+0x1c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <port_set_dw_ic_spi_fastrate+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fcdd 	bl	800267c <HAL_SPI_Init>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000054 	.word	0x20000054

08000ccc <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <port_DisableEXT_IRQ+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8000cd8:	2028      	movs	r0, #40	; 0x28
 8000cda:	f7ff fefb 	bl	8000ad4 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 8000cde:	e002      	b.n	8000ce6 <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8000ce0:	2017      	movs	r0, #23
 8000ce2:	f7ff fef7 	bl	8000ad4 <__NVIC_DisableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001f5 	.word	0x200001f5

08000cf0 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <port_EnableEXT_IRQ+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d103      	bne.n	8000d04 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8000cfc:	2028      	movs	r0, #40	; 0x28
 8000cfe:	f7ff fecb 	bl	8000a98 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8000d02:	e002      	b.n	8000d0a <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8000d04:	2017      	movs	r0, #23
 8000d06:	f7ff fec7 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001f5 	.word	0x200001f5

08000d14 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <port_GetEXT_IRQStatus+0x30>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d105      	bne.n	8000d2e <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8000d22:	2028      	movs	r0, #40	; 0x28
 8000d24:	f7ff ff22 	bl	8000b6c <EXTI_GetITEnStatus>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	e004      	b.n	8000d38 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8000d2e:	2017      	movs	r0, #23
 8000d30:	f7ff ff1c 	bl	8000b6c <EXTI_GetITEnStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	607b      	str	r3, [r7, #4]
    }
    return status;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001f5 	.word	0x200001f5

08000d48 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 8000d48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fc82 	bl	8004668 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8000d64:	2304      	movs	r3, #4
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	e023      	b.n	8000db2 <get_rx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 8000d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	020b      	lsls	r3, r1, #8
 8000d78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000d7c:	0202      	lsls	r2, r0, #8
 8000d7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	3310      	adds	r3, #16
 8000d88:	443b      	add	r3, r7
 8000d8a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2200      	movs	r2, #0
 8000d92:	461c      	mov	r4, r3
 8000d94:	4615      	mov	r5, r2
 8000d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d9a:	ea42 0804 	orr.w	r8, r2, r4
 8000d9e:	ea43 0905 	orr.w	r9, r3, r5
 8000da2:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dad7      	bge.n	8000d6a <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8000dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000dca <resp_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_set_ts(uint8_t *ts_field, const uint64_t ts)
{
 8000dca:	b4f0      	push	{r4, r5, r6, r7}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	75fb      	strb	r3, [r7, #23]
 8000dda:	e019      	b.n	8000e10 <resp_msg_set_ts+0x46>
    {
        ts_field[i] = (uint8_t)(ts >> (i * 8));
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	00d9      	lsls	r1, r3, #3
 8000de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	f1a1 0020 	sub.w	r0, r1, #32
 8000dec:	fa22 f401 	lsr.w	r4, r2, r1
 8000df0:	fa03 f606 	lsl.w	r6, r3, r6
 8000df4:	4334      	orrs	r4, r6
 8000df6:	fa23 f000 	lsr.w	r0, r3, r0
 8000dfa:	4304      	orrs	r4, r0
 8000dfc:	fa23 f501 	lsr.w	r5, r3, r1
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	4413      	add	r3, r2
 8000e06:	b2e2      	uxtb	r2, r4
 8000e08:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	75fb      	strb	r3, [r7, #23]
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d9e2      	bls.n	8000ddc <resp_msg_set_ts+0x12>
    }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e20:	4770      	bx	lr

08000e22 <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d014      	beq.n	8000e68 <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000e3e:	e00a      	b.n	8000e56 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 8000e46:	f003 fca1 	bl	800478c <dwt_readsysstatushi>
 8000e4a:	6138      	str	r0, [r7, #16]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d115      	bne.n	8000e82 <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000e56:	f003 fc87 	bl	8004768 <dwt_readsysstatuslo>
 8000e5a:	6178      	str	r0, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0ec      	beq.n	8000e40 <waitforsysstatus+0x1e>
 8000e66:	e00d      	b.n	8000e84 <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00a      	beq.n	8000e84 <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8000e6e:	bf00      	nop
 8000e70:	f003 fc8c 	bl	800478c <dwt_readsysstatushi>
 8000e74:	6138      	str	r0, [r7, #16]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f7      	beq.n	8000e70 <waitforsysstatus+0x4e>
 8000e80:	e000      	b.n	8000e84 <waitforsysstatus+0x62>
                    break;
 8000e82:	bf00      	nop
    }

    if (lo_result != NULL)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	601a      	str	r2, [r3, #0]
    }
}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <test_run_info>:
//extern example_ptr example_pointer;
//extern int unit_test_main(void);


void test_run_info(unsigned char *data) // UART print code will be added.
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(LED_S_GPIO_Port,LED_S_Pin, GPIO_PIN_RESET);
	uint16_t data_length;

	data_length = strlen((const char *)data);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff f9bd 	bl	800022c <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, data_length, 1000);
 8000eb6:	89fa      	ldrh	r2, [r7, #14]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <test_run_info+0x28>)
 8000ec0:	f002 fe1b 	bl	8003afa <HAL_UART_Transmit>

	//HAL_GPIO_WritePin(LED_S_GPIO_Port,LED_S_Pin, GPIO_PIN_SET);
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200001b0 	.word	0x200001b0

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed4:	f000 fc02 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 f81a 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000edc:	f000 f99a 	bl	8001214 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ee0:	f000 f880 	bl	8000fe4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ee4:	f000 f96c 	bl	80011c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ee8:	f000 f8b2 	bl	8001050 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 8000eec:	f7ff feee 	bl	8000ccc <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff fe7d 	bl	8000bf0 <setup_DWICRSTnIRQ>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <main+0x3c>)
 8000efe:	f000 ff4b 	bl	8001d98 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  ss_twr_responder_uwb();
 8000f02:	f7ff fb85 	bl	8000610 <ss_twr_responder_uwb>
	  Pdoa_uwb_tx();
 8000f06:	f7ff fb1b 	bl	8000540 <Pdoa_uwb_tx>
	  ss_twr_responder_uwb();
 8000f0a:	e7fa      	b.n	8000f02 <main+0x32>
 8000f0c:	40020400 	.word	0x40020400

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2230      	movs	r2, #48	; 0x30
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f010 fe46 	bl	8011bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <SystemClock_Config+0xcc>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <SystemClock_Config+0xcc>)
 8000f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <SystemClock_Config+0xcc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <SystemClock_Config+0xd0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <SystemClock_Config+0xd0>)
 8000f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <SystemClock_Config+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8000f80:	2314      	movs	r3, #20
 8000f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f84:	23a0      	movs	r3, #160	; 0xa0
 8000f86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 ff19 	bl	8001dcc <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa0:	f000 f9e4 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 f97a 	bl	80022bc <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fce:	f000 f9cd 	bl	800136c <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3750      	adds	r7, #80	; 0x50
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_SPI1_Init+0x64>)
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <MX_SPI1_Init+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_SPI1_Init+0x64>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001014:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_SPI1_Init+0x64>)
 8001018:	2210      	movs	r2, #16
 800101a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_SPI1_Init+0x64>)
 8001030:	220a      	movs	r2, #10
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_SPI1_Init+0x64>)
 8001036:	f001 fb21 	bl	800267c <HAL_SPI_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001040:	f000 f994 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000110 	.word	0x20000110
 800104c:	40013000 	.word	0x40013000

08001050 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b09a      	sub	sp, #104	; 0x68
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2220      	movs	r2, #32
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f010 fd89 	bl	8011bb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010a0:	4a46      	ldr	r2, [pc, #280]	; (80011bc <MX_TIM1_Init+0x16c>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010b8:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010cc:	483a      	ldr	r0, [pc, #232]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010ce:	f001 fd73 	bl	8002bb8 <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80010d8:	f000 f948 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e6:	4619      	mov	r1, r3
 80010e8:	4833      	ldr	r0, [pc, #204]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010ea:	f001 ff71 	bl	8002fd0 <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010f4:	f000 f93a 	bl	800136c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80010f8:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_TIM1_Init+0x168>)
 80010fa:	f001 fdac 	bl	8002c56 <HAL_TIM_OC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001104:	f000 f932 	bl	800136c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001108:	2306      	movs	r3, #6
 800110a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800110c:	2300      	movs	r3, #0
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001110:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001114:	4619      	mov	r1, r3
 8001116:	4828      	ldr	r0, [pc, #160]	; (80011b8 <MX_TIM1_Init+0x168>)
 8001118:	f002 f821 	bl	800315e <HAL_TIM_SlaveConfigSynchro>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001122:	f000 f923 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001132:	4619      	mov	r1, r3
 8001134:	4820      	ldr	r0, [pc, #128]	; (80011b8 <MX_TIM1_Init+0x168>)
 8001136:	f002 fbbf 	bl	80038b8 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001140:	f000 f914 	bl	800136c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_TIM1_Init+0x168>)
 800116a:	f001 fed5 	bl	8002f18 <HAL_TIM_OC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001174:	f000 f8fa 	bl	800136c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_TIM1_Init+0x168>)
 800119c:	f002 fbfa 	bl	8003994 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80011a6:	f000 f8e1 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <MX_TIM1_Init+0x168>)
 80011ac:	f000 f97c 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 80011b0:	bf00      	nop
 80011b2:	3768      	adds	r7, #104	; 0x68
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000168 	.word	0x20000168
 80011bc:	40010000 	.word	0x40010000

080011c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART1_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f8:	f002 fc32 	bl	8003a60 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f8b3 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001b0 	.word	0x200001b0
 8001210:	40011000 	.word	0x40011000

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b4b      	ldr	r3, [pc, #300]	; (800135c <MX_GPIO_Init+0x148>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a4a      	ldr	r2, [pc, #296]	; (800135c <MX_GPIO_Init+0x148>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b48      	ldr	r3, [pc, #288]	; (800135c <MX_GPIO_Init+0x148>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b44      	ldr	r3, [pc, #272]	; (800135c <MX_GPIO_Init+0x148>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a43      	ldr	r2, [pc, #268]	; (800135c <MX_GPIO_Init+0x148>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <MX_GPIO_Init+0x148>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <MX_GPIO_Init+0x148>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a3c      	ldr	r2, [pc, #240]	; (800135c <MX_GPIO_Init+0x148>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <MX_GPIO_Init+0x148>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <MX_GPIO_Init+0x148>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a35      	ldr	r2, [pc, #212]	; (800135c <MX_GPIO_Init+0x148>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <MX_GPIO_Init+0x148>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_S_GPIO_Port, LED_S_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	482f      	ldr	r0, [pc, #188]	; (8001360 <MX_GPIO_Init+0x14c>)
 80012a2:	f000 fd79 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2110      	movs	r1, #16
 80012aa:	482e      	ldr	r0, [pc, #184]	; (8001364 <MX_GPIO_Init+0x150>)
 80012ac:	f000 fd74 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2103      	movs	r1, #3
 80012b4:	482c      	ldr	r0, [pc, #176]	; (8001368 <MX_GPIO_Init+0x154>)
 80012b6:	f000 fd6f 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_r_Pin|LED_y_Pin|LED_g_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012c0:	4829      	ldr	r0, [pc, #164]	; (8001368 <MX_GPIO_Init+0x154>)
 80012c2:	f000 fd69 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_S_Pin */
  GPIO_InitStruct.Pin = LED_S_Pin;
 80012c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_S_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4820      	ldr	r0, [pc, #128]	; (8001360 <MX_GPIO_Init+0x14c>)
 80012e0:	f000 fbd6 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin|DW_IRQn_Pin;
 80012e4:	2306      	movs	r3, #6
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481a      	ldr	r0, [pc, #104]	; (8001364 <MX_GPIO_Init+0x150>)
 80012fa:	f000 fbc9 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80012fe:	2310      	movs	r3, #16
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_GPIO_Init+0x150>)
 8001316:	f000 fbbb 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_NSS1_WAKEUP_Pin;
 800131a:	2303      	movs	r3, #3
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_GPIO_Init+0x154>)
 8001332:	f000 fbad 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_r_Pin LED_y_Pin LED_g_Pin */
  GPIO_InitStruct.Pin = LED_r_Pin|LED_y_Pin|LED_g_Pin;
 8001336:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_GPIO_Init+0x154>)
 8001350:	f000 fb9e 	bl	8001a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020800 	.word	0x40020800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_MspInit+0x4c>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_MspInit+0x4c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_MspInit+0x4c>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_MspInit+0x4c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800

080013c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_SPI_MspInit+0x84>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12b      	bne.n	8001442 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_SPI_MspInit+0x88>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_SPI_MspInit+0x88>)
 80013f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_SPI_MspInit+0x88>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_SPI_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_SPI_MspInit+0x88>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_SPI_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001422:	23e0      	movs	r3, #224	; 0xe0
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001432:	2305      	movs	r3, #5
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_SPI_MspInit+0x8c>)
 800143e:	f000 fb27 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40013000 	.word	0x40013000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_TIM_Base_MspInit+0x48>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d115      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_TIM_Base_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	201b      	movs	r0, #27
 800148c:	f000 fabb 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001490:	201b      	movs	r0, #27
 8001492:	f000 fad4 	bl	8001a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_TIM_MspPostInit+0x70>)
 8001504:	f000 fac4 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40010000 	.word	0x40010000
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12b      	bne.n	8001596 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_UART_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001576:	23c0      	movs	r3, #192	; 0xc0
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001586:	2307      	movs	r3, #7
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_UART_MspInit+0x8c>)
 8001592:	f000 fa7d 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40011000 	.word	0x40011000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400

080015ac <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015da:	f000 f8d1 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM1_CC_IRQHandler+0x10>)
 80015ea:	f001 fb8d 	bl	8002d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000168 	.word	0x20000168

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f010 fa68 	bl	8011afc <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20020000 	.word	0x20020000
 8001658:	00000400 	.word	0x00000400
 800165c:	200001f8 	.word	0x200001f8
 8001660:	20000408 	.word	0x20000408

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b2:	f7ff ffd7 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f010 fa3b 	bl	8011b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff fc09 	bl	8000ed0 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80016cc:	080122d0 	.word	0x080122d0
  ldr r2, =_sbss
 80016d0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80016d4:	20000404 	.word	0x20000404

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f973 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fe32 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f999 	bl	8001a76 <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800175c:	f000 f953 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000005c 	.word	0x2000005c
 8001778:	20000064 	.word	0x20000064
 800177c:	20000060 	.word	0x20000060

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000064 	.word	0x20000064
 80017a4:	200001fc 	.word	0x200001fc

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200001fc 	.word	0x200001fc

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_Delay+0x44>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000064 	.word	0x20000064

08001808 <__NVIC_SetPriorityGrouping>:
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_DisableIRQ>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db12      	blt.n	80018e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	490a      	ldr	r1, [pc, #40]	; (80018ec <__NVIC_DisableIRQ+0x44>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	3320      	adds	r3, #32
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80018d4:	f3bf 8f4f 	dsb	sy
}
 80018d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018da:	f3bf 8f6f 	isb	sy
}
 80018de:	bf00      	nop
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff05 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff1a 	bl	8001850 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff0d 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff1d 	bl	80018a8 <__NVIC_DisableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff94 	bl	80019ac <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e159      	b.n	8001d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8148 	bne.w	8001d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a2 	beq.w	8001d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a56      	ldr	r2, [pc, #344]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x2ec>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x202>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <HAL_GPIO_Init+0x2f4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x1fe>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_GPIO_Init+0x2f8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_GPIO_Init+0x2fc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x1f6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x1f2>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e008      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c92:	2300      	movs	r3, #0
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca4:	4935      	ldr	r1, [pc, #212]	; (8001d7c <HAL_GPIO_Init+0x2ec>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd6:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d00:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d54:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_GPIO_Init+0x304>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	f67f aea2 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40013c00 	.word	0x40013c00

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e267      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4b85      	ldr	r3, [pc, #532]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b82      	ldr	r3, [pc, #520]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b7e      	ldr	r3, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e242      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b69      	ldr	r3, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a68      	ldr	r2, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fc90 	bl	80017a8 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fc8c 	bl	80017a8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e207      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fc7c 	bl	80017a8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fc78 	bl	80017a8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1f3      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1c7      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fc31 	bl	80017a8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fc2d 	bl	80017a8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1a8      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4925      	ldr	r1, [pc, #148]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fc10 	bl	80017a8 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fc0c 	bl	80017a8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e187      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d036      	beq.n	8002024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fbf0 	bl	80017a8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fbec 	bl	80017a8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e167      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
 8001fea:	e01b      	b.n	8002024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fbd9 	bl	80017a8 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fbd5 	bl	80017a8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e150      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ea      	bne.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8097 	beq.w	8002160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b81      	ldr	r3, [pc, #516]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b7d      	ldr	r3, [pc, #500]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a7c      	ldr	r2, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b7a      	ldr	r3, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b77      	ldr	r3, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b74      	ldr	r3, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a73      	ldr	r2, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff fb95 	bl	80017a8 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff fb91 	bl	80017a8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e10c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2ea>
 80020a8:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x30c>
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a54      	ldr	r2, [pc, #336]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff fb56 	bl	80017a8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff fb52 	bl	80017a8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0cb      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x334>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff fb40 	bl	80017a8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff fb3c 	bl	80017a8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0b5      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a38      	ldr	r2, [pc, #224]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a1 	beq.w	80022ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d05c      	beq.n	8002230 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d141      	bne.n	8002202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fb10 	bl	80017a8 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff fb0c 	bl	80017a8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e087      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff fae5 	bl	80017a8 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff fae1 	bl	80017a8 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e05c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x416>
 8002200:	e054      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff face 	bl	80017a8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff faca 	bl	80017a8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e045      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
 800222e:	e03d      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e038      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000
 8002244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4ec>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d11a      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800227e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0cc      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d90c      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800231a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d044      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d119      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	2b03      	cmp	r3, #3
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e067      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4934      	ldr	r1, [pc, #208]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7ff f9fc 	bl	80017a8 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7ff f9f8 	bl	80017a8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e04f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20c      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f95c 	bl	8001720 <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00
 8002478:	40023800 	.word	0x40023800
 800247c:	08011dd0 	.word	0x08011dd0
 8002480:	2000005c 	.word	0x2000005c
 8002484:	20000060 	.word	0x20000060

08002488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800248c:	b090      	sub	sp, #64	; 0x40
 800248e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a0:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x40>
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	f200 80a1 	bhi.w	80025f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x34>
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ba:	e09b      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_GetSysClockFreq+0x184>)
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80024c0:	e09b      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c2:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_GetSysClockFreq+0x188>)
 80024c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024c6:	e098      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c8:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d2:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d028      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024de:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	2200      	movs	r2, #0
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	627a      	str	r2, [r7, #36]	; 0x24
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024f0:	2100      	movs	r1, #0
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_GetSysClockFreq+0x188>)
 80024f4:	fb03 f201 	mul.w	r2, r3, r1
 80024f8:	2300      	movs	r3, #0
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	4413      	add	r3, r2
 8002500:	4a43      	ldr	r2, [pc, #268]	; (8002610 <HAL_RCC_GetSysClockFreq+0x188>)
 8002502:	fba0 1202 	umull	r1, r2, r0, r2
 8002506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002508:	460a      	mov	r2, r1
 800250a:	62ba      	str	r2, [r7, #40]	; 0x28
 800250c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250e:	4413      	add	r3, r2
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	2200      	movs	r2, #0
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	61fa      	str	r2, [r7, #28]
 800251a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002522:	f7fd fe8d 	bl	8000240 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4613      	mov	r3, r2
 800252c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800252e:	e053      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002530:	4b35      	ldr	r3, [pc, #212]	; (8002608 <HAL_RCC_GetSysClockFreq+0x180>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	2200      	movs	r2, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	617a      	str	r2, [r7, #20]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002542:	f04f 0b00 	mov.w	fp, #0
 8002546:	4652      	mov	r2, sl
 8002548:	465b      	mov	r3, fp
 800254a:	f04f 0000 	mov.w	r0, #0
 800254e:	f04f 0100 	mov.w	r1, #0
 8002552:	0159      	lsls	r1, r3, #5
 8002554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002558:	0150      	lsls	r0, r2, #5
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	ebb2 080a 	subs.w	r8, r2, sl
 8002562:	eb63 090b 	sbc.w	r9, r3, fp
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002572:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002576:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800257a:	ebb2 0408 	subs.w	r4, r2, r8
 800257e:	eb63 0509 	sbc.w	r5, r3, r9
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	00eb      	lsls	r3, r5, #3
 800258c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002590:	00e2      	lsls	r2, r4, #3
 8002592:	4614      	mov	r4, r2
 8002594:	461d      	mov	r5, r3
 8002596:	eb14 030a 	adds.w	r3, r4, sl
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	eb45 030b 	adc.w	r3, r5, fp
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ae:	4629      	mov	r1, r5
 80025b0:	028b      	lsls	r3, r1, #10
 80025b2:	4621      	mov	r1, r4
 80025b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b8:	4621      	mov	r1, r4
 80025ba:	028a      	lsls	r2, r1, #10
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	2200      	movs	r2, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	60fa      	str	r2, [r7, #12]
 80025c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025cc:	f7fd fe38 	bl	8000240 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_GetSysClockFreq+0x180>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025f2:	e002      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetSysClockFreq+0x184>)
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3740      	adds	r7, #64	; 0x40
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	00f42400 	.word	0x00f42400
 8002610:	017d7840 	.word	0x017d7840

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	2000005c 	.word	0x2000005c

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002630:	f7ff fff0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08011de0 	.word	0x08011de0

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002658:	f7ff ffdc 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0b5b      	lsrs	r3, r3, #13
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08011de0 	.word	0x08011de0

0800267c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e07b      	b.n	8002786 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d108      	bne.n	80026a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800269e:	d009      	beq.n	80026b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
 80026a6:	e005      	b.n	80026b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fe7a 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	ea42 0103 	orr.w	r1, r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0104 	and.w	r1, r3, #4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	f003 0210 	and.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b088      	sub	sp, #32
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_SPI_Transmit+0x22>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e126      	b.n	80029fe <HAL_SPI_Transmit+0x270>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027b8:	f7fe fff6 	bl	80017a8 <HAL_GetTick>
 80027bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d002      	beq.n	80027d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027d2:	e10b      	b.n	80029ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_SPI_Transmit+0x52>
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027e4:	e102      	b.n	80029ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2203      	movs	r2, #3
 80027ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800282c:	d10f      	bne.n	800284e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d007      	beq.n	800286c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002874:	d14b      	bne.n	800290e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_SPI_Transmit+0xf6>
 800287e:	8afb      	ldrh	r3, [r7, #22]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d13e      	bne.n	8002902 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028a8:	e02b      	b.n	8002902 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d112      	bne.n	80028de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	86da      	strh	r2, [r3, #54]	; 0x36
 80028dc:	e011      	b.n	8002902 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028de:	f7fe ff63 	bl	80017a8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d803      	bhi.n	80028f6 <HAL_SPI_Transmit+0x168>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f4:	d102      	bne.n	80028fc <HAL_SPI_Transmit+0x16e>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002900:	e074      	b.n	80029ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ce      	bne.n	80028aa <HAL_SPI_Transmit+0x11c>
 800290c:	e04c      	b.n	80029a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_SPI_Transmit+0x18e>
 8002916:	8afb      	ldrh	r3, [r7, #22]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d140      	bne.n	800299e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002942:	e02c      	b.n	800299e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	d113      	bne.n	800297a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	330c      	adds	r3, #12
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	86da      	strh	r2, [r3, #54]	; 0x36
 8002978:	e011      	b.n	800299e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800297a:	f7fe ff15 	bl	80017a8 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d803      	bhi.n	8002992 <HAL_SPI_Transmit+0x204>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002990:	d102      	bne.n	8002998 <HAL_SPI_Transmit+0x20a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800299c:	e026      	b.n	80029ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1cd      	bne.n	8002944 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f8c1 	bl	8002b34 <SPI_EndRxTxTransaction>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e000      	b.n	80029ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80029ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a14:	b2db      	uxtb	r3, r3
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a34:	f7fe feb8 	bl	80017a8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a44:	f7fe feb0 	bl	80017a8 <HAL_GetTick>
 8002a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	015b      	lsls	r3, r3, #5
 8002a50:	0d1b      	lsrs	r3, r3, #20
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a5a:	e054      	b.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a62:	d050      	beq.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a64:	f7fe fea0 	bl	80017a8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d902      	bls.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d13d      	bne.n	8002af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a92:	d111      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9c:	d004      	beq.n	8002aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d107      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac0:	d10f      	bne.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e017      	b.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d19b      	bne.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000005c 	.word	0x2000005c

08002b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <SPI_EndRxTxTransaction+0x7c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <SPI_EndRxTxTransaction+0x80>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0d5b      	lsrs	r3, r3, #21
 8002b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5e:	d112      	bne.n	8002b86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff ff5a 	bl	8002a24 <SPI_WaitFlagStateUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e00f      	b.n	8002ba6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d0f2      	beq.n	8002b86 <SPI_EndRxTxTransaction+0x52>
 8002ba0:	e000      	b.n	8002ba4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ba2:	bf00      	nop
  }

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000005c 	.word	0x2000005c
 8002bb4:	165e9f81 	.word	0x165e9f81

08002bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fc3a 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 fb26 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e041      	b.n	8002cec <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f839 	bl	8002cf4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3304      	adds	r3, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f000 fad7 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0202 	mvn.w	r2, #2
 8002d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa5d 	bl	800320a <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa4f 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa60 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0204 	mvn.w	r2, #4
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa33 	bl	800320a <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa25 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fa36 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0208 	mvn.w	r2, #8
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa09 	bl	800320a <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f9fb 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa0c 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0210 	mvn.w	r2, #16
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2208      	movs	r2, #8
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9df 	bl	800320a <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9d1 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9e2 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0201 	mvn.w	r2, #1
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f9ab 	bl	80031e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d10e      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d107      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fdca 	bl	8003a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9a7 	bl	8003232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0220 	mvn.w	r2, #32
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fd94 	bl	8003a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e048      	b.n	8002fc8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d839      	bhi.n	8002fb8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08002fb9 	.word	0x08002fb9
 8002f54:	08002fb9 	.word	0x08002fb9
 8002f58:	08002fb9 	.word	0x08002fb9
 8002f5c:	08002f8f 	.word	0x08002f8f
 8002f60:	08002fb9 	.word	0x08002fb9
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08002fb9 	.word	0x08002fb9
 8002f6c:	08002f9d 	.word	0x08002f9d
 8002f70:	08002fb9 	.word	0x08002fb9
 8002f74:	08002fb9 	.word	0x08002fb9
 8002f78:	08002fb9 	.word	0x08002fb9
 8002f7c:	08002fab 	.word	0x08002fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f9de 	bl	8003348 <TIM_OC1_SetConfig>
      break;
 8002f8c:	e017      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fa3d 	bl	8003414 <TIM_OC2_SetConfig>
      break;
 8002f9a:	e010      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 faa2 	bl	80034ec <TIM_OC3_SetConfig>
      break;
 8002fa8:	e009      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fb05 	bl	80035c0 <TIM_OC4_SetConfig>
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
      break;
 8002fbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_ConfigClockSource+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0b4      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x186>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800300a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003024:	d03e      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302a:	f200 8087 	bhi.w	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	f000 8086 	beq.w	8003142 <HAL_TIM_ConfigClockSource+0x172>
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d87f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b70      	cmp	r3, #112	; 0x70
 800303e:	d01a      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xa6>
 8003040:	2b70      	cmp	r3, #112	; 0x70
 8003042:	d87b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d050      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x11a>
 8003048:	2b60      	cmp	r3, #96	; 0x60
 800304a:	d877      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b50      	cmp	r3, #80	; 0x50
 800304e:	d03c      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xfa>
 8003050:	2b50      	cmp	r3, #80	; 0x50
 8003052:	d873      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d058      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x13a>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d86f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b30      	cmp	r3, #48	; 0x30
 800305e:	d064      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	d86b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d060      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d867      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05c      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d05a      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	e062      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f000 fbf6 	bl	8003876 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	609a      	str	r2, [r3, #8]
      break;
 80030a2:	e04f      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f000 fbdf 	bl	8003876 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c6:	609a      	str	r2, [r3, #8]
      break;
 80030c8:	e03c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fb53 	bl	8003782 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2150      	movs	r1, #80	; 0x50
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fbac 	bl	8003840 <TIM_ITRx_SetConfig>
      break;
 80030e8:	e02c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 fb72 	bl	80037e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2160      	movs	r1, #96	; 0x60
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fb9c 	bl	8003840 <TIM_ITRx_SetConfig>
      break;
 8003108:	e01c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	461a      	mov	r2, r3
 8003118:	f000 fb33 	bl	8003782 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fb8c 	bl	8003840 <TIM_ITRx_SetConfig>
      break;
 8003128:	e00c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 fb83 	bl	8003840 <TIM_ITRx_SetConfig>
      break;
 800313a:	e003      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      break;
 8003140:	e000      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003172:	2302      	movs	r3, #2
 8003174:	e031      	b.n	80031da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa69 	bl	8003660 <TIM_SlaveTimer_SetConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e018      	b.n	80031da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a34      	ldr	r2, [pc, #208]	; (800332c <TIM_Base_SetConfig+0xe4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a31      	ldr	r2, [pc, #196]	; (8003330 <TIM_Base_SetConfig+0xe8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a30      	ldr	r2, [pc, #192]	; (8003334 <TIM_Base_SetConfig+0xec>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <TIM_Base_SetConfig+0xf0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <TIM_Base_SetConfig+0xe4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01b      	beq.n	80032d2 <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d017      	beq.n	80032d2 <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <TIM_Base_SetConfig+0xe8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <TIM_Base_SetConfig+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <TIM_Base_SetConfig+0xf0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1f      	ldr	r2, [pc, #124]	; (800333c <TIM_Base_SetConfig+0xf4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <TIM_Base_SetConfig+0xf8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <TIM_Base_SetConfig+0xfc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <TIM_Base_SetConfig+0xe4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	615a      	str	r2, [r3, #20]
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010000 	.word	0x40010000
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800
 8003338:	40000c00 	.word	0x40000c00
 800333c:	40014000 	.word	0x40014000
 8003340:	40014400 	.word	0x40014400
 8003344:	40014800 	.word	0x40014800

08003348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f023 0201 	bic.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 0302 	bic.w	r3, r3, #2
 8003390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <TIM_OC1_SetConfig+0xc8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10c      	bne.n	80033be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0308 	bic.w	r3, r3, #8
 80033aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <TIM_OC1_SetConfig+0xc8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d111      	bne.n	80033ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40010000 	.word	0x40010000

08003414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f023 0210 	bic.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 0320 	bic.w	r3, r3, #32
 800345e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <TIM_OC2_SetConfig+0xd4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10d      	bne.n	8003490 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <TIM_OC2_SetConfig+0xd4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d113      	bne.n	80034c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800349e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40010000 	.word	0x40010000

080034ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <TIM_OC3_SetConfig+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10d      	bne.n	8003566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <TIM_OC3_SetConfig+0xd0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40010000 	.word	0x40010000

080035c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <TIM_OC4_SetConfig+0x9c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d109      	bne.n	8003634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	019b      	lsls	r3, r3, #6
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40010000 	.word	0x40010000

08003660 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 0307 	bic.w	r3, r3, #7
 800368e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b70      	cmp	r3, #112	; 0x70
 80036a8:	d01a      	beq.n	80036e0 <TIM_SlaveTimer_SetConfig+0x80>
 80036aa:	2b70      	cmp	r3, #112	; 0x70
 80036ac:	d860      	bhi.n	8003770 <TIM_SlaveTimer_SetConfig+0x110>
 80036ae:	2b60      	cmp	r3, #96	; 0x60
 80036b0:	d054      	beq.n	800375c <TIM_SlaveTimer_SetConfig+0xfc>
 80036b2:	2b60      	cmp	r3, #96	; 0x60
 80036b4:	d85c      	bhi.n	8003770 <TIM_SlaveTimer_SetConfig+0x110>
 80036b6:	2b50      	cmp	r3, #80	; 0x50
 80036b8:	d046      	beq.n	8003748 <TIM_SlaveTimer_SetConfig+0xe8>
 80036ba:	2b50      	cmp	r3, #80	; 0x50
 80036bc:	d858      	bhi.n	8003770 <TIM_SlaveTimer_SetConfig+0x110>
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d019      	beq.n	80036f6 <TIM_SlaveTimer_SetConfig+0x96>
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d854      	bhi.n	8003770 <TIM_SlaveTimer_SetConfig+0x110>
 80036c6:	2b30      	cmp	r3, #48	; 0x30
 80036c8:	d055      	beq.n	8003776 <TIM_SlaveTimer_SetConfig+0x116>
 80036ca:	2b30      	cmp	r3, #48	; 0x30
 80036cc:	d850      	bhi.n	8003770 <TIM_SlaveTimer_SetConfig+0x110>
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d051      	beq.n	8003776 <TIM_SlaveTimer_SetConfig+0x116>
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d84c      	bhi.n	8003770 <TIM_SlaveTimer_SetConfig+0x110>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04d      	beq.n	8003776 <TIM_SlaveTimer_SetConfig+0x116>
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d04b      	beq.n	8003776 <TIM_SlaveTimer_SetConfig+0x116>
 80036de:	e047      	b.n	8003770 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68d9      	ldr	r1, [r3, #12]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f000 f8c1 	bl	8003876 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80036f4:	e040      	b.n	8003778 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d101      	bne.n	8003702 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e03b      	b.n	800377a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003728:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4313      	orrs	r3, r2
 8003734:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
      break;
 8003746:	e017      	b.n	8003778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	461a      	mov	r2, r3
 8003756:	f000 f814 	bl	8003782 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800375a:	e00d      	b.n	8003778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	461a      	mov	r2, r3
 800376a:	f000 f839 	bl	80037e0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800376e:	e003      	b.n	8003778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
      break;
 8003774:	e000      	b.n	8003778 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003776:	bf00      	nop
  }

  return status;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003782:	b480      	push	{r7}
 8003784:	b087      	sub	sp, #28
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f023 0201 	bic.w	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 030a 	bic.w	r3, r3, #10
 80037be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 0210 	bic.w	r2, r3, #16
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800380a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	031b      	lsls	r3, r3, #12
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800381c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	621a      	str	r2, [r3, #32]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	f043 0307 	orr.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	609a      	str	r2, [r3, #8]
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003890:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	021a      	lsls	r2, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e050      	b.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d013      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a13      	ldr	r2, [pc, #76]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d10c      	bne.n	8003960 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40010000 	.word	0x40010000
 8003984:	40000400 	.word	0x40000400
 8003988:	40000800 	.word	0x40000800
 800398c:	40000c00 	.word	0x40000c00
 8003990:	40014000 	.word	0x40014000

08003994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e03d      	b.n	8003a2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e03f      	b.n	8003af2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fd48 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f929 	bl	8003cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b08a      	sub	sp, #40	; 0x28
 8003afe:	af02      	add	r7, sp, #8
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d17c      	bne.n	8003c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_Transmit+0x2c>
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e075      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Transmit+0x3e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e06e      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2221      	movs	r2, #33	; 0x21
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fe2b 	bl	80017a8 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b68:	d108      	bne.n	8003b7c <HAL_UART_Transmit+0x82>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e003      	b.n	8003b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b8c:	e02a      	b.n	8003be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f840 	bl	8003c1e <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e036      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10b      	bne.n	8003bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e007      	b.n	8003bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1cf      	bne.n	8003b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2140      	movs	r1, #64	; 0x40
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f810 	bl	8003c1e <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e006      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b090      	sub	sp, #64	; 0x40
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	e050      	b.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c36:	d04c      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c3e:	f7fd fdb3 	bl	80017a8 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d241      	bcs.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c6e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	613b      	str	r3, [r7, #16]
   return(result);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ca2:	623a      	str	r2, [r7, #32]
 8003ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e00f      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d09f      	beq.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3740      	adds	r7, #64	; 0x40
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b0c0      	sub	sp, #256	; 0x100
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	68d9      	ldr	r1, [r3, #12]
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	ea40 0301 	orr.w	r3, r0, r1
 8003d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d54:	f021 010c 	bic.w	r1, r1, #12
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d62:	430b      	orrs	r3, r1
 8003d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	6999      	ldr	r1, [r3, #24]
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	ea40 0301 	orr.w	r3, r0, r1
 8003d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b8f      	ldr	r3, [pc, #572]	; (8003fc8 <UART_SetConfig+0x2cc>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d005      	beq.n	8003d9c <UART_SetConfig+0xa0>
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b8d      	ldr	r3, [pc, #564]	; (8003fcc <UART_SetConfig+0x2d0>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d104      	bne.n	8003da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe fc5a 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003da4:	e003      	b.n	8003dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003da6:	f7fe fc41 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 8003daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db8:	f040 810c 	bne.w	8003fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dce:	4622      	mov	r2, r4
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	1891      	adds	r1, r2, r2
 8003dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dd6:	415b      	adcs	r3, r3
 8003dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dde:	4621      	mov	r1, r4
 8003de0:	eb12 0801 	adds.w	r8, r2, r1
 8003de4:	4629      	mov	r1, r5
 8003de6:	eb43 0901 	adc.w	r9, r3, r1
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfe:	4690      	mov	r8, r2
 8003e00:	4699      	mov	r9, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	eb18 0303 	adds.w	r3, r8, r3
 8003e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	eb49 0303 	adc.w	r3, r9, r3
 8003e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	18db      	adds	r3, r3, r3
 8003e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e30:	4613      	mov	r3, r2
 8003e32:	eb42 0303 	adc.w	r3, r2, r3
 8003e36:	657b      	str	r3, [r7, #84]	; 0x54
 8003e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e40:	f7fc f9fe 	bl	8000240 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4b61      	ldr	r3, [pc, #388]	; (8003fd0 <UART_SetConfig+0x2d4>)
 8003e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	011c      	lsls	r4, r3, #4
 8003e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	1891      	adds	r1, r2, r2
 8003e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e74:	4641      	mov	r1, r8
 8003e76:	eb12 0a01 	adds.w	sl, r2, r1
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e94:	4692      	mov	sl, r2
 8003e96:	469b      	mov	fp, r3
 8003e98:	4643      	mov	r3, r8
 8003e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	18db      	adds	r3, r3, r3
 8003ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ed6:	f7fc f9b3 	bl	8000240 <__aeabi_uldivmod>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <UART_SetConfig+0x2d4>)
 8003ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2264      	movs	r2, #100	; 0x64
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	1acb      	subs	r3, r1, r3
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <UART_SetConfig+0x2d4>)
 8003ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f04:	441c      	add	r4, r3
 8003f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f20:	415b      	adcs	r3, r3
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f28:	4641      	mov	r1, r8
 8003f2a:	1851      	adds	r1, r2, r1
 8003f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f2e:	4649      	mov	r1, r9
 8003f30:	414b      	adcs	r3, r1
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f40:	4659      	mov	r1, fp
 8003f42:	00cb      	lsls	r3, r1, #3
 8003f44:	4651      	mov	r1, sl
 8003f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	00ca      	lsls	r2, r1, #3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	4642      	mov	r2, r8
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	460a      	mov	r2, r1
 8003f60:	eb42 0303 	adc.w	r3, r2, r3
 8003f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	18db      	adds	r3, r3, r3
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f82:	4613      	mov	r3, r2
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f92:	f7fc f955 	bl	8000240 <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <UART_SetConfig+0x2d4>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	2164      	movs	r1, #100	; 0x64
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	3332      	adds	r3, #50	; 0x32
 8003fae:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <UART_SetConfig+0x2d4>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	f003 0207 	and.w	r2, r3, #7
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4422      	add	r2, r4
 8003fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fc4:	e105      	b.n	80041d2 <UART_SetConfig+0x4d6>
 8003fc6:	bf00      	nop
 8003fc8:	40011000 	.word	0x40011000
 8003fcc:	40011400 	.word	0x40011400
 8003fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	464b      	mov	r3, r9
 8003fea:	1891      	adds	r1, r2, r2
 8003fec:	6239      	str	r1, [r7, #32]
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	1854      	adds	r4, r2, r1
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	eb43 0501 	adc.w	r5, r3, r1
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	00eb      	lsls	r3, r5, #3
 800400a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400e:	00e2      	lsls	r2, r4, #3
 8004010:	4614      	mov	r4, r2
 8004012:	461d      	mov	r5, r3
 8004014:	4643      	mov	r3, r8
 8004016:	18e3      	adds	r3, r4, r3
 8004018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800401c:	464b      	mov	r3, r9
 800401e:	eb45 0303 	adc.w	r3, r5, r3
 8004022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004042:	4629      	mov	r1, r5
 8004044:	008b      	lsls	r3, r1, #2
 8004046:	4621      	mov	r1, r4
 8004048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800404c:	4621      	mov	r1, r4
 800404e:	008a      	lsls	r2, r1, #2
 8004050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004054:	f7fc f8f4 	bl	8000240 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4b60      	ldr	r3, [pc, #384]	; (80041e0 <UART_SetConfig+0x4e4>)
 800405e:	fba3 2302 	umull	r2, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	011c      	lsls	r4, r3, #4
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	61b9      	str	r1, [r7, #24]
 8004080:	415b      	adcs	r3, r3
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004088:	4641      	mov	r1, r8
 800408a:	1851      	adds	r1, r2, r1
 800408c:	6139      	str	r1, [r7, #16]
 800408e:	4649      	mov	r1, r9
 8004090:	414b      	adcs	r3, r1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a0:	4659      	mov	r1, fp
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4651      	mov	r1, sl
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4651      	mov	r1, sl
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4642      	mov	r2, r8
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040bc:	464b      	mov	r3, r9
 80040be:	460a      	mov	r2, r1
 80040c0:	eb42 0303 	adc.w	r3, r2, r3
 80040c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040e0:	4649      	mov	r1, r9
 80040e2:	008b      	lsls	r3, r1, #2
 80040e4:	4641      	mov	r1, r8
 80040e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ea:	4641      	mov	r1, r8
 80040ec:	008a      	lsls	r2, r1, #2
 80040ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040f2:	f7fc f8a5 	bl	8000240 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <UART_SetConfig+0x4e4>)
 80040fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2164      	movs	r1, #100	; 0x64
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <UART_SetConfig+0x4e4>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800411a:	441c      	add	r4, r3
 800411c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004120:	2200      	movs	r2, #0
 8004122:	673b      	str	r3, [r7, #112]	; 0x70
 8004124:	677a      	str	r2, [r7, #116]	; 0x74
 8004126:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800412a:	4642      	mov	r2, r8
 800412c:	464b      	mov	r3, r9
 800412e:	1891      	adds	r1, r2, r2
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	415b      	adcs	r3, r3
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800413a:	4641      	mov	r1, r8
 800413c:	1851      	adds	r1, r2, r1
 800413e:	6039      	str	r1, [r7, #0]
 8004140:	4649      	mov	r1, r9
 8004142:	414b      	adcs	r3, r1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004152:	4659      	mov	r1, fp
 8004154:	00cb      	lsls	r3, r1, #3
 8004156:	4651      	mov	r1, sl
 8004158:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415c:	4651      	mov	r1, sl
 800415e:	00ca      	lsls	r2, r1, #3
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	4603      	mov	r3, r0
 8004166:	4642      	mov	r2, r8
 8004168:	189b      	adds	r3, r3, r2
 800416a:	66bb      	str	r3, [r7, #104]	; 0x68
 800416c:	464b      	mov	r3, r9
 800416e:	460a      	mov	r2, r1
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	663b      	str	r3, [r7, #96]	; 0x60
 8004180:	667a      	str	r2, [r7, #100]	; 0x64
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800418e:	4649      	mov	r1, r9
 8004190:	008b      	lsls	r3, r1, #2
 8004192:	4641      	mov	r1, r8
 8004194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004198:	4641      	mov	r1, r8
 800419a:	008a      	lsls	r2, r1, #2
 800419c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041a0:	f7fc f84e 	bl	8000240 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <UART_SetConfig+0x4e4>)
 80041aa:	fba3 1302 	umull	r1, r3, r3, r2
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2164      	movs	r1, #100	; 0x64
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	3332      	adds	r3, #50	; 0x32
 80041bc:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <UART_SetConfig+0x4e4>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	f003 020f 	and.w	r2, r3, #15
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4422      	add	r2, r4
 80041d0:	609a      	str	r2, [r3, #8]
}
 80041d2:	bf00      	nop
 80041d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041d8:	46bd      	mov	sp, r7
 80041da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041de:	bf00      	nop
 80041e0:	51eb851f 	.word	0x51eb851f

080041e4 <interface_tx_frame>:
 80041e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041e8:	b085      	sub	sp, #20
 80041ea:	4605      	mov	r5, r0
 80041ec:	461c      	mov	r4, r3
 80041ee:	6883      	ldr	r3, [r0, #8]
 80041f0:	695e      	ldr	r6, [r3, #20]
 80041f2:	b1e2      	cbz	r2, 800422e <interface_tx_frame+0x4a>
 80041f4:	9102      	str	r1, [sp, #8]
 80041f6:	fa1f f882 	uxth.w	r8, r2
 80041fa:	f8ad 800c 	strh.w	r8, [sp, #12]
 80041fe:	f04f 0900 	mov.w	r9, #0
 8004202:	f8ad 900e 	strh.w	r9, [sp, #14]
 8004206:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004208:	ab02      	add	r3, sp, #8
 800420a:	464a      	mov	r2, r9
 800420c:	2120      	movs	r1, #32
 800420e:	47b8      	blx	r7
 8004210:	f8ad 8000 	strh.w	r8, [sp]
 8004214:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004218:	68e3      	ldr	r3, [r4, #12]
 800421a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800421e:	f88d 3004 	strb.w	r3, [sp, #4]
 8004222:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004224:	466b      	mov	r3, sp
 8004226:	464a      	mov	r2, r9
 8004228:	2137      	movs	r1, #55	; 0x37
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	f013 0f1d 	tst.w	r3, #29
 8004234:	d005      	beq.n	8004242 <interface_tx_frame+0x5e>
 8004236:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004238:	4623      	mov	r3, r4
 800423a:	2200      	movs	r2, #0
 800423c:	2105      	movs	r1, #5
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db0c      	blt.n	8004262 <interface_tx_frame+0x7e>
 8004248:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800424a:	1d23      	adds	r3, r4, #4
 800424c:	2200      	movs	r2, #0
 800424e:	2110      	movs	r1, #16
 8004250:	4628      	mov	r0, r5
 8004252:	47b8      	blx	r7
 8004254:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004256:	f104 0308 	add.w	r3, r4, #8
 800425a:	2200      	movs	r2, #0
 800425c:	2151      	movs	r1, #81	; 0x51
 800425e:	4628      	mov	r0, r5
 8004260:	47b8      	blx	r7
 8004262:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8004264:	f104 030c 	add.w	r3, r4, #12
 8004268:	2200      	movs	r2, #0
 800426a:	2104      	movs	r1, #4
 800426c:	4628      	mov	r0, r5
 800426e:	47b0      	blx	r6
 8004270:	b005      	add	sp, #20
 8004272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004276 <interface_get_timestamp>:
 8004276:	b530      	push	{r4, r5, lr}
 8004278:	b083      	sub	sp, #12
 800427a:	ab02      	add	r3, sp, #8
 800427c:	2400      	movs	r4, #0
 800427e:	2500      	movs	r5, #0
 8004280:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8004284:	6882      	ldr	r2, [r0, #8]
 8004286:	6952      	ldr	r2, [r2, #20]
 8004288:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800428a:	2200      	movs	r2, #0
 800428c:	215f      	movs	r1, #95	; 0x5f
 800428e:	47a0      	blx	r4
 8004290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004294:	b003      	add	sp, #12
 8004296:	bd30      	pop	{r4, r5, pc}

08004298 <interface_rx_disable>:
 8004298:	b510      	push	{r4, lr}
 800429a:	6883      	ldr	r3, [r0, #8]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80042a0:	2300      	movs	r3, #0
 80042a2:	461a      	mov	r2, r3
 80042a4:	2103      	movs	r1, #3
 80042a6:	47a0      	blx	r4
 80042a8:	bd10      	pop	{r4, pc}
	...

080042ac <interface_rx_enable>:
 80042ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	4604      	mov	r4, r0
 80042b4:	6883      	ldr	r3, [r0, #8]
 80042b6:	695d      	ldr	r5, [r3, #20]
 80042b8:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	9303      	str	r3, [sp, #12]
 80042c0:	684a      	ldr	r2, [r1, #4]
 80042c2:	ab04      	add	r3, sp, #16
 80042c4:	f843 2d08 	str.w	r2, [r3, #-8]!
 80042c8:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80042ca:	2200      	movs	r2, #0
 80042cc:	214f      	movs	r1, #79	; 0x4f
 80042ce:	47b8      	blx	r7
 80042d0:	4607      	mov	r7, r0
 80042d2:	b118      	cbz	r0, 80042dc <interface_rx_enable+0x30>
 80042d4:	4638      	mov	r0, r7
 80042d6:	b004      	add	sp, #16
 80042d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042dc:	68a3      	ldr	r3, [r4, #8]
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	db3c      	blt.n	8004362 <interface_rx_enable+0xb6>
 80042e8:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80042ea:	ab01      	add	r3, sp, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	2157      	movs	r1, #87	; 0x57
 80042f0:	4620      	mov	r0, r4
 80042f2:	47b8      	blx	r7
 80042f4:	bba8      	cbnz	r0, 8004362 <interface_rx_enable+0xb6>
 80042f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80042fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004304:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004308:	4313      	orrs	r3, r2
 800430a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800430e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004312:	f1ba 0f00 	cmp.w	sl, #0
 8004316:	d131      	bne.n	800437c <interface_rx_enable+0xd0>
 8004318:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 800431c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004320:	9303      	str	r3, [sp, #12]
 8004322:	f04f 0a01 	mov.w	sl, #1
 8004326:	68a3      	ldr	r3, [r4, #8]
 8004328:	695f      	ldr	r7, [r3, #20]
 800432a:	f10d 0302 	add.w	r3, sp, #2
 800432e:	2200      	movs	r2, #0
 8004330:	217b      	movs	r1, #123	; 0x7b
 8004332:	4620      	mov	r0, r4
 8004334:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8004336:	47b0      	blx	r6
 8004338:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800433c:	2b01      	cmp	r3, #1
 800433e:	d04e      	beq.n	80043de <interface_rx_enable+0x132>
 8004340:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004344:	2201      	movs	r2, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800434e:	ea22 0203 	bic.w	r2, r2, r3
 8004352:	ab04      	add	r3, sp, #16
 8004354:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8004358:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800435a:	2200      	movs	r2, #0
 800435c:	216b      	movs	r1, #107	; 0x6b
 800435e:	4620      	mov	r0, r4
 8004360:	47b8      	blx	r7
 8004362:	f1ba 0f00 	cmp.w	sl, #0
 8004366:	d14a      	bne.n	80043fe <interface_rx_enable+0x152>
 8004368:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800436a:	2300      	movs	r3, #0
 800436c:	461a      	mov	r2, r3
 800436e:	211f      	movs	r1, #31
 8004370:	4620      	mov	r0, r4
 8004372:	47a8      	blx	r5
 8004374:	4607      	mov	r7, r0
 8004376:	2800      	cmp	r0, #0
 8004378:	d150      	bne.n	800441c <interface_rx_enable+0x170>
 800437a:	e7ab      	b.n	80042d4 <interface_rx_enable+0x28>
 800437c:	9a03      	ldr	r2, [sp, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	4698      	mov	r8, r3
 8004382:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8004386:	ea4f 1249 	mov.w	r2, r9, lsl #5
 800438a:	0158      	lsls	r0, r3, #5
 800438c:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 8004390:	1ac0      	subs	r0, r0, r3
 8004392:	eb61 0109 	sbc.w	r1, r1, r9
 8004396:	024b      	lsls	r3, r1, #9
 8004398:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800439c:	0242      	lsls	r2, r0, #9
 800439e:	eb12 0008 	adds.w	r0, r2, r8
 80043a2:	eb43 0109 	adc.w	r1, r3, r9
 80043a6:	018b      	lsls	r3, r1, #6
 80043a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ac:	0182      	lsls	r2, r0, #6
 80043ae:	1a12      	subs	r2, r2, r0
 80043b0:	eb63 0301 	sbc.w	r3, r3, r1
 80043b4:	4616      	mov	r6, r2
 80043b6:	461f      	mov	r7, r3
 80043b8:	4a31      	ldr	r2, [pc, #196]	; (8004480 <interface_rx_enable+0x1d4>)
 80043ba:	2300      	movs	r3, #0
 80043bc:	eb16 0008 	adds.w	r0, r6, r8
 80043c0:	eb47 0109 	adc.w	r1, r7, r9
 80043c4:	f7fb ff3c 	bl	8000240 <__aeabi_uldivmod>
 80043c8:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 80043cc:	ddab      	ble.n	8004326 <interface_rx_enable+0x7a>
 80043ce:	68a3      	ldr	r3, [r4, #8]
 80043d0:	695f      	ldr	r7, [r3, #20]
 80043d2:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 80043d6:	d0a8      	beq.n	800432a <interface_rx_enable+0x7e>
 80043d8:	f7fc fa43 	bl	8000862 <deca_usleep>
 80043dc:	e7a5      	b.n	800432a <interface_rx_enable+0x7e>
 80043de:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80043e2:	2201      	movs	r2, #1
 80043e4:	409a      	lsls	r2, r3
 80043e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	ab04      	add	r3, sp, #16
 80043ee:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80043f2:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80043f4:	2200      	movs	r2, #0
 80043f6:	216b      	movs	r1, #107	; 0x6b
 80043f8:	4620      	mov	r0, r4
 80043fa:	47b8      	blx	r7
 80043fc:	e7b1      	b.n	8004362 <interface_rx_enable+0xb6>
 80043fe:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8004400:	ab03      	add	r3, sp, #12
 8004402:	2200      	movs	r2, #0
 8004404:	2105      	movs	r1, #5
 8004406:	4620      	mov	r0, r4
 8004408:	47b0      	blx	r6
 800440a:	4607      	mov	r7, r0
 800440c:	b930      	cbnz	r0, 800441c <interface_rx_enable+0x170>
 800440e:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004410:	2300      	movs	r3, #0
 8004412:	2201      	movs	r2, #1
 8004414:	211f      	movs	r1, #31
 8004416:	4620      	mov	r0, r4
 8004418:	47a8      	blx	r5
 800441a:	4607      	mov	r7, r0
 800441c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004420:	2b00      	cmp	r3, #0
 8004422:	f6ff af57 	blt.w	80042d4 <interface_rx_enable+0x28>
 8004426:	68a3      	ldr	r3, [r4, #8]
 8004428:	695d      	ldr	r5, [r3, #20]
 800442a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800442c:	ab01      	add	r3, sp, #4
 800442e:	2200      	movs	r2, #0
 8004430:	217b      	movs	r1, #123	; 0x7b
 8004432:	4620      	mov	r0, r4
 8004434:	47b0      	blx	r6
 8004436:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800443a:	b18b      	cbz	r3, 8004460 <interface_rx_enable+0x1b4>
 800443c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004440:	2201      	movs	r2, #1
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800444a:	ea22 0203 	bic.w	r2, r2, r3
 800444e:	ab04      	add	r3, sp, #16
 8004450:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004454:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004456:	2200      	movs	r2, #0
 8004458:	216b      	movs	r1, #107	; 0x6b
 800445a:	4620      	mov	r0, r4
 800445c:	47a8      	blx	r5
 800445e:	e739      	b.n	80042d4 <interface_rx_enable+0x28>
 8004460:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004464:	2201      	movs	r2, #1
 8004466:	409a      	lsls	r2, r3
 8004468:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800446c:	431a      	orrs	r2, r3
 800446e:	ab04      	add	r3, sp, #16
 8004470:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004474:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004476:	2200      	movs	r2, #0
 8004478:	216b      	movs	r1, #107	; 0x6b
 800447a:	4620      	mov	r0, r4
 800447c:	47a8      	blx	r5
 800447e:	e729      	b.n	80042d4 <interface_rx_enable+0x28>
 8004480:	0ee09800 	.word	0x0ee09800

08004484 <interface_read_rx_frame>:
 8004484:	b510      	push	{r4, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	9100      	str	r1, [sp, #0]
 800448a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004494:	6883      	ldr	r3, [r0, #8]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800449a:	466b      	mov	r3, sp
 800449c:	2121      	movs	r1, #33	; 0x21
 800449e:	47a0      	blx	r4
 80044a0:	b002      	add	sp, #8
 80044a2:	bd10      	pop	{r4, pc}

080044a4 <dwt_probe>:
 80044a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a6:	b083      	sub	sp, #12
 80044a8:	6803      	ldr	r3, [r0, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d037      	beq.n	800451e <dwt_probe+0x7a>
 80044ae:	4a1f      	ldr	r2, [pc, #124]	; (800452c <dwt_probe+0x88>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <dwt_probe+0x88>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6842      	ldr	r2, [r0, #4]
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	6882      	ldr	r2, [r0, #8]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f88d 2003 	strb.w	r2, [sp, #3]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681c      	ldr	r4, [r3, #0]
 80044c8:	ab01      	add	r3, sp, #4
 80044ca:	2204      	movs	r2, #4
 80044cc:	f10d 0103 	add.w	r1, sp, #3
 80044d0:	2001      	movs	r0, #1
 80044d2:	47a0      	blx	r4
 80044d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044d8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80044dc:	0409      	lsls	r1, r1, #16
 80044de:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80044e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80044e6:	4319      	orrs	r1, r3
 80044e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80044ec:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80044f0:	4a0f      	ldr	r2, [pc, #60]	; (8004530 <dwt_probe+0x8c>)
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <dwt_probe+0x90>)
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d216      	bcs.n	8004526 <dwt_probe+0x82>
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <dwt_probe+0x88>)
 80044fa:	681f      	ldr	r7, [r3, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004502:	2600      	movs	r6, #0
 8004504:	4d0b      	ldr	r5, [pc, #44]	; (8004534 <dwt_probe+0x90>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	404a      	eors	r2, r1
 800450a:	685c      	ldr	r4, [r3, #4]
 800450c:	4222      	tst	r2, r4
 800450e:	bf04      	itt	eq
 8004510:	60bb      	streq	r3, [r7, #8]
 8004512:	4630      	moveq	r0, r6
 8004514:	331c      	adds	r3, #28
 8004516:	42ab      	cmp	r3, r5
 8004518:	d3f5      	bcc.n	8004506 <dwt_probe+0x62>
 800451a:	b003      	add	sp, #12
 800451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <dwt_probe+0x88>)
 8004520:	4a05      	ldr	r2, [pc, #20]	; (8004538 <dwt_probe+0x94>)
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e7c5      	b.n	80044b2 <dwt_probe+0xe>
 8004526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800452a:	e7f6      	b.n	800451a <dwt_probe+0x76>
 800452c:	20000200 	.word	0x20000200
 8004530:	08000198 	.word	0x08000198
 8004534:	080001ec 	.word	0x080001ec
 8004538:	20000204 	.word	0x20000204

0800453c <dwt_setlnapamode>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <dwt_setlnapamode+0x18>)
 8004540:	681c      	ldr	r4, [r3, #0]
 8004542:	68a3      	ldr	r3, [r4, #8]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004548:	2300      	movs	r3, #0
 800454a:	4602      	mov	r2, r0
 800454c:	2113      	movs	r1, #19
 800454e:	4620      	mov	r0, r4
 8004550:	47a8      	blx	r5
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	20000200 	.word	0x20000200

08004558 <dwt_initialise>:
 8004558:	b508      	push	{r3, lr}
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <dwt_initialise+0x14>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	6912      	ldr	r2, [r2, #16]
 8004562:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004564:	4601      	mov	r1, r0
 8004566:	4618      	mov	r0, r3
 8004568:	4790      	blx	r2
 800456a:	bd08      	pop	{r3, pc}
 800456c:	20000200 	.word	0x20000200

08004570 <dwt_configure>:
 8004570:	b508      	push	{r3, lr}
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <dwt_configure+0x14>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	6912      	ldr	r2, [r2, #16]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	4601      	mov	r1, r0
 800457e:	4618      	mov	r0, r3
 8004580:	4790      	blx	r2
 8004582:	bd08      	pop	{r3, pc}
 8004584:	20000200 	.word	0x20000200

08004588 <dwt_configuretxrf>:
 8004588:	b508      	push	{r3, lr}
 800458a:	4b04      	ldr	r3, [pc, #16]	; (800459c <dwt_configuretxrf+0x14>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	6912      	ldr	r2, [r2, #16]
 8004592:	6992      	ldr	r2, [r2, #24]
 8004594:	4601      	mov	r1, r0
 8004596:	4618      	mov	r0, r3
 8004598:	4790      	blx	r2
 800459a:	bd08      	pop	{r3, pc}
 800459c:	20000200 	.word	0x20000200

080045a0 <dwt_setrxantennadelay>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	ab02      	add	r3, sp, #8
 80045a6:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80045aa:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <dwt_setrxantennadelay+0x20>)
 80045ac:	6810      	ldr	r0, [r2, #0]
 80045ae:	6882      	ldr	r2, [r0, #8]
 80045b0:	6912      	ldr	r2, [r2, #16]
 80045b2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80045b4:	2200      	movs	r2, #0
 80045b6:	211b      	movs	r1, #27
 80045b8:	47a0      	blx	r4
 80045ba:	b002      	add	sp, #8
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	bf00      	nop
 80045c0:	20000200 	.word	0x20000200

080045c4 <dwt_settxantennadelay>:
 80045c4:	b510      	push	{r4, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	ab02      	add	r3, sp, #8
 80045ca:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80045ce:	4a05      	ldr	r2, [pc, #20]	; (80045e4 <dwt_settxantennadelay+0x20>)
 80045d0:	6810      	ldr	r0, [r2, #0]
 80045d2:	6882      	ldr	r2, [r0, #8]
 80045d4:	6912      	ldr	r2, [r2, #16]
 80045d6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80045d8:	2200      	movs	r2, #0
 80045da:	211d      	movs	r1, #29
 80045dc:	47a0      	blx	r4
 80045de:	b002      	add	sp, #8
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	bf00      	nop
 80045e4:	20000200 	.word	0x20000200

080045e8 <dwt_writetxdata>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <dwt_writetxdata+0x18>)
 80045ec:	681c      	ldr	r4, [r3, #0]
 80045ee:	68a3      	ldr	r3, [r4, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	685d      	ldr	r5, [r3, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	460a      	mov	r2, r1
 80045f8:	4601      	mov	r1, r0
 80045fa:	4620      	mov	r0, r4
 80045fc:	47a8      	blx	r5
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	20000200 	.word	0x20000200

08004604 <dwt_writetxfctrl>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <dwt_writetxfctrl+0x18>)
 8004608:	681c      	ldr	r4, [r3, #0]
 800460a:	68a3      	ldr	r3, [r4, #8]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	689d      	ldr	r5, [r3, #8]
 8004610:	4613      	mov	r3, r2
 8004612:	460a      	mov	r2, r1
 8004614:	4601      	mov	r1, r0
 8004616:	4620      	mov	r0, r4
 8004618:	47a8      	blx	r5
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	20000200 	.word	0x20000200

08004620 <dwt_starttx>:
 8004620:	b510      	push	{r4, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	ab02      	add	r3, sp, #8
 8004626:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <dwt_starttx+0x20>)
 800462c:	6810      	ldr	r0, [r2, #0]
 800462e:	6882      	ldr	r2, [r0, #8]
 8004630:	6912      	ldr	r2, [r2, #16]
 8004632:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004634:	2200      	movs	r2, #0
 8004636:	2104      	movs	r1, #4
 8004638:	47a0      	blx	r4
 800463a:	b002      	add	sp, #8
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	20000200 	.word	0x20000200

08004644 <dwt_setdelayedtrxtime>:
 8004644:	b510      	push	{r4, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	ab02      	add	r3, sp, #8
 800464a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <dwt_setdelayedtrxtime+0x20>)
 8004650:	6810      	ldr	r0, [r2, #0]
 8004652:	6882      	ldr	r2, [r0, #8]
 8004654:	6912      	ldr	r2, [r2, #16]
 8004656:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004658:	2200      	movs	r2, #0
 800465a:	2105      	movs	r1, #5
 800465c:	47a0      	blx	r4
 800465e:	b002      	add	sp, #8
 8004660:	bd10      	pop	{r4, pc}
 8004662:	bf00      	nop
 8004664:	20000200 	.word	0x20000200

08004668 <dwt_readrxtimestamp>:
 8004668:	b508      	push	{r3, lr}
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <dwt_readrxtimestamp+0x14>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	6912      	ldr	r2, [r2, #16]
 8004672:	6952      	ldr	r2, [r2, #20]
 8004674:	4601      	mov	r1, r0
 8004676:	4618      	mov	r0, r3
 8004678:	4790      	blx	r2
 800467a:	bd08      	pop	{r3, pc}
 800467c:	20000200 	.word	0x20000200

08004680 <dwt_forcetrxoff>:
 8004680:	b510      	push	{r4, lr}
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <dwt_forcetrxoff+0x18>)
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	6883      	ldr	r3, [r0, #8]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800468c:	2300      	movs	r3, #0
 800468e:	461a      	mov	r2, r3
 8004690:	2103      	movs	r1, #3
 8004692:	47a0      	blx	r4
 8004694:	bd10      	pop	{r4, pc}
 8004696:	bf00      	nop
 8004698:	20000200 	.word	0x20000200

0800469c <dwt_rxenable>:
 800469c:	b508      	push	{r3, lr}
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <dwt_rxenable+0x14>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	6912      	ldr	r2, [r2, #16]
 80046a6:	6a12      	ldr	r2, [r2, #32]
 80046a8:	4601      	mov	r1, r0
 80046aa:	4618      	mov	r0, r3
 80046ac:	4790      	blx	r2
 80046ae:	bd08      	pop	{r3, pc}
 80046b0:	20000200 	.word	0x20000200

080046b4 <dwt_checkidlerc>:
 80046b4:	b510      	push	{r4, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	2200      	movs	r2, #0
 80046ba:	ab02      	add	r3, sp, #8
 80046bc:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80046c0:	4905      	ldr	r1, [pc, #20]	; (80046d8 <dwt_checkidlerc+0x24>)
 80046c2:	6808      	ldr	r0, [r1, #0]
 80046c4:	6881      	ldr	r1, [r0, #8]
 80046c6:	6909      	ldr	r1, [r1, #16]
 80046c8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80046ca:	2158      	movs	r1, #88	; 0x58
 80046cc:	47a0      	blx	r4
 80046ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80046d2:	b002      	add	sp, #8
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	bf00      	nop
 80046d8:	20000200 	.word	0x20000200

080046dc <dwt_generatecrc8>:
 80046dc:	2900      	cmp	r1, #0
 80046de:	dd0d      	ble.n	80046fc <dwt_generatecrc8+0x20>
 80046e0:	b410      	push	{r4}
 80046e2:	1e43      	subs	r3, r0, #1
 80046e4:	4419      	add	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4c05      	ldr	r4, [pc, #20]	; (8004700 <dwt_generatecrc8+0x24>)
 80046ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80046ee:	4050      	eors	r0, r2
 80046f0:	5c20      	ldrb	r0, [r4, r0]
 80046f2:	428b      	cmp	r3, r1
 80046f4:	d1f9      	bne.n	80046ea <dwt_generatecrc8+0xe>
 80046f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	4610      	mov	r0, r2
 80046fe:	4770      	bx	lr
 8004700:	08011de8 	.word	0x08011de8

08004704 <dwt_readrxdata>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <dwt_readrxdata+0x18>)
 8004708:	681c      	ldr	r4, [r3, #0]
 800470a:	68a3      	ldr	r3, [r4, #8]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	68dd      	ldr	r5, [r3, #12]
 8004710:	4613      	mov	r3, r2
 8004712:	460a      	mov	r2, r1
 8004714:	4601      	mov	r1, r0
 8004716:	4620      	mov	r0, r4
 8004718:	47a8      	blx	r5
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	20000200 	.word	0x20000200

08004720 <dwt_setleds>:
 8004720:	b510      	push	{r4, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	ab02      	add	r3, sp, #8
 8004726:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800472a:	4a05      	ldr	r2, [pc, #20]	; (8004740 <dwt_setleds+0x20>)
 800472c:	6810      	ldr	r0, [r2, #0]
 800472e:	6882      	ldr	r2, [r0, #8]
 8004730:	6912      	ldr	r2, [r2, #16]
 8004732:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004734:	2200      	movs	r2, #0
 8004736:	2155      	movs	r1, #85	; 0x55
 8004738:	47a0      	blx	r4
 800473a:	b002      	add	sp, #8
 800473c:	bd10      	pop	{r4, pc}
 800473e:	bf00      	nop
 8004740:	20000200 	.word	0x20000200

08004744 <dwt_writesysstatuslo>:
 8004744:	b510      	push	{r4, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	ab02      	add	r3, sp, #8
 800474a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <dwt_writesysstatuslo+0x20>)
 8004750:	6810      	ldr	r0, [r2, #0]
 8004752:	6882      	ldr	r2, [r0, #8]
 8004754:	6912      	ldr	r2, [r2, #16]
 8004756:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004758:	2200      	movs	r2, #0
 800475a:	2174      	movs	r1, #116	; 0x74
 800475c:	47a0      	blx	r4
 800475e:	b002      	add	sp, #8
 8004760:	bd10      	pop	{r4, pc}
 8004762:	bf00      	nop
 8004764:	20000200 	.word	0x20000200

08004768 <dwt_readsysstatuslo>:
 8004768:	b510      	push	{r4, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	2200      	movs	r2, #0
 800476e:	ab02      	add	r3, sp, #8
 8004770:	f843 2d04 	str.w	r2, [r3, #-4]!
 8004774:	4904      	ldr	r1, [pc, #16]	; (8004788 <dwt_readsysstatuslo+0x20>)
 8004776:	6808      	ldr	r0, [r1, #0]
 8004778:	6881      	ldr	r1, [r0, #8]
 800477a:	6909      	ldr	r1, [r1, #16]
 800477c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800477e:	2176      	movs	r1, #118	; 0x76
 8004780:	47a0      	blx	r4
 8004782:	9801      	ldr	r0, [sp, #4]
 8004784:	b002      	add	sp, #8
 8004786:	bd10      	pop	{r4, pc}
 8004788:	20000200 	.word	0x20000200

0800478c <dwt_readsysstatushi>:
 800478c:	b510      	push	{r4, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	2200      	movs	r2, #0
 8004792:	ab02      	add	r3, sp, #8
 8004794:	f843 2d04 	str.w	r2, [r3, #-4]!
 8004798:	4904      	ldr	r1, [pc, #16]	; (80047ac <dwt_readsysstatushi+0x20>)
 800479a:	6808      	ldr	r0, [r1, #0]
 800479c:	6881      	ldr	r1, [r0, #8]
 800479e:	6909      	ldr	r1, [r1, #16]
 80047a0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80047a2:	2177      	movs	r1, #119	; 0x77
 80047a4:	47a0      	blx	r4
 80047a6:	9801      	ldr	r0, [sp, #4]
 80047a8:	b002      	add	sp, #8
 80047aa:	bd10      	pop	{r4, pc}
 80047ac:	20000200 	.word	0x20000200

080047b0 <dwt_getframelength>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	2200      	movs	r2, #0
 80047b6:	ab02      	add	r3, sp, #8
 80047b8:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80047bc:	4905      	ldr	r1, [pc, #20]	; (80047d4 <dwt_getframelength+0x24>)
 80047be:	6808      	ldr	r0, [r1, #0]
 80047c0:	6881      	ldr	r1, [r0, #8]
 80047c2:	6909      	ldr	r1, [r1, #16]
 80047c4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80047c6:	217a      	movs	r1, #122	; 0x7a
 80047c8:	47a0      	blx	r4
 80047ca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80047ce:	b002      	add	sp, #8
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	bf00      	nop
 80047d4:	20000200 	.word	0x20000200

080047d8 <dwt_dbg_fn>:
 80047d8:	2998      	cmp	r1, #152	; 0x98
 80047da:	4802      	ldr	r0, [pc, #8]	; (80047e4 <dwt_dbg_fn+0xc>)
 80047dc:	bf18      	it	ne
 80047de:	2000      	movne	r0, #0
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	08011fe0 	.word	0x08011fe0

080047e8 <_deinit>:
 80047e8:	4770      	bx	lr

080047ea <dwt_xfer3xxx>:
 80047ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	4605      	mov	r5, r0
 80047f2:	460e      	mov	r6, r1
 80047f4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80047f8:	1990      	adds	r0, r2, r6
 80047fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80047fe:	4432      	add	r2, r6
 8004800:	f3c2 4204 	ubfx	r2, r2, #16, #5
 8004804:	0084      	lsls	r4, r0, #2
 8004806:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 800480a:	ea41 0204 	orr.w	r2, r1, r4
 800480e:	0a12      	lsrs	r2, r2, #8
 8004810:	f88d 200c 	strb.w	r2, [sp, #12]
 8004814:	f001 0703 	and.w	r7, r1, #3
 8004818:	433c      	orrs	r4, r7
 800481a:	f88d 400d 	strb.w	r4, [sp, #13]
 800481e:	461f      	mov	r7, r3
 8004820:	b973      	cbnz	r3, 8004840 <dwt_xfer3xxx+0x56>
 8004822:	2900      	cmp	r1, #0
 8004824:	d05c      	beq.n	80048e0 <dwt_xfer3xxx+0xf6>
 8004826:	0073      	lsls	r3, r6, #1
 8004828:	f063 037e 	orn	r3, r3, #126	; 0x7e
 800482c:	f88d 300c 	strb.w	r3, [sp, #12]
 8004830:	2401      	movs	r4, #1
 8004832:	2900      	cmp	r1, #0
 8004834:	d02f      	beq.n	8004896 <dwt_xfer3xxx+0xac>
 8004836:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800483a:	2903      	cmp	r1, #3
 800483c:	d90a      	bls.n	8004854 <dwt_xfer3xxx+0x6a>
 800483e:	e7fe      	b.n	800483e <dwt_xfer3xxx+0x54>
 8004840:	2800      	cmp	r0, #0
 8004842:	d14f      	bne.n	80048e4 <dwt_xfer3xxx+0xfa>
 8004844:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004848:	d003      	beq.n	8004852 <dwt_xfer3xxx+0x68>
 800484a:	2900      	cmp	r1, #0
 800484c:	d14a      	bne.n	80048e4 <dwt_xfer3xxx+0xfa>
 800484e:	2401      	movs	r4, #1
 8004850:	e021      	b.n	8004896 <dwt_xfer3xxx+0xac>
 8004852:	2401      	movs	r4, #1
 8004854:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004856:	7d9b      	ldrb	r3, [r3, #22]
 8004858:	b94b      	cbnz	r3, 800486e <dwt_xfer3xxx+0x84>
 800485a:	682b      	ldr	r3, [r5, #0]
 800485c:	685d      	ldr	r5, [r3, #4]
 800485e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004860:	463a      	mov	r2, r7
 8004862:	a903      	add	r1, sp, #12
 8004864:	4620      	mov	r0, r4
 8004866:	47a8      	blx	r5
 8004868:	b004      	add	sp, #16
 800486a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800486e:	2200      	movs	r2, #0
 8004870:	4621      	mov	r1, r4
 8004872:	a803      	add	r0, sp, #12
 8004874:	f7ff ff32 	bl	80046dc <dwt_generatecrc8>
 8004878:	4602      	mov	r2, r0
 800487a:	4639      	mov	r1, r7
 800487c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800487e:	f7ff ff2d 	bl	80046dc <dwt_generatecrc8>
 8004882:	682b      	ldr	r3, [r5, #0]
 8004884:	9000      	str	r0, [sp, #0]
 8004886:	689d      	ldr	r5, [r3, #8]
 8004888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800488a:	463a      	mov	r2, r7
 800488c:	a903      	add	r1, sp, #12
 800488e:	4620      	mov	r0, r4
 8004890:	47a8      	blx	r5
 8004892:	e7e9      	b.n	8004868 <dwt_xfer3xxx+0x7e>
 8004894:	2401      	movs	r4, #1
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	f8d3 8000 	ldr.w	r8, [r3]
 800489c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489e:	463a      	mov	r2, r7
 80048a0:	a903      	add	r1, sp, #12
 80048a2:	4620      	mov	r0, r4
 80048a4:	47c0      	blx	r8
 80048a6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80048a8:	7d9b      	ldrb	r3, [r3, #22]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d1dc      	bne.n	8004868 <dwt_xfer3xxx+0x7e>
 80048ae:	2e18      	cmp	r6, #24
 80048b0:	d0da      	beq.n	8004868 <dwt_xfer3xxx+0x7e>
 80048b2:	2200      	movs	r2, #0
 80048b4:	4621      	mov	r1, r4
 80048b6:	a803      	add	r0, sp, #12
 80048b8:	f7ff ff10 	bl	80046dc <dwt_generatecrc8>
 80048bc:	4602      	mov	r2, r0
 80048be:	4639      	mov	r1, r7
 80048c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048c2:	f7ff ff0b 	bl	80046dc <dwt_generatecrc8>
 80048c6:	4604      	mov	r4, r0
 80048c8:	2200      	movs	r2, #0
 80048ca:	2118      	movs	r1, #24
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 f841 	bl	8004954 <dwt_read8bitoffsetreg>
 80048d2:	4284      	cmp	r4, r0
 80048d4:	d0c8      	beq.n	8004868 <dwt_xfer3xxx+0x7e>
 80048d6:	68eb      	ldr	r3, [r5, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0c5      	beq.n	8004868 <dwt_xfer3xxx+0x7e>
 80048dc:	4798      	blx	r3
 80048de:	e7c3      	b.n	8004868 <dwt_xfer3xxx+0x7e>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d0d7      	beq.n	8004894 <dwt_xfer3xxx+0xaa>
 80048e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e8:	f88d 200c 	strb.w	r2, [sp, #12]
 80048ec:	2402      	movs	r4, #2
 80048ee:	e7a0      	b.n	8004832 <dwt_xfer3xxx+0x48>

080048f0 <dwt_readfromdevice>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	2400      	movs	r4, #0
 80048f6:	9401      	str	r4, [sp, #4]
 80048f8:	9c04      	ldr	r4, [sp, #16]
 80048fa:	9400      	str	r4, [sp, #0]
 80048fc:	f7ff ff75 	bl	80047ea <dwt_xfer3xxx>
 8004900:	b002      	add	sp, #8
 8004902:	bd10      	pop	{r4, pc}

08004904 <dwt_read32bitoffsetreg>:
 8004904:	b500      	push	{lr}
 8004906:	b085      	sub	sp, #20
 8004908:	ab03      	add	r3, sp, #12
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2304      	movs	r3, #4
 800490e:	b292      	uxth	r2, r2
 8004910:	f7ff ffee 	bl	80048f0 <dwt_readfromdevice>
 8004914:	f10d 030f 	add.w	r3, sp, #15
 8004918:	f10d 010b 	add.w	r1, sp, #11
 800491c:	2000      	movs	r0, #0
 800491e:	f813 2901 	ldrb.w	r2, [r3], #-1
 8004922:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8004926:	428b      	cmp	r3, r1
 8004928:	d1f9      	bne.n	800491e <dwt_read32bitoffsetreg+0x1a>
 800492a:	b005      	add	sp, #20
 800492c:	f85d fb04 	ldr.w	pc, [sp], #4

08004930 <dwt_read16bitoffsetreg>:
 8004930:	b500      	push	{lr}
 8004932:	b085      	sub	sp, #20
 8004934:	ab03      	add	r3, sp, #12
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2302      	movs	r3, #2
 800493a:	b292      	uxth	r2, r2
 800493c:	f7ff ffd8 	bl	80048f0 <dwt_readfromdevice>
 8004940:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004944:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004948:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800494c:	b280      	uxth	r0, r0
 800494e:	b005      	add	sp, #20
 8004950:	f85d fb04 	ldr.w	pc, [sp], #4

08004954 <dwt_read8bitoffsetreg>:
 8004954:	b500      	push	{lr}
 8004956:	b085      	sub	sp, #20
 8004958:	f10d 030f 	add.w	r3, sp, #15
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	b292      	uxth	r2, r2
 8004962:	f7ff ffc5 	bl	80048f0 <dwt_readfromdevice>
 8004966:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800496a:	b005      	add	sp, #20
 800496c:	f85d fb04 	ldr.w	pc, [sp], #4

08004970 <ull_readdiagnostics>:
 8004970:	b530      	push	{r4, r5, lr}
 8004972:	b0bd      	sub	sp, #244	; 0xf4
 8004974:	4605      	mov	r5, r0
 8004976:	460c      	mov	r4, r1
 8004978:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800497a:	7bda      	ldrb	r2, [r3, #15]
 800497c:	2a01      	cmp	r2, #1
 800497e:	d01c      	beq.n	80049ba <ull_readdiagnostics+0x4a>
 8004980:	2a03      	cmp	r2, #3
 8004982:	f040 81d4 	bne.w	8004d2e <ull_readdiagnostics+0x3be>
 8004986:	7e1b      	ldrb	r3, [r3, #24]
 8004988:	f013 0f08 	tst.w	r3, #8
 800498c:	d10c      	bne.n	80049a8 <ull_readdiagnostics+0x38>
 800498e:	f013 0f04 	tst.w	r3, #4
 8004992:	ab02      	add	r3, sp, #8
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	bf14      	ite	ne
 8004998:	2338      	movne	r3, #56	; 0x38
 800499a:	2320      	moveq	r3, #32
 800499c:	2200      	movs	r2, #0
 800499e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80049a2:	f7ff ffa5 	bl	80048f0 <dwt_readfromdevice>
 80049a6:	e019      	b.n	80049dc <ull_readdiagnostics+0x6c>
 80049a8:	ab02      	add	r3, sp, #8
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	23e8      	movs	r3, #232	; 0xe8
 80049ae:	2200      	movs	r2, #0
 80049b0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80049b4:	f7ff ff9c 	bl	80048f0 <dwt_readfromdevice>
 80049b8:	e010      	b.n	80049dc <ull_readdiagnostics+0x6c>
 80049ba:	7e1b      	ldrb	r3, [r3, #24]
 80049bc:	f013 0f08 	tst.w	r3, #8
 80049c0:	f040 81ac 	bne.w	8004d1c <ull_readdiagnostics+0x3ac>
 80049c4:	f013 0f04 	tst.w	r3, #4
 80049c8:	ab02      	add	r3, sp, #8
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	bf14      	ite	ne
 80049ce:	2338      	movne	r3, #56	; 0x38
 80049d0:	2320      	moveq	r3, #32
 80049d2:	2200      	movs	r2, #0
 80049d4:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80049d8:	f7ff ff8a 	bl	80048f0 <dwt_readfromdevice>
 80049dc:	f10d 0217 	add.w	r2, sp, #23
 80049e0:	f104 031a 	add.w	r3, r4, #26
 80049e4:	f104 0020 	add.w	r0, r4, #32
 80049e8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80049ec:	f803 1b01 	strb.w	r1, [r3], #1
 80049f0:	4283      	cmp	r3, r0
 80049f2:	d1f9      	bne.n	80049e8 <ull_readdiagnostics+0x78>
 80049f4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80049f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80049fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a04:	8463      	strh	r3, [r4, #34]	; 0x22
 8004a06:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8004a0a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004a0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004a16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004a1a:	bf1c      	itt	ne
 8004a1c:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8004a20:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8004a24:	8423      	strh	r3, [r4, #32]
 8004a26:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8004a2a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8004a2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a36:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004a38:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004a3a:	7e1b      	ldrb	r3, [r3, #24]
 8004a3c:	f013 0f02 	tst.w	r3, #2
 8004a40:	f040 816a 	bne.w	8004d18 <ull_readdiagnostics+0x3a8>
 8004a44:	aa0a      	add	r2, sp, #40	; 0x28
 8004a46:	1e63      	subs	r3, r4, #1
 8004a48:	1d20      	adds	r0, r4, #4
 8004a4a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004a4e:	f803 1f01 	strb.w	r1, [r3, #1]!
 8004a52:	79d1      	ldrb	r1, [r2, #7]
 8004a54:	7219      	strb	r1, [r3, #8]
 8004a56:	7bd1      	ldrb	r1, [r2, #15]
 8004a58:	7459      	strb	r1, [r3, #17]
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	d1f5      	bne.n	8004a4a <ull_readdiagnostics+0xda>
 8004a5e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8004a62:	7163      	strb	r3, [r4, #5]
 8004a64:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8004a68:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8004a6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a70:	80e3      	strh	r3, [r4, #6]
 8004a72:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004a76:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004a7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004a7e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004a82:	f8a4 300d 	strh.w	r3, [r4, #13]
 8004a86:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8004a8a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004a8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a92:	f8a4 300f 	strh.w	r3, [r4, #15]
 8004a96:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8004a9a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8004a9e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004aa2:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004aa6:	82e3      	strh	r3, [r4, #22]
 8004aa8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8004aac:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8004ab0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ab4:	8323      	strh	r3, [r4, #24]
 8004ab6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004ab8:	7e1b      	ldrb	r3, [r3, #24]
 8004aba:	f013 0f04 	tst.w	r3, #4
 8004abe:	f040 812b 	bne.w	8004d18 <ull_readdiagnostics+0x3a8>
 8004ac2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8004ac6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ad0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8004ada:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ade:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004ae2:	6263      	str	r3, [r4, #36]	; 0x24
 8004ae4:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8004ae8:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004af2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8004afc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b06:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8004b0a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b14:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8004b1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b22:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b28:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8004b2c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b36:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8004b40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b48:	6323      	str	r3, [r4, #48]	; 0x30
 8004b4a:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8004b4e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b58:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8004b62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b66:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b6a:	6363      	str	r3, [r4, #52]	; 0x34
 8004b6c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8004b70:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b7a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8004b84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b8e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8004b92:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8004b96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b9a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004b9c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8004ba0:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004baa:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8004bb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bb8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004bbc:	6423      	str	r3, [r4, #64]	; 0x40
 8004bbe:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8004bc2:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8004bc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bca:	6463      	str	r3, [r4, #68]	; 0x44
 8004bcc:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8004bd0:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004bda:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8004be4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004be8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004bec:	64a3      	str	r3, [r4, #72]	; 0x48
 8004bee:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8004bf2:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8004bf6:	041b      	lsls	r3, r3, #16
 8004bf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004bfc:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8004c06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c0e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004c10:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8004c14:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c1e:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8004c28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c30:	6523      	str	r3, [r4, #80]	; 0x50
 8004c32:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8004c36:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8004c3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004c42:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8004c46:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8004c4a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8004c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c56:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004c5a:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8004c5e:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c68:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8004c72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c7c:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8004c80:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8004c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c88:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004c8a:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8004c8e:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c98:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8004ca2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ca6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004caa:	6623      	str	r3, [r4, #96]	; 0x60
 8004cac:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8004cb0:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004cba:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8004cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ccc:	6663      	str	r3, [r4, #100]	; 0x64
 8004cce:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8004cd2:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004cdc:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8004ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004cee:	66a3      	str	r3, [r4, #104]	; 0x68
 8004cf0:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8004cf4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8004cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d00:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8004d04:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8004d08:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8004d0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d14:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8004d18:	b03d      	add	sp, #244	; 0xf4
 8004d1a:	bd30      	pop	{r4, r5, pc}
 8004d1c:	ab02      	add	r3, sp, #8
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	23e8      	movs	r3, #232	; 0xe8
 8004d22:	2200      	movs	r2, #0
 8004d24:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8004d28:	f7ff fde2 	bl	80048f0 <dwt_readfromdevice>
 8004d2c:	e656      	b.n	80049dc <ull_readdiagnostics+0x6c>
 8004d2e:	7e1b      	ldrb	r3, [r3, #24]
 8004d30:	f013 0f01 	tst.w	r3, #1
 8004d34:	f000 819f 	beq.w	8005076 <ull_readdiagnostics+0x706>
 8004d38:	ab02      	add	r3, sp, #8
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	236c      	movs	r3, #108	; 0x6c
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8004d44:	f7ff fdd4 	bl	80048f0 <dwt_readfromdevice>
 8004d48:	ab1d      	add	r3, sp, #116	; 0x74
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	236c      	movs	r3, #108	; 0x6c
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8004d54:	4628      	mov	r0, r5
 8004d56:	f7ff fdcb 	bl	80048f0 <dwt_readfromdevice>
 8004d5a:	aa02      	add	r2, sp, #8
 8004d5c:	1e63      	subs	r3, r4, #1
 8004d5e:	1d20      	adds	r0, r4, #4
 8004d60:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004d64:	f803 1f01 	strb.w	r1, [r3, #1]!
 8004d68:	79d1      	ldrb	r1, [r2, #7]
 8004d6a:	7219      	strb	r1, [r3, #8]
 8004d6c:	7bd1      	ldrb	r1, [r2, #15]
 8004d6e:	7459      	strb	r1, [r3, #17]
 8004d70:	7dd1      	ldrb	r1, [r2, #23]
 8004d72:	7699      	strb	r1, [r3, #26]
 8004d74:	4283      	cmp	r3, r0
 8004d76:	d1f3      	bne.n	8004d60 <ull_readdiagnostics+0x3f0>
 8004d78:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8004d7c:	77e3      	strb	r3, [r4, #31]
 8004d7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004d82:	7163      	strb	r3, [r4, #5]
 8004d84:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004d88:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d90:	80e3      	strh	r3, [r4, #6]
 8004d92:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004d96:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8004d9a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8004d9e:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8004da2:	f8a4 200d 	strh.w	r2, [r4, #13]
 8004da6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004daa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004dae:	f8a4 200f 	strh.w	r2, [r4, #15]
 8004db2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8004db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dba:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004dbe:	82e3      	strh	r3, [r4, #22]
 8004dc0:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8004dc4:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8004dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dcc:	8323      	strh	r3, [r4, #24]
 8004dce:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8004dd2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8004dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dda:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004dde:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004de2:	bf1c      	itt	ne
 8004de4:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8004de8:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8004dec:	8423      	strh	r3, [r4, #32]
 8004dee:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8004df2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004df6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dfe:	8463      	strh	r3, [r4, #34]	; 0x22
 8004e00:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8004e04:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e0e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8004e18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e1c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004e20:	6263      	str	r3, [r4, #36]	; 0x24
 8004e22:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004e24:	7e1b      	ldrb	r3, [r3, #24]
 8004e26:	f013 0f01 	tst.w	r3, #1
 8004e2a:	f43f af75 	beq.w	8004d18 <ull_readdiagnostics+0x3a8>
 8004e2e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8004e32:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8004e46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e50:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004e54:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e5e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8004e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e6c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e72:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8004e76:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e80:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8004e8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e8e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e92:	6323      	str	r3, [r4, #48]	; 0x30
 8004e94:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8004e98:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ea2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8004eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004eb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8004eb6:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8004eba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ec4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8004ece:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ed2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ed6:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ed8:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8004edc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8004ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ee4:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004ee6:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8004eea:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004ef8:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8004efc:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f06:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8004f10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f14:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f18:	6423      	str	r3, [r4, #64]	; 0x40
 8004f1a:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8004f1e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8004f22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f26:	6463      	str	r3, [r4, #68]	; 0x44
 8004f28:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8004f2c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f36:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8004f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f48:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f4a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8004f4e:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f58:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8004f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f66:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f6a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f6c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8004f70:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f7a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8004f84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8004f8e:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8004f92:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8004f96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f9a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f9e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8004fa2:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8004fa6:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8004faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb2:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004fb6:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8004fba:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004fc4:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8004fce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fd2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004fd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004fd8:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8004fdc:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8004fe0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fe4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004fe6:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8004fea:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ff4:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8004ffe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005002:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005006:	6623      	str	r3, [r4, #96]	; 0x60
 8005008:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800500c:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005016:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800501a:	4313      	orrs	r3, r2
 800501c:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8005020:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005024:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005028:	6663      	str	r3, [r4, #100]	; 0x64
 800502a:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800502e:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005038:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800503c:	4313      	orrs	r3, r2
 800503e:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005042:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005046:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800504a:	66a3      	str	r3, [r4, #104]	; 0x68
 800504c:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005050:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8005054:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005058:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800505c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005060:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005064:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005074:	e650      	b.n	8004d18 <ull_readdiagnostics+0x3a8>
 8005076:	ab02      	add	r3, sp, #8
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	2328      	movs	r3, #40	; 0x28
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005082:	f7ff fc35 	bl	80048f0 <dwt_readfromdevice>
 8005086:	e668      	b.n	8004d5a <ull_readdiagnostics+0x3ea>

08005088 <ull_readrxtimestamp>:
 8005088:	b500      	push	{lr}
 800508a:	b083      	sub	sp, #12
 800508c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800508e:	7bdb      	ldrb	r3, [r3, #15]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d00b      	beq.n	80050ac <ull_readrxtimestamp+0x24>
 8005094:	2b03      	cmp	r3, #3
 8005096:	d110      	bne.n	80050ba <ull_readrxtimestamp+0x32>
 8005098:	9100      	str	r1, [sp, #0]
 800509a:	2305      	movs	r3, #5
 800509c:	2204      	movs	r2, #4
 800509e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80050a2:	f7ff fc25 	bl	80048f0 <dwt_readfromdevice>
 80050a6:	b003      	add	sp, #12
 80050a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80050ac:	9100      	str	r1, [sp, #0]
 80050ae:	2305      	movs	r3, #5
 80050b0:	2200      	movs	r2, #0
 80050b2:	4905      	ldr	r1, [pc, #20]	; (80050c8 <ull_readrxtimestamp+0x40>)
 80050b4:	f7ff fc1c 	bl	80048f0 <dwt_readfromdevice>
 80050b8:	e7f5      	b.n	80050a6 <ull_readrxtimestamp+0x1e>
 80050ba:	9100      	str	r1, [sp, #0]
 80050bc:	2305      	movs	r3, #5
 80050be:	2200      	movs	r2, #0
 80050c0:	2164      	movs	r1, #100	; 0x64
 80050c2:	f7ff fc15 	bl	80048f0 <dwt_readfromdevice>
 80050c6:	e7ee      	b.n	80050a6 <ull_readrxtimestamp+0x1e>
 80050c8:	00180004 	.word	0x00180004

080050cc <dwt_writetodevice>:
 80050cc:	b510      	push	{r4, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80050d4:	9401      	str	r4, [sp, #4]
 80050d6:	9c04      	ldr	r4, [sp, #16]
 80050d8:	9400      	str	r4, [sp, #0]
 80050da:	f7ff fb86 	bl	80047ea <dwt_xfer3xxx>
 80050de:	b002      	add	sp, #8
 80050e0:	bd10      	pop	{r4, pc}

080050e2 <dwt_write8bitoffsetreg>:
 80050e2:	b510      	push	{r4, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	ac04      	add	r4, sp, #16
 80050e8:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80050ec:	9400      	str	r4, [sp, #0]
 80050ee:	2301      	movs	r3, #1
 80050f0:	b292      	uxth	r2, r2
 80050f2:	f7ff ffeb 	bl	80050cc <dwt_writetodevice>
 80050f6:	b004      	add	sp, #16
 80050f8:	bd10      	pop	{r4, pc}
	...

080050fc <ull_getframelength>:
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4604      	mov	r4, r0
 8005100:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005102:	7bdb      	ldrb	r3, [r3, #15]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d013      	beq.n	8005130 <ull_getframelength+0x34>
 8005108:	2b03      	cmp	r3, #3
 800510a:	d11d      	bne.n	8005148 <ull_getframelength+0x4c>
 800510c:	23f0      	movs	r3, #240	; 0xf0
 800510e:	2200      	movs	r2, #0
 8005110:	4912      	ldr	r1, [pc, #72]	; (800515c <ull_getframelength+0x60>)
 8005112:	f7ff ffe6 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005116:	2200      	movs	r2, #0
 8005118:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800511c:	4620      	mov	r0, r4
 800511e:	f7ff fc07 	bl	8004930 <dwt_read16bitoffsetreg>
 8005122:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005124:	7b1a      	ldrb	r2, [r3, #12]
 8005126:	b1a2      	cbz	r2, 8005152 <ull_getframelength+0x56>
 8005128:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800512c:	8458      	strh	r0, [r3, #34]	; 0x22
 800512e:	bd10      	pop	{r4, pc}
 8005130:	230f      	movs	r3, #15
 8005132:	2200      	movs	r2, #0
 8005134:	4909      	ldr	r1, [pc, #36]	; (800515c <ull_getframelength+0x60>)
 8005136:	f7ff ffd4 	bl	80050e2 <dwt_write8bitoffsetreg>
 800513a:	2200      	movs	r2, #0
 800513c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff fbf5 	bl	8004930 <dwt_read16bitoffsetreg>
 8005146:	e7ec      	b.n	8005122 <ull_getframelength+0x26>
 8005148:	2200      	movs	r2, #0
 800514a:	214c      	movs	r1, #76	; 0x4c
 800514c:	f7ff fbf0 	bl	8004930 <dwt_read16bitoffsetreg>
 8005150:	e7e7      	b.n	8005122 <ull_getframelength+0x26>
 8005152:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005156:	8458      	strh	r0, [r3, #34]	; 0x22
 8005158:	e7e9      	b.n	800512e <ull_getframelength+0x32>
 800515a:	bf00      	nop
 800515c:	00010024 	.word	0x00010024

08005160 <ull_configeventcounters>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4605      	mov	r5, r0
 8005164:	460c      	mov	r4, r1
 8005166:	2302      	movs	r3, #2
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800516e:	f7ff ffb8 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005172:	b904      	cbnz	r4, 8005176 <ull_configeventcounters+0x16>
 8005174:	bd38      	pop	{r3, r4, r5, pc}
 8005176:	2301      	movs	r3, #1
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800517e:	4628      	mov	r0, r5
 8005180:	f7ff ffaf 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005184:	e7f6      	b.n	8005174 <ull_configeventcounters+0x14>

08005186 <dwt_write16bitoffsetreg>:
 8005186:	b500      	push	{lr}
 8005188:	b085      	sub	sp, #20
 800518a:	f88d 300c 	strb.w	r3, [sp, #12]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	f88d 300d 	strb.w	r3, [sp, #13]
 8005194:	ab03      	add	r3, sp, #12
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2302      	movs	r3, #2
 800519a:	b292      	uxth	r2, r2
 800519c:	f7ff ff96 	bl	80050cc <dwt_writetodevice>
 80051a0:	b005      	add	sp, #20
 80051a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080051a8 <ull_clearaonconfig>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4604      	mov	r4, r0
 80051ac:	2300      	movs	r3, #0
 80051ae:	461a      	mov	r2, r3
 80051b0:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 80051b4:	f7ff ffe7 	bl	8005186 <dwt_write16bitoffsetreg>
 80051b8:	2300      	movs	r3, #0
 80051ba:	461a      	mov	r2, r3
 80051bc:	4908      	ldr	r1, [pc, #32]	; (80051e0 <ull_clearaonconfig+0x38>)
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff ff8f 	bl	80050e2 <dwt_write8bitoffsetreg>
 80051c4:	4d07      	ldr	r5, [pc, #28]	; (80051e4 <ull_clearaonconfig+0x3c>)
 80051c6:	2300      	movs	r3, #0
 80051c8:	461a      	mov	r2, r3
 80051ca:	4629      	mov	r1, r5
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7ff ff88 	bl	80050e2 <dwt_write8bitoffsetreg>
 80051d2:	2302      	movs	r3, #2
 80051d4:	2200      	movs	r2, #0
 80051d6:	4629      	mov	r1, r5
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff ff82 	bl	80050e2 <dwt_write8bitoffsetreg>
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	000a0014 	.word	0x000a0014
 80051e4:	000a0004 	.word	0x000a0004

080051e8 <ull_force_clocks>:
 80051e8:	b508      	push	{r3, lr}
 80051ea:	2901      	cmp	r1, #1
 80051ec:	d002      	beq.n	80051f4 <ull_force_clocks+0xc>
 80051ee:	2905      	cmp	r1, #5
 80051f0:	d007      	beq.n	8005202 <ull_force_clocks+0x1a>
 80051f2:	bd08      	pop	{r3, pc}
 80051f4:	f641 0322 	movw	r3, #6178	; 0x1822
 80051f8:	2200      	movs	r2, #0
 80051fa:	4905      	ldr	r1, [pc, #20]	; (8005210 <ull_force_clocks+0x28>)
 80051fc:	f7ff ffc3 	bl	8005186 <dwt_write16bitoffsetreg>
 8005200:	e7f7      	b.n	80051f2 <ull_force_clocks+0xa>
 8005202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005206:	2200      	movs	r2, #0
 8005208:	4901      	ldr	r1, [pc, #4]	; (8005210 <ull_force_clocks+0x28>)
 800520a:	f7ff ffbc 	bl	8005186 <dwt_write16bitoffsetreg>
 800520e:	e7f0      	b.n	80051f2 <ull_force_clocks+0xa>
 8005210:	00110004 	.word	0x00110004

08005214 <__dwt_otp_write_wdata_id_reg>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4605      	mov	r5, r0
 8005218:	460c      	mov	r4, r1
 800521a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800521e:	b29b      	uxth	r3, r3
 8005220:	2200      	movs	r2, #0
 8005222:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005226:	f7ff ffae 	bl	8005186 <dwt_write16bitoffsetreg>
 800522a:	b2a3      	uxth	r3, r4
 800522c:	2200      	movs	r2, #0
 800522e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005232:	4628      	mov	r0, r5
 8005234:	f7ff ffa7 	bl	8005186 <dwt_write16bitoffsetreg>
 8005238:	bd38      	pop	{r3, r4, r5, pc}
	...

0800523c <_dwt_otpread>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	4604      	mov	r4, r0
 8005240:	460e      	mov	r6, r1
 8005242:	4d0c      	ldr	r5, [pc, #48]	; (8005274 <_dwt_otpread+0x38>)
 8005244:	2301      	movs	r3, #1
 8005246:	2200      	movs	r2, #0
 8005248:	4629      	mov	r1, r5
 800524a:	f7ff ff9c 	bl	8005186 <dwt_write16bitoffsetreg>
 800524e:	4633      	mov	r3, r6
 8005250:	2200      	movs	r2, #0
 8005252:	4909      	ldr	r1, [pc, #36]	; (8005278 <_dwt_otpread+0x3c>)
 8005254:	4620      	mov	r0, r4
 8005256:	f7ff ff96 	bl	8005186 <dwt_write16bitoffsetreg>
 800525a:	2302      	movs	r3, #2
 800525c:	2200      	movs	r2, #0
 800525e:	4629      	mov	r1, r5
 8005260:	4620      	mov	r0, r4
 8005262:	f7ff ff90 	bl	8005186 <dwt_write16bitoffsetreg>
 8005266:	2200      	movs	r2, #0
 8005268:	4904      	ldr	r1, [pc, #16]	; (800527c <_dwt_otpread+0x40>)
 800526a:	4620      	mov	r0, r4
 800526c:	f7ff fb4a 	bl	8004904 <dwt_read32bitoffsetreg>
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	bf00      	nop
 8005274:	000b0008 	.word	0x000b0008
 8005278:	000b0004 	.word	0x000b0004
 800527c:	000b0010 	.word	0x000b0010

08005280 <ull_aon_read>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4604      	mov	r4, r0
 8005284:	460b      	mov	r3, r1
 8005286:	2200      	movs	r2, #0
 8005288:	490a      	ldr	r1, [pc, #40]	; (80052b4 <ull_aon_read+0x34>)
 800528a:	f7ff ff7c 	bl	8005186 <dwt_write16bitoffsetreg>
 800528e:	4d0a      	ldr	r5, [pc, #40]	; (80052b8 <ull_aon_read+0x38>)
 8005290:	2388      	movs	r3, #136	; 0x88
 8005292:	2200      	movs	r2, #0
 8005294:	4629      	mov	r1, r5
 8005296:	4620      	mov	r0, r4
 8005298:	f7ff ff23 	bl	80050e2 <dwt_write8bitoffsetreg>
 800529c:	2300      	movs	r3, #0
 800529e:	461a      	mov	r2, r3
 80052a0:	4629      	mov	r1, r5
 80052a2:	4620      	mov	r0, r4
 80052a4:	f7ff ff1d 	bl	80050e2 <dwt_write8bitoffsetreg>
 80052a8:	2200      	movs	r2, #0
 80052aa:	4904      	ldr	r1, [pc, #16]	; (80052bc <ull_aon_read+0x3c>)
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7ff fb51 	bl	8004954 <dwt_read8bitoffsetreg>
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	000a000c 	.word	0x000a000c
 80052b8:	000a0004 	.word	0x000a0004
 80052bc:	000a0008 	.word	0x000a0008

080052c0 <ull_aon_write>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	4604      	mov	r4, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4615      	mov	r5, r2
 80052c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80052cc:	bf34      	ite	cc
 80052ce:	2600      	movcc	r6, #0
 80052d0:	2620      	movcs	r6, #32
 80052d2:	2200      	movs	r2, #0
 80052d4:	490b      	ldr	r1, [pc, #44]	; (8005304 <ull_aon_write+0x44>)
 80052d6:	f7ff ff56 	bl	8005186 <dwt_write16bitoffsetreg>
 80052da:	462b      	mov	r3, r5
 80052dc:	2200      	movs	r2, #0
 80052de:	490a      	ldr	r1, [pc, #40]	; (8005308 <ull_aon_write+0x48>)
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff fefe 	bl	80050e2 <dwt_write8bitoffsetreg>
 80052e6:	4d09      	ldr	r5, [pc, #36]	; (800530c <ull_aon_write+0x4c>)
 80052e8:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80052ec:	2200      	movs	r2, #0
 80052ee:	4629      	mov	r1, r5
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff fef6 	bl	80050e2 <dwt_write8bitoffsetreg>
 80052f6:	2300      	movs	r3, #0
 80052f8:	461a      	mov	r2, r3
 80052fa:	4629      	mov	r1, r5
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7ff fef0 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	000a000c 	.word	0x000a000c
 8005308:	000a0010 	.word	0x000a0010
 800530c:	000a0004 	.word	0x000a0004

08005310 <ull_configuresleep>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4604      	mov	r4, r0
 8005314:	460d      	mov	r5, r1
 8005316:	4616      	mov	r6, r2
 8005318:	2200      	movs	r2, #0
 800531a:	f240 110b 	movw	r1, #267	; 0x10b
 800531e:	f7ff ffcf 	bl	80052c0 <ull_aon_write>
 8005322:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005326:	4620      	mov	r0, r4
 8005328:	f7ff ffaa 	bl	8005280 <ull_aon_read>
 800532c:	f000 021f 	and.w	r2, r0, #31
 8005330:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005334:	4620      	mov	r0, r4
 8005336:	f7ff ffc3 	bl	80052c0 <ull_aon_write>
 800533a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800533c:	8a5a      	ldrh	r2, [r3, #18]
 800533e:	4315      	orrs	r5, r2
 8005340:	825d      	strh	r5, [r3, #18]
 8005342:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005344:	8a5b      	ldrh	r3, [r3, #18]
 8005346:	2200      	movs	r2, #0
 8005348:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800534c:	4620      	mov	r0, r4
 800534e:	f7ff ff1a 	bl	8005186 <dwt_write16bitoffsetreg>
 8005352:	4633      	mov	r3, r6
 8005354:	2200      	movs	r2, #0
 8005356:	4902      	ldr	r1, [pc, #8]	; (8005360 <ull_configuresleep+0x50>)
 8005358:	4620      	mov	r0, r4
 800535a:	f7ff fec2 	bl	80050e2 <dwt_write8bitoffsetreg>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	000a0014 	.word	0x000a0014

08005364 <ull_signal_rx_buff_free>:
 8005364:	b510      	push	{r4, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	4604      	mov	r4, r0
 800536a:	2200      	movs	r2, #0
 800536c:	9200      	str	r2, [sp, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	2113      	movs	r1, #19
 8005372:	f7ff feab 	bl	80050cc <dwt_writetodevice>
 8005376:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005378:	7bda      	ldrb	r2, [r3, #15]
 800537a:	2a03      	cmp	r2, #3
 800537c:	bf0c      	ite	eq
 800537e:	2201      	moveq	r2, #1
 8005380:	2203      	movne	r2, #3
 8005382:	73da      	strb	r2, [r3, #15]
 8005384:	b002      	add	sp, #8
 8005386:	bd10      	pop	{r4, pc}

08005388 <dwt_write32bitoffsetreg>:
 8005388:	b510      	push	{r4, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	f88d 300c 	strb.w	r3, [sp, #12]
 8005390:	0a1c      	lsrs	r4, r3, #8
 8005392:	f88d 400d 	strb.w	r4, [sp, #13]
 8005396:	0c1c      	lsrs	r4, r3, #16
 8005398:	f88d 400e 	strb.w	r4, [sp, #14]
 800539c:	0e1b      	lsrs	r3, r3, #24
 800539e:	f88d 300f 	strb.w	r3, [sp, #15]
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2304      	movs	r3, #4
 80053a8:	b292      	uxth	r2, r2
 80053aa:	f7ff fe8f 	bl	80050cc <dwt_writetodevice>
 80053ae:	b004      	add	sp, #16
 80053b0:	bd10      	pop	{r4, pc}
	...

080053b4 <ull_isr>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	4604      	mov	r4, r0
 80053b8:	2200      	movs	r2, #0
 80053ba:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 80053be:	f7ff fac9 	bl	8004954 <dwt_read8bitoffsetreg>
 80053c2:	4605      	mov	r5, r0
 80053c4:	2200      	movs	r2, #0
 80053c6:	2144      	movs	r1, #68	; 0x44
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7ff fa9b 	bl	8004904 <dwt_read32bitoffsetreg>
 80053ce:	4606      	mov	r6, r0
 80053d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053d2:	2200      	movs	r2, #0
 80053d4:	845a      	strh	r2, [r3, #34]	; 0x22
 80053d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053da:	61da      	str	r2, [r3, #28]
 80053dc:	841a      	strh	r2, [r3, #32]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
 80053e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053e2:	629c      	str	r4, [r3, #40]	; 0x28
 80053e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053e6:	61d8      	str	r0, [r3, #28]
 80053e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80053ea:	7dd3      	ldrb	r3, [r2, #23]
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d079      	beq.n	80054e8 <ull_isr+0x134>
 80053f4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80053f8:	d005      	beq.n	8005406 <ull_isr+0x52>
 80053fa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80053fe:	f043 0304 	orr.w	r3, r3, #4
 8005402:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005406:	f015 0f80 	tst.w	r5, #128	; 0x80
 800540a:	d174      	bne.n	80054f6 <ull_isr+0x142>
 800540c:	f015 0f01 	tst.w	r5, #1
 8005410:	f040 80a3 	bne.w	800555a <ull_isr+0x1a6>
 8005414:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005418:	d00b      	beq.n	8005432 <ull_isr+0x7e>
 800541a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800541c:	b113      	cbz	r3, 8005424 <ull_isr+0x70>
 800541e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005420:	301c      	adds	r0, #28
 8005422:	4798      	blx	r3
 8005424:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005428:	2202      	movs	r2, #2
 800542a:	2144      	movs	r1, #68	; 0x44
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff feaa 	bl	8005186 <dwt_write16bitoffsetreg>
 8005432:	f015 0f08 	tst.w	r5, #8
 8005436:	f000 80ea 	beq.w	800560e <ull_isr+0x25a>
 800543a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005442:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005444:	7bdb      	ldrb	r3, [r3, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8095 	bne.w	8005576 <ull_isr+0x1c2>
 800544c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800544e:	61de      	str	r6, [r3, #28]
 8005450:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8005454:	f000 80a9 	beq.w	80055aa <ull_isr+0x1f6>
 8005458:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800545a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800545e:	f043 0308 	orr.w	r3, r3, #8
 8005462:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005466:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800546a:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800546e:	d008      	beq.n	8005482 <ull_isr+0xce>
 8005470:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005472:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005476:	f043 0310 	orr.w	r3, r3, #16
 800547a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800547e:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8005482:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8005486:	d006      	beq.n	8005496 <ull_isr+0xe2>
 8005488:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800548a:	7dd3      	ldrb	r3, [r2, #23]
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	2b03      	cmp	r3, #3
 8005492:	f000 8096 	beq.w	80055c2 <ull_isr+0x20e>
 8005496:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800549a:	f040 809e 	bne.w	80055da <ull_isr+0x226>
 800549e:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 80054a2:	2200      	movs	r2, #0
 80054a4:	2144      	movs	r1, #68	; 0x44
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7ff ff6e 	bl	8005388 <dwt_write32bitoffsetreg>
 80054ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80054ae:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f040 80a1 	bne.w	80055f8 <ull_isr+0x244>
 80054b6:	7dc3      	ldrb	r3, [r0, #23]
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	2b03      	cmp	r3, #3
 80054be:	f000 809b 	beq.w	80055f8 <ull_isr+0x244>
 80054c2:	69c3      	ldr	r3, [r0, #28]
 80054c4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80054c8:	61c3      	str	r3, [r0, #28]
 80054ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80054cc:	69d3      	ldr	r3, [r2, #28]
 80054ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054d2:	61d3      	str	r3, [r2, #28]
 80054d4:	69e3      	ldr	r3, [r4, #28]
 80054d6:	b113      	cbz	r3, 80054de <ull_isr+0x12a>
 80054d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80054da:	301c      	adds	r0, #28
 80054dc:	4798      	blx	r3
 80054de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054e6:	e08b      	b.n	8005600 <ull_isr+0x24c>
 80054e8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80054ec:	bf1c      	itt	ne
 80054ee:	f045 0508 	orrne.w	r5, r5, #8
 80054f2:	b2ed      	uxtbne	r5, r5
 80054f4:	e77e      	b.n	80053f4 <ull_isr+0x40>
 80054f6:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80054f8:	2200      	movs	r2, #0
 80054fa:	2148      	movs	r1, #72	; 0x48
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7ff fa17 	bl	8004930 <dwt_read16bitoffsetreg>
 8005502:	8438      	strh	r0, [r7, #32]
 8005504:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005506:	7d9a      	ldrb	r2, [r3, #22]
 8005508:	b11a      	cbz	r2, 8005512 <ull_isr+0x15e>
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	f012 0f04 	tst.w	r2, #4
 8005510:	d103      	bne.n	800551a <ull_isr+0x166>
 8005512:	8c1b      	ldrh	r3, [r3, #32]
 8005514:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005518:	b18b      	cbz	r3, 800553e <ull_isr+0x18a>
 800551a:	2304      	movs	r3, #4
 800551c:	2200      	movs	r2, #0
 800551e:	2144      	movs	r1, #68	; 0x44
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff fdde 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005526:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800552a:	2200      	movs	r2, #0
 800552c:	2148      	movs	r1, #72	; 0x48
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff fe29 	bl	8005186 <dwt_write16bitoffsetreg>
 8005534:	6a23      	ldr	r3, [r4, #32]
 8005536:	b113      	cbz	r3, 800553e <ull_isr+0x18a>
 8005538:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800553a:	301c      	adds	r0, #28
 800553c:	4798      	blx	r3
 800553e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005540:	8c1b      	ldrh	r3, [r3, #32]
 8005542:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005546:	f43f af61 	beq.w	800540c <ull_isr+0x58>
 800554a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554e:	2200      	movs	r2, #0
 8005550:	2148      	movs	r1, #72	; 0x48
 8005552:	4620      	mov	r0, r4
 8005554:	f7ff fe17 	bl	8005186 <dwt_write16bitoffsetreg>
 8005558:	e758      	b.n	800540c <ull_isr+0x58>
 800555a:	23f8      	movs	r3, #248	; 0xf8
 800555c:	2200      	movs	r2, #0
 800555e:	2144      	movs	r1, #68	; 0x44
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff fdbe 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f43f af53 	beq.w	8005414 <ull_isr+0x60>
 800556e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005570:	301c      	adds	r0, #28
 8005572:	4798      	blx	r3
 8005574:	e74e      	b.n	8005414 <ull_isr+0x60>
 8005576:	493b      	ldr	r1, [pc, #236]	; (8005664 <ull_isr+0x2b0>)
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff f9eb 	bl	8004954 <dwt_read8bitoffsetreg>
 800557e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005580:	7bdb      	ldrb	r3, [r3, #15]
 8005582:	2b03      	cmp	r3, #3
 8005584:	bf08      	it	eq
 8005586:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 800558a:	f010 0f01 	tst.w	r0, #1
 800558e:	bf18      	it	ne
 8005590:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8005594:	f010 0f02 	tst.w	r0, #2
 8005598:	bf18      	it	ne
 800559a:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800559e:	f010 0f04 	tst.w	r0, #4
 80055a2:	bf18      	it	ne
 80055a4:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 80055a8:	e750      	b.n	800544c <ull_isr+0x98>
 80055aa:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80055ae:	bf1f      	itttt	ne
 80055b0:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 80055b2:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 80055b6:	f043 0304 	orrne.w	r3, r3, #4
 80055ba:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 80055be:	2700      	movs	r7, #0
 80055c0:	e753      	b.n	800546a <ull_isr+0xb6>
 80055c2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80055c6:	f043 0302 	orr.w	r3, r3, #2
 80055ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80055ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80055d0:	2200      	movs	r2, #0
 80055d2:	845a      	strh	r2, [r3, #34]	; 0x22
 80055d4:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80055d8:	e761      	b.n	800549e <ull_isr+0xea>
 80055da:	4620      	mov	r0, r4
 80055dc:	f7ff fd8e 	bl	80050fc <ull_getframelength>
 80055e0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80055e4:	f43f af5b 	beq.w	800549e <ull_isr+0xea>
 80055e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80055ea:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80055f6:	e752      	b.n	800549e <ull_isr+0xea>
 80055f8:	6963      	ldr	r3, [r4, #20]
 80055fa:	b10b      	cbz	r3, 8005600 <ull_isr+0x24c>
 80055fc:	301c      	adds	r0, #28
 80055fe:	4798      	blx	r3
 8005600:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005602:	7bdb      	ldrb	r3, [r3, #15]
 8005604:	b953      	cbnz	r3, 800561c <ull_isr+0x268>
 8005606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800560e:	f015 0f10 	tst.w	r5, #16
 8005612:	d107      	bne.n	8005624 <ull_isr+0x270>
 8005614:	f015 0f20 	tst.w	r5, #32
 8005618:	d114      	bne.n	8005644 <ull_isr+0x290>
 800561a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800561c:	4620      	mov	r0, r4
 800561e:	f7ff fea1 	bl	8005364 <ull_signal_rx_buff_free>
 8005622:	e7f0      	b.n	8005606 <ull_isr+0x252>
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <ull_isr+0x2b4>)
 8005626:	2200      	movs	r2, #0
 8005628:	2144      	movs	r1, #68	; 0x44
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff feac 	bl	8005388 <dwt_write32bitoffsetreg>
 8005630:	69e3      	ldr	r3, [r4, #28]
 8005632:	b113      	cbz	r3, 800563a <ull_isr+0x286>
 8005634:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005636:	301c      	adds	r0, #28
 8005638:	4798      	blx	r3
 800563a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005642:	e7e7      	b.n	8005614 <ull_isr+0x260>
 8005644:	4b09      	ldr	r3, [pc, #36]	; (800566c <ull_isr+0x2b8>)
 8005646:	2200      	movs	r2, #0
 8005648:	2144      	movs	r1, #68	; 0x44
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff fe9c 	bl	8005388 <dwt_write32bitoffsetreg>
 8005650:	69a3      	ldr	r3, [r4, #24]
 8005652:	b113      	cbz	r3, 800565a <ull_isr+0x2a6>
 8005654:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005656:	301c      	adds	r0, #28
 8005658:	4798      	blx	r3
 800565a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005662:	e7da      	b.n	800561a <ull_isr+0x266>
 8005664:	00010024 	.word	0x00010024
 8005668:	34059400 	.word	0x34059400
 800566c:	10220400 	.word	0x10220400

08005670 <_dwt_adjust_delaytime>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4604      	mov	r4, r0
 8005674:	b989      	cbnz	r1, 800569a <_dwt_adjust_delaytime+0x2a>
 8005676:	2200      	movs	r2, #0
 8005678:	212c      	movs	r1, #44	; 0x2c
 800567a:	f7ff f943 	bl	8004904 <dwt_read32bitoffsetreg>
 800567e:	4605      	mov	r5, r0
 8005680:	2201      	movs	r2, #1
 8005682:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff f964 	bl	8004954 <dwt_read8bitoffsetreg>
 800568c:	1a2b      	subs	r3, r5, r0
 800568e:	2200      	movs	r2, #0
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	4620      	mov	r0, r4
 8005694:	f7ff fe78 	bl	8005388 <dwt_write32bitoffsetreg>
 8005698:	bd38      	pop	{r3, r4, r5, pc}
 800569a:	2200      	movs	r2, #0
 800569c:	212c      	movs	r1, #44	; 0x2c
 800569e:	f7ff f931 	bl	8004904 <dwt_read32bitoffsetreg>
 80056a2:	4605      	mov	r5, r0
 80056a4:	2201      	movs	r2, #1
 80056a6:	4905      	ldr	r1, [pc, #20]	; (80056bc <_dwt_adjust_delaytime+0x4c>)
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff f953 	bl	8004954 <dwt_read8bitoffsetreg>
 80056ae:	1a2b      	subs	r3, r5, r0
 80056b0:	2200      	movs	r2, #0
 80056b2:	212c      	movs	r1, #44	; 0x2c
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff fe67 	bl	8005388 <dwt_write32bitoffsetreg>
 80056ba:	e7ed      	b.n	8005698 <_dwt_adjust_delaytime+0x28>
 80056bc:	00010004 	.word	0x00010004

080056c0 <ull_setrxaftertxdelay>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	4d08      	ldr	r5, [pc, #32]	; (80056e8 <ull_setrxaftertxdelay+0x28>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	4629      	mov	r1, r5
 80056cc:	f7ff f91a 	bl	8004904 <dwt_read32bitoffsetreg>
 80056d0:	0d00      	lsrs	r0, r0, #20
 80056d2:	0500      	lsls	r0, r0, #20
 80056d4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80056d8:	4303      	orrs	r3, r0
 80056da:	2200      	movs	r2, #0
 80056dc:	4629      	mov	r1, r5
 80056de:	4630      	mov	r0, r6
 80056e0:	f7ff fe52 	bl	8005388 <dwt_write32bitoffsetreg>
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
 80056e6:	bf00      	nop
 80056e8:	00010008 	.word	0x00010008

080056ec <ull_setlnapamode>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4605      	mov	r5, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	2200      	movs	r2, #0
 80056f4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80056f8:	f7ff f904 	bl	8004904 <dwt_read32bitoffsetreg>
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <ull_setlnapamode+0x40>)
 80056fe:	4003      	ands	r3, r0
 8005700:	f014 0f01 	tst.w	r4, #1
 8005704:	bf18      	it	ne
 8005706:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 800570a:	f014 0f02 	tst.w	r4, #2
 800570e:	bf18      	it	ne
 8005710:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 8005714:	f014 0f04 	tst.w	r4, #4
 8005718:	bf18      	it	ne
 800571a:	f043 0312 	orrne.w	r3, r3, #18
 800571e:	2200      	movs	r2, #0
 8005720:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8005724:	4628      	mov	r0, r5
 8005726:	f7ff fe2f 	bl	8005388 <dwt_write32bitoffsetreg>
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	ffe00fc0 	.word	0xffe00fc0

08005730 <ull_configurestskey>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4605      	mov	r5, r0
 8005734:	460c      	mov	r4, r1
 8005736:	680b      	ldr	r3, [r1, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	490b      	ldr	r1, [pc, #44]	; (8005768 <ull_configurestskey+0x38>)
 800573c:	f7ff fe24 	bl	8005388 <dwt_write32bitoffsetreg>
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	4909      	ldr	r1, [pc, #36]	; (800576c <ull_configurestskey+0x3c>)
 8005746:	4628      	mov	r0, r5
 8005748:	f7ff fe1e 	bl	8005388 <dwt_write32bitoffsetreg>
 800574c:	68a3      	ldr	r3, [r4, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	4907      	ldr	r1, [pc, #28]	; (8005770 <ull_configurestskey+0x40>)
 8005752:	4628      	mov	r0, r5
 8005754:	f7ff fe18 	bl	8005388 <dwt_write32bitoffsetreg>
 8005758:	68e3      	ldr	r3, [r4, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	4905      	ldr	r1, [pc, #20]	; (8005774 <ull_configurestskey+0x44>)
 800575e:	4628      	mov	r0, r5
 8005760:	f7ff fe12 	bl	8005388 <dwt_write32bitoffsetreg>
 8005764:	bd38      	pop	{r3, r4, r5, pc}
 8005766:	bf00      	nop
 8005768:	0002000c 	.word	0x0002000c
 800576c:	00020010 	.word	0x00020010
 8005770:	00020014 	.word	0x00020014
 8005774:	00020018 	.word	0x00020018

08005778 <ull_configurestsiv>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4605      	mov	r5, r0
 800577c:	460c      	mov	r4, r1
 800577e:	680b      	ldr	r3, [r1, #0]
 8005780:	2200      	movs	r2, #0
 8005782:	490b      	ldr	r1, [pc, #44]	; (80057b0 <ull_configurestsiv+0x38>)
 8005784:	f7ff fe00 	bl	8005388 <dwt_write32bitoffsetreg>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	4909      	ldr	r1, [pc, #36]	; (80057b4 <ull_configurestsiv+0x3c>)
 800578e:	4628      	mov	r0, r5
 8005790:	f7ff fdfa 	bl	8005388 <dwt_write32bitoffsetreg>
 8005794:	68a3      	ldr	r3, [r4, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	4907      	ldr	r1, [pc, #28]	; (80057b8 <ull_configurestsiv+0x40>)
 800579a:	4628      	mov	r0, r5
 800579c:	f7ff fdf4 	bl	8005388 <dwt_write32bitoffsetreg>
 80057a0:	68e3      	ldr	r3, [r4, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	4905      	ldr	r1, [pc, #20]	; (80057bc <ull_configurestsiv+0x44>)
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7ff fdee 	bl	8005388 <dwt_write32bitoffsetreg>
 80057ac:	bd38      	pop	{r3, r4, r5, pc}
 80057ae:	bf00      	nop
 80057b0:	0002001c 	.word	0x0002001c
 80057b4:	00020020 	.word	0x00020020
 80057b8:	00020024 	.word	0x00020024
 80057bc:	00020028 	.word	0x00020028

080057c0 <ull_configmrxlut>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	4604      	mov	r4, r0
 80057c6:	2905      	cmp	r1, #5
 80057c8:	d040      	beq.n	800584c <ull_configmrxlut+0x8c>
 80057ca:	4d26      	ldr	r5, [pc, #152]	; (8005864 <ull_configmrxlut+0xa4>)
 80057cc:	462e      	mov	r6, r5
 80057ce:	4f26      	ldr	r7, [pc, #152]	; (8005868 <ull_configmrxlut+0xa8>)
 80057d0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80058ac <ull_configmrxlut+0xec>
 80057d4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80058b0 <ull_configmrxlut+0xf0>
 80057d8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80058b4 <ull_configmrxlut+0xf4>
 80057dc:	4b23      	ldr	r3, [pc, #140]	; (800586c <ull_configmrxlut+0xac>)
 80057de:	2200      	movs	r2, #0
 80057e0:	4923      	ldr	r1, [pc, #140]	; (8005870 <ull_configmrxlut+0xb0>)
 80057e2:	4620      	mov	r0, r4
 80057e4:	f7ff fdd0 	bl	8005388 <dwt_write32bitoffsetreg>
 80057e8:	4653      	mov	r3, sl
 80057ea:	2200      	movs	r2, #0
 80057ec:	4921      	ldr	r1, [pc, #132]	; (8005874 <ull_configmrxlut+0xb4>)
 80057ee:	4620      	mov	r0, r4
 80057f0:	f7ff fdca 	bl	8005388 <dwt_write32bitoffsetreg>
 80057f4:	464b      	mov	r3, r9
 80057f6:	2200      	movs	r2, #0
 80057f8:	491f      	ldr	r1, [pc, #124]	; (8005878 <ull_configmrxlut+0xb8>)
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff fdc4 	bl	8005388 <dwt_write32bitoffsetreg>
 8005800:	4643      	mov	r3, r8
 8005802:	2200      	movs	r2, #0
 8005804:	491d      	ldr	r1, [pc, #116]	; (800587c <ull_configmrxlut+0xbc>)
 8005806:	4620      	mov	r0, r4
 8005808:	f7ff fdbe 	bl	8005388 <dwt_write32bitoffsetreg>
 800580c:	463b      	mov	r3, r7
 800580e:	2200      	movs	r2, #0
 8005810:	491b      	ldr	r1, [pc, #108]	; (8005880 <ull_configmrxlut+0xc0>)
 8005812:	4620      	mov	r0, r4
 8005814:	f7ff fdb8 	bl	8005388 <dwt_write32bitoffsetreg>
 8005818:	4633      	mov	r3, r6
 800581a:	2200      	movs	r2, #0
 800581c:	4919      	ldr	r1, [pc, #100]	; (8005884 <ull_configmrxlut+0xc4>)
 800581e:	4620      	mov	r0, r4
 8005820:	f7ff fdb2 	bl	8005388 <dwt_write32bitoffsetreg>
 8005824:	462b      	mov	r3, r5
 8005826:	2200      	movs	r2, #0
 8005828:	4917      	ldr	r1, [pc, #92]	; (8005888 <ull_configmrxlut+0xc8>)
 800582a:	4620      	mov	r0, r4
 800582c:	f7ff fdac 	bl	8005388 <dwt_write32bitoffsetreg>
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <ull_configmrxlut+0xcc>)
 8005832:	2200      	movs	r2, #0
 8005834:	4916      	ldr	r1, [pc, #88]	; (8005890 <ull_configmrxlut+0xd0>)
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff fda6 	bl	8005388 <dwt_write32bitoffsetreg>
 800583c:	4b15      	ldr	r3, [pc, #84]	; (8005894 <ull_configmrxlut+0xd4>)
 800583e:	2200      	movs	r2, #0
 8005840:	4915      	ldr	r1, [pc, #84]	; (8005898 <ull_configmrxlut+0xd8>)
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fda0 	bl	8005388 <dwt_write32bitoffsetreg>
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584c:	4d13      	ldr	r5, [pc, #76]	; (800589c <ull_configmrxlut+0xdc>)
 800584e:	4e14      	ldr	r6, [pc, #80]	; (80058a0 <ull_configmrxlut+0xe0>)
 8005850:	4f14      	ldr	r7, [pc, #80]	; (80058a4 <ull_configmrxlut+0xe4>)
 8005852:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80058b8 <ull_configmrxlut+0xf8>
 8005856:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80058bc <ull_configmrxlut+0xfc>
 800585a:	f8df a064 	ldr.w	sl, [pc, #100]	; 80058c0 <ull_configmrxlut+0x100>
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <ull_configmrxlut+0xe8>)
 8005860:	e7bd      	b.n	80057de <ull_configmrxlut+0x1e>
 8005862:	bf00      	nop
 8005864:	0002afb5 	.word	0x0002afb5
 8005868:	0002af7d 	.word	0x0002af7d
 800586c:	0002a8fe 	.word	0x0002a8fe
 8005870:	00030038 	.word	0x00030038
 8005874:	0003003c 	.word	0x0003003c
 8005878:	00030040 	.word	0x00030040
 800587c:	00030044 	.word	0x00030044
 8005880:	00030048 	.word	0x00030048
 8005884:	0003004c 	.word	0x0003004c
 8005888:	00030050 	.word	0x00030050
 800588c:	10000240 	.word	0x10000240
 8005890:	0003001c 	.word	0x0003001c
 8005894:	1b6da489 	.word	0x1b6da489
 8005898:	00030020 	.word	0x00030020
 800589c:	0001cff5 	.word	0x0001cff5
 80058a0:	0001cfb5 	.word	0x0001cfb5
 80058a4:	0001cf36 	.word	0x0001cf36
 80058a8:	0001c0fd 	.word	0x0001c0fd
 80058ac:	0002af3e 	.word	0x0002af3e
 80058b0:	0002a5fe 	.word	0x0002a5fe
 80058b4:	0002ac36 	.word	0x0002ac36
 80058b8:	0001c77e 	.word	0x0001c77e
 80058bc:	0001c6be 	.word	0x0001c6be
 80058c0:	0001c43e 	.word	0x0001c43e

080058c4 <ull_disable_rftx_blocks>:
 80058c4:	b508      	push	{r3, lr}
 80058c6:	2300      	movs	r3, #0
 80058c8:	461a      	mov	r2, r3
 80058ca:	4902      	ldr	r1, [pc, #8]	; (80058d4 <ull_disable_rftx_blocks+0x10>)
 80058cc:	f7ff fd5c 	bl	8005388 <dwt_write32bitoffsetreg>
 80058d0:	bd08      	pop	{r3, pc}
 80058d2:	bf00      	nop
 80058d4:	00070004 	.word	0x00070004

080058d8 <ull_disable_rf_tx>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4604      	mov	r4, r0
 80058dc:	460d      	mov	r5, r1
 80058de:	2300      	movs	r3, #0
 80058e0:	461a      	mov	r2, r3
 80058e2:	490a      	ldr	r1, [pc, #40]	; (800590c <ull_disable_rf_tx+0x34>)
 80058e4:	f7ff fd50 	bl	8005388 <dwt_write32bitoffsetreg>
 80058e8:	2300      	movs	r3, #0
 80058ea:	461a      	mov	r2, r3
 80058ec:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80058f0:	4620      	mov	r0, r4
 80058f2:	f7ff fd49 	bl	8005388 <dwt_write32bitoffsetreg>
 80058f6:	b905      	cbnz	r5, 80058fa <ull_disable_rf_tx+0x22>
 80058f8:	bd38      	pop	{r3, r4, r5, pc}
 80058fa:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80058fe:	2200      	movs	r2, #0
 8005900:	4903      	ldr	r1, [pc, #12]	; (8005910 <ull_disable_rf_tx+0x38>)
 8005902:	4620      	mov	r0, r4
 8005904:	f7ff fd40 	bl	8005388 <dwt_write32bitoffsetreg>
 8005908:	e7f6      	b.n	80058f8 <ull_disable_rf_tx+0x20>
 800590a:	bf00      	nop
 800590c:	00070048 	.word	0x00070048
 8005910:	00070014 	.word	0x00070014

08005914 <ull_readrxdata>:
 8005914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005916:	b083      	sub	sp, #12
 8005918:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800591a:	7be4      	ldrb	r4, [r4, #15]
 800591c:	2c03      	cmp	r4, #3
 800591e:	bf0c      	ite	eq
 8005920:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8005924:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8005928:	189c      	adds	r4, r3, r2
 800592a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800592e:	da19      	bge.n	8005964 <ull_readrxdata+0x50>
 8005930:	461d      	mov	r5, r3
 8005932:	4616      	mov	r6, r2
 8005934:	460f      	mov	r7, r1
 8005936:	4604      	mov	r4, r0
 8005938:	2b7f      	cmp	r3, #127	; 0x7f
 800593a:	d915      	bls.n	8005968 <ull_readrxdata+0x54>
 800593c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8005940:	2200      	movs	r2, #0
 8005942:	490d      	ldr	r1, [pc, #52]	; (8005978 <ull_readrxdata+0x64>)
 8005944:	f7ff fd20 	bl	8005388 <dwt_write32bitoffsetreg>
 8005948:	462b      	mov	r3, r5
 800594a:	2200      	movs	r2, #0
 800594c:	490b      	ldr	r1, [pc, #44]	; (800597c <ull_readrxdata+0x68>)
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff fd1a 	bl	8005388 <dwt_write32bitoffsetreg>
 8005954:	9700      	str	r7, [sp, #0]
 8005956:	4633      	mov	r3, r6
 8005958:	2200      	movs	r2, #0
 800595a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800595e:	4620      	mov	r0, r4
 8005960:	f7fe ffc6 	bl	80048f0 <dwt_readfromdevice>
 8005964:	b003      	add	sp, #12
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005968:	9100      	str	r1, [sp, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	462a      	mov	r2, r5
 800596e:	4661      	mov	r1, ip
 8005970:	f7fe ffbe 	bl	80048f0 <dwt_readfromdevice>
 8005974:	e7f6      	b.n	8005964 <ull_readrxdata+0x50>
 8005976:	bf00      	nop
 8005978:	001f0004 	.word	0x001f0004
 800597c:	001f0008 	.word	0x001f0008

08005980 <ull_rxenable>:
 8005980:	b530      	push	{r4, r5, lr}
 8005982:	b083      	sub	sp, #12
 8005984:	4605      	mov	r5, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b171      	cbz	r1, 80059a8 <ull_rxenable+0x28>
 800598a:	f021 0302 	bic.w	r3, r1, #2
 800598e:	3b01      	subs	r3, #1
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d856      	bhi.n	8005a42 <ull_rxenable+0xc2>
 8005994:	e8df f003 	tbb	[pc, r3]
 8005998:	21555510 	.word	0x21555510
 800599c:	28555555 	.word	0x28555555
 80059a0:	55555555 	.word	0x55555555
 80059a4:	33555555 	.word	0x33555555
 80059a8:	2200      	movs	r2, #0
 80059aa:	9200      	str	r2, [sp, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	2102      	movs	r1, #2
 80059b0:	f7ff fb8c 	bl	80050cc <dwt_writetodevice>
 80059b4:	4620      	mov	r0, r4
 80059b6:	e00e      	b.n	80059d6 <ull_rxenable+0x56>
 80059b8:	2200      	movs	r2, #0
 80059ba:	9200      	str	r2, [sp, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	2104      	movs	r1, #4
 80059c0:	f7ff fb84 	bl	80050cc <dwt_writetodevice>
 80059c4:	2203      	movs	r2, #3
 80059c6:	2144      	movs	r1, #68	; 0x44
 80059c8:	4628      	mov	r0, r5
 80059ca:	f7fe ffc3 	bl	8004954 <dwt_read8bitoffsetreg>
 80059ce:	f010 0f08 	tst.w	r0, #8
 80059d2:	d11f      	bne.n	8005a14 <ull_rxenable+0x94>
 80059d4:	2000      	movs	r0, #0
 80059d6:	b003      	add	sp, #12
 80059d8:	bd30      	pop	{r4, r5, pc}
 80059da:	2200      	movs	r2, #0
 80059dc:	9200      	str	r2, [sp, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	210a      	movs	r1, #10
 80059e2:	f7ff fb73 	bl	80050cc <dwt_writetodevice>
 80059e6:	e7ed      	b.n	80059c4 <ull_rxenable+0x44>
 80059e8:	2100      	movs	r1, #0
 80059ea:	f7ff fe41 	bl	8005670 <_dwt_adjust_delaytime>
 80059ee:	2200      	movs	r2, #0
 80059f0:	9200      	str	r2, [sp, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	2108      	movs	r1, #8
 80059f6:	4628      	mov	r0, r5
 80059f8:	f7ff fb68 	bl	80050cc <dwt_writetodevice>
 80059fc:	e7e2      	b.n	80059c4 <ull_rxenable+0x44>
 80059fe:	2101      	movs	r1, #1
 8005a00:	f7ff fe36 	bl	8005670 <_dwt_adjust_delaytime>
 8005a04:	2200      	movs	r2, #0
 8005a06:	9200      	str	r2, [sp, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	2106      	movs	r1, #6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f7ff fb5d 	bl	80050cc <dwt_writetodevice>
 8005a12:	e7d7      	b.n	80059c4 <ull_rxenable+0x44>
 8005a14:	2100      	movs	r1, #0
 8005a16:	9100      	str	r1, [sp, #0]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f7ff fb55 	bl	80050cc <dwt_writetodevice>
 8005a22:	f014 0f02 	tst.w	r4, #2
 8005a26:	d002      	beq.n	8005a2e <ull_rxenable+0xae>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a2c:	e7d3      	b.n	80059d6 <ull_rxenable+0x56>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	9200      	str	r2, [sp, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	2102      	movs	r1, #2
 8005a36:	4628      	mov	r0, r5
 8005a38:	f7ff fb48 	bl	80050cc <dwt_writetodevice>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a40:	e7c9      	b.n	80059d6 <ull_rxenable+0x56>
 8005a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a46:	e7c6      	b.n	80059d6 <ull_rxenable+0x56>

08005a48 <ull_writetxdata>:
 8005a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	185c      	adds	r4, r3, r1
 8005a4e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005a52:	da24      	bge.n	8005a9e <ull_writetxdata+0x56>
 8005a54:	461c      	mov	r4, r3
 8005a56:	4617      	mov	r7, r2
 8005a58:	460e      	mov	r6, r1
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5e:	d915      	bls.n	8005a8c <ull_writetxdata+0x44>
 8005a60:	2314      	movs	r3, #20
 8005a62:	2200      	movs	r2, #0
 8005a64:	490f      	ldr	r1, [pc, #60]	; (8005aa4 <ull_writetxdata+0x5c>)
 8005a66:	f7ff fc8f 	bl	8005388 <dwt_write32bitoffsetreg>
 8005a6a:	4623      	mov	r3, r4
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	490e      	ldr	r1, [pc, #56]	; (8005aa8 <ull_writetxdata+0x60>)
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff fc89 	bl	8005388 <dwt_write32bitoffsetreg>
 8005a76:	9700      	str	r7, [sp, #0]
 8005a78:	4633      	mov	r3, r6
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8005a80:	4628      	mov	r0, r5
 8005a82:	f7ff fb23 	bl	80050cc <dwt_writetodevice>
 8005a86:	2000      	movs	r0, #0
 8005a88:	b003      	add	sp, #12
 8005a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8c:	9200      	str	r2, [sp, #0]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4622      	mov	r2, r4
 8005a92:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8005a96:	f7ff fb19 	bl	80050cc <dwt_writetodevice>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e7f4      	b.n	8005a88 <ull_writetxdata+0x40>
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa2:	e7f1      	b.n	8005a88 <ull_writetxdata+0x40>
 8005aa4:	001f0004 	.word	0x001f0004
 8005aa8:	001f0008 	.word	0x001f0008

08005aac <dwt_modify32bitoffsetreg>:
 8005aac:	b530      	push	{r4, r5, lr}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	9c08      	ldr	r4, [sp, #32]
 8005ab2:	f88d 3008 	strb.w	r3, [sp, #8]
 8005ab6:	0a1d      	lsrs	r5, r3, #8
 8005ab8:	f88d 5009 	strb.w	r5, [sp, #9]
 8005abc:	0c1d      	lsrs	r5, r3, #16
 8005abe:	f88d 500a 	strb.w	r5, [sp, #10]
 8005ac2:	0e1b      	lsrs	r3, r3, #24
 8005ac4:	f88d 300b 	strb.w	r3, [sp, #11]
 8005ac8:	f88d 400c 	strb.w	r4, [sp, #12]
 8005acc:	0a23      	lsrs	r3, r4, #8
 8005ace:	f88d 300d 	strb.w	r3, [sp, #13]
 8005ad2:	0c23      	lsrs	r3, r4, #16
 8005ad4:	f88d 300e 	strb.w	r3, [sp, #14]
 8005ad8:	0e24      	lsrs	r4, r4, #24
 8005ada:	f88d 400f 	strb.w	r4, [sp, #15]
 8005ade:	f248 0303 	movw	r3, #32771	; 0x8003
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	ab02      	add	r3, sp, #8
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	2308      	movs	r3, #8
 8005aea:	b292      	uxth	r2, r2
 8005aec:	f7fe fe7d 	bl	80047ea <dwt_xfer3xxx>
 8005af0:	b005      	add	sp, #20
 8005af2:	bd30      	pop	{r4, r5, pc}

08005af4 <_dwt_kick_dgc_on_wakeup>:
 8005af4:	b500      	push	{lr}
 8005af6:	b083      	sub	sp, #12
 8005af8:	2905      	cmp	r1, #5
 8005afa:	d004      	beq.n	8005b06 <_dwt_kick_dgc_on_wakeup+0x12>
 8005afc:	2909      	cmp	r1, #9
 8005afe:	d00b      	beq.n	8005b18 <_dwt_kick_dgc_on_wakeup+0x24>
 8005b00:	b003      	add	sp, #12
 8005b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b06:	2340      	movs	r3, #64	; 0x40
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4906      	ldr	r1, [pc, #24]	; (8005b2c <_dwt_kick_dgc_on_wakeup+0x38>)
 8005b12:	f7ff ffcb 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005b16:	e7f3      	b.n	8005b00 <_dwt_kick_dgc_on_wakeup+0xc>
 8005b18:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005b22:	2200      	movs	r2, #0
 8005b24:	4901      	ldr	r1, [pc, #4]	; (8005b2c <_dwt_kick_dgc_on_wakeup+0x38>)
 8005b26:	f7ff ffc1 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005b2a:	e7e9      	b.n	8005b00 <_dwt_kick_dgc_on_wakeup+0xc>
 8005b2c:	000b0008 	.word	0x000b0008

08005b30 <ull_enable_rf_tx>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	4604      	mov	r4, r0
 8005b36:	460e      	mov	r6, r1
 8005b38:	4d13      	ldr	r5, [pc, #76]	; (8005b88 <ull_enable_rf_tx+0x58>)
 8005b3a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b44:	2200      	movs	r2, #0
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7ff ffb0 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005b4c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b56:	2200      	movs	r2, #0
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7ff ffa6 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <ull_enable_rf_tx+0x5c>)
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff ff9c 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005b74:	b90e      	cbnz	r6, 8005b7a <ull_enable_rf_tx+0x4a>
 8005b76:	b002      	add	sp, #8
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <ull_enable_rf_tx+0x60>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4905      	ldr	r1, [pc, #20]	; (8005b94 <ull_enable_rf_tx+0x64>)
 8005b80:	4620      	mov	r0, r4
 8005b82:	f7ff fc01 	bl	8005388 <dwt_write32bitoffsetreg>
 8005b86:	e7f6      	b.n	8005b76 <ull_enable_rf_tx+0x46>
 8005b88:	00070048 	.word	0x00070048
 8005b8c:	02003c00 	.word	0x02003c00
 8005b90:	01011100 	.word	0x01011100
 8005b94:	00070014 	.word	0x00070014

08005b98 <ull_enable_rftx_blocks>:
 8005b98:	b500      	push	{lr}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <ull_enable_rftx_blocks+0x1c>)
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4904      	ldr	r1, [pc, #16]	; (8005bb8 <ull_enable_rftx_blocks+0x20>)
 8005ba8:	f7ff ff80 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005bac:	b003      	add	sp, #12
 8005bae:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bb2:	bf00      	nop
 8005bb4:	02003c00 	.word	0x02003c00
 8005bb8:	00070004 	.word	0x00070004

08005bbc <_dwt_otpprogword32>:
 8005bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	460d      	mov	r5, r1
 8005bc6:	4617      	mov	r7, r2
 8005bc8:	4e56      	ldr	r6, [pc, #344]	; (8005d24 <_dwt_otpprogword32+0x168>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	4631      	mov	r1, r6
 8005bce:	f7fe fe99 	bl	8004904 <dwt_read32bitoffsetreg>
 8005bd2:	4681      	mov	r9, r0
 8005bd4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bde:	2200      	movs	r2, #0
 8005be0:	4631      	mov	r1, r6
 8005be2:	4620      	mov	r0, r4
 8005be4:	f7ff ff62 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005be8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8005d28 <_dwt_otpprogword32+0x16c>
 8005bec:	2318      	movs	r3, #24
 8005bee:	2200      	movs	r2, #0
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f7ff fac7 	bl	8005186 <dwt_write16bitoffsetreg>
 8005bf8:	2125      	movs	r1, #37	; 0x25
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f7ff fb0a 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c00:	2102      	movs	r1, #2
 8005c02:	4620      	mov	r0, r4
 8005c04:	f7ff fb06 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c08:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f7ff fb01 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c12:	b2f9      	uxtb	r1, r7
 8005c14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7ff fafb 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7ff faf6 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7ff faf2 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c30:	2102      	movs	r1, #2
 8005c32:	4620      	mov	r0, r4
 8005c34:	f7ff faee 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c38:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff fae9 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c42:	b2e9      	uxtb	r1, r5
 8005c44:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7ff fae3 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c4e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8005c52:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7ff fadc 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c5c:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8005c60:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c64:	4620      	mov	r0, r4
 8005c66:	f7ff fad5 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c6a:	0e29      	lsrs	r1, r5, #24
 8005c6c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7ff facf 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c76:	2100      	movs	r1, #0
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f7ff facb 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c7e:	213a      	movs	r1, #58	; 0x3a
 8005c80:	4620      	mov	r0, r4
 8005c82:	f7ff fac7 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f7ff fac2 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c90:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005c94:	4620      	mov	r0, r4
 8005c96:	f7ff fabd 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f7ff fab9 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005ca2:	213a      	movs	r1, #58	; 0x3a
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7ff fab5 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005caa:	f240 1101 	movw	r1, #257	; 0x101
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f7ff fab0 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff fa62 	bl	8005186 <dwt_write16bitoffsetreg>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f7ff fa5b 	bl	8005186 <dwt_write16bitoffsetreg>
 8005cd0:	2002      	movs	r0, #2
 8005cd2:	f7fa fdbb 	bl	800084c <deca_sleep>
 8005cd6:	213a      	movs	r1, #58	; 0x3a
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f7ff fa9b 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005cde:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7ff fa96 	bl	8005214 <__dwt_otp_write_wdata_id_reg>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	2200      	movs	r2, #0
 8005cec:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7ff fa48 	bl	8005186 <dwt_write16bitoffsetreg>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f7ff fa41 	bl	8005186 <dwt_write16bitoffsetreg>
 8005d04:	2300      	movs	r3, #0
 8005d06:	461a      	mov	r2, r3
 8005d08:	4641      	mov	r1, r8
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7ff fa3b 	bl	8005186 <dwt_write16bitoffsetreg>
 8005d10:	464b      	mov	r3, r9
 8005d12:	2200      	movs	r2, #0
 8005d14:	4631      	mov	r1, r6
 8005d16:	4620      	mov	r0, r4
 8005d18:	f7ff fb36 	bl	8005388 <dwt_write32bitoffsetreg>
 8005d1c:	b003      	add	sp, #12
 8005d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d22:	bf00      	nop
 8005d24:	00070044 	.word	0x00070044
 8005d28:	000b0008 	.word	0x000b0008

08005d2c <ull_setgpiomode>:
 8005d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	2400      	movs	r4, #0
 8005d32:	4623      	mov	r3, r4
 8005d34:	2601      	movs	r6, #1
 8005d36:	2707      	movs	r7, #7
 8005d38:	e002      	b.n	8005d40 <ull_setgpiomode+0x14>
 8005d3a:	3401      	adds	r4, #1
 8005d3c:	2c09      	cmp	r4, #9
 8005d3e:	d009      	beq.n	8005d54 <ull_setgpiomode+0x28>
 8005d40:	fa06 f504 	lsl.w	r5, r6, r4
 8005d44:	420d      	tst	r5, r1
 8005d46:	d0f8      	beq.n	8005d3a <ull_setgpiomode+0xe>
 8005d48:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005d4c:	fa07 f505 	lsl.w	r5, r7, r5
 8005d50:	432b      	orrs	r3, r5
 8005d52:	e7f2      	b.n	8005d3a <ull_setgpiomode+0xe>
 8005d54:	401a      	ands	r2, r3
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8005d60:	f7ff fea4 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005d64:	b003      	add	sp, #12
 8005d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d68 <ull_setinterrupt>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4688      	mov	r8, r1
 8005d72:	4617      	mov	r7, r2
 8005d74:	461d      	mov	r5, r3
 8005d76:	f7fa fd4b 	bl	8000810 <decamutexon>
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	2d02      	cmp	r5, #2
 8005d7e:	d02d      	beq.n	8005ddc <ull_setinterrupt+0x74>
 8005d80:	2d01      	cmp	r5, #1
 8005d82:	d038      	beq.n	8005df6 <ull_setinterrupt+0x8e>
 8005d84:	2500      	movs	r5, #0
 8005d86:	9500      	str	r5, [sp, #0]
 8005d88:	ea6f 0308 	mvn.w	r3, r8
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	213c      	movs	r1, #60	; 0x3c
 8005d90:	4620      	mov	r0, r4
 8005d92:	f7ff fe8b 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005d96:	9500      	str	r5, [sp, #0]
 8005d98:	43fb      	mvns	r3, r7
 8005d9a:	462a      	mov	r2, r5
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7ff fe84 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005da4:	2200      	movs	r2, #0
 8005da6:	213c      	movs	r1, #60	; 0x3c
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7fe fdab 	bl	8004904 <dwt_read32bitoffsetreg>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2200      	movs	r2, #0
 8005db2:	2144      	movs	r1, #68	; 0x44
 8005db4:	4620      	mov	r0, r4
 8005db6:	f7ff fae7 	bl	8005388 <dwt_write32bitoffsetreg>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2140      	movs	r1, #64	; 0x40
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f7fe fda0 	bl	8004904 <dwt_read32bitoffsetreg>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2148      	movs	r1, #72	; 0x48
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f7ff fadc 	bl	8005388 <dwt_write32bitoffsetreg>
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7fa fd2e 	bl	8000832 <decamutexoff>
 8005dd6:	b002      	add	sp, #8
 8005dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ddc:	4643      	mov	r3, r8
 8005dde:	2200      	movs	r2, #0
 8005de0:	213c      	movs	r1, #60	; 0x3c
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff fad0 	bl	8005388 <dwt_write32bitoffsetreg>
 8005de8:	463b      	mov	r3, r7
 8005dea:	2200      	movs	r2, #0
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff faca 	bl	8005388 <dwt_write32bitoffsetreg>
 8005df4:	e7d6      	b.n	8005da4 <ull_setinterrupt+0x3c>
 8005df6:	f8cd 8000 	str.w	r8, [sp]
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dfe:	2200      	movs	r2, #0
 8005e00:	213c      	movs	r1, #60	; 0x3c
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff fe52 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005e08:	9700      	str	r7, [sp, #0]
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2140      	movs	r1, #64	; 0x40
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff fe4a 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005e18:	e7c4      	b.n	8005da4 <ull_setinterrupt+0x3c>
	...

08005e1c <ull_writetxfctrl>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	4604      	mov	r4, r0
 8005e22:	2a7f      	cmp	r2, #127	; 0x7f
 8005e24:	d912      	bls.n	8005e4c <ull_writetxfctrl+0x30>
 8005e26:	3280      	adds	r2, #128	; 0x80
 8005e28:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8005e2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e30:	9100      	str	r1, [sp, #0]
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <ull_writetxfctrl+0x48>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	2124      	movs	r1, #36	; 0x24
 8005e38:	f7ff fe38 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7fe fd86 	bl	8004954 <dwt_read8bitoffsetreg>
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd10      	pop	{r4, pc}
 8005e4c:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8005e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e54:	9100      	str	r1, [sp, #0]
 8005e56:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <ull_writetxfctrl+0x48>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2124      	movs	r1, #36	; 0x24
 8005e5c:	f7ff fe26 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005e60:	e7f2      	b.n	8005e48 <ull_writetxfctrl+0x2c>
 8005e62:	bf00      	nop
 8005e64:	fc00f400 	.word	0xfc00f400

08005e68 <prs_sys_status_and_or>:
 8005e68:	b500      	push	{lr}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	9200      	str	r2, [sp, #0]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	2200      	movs	r2, #0
 8005e72:	2144      	movs	r1, #68	; 0x44
 8005e74:	f7ff fe1a 	bl	8005aac <dwt_modify32bitoffsetreg>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	b003      	add	sp, #12
 8005e7c:	f85d fb04 	ldr.w	pc, [sp], #4

08005e80 <dwt_modify8bitoffsetreg>:
 8005e80:	b500      	push	{lr}
 8005e82:	b085      	sub	sp, #20
 8005e84:	f88d 300c 	strb.w	r3, [sp, #12]
 8005e88:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005e8c:	f88d 300d 	strb.w	r3, [sp, #13]
 8005e90:	f248 0301 	movw	r3, #32769	; 0x8001
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	ab03      	add	r3, sp, #12
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	b292      	uxth	r2, r2
 8005e9e:	f7fe fca4 	bl	80047ea <dwt_xfer3xxx>
 8005ea2:	b005      	add	sp, #20
 8005ea4:	f85d fb04 	ldr.w	pc, [sp], #4

08005ea8 <ull_configciadiag>:
 8005ea8:	b530      	push	{r4, r5, lr}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	4604      	mov	r4, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	f011 0f01 	tst.w	r1, #1
 8005eb4:	d015      	beq.n	8005ee2 <ull_configciadiag+0x3a>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	23ef      	movs	r3, #239	; 0xef
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005ec2:	f7ff ffdd 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8005ec6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ec8:	761d      	strb	r5, [r3, #24]
 8005eca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ecc:	7e1b      	ldrb	r3, [r3, #24]
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	d010      	beq.n	8005ef4 <ull_configciadiag+0x4c>
 8005ed2:	086b      	lsrs	r3, r5, #1
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	490e      	ldr	r1, [pc, #56]	; (8005f10 <ull_configciadiag+0x68>)
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff f902 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005ede:	b003      	add	sp, #12
 8005ee0:	bd30      	pop	{r4, r5, pc}
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	23ff      	movs	r3, #255	; 0xff
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005eee:	f7ff ffc7 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8005ef2:	e7e8      	b.n	8005ec6 <ull_configciadiag+0x1e>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	23ff      	movs	r3, #255	; 0xff
 8005efa:	2200      	movs	r2, #0
 8005efc:	4904      	ldr	r1, [pc, #16]	; (8005f10 <ull_configciadiag+0x68>)
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7ff ffbe 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8005f04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005f06:	7e13      	ldrb	r3, [r2, #24]
 8005f08:	f043 0302 	orr.w	r3, r3, #2
 8005f0c:	7613      	strb	r3, [r2, #24]
 8005f0e:	e7e6      	b.n	8005ede <ull_configciadiag+0x36>
 8005f10:	00010028 	.word	0x00010028

08005f14 <ull_calcbandwidthadj>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	f7ff f963 	bl	80051e8 <ull_force_clocks>
 8005f22:	2100      	movs	r1, #0
 8005f24:	4620      	mov	r0, r4
 8005f26:	f7ff fe03 	bl	8005b30 <ull_enable_rf_tx>
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f7ff fe34 	bl	8005b98 <ull_enable_rftx_blocks>
 8005f30:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8005f34:	2200      	movs	r2, #0
 8005f36:	4915      	ldr	r1, [pc, #84]	; (8005f8c <ull_calcbandwidthadj+0x78>)
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f7ff f924 	bl	8005186 <dwt_write16bitoffsetreg>
 8005f3e:	2303      	movs	r3, #3
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	23ff      	movs	r3, #255	; 0xff
 8005f44:	2200      	movs	r2, #0
 8005f46:	4912      	ldr	r1, [pc, #72]	; (8005f90 <ull_calcbandwidthadj+0x7c>)
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7ff ff99 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8005f4e:	4e10      	ldr	r6, [pc, #64]	; (8005f90 <ull_calcbandwidthadj+0x7c>)
 8005f50:	2500      	movs	r5, #0
 8005f52:	462a      	mov	r2, r5
 8005f54:	4631      	mov	r1, r6
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7fe fcfc 	bl	8004954 <dwt_read8bitoffsetreg>
 8005f5c:	f010 0f01 	tst.w	r0, #1
 8005f60:	d1f7      	bne.n	8005f52 <ull_calcbandwidthadj+0x3e>
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7ff fcae 	bl	80058c4 <ull_disable_rftx_blocks>
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7ff fcb4 	bl	80058d8 <ull_disable_rf_tx>
 8005f70:	2105      	movs	r1, #5
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff f938 	bl	80051e8 <ull_force_clocks>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4906      	ldr	r1, [pc, #24]	; (8005f94 <ull_calcbandwidthadj+0x80>)
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f7fe fce9 	bl	8004954 <dwt_read8bitoffsetreg>
 8005f82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005f86:	b002      	add	sp, #8
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	bf00      	nop
 8005f8c:	0008001c 	.word	0x0008001c
 8005f90:	00080010 	.word	0x00080010
 8005f94:	0007001c 	.word	0x0007001c

08005f98 <ull_configuretxrf>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8005fa2:	b149      	cbz	r1, 8005fb8 <ull_configuretxrf+0x20>
 8005fa4:	f7ff ffb6 	bl	8005f14 <ull_calcbandwidthadj>
 8005fa8:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8005fac:	2200      	movs	r2, #0
 8005fae:	4905      	ldr	r1, [pc, #20]	; (8005fc4 <ull_configuretxrf+0x2c>)
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f7ff f9e9 	bl	8005388 <dwt_write32bitoffsetreg>
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	7823      	ldrb	r3, [r4, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4902      	ldr	r1, [pc, #8]	; (8005fc8 <ull_configuretxrf+0x30>)
 8005fbe:	f7ff f890 	bl	80050e2 <dwt_write8bitoffsetreg>
 8005fc2:	e7f1      	b.n	8005fa8 <ull_configuretxrf+0x10>
 8005fc4:	0001000c 	.word	0x0001000c
 8005fc8:	0007001c 	.word	0x0007001c

08005fcc <ull_repeated_frames>:
 8005fcc:	b530      	push	{r4, r5, lr}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	23ff      	movs	r3, #255	; 0xff
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4906      	ldr	r1, [pc, #24]	; (8005ff8 <ull_repeated_frames+0x2c>)
 8005fde:	f7ff ff4f 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	2d02      	cmp	r5, #2
 8005fe6:	bf38      	it	cc
 8005fe8:	2302      	movcc	r3, #2
 8005fea:	2200      	movs	r2, #0
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f7ff f9ca 	bl	8005388 <dwt_write32bitoffsetreg>
 8005ff4:	b003      	add	sp, #12
 8005ff6:	bd30      	pop	{r4, r5, pc}
 8005ff8:	000f0024 	.word	0x000f0024

08005ffc <ull_setdwstate>:
 8005ffc:	b530      	push	{r4, r5, lr}
 8005ffe:	b083      	sub	sp, #12
 8006000:	4604      	mov	r4, r0
 8006002:	2901      	cmp	r1, #1
 8006004:	d01d      	beq.n	8006042 <ull_setdwstate+0x46>
 8006006:	2902      	cmp	r1, #2
 8006008:	d030      	beq.n	800606c <ull_setdwstate+0x70>
 800600a:	2301      	movs	r3, #1
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	23ff      	movs	r3, #255	; 0xff
 8006010:	2200      	movs	r2, #0
 8006012:	4926      	ldr	r1, [pc, #152]	; (80060ac <ull_setdwstate+0xb0>)
 8006014:	f7ff ff34 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8006018:	4d25      	ldr	r5, [pc, #148]	; (80060b0 <ull_setdwstate+0xb4>)
 800601a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006024:	2200      	movs	r2, #0
 8006026:	4629      	mov	r1, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f7ff fd3f 	bl	8005aac <dwt_modify32bitoffsetreg>
 800602e:	2300      	movs	r3, #0
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	237f      	movs	r3, #127	; 0x7f
 8006034:	2202      	movs	r2, #2
 8006036:	4629      	mov	r1, r5
 8006038:	4620      	mov	r0, r4
 800603a:	f7ff ff21 	bl	8005e80 <dwt_modify8bitoffsetreg>
 800603e:	b003      	add	sp, #12
 8006040:	bd30      	pop	{r4, r5, pc}
 8006042:	2105      	movs	r1, #5
 8006044:	f7ff f8d0 	bl	80051e8 <ull_force_clocks>
 8006048:	f44f 7381 	mov.w	r3, #258	; 0x102
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006052:	2200      	movs	r2, #0
 8006054:	4917      	ldr	r1, [pc, #92]	; (80060b4 <ull_setdwstate+0xb8>)
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff fd28 	bl	8005aac <dwt_modify32bitoffsetreg>
 800605c:	2201      	movs	r2, #1
 800605e:	9200      	str	r2, [sp, #0]
 8006060:	23ff      	movs	r3, #255	; 0xff
 8006062:	4913      	ldr	r1, [pc, #76]	; (80060b0 <ull_setdwstate+0xb4>)
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ff0b 	bl	8005e80 <dwt_modify8bitoffsetreg>
 800606a:	e7e8      	b.n	800603e <ull_setdwstate+0x42>
 800606c:	2303      	movs	r3, #3
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	23ff      	movs	r3, #255	; 0xff
 8006072:	2200      	movs	r2, #0
 8006074:	490d      	ldr	r1, [pc, #52]	; (80060ac <ull_setdwstate+0xb0>)
 8006076:	f7ff ff03 	bl	8005e80 <dwt_modify8bitoffsetreg>
 800607a:	4d0d      	ldr	r5, [pc, #52]	; (80060b0 <ull_setdwstate+0xb4>)
 800607c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006086:	2200      	movs	r2, #0
 8006088:	4629      	mov	r1, r5
 800608a:	4620      	mov	r0, r4
 800608c:	f7ff fd0e 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006090:	2300      	movs	r3, #0
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	237f      	movs	r3, #127	; 0x7f
 8006096:	2202      	movs	r2, #2
 8006098:	4629      	mov	r1, r5
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff fef0 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80060a0:	2105      	movs	r1, #5
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff f8a0 	bl	80051e8 <ull_force_clocks>
 80060a8:	e7c9      	b.n	800603e <ull_setdwstate+0x42>
 80060aa:	bf00      	nop
 80060ac:	00110004 	.word	0x00110004
 80060b0:	00110008 	.word	0x00110008
 80060b4:	00090008 	.word	0x00090008

080060b8 <ull_configureframefilter>:
 80060b8:	b530      	push	{r4, r5, lr}
 80060ba:	b083      	sub	sp, #12
 80060bc:	4605      	mov	r5, r0
 80060be:	2902      	cmp	r1, #2
 80060c0:	d00e      	beq.n	80060e0 <ull_configureframefilter+0x28>
 80060c2:	2400      	movs	r4, #0
 80060c4:	9400      	str	r4, [sp, #0]
 80060c6:	23fe      	movs	r3, #254	; 0xfe
 80060c8:	4622      	mov	r2, r4
 80060ca:	2110      	movs	r1, #16
 80060cc:	f7ff fed8 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80060d0:	4623      	mov	r3, r4
 80060d2:	4622      	mov	r2, r4
 80060d4:	2114      	movs	r1, #20
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7ff f855 	bl	8005186 <dwt_write16bitoffsetreg>
 80060dc:	b003      	add	sp, #12
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	4614      	mov	r4, r2
 80060e2:	2301      	movs	r3, #1
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	23ff      	movs	r3, #255	; 0xff
 80060e8:	2200      	movs	r2, #0
 80060ea:	2110      	movs	r1, #16
 80060ec:	f7ff fec8 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80060f0:	4623      	mov	r3, r4
 80060f2:	2200      	movs	r2, #0
 80060f4:	2114      	movs	r1, #20
 80060f6:	4628      	mov	r0, r5
 80060f8:	f7ff f845 	bl	8005186 <dwt_write16bitoffsetreg>
 80060fc:	e7ee      	b.n	80060dc <ull_configureframefilter+0x24>
	...

08006100 <ull_run_pgfcal>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	4605      	mov	r5, r0
 8006108:	4c29      	ldr	r4, [pc, #164]	; (80061b0 <ull_run_pgfcal+0xb0>)
 800610a:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <ull_run_pgfcal+0xb4>)
 800610c:	2200      	movs	r2, #0
 800610e:	4621      	mov	r1, r4
 8006110:	f7ff f93a 	bl	8005388 <dwt_write32bitoffsetreg>
 8006114:	2310      	movs	r3, #16
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	23ff      	movs	r3, #255	; 0xff
 800611a:	2200      	movs	r2, #0
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f7ff feae 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8006124:	2403      	movs	r4, #3
 8006126:	f04f 0814 	mov.w	r8, #20
 800612a:	4f23      	ldr	r7, [pc, #140]	; (80061b8 <ull_run_pgfcal+0xb8>)
 800612c:	2600      	movs	r6, #0
 800612e:	4640      	mov	r0, r8
 8006130:	f7fa fb97 	bl	8000862 <deca_usleep>
 8006134:	4632      	mov	r2, r6
 8006136:	4639      	mov	r1, r7
 8006138:	4628      	mov	r0, r5
 800613a:	f7fe fc0b 	bl	8004954 <dwt_read8bitoffsetreg>
 800613e:	2801      	cmp	r0, #1
 8006140:	d034      	beq.n	80061ac <ull_run_pgfcal+0xac>
 8006142:	1e63      	subs	r3, r4, #1
 8006144:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8006148:	d1f1      	bne.n	800612e <ull_run_pgfcal+0x2e>
 800614a:	f06f 0402 	mvn.w	r4, #2
 800614e:	4e18      	ldr	r6, [pc, #96]	; (80061b0 <ull_run_pgfcal+0xb0>)
 8006150:	2300      	movs	r3, #0
 8006152:	461a      	mov	r2, r3
 8006154:	4631      	mov	r1, r6
 8006156:	4628      	mov	r0, r5
 8006158:	f7fe ffc3 	bl	80050e2 <dwt_write8bitoffsetreg>
 800615c:	2301      	movs	r3, #1
 800615e:	2200      	movs	r2, #0
 8006160:	4915      	ldr	r1, [pc, #84]	; (80061b8 <ull_run_pgfcal+0xb8>)
 8006162:	4628      	mov	r0, r5
 8006164:	f7fe ffbd 	bl	80050e2 <dwt_write8bitoffsetreg>
 8006168:	2301      	movs	r3, #1
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	23ff      	movs	r3, #255	; 0xff
 800616e:	2202      	movs	r2, #2
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	f7ff fe84 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8006178:	2200      	movs	r2, #0
 800617a:	4910      	ldr	r1, [pc, #64]	; (80061bc <ull_run_pgfcal+0xbc>)
 800617c:	4628      	mov	r0, r5
 800617e:	f7fe fbc1 	bl	8004904 <dwt_read32bitoffsetreg>
 8006182:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006186:	4298      	cmp	r0, r3
 8006188:	bf08      	it	eq
 800618a:	f06f 0403 	mvneq.w	r4, #3
 800618e:	2200      	movs	r2, #0
 8006190:	490b      	ldr	r1, [pc, #44]	; (80061c0 <ull_run_pgfcal+0xc0>)
 8006192:	4628      	mov	r0, r5
 8006194:	f7fe fbb6 	bl	8004904 <dwt_read32bitoffsetreg>
 8006198:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800619c:	4298      	cmp	r0, r3
 800619e:	bf14      	ite	ne
 80061a0:	4620      	movne	r0, r4
 80061a2:	f06f 0004 	mvneq.w	r0, #4
 80061a6:	b002      	add	sp, #8
 80061a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ac:	2400      	movs	r4, #0
 80061ae:	e7ce      	b.n	800614e <ull_run_pgfcal+0x4e>
 80061b0:	0004000c 	.word	0x0004000c
 80061b4:	00020001 	.word	0x00020001
 80061b8:	00040020 	.word	0x00040020
 80061bc:	00040014 	.word	0x00040014
 80061c0:	0004001c 	.word	0x0004001c

080061c4 <prs_ack_enable>:
 80061c4:	b500      	push	{lr}
 80061c6:	b083      	sub	sp, #12
 80061c8:	2900      	cmp	r1, #0
 80061ca:	bf0b      	itete	eq
 80061cc:	23ff      	moveq	r3, #255	; 0xff
 80061ce:	23f7      	movne	r3, #247	; 0xf7
 80061d0:	2200      	moveq	r2, #0
 80061d2:	2208      	movne	r2, #8
 80061d4:	9200      	str	r2, [sp, #0]
 80061d6:	2201      	movs	r2, #1
 80061d8:	2110      	movs	r1, #16
 80061da:	f7ff fe51 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80061de:	b003      	add	sp, #12
 80061e0:	f85d fb04 	ldr.w	pc, [sp], #4

080061e4 <dwt_modify16bitoffsetreg>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80061ec:	f88d 300c 	strb.w	r3, [sp, #12]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f88d 300d 	strb.w	r3, [sp, #13]
 80061f6:	f88d 400e 	strb.w	r4, [sp, #14]
 80061fa:	0a24      	lsrs	r4, r4, #8
 80061fc:	f88d 400f 	strb.w	r4, [sp, #15]
 8006200:	f248 0302 	movw	r3, #32770	; 0x8002
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	ab03      	add	r3, sp, #12
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2304      	movs	r3, #4
 800620c:	b292      	uxth	r2, r2
 800620e:	f7fe faec 	bl	80047ea <dwt_xfer3xxx>
 8006212:	b004      	add	sp, #16
 8006214:	bd10      	pop	{r4, pc}
	...

08006218 <_dwt_prog_ldo_and_bias_tune>:
 8006218:	b510      	push	{r4, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	4604      	mov	r4, r0
 800621e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006228:	2200      	movs	r2, #0
 800622a:	4907      	ldr	r1, [pc, #28]	; (8006248 <_dwt_prog_ldo_and_bias_tune+0x30>)
 800622c:	f7ff ffda 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006230:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006232:	7a1b      	ldrb	r3, [r3, #8]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800623a:	2200      	movs	r2, #0
 800623c:	4903      	ldr	r1, [pc, #12]	; (800624c <_dwt_prog_ldo_and_bias_tune+0x34>)
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff ffd0 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006244:	b002      	add	sp, #8
 8006246:	bd10      	pop	{r4, pc}
 8006248:	000b0008 	.word	0x000b0008
 800624c:	0011001f 	.word	0x0011001f

08006250 <ull_setleds>:
 8006250:	b530      	push	{r4, r5, lr}
 8006252:	b083      	sub	sp, #12
 8006254:	4604      	mov	r4, r0
 8006256:	f011 0f01 	tst.w	r1, #1
 800625a:	d01f      	beq.n	800629c <ull_setleds+0x4c>
 800625c:	460d      	mov	r5, r1
 800625e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8006268:	2200      	movs	r2, #0
 800626a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800626e:	f7ff fc1d 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006272:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800627c:	2200      	movs	r2, #0
 800627e:	4918      	ldr	r1, [pc, #96]	; (80062e0 <ull_setleds+0x90>)
 8006280:	4620      	mov	r0, r4
 8006282:	f7ff fc13 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006286:	f015 0f02 	tst.w	r5, #2
 800628a:	d11a      	bne.n	80062c2 <ull_setleds+0x72>
 800628c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006290:	2200      	movs	r2, #0
 8006292:	4914      	ldr	r1, [pc, #80]	; (80062e4 <ull_setleds+0x94>)
 8006294:	4620      	mov	r0, r4
 8006296:	f7ff f877 	bl	8005388 <dwt_write32bitoffsetreg>
 800629a:	e010      	b.n	80062be <ull_setleds+0x6e>
 800629c:	2500      	movs	r5, #0
 800629e:	9500      	str	r5, [sp, #0]
 80062a0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80062a4:	462a      	mov	r2, r5
 80062a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80062aa:	f7ff fbff 	bl	8005aac <dwt_modify32bitoffsetreg>
 80062ae:	9500      	str	r5, [sp, #0]
 80062b0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80062b4:	462a      	mov	r2, r5
 80062b6:	490b      	ldr	r1, [pc, #44]	; (80062e4 <ull_setleds+0x94>)
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff ff93 	bl	80061e4 <dwt_modify16bitoffsetreg>
 80062be:	b003      	add	sp, #12
 80062c0:	bd30      	pop	{r4, r5, pc}
 80062c2:	4d08      	ldr	r5, [pc, #32]	; (80062e4 <ull_setleds+0x94>)
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <ull_setleds+0x98>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	4629      	mov	r1, r5
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff f85c 	bl	8005388 <dwt_write32bitoffsetreg>
 80062d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062d4:	2200      	movs	r2, #0
 80062d6:	4629      	mov	r1, r5
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff f855 	bl	8005388 <dwt_write32bitoffsetreg>
 80062de:	e7ee      	b.n	80062be <ull_setleds+0x6e>
 80062e0:	00110004 	.word	0x00110004
 80062e4:	00110016 	.word	0x00110016
 80062e8:	000f0110 	.word	0x000f0110

080062ec <ull_pgf_cal>:
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ee:	b083      	sub	sp, #12
 80062f0:	4604      	mov	r4, r0
 80062f2:	2901      	cmp	r1, #1
 80062f4:	d009      	beq.n	800630a <ull_pgf_cal+0x1e>
 80062f6:	2014      	movs	r0, #20
 80062f8:	f7fa fab3 	bl	8000862 <deca_usleep>
 80062fc:	4620      	mov	r0, r4
 80062fe:	f7ff feff 	bl	8006100 <ull_run_pgfcal>
 8006302:	4605      	mov	r5, r0
 8006304:	4628      	mov	r0, r5
 8006306:	b003      	add	sp, #12
 8006308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630a:	4e0f      	ldr	r6, [pc, #60]	; (8006348 <ull_pgf_cal+0x5c>)
 800630c:	2200      	movs	r2, #0
 800630e:	4631      	mov	r1, r6
 8006310:	f7fe fb0e 	bl	8004930 <dwt_read16bitoffsetreg>
 8006314:	4607      	mov	r7, r0
 8006316:	f240 1305 	movw	r3, #261	; 0x105
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006320:	2200      	movs	r2, #0
 8006322:	4631      	mov	r1, r6
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff ff5d 	bl	80061e4 <dwt_modify16bitoffsetreg>
 800632a:	2014      	movs	r0, #20
 800632c:	f7fa fa99 	bl	8000862 <deca_usleep>
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff fee5 	bl	8006100 <ull_run_pgfcal>
 8006336:	4605      	mov	r5, r0
 8006338:	2200      	movs	r2, #0
 800633a:	9200      	str	r2, [sp, #0]
 800633c:	463b      	mov	r3, r7
 800633e:	4631      	mov	r1, r6
 8006340:	4620      	mov	r0, r4
 8006342:	f7ff ff4f 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006346:	e7dd      	b.n	8006304 <ull_pgf_cal+0x18>
 8006348:	00070048 	.word	0x00070048

0800634c <ull_setgpiovalue>:
 800634c:	b500      	push	{lr}
 800634e:	b083      	sub	sp, #12
 8006350:	2a01      	cmp	r2, #1
 8006352:	d009      	beq.n	8006368 <ull_setgpiovalue+0x1c>
 8006354:	43cb      	mvns	r3, r1
 8006356:	2200      	movs	r2, #0
 8006358:	9200      	str	r2, [sp, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	4906      	ldr	r1, [pc, #24]	; (8006378 <ull_setgpiovalue+0x2c>)
 800635e:	f7ff ff41 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006362:	b003      	add	sp, #12
 8006364:	f85d fb04 	ldr.w	pc, [sp], #4
 8006368:	9100      	str	r1, [sp, #0]
 800636a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800636e:	2200      	movs	r2, #0
 8006370:	4901      	ldr	r1, [pc, #4]	; (8006378 <ull_setgpiovalue+0x2c>)
 8006372:	f7ff ff37 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006376:	e7f4      	b.n	8006362 <ull_setgpiovalue+0x16>
 8006378:	0005000c 	.word	0x0005000c

0800637c <ull_readaccdata>:
 800637c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637e:	b083      	sub	sp, #12
 8006380:	4604      	mov	r4, r0
 8006382:	460f      	mov	r7, r1
 8006384:	4616      	mov	r6, r2
 8006386:	461d      	mov	r5, r3
 8006388:	f248 0340 	movw	r3, #32832	; 0x8040
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006392:	2200      	movs	r2, #0
 8006394:	4918      	ldr	r1, [pc, #96]	; (80063f8 <ull_readaccdata+0x7c>)
 8006396:	f7ff ff25 	bl	80061e4 <dwt_modify16bitoffsetreg>
 800639a:	19aa      	adds	r2, r5, r6
 800639c:	f243 0301 	movw	r3, #12289	; 0x3001
 80063a0:	429a      	cmp	r2, r3
 80063a2:	dc15      	bgt.n	80063d0 <ull_readaccdata+0x54>
 80063a4:	2d7f      	cmp	r5, #127	; 0x7f
 80063a6:	d91d      	bls.n	80063e4 <ull_readaccdata+0x68>
 80063a8:	2315      	movs	r3, #21
 80063aa:	2200      	movs	r2, #0
 80063ac:	4913      	ldr	r1, [pc, #76]	; (80063fc <ull_readaccdata+0x80>)
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7fe ffea 	bl	8005388 <dwt_write32bitoffsetreg>
 80063b4:	462b      	mov	r3, r5
 80063b6:	2200      	movs	r2, #0
 80063b8:	4911      	ldr	r1, [pc, #68]	; (8006400 <ull_readaccdata+0x84>)
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7fe ffe4 	bl	8005388 <dwt_write32bitoffsetreg>
 80063c0:	9700      	str	r7, [sp, #0]
 80063c2:	4633      	mov	r3, r6
 80063c4:	2200      	movs	r2, #0
 80063c6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7fe fa90 	bl	80048f0 <dwt_readfromdevice>
 80063d0:	2200      	movs	r2, #0
 80063d2:	9200      	str	r2, [sp, #0]
 80063d4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80063d8:	4907      	ldr	r1, [pc, #28]	; (80063f8 <ull_readaccdata+0x7c>)
 80063da:	4620      	mov	r0, r4
 80063dc:	f7ff ff02 	bl	80061e4 <dwt_modify16bitoffsetreg>
 80063e0:	b003      	add	sp, #12
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e4:	9700      	str	r7, [sp, #0]
 80063e6:	4633      	mov	r3, r6
 80063e8:	462a      	mov	r2, r5
 80063ea:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7fe fa7e 	bl	80048f0 <dwt_readfromdevice>
 80063f4:	e7ec      	b.n	80063d0 <ull_readaccdata+0x54>
 80063f6:	bf00      	nop
 80063f8:	00110004 	.word	0x00110004
 80063fc:	001f0004 	.word	0x001f0004
 8006400:	001f0008 	.word	0x001f0008

08006404 <ull_repeated_cw>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	4606      	mov	r6, r0
 8006408:	460c      	mov	r4, r1
 800640a:	4615      	mov	r5, r2
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <ull_repeated_cw+0x44>)
 800640e:	2202      	movs	r2, #2
 8006410:	490e      	ldr	r1, [pc, #56]	; (800644c <ull_repeated_cw+0x48>)
 8006412:	f7fe ffb9 	bl	8005388 <dwt_write32bitoffsetreg>
 8006416:	2d0f      	cmp	r5, #15
 8006418:	bfa8      	it	ge
 800641a:	250f      	movge	r5, #15
 800641c:	1e63      	subs	r3, r4, #1
 800641e:	2b03      	cmp	r3, #3
 8006420:	bf28      	it	cs
 8006422:	2404      	movcs	r4, #4
 8006424:	2310      	movs	r3, #16
 8006426:	4123      	asrs	r3, r4
 8006428:	2200      	movs	r2, #0
 800642a:	4909      	ldr	r1, [pc, #36]	; (8006450 <ull_repeated_cw+0x4c>)
 800642c:	4630      	mov	r0, r6
 800642e:	f7fe ffab 	bl	8005388 <dwt_write32bitoffsetreg>
 8006432:	1e63      	subs	r3, r4, #1
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	fa05 f303 	lsl.w	r3, r5, r3
 800643a:	2200      	movs	r2, #0
 800643c:	4905      	ldr	r1, [pc, #20]	; (8006454 <ull_repeated_cw+0x50>)
 800643e:	4630      	mov	r0, r6
 8006440:	f7fe ffa2 	bl	8005388 <dwt_write32bitoffsetreg>
 8006444:	bd70      	pop	{r4, r5, r6, pc}
 8006446:	bf00      	nop
 8006448:	00d20874 	.word	0x00d20874
 800644c:	00110010 	.word	0x00110010
 8006450:	00070028 	.word	0x00070028
 8006454:	00080018 	.word	0x00080018

08006458 <ull_configure>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	b083      	sub	sp, #12
 800645e:	4604      	mov	r4, r0
 8006460:	460d      	mov	r5, r1
 8006462:	f891 9000 	ldrb.w	r9, [r1]
 8006466:	790b      	ldrb	r3, [r1, #4]
 8006468:	2b18      	cmp	r3, #24
 800646a:	d814      	bhi.n	8006496 <ull_configure+0x3e>
 800646c:	78cf      	ldrb	r7, [r1, #3]
 800646e:	2f18      	cmp	r7, #24
 8006470:	bf94      	ite	ls
 8006472:	2700      	movls	r7, #0
 8006474:	2701      	movhi	r7, #1
 8006476:	b2ff      	uxtb	r7, r7
 8006478:	79eb      	ldrb	r3, [r5, #7]
 800647a:	2b01      	cmp	r3, #1
 800647c:	bf0c      	ite	eq
 800647e:	2110      	moveq	r1, #16
 8006480:	2100      	movne	r1, #0
 8006482:	786b      	ldrb	r3, [r5, #1]
 8006484:	3b01      	subs	r3, #1
 8006486:	2b06      	cmp	r3, #6
 8006488:	d810      	bhi.n	80064ac <ull_configure+0x54>
 800648a:	e8df f003 	tbb	[pc, r3]
 800648e:	0f06      	.short	0x0f06
 8006490:	0f0c120f 	.word	0x0f0c120f
 8006494:	09          	.byte	0x09
 8006495:	00          	.byte	0x00
 8006496:	2701      	movs	r7, #1
 8006498:	e7ed      	b.n	8006476 <ull_configure+0x1e>
 800649a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800649e:	e00a      	b.n	80064b6 <ull_configure+0x5e>
 80064a0:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80064a4:	e007      	b.n	80064b6 <ull_configure+0x5e>
 80064a6:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80064aa:	e004      	b.n	80064b6 <ull_configure+0x5e>
 80064ac:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80064b0:	e001      	b.n	80064b6 <ull_configure+0x5e>
 80064b2:	f04f 0a20 	mov.w	sl, #32
 80064b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064b8:	8a53      	ldrh	r3, [r2, #18]
 80064ba:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80064be:	8253      	strh	r3, [r2, #18]
 80064c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064c2:	79ea      	ldrb	r2, [r5, #7]
 80064c4:	731a      	strb	r2, [r3, #12]
 80064c6:	7b2e      	ldrb	r6, [r5, #12]
 80064c8:	1cb3      	adds	r3, r6, #2
 80064ca:	2601      	movs	r6, #1
 80064cc:	409e      	lsls	r6, r3
 80064ce:	fa1f f886 	uxth.w	r8, r6
 80064d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064d4:	4bc7      	ldr	r3, [pc, #796]	; (80067f4 <ull_configure+0x39c>)
 80064d6:	fb03 f308 	mul.w	r3, r3, r8
 80064da:	0bdb      	lsrs	r3, r3, #15
 80064dc:	8293      	strh	r3, [r2, #20]
 80064de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064e0:	7aea      	ldrb	r2, [r5, #11]
 80064e2:	75da      	strb	r2, [r3, #23]
 80064e4:	7a2b      	ldrb	r3, [r5, #8]
 80064e6:	015b      	lsls	r3, r3, #5
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	7b6a      	ldrb	r2, [r5, #13]
 80064ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064f2:	7aea      	ldrb	r2, [r5, #11]
 80064f4:	0312      	lsls	r2, r2, #12
 80064f6:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80064fa:	4313      	orrs	r3, r2
 80064fc:	430b      	orrs	r3, r1
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4bbd      	ldr	r3, [pc, #756]	; (80067f8 <ull_configure+0x3a0>)
 8006502:	2200      	movs	r2, #0
 8006504:	2110      	movs	r1, #16
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff fad0 	bl	8005aac <dwt_modify32bitoffsetreg>
 800650c:	2f00      	cmp	r7, #0
 800650e:	f040 80f6 	bne.w	80066fe <ull_configure+0x2a6>
 8006512:	7aeb      	ldrb	r3, [r5, #11]
 8006514:	b1f3      	cbz	r3, 8006554 <ull_configure+0xfc>
 8006516:	7b6b      	ldrb	r3, [r5, #13]
 8006518:	2b01      	cmp	r3, #1
 800651a:	f240 811c 	bls.w	8006756 <ull_configure+0x2fe>
 800651e:	7b2a      	ldrb	r2, [r5, #12]
 8006520:	4bb6      	ldr	r3, [pc, #728]	; (80067fc <ull_configure+0x3a4>)
 8006522:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006526:	0112      	lsls	r2, r2, #4
 8006528:	0ad3      	lsrs	r3, r2, #11
 800652a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800652e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006532:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006536:	bf28      	it	cs
 8006538:	3301      	addcs	r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8006540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	f64f 7380 	movw	r3, #65408	; 0xff80
 800654a:	2202      	movs	r2, #2
 800654c:	49ac      	ldr	r1, [pc, #688]	; (8006800 <ull_configure+0x3a8>)
 800654e:	4620      	mov	r0, r4
 8006550:	f7ff fe48 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006554:	2394      	movs	r3, #148	; 0x94
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	4baa      	ldr	r3, [pc, #680]	; (8006804 <ull_configure+0x3ac>)
 800655a:	2200      	movs	r2, #0
 800655c:	49aa      	ldr	r1, [pc, #680]	; (8006808 <ull_configure+0x3b0>)
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff faa4 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006564:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8006568:	f340 8108 	ble.w	800677c <ull_configure+0x324>
 800656c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800656e:	8a53      	ldrh	r3, [r2, #18]
 8006570:	f043 0320 	orr.w	r3, r3, #32
 8006574:	8253      	strh	r3, [r2, #18]
 8006576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8006580:	2200      	movs	r2, #0
 8006582:	49a2      	ldr	r1, [pc, #648]	; (800680c <ull_configure+0x3b4>)
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff fe2d 	bl	80061e4 <dwt_modify16bitoffsetreg>
 800658a:	7b6b      	ldrb	r3, [r5, #13]
 800658c:	2b01      	cmp	r3, #1
 800658e:	f000 8100 	beq.w	8006792 <ull_configure+0x33a>
 8006592:	78ab      	ldrb	r3, [r5, #2]
 8006594:	f043 0310 	orr.w	r3, r3, #16
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	23fc      	movs	r3, #252	; 0xfc
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80065a2:	4620      	mov	r0, r4
 80065a4:	f7ff fc6c 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80065a8:	1e73      	subs	r3, r6, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7fe fd95 	bl	80050e2 <dwt_write8bitoffsetreg>
 80065b8:	786b      	ldrb	r3, [r5, #1]
 80065ba:	2b07      	cmp	r3, #7
 80065bc:	bf0c      	ite	eq
 80065be:	2308      	moveq	r3, #8
 80065c0:	2300      	movne	r3, #0
 80065c2:	2201      	movs	r2, #1
 80065c4:	2128      	movs	r1, #40	; 0x28
 80065c6:	4620      	mov	r0, r4
 80065c8:	f7fe fd8b 	bl	80050e2 <dwt_write8bitoffsetreg>
 80065cc:	4b90      	ldr	r3, [pc, #576]	; (8006810 <ull_configure+0x3b8>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	4990      	ldr	r1, [pc, #576]	; (8006814 <ull_configure+0x3bc>)
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7fe fed8 	bl	8005388 <dwt_write32bitoffsetreg>
 80065d8:	2200      	movs	r2, #0
 80065da:	498f      	ldr	r1, [pc, #572]	; (8006818 <ull_configure+0x3c0>)
 80065dc:	4620      	mov	r0, r4
 80065de:	f7fe f991 	bl	8004904 <dwt_read32bitoffsetreg>
 80065e2:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80065e6:	f020 001f 	bic.w	r0, r0, #31
 80065ea:	f1b9 0f09 	cmp.w	r9, #9
 80065ee:	bf08      	it	eq
 80065f0:	f040 0001 	orreq.w	r0, r0, #1
 80065f4:	792a      	ldrb	r2, [r5, #4]
 80065f6:	0212      	lsls	r2, r2, #8
 80065f8:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80065fc:	78eb      	ldrb	r3, [r5, #3]
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	431a      	orrs	r2, r3
 8006604:	796b      	ldrb	r3, [r5, #5]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	f003 0306 	and.w	r3, r3, #6
 800660c:	4313      	orrs	r3, r2
 800660e:	4303      	orrs	r3, r0
 8006610:	2200      	movs	r2, #0
 8006612:	4981      	ldr	r1, [pc, #516]	; (8006818 <ull_configure+0x3c0>)
 8006614:	4620      	mov	r0, r4
 8006616:	f7fe feb7 	bl	8005388 <dwt_write32bitoffsetreg>
 800661a:	79aa      	ldrb	r2, [r5, #6]
 800661c:	786b      	ldrb	r3, [r5, #1]
 800661e:	031b      	lsls	r3, r3, #12
 8006620:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800662a:	2200      	movs	r2, #0
 800662c:	2124      	movs	r1, #36	; 0x24
 800662e:	4620      	mov	r0, r4
 8006630:	f7ff fa3c 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006634:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8006638:	b923      	cbnz	r3, 8006644 <ull_configure+0x1ec>
 800663a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800663e:	726b      	strb	r3, [r5, #9]
 8006640:	2300      	movs	r3, #0
 8006642:	72ab      	strb	r3, [r5, #10]
 8006644:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8006648:	2202      	movs	r2, #2
 800664a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800664e:	4620      	mov	r0, r4
 8006650:	f7fe fd99 	bl	8005186 <dwt_write16bitoffsetreg>
 8006654:	2202      	movs	r2, #2
 8006656:	4971      	ldr	r1, [pc, #452]	; (800681c <ull_configure+0x3c4>)
 8006658:	4620      	mov	r0, r4
 800665a:	f7fe f97b 	bl	8004954 <dwt_read8bitoffsetreg>
 800665e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006660:	7c1b      	ldrb	r3, [r3, #16]
 8006662:	454b      	cmp	r3, r9
 8006664:	f000 809f 	beq.w	80067a6 <ull_configure+0x34e>
 8006668:	2803      	cmp	r0, #3
 800666a:	f000 80a0 	beq.w	80067ae <ull_configure+0x356>
 800666e:	f1b9 0f09 	cmp.w	r9, #9
 8006672:	f000 80a1 	beq.w	80067b8 <ull_configure+0x360>
 8006676:	4b6a      	ldr	r3, [pc, #424]	; (8006820 <ull_configure+0x3c8>)
 8006678:	2200      	movs	r2, #0
 800667a:	496a      	ldr	r1, [pc, #424]	; (8006824 <ull_configure+0x3cc>)
 800667c:	4620      	mov	r0, r4
 800667e:	f7fe fe83 	bl	8005388 <dwt_write32bitoffsetreg>
 8006682:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8006686:	2200      	movs	r2, #0
 8006688:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800668c:	4620      	mov	r0, r4
 800668e:	f7fe fd7a 	bl	8005186 <dwt_write16bitoffsetreg>
 8006692:	2314      	movs	r3, #20
 8006694:	2201      	movs	r2, #1
 8006696:	4964      	ldr	r1, [pc, #400]	; (8006828 <ull_configure+0x3d0>)
 8006698:	4620      	mov	r0, r4
 800669a:	f7fe fd22 	bl	80050e2 <dwt_write8bitoffsetreg>
 800669e:	230e      	movs	r3, #14
 80066a0:	2202      	movs	r2, #2
 80066a2:	4962      	ldr	r1, [pc, #392]	; (800682c <ull_configure+0x3d4>)
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7fe fd1c 	bl	80050e2 <dwt_write8bitoffsetreg>
 80066aa:	2381      	movs	r3, #129	; 0x81
 80066ac:	2200      	movs	r2, #0
 80066ae:	4960      	ldr	r1, [pc, #384]	; (8006830 <ull_configure+0x3d8>)
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7fe fd16 	bl	80050e2 <dwt_write8bitoffsetreg>
 80066b6:	2302      	movs	r3, #2
 80066b8:	2200      	movs	r2, #0
 80066ba:	2144      	movs	r1, #68	; 0x44
 80066bc:	4620      	mov	r0, r4
 80066be:	f7fe fd10 	bl	80050e2 <dwt_write8bitoffsetreg>
 80066c2:	2101      	movs	r1, #1
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7ff fc99 	bl	8005ffc <ull_setdwstate>
 80066ca:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80066ce:	f04f 0814 	mov.w	r8, #20
 80066d2:	2700      	movs	r7, #0
 80066d4:	2644      	movs	r6, #68	; 0x44
 80066d6:	4640      	mov	r0, r8
 80066d8:	f7fa f8c3 	bl	8000862 <deca_usleep>
 80066dc:	463a      	mov	r2, r7
 80066de:	4631      	mov	r1, r6
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7fe f937 	bl	8004954 <dwt_read8bitoffsetreg>
 80066e6:	f010 0f02 	tst.w	r0, #2
 80066ea:	f040 80ab 	bne.w	8006844 <ull_configure+0x3ec>
 80066ee:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80066f2:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80066f6:	d1ee      	bne.n	80066d6 <ull_configure+0x27e>
 80066f8:	f06f 0001 	mvn.w	r0, #1
 80066fc:	e0cf      	b.n	800689e <ull_configure+0x446>
 80066fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006700:	8a53      	ldrh	r3, [r2, #18]
 8006702:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006706:	8253      	strh	r3, [r2, #18]
 8006708:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006712:	2200      	movs	r2, #0
 8006714:	493d      	ldr	r1, [pc, #244]	; (800680c <ull_configure+0x3b4>)
 8006716:	4620      	mov	r0, r4
 8006718:	f7ff f9c8 	bl	8005aac <dwt_modify32bitoffsetreg>
 800671c:	f240 3306 	movw	r3, #774	; 0x306
 8006720:	2200      	movs	r2, #0
 8006722:	4944      	ldr	r1, [pc, #272]	; (8006834 <ull_configure+0x3dc>)
 8006724:	4620      	mov	r0, r4
 8006726:	f7fe fe2f 	bl	8005388 <dwt_write32bitoffsetreg>
 800672a:	2300      	movs	r3, #0
 800672c:	461a      	mov	r2, r3
 800672e:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 8006732:	4620      	mov	r0, r4
 8006734:	f7fe fe28 	bl	8005388 <dwt_write32bitoffsetreg>
 8006738:	4b3f      	ldr	r3, [pc, #252]	; (8006838 <ull_configure+0x3e0>)
 800673a:	2200      	movs	r2, #0
 800673c:	4930      	ldr	r1, [pc, #192]	; (8006800 <ull_configure+0x3a8>)
 800673e:	4620      	mov	r0, r4
 8006740:	f7fe fe22 	bl	8005388 <dwt_write32bitoffsetreg>
 8006744:	239d      	movs	r3, #157	; 0x9d
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <ull_configure+0x3ac>)
 800674a:	2200      	movs	r2, #0
 800674c:	492e      	ldr	r1, [pc, #184]	; (8006808 <ull_configure+0x3b0>)
 800674e:	4620      	mov	r0, r4
 8006750:	f7ff f9ac 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006754:	e719      	b.n	800658a <ull_configure+0x132>
 8006756:	7b2a      	ldrb	r2, [r5, #12]
 8006758:	4b28      	ldr	r3, [pc, #160]	; (80067fc <ull_configure+0x3a4>)
 800675a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800675e:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8006762:	fb02 f203 	mul.w	r2, r2, r3
 8006766:	0c93      	lsrs	r3, r2, #18
 8006768:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800676c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006770:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006774:	bf28      	it	cs
 8006776:	3301      	addcs	r3, #1
 8006778:	b29b      	uxth	r3, r3
 800677a:	e6df      	b.n	800653c <ull_configure+0xe4>
 800677c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8006786:	2200      	movs	r2, #0
 8006788:	4920      	ldr	r1, [pc, #128]	; (800680c <ull_configure+0x3b4>)
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff fd2a 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006790:	e6fb      	b.n	800658a <ull_configure+0x132>
 8006792:	78ab      	ldrb	r3, [r5, #2]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	23ec      	movs	r3, #236	; 0xec
 8006798:	2200      	movs	r2, #0
 800679a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800679e:	4620      	mov	r0, r4
 80067a0:	f7ff fb6e 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80067a4:	e700      	b.n	80065a8 <ull_configure+0x150>
 80067a6:	2803      	cmp	r0, #3
 80067a8:	f47f af61 	bne.w	800666e <ull_configure+0x216>
 80067ac:	e04d      	b.n	800684a <ull_configure+0x3f2>
 80067ae:	2102      	movs	r1, #2
 80067b0:	4620      	mov	r0, r4
 80067b2:	f7ff fc23 	bl	8005ffc <ull_setdwstate>
 80067b6:	e75a      	b.n	800666e <ull_configure+0x216>
 80067b8:	4b20      	ldr	r3, [pc, #128]	; (800683c <ull_configure+0x3e4>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	4919      	ldr	r1, [pc, #100]	; (8006824 <ull_configure+0x3cc>)
 80067be:	4620      	mov	r0, r4
 80067c0:	f7fe fde2 	bl	8005388 <dwt_write32bitoffsetreg>
 80067c4:	f640 733c 	movw	r3, #3900	; 0xf3c
 80067c8:	2200      	movs	r2, #0
 80067ca:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80067ce:	4620      	mov	r0, r4
 80067d0:	f7fe fcd9 	bl	8005186 <dwt_write16bitoffsetreg>
 80067d4:	e75d      	b.n	8006692 <ull_configure+0x23a>
 80067d6:	fa4f f189 	sxtb.w	r1, r9
 80067da:	4620      	mov	r0, r4
 80067dc:	f7ff f98a 	bl	8005af4 <_dwt_kick_dgc_on_wakeup>
 80067e0:	e040      	b.n	8006864 <ull_configure+0x40c>
 80067e2:	2200      	movs	r2, #0
 80067e4:	9200      	str	r2, [sp, #0]
 80067e6:	23fe      	movs	r3, #254	; 0xfe
 80067e8:	4915      	ldr	r1, [pc, #84]	; (8006840 <ull_configure+0x3e8>)
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff fb48 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80067f0:	e042      	b.n	8006878 <ull_configure+0x420>
 80067f2:	bf00      	nop
 80067f4:	00026668 	.word	0x00026668
 80067f8:	fffc4fcf 	.word	0xfffc4fcf
 80067fc:	08012018 	.word	0x08012018
 8006800:	000e0012 	.word	0x000e0012
 8006804:	bfffff00 	.word	0xbfffff00
 8006808:	000e0016 	.word	0x000e0016
 800680c:	000b0008 	.word	0x000b0008
 8006810:	af5f35cc 	.word	0xaf5f35cc
 8006814:	0006000c 	.word	0x0006000c
 8006818:	00010014 	.word	0x00010014
 800681c:	000f0030 	.word	0x000f0030
 8006820:	1c071134 	.word	0x1c071134
 8006824:	0007001c 	.word	0x0007001c
 8006828:	00070050 	.word	0x00070050
 800682c:	00070018 	.word	0x00070018
 8006830:	00090008 	.word	0x00090008
 8006834:	000e000c 	.word	0x000e000c
 8006838:	000c5a0a 	.word	0x000c5a0a
 800683c:	1c010034 	.word	0x1c010034
 8006840:	00030018 	.word	0x00030018
 8006844:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006846:	f883 9010 	strb.w	r9, [r3, #16]
 800684a:	792b      	ldrb	r3, [r5, #4]
 800684c:	3b09      	subs	r3, #9
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b0f      	cmp	r3, #15
 8006852:	d8c6      	bhi.n	80067e2 <ull_configure+0x38a>
 8006854:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006856:	7a5b      	ldrb	r3, [r3, #9]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d0bc      	beq.n	80067d6 <ull_configure+0x37e>
 800685c:	4649      	mov	r1, r9
 800685e:	4620      	mov	r0, r4
 8006860:	f7fe ffae 	bl	80057c0 <ull_configmrxlut>
 8006864:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800686e:	2200      	movs	r2, #0
 8006870:	490c      	ldr	r1, [pc, #48]	; (80068a4 <ull_configure+0x44c>)
 8006872:	4620      	mov	r0, r4
 8006874:	f7ff fcb6 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006878:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800687c:	bfcc      	ite	gt
 800687e:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8006882:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800688c:	2200      	movs	r2, #0
 800688e:	4906      	ldr	r1, [pc, #24]	; (80068a8 <ull_configure+0x450>)
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff f90b 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006896:	2101      	movs	r1, #1
 8006898:	4620      	mov	r0, r4
 800689a:	f7ff fd27 	bl	80062ec <ull_pgf_cal>
 800689e:	b003      	add	sp, #12
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	00030018 	.word	0x00030018
 80068a8:	00060010 	.word	0x00060010

080068ac <dwt_ioctl>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	b091      	sub	sp, #68	; 0x44
 80068b2:	4606      	mov	r6, r0
 80068b4:	4615      	mov	r5, r2
 80068b6:	461c      	mov	r4, r3
 80068b8:	299c      	cmp	r1, #156	; 0x9c
 80068ba:	f200 809f 	bhi.w	80069fc <dwt_ioctl+0x150>
 80068be:	e8df f011 	tbh	[pc, r1, lsl #1]
 80068c2:	0a6d      	.short	0x0a6d
 80068c4:	00a30a78 	.word	0x00a30a78
 80068c8:	00be00a7 	.word	0x00be00a7
 80068cc:	018e0148 	.word	0x018e0148
 80068d0:	0152016b 	.word	0x0152016b
 80068d4:	01a9019e 	.word	0x01a9019e
 80068d8:	01b901b1 	.word	0x01b901b1
 80068dc:	01c901c1 	.word	0x01c901c1
 80068e0:	01d501d1 	.word	0x01d501d1
 80068e4:	026e01dd 	.word	0x026e01dd
 80068e8:	0281027c 	.word	0x0281027c
 80068ec:	0290028b 	.word	0x0290028b
 80068f0:	029e0295 	.word	0x029e0295
 80068f4:	030902a3 	.word	0x030902a3
 80068f8:	0326031b 	.word	0x0326031b
 80068fc:	033b0331 	.word	0x033b0331
 8006900:	03690373 	.word	0x03690373
 8006904:	0345035f 	.word	0x0345035f
 8006908:	03c10352 	.word	0x03c10352
 800690c:	022b01f8 	.word	0x022b01f8
 8006910:	02410239 	.word	0x02410239
 8006914:	09960255 	.word	0x09960255
 8006918:	0382099b 	.word	0x0382099b
 800691c:	03e303df 	.word	0x03e303df
 8006920:	03f103ec 	.word	0x03f103ec
 8006924:	040503fb 	.word	0x040503fb
 8006928:	0437040d 	.word	0x0437040d
 800692c:	044e0443 	.word	0x044e0443
 8006930:	04590378 	.word	0x04590378
 8006934:	04740462 	.word	0x04740462
 8006938:	049e048d 	.word	0x049e048d
 800693c:	04ea04e0 	.word	0x04ea04e0
 8006940:	051a050b 	.word	0x051a050b
 8006944:	05230535 	.word	0x05230535
 8006948:	05970551 	.word	0x05970551
 800694c:	05cf05af 	.word	0x05cf05af
 8006950:	05f805e4 	.word	0x05f805e4
 8006954:	061d0601 	.word	0x061d0601
 8006958:	0773060a 	.word	0x0773060a
 800695c:	07ed079f 	.word	0x07ed079f
 8006960:	07fe07f3 	.word	0x07fe07f3
 8006964:	08370817 	.word	0x08370817
 8006968:	084b0841 	.word	0x084b0841
 800696c:	08820879 	.word	0x08820879
 8006970:	08910888 	.word	0x08910888
 8006974:	08ab089e 	.word	0x08ab089e
 8006978:	08be08b5 	.word	0x08be08b5
 800697c:	08d208c7 	.word	0x08d208c7
 8006980:	08e308dd 	.word	0x08e308dd
 8006984:	09110906 	.word	0x09110906
 8006988:	0945091c 	.word	0x0945091c
 800698c:	09720967 	.word	0x09720967
 8006990:	09a1098b 	.word	0x09a1098b
 8006994:	0a200a16 	.word	0x0a200a16
 8006998:	0a800a2b 	.word	0x0a800a2b
 800699c:	0a620a35 	.word	0x0a620a35
 80069a0:	09df0791 	.word	0x09df0791
 80069a4:	0aee0a00 	.word	0x0aee0a00
 80069a8:	0a8d0ae3 	.word	0x0a8d0ae3
 80069ac:	0aa30a98 	.word	0x0aa30a98
 80069b0:	0ab90aae 	.word	0x0ab90aae
 80069b4:	0acf0ac4 	.word	0x0acf0ac4
 80069b8:	0bd80ad8 	.word	0x0bd80ad8
 80069bc:	0c4d0c12 	.word	0x0c4d0c12
 80069c0:	0d290c70 	.word	0x0d290c70
 80069c4:	0b190d3e 	.word	0x0b190d3e
 80069c8:	009d009d 	.word	0x009d009d
 80069cc:	009d009d 	.word	0x009d009d
 80069d0:	009d009d 	.word	0x009d009d
 80069d4:	009d009d 	.word	0x009d009d
 80069d8:	009d009d 	.word	0x009d009d
 80069dc:	009d009d 	.word	0x009d009d
 80069e0:	009d009d 	.word	0x009d009d
 80069e4:	009d009d 	.word	0x009d009d
 80069e8:	009d009d 	.word	0x009d009d
 80069ec:	0c87009d 	.word	0x0c87009d
 80069f0:	0dce0ca5 	.word	0x0dce0ca5
 80069f4:	0ce40cef 	.word	0x0ce40cef
 80069f8:	0cfa0d03 	.word	0x0cfa0d03
 80069fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a00:	4628      	mov	r0, r5
 8006a02:	b011      	add	sp, #68	; 0x44
 8006a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a08:	6843      	ldr	r3, [r0, #4]
 8006a0a:	4798      	blx	r3
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	e7f7      	b.n	8006a00 <dwt_ioctl+0x154>
 8006a10:	2202      	movs	r2, #2
 8006a12:	49b7      	ldr	r1, [pc, #732]	; (8006cf0 <dwt_ioctl+0x444>)
 8006a14:	f7fd ff9e 	bl	8004954 <dwt_read8bitoffsetreg>
 8006a18:	2803      	cmp	r0, #3
 8006a1a:	d801      	bhi.n	8006a20 <dwt_ioctl+0x174>
 8006a1c:	2500      	movs	r5, #0
 8006a1e:	e7ef      	b.n	8006a00 <dwt_ioctl+0x154>
 8006a20:	f7f9 fef6 	bl	8000810 <decamutexon>
 8006a24:	4604      	mov	r4, r0
 8006a26:	2500      	movs	r5, #0
 8006a28:	9500      	str	r5, [sp, #0]
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	462a      	mov	r2, r5
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4630      	mov	r0, r6
 8006a32:	f7fe fb4b 	bl	80050cc <dwt_writetodevice>
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7f9 fefb 	bl	8000832 <decamutexoff>
 8006a3c:	e7e0      	b.n	8006a00 <dwt_ioctl+0x154>
 8006a3e:	2c00      	cmp	r4, #0
 8006a40:	f001 8510 	beq.w	8008464 <dwt_ioctl+0x1bb8>
 8006a44:	7824      	ldrb	r4, [r4, #0]
 8006a46:	f014 0f1d 	tst.w	r4, #29
 8006a4a:	d065      	beq.n	8006b18 <dwt_ioctl+0x26c>
 8006a4c:	f014 0f01 	tst.w	r4, #1
 8006a50:	d026      	beq.n	8006aa0 <dwt_ioctl+0x1f4>
 8006a52:	f014 0f02 	tst.w	r4, #2
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	9200      	str	r2, [sp, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	bf14      	ite	ne
 8006a60:	210d      	movne	r1, #13
 8006a62:	2103      	moveq	r1, #3
 8006a64:	f7fe fb32 	bl	80050cc <dwt_writetodevice>
 8006a68:	2203      	movs	r2, #3
 8006a6a:	2144      	movs	r1, #68	; 0x44
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7fd ff71 	bl	8004954 <dwt_read8bitoffsetreg>
 8006a72:	f010 0f08 	tst.w	r0, #8
 8006a76:	d145      	bne.n	8006b04 <dwt_ioctl+0x258>
 8006a78:	2200      	movs	r2, #0
 8006a7a:	499d      	ldr	r1, [pc, #628]	; (8006cf0 <dwt_ioctl+0x444>)
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f7fd ff41 	bl	8004904 <dwt_read32bitoffsetreg>
 8006a82:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8006a86:	bf18      	it	ne
 8006a88:	2500      	movne	r5, #0
 8006a8a:	d1b9      	bne.n	8006a00 <dwt_ioctl+0x154>
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	9100      	str	r1, [sp, #0]
 8006a90:	460b      	mov	r3, r1
 8006a92:	460a      	mov	r2, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7fe fb19 	bl	80050cc <dwt_writetodevice>
 8006a9a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a9e:	e7af      	b.n	8006a00 <dwt_ioctl+0x154>
 8006aa0:	f014 0f08 	tst.w	r4, #8
 8006aa4:	d10e      	bne.n	8006ac4 <dwt_ioctl+0x218>
 8006aa6:	f014 0f10 	tst.w	r4, #16
 8006aaa:	d11b      	bne.n	8006ae4 <dwt_ioctl+0x238>
 8006aac:	f014 0f02 	tst.w	r4, #2
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	9200      	str	r2, [sp, #0]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	bf14      	ite	ne
 8006aba:	2110      	movne	r1, #16
 8006abc:	2109      	moveq	r1, #9
 8006abe:	f7fe fb05 	bl	80050cc <dwt_writetodevice>
 8006ac2:	e7d1      	b.n	8006a68 <dwt_ioctl+0x1bc>
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f7fe fdd3 	bl	8005670 <_dwt_adjust_delaytime>
 8006aca:	f014 0f02 	tst.w	r4, #2
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	9200      	str	r2, [sp, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	bf14      	ite	ne
 8006ad8:	210f      	movne	r1, #15
 8006ada:	2107      	moveq	r1, #7
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7fe faf5 	bl	80050cc <dwt_writetodevice>
 8006ae2:	e7c1      	b.n	8006a68 <dwt_ioctl+0x1bc>
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	f7fe fdc3 	bl	8005670 <_dwt_adjust_delaytime>
 8006aea:	f014 0f02 	tst.w	r4, #2
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	9200      	str	r2, [sp, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	bf14      	ite	ne
 8006af8:	210e      	movne	r1, #14
 8006afa:	2105      	moveq	r1, #5
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7fe fae5 	bl	80050cc <dwt_writetodevice>
 8006b02:	e7b1      	b.n	8006a68 <dwt_ioctl+0x1bc>
 8006b04:	2100      	movs	r1, #0
 8006b06:	9100      	str	r1, [sp, #0]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7fe fadd 	bl	80050cc <dwt_writetodevice>
 8006b12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b16:	e773      	b.n	8006a00 <dwt_ioctl+0x154>
 8006b18:	f014 0f20 	tst.w	r4, #32
 8006b1c:	d00c      	beq.n	8006b38 <dwt_ioctl+0x28c>
 8006b1e:	f014 0f02 	tst.w	r4, #2
 8006b22:	f04f 0500 	mov.w	r5, #0
 8006b26:	9500      	str	r5, [sp, #0]
 8006b28:	462b      	mov	r3, r5
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	bf14      	ite	ne
 8006b2e:	2111      	movne	r1, #17
 8006b30:	210b      	moveq	r1, #11
 8006b32:	f7fe facb 	bl	80050cc <dwt_writetodevice>
 8006b36:	e763      	b.n	8006a00 <dwt_ioctl+0x154>
 8006b38:	f014 0f02 	tst.w	r4, #2
 8006b3c:	f04f 0500 	mov.w	r5, #0
 8006b40:	9500      	str	r5, [sp, #0]
 8006b42:	462b      	mov	r3, r5
 8006b44:	462a      	mov	r2, r5
 8006b46:	bf14      	ite	ne
 8006b48:	210c      	movne	r1, #12
 8006b4a:	2101      	moveq	r1, #1
 8006b4c:	f7fe fabe 	bl	80050cc <dwt_writetodevice>
 8006b50:	e756      	b.n	8006a00 <dwt_ioctl+0x154>
 8006b52:	2c00      	cmp	r4, #0
 8006b54:	f001 8489 	beq.w	800846a <dwt_ioctl+0x1bbe>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	212c      	movs	r1, #44	; 0x2c
 8006b5e:	f7fe fc13 	bl	8005388 <dwt_write32bitoffsetreg>
 8006b62:	2500      	movs	r5, #0
 8006b64:	e74c      	b.n	8006a00 <dwt_ioctl+0x154>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4962      	ldr	r1, [pc, #392]	; (8006cf4 <dwt_ioctl+0x448>)
 8006b6c:	f7fe fc0c 	bl	8005388 <dwt_write32bitoffsetreg>
 8006b70:	6863      	ldr	r3, [r4, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	4960      	ldr	r1, [pc, #384]	; (8006cf8 <dwt_ioctl+0x44c>)
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7fe fc06 	bl	8005388 <dwt_write32bitoffsetreg>
 8006b7c:	68a3      	ldr	r3, [r4, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	495e      	ldr	r1, [pc, #376]	; (8006cfc <dwt_ioctl+0x450>)
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7fe fc00 	bl	8005388 <dwt_write32bitoffsetreg>
 8006b88:	68e3      	ldr	r3, [r4, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	495c      	ldr	r1, [pc, #368]	; (8006d00 <dwt_ioctl+0x454>)
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f7fe fbfa 	bl	8005388 <dwt_write32bitoffsetreg>
 8006b94:	2500      	movs	r5, #0
 8006b96:	e733      	b.n	8006a00 <dwt_ioctl+0x154>
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	f001 8469 	beq.w	8008470 <dwt_ioctl+0x1bc4>
 8006b9e:	8823      	ldrh	r3, [r4, #0]
 8006ba0:	6865      	ldr	r5, [r4, #4]
 8006ba2:	2d03      	cmp	r5, #3
 8006ba4:	f201 8467 	bhi.w	8008476 <dwt_ioctl+0x1bca>
 8006ba8:	e8df f005 	tbb	[pc, r5]
 8006bac:	130d0702 	.word	0x130d0702
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4954      	ldr	r1, [pc, #336]	; (8006d04 <dwt_ioctl+0x458>)
 8006bb4:	f7fe fae7 	bl	8005186 <dwt_write16bitoffsetreg>
 8006bb8:	e722      	b.n	8006a00 <dwt_ioctl+0x154>
 8006bba:	2202      	movs	r2, #2
 8006bbc:	4951      	ldr	r1, [pc, #324]	; (8006d04 <dwt_ioctl+0x458>)
 8006bbe:	f7fe fae2 	bl	8005186 <dwt_write16bitoffsetreg>
 8006bc2:	2500      	movs	r5, #0
 8006bc4:	e71c      	b.n	8006a00 <dwt_ioctl+0x154>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	494f      	ldr	r1, [pc, #316]	; (8006d08 <dwt_ioctl+0x45c>)
 8006bca:	f7fe fadc 	bl	8005186 <dwt_write16bitoffsetreg>
 8006bce:	2500      	movs	r5, #0
 8006bd0:	e716      	b.n	8006a00 <dwt_ioctl+0x154>
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	494c      	ldr	r1, [pc, #304]	; (8006d08 <dwt_ioctl+0x45c>)
 8006bd6:	f7fe fad6 	bl	8005186 <dwt_write16bitoffsetreg>
 8006bda:	2500      	movs	r5, #0
 8006bdc:	e710      	b.n	8006a00 <dwt_ioctl+0x154>
 8006bde:	2c00      	cmp	r4, #0
 8006be0:	f001 844c 	beq.w	800847c <dwt_ioctl+0x1bd0>
 8006be4:	7823      	ldrb	r3, [r4, #0]
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	f003 0306 	and.w	r3, r3, #6
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	f06f 0306 	mvn.w	r3, #6
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4945      	ldr	r1, [pc, #276]	; (8006d0c <dwt_ioctl+0x460>)
 8006bf6:	f7fe ff59 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	e700      	b.n	8006a00 <dwt_ioctl+0x154>
 8006bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4941      	ldr	r1, [pc, #260]	; (8006d10 <dwt_ioctl+0x464>)
 8006c0c:	f7fe ff4e 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006c10:	2500      	movs	r5, #0
 8006c12:	e6f5      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	f001 8434 	beq.w	8008482 <dwt_ioctl+0x1bd6>
 8006c1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c1c:	7b5b      	ldrb	r3, [r3, #13]
 8006c1e:	7023      	strb	r3, [r4, #0]
 8006c20:	2500      	movs	r5, #0
 8006c22:	e6ed      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	f001 842f 	beq.w	8008488 <dwt_ioctl+0x1bdc>
 8006c2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c2c:	7a9b      	ldrb	r3, [r3, #10]
 8006c2e:	7023      	strb	r3, [r4, #0]
 8006c30:	2500      	movs	r5, #0
 8006c32:	e6e5      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	f001 842a 	beq.w	800848e <dwt_ioctl+0x1be2>
 8006c3a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c3c:	7adb      	ldrb	r3, [r3, #11]
 8006c3e:	7023      	strb	r3, [r4, #0]
 8006c40:	2500      	movs	r5, #0
 8006c42:	e6dd      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	f001 8425 	beq.w	8008494 <dwt_ioctl+0x1be8>
 8006c4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	2500      	movs	r5, #0
 8006c52:	e6d5      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	f001 8420 	beq.w	800849a <dwt_ioctl+0x1bee>
 8006c5a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	2500      	movs	r5, #0
 8006c62:	e6cd      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c64:	f7fe fb7e 	bl	8005364 <ull_signal_rx_buff_free>
 8006c68:	2500      	movs	r5, #0
 8006c6a:	e6c9      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c6c:	2c00      	cmp	r4, #0
 8006c6e:	f001 8417 	beq.w	80084a0 <dwt_ioctl+0x1bf4>
 8006c72:	6821      	ldr	r1, [r4, #0]
 8006c74:	f7fe fd24 	bl	80056c0 <ull_setrxaftertxdelay>
 8006c78:	2500      	movs	r5, #0
 8006c7a:	e6c1      	b.n	8006a00 <dwt_ioctl+0x154>
 8006c7c:	2c00      	cmp	r4, #0
 8006c7e:	f001 8412 	beq.w	80084a6 <dwt_ioctl+0x1bfa>
 8006c82:	7825      	ldrb	r5, [r4, #0]
 8006c84:	b15d      	cbz	r5, 8006c9e <dwt_ioctl+0x3f2>
 8006c86:	6864      	ldr	r4, [r4, #4]
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	23ff      	movs	r3, #255	; 0xff
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2110      	movs	r1, #16
 8006c92:	f7ff f8f5 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8006c96:	2d02      	cmp	r5, #2
 8006c98:	d107      	bne.n	8006caa <dwt_ioctl+0x3fe>
 8006c9a:	60f4      	str	r4, [r6, #12]
 8006c9c:	e005      	b.n	8006caa <dwt_ioctl+0x3fe>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	9200      	str	r2, [sp, #0]
 8006ca2:	23bf      	movs	r3, #191	; 0xbf
 8006ca4:	2110      	movs	r1, #16
 8006ca6:	f7ff f8eb 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8006caa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006cac:	759d      	strb	r5, [r3, #22]
 8006cae:	2500      	movs	r5, #0
 8006cb0:	e6a6      	b.n	8006a00 <dwt_ioctl+0x154>
 8006cb2:	2c00      	cmp	r4, #0
 8006cb4:	f001 83fa 	beq.w	80084ac <dwt_ioctl+0x1c00>
 8006cb8:	6865      	ldr	r5, [r4, #4]
 8006cba:	7823      	ldrb	r3, [r4, #0]
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	4915      	ldr	r1, [pc, #84]	; (8006d14 <dwt_ioctl+0x468>)
 8006cc0:	f7fe fa0f 	bl	80050e2 <dwt_write8bitoffsetreg>
 8006cc4:	b945      	cbnz	r5, 8006cd8 <dwt_ioctl+0x42c>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	9200      	str	r2, [sp, #0]
 8006cca:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8006cce:	2110      	movs	r1, #16
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff fa87 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006cd6:	e693      	b.n	8006a00 <dwt_ioctl+0x154>
 8006cd8:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2110      	movs	r1, #16
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7fe fee0 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006cec:	2500      	movs	r5, #0
 8006cee:	e687      	b.n	8006a00 <dwt_ioctl+0x154>
 8006cf0:	000f0030 	.word	0x000f0030
 8006cf4:	00010054 	.word	0x00010054
 8006cf8:	00010058 	.word	0x00010058
 8006cfc:	0001005c 	.word	0x0001005c
 8006d00:	00010060 	.word	0x00010060
 8006d04:	00010018 	.word	0x00010018
 8006d08:	0001001c 	.word	0x0001001c
 8006d0c:	00010014 	.word	0x00010014
 8006d10:	00110004 	.word	0x00110004
 8006d14:	00010008 	.word	0x00010008
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	f7fd fdf2 	bl	8004904 <dwt_read32bitoffsetreg>
 8006d20:	68b2      	ldr	r2, [r6, #8]
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	4043      	eors	r3, r0
 8006d26:	6852      	ldr	r2, [r2, #4]
 8006d28:	4213      	tst	r3, r2
 8006d2a:	bf14      	ite	ne
 8006d2c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8006d30:	2500      	moveq	r5, #0
 8006d32:	e665      	b.n	8006a00 <dwt_ioctl+0x154>
 8006d34:	2c00      	cmp	r4, #0
 8006d36:	f001 83bc 	beq.w	80084b2 <dwt_ioctl+0x1c06>
 8006d3a:	7821      	ldrb	r1, [r4, #0]
 8006d3c:	f7ff f8b4 	bl	8005ea8 <ull_configciadiag>
 8006d40:	2500      	movs	r5, #0
 8006d42:	e65d      	b.n	8006a00 <dwt_ioctl+0x154>
 8006d44:	b93a      	cbnz	r2, 8006d56 <dwt_ioctl+0x4aa>
 8006d46:	2200      	movs	r2, #0
 8006d48:	9200      	str	r2, [sp, #0]
 8006d4a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8006d4e:	49ae      	ldr	r1, [pc, #696]	; (8007008 <dwt_ioctl+0x75c>)
 8006d50:	f7ff fa48 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006d54:	e654      	b.n	8006a00 <dwt_ioctl+0x154>
 8006d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d60:	2200      	movs	r2, #0
 8006d62:	49a9      	ldr	r1, [pc, #676]	; (8007008 <dwt_ioctl+0x75c>)
 8006d64:	f7ff fa3e 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006d68:	2500      	movs	r5, #0
 8006d6a:	e649      	b.n	8006a00 <dwt_ioctl+0x154>
 8006d6c:	f002 0201 	and.w	r2, r2, #1
 8006d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d74:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	bf08      	it	eq
 8006d7c:	460b      	moveq	r3, r1
 8006d7e:	02d2      	lsls	r2, r2, #11
 8006d80:	f015 0f02 	tst.w	r5, #2
 8006d84:	bf12      	itee	ne
 8006d86:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d8e:	b29b      	uxtheq	r3, r3
 8006d90:	9200      	str	r2, [sp, #0]
 8006d92:	2200      	movs	r2, #0
 8006d94:	499c      	ldr	r1, [pc, #624]	; (8007008 <dwt_ioctl+0x75c>)
 8006d96:	f7ff fa25 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006d9a:	2500      	movs	r5, #0
 8006d9c:	e630      	b.n	8006a00 <dwt_ioctl+0x154>
 8006d9e:	b92a      	cbnz	r2, 8006dac <dwt_ioctl+0x500>
 8006da0:	4b9a      	ldr	r3, [pc, #616]	; (800700c <dwt_ioctl+0x760>)
 8006da2:	2202      	movs	r2, #2
 8006da4:	499a      	ldr	r1, [pc, #616]	; (8007010 <dwt_ioctl+0x764>)
 8006da6:	f7fe faef 	bl	8005388 <dwt_write32bitoffsetreg>
 8006daa:	e629      	b.n	8006a00 <dwt_ioctl+0x154>
 8006dac:	4b99      	ldr	r3, [pc, #612]	; (8007014 <dwt_ioctl+0x768>)
 8006dae:	2202      	movs	r2, #2
 8006db0:	4997      	ldr	r1, [pc, #604]	; (8007010 <dwt_ioctl+0x764>)
 8006db2:	f7fe fae9 	bl	8005388 <dwt_write32bitoffsetreg>
 8006db6:	2500      	movs	r5, #0
 8006db8:	e622      	b.n	8006a00 <dwt_ioctl+0x154>
 8006dba:	4611      	mov	r1, r2
 8006dbc:	f7fe fc96 	bl	80056ec <ull_setlnapamode>
 8006dc0:	2500      	movs	r5, #0
 8006dc2:	e61d      	b.n	8006a00 <dwt_ioctl+0x154>
 8006dc4:	2c00      	cmp	r4, #0
 8006dc6:	f001 8377 	beq.w	80084b8 <dwt_ioctl+0x1c0c>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4992      	ldr	r1, [pc, #584]	; (8007018 <dwt_ioctl+0x76c>)
 8006dce:	f7fd fdc1 	bl	8004954 <dwt_read8bitoffsetreg>
 8006dd2:	7020      	strb	r0, [r4, #0]
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	e613      	b.n	8006a00 <dwt_ioctl+0x154>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f7fe fca9 	bl	8005730 <ull_configurestskey>
 8006dde:	2500      	movs	r5, #0
 8006de0:	e60e      	b.n	8006a00 <dwt_ioctl+0x154>
 8006de2:	4621      	mov	r1, r4
 8006de4:	f7fe fcc8 	bl	8005778 <ull_configurestsiv>
 8006de8:	2500      	movs	r5, #0
 8006dea:	e609      	b.n	8006a00 <dwt_ioctl+0x154>
 8006dec:	2301      	movs	r3, #1
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	23ff      	movs	r3, #255	; 0xff
 8006df2:	2200      	movs	r2, #0
 8006df4:	4989      	ldr	r1, [pc, #548]	; (800701c <dwt_ioctl+0x770>)
 8006df6:	f7ff f843 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	e600      	b.n	8006a00 <dwt_ioctl+0x154>
 8006dfe:	4611      	mov	r1, r2
 8006e00:	f7fe fcde 	bl	80057c0 <ull_configmrxlut>
 8006e04:	2500      	movs	r5, #0
 8006e06:	e5fb      	b.n	8006a00 <dwt_ioctl+0x154>
 8006e08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e0a:	7a1b      	ldrb	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d137      	bne.n	8006e80 <dwt_ioctl+0x5d4>
 8006e10:	2314      	movs	r3, #20
 8006e12:	2201      	movs	r2, #1
 8006e14:	4982      	ldr	r1, [pc, #520]	; (8007020 <dwt_ioctl+0x774>)
 8006e16:	4630      	mov	r0, r6
 8006e18:	f7fe f963 	bl	80050e2 <dwt_write8bitoffsetreg>
 8006e1c:	2318      	movs	r3, #24
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4980      	ldr	r1, [pc, #512]	; (8007024 <dwt_ioctl+0x778>)
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7fe fab0 	bl	8005388 <dwt_write32bitoffsetreg>
 8006e28:	23e8      	movs	r3, #232	; 0xe8
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	497e      	ldr	r1, [pc, #504]	; (8007028 <dwt_ioctl+0x77c>)
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7fe faaa 	bl	8005388 <dwt_write32bitoffsetreg>
 8006e34:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006e36:	8a5b      	ldrh	r3, [r3, #18]
 8006e38:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d022      	beq.n	8006e86 <dwt_ioctl+0x5da>
 8006e40:	2b60      	cmp	r3, #96	; 0x60
 8006e42:	d02b      	beq.n	8006e9c <dwt_ioctl+0x5f0>
 8006e44:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006e46:	7e1b      	ldrb	r3, [r3, #24]
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	d032      	beq.n	8006eb2 <dwt_ioctl+0x606>
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4977      	ldr	r1, [pc, #476]	; (800702c <dwt_ioctl+0x780>)
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7fd fd6d 	bl	8004930 <dwt_read16bitoffsetreg>
 8006e56:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8006e5a:	3b09      	subs	r3, #9
 8006e5c:	2b0f      	cmp	r3, #15
 8006e5e:	f201 832e 	bhi.w	80084be <dwt_ioctl+0x1c12>
 8006e62:	f000 0001 	and.w	r0, r0, #1
 8006e66:	2800      	cmp	r0, #0
 8006e68:	bf0c      	ite	eq
 8006e6a:	2105      	moveq	r1, #5
 8006e6c:	2109      	movne	r1, #9
 8006e6e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006e70:	7a5b      	ldrb	r3, [r3, #9]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d029      	beq.n	8006eca <dwt_ioctl+0x61e>
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7fe fca2 	bl	80057c0 <ull_configmrxlut>
 8006e7c:	2500      	movs	r5, #0
 8006e7e:	e5bf      	b.n	8006a00 <dwt_ioctl+0x154>
 8006e80:	f7ff f9ca 	bl	8006218 <_dwt_prog_ldo_and_bias_tune>
 8006e84:	e7c4      	b.n	8006e10 <dwt_ioctl+0x564>
 8006e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006e90:	2200      	movs	r2, #0
 8006e92:	4967      	ldr	r1, [pc, #412]	; (8007030 <dwt_ioctl+0x784>)
 8006e94:	4630      	mov	r0, r6
 8006e96:	f7fe fe09 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006e9a:	e7d3      	b.n	8006e44 <dwt_ioctl+0x598>
 8006e9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4961      	ldr	r1, [pc, #388]	; (8007030 <dwt_ioctl+0x784>)
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7fe fdfe 	bl	8005aac <dwt_modify32bitoffsetreg>
 8006eb0:	e7c8      	b.n	8006e44 <dwt_ioctl+0x598>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	495f      	ldr	r1, [pc, #380]	; (8007034 <dwt_ioctl+0x788>)
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7fe f912 	bl	80050e2 <dwt_write8bitoffsetreg>
 8006ebe:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8006ec0:	7e13      	ldrb	r3, [r2, #24]
 8006ec2:	f043 0302 	orr.w	r3, r3, #2
 8006ec6:	7613      	strb	r3, [r2, #24]
 8006ec8:	e7c0      	b.n	8006e4c <dwt_ioctl+0x5a0>
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f7fe fe12 	bl	8005af4 <_dwt_kick_dgc_on_wakeup>
 8006ed0:	2500      	movs	r5, #0
 8006ed2:	e595      	b.n	8006a00 <dwt_ioctl+0x154>
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	f001 82f5 	beq.w	80084c4 <dwt_ioctl+0x1c18>
 8006eda:	7823      	ldrb	r3, [r4, #0]
 8006edc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006ede:	75d3      	strb	r3, [r2, #23]
 8006ee0:	031b      	lsls	r3, r3, #12
 8006ee2:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8006eec:	2200      	movs	r2, #0
 8006eee:	2110      	movs	r1, #16
 8006ef0:	f7ff f978 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	e583      	b.n	8006a00 <dwt_ioctl+0x154>
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	f001 82e6 	beq.w	80084ca <dwt_ioctl+0x1c1e>
 8006efe:	8823      	ldrh	r3, [r4, #0]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006f06:	f7fe f93e 	bl	8005186 <dwt_write16bitoffsetreg>
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	e578      	b.n	8006a00 <dwt_ioctl+0x154>
 8006f0e:	2c00      	cmp	r4, #0
 8006f10:	f001 82de 	beq.w	80084d0 <dwt_ioctl+0x1c24>
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006f1a:	f7fd fd09 	bl	8004930 <dwt_read16bitoffsetreg>
 8006f1e:	8020      	strh	r0, [r4, #0]
 8006f20:	2500      	movs	r5, #0
 8006f22:	e56d      	b.n	8006a00 <dwt_ioctl+0x154>
 8006f24:	2c00      	cmp	r4, #0
 8006f26:	f001 82d6 	beq.w	80084d6 <dwt_ioctl+0x1c2a>
 8006f2a:	8823      	ldrh	r3, [r4, #0]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4942      	ldr	r1, [pc, #264]	; (8007038 <dwt_ioctl+0x78c>)
 8006f30:	f7fe f929 	bl	8005186 <dwt_write16bitoffsetreg>
 8006f34:	2500      	movs	r5, #0
 8006f36:	e563      	b.n	8006a00 <dwt_ioctl+0x154>
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	f001 82cf 	beq.w	80084dc <dwt_ioctl+0x1c30>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	493d      	ldr	r1, [pc, #244]	; (8007038 <dwt_ioctl+0x78c>)
 8006f42:	f7fd fcf5 	bl	8004930 <dwt_read16bitoffsetreg>
 8006f46:	8020      	strh	r0, [r4, #0]
 8006f48:	2500      	movs	r5, #0
 8006f4a:	e559      	b.n	8006a00 <dwt_ioctl+0x154>
 8006f4c:	2c00      	cmp	r4, #0
 8006f4e:	f001 82c8 	beq.w	80084e2 <dwt_ioctl+0x1c36>
 8006f52:	88a3      	ldrh	r3, [r4, #4]
 8006f54:	88e2      	ldrh	r2, [r4, #6]
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	9100      	str	r1, [sp, #0]
 8006f5a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8006f5e:	f7fe f8b5 	bl	80050cc <dwt_writetodevice>
 8006f62:	2500      	movs	r5, #0
 8006f64:	e54c      	b.n	8006a00 <dwt_ioctl+0x154>
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	f001 82be 	beq.w	80084e8 <dwt_ioctl+0x1c3c>
 8006f6c:	88a3      	ldrh	r3, [r4, #4]
 8006f6e:	88e2      	ldrh	r2, [r4, #6]
 8006f70:	6821      	ldr	r1, [r4, #0]
 8006f72:	9100      	str	r1, [sp, #0]
 8006f74:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8006f78:	f7fd fcba 	bl	80048f0 <dwt_readfromdevice>
 8006f7c:	2500      	movs	r5, #0
 8006f7e:	e53f      	b.n	8006a00 <dwt_ioctl+0x154>
 8006f80:	2c00      	cmp	r4, #0
 8006f82:	f001 82b4 	beq.w	80084ee <dwt_ioctl+0x1c42>
 8006f86:	88e3      	ldrh	r3, [r4, #6]
 8006f88:	88a2      	ldrh	r2, [r4, #4]
 8006f8a:	6821      	ldr	r1, [r4, #0]
 8006f8c:	f7fe fcc2 	bl	8005914 <ull_readrxdata>
 8006f90:	2500      	movs	r5, #0
 8006f92:	e535      	b.n	8006a00 <dwt_ioctl+0x154>
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	f001 82ad 	beq.w	80084f4 <dwt_ioctl+0x1c48>
 8006f9a:	88e3      	ldrh	r3, [r4, #6]
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	88a1      	ldrh	r1, [r4, #4]
 8006fa0:	f7fe fd52 	bl	8005a48 <ull_writetxdata>
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	e52b      	b.n	8006a00 <dwt_ioctl+0x154>
 8006fa8:	4611      	mov	r1, r2
 8006faa:	f7fe fce9 	bl	8005980 <ull_rxenable>
 8006fae:	2500      	movs	r5, #0
 8006fb0:	e526      	b.n	8006a00 <dwt_ioctl+0x154>
 8006fb2:	2c00      	cmp	r4, #0
 8006fb4:	f001 82a1 	beq.w	80084fa <dwt_ioctl+0x1c4e>
 8006fb8:	7923      	ldrb	r3, [r4, #4]
 8006fba:	8862      	ldrh	r2, [r4, #2]
 8006fbc:	8821      	ldrh	r1, [r4, #0]
 8006fbe:	f7fe ff2d 	bl	8005e1c <ull_writetxfctrl>
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	e51c      	b.n	8006a00 <dwt_ioctl+0x154>
 8006fc6:	2c00      	cmp	r4, #0
 8006fc8:	f001 829a 	beq.w	8008500 <dwt_ioctl+0x1c54>
 8006fcc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006fce:	7bdb      	ldrb	r3, [r3, #15]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d00c      	beq.n	8006fee <dwt_ioctl+0x742>
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d110      	bne.n	8006ffa <dwt_ioctl+0x74e>
 8006fd8:	220c      	movs	r2, #12
 8006fda:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8006fde:	f7fd fca7 	bl	8004930 <dwt_read16bitoffsetreg>
 8006fe2:	b200      	sxth	r0, r0
 8006fe4:	f340 030c 	sbfx	r3, r0, #0, #13
 8006fe8:	8023      	strh	r3, [r4, #0]
 8006fea:	2500      	movs	r5, #0
 8006fec:	e508      	b.n	8006a00 <dwt_ioctl+0x154>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4912      	ldr	r1, [pc, #72]	; (800703c <dwt_ioctl+0x790>)
 8006ff2:	f7fd fc9d 	bl	8004930 <dwt_read16bitoffsetreg>
 8006ff6:	b200      	sxth	r0, r0
 8006ff8:	e7f4      	b.n	8006fe4 <dwt_ioctl+0x738>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	4910      	ldr	r1, [pc, #64]	; (8007040 <dwt_ioctl+0x794>)
 8006ffe:	f7fd fc97 	bl	8004930 <dwt_read16bitoffsetreg>
 8007002:	b200      	sxth	r0, r0
 8007004:	e7ee      	b.n	8006fe4 <dwt_ioctl+0x738>
 8007006:	bf00      	nop
 8007008:	00110008 	.word	0x00110008
 800700c:	00d20874 	.word	0x00d20874
 8007010:	00110010 	.word	0x00110010
 8007014:	04d28874 	.word	0x04d28874
 8007018:	0007001c 	.word	0x0007001c
 800701c:	00020004 	.word	0x00020004
 8007020:	00070050 	.word	0x00070050
 8007024:	001f000c 	.word	0x001f000c
 8007028:	001f0010 	.word	0x001f0010
 800702c:	00010014 	.word	0x00010014
 8007030:	000b0008 	.word	0x000b0008
 8007034:	00010028 	.word	0x00010028
 8007038:	00010004 	.word	0x00010004
 800703c:	0018000c 	.word	0x0018000c
 8007040:	000c0020 	.word	0x000c0020
 8007044:	2c00      	cmp	r4, #0
 8007046:	f001 825e 	beq.w	8008506 <dwt_ioctl+0x1c5a>
 800704a:	ab0c      	add	r3, sp, #48	; 0x30
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2303      	movs	r3, #3
 8007050:	2200      	movs	r2, #0
 8007052:	49bb      	ldr	r1, [pc, #748]	; (8007340 <dwt_ioctl+0xa94>)
 8007054:	f7fd fc4c 	bl	80048f0 <dwt_readfromdevice>
 8007058:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800705c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8007060:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8007064:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8007068:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800706c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007070:	bf1c      	itt	ne
 8007072:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8007076:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	2500      	movs	r5, #0
 800707e:	e4bf      	b.n	8006a00 <dwt_ioctl+0x154>
 8007080:	f7fe f892 	bl	80051a8 <ull_clearaonconfig>
 8007084:	2500      	movs	r5, #0
 8007086:	e4bb      	b.n	8006a00 <dwt_ioctl+0x154>
 8007088:	2c00      	cmp	r4, #0
 800708a:	f001 823f 	beq.w	800850c <dwt_ioctl+0x1c60>
 800708e:	8861      	ldrh	r1, [r4, #2]
 8007090:	f7fe ff40 	bl	8005f14 <ull_calcbandwidthadj>
 8007094:	7020      	strb	r0, [r4, #0]
 8007096:	2500      	movs	r5, #0
 8007098:	e4b2      	b.n	8006a00 <dwt_ioctl+0x154>
 800709a:	4621      	mov	r1, r4
 800709c:	f7fd fc68 	bl	8004970 <ull_readdiagnostics>
 80070a0:	2500      	movs	r5, #0
 80070a2:	e4ad      	b.n	8006a00 <dwt_ioctl+0x154>
 80070a4:	2c00      	cmp	r4, #0
 80070a6:	f001 8234 	beq.w	8008512 <dwt_ioctl+0x1c66>
 80070aa:	2201      	movs	r2, #1
 80070ac:	2174      	movs	r1, #116	; 0x74
 80070ae:	f7fd fc29 	bl	8004904 <dwt_read32bitoffsetreg>
 80070b2:	6020      	str	r0, [r4, #0]
 80070b4:	2500      	movs	r5, #0
 80070b6:	e4a3      	b.n	8006a00 <dwt_ioctl+0x154>
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	f001 822d 	beq.w	8008518 <dwt_ioctl+0x1c6c>
 80070be:	2200      	movs	r2, #0
 80070c0:	2174      	movs	r1, #116	; 0x74
 80070c2:	f7fd fc1f 	bl	8004904 <dwt_read32bitoffsetreg>
 80070c6:	6020      	str	r0, [r4, #0]
 80070c8:	2500      	movs	r5, #0
 80070ca:	e499      	b.n	8006a00 <dwt_ioctl+0x154>
 80070cc:	9400      	str	r4, [sp, #0]
 80070ce:	2305      	movs	r3, #5
 80070d0:	2200      	movs	r2, #0
 80070d2:	2174      	movs	r1, #116	; 0x74
 80070d4:	f7fd fc0c 	bl	80048f0 <dwt_readfromdevice>
 80070d8:	2500      	movs	r5, #0
 80070da:	e491      	b.n	8006a00 <dwt_ioctl+0x154>
 80070dc:	2c00      	cmp	r4, #0
 80070de:	f001 821e 	beq.w	800851e <dwt_ioctl+0x1c72>
 80070e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80070e4:	7bdb      	ldrb	r3, [r3, #15]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d014      	beq.n	8007114 <dwt_ioctl+0x868>
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d119      	bne.n	8007122 <dwt_ioctl+0x876>
 80070ee:	2216      	movs	r2, #22
 80070f0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80070f4:	f7fd fc1c 	bl	8004930 <dwt_read16bitoffsetreg>
 80070f8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80070fc:	b283      	uxth	r3, r0
 80070fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007102:	d004      	beq.n	800710e <dwt_ioctl+0x862>
 8007104:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8007108:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800710c:	b218      	sxth	r0, r3
 800710e:	8020      	strh	r0, [r4, #0]
 8007110:	2500      	movs	r5, #0
 8007112:	e475      	b.n	8006a00 <dwt_ioctl+0x154>
 8007114:	2202      	movs	r2, #2
 8007116:	498b      	ldr	r1, [pc, #556]	; (8007344 <dwt_ioctl+0xa98>)
 8007118:	f7fd fc0a 	bl	8004930 <dwt_read16bitoffsetreg>
 800711c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007120:	e7ec      	b.n	80070fc <dwt_ioctl+0x850>
 8007122:	2202      	movs	r2, #2
 8007124:	4988      	ldr	r1, [pc, #544]	; (8007348 <dwt_ioctl+0xa9c>)
 8007126:	f7fd fc03 	bl	8004930 <dwt_read16bitoffsetreg>
 800712a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800712e:	e7e5      	b.n	80070fc <dwt_ioctl+0x850>
 8007130:	9400      	str	r4, [sp, #0]
 8007132:	2306      	movs	r3, #6
 8007134:	2200      	movs	r2, #0
 8007136:	4985      	ldr	r1, [pc, #532]	; (800734c <dwt_ioctl+0xaa0>)
 8007138:	f7fd fbda 	bl	80048f0 <dwt_readfromdevice>
 800713c:	7963      	ldrb	r3, [r4, #5]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	7163      	strb	r3, [r4, #5]
 8007144:	2500      	movs	r5, #0
 8007146:	e45b      	b.n	8006a00 <dwt_ioctl+0x154>
 8007148:	2c00      	cmp	r4, #0
 800714a:	f001 81eb 	beq.w	8008524 <dwt_ioctl+0x1c78>
 800714e:	2201      	movs	r2, #1
 8007150:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8007154:	f7fd fbfe 	bl	8004954 <dwt_read8bitoffsetreg>
 8007158:	7020      	strb	r0, [r4, #0]
 800715a:	2500      	movs	r5, #0
 800715c:	e450      	b.n	8006a00 <dwt_ioctl+0x154>
 800715e:	2c00      	cmp	r4, #0
 8007160:	f001 81e3 	beq.w	800852a <dwt_ioctl+0x1c7e>
 8007164:	2200      	movs	r2, #0
 8007166:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800716a:	f7fd fbf3 	bl	8004954 <dwt_read8bitoffsetreg>
 800716e:	7020      	strb	r0, [r4, #0]
 8007170:	2500      	movs	r5, #0
 8007172:	e445      	b.n	8006a00 <dwt_ioctl+0x154>
 8007174:	2c00      	cmp	r4, #0
 8007176:	f001 81db 	beq.w	8008530 <dwt_ioctl+0x1c84>
 800717a:	88a2      	ldrh	r2, [r4, #4]
 800717c:	6821      	ldr	r1, [r4, #0]
 800717e:	f7fe fd1d 	bl	8005bbc <_dwt_otpprogword32>
 8007182:	2500      	movs	r5, #0
 8007184:	e43c      	b.n	8006a00 <dwt_ioctl+0x154>
 8007186:	2c00      	cmp	r4, #0
 8007188:	f001 81d5 	beq.w	8008536 <dwt_ioctl+0x1c8a>
 800718c:	6825      	ldr	r5, [r4, #0]
 800718e:	88a4      	ldrh	r4, [r4, #4]
 8007190:	4622      	mov	r2, r4
 8007192:	4629      	mov	r1, r5
 8007194:	f7fe fd12 	bl	8005bbc <_dwt_otpprogword32>
 8007198:	4621      	mov	r1, r4
 800719a:	4630      	mov	r0, r6
 800719c:	f7fe f84e 	bl	800523c <_dwt_otpread>
 80071a0:	1a2d      	subs	r5, r5, r0
 80071a2:	bf18      	it	ne
 80071a4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80071a8:	e42a      	b.n	8006a00 <dwt_ioctl+0x154>
 80071aa:	2a02      	cmp	r2, #2
 80071ac:	d00e      	beq.n	80071cc <dwt_ioctl+0x920>
 80071ae:	4c68      	ldr	r4, [pc, #416]	; (8007350 <dwt_ioctl+0xaa4>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	461a      	mov	r2, r3
 80071b4:	4621      	mov	r1, r4
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7fd ff93 	bl	80050e2 <dwt_write8bitoffsetreg>
 80071bc:	2302      	movs	r3, #2
 80071be:	2200      	movs	r2, #0
 80071c0:	4621      	mov	r1, r4
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7fd ff8d 	bl	80050e2 <dwt_write8bitoffsetreg>
 80071c8:	2500      	movs	r5, #0
 80071ca:	e419      	b.n	8006a00 <dwt_ioctl+0x154>
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	23fe      	movs	r3, #254	; 0xfe
 80071d2:	2201      	movs	r2, #1
 80071d4:	495f      	ldr	r1, [pc, #380]	; (8007354 <dwt_ioctl+0xaa8>)
 80071d6:	f7fe fe53 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80071da:	e7e8      	b.n	80071ae <dwt_ioctl+0x902>
 80071dc:	2c00      	cmp	r4, #0
 80071de:	f001 81ad 	beq.w	800853c <dwt_ioctl+0x1c90>
 80071e2:	8824      	ldrh	r4, [r4, #0]
 80071e4:	b2e2      	uxtb	r2, r4
 80071e6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80071ea:	f7fe f869 	bl	80052c0 <ull_aon_write>
 80071ee:	0a22      	lsrs	r2, r4, #8
 80071f0:	f240 1103 	movw	r1, #259	; 0x103
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7fe f863 	bl	80052c0 <ull_aon_write>
 80071fa:	2500      	movs	r5, #0
 80071fc:	e400      	b.n	8006a00 <dwt_ioctl+0x154>
 80071fe:	2c00      	cmp	r4, #0
 8007200:	f001 819f 	beq.w	8008542 <dwt_ioctl+0x1c96>
 8007204:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8007360 <dwt_ioctl+0xab4>
 8007208:	2310      	movs	r3, #16
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	23ff      	movs	r3, #255	; 0xff
 800720e:	2200      	movs	r2, #0
 8007210:	4641      	mov	r1, r8
 8007212:	f7fe fe35 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8007216:	f44f 7182 	mov.w	r1, #260	; 0x104
 800721a:	4630      	mov	r0, r6
 800721c:	f7fe f830 	bl	8005280 <ull_aon_read>
 8007220:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8007224:	462a      	mov	r2, r5
 8007226:	f44f 7182 	mov.w	r1, #260	; 0x104
 800722a:	4630      	mov	r0, r6
 800722c:	f7fe f848 	bl	80052c0 <ull_aon_write>
 8007230:	f045 0204 	orr.w	r2, r5, #4
 8007234:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007238:	4630      	mov	r0, r6
 800723a:	f7fe f841 	bl	80052c0 <ull_aon_write>
 800723e:	2002      	movs	r0, #2
 8007240:	f7f9 fb04 	bl	800084c <deca_sleep>
 8007244:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8007248:	4630      	mov	r0, r6
 800724a:	f7fe f819 	bl	8005280 <ull_aon_read>
 800724e:	4607      	mov	r7, r0
 8007250:	f240 110f 	movw	r1, #271	; 0x10f
 8007254:	4630      	mov	r0, r6
 8007256:	f7fe f813 	bl	8005280 <ull_aon_read>
 800725a:	4681      	mov	r9, r0
 800725c:	462a      	mov	r2, r5
 800725e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007262:	4630      	mov	r0, r6
 8007264:	f7fe f82c 	bl	80052c0 <ull_aon_write>
 8007268:	2500      	movs	r5, #0
 800726a:	9500      	str	r5, [sp, #0]
 800726c:	23ef      	movs	r3, #239	; 0xef
 800726e:	462a      	mov	r2, r5
 8007270:	4641      	mov	r1, r8
 8007272:	4630      	mov	r0, r6
 8007274:	f7fe fe04 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8007278:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800727c:	8027      	strh	r7, [r4, #0]
 800727e:	f7ff bbbf 	b.w	8006a00 <dwt_ioctl+0x154>
 8007282:	2c00      	cmp	r4, #0
 8007284:	f001 8160 	beq.w	8008548 <dwt_ioctl+0x1c9c>
 8007288:	78a2      	ldrb	r2, [r4, #2]
 800728a:	8821      	ldrh	r1, [r4, #0]
 800728c:	f7fe f840 	bl	8005310 <ull_configuresleep>
 8007290:	2500      	movs	r5, #0
 8007292:	f7ff bbb5 	b.w	8006a00 <dwt_ioctl+0x154>
 8007296:	f7fd ff87 	bl	80051a8 <ull_clearaonconfig>
 800729a:	2001      	movs	r0, #1
 800729c:	f7f9 fad6 	bl	800084c <deca_sleep>
 80072a0:	2303      	movs	r3, #3
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	23ff      	movs	r3, #255	; 0xff
 80072a6:	2200      	movs	r2, #0
 80072a8:	492b      	ldr	r1, [pc, #172]	; (8007358 <dwt_ioctl+0xaac>)
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7fe fde8 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80072b0:	2300      	movs	r3, #0
 80072b2:	461a      	mov	r2, r3
 80072b4:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7fd ff12 	bl	80050e2 <dwt_write8bitoffsetreg>
 80072be:	2001      	movs	r0, #1
 80072c0:	f7f9 fac4 	bl	800084c <deca_sleep>
 80072c4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80072c6:	2500      	movs	r5, #0
 80072c8:	73dd      	strb	r5, [r3, #15]
 80072ca:	2202      	movs	r2, #2
 80072cc:	825a      	strh	r2, [r3, #18]
 80072ce:	759d      	strb	r5, [r3, #22]
 80072d0:	75dd      	strb	r5, [r3, #23]
 80072d2:	741d      	strb	r5, [r3, #16]
 80072d4:	f7ff bb94 	b.w	8006a00 <dwt_ioctl+0x154>
 80072d8:	2c00      	cmp	r4, #0
 80072da:	f001 8138 	beq.w	800854e <dwt_ioctl+0x1ca2>
 80072de:	7823      	ldrb	r3, [r4, #0]
 80072e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80072e6:	7393      	strb	r3, [r2, #14]
 80072e8:	2200      	movs	r2, #0
 80072ea:	491c      	ldr	r1, [pc, #112]	; (800735c <dwt_ioctl+0xab0>)
 80072ec:	f7fd fef9 	bl	80050e2 <dwt_write8bitoffsetreg>
 80072f0:	2500      	movs	r5, #0
 80072f2:	f7ff bb85 	b.w	8006a00 <dwt_ioctl+0x154>
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	f001 812c 	beq.w	8008554 <dwt_ioctl+0x1ca8>
 80072fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80072fe:	7b9b      	ldrb	r3, [r3, #14]
 8007300:	7023      	strb	r3, [r4, #0]
 8007302:	2500      	movs	r5, #0
 8007304:	f7ff bb7c 	b.w	8006a00 <dwt_ioctl+0x154>
 8007308:	2101      	movs	r1, #1
 800730a:	f7fe fc11 	bl	8005b30 <ull_enable_rf_tx>
 800730e:	4630      	mov	r0, r6
 8007310:	f7fe fc42 	bl	8005b98 <ull_enable_rftx_blocks>
 8007314:	2101      	movs	r1, #1
 8007316:	4630      	mov	r0, r6
 8007318:	f7fd ff66 	bl	80051e8 <ull_force_clocks>
 800731c:	220f      	movs	r2, #15
 800731e:	2101      	movs	r1, #1
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff f86f 	bl	8006404 <ull_repeated_cw>
 8007326:	2500      	movs	r5, #0
 8007328:	f7ff bb6a 	b.w	8006a00 <dwt_ioctl+0x154>
 800732c:	2c00      	cmp	r4, #0
 800732e:	f001 8114 	beq.w	800855a <dwt_ioctl+0x1cae>
 8007332:	6862      	ldr	r2, [r4, #4]
 8007334:	6821      	ldr	r1, [r4, #0]
 8007336:	f7ff f865 	bl	8006404 <ull_repeated_cw>
 800733a:	2500      	movs	r5, #0
 800733c:	f7ff bb60 	b.w	8006a00 <dwt_ioctl+0x154>
 8007340:	00060029 	.word	0x00060029
 8007344:	00180014 	.word	0x00180014
 8007348:	000c001c 	.word	0x000c001c
 800734c:	000c0018 	.word	0x000c0018
 8007350:	000a0004 	.word	0x000a0004
 8007354:	00110008 	.word	0x00110008
 8007358:	00110004 	.word	0x00110004
 800735c:	00090014 	.word	0x00090014
 8007360:	00070048 	.word	0x00070048
 8007364:	2c00      	cmp	r4, #0
 8007366:	f001 80fb 	beq.w	8008560 <dwt_ioctl+0x1cb4>
 800736a:	4dd6      	ldr	r5, [pc, #856]	; (80076c4 <dwt_ioctl+0xe18>)
 800736c:	2200      	movs	r2, #0
 800736e:	4629      	mov	r1, r5
 8007370:	f7fd faf0 	bl	8004954 <dwt_read8bitoffsetreg>
 8007374:	4680      	mov	r8, r0
 8007376:	2302      	movs	r3, #2
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	23ff      	movs	r3, #255	; 0xff
 800737c:	2200      	movs	r2, #0
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f7fe fd7d 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8007386:	2304      	movs	r3, #4
 8007388:	2200      	movs	r2, #0
 800738a:	49cf      	ldr	r1, [pc, #828]	; (80076c8 <dwt_ioctl+0xe1c>)
 800738c:	4630      	mov	r0, r6
 800738e:	f7fd fea8 	bl	80050e2 <dwt_write8bitoffsetreg>
 8007392:	2301      	movs	r3, #1
 8007394:	2200      	movs	r2, #0
 8007396:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800739a:	4630      	mov	r0, r6
 800739c:	f7fd fea1 	bl	80050e2 <dwt_write8bitoffsetreg>
 80073a0:	4fca      	ldr	r7, [pc, #808]	; (80076cc <dwt_ioctl+0xe20>)
 80073a2:	2500      	movs	r5, #0
 80073a4:	462a      	mov	r2, r5
 80073a6:	4639      	mov	r1, r7
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7fd fad3 	bl	8004954 <dwt_read8bitoffsetreg>
 80073ae:	f010 0f01 	tst.w	r0, #1
 80073b2:	d0f7      	beq.n	80073a4 <dwt_ioctl+0xaf8>
 80073b4:	2200      	movs	r2, #0
 80073b6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7fd fab8 	bl	8004930 <dwt_read16bitoffsetreg>
 80073c0:	4605      	mov	r5, r0
 80073c2:	2300      	movs	r3, #0
 80073c4:	461a      	mov	r2, r3
 80073c6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7fd fe89 	bl	80050e2 <dwt_write8bitoffsetreg>
 80073d0:	2300      	movs	r3, #0
 80073d2:	461a      	mov	r2, r3
 80073d4:	49bc      	ldr	r1, [pc, #752]	; (80076c8 <dwt_ioctl+0xe1c>)
 80073d6:	4630      	mov	r0, r6
 80073d8:	f7fd fe83 	bl	80050e2 <dwt_write8bitoffsetreg>
 80073dc:	4643      	mov	r3, r8
 80073de:	2200      	movs	r2, #0
 80073e0:	49b8      	ldr	r1, [pc, #736]	; (80076c4 <dwt_ioctl+0xe18>)
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7fd fe7d 	bl	80050e2 <dwt_write8bitoffsetreg>
 80073e8:	8025      	strh	r5, [r4, #0]
 80073ea:	2500      	movs	r5, #0
 80073ec:	f7ff bb08 	b.w	8006a00 <dwt_ioctl+0x154>
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	f001 80b8 	beq.w	8008566 <dwt_ioctl+0x1cba>
 80073f6:	7923      	ldrb	r3, [r4, #4]
 80073f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80073fa:	7ad2      	ldrb	r2, [r2, #11]
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007406:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80076d0 <dwt_ioctl+0xe24>
 800740a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800740e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8007412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007416:	edc4 7a00 	vstr	s15, [r4]
 800741a:	2500      	movs	r5, #0
 800741c:	f7ff baf0 	b.w	8006a00 <dwt_ioctl+0x154>
 8007420:	2c00      	cmp	r4, #0
 8007422:	f001 80a3 	beq.w	800856c <dwt_ioctl+0x1cc0>
 8007426:	7923      	ldrb	r3, [r4, #4]
 8007428:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800742a:	7a92      	ldrb	r2, [r2, #10]
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007436:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80076d4 <dwt_ioctl+0xe28>
 800743a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800743e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007446:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80076d8 <dwt_ioctl+0xe2c>
 800744a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800744e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8007452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007456:	edc4 7a00 	vstr	s15, [r4]
 800745a:	2500      	movs	r5, #0
 800745c:	f7ff bad0 	b.w	8006a00 <dwt_ioctl+0x154>
 8007460:	2c00      	cmp	r4, #0
 8007462:	f001 8086 	beq.w	8008572 <dwt_ioctl+0x1cc6>
 8007466:	6824      	ldr	r4, [r4, #0]
 8007468:	2101      	movs	r1, #1
 800746a:	f7fe fb61 	bl	8005b30 <ull_enable_rf_tx>
 800746e:	4630      	mov	r0, r6
 8007470:	f7fe fb92 	bl	8005b98 <ull_enable_rftx_blocks>
 8007474:	2101      	movs	r1, #1
 8007476:	4630      	mov	r0, r6
 8007478:	f7fd feb6 	bl	80051e8 <ull_force_clocks>
 800747c:	4621      	mov	r1, r4
 800747e:	4630      	mov	r0, r6
 8007480:	f7fe fda4 	bl	8005fcc <ull_repeated_frames>
 8007484:	2500      	movs	r5, #0
 8007486:	f7ff babb 	b.w	8006a00 <dwt_ioctl+0x154>
 800748a:	2500      	movs	r5, #0
 800748c:	9500      	str	r5, [sp, #0]
 800748e:	23ef      	movs	r3, #239	; 0xef
 8007490:	462a      	mov	r2, r5
 8007492:	4992      	ldr	r1, [pc, #584]	; (80076dc <dwt_ioctl+0xe30>)
 8007494:	f7fe fcf4 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8007498:	2105      	movs	r1, #5
 800749a:	4630      	mov	r0, r6
 800749c:	f7fd fea4 	bl	80051e8 <ull_force_clocks>
 80074a0:	2101      	movs	r1, #1
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7fe fa18 	bl	80058d8 <ull_disable_rf_tx>
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7fe fa0b 	bl	80058c4 <ull_disable_rftx_blocks>
 80074ae:	f7ff baa7 	b.w	8006a00 <dwt_ioctl+0x154>
 80074b2:	2500      	movs	r5, #0
 80074b4:	9500      	str	r5, [sp, #0]
 80074b6:	23ef      	movs	r3, #239	; 0xef
 80074b8:	462a      	mov	r2, r5
 80074ba:	4988      	ldr	r1, [pc, #544]	; (80076dc <dwt_ioctl+0xe30>)
 80074bc:	f7fe fce0 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80074c0:	f7ff ba9e 	b.w	8006a00 <dwt_ioctl+0x154>
 80074c4:	2c00      	cmp	r4, #0
 80074c6:	f001 8057 	beq.w	8008578 <dwt_ioctl+0x1ccc>
 80074ca:	6821      	ldr	r1, [r4, #0]
 80074cc:	f7fe fd7e 	bl	8005fcc <ull_repeated_frames>
 80074d0:	2500      	movs	r5, #0
 80074d2:	f7ff ba95 	b.w	8006a00 <dwt_ioctl+0x154>
 80074d6:	2200      	movs	r2, #0
 80074d8:	4981      	ldr	r1, [pc, #516]	; (80076e0 <dwt_ioctl+0xe34>)
 80074da:	f7fd fa29 	bl	8004930 <dwt_read16bitoffsetreg>
 80074de:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80074e2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80074e6:	bf18      	it	ne
 80074e8:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80074ec:	b22d      	sxth	r5, r5
 80074ee:	8025      	strh	r5, [r4, #0]
 80074f0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80074f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80074f6:	1aed      	subs	r5, r5, r3
 80074f8:	f7ff ba82 	b.w	8006a00 <dwt_ioctl+0x154>
 80074fc:	2c00      	cmp	r4, #0
 80074fe:	f001 806d 	beq.w	80085dc <dwt_ioctl+0x1d30>
 8007502:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007506:	7a23      	ldrb	r3, [r4, #8]
 8007508:	f899 2013 	ldrb.w	r2, [r9, #19]
 800750c:	2aff      	cmp	r2, #255	; 0xff
 800750e:	f000 813f 	beq.w	8007790 <dwt_ioctl+0xee4>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d136      	bne.n	8007584 <dwt_ioctl+0xcd8>
 8007516:	f8d9 3000 	ldr.w	r3, [r9]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	230c      	movs	r3, #12
 800751e:	2200      	movs	r2, #0
 8007520:	4970      	ldr	r1, [pc, #448]	; (80076e4 <dwt_ioctl+0xe38>)
 8007522:	f7fd fdd3 	bl	80050cc <dwt_writetodevice>
 8007526:	f899 300c 	ldrb.w	r3, [r9, #12]
 800752a:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800752e:	18d1      	adds	r1, r2, r3
 8007530:	f899 2012 	ldrb.w	r2, [r9, #18]
 8007534:	2a00      	cmp	r2, #0
 8007536:	d15f      	bne.n	80075f8 <dwt_ioctl+0xd4c>
 8007538:	f899 0010 	ldrb.w	r0, [r9, #16]
 800753c:	2800      	cmp	r0, #0
 800753e:	bf0b      	itete	eq
 8007540:	227f      	moveq	r2, #127	; 0x7f
 8007542:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8007546:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800754a:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800754e:	f899 0013 	ldrb.w	r0, [r9, #19]
 8007552:	1a12      	subs	r2, r2, r0
 8007554:	3a02      	subs	r2, #2
 8007556:	4291      	cmp	r1, r2
 8007558:	f200 8120 	bhi.w	800779c <dwt_ioctl+0xef0>
 800755c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007560:	9200      	str	r2, [sp, #0]
 8007562:	2200      	movs	r2, #0
 8007564:	4629      	mov	r1, r5
 8007566:	4630      	mov	r0, r6
 8007568:	f7fd fdb0 	bl	80050cc <dwt_writetodevice>
 800756c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007570:	f899 200c 	ldrb.w	r2, [r9, #12]
 8007574:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007578:	9100      	str	r1, [sp, #0]
 800757a:	4629      	mov	r1, r5
 800757c:	4630      	mov	r0, r6
 800757e:	f7fd fda5 	bl	80050cc <dwt_writetodevice>
 8007582:	e04a      	b.n	800761a <dwt_ioctl+0xd6e>
 8007584:	f8d9 3000 	ldr.w	r3, [r9]
 8007588:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800758c:	7a9a      	ldrb	r2, [r3, #10]
 800758e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8007592:	7a5a      	ldrb	r2, [r3, #9]
 8007594:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8007598:	7a1a      	ldrb	r2, [r3, #8]
 800759a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800759e:	79da      	ldrb	r2, [r3, #7]
 80075a0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80075a4:	799a      	ldrb	r2, [r3, #6]
 80075a6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80075aa:	795a      	ldrb	r2, [r3, #5]
 80075ac:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 80075b0:	791a      	ldrb	r2, [r3, #4]
 80075b2:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80075b6:	78da      	ldrb	r2, [r3, #3]
 80075b8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 80075bc:	789a      	ldrb	r2, [r3, #2]
 80075be:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80075c2:	785a      	ldrb	r2, [r3, #1]
 80075c4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80075ce:	2200      	movs	r2, #0
 80075d0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80075d4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80075d8:	0a09      	lsrs	r1, r1, #8
 80075da:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80075de:	7b19      	ldrb	r1, [r3, #12]
 80075e0:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80075e4:	7adb      	ldrb	r3, [r3, #11]
 80075e6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80075ea:	ab0c      	add	r3, sp, #48	; 0x30
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2310      	movs	r3, #16
 80075f0:	493c      	ldr	r1, [pc, #240]	; (80076e4 <dwt_ioctl+0xe38>)
 80075f2:	f7fd fd6b 	bl	80050cc <dwt_writetodevice>
 80075f6:	e796      	b.n	8007526 <dwt_ioctl+0xc7a>
 80075f8:	2a01      	cmp	r2, #1
 80075fa:	f040 80cc 	bne.w	8007796 <dwt_ioctl+0xeea>
 80075fe:	f899 3011 	ldrb.w	r3, [r9, #17]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007608:	bf08      	it	eq
 800760a:	237f      	moveq	r3, #127	; 0x7f
 800760c:	f899 2013 	ldrb.w	r2, [r9, #19]
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	3b02      	subs	r3, #2
 8007614:	4299      	cmp	r1, r3
 8007616:	f200 80c4 	bhi.w	80077a2 <dwt_ioctl+0xef6>
 800761a:	f899 2010 	ldrb.w	r2, [r9, #16]
 800761e:	1e53      	subs	r3, r2, #1
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b01      	cmp	r3, #1
 8007624:	d940      	bls.n	80076a8 <dwt_ioctl+0xdfc>
 8007626:	f899 3011 	ldrb.w	r3, [r9, #17]
 800762a:	1e59      	subs	r1, r3, #1
 800762c:	b2c9      	uxtb	r1, r1
 800762e:	2901      	cmp	r1, #1
 8007630:	d964      	bls.n	80076fc <dwt_ioctl+0xe50>
 8007632:	2b04      	cmp	r3, #4
 8007634:	d069      	beq.n	800770a <dwt_ioctl+0xe5e>
 8007636:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800763a:	2200      	movs	r2, #0
 800763c:	492a      	ldr	r1, [pc, #168]	; (80076e8 <dwt_ioctl+0xe3c>)
 800763e:	4630      	mov	r0, r6
 8007640:	f7fd fea2 	bl	8005388 <dwt_write32bitoffsetreg>
 8007644:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007648:	4a28      	ldr	r2, [pc, #160]	; (80076ec <dwt_ioctl+0xe40>)
 800764a:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800764e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007656:	4313      	orrs	r3, r2
 8007658:	2200      	movs	r2, #0
 800765a:	4925      	ldr	r1, [pc, #148]	; (80076f0 <dwt_ioctl+0xe44>)
 800765c:	4630      	mov	r0, r6
 800765e:	f7fd fe93 	bl	8005388 <dwt_write32bitoffsetreg>
 8007662:	2301      	movs	r3, #1
 8007664:	2200      	movs	r2, #0
 8007666:	4923      	ldr	r1, [pc, #140]	; (80076f4 <dwt_ioctl+0xe48>)
 8007668:	4630      	mov	r0, r6
 800766a:	f7fd fd3a 	bl	80050e2 <dwt_write8bitoffsetreg>
 800766e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80076f8 <dwt_ioctl+0xe4c>
 8007672:	2700      	movs	r7, #0
 8007674:	463a      	mov	r2, r7
 8007676:	4641      	mov	r1, r8
 8007678:	4630      	mov	r0, r6
 800767a:	f7fd f96b 	bl	8004954 <dwt_read8bitoffsetreg>
 800767e:	f010 0f05 	tst.w	r0, #5
 8007682:	d0f7      	beq.n	8007674 <dwt_ioctl+0xdc8>
 8007684:	4605      	mov	r5, r0
 8007686:	4603      	mov	r3, r0
 8007688:	2200      	movs	r2, #0
 800768a:	491b      	ldr	r1, [pc, #108]	; (80076f8 <dwt_ioctl+0xe4c>)
 800768c:	4630      	mov	r0, r6
 800768e:	f7fd fd28 	bl	80050e2 <dwt_write8bitoffsetreg>
 8007692:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8007696:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800769a:	2b01      	cmp	r3, #1
 800769c:	d042      	beq.n	8007724 <dwt_ioctl+0xe78>
 800769e:	b26b      	sxtb	r3, r5
 80076a0:	7023      	strb	r3, [r4, #0]
 80076a2:	2500      	movs	r5, #0
 80076a4:	f7ff b9ac 	b.w	8006a00 <dwt_ioctl+0x154>
 80076a8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80076aa:	7bdb      	ldrb	r3, [r3, #15]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	f001 802e 	beq.w	800870e <dwt_ioctl+0x1e62>
 80076b2:	f899 3011 	ldrb.w	r3, [r9, #17]
 80076b6:	1e5a      	subs	r2, r3, #1
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	2a01      	cmp	r2, #1
 80076bc:	d92c      	bls.n	8007718 <dwt_ioctl+0xe6c>
 80076be:	2201      	movs	r2, #1
 80076c0:	e7b7      	b.n	8007632 <dwt_ioctl+0xd86>
 80076c2:	bf00      	nop
 80076c4:	00070048 	.word	0x00070048
 80076c8:	00070034 	.word	0x00070034
 80076cc:	00080004 	.word	0x00080004
 80076d0:	3f866666 	.word	0x3f866666
 80076d4:	3ecccccd 	.word	0x3ecccccd
 80076d8:	437f0000 	.word	0x437f0000
 80076dc:	000f0024 	.word	0x000f0024
 80076e0:	00020008 	.word	0x00020008
 80076e4:	00010034 	.word	0x00010034
 80076e8:	00010044 	.word	0x00010044
 80076ec:	0001ff80 	.word	0x0001ff80
 80076f0:	00010048 	.word	0x00010048
 80076f4:	0001004c 	.word	0x0001004c
 80076f8:	00010050 	.word	0x00010050
 80076fc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80076fe:	7bdb      	ldrb	r3, [r3, #15]
 8007700:	2b03      	cmp	r3, #3
 8007702:	bf0c      	ite	eq
 8007704:	2302      	moveq	r3, #2
 8007706:	2301      	movne	r3, #1
 8007708:	e795      	b.n	8007636 <dwt_ioctl+0xd8a>
 800770a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800770e:	2910      	cmp	r1, #16
 8007710:	d991      	bls.n	8007636 <dwt_ioctl+0xd8a>
 8007712:	f06f 0303 	mvn.w	r3, #3
 8007716:	e7c3      	b.n	80076a0 <dwt_ioctl+0xdf4>
 8007718:	2201      	movs	r2, #1
 800771a:	4613      	mov	r3, r2
 800771c:	e78b      	b.n	8007636 <dwt_ioctl+0xd8a>
 800771e:	2202      	movs	r2, #2
 8007720:	4613      	mov	r3, r2
 8007722:	e788      	b.n	8007636 <dwt_ioctl+0xd8a>
 8007724:	f899 3012 	ldrb.w	r3, [r9, #18]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d1b8      	bne.n	800769e <dwt_ioctl+0xdf2>
 800772c:	f899 2011 	ldrb.w	r2, [r9, #17]
 8007730:	1e53      	subs	r3, r2, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	d91b      	bls.n	8007770 <dwt_ioctl+0xec4>
 8007738:	2a03      	cmp	r2, #3
 800773a:	bf0c      	ite	eq
 800773c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8007740:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8007744:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007748:	b112      	cbz	r2, 8007750 <dwt_ioctl+0xea4>
 800774a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800774e:	b9c3      	cbnz	r3, 8007782 <dwt_ioctl+0xed6>
 8007750:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007754:	2900      	cmp	r1, #0
 8007756:	d0a2      	beq.n	800769e <dwt_ioctl+0xdf2>
 8007758:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d09e      	beq.n	800769e <dwt_ioctl+0xdf2>
 8007760:	f899 200c 	ldrb.w	r2, [r9, #12]
 8007764:	9100      	str	r1, [sp, #0]
 8007766:	4639      	mov	r1, r7
 8007768:	4630      	mov	r0, r6
 800776a:	f7fd f8c1 	bl	80048f0 <dwt_readfromdevice>
 800776e:	e796      	b.n	800769e <dwt_ioctl+0xdf2>
 8007770:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007772:	7bdb      	ldrb	r3, [r3, #15]
 8007774:	2b03      	cmp	r3, #3
 8007776:	bf0c      	ite	eq
 8007778:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800777c:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8007780:	e7e0      	b.n	8007744 <dwt_ioctl+0xe98>
 8007782:	9200      	str	r2, [sp, #0]
 8007784:	2200      	movs	r2, #0
 8007786:	4639      	mov	r1, r7
 8007788:	4630      	mov	r0, r6
 800778a:	f7fd f8b1 	bl	80048f0 <dwt_readfromdevice>
 800778e:	e7df      	b.n	8007750 <dwt_ioctl+0xea4>
 8007790:	f06f 0302 	mvn.w	r3, #2
 8007794:	e784      	b.n	80076a0 <dwt_ioctl+0xdf4>
 8007796:	f06f 0301 	mvn.w	r3, #1
 800779a:	e781      	b.n	80076a0 <dwt_ioctl+0xdf4>
 800779c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077a0:	e77e      	b.n	80076a0 <dwt_ioctl+0xdf4>
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077a6:	e77b      	b.n	80076a0 <dwt_ioctl+0xdf4>
 80077a8:	7a23      	ldrb	r3, [r4, #8]
 80077aa:	79e1      	ldrb	r1, [r4, #7]
 80077ac:	79a2      	ldrb	r2, [r4, #6]
 80077ae:	00d2      	lsls	r2, r2, #3
 80077b0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80077b4:	4313      	orrs	r3, r2
 80077b6:	7962      	ldrb	r2, [r4, #5]
 80077b8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80077bc:	7922      	ldrb	r2, [r4, #4]
 80077be:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80077c2:	78e2      	ldrb	r2, [r4, #3]
 80077c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077c8:	78a2      	ldrb	r2, [r4, #2]
 80077ca:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80077ce:	7862      	ldrb	r2, [r4, #1]
 80077d0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2200      	movs	r2, #0
 80077d8:	49cd      	ldr	r1, [pc, #820]	; (8007b10 <dwt_ioctl+0x1264>)
 80077da:	f7fd fcd4 	bl	8005186 <dwt_write16bitoffsetreg>
 80077de:	2500      	movs	r5, #0
 80077e0:	f7ff b90e 	b.w	8006a00 <dwt_ioctl+0x154>
 80077e4:	2c00      	cmp	r4, #0
 80077e6:	f000 86fc 	beq.w	80085e2 <dwt_ioctl+0x1d36>
 80077ea:	7863      	ldrb	r3, [r4, #1]
 80077ec:	b133      	cbz	r3, 80077fc <dwt_ioctl+0xf50>
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	7023      	strb	r3, [r4, #0]
 80077f6:	2500      	movs	r5, #0
 80077f8:	f7ff b902 	b.w	8006a00 <dwt_ioctl+0x154>
 80077fc:	2300      	movs	r3, #0
 80077fe:	e7f9      	b.n	80077f4 <dwt_ioctl+0xf48>
 8007800:	2200      	movs	r2, #0
 8007802:	49c4      	ldr	r1, [pc, #784]	; (8007b14 <dwt_ioctl+0x1268>)
 8007804:	f7fd f87e 	bl	8004904 <dwt_read32bitoffsetreg>
 8007808:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800780c:	8023      	strh	r3, [r4, #0]
 800780e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007812:	8060      	strh	r0, [r4, #2]
 8007814:	2200      	movs	r2, #0
 8007816:	49c0      	ldr	r1, [pc, #768]	; (8007b18 <dwt_ioctl+0x126c>)
 8007818:	4630      	mov	r0, r6
 800781a:	f7fd f873 	bl	8004904 <dwt_read32bitoffsetreg>
 800781e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007822:	80a3      	strh	r3, [r4, #4]
 8007824:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007828:	80e0      	strh	r0, [r4, #6]
 800782a:	2200      	movs	r2, #0
 800782c:	49bb      	ldr	r1, [pc, #748]	; (8007b1c <dwt_ioctl+0x1270>)
 800782e:	4630      	mov	r0, r6
 8007830:	f7fd f868 	bl	8004904 <dwt_read32bitoffsetreg>
 8007834:	7220      	strb	r0, [r4, #8]
 8007836:	0c00      	lsrs	r0, r0, #16
 8007838:	7260      	strb	r0, [r4, #9]
 800783a:	2200      	movs	r2, #0
 800783c:	49b8      	ldr	r1, [pc, #736]	; (8007b20 <dwt_ioctl+0x1274>)
 800783e:	4630      	mov	r0, r6
 8007840:	f7fd f860 	bl	8004904 <dwt_read32bitoffsetreg>
 8007844:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800784e:	8160      	strh	r0, [r4, #10]
 8007850:	2200      	movs	r2, #0
 8007852:	49b4      	ldr	r1, [pc, #720]	; (8007b24 <dwt_ioctl+0x1278>)
 8007854:	4630      	mov	r0, r6
 8007856:	f7fd f855 	bl	8004904 <dwt_read32bitoffsetreg>
 800785a:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800785e:	f8a4 300f 	strh.w	r3, [r4, #15]
 8007862:	73a0      	strb	r0, [r4, #14]
 8007864:	2200      	movs	r2, #0
 8007866:	49b0      	ldr	r1, [pc, #704]	; (8007b28 <dwt_ioctl+0x127c>)
 8007868:	4630      	mov	r0, r6
 800786a:	f7fd f84b 	bl	8004904 <dwt_read32bitoffsetreg>
 800786e:	7460      	strb	r0, [r4, #17]
 8007870:	0c00      	lsrs	r0, r0, #16
 8007872:	74a0      	strb	r0, [r4, #18]
 8007874:	2200      	movs	r2, #0
 8007876:	49ad      	ldr	r1, [pc, #692]	; (8007b2c <dwt_ioctl+0x1280>)
 8007878:	4630      	mov	r0, r6
 800787a:	f7fd f843 	bl	8004904 <dwt_read32bitoffsetreg>
 800787e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007882:	f8a4 0013 	strh.w	r0, [r4, #19]
 8007886:	2500      	movs	r5, #0
 8007888:	7565      	strb	r5, [r4, #21]
 800788a:	75a5      	strb	r5, [r4, #22]
 800788c:	462a      	mov	r2, r5
 800788e:	49a8      	ldr	r1, [pc, #672]	; (8007b30 <dwt_ioctl+0x1284>)
 8007890:	4630      	mov	r0, r6
 8007892:	f7fd f85f 	bl	8004954 <dwt_read8bitoffsetreg>
 8007896:	75e0      	strb	r0, [r4, #23]
 8007898:	f7ff b8b2 	b.w	8006a00 <dwt_ioctl+0x154>
 800789c:	4611      	mov	r1, r2
 800789e:	f7fd fc5f 	bl	8005160 <ull_configeventcounters>
 80078a2:	2500      	movs	r5, #0
 80078a4:	f7ff b8ac 	b.w	8006a00 <dwt_ioctl+0x154>
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	f000 869d 	beq.w	80085e8 <dwt_ioctl+0x1d3c>
 80078ae:	8823      	ldrh	r3, [r4, #0]
 80078b0:	2200      	movs	r2, #0
 80078b2:	49a0      	ldr	r1, [pc, #640]	; (8007b34 <dwt_ioctl+0x1288>)
 80078b4:	f7fd fc67 	bl	8005186 <dwt_write16bitoffsetreg>
 80078b8:	2500      	movs	r5, #0
 80078ba:	f7ff b8a1 	b.w	8006a00 <dwt_ioctl+0x154>
 80078be:	2c00      	cmp	r4, #0
 80078c0:	f000 8695 	beq.w	80085ee <dwt_ioctl+0x1d42>
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	b935      	cbnz	r5, 80078d6 <dwt_ioctl+0x102a>
 80078c8:	2300      	movs	r3, #0
 80078ca:	461a      	mov	r2, r3
 80078cc:	499a      	ldr	r1, [pc, #616]	; (8007b38 <dwt_ioctl+0x128c>)
 80078ce:	f7fd fc5a 	bl	8005186 <dwt_write16bitoffsetreg>
 80078d2:	f7ff b895 	b.w	8006a00 <dwt_ioctl+0x154>
 80078d6:	7962      	ldrb	r2, [r4, #5]
 80078d8:	7923      	ldrb	r3, [r4, #4]
 80078da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80078de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078e2:	2200      	movs	r2, #0
 80078e4:	4994      	ldr	r1, [pc, #592]	; (8007b38 <dwt_ioctl+0x128c>)
 80078e6:	f7fd fc4e 	bl	8005186 <dwt_write16bitoffsetreg>
 80078ea:	2500      	movs	r5, #0
 80078ec:	f7ff b888 	b.w	8006a00 <dwt_ioctl+0x154>
 80078f0:	2c00      	cmp	r4, #0
 80078f2:	f000 867f 	beq.w	80085f4 <dwt_ioctl+0x1d48>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	b94b      	cbnz	r3, 800790e <dwt_ioctl+0x1062>
 80078fa:	2500      	movs	r5, #0
 80078fc:	9500      	str	r5, [sp, #0]
 80078fe:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8007902:	462a      	mov	r2, r5
 8007904:	2110      	movs	r1, #16
 8007906:	f7fe fc6d 	bl	80061e4 <dwt_modify16bitoffsetreg>
 800790a:	f7ff b879 	b.w	8006a00 <dwt_ioctl+0x154>
 800790e:	2200      	movs	r2, #0
 8007910:	2134      	movs	r1, #52	; 0x34
 8007912:	f7fd fd39 	bl	8005388 <dwt_write32bitoffsetreg>
 8007916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007920:	2200      	movs	r2, #0
 8007922:	2110      	movs	r1, #16
 8007924:	4630      	mov	r0, r6
 8007926:	f7fe fc5d 	bl	80061e4 <dwt_modify16bitoffsetreg>
 800792a:	2500      	movs	r5, #0
 800792c:	f7ff b868 	b.w	8006a00 <dwt_ioctl+0x154>
 8007930:	2c00      	cmp	r4, #0
 8007932:	f000 8662 	beq.w	80085fa <dwt_ioctl+0x1d4e>
 8007936:	8861      	ldrh	r1, [r4, #2]
 8007938:	f7fd fca2 	bl	8005280 <ull_aon_read>
 800793c:	7020      	strb	r0, [r4, #0]
 800793e:	2500      	movs	r5, #0
 8007940:	f7ff b85e 	b.w	8006a00 <dwt_ioctl+0x154>
 8007944:	2c00      	cmp	r4, #0
 8007946:	f000 865b 	beq.w	8008600 <dwt_ioctl+0x1d54>
 800794a:	78a2      	ldrb	r2, [r4, #2]
 800794c:	8821      	ldrh	r1, [r4, #0]
 800794e:	f7fd fcb7 	bl	80052c0 <ull_aon_write>
 8007952:	2500      	movs	r5, #0
 8007954:	f7ff b854 	b.w	8006a00 <dwt_ioctl+0x154>
 8007958:	4b78      	ldr	r3, [pc, #480]	; (8007b3c <dwt_ioctl+0x1290>)
 800795a:	4a79      	ldr	r2, [pc, #484]	; (8007b40 <dwt_ioctl+0x1294>)
 800795c:	2d01      	cmp	r5, #1
 800795e:	bf18      	it	ne
 8007960:	4613      	movne	r3, r2
 8007962:	2d01      	cmp	r5, #1
 8007964:	4977      	ldr	r1, [pc, #476]	; (8007b44 <dwt_ioctl+0x1298>)
 8007966:	bf18      	it	ne
 8007968:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800796c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800796e:	7bd2      	ldrb	r2, [r2, #15]
 8007970:	2a01      	cmp	r2, #1
 8007972:	d012      	beq.n	800799a <dwt_ioctl+0x10ee>
 8007974:	2a03      	cmp	r2, #3
 8007976:	d117      	bne.n	80079a8 <dwt_ioctl+0x10fc>
 8007978:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800797c:	3a01      	subs	r2, #1
 800797e:	441a      	add	r2, r3
 8007980:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007984:	f7fc ffd4 	bl	8004930 <dwt_read16bitoffsetreg>
 8007988:	09c0      	lsrs	r0, r0, #7
 800798a:	8020      	strh	r0, [r4, #0]
 800798c:	8825      	ldrh	r5, [r4, #0]
 800798e:	3500      	adds	r5, #0
 8007990:	bf18      	it	ne
 8007992:	2501      	movne	r5, #1
 8007994:	426d      	negs	r5, r5
 8007996:	f7ff b833 	b.w	8006a00 <dwt_ioctl+0x154>
 800799a:	2202      	movs	r2, #2
 800799c:	4619      	mov	r1, r3
 800799e:	f7fc ffc7 	bl	8004930 <dwt_read16bitoffsetreg>
 80079a2:	09c0      	lsrs	r0, r0, #7
 80079a4:	8020      	strh	r0, [r4, #0]
 80079a6:	e7f1      	b.n	800798c <dwt_ioctl+0x10e0>
 80079a8:	2202      	movs	r2, #2
 80079aa:	f7fc ffc1 	bl	8004930 <dwt_read16bitoffsetreg>
 80079ae:	09c0      	lsrs	r0, r0, #7
 80079b0:	8020      	strh	r0, [r4, #0]
 80079b2:	e7eb      	b.n	800798c <dwt_ioctl+0x10e0>
 80079b4:	2c00      	cmp	r4, #0
 80079b6:	f000 8626 	beq.w	8008606 <dwt_ioctl+0x1d5a>
 80079ba:	7821      	ldrb	r1, [r4, #0]
 80079bc:	f7fe fc48 	bl	8006250 <ull_setleds>
 80079c0:	2500      	movs	r5, #0
 80079c2:	f7ff b81d 	b.w	8006a00 <dwt_ioctl+0x154>
 80079c6:	4611      	mov	r1, r2
 80079c8:	f7fe fb18 	bl	8005ffc <ull_setdwstate>
 80079cc:	2500      	movs	r5, #0
 80079ce:	f7ff b817 	b.w	8006a00 <dwt_ioctl+0x154>
 80079d2:	9400      	str	r4, [sp, #0]
 80079d4:	2304      	movs	r3, #4
 80079d6:	2200      	movs	r2, #0
 80079d8:	211c      	movs	r1, #28
 80079da:	f7fc ff89 	bl	80048f0 <dwt_readfromdevice>
 80079de:	2500      	movs	r5, #0
 80079e0:	f7ff b80e 	b.w	8006a00 <dwt_ioctl+0x154>
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	f000 8611 	beq.w	800860c <dwt_ioctl+0x1d60>
 80079ea:	2202      	movs	r2, #2
 80079ec:	2144      	movs	r1, #68	; 0x44
 80079ee:	f7fc ff9f 	bl	8004930 <dwt_read16bitoffsetreg>
 80079f2:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80079f6:	7020      	strb	r0, [r4, #0]
 80079f8:	2500      	movs	r5, #0
 80079fa:	f7ff b801 	b.w	8006a00 <dwt_ioctl+0x154>
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	f000 8607 	beq.w	8008612 <dwt_ioctl+0x1d66>
 8007a04:	2200      	movs	r2, #0
 8007a06:	2144      	movs	r1, #68	; 0x44
 8007a08:	f7fc ffa4 	bl	8004954 <dwt_read8bitoffsetreg>
 8007a0c:	f000 0001 	and.w	r0, r0, #1
 8007a10:	7020      	strb	r0, [r4, #0]
 8007a12:	2500      	movs	r5, #0
 8007a14:	f7fe bff4 	b.w	8006a00 <dwt_ioctl+0x154>
 8007a18:	2c00      	cmp	r4, #0
 8007a1a:	f000 85fd 	beq.w	8008618 <dwt_ioctl+0x1d6c>
 8007a1e:	8862      	ldrh	r2, [r4, #2]
 8007a20:	8821      	ldrh	r1, [r4, #0]
 8007a22:	f7fe fb49 	bl	80060b8 <ull_configureframefilter>
 8007a26:	2500      	movs	r5, #0
 8007a28:	f7fe bfea 	b.w	8006a00 <dwt_ioctl+0x154>
 8007a2c:	9400      	str	r4, [sp, #0]
 8007a2e:	2308      	movs	r3, #8
 8007a30:	2200      	movs	r2, #0
 8007a32:	2104      	movs	r1, #4
 8007a34:	f7fd fb4a 	bl	80050cc <dwt_writetodevice>
 8007a38:	2500      	movs	r5, #0
 8007a3a:	f7fe bfe1 	b.w	8006a00 <dwt_ioctl+0x154>
 8007a3e:	9400      	str	r4, [sp, #0]
 8007a40:	2308      	movs	r3, #8
 8007a42:	2200      	movs	r2, #0
 8007a44:	2104      	movs	r1, #4
 8007a46:	f7fc ff53 	bl	80048f0 <dwt_readfromdevice>
 8007a4a:	2500      	movs	r5, #0
 8007a4c:	f7fe bfd8 	b.w	8006a00 <dwt_ioctl+0x154>
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	f000 85e4 	beq.w	800861e <dwt_ioctl+0x1d72>
 8007a56:	8823      	ldrh	r3, [r4, #0]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	210c      	movs	r1, #12
 8007a5c:	f7fd fb93 	bl	8005186 <dwt_write16bitoffsetreg>
 8007a60:	2500      	movs	r5, #0
 8007a62:	f7fe bfcd 	b.w	8006a00 <dwt_ioctl+0x154>
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	f000 85dc 	beq.w	8008624 <dwt_ioctl+0x1d78>
 8007a6c:	8823      	ldrh	r3, [r4, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	210c      	movs	r1, #12
 8007a72:	f7fd fb88 	bl	8005186 <dwt_write16bitoffsetreg>
 8007a76:	2500      	movs	r5, #0
 8007a78:	f7fe bfc2 	b.w	8006a00 <dwt_ioctl+0x154>
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	f7fd fb03 	bl	8005088 <ull_readrxtimestamp>
 8007a82:	2500      	movs	r5, #0
 8007a84:	f7fe bfbc 	b.w	8006a00 <dwt_ioctl+0x154>
 8007a88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007a8a:	7bdb      	ldrb	r3, [r3, #15]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d00b      	beq.n	8007aa8 <dwt_ioctl+0x11fc>
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d112      	bne.n	8007aba <dwt_ioctl+0x120e>
 8007a94:	9400      	str	r4, [sp, #0]
 8007a96:	2305      	movs	r3, #5
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007a9e:	f7fc ff27 	bl	80048f0 <dwt_readfromdevice>
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	f7fe bfac 	b.w	8006a00 <dwt_ioctl+0x154>
 8007aa8:	9400      	str	r4, [sp, #0]
 8007aaa:	2305      	movs	r3, #5
 8007aac:	2200      	movs	r2, #0
 8007aae:	4926      	ldr	r1, [pc, #152]	; (8007b48 <dwt_ioctl+0x129c>)
 8007ab0:	f7fc ff1e 	bl	80048f0 <dwt_readfromdevice>
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	f7fe bfa3 	b.w	8006a00 <dwt_ioctl+0x154>
 8007aba:	9400      	str	r4, [sp, #0]
 8007abc:	2305      	movs	r3, #5
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8007ac4:	f7fc ff14 	bl	80048f0 <dwt_readfromdevice>
 8007ac8:	2500      	movs	r5, #0
 8007aca:	f7fe bf99 	b.w	8006a00 <dwt_ioctl+0x154>
 8007ace:	2500      	movs	r5, #0
 8007ad0:	f804 5b01 	strb.w	r5, [r4], #1
 8007ad4:	9400      	str	r4, [sp, #0]
 8007ad6:	2304      	movs	r3, #4
 8007ad8:	462a      	mov	r2, r5
 8007ada:	2170      	movs	r1, #112	; 0x70
 8007adc:	f7fc ff08 	bl	80048f0 <dwt_readfromdevice>
 8007ae0:	f7fe bf8e 	b.w	8006a00 <dwt_ioctl+0x154>
 8007ae4:	2c00      	cmp	r4, #0
 8007ae6:	f000 85a0 	beq.w	800862a <dwt_ioctl+0x1d7e>
 8007aea:	2201      	movs	r2, #1
 8007aec:	2164      	movs	r1, #100	; 0x64
 8007aee:	f7fc ff09 	bl	8004904 <dwt_read32bitoffsetreg>
 8007af2:	6020      	str	r0, [r4, #0]
 8007af4:	2500      	movs	r5, #0
 8007af6:	f7fe bf83 	b.w	8006a00 <dwt_ioctl+0x154>
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	f000 8598 	beq.w	8008630 <dwt_ioctl+0x1d84>
 8007b00:	2200      	movs	r2, #0
 8007b02:	2164      	movs	r1, #100	; 0x64
 8007b04:	f7fc fefe 	bl	8004904 <dwt_read32bitoffsetreg>
 8007b08:	6020      	str	r0, [r4, #0]
 8007b0a:	2500      	movs	r5, #0
 8007b0c:	f7fe bf78 	b.w	8006a00 <dwt_ioctl+0x154>
 8007b10:	00010030 	.word	0x00010030
 8007b14:	000f0004 	.word	0x000f0004
 8007b18:	000f0008 	.word	0x000f0008
 8007b1c:	000f000c 	.word	0x000f000c
 8007b20:	000f0010 	.word	0x000f0010
 8007b24:	000f0014 	.word	0x000f0014
 8007b28:	000f0018 	.word	0x000f0018
 8007b2c:	000f001c 	.word	0x000f001c
 8007b30:	000f0028 	.word	0x000f0028
 8007b34:	00060004 	.word	0x00060004
 8007b38:	0011001a 	.word	0x0011001a
 8007b3c:	00180034 	.word	0x00180034
 8007b40:	0018002c 	.word	0x0018002c
 8007b44:	000c0014 	.word	0x000c0014
 8007b48:	00180020 	.word	0x00180020
 8007b4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b4e:	7bdb      	ldrb	r3, [r3, #15]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d00b      	beq.n	8007b6c <dwt_ioctl+0x12c0>
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d112      	bne.n	8007b7e <dwt_ioctl+0x12d2>
 8007b58:	9400      	str	r4, [sp, #0]
 8007b5a:	2305      	movs	r3, #5
 8007b5c:	2228      	movs	r2, #40	; 0x28
 8007b5e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007b62:	f7fc fec5 	bl	80048f0 <dwt_readfromdevice>
 8007b66:	2500      	movs	r5, #0
 8007b68:	f7fe bf4a 	b.w	8006a00 <dwt_ioctl+0x154>
 8007b6c:	9400      	str	r4, [sp, #0]
 8007b6e:	2305      	movs	r3, #5
 8007b70:	2200      	movs	r2, #0
 8007b72:	49d3      	ldr	r1, [pc, #844]	; (8007ec0 <dwt_ioctl+0x1614>)
 8007b74:	f7fc febc 	bl	80048f0 <dwt_readfromdevice>
 8007b78:	2500      	movs	r5, #0
 8007b7a:	f7fe bf41 	b.w	8006a00 <dwt_ioctl+0x154>
 8007b7e:	9400      	str	r4, [sp, #0]
 8007b80:	2305      	movs	r3, #5
 8007b82:	2200      	movs	r2, #0
 8007b84:	49cf      	ldr	r1, [pc, #828]	; (8007ec4 <dwt_ioctl+0x1618>)
 8007b86:	f7fc feb3 	bl	80048f0 <dwt_readfromdevice>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	f7fe bf38 	b.w	8006a00 <dwt_ioctl+0x154>
 8007b90:	2c00      	cmp	r4, #0
 8007b92:	f000 8550 	beq.w	8008636 <dwt_ioctl+0x1d8a>
 8007b96:	2200      	movs	r2, #0
 8007b98:	211c      	movs	r1, #28
 8007b9a:	f7fc feb3 	bl	8004904 <dwt_read32bitoffsetreg>
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	2500      	movs	r5, #0
 8007ba2:	f7fe bf2d 	b.w	8006a00 <dwt_ioctl+0x154>
 8007ba6:	2c00      	cmp	r4, #0
 8007ba8:	f000 8548 	beq.w	800863c <dwt_ioctl+0x1d90>
 8007bac:	8825      	ldrh	r5, [r4, #0]
 8007bae:	6867      	ldr	r7, [r4, #4]
 8007bb0:	7a23      	ldrb	r3, [r4, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8545 	beq.w	8008642 <dwt_ioctl+0x1d96>
 8007bb8:	463c      	mov	r4, r7
 8007bba:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7fd fb3b 	bl	800523c <_dwt_otpread>
 8007bc6:	f844 0b04 	str.w	r0, [r4], #4
 8007bca:	3501      	adds	r5, #1
 8007bcc:	b2ad      	uxth	r5, r5
 8007bce:	42bc      	cmp	r4, r7
 8007bd0:	d1f5      	bne.n	8007bbe <dwt_ioctl+0x1312>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	f7fe bf14 	b.w	8006a00 <dwt_ioctl+0x154>
 8007bd8:	2c00      	cmp	r4, #0
 8007bda:	f000 8535 	beq.w	8008648 <dwt_ioctl+0x1d9c>
 8007bde:	7823      	ldrb	r3, [r4, #0]
 8007be0:	2201      	movs	r2, #1
 8007be2:	2128      	movs	r1, #40	; 0x28
 8007be4:	f7fd fa7d 	bl	80050e2 <dwt_write8bitoffsetreg>
 8007be8:	2500      	movs	r5, #0
 8007bea:	f7fe bf09 	b.w	8006a00 <dwt_ioctl+0x154>
 8007bee:	f7fe fa87 	bl	8006100 <ull_run_pgfcal>
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	f7fe bf04 	b.w	8006a00 <dwt_ioctl+0x154>
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	f7fe fb77 	bl	80062ec <ull_pgf_cal>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	f7fe befe 	b.w	8006a00 <dwt_ioctl+0x154>
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	f000 8522 	beq.w	800864e <dwt_ioctl+0x1da2>
 8007c0a:	78a5      	ldrb	r5, [r4, #2]
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	f7fd faeb 	bl	80051e8 <ull_force_clocks>
 8007c12:	2100      	movs	r1, #0
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7fd ff8b 	bl	8005b30 <ull_enable_rf_tx>
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7fd ffbc 	bl	8005b98 <ull_enable_rftx_blocks>
 8007c20:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8007c24:	2200      	movs	r2, #0
 8007c26:	49a8      	ldr	r1, [pc, #672]	; (8007ec8 <dwt_ioctl+0x161c>)
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7fd fa5a 	bl	80050e2 <dwt_write8bitoffsetreg>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	23ff      	movs	r3, #255	; 0xff
 8007c34:	2200      	movs	r2, #0
 8007c36:	49a5      	ldr	r1, [pc, #660]	; (8007ecc <dwt_ioctl+0x1620>)
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f7fe f921 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8007c3e:	4fa3      	ldr	r7, [pc, #652]	; (8007ecc <dwt_ioctl+0x1620>)
 8007c40:	2500      	movs	r5, #0
 8007c42:	462a      	mov	r2, r5
 8007c44:	4639      	mov	r1, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7fc fe84 	bl	8004954 <dwt_read8bitoffsetreg>
 8007c4c:	f010 0f01 	tst.w	r0, #1
 8007c50:	d1f7      	bne.n	8007c42 <dwt_ioctl+0x1396>
 8007c52:	2200      	movs	r2, #0
 8007c54:	499e      	ldr	r1, [pc, #632]	; (8007ed0 <dwt_ioctl+0x1624>)
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7fc fe6a 	bl	8004930 <dwt_read16bitoffsetreg>
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7fd fe30 	bl	80058c4 <ull_disable_rftx_blocks>
 8007c64:	2100      	movs	r1, #0
 8007c66:	4630      	mov	r0, r6
 8007c68:	f7fd fe36 	bl	80058d8 <ull_disable_rf_tx>
 8007c6c:	2105      	movs	r1, #5
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7fd faba 	bl	80051e8 <ull_force_clocks>
 8007c74:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8007c78:	8025      	strh	r5, [r4, #0]
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	f7fe bec0 	b.w	8006a00 <dwt_ioctl+0x154>
 8007c80:	2102      	movs	r1, #2
 8007c82:	f7fe f9bb 	bl	8005ffc <ull_setdwstate>
 8007c86:	2101      	movs	r1, #1
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7fe f9b7 	bl	8005ffc <ull_setdwstate>
 8007c8e:	2432      	movs	r4, #50	; 0x32
 8007c90:	f04f 0814 	mov.w	r8, #20
 8007c94:	2700      	movs	r7, #0
 8007c96:	2544      	movs	r5, #68	; 0x44
 8007c98:	4640      	mov	r0, r8
 8007c9a:	f7f8 fde2 	bl	8000862 <deca_usleep>
 8007c9e:	463a      	mov	r2, r7
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7fc fe56 	bl	8004954 <dwt_read8bitoffsetreg>
 8007ca8:	f010 0f02 	tst.w	r0, #2
 8007cac:	d105      	bne.n	8007cba <dwt_ioctl+0x140e>
 8007cae:	1e63      	subs	r3, r4, #1
 8007cb0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007cb4:	d1f0      	bne.n	8007c98 <dwt_ioctl+0x13ec>
 8007cb6:	2501      	movs	r5, #1
 8007cb8:	e000      	b.n	8007cbc <dwt_ioctl+0x1410>
 8007cba:	2500      	movs	r5, #0
 8007cbc:	426d      	negs	r5, r5
 8007cbe:	f7fe be9f 	b.w	8006a00 <dwt_ioctl+0x154>
 8007cc2:	2c00      	cmp	r4, #0
 8007cc4:	f000 84c6 	beq.w	8008654 <dwt_ioctl+0x1da8>
 8007cc8:	7823      	ldrb	r3, [r4, #0]
 8007cca:	031b      	lsls	r3, r3, #12
 8007ccc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007cd0:	7862      	ldrb	r2, [r4, #1]
 8007cd2:	2a01      	cmp	r2, #1
 8007cd4:	bf08      	it	eq
 8007cd6:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	497c      	ldr	r1, [pc, #496]	; (8007ed4 <dwt_ioctl+0x1628>)
 8007ce4:	f7fd fee2 	bl	8005aac <dwt_modify32bitoffsetreg>
 8007ce8:	2500      	movs	r5, #0
 8007cea:	f7fe be89 	b.w	8006a00 <dwt_ioctl+0x154>
 8007cee:	2c00      	cmp	r4, #0
 8007cf0:	f000 84b3 	beq.w	800865a <dwt_ioctl+0x1dae>
 8007cf4:	6862      	ldr	r2, [r4, #4]
 8007cf6:	6821      	ldr	r1, [r4, #0]
 8007cf8:	f7fe f818 	bl	8005d2c <ull_setgpiomode>
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	f7fe be7f 	b.w	8006a00 <dwt_ioctl+0x154>
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	f000 84ac 	beq.w	8008660 <dwt_ioctl+0x1db4>
 8007d08:	8823      	ldrh	r3, [r4, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4972      	ldr	r1, [pc, #456]	; (8007ed8 <dwt_ioctl+0x162c>)
 8007d0e:	f7fd fa3a 	bl	8005186 <dwt_write16bitoffsetreg>
 8007d12:	2500      	movs	r5, #0
 8007d14:	f7fe be74 	b.w	8006a00 <dwt_ioctl+0x154>
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	f000 84a4 	beq.w	8008666 <dwt_ioctl+0x1dba>
 8007d1e:	6862      	ldr	r2, [r4, #4]
 8007d20:	8821      	ldrh	r1, [r4, #0]
 8007d22:	f7fe fb13 	bl	800634c <ull_setgpiovalue>
 8007d26:	2500      	movs	r5, #0
 8007d28:	f7fe be6a 	b.w	8006a00 <dwt_ioctl+0x154>
 8007d2c:	2c00      	cmp	r4, #0
 8007d2e:	f000 849d 	beq.w	800866c <dwt_ioctl+0x1dc0>
 8007d32:	7865      	ldrb	r5, [r4, #1]
 8007d34:	7823      	ldrb	r3, [r4, #0]
 8007d36:	b18b      	cbz	r3, 8007d5c <dwt_ioctl+0x14b0>
 8007d38:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	73da      	strb	r2, [r3, #15]
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d42:	2208      	movs	r2, #8
 8007d44:	b1e5      	cbz	r5, 8007d80 <dwt_ioctl+0x14d4>
 8007d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d4a:	9200      	str	r2, [sp, #0]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2110      	movs	r1, #16
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7fd feab 	bl	8005aac <dwt_modify32bitoffsetreg>
 8007d56:	2500      	movs	r5, #0
 8007d58:	f7fe be52 	b.w	8006a00 <dwt_ioctl+0x154>
 8007d5c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d5e:	2201      	movs	r2, #1
 8007d60:	73da      	strb	r2, [r3, #15]
 8007d62:	2318      	movs	r3, #24
 8007d64:	2200      	movs	r2, #0
 8007d66:	495d      	ldr	r1, [pc, #372]	; (8007edc <dwt_ioctl+0x1630>)
 8007d68:	f7fd fb0e 	bl	8005388 <dwt_write32bitoffsetreg>
 8007d6c:	23e8      	movs	r3, #232	; 0xe8
 8007d6e:	2200      	movs	r2, #0
 8007d70:	495b      	ldr	r1, [pc, #364]	; (8007ee0 <dwt_ioctl+0x1634>)
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7fd fb08 	bl	8005388 <dwt_write32bitoffsetreg>
 8007d78:	f06f 0308 	mvn.w	r3, #8
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	e7e1      	b.n	8007d44 <dwt_ioctl+0x1498>
 8007d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d84:	e7e1      	b.n	8007d4a <dwt_ioctl+0x149e>
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	f000 8473 	beq.w	8008672 <dwt_ioctl+0x1dc6>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2130      	movs	r1, #48	; 0x30
 8007d92:	f7fd faf9 	bl	8005388 <dwt_write32bitoffsetreg>
 8007d96:	2500      	movs	r5, #0
 8007d98:	f7fe be32 	b.w	8006a00 <dwt_ioctl+0x154>
 8007d9c:	2c00      	cmp	r4, #0
 8007d9e:	f000 846b 	beq.w	8008678 <dwt_ioctl+0x1dcc>
 8007da2:	2200      	movs	r2, #0
 8007da4:	4629      	mov	r1, r5
 8007da6:	f7fc fdad 	bl	8004904 <dwt_read32bitoffsetreg>
 8007daa:	6020      	str	r0, [r4, #0]
 8007dac:	2500      	movs	r5, #0
 8007dae:	f7fe be27 	b.w	8006a00 <dwt_ioctl+0x154>
 8007db2:	4623      	mov	r3, r4
 8007db4:	2200      	movs	r2, #0
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7fd fae6 	bl	8005388 <dwt_write32bitoffsetreg>
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	f7fe be1f 	b.w	8006a00 <dwt_ioctl+0x154>
 8007dc2:	2c00      	cmp	r4, #0
 8007dc4:	f000 845b 	beq.w	800867e <dwt_ioctl+0x1dd2>
 8007dc8:	2203      	movs	r2, #3
 8007dca:	4946      	ldr	r1, [pc, #280]	; (8007ee4 <dwt_ioctl+0x1638>)
 8007dcc:	f7fc fdc2 	bl	8004954 <dwt_read8bitoffsetreg>
 8007dd0:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8007dd4:	7020      	strb	r0, [r4, #0]
 8007dd6:	2500      	movs	r5, #0
 8007dd8:	f7fe be12 	b.w	8006a00 <dwt_ioctl+0x154>
 8007ddc:	2c00      	cmp	r4, #0
 8007dde:	f000 8451 	beq.w	8008684 <dwt_ioctl+0x1dd8>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2144      	movs	r1, #68	; 0x44
 8007de8:	f7fd face 	bl	8005388 <dwt_write32bitoffsetreg>
 8007dec:	2500      	movs	r5, #0
 8007dee:	f7fe be07 	b.w	8006a00 <dwt_ioctl+0x154>
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	f000 8449 	beq.w	800868a <dwt_ioctl+0x1dde>
 8007df8:	8823      	ldrh	r3, [r4, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2148      	movs	r1, #72	; 0x48
 8007dfe:	f7fd f9c2 	bl	8005186 <dwt_write16bitoffsetreg>
 8007e02:	2500      	movs	r5, #0
 8007e04:	f7fe bdfc 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	f000 8441 	beq.w	8008690 <dwt_ioctl+0x1de4>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2144      	movs	r1, #68	; 0x44
 8007e12:	f7fc fd77 	bl	8004904 <dwt_read32bitoffsetreg>
 8007e16:	6020      	str	r0, [r4, #0]
 8007e18:	2500      	movs	r5, #0
 8007e1a:	f7fe bdf1 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	f000 8439 	beq.w	8008696 <dwt_ioctl+0x1dea>
 8007e24:	2200      	movs	r2, #0
 8007e26:	2148      	movs	r1, #72	; 0x48
 8007e28:	f7fc fd82 	bl	8004930 <dwt_read16bitoffsetreg>
 8007e2c:	6020      	str	r0, [r4, #0]
 8007e2e:	2500      	movs	r5, #0
 8007e30:	f7fe bde6 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e34:	2c00      	cmp	r4, #0
 8007e36:	f000 8431 	beq.w	800869c <dwt_ioctl+0x1df0>
 8007e3a:	7823      	ldrb	r3, [r4, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	492a      	ldr	r1, [pc, #168]	; (8007ee8 <dwt_ioctl+0x163c>)
 8007e40:	f7fd f94f 	bl	80050e2 <dwt_write8bitoffsetreg>
 8007e44:	2500      	movs	r5, #0
 8007e46:	f7fe bddb 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e4a:	2c00      	cmp	r4, #0
 8007e4c:	f000 8429 	beq.w	80086a2 <dwt_ioctl+0x1df6>
 8007e50:	2200      	movs	r2, #0
 8007e52:	2144      	movs	r1, #68	; 0x44
 8007e54:	f7fc fd7e 	bl	8004954 <dwt_read8bitoffsetreg>
 8007e58:	7020      	strb	r0, [r4, #0]
 8007e5a:	2500      	movs	r5, #0
 8007e5c:	f7fe bdd0 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e60:	2c00      	cmp	r4, #0
 8007e62:	f000 8421 	beq.w	80086a8 <dwt_ioctl+0x1dfc>
 8007e66:	f7fd f949 	bl	80050fc <ull_getframelength>
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	f7fe bdc7 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	f000 841b 	beq.w	80086ae <dwt_ioctl+0x1e02>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	491c      	ldr	r1, [pc, #112]	; (8007eec <dwt_ioctl+0x1640>)
 8007e7c:	f7fc fd58 	bl	8004930 <dwt_read16bitoffsetreg>
 8007e80:	8020      	strh	r0, [r4, #0]
 8007e82:	2500      	movs	r5, #0
 8007e84:	f7fe bdbc 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e88:	2c00      	cmp	r4, #0
 8007e8a:	f000 8413 	beq.w	80086b4 <dwt_ioctl+0x1e08>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4917      	ldr	r1, [pc, #92]	; (8007ef0 <dwt_ioctl+0x1644>)
 8007e92:	f7fc fd37 	bl	8004904 <dwt_read32bitoffsetreg>
 8007e96:	6020      	str	r0, [r4, #0]
 8007e98:	2500      	movs	r5, #0
 8007e9a:	f7fe bdb1 	b.w	8006a00 <dwt_ioctl+0x154>
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	f000 840b 	beq.w	80086ba <dwt_ioctl+0x1e0e>
 8007ea4:	8823      	ldrh	r3, [r4, #0]
 8007ea6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	490f      	ldr	r1, [pc, #60]	; (8007ef0 <dwt_ioctl+0x1644>)
 8007eb4:	f7fe f996 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8007eb8:	2500      	movs	r5, #0
 8007eba:	f7fe bda1 	b.w	8006a00 <dwt_ioctl+0x154>
 8007ebe:	bf00      	nop
 8007ec0:	00180028 	.word	0x00180028
 8007ec4:	000c0008 	.word	0x000c0008
 8007ec8:	0007001c 	.word	0x0007001c
 8007ecc:	00080010 	.word	0x00080010
 8007ed0:	00080014 	.word	0x00080014
 8007ed4:	00070014 	.word	0x00070014
 8007ed8:	00050008 	.word	0x00050008
 8007edc:	001f000c 	.word	0x001f000c
 8007ee0:	001f0010 	.word	0x001f0010
 8007ee4:	00030060 	.word	0x00030060
 8007ee8:	00010024 	.word	0x00010024
 8007eec:	0005002c 	.word	0x0005002c
 8007ef0:	000e001a 	.word	0x000e001a
 8007ef4:	2c00      	cmp	r4, #0
 8007ef6:	f000 83e3 	beq.w	80086c0 <dwt_ioctl+0x1e14>
 8007efa:	88a7      	ldrh	r7, [r4, #4]
 8007efc:	68a3      	ldr	r3, [r4, #8]
 8007efe:	9309      	str	r3, [sp, #36]	; 0x24
 8007f00:	7b21      	ldrb	r1, [r4, #12]
 8007f02:	9106      	str	r1, [sp, #24]
 8007f04:	6922      	ldr	r2, [r4, #16]
 8007f06:	9204      	str	r2, [sp, #16]
 8007f08:	6962      	ldr	r2, [r4, #20]
 8007f0a:	9205      	str	r2, [sp, #20]
 8007f0c:	f003 0203 	and.w	r2, r3, #3
 8007f10:	f3c3 0085 	ubfx	r0, r3, #2, #6
 8007f14:	2905      	cmp	r1, #5
 8007f16:	d142      	bne.n	8007f9e <dwt_ioctl+0x16f2>
 8007f18:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8007f1c:	bf28      	it	cs
 8007f1e:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8007f22:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8008204 <dwt_ioctl+0x1958>
 8007f26:	2f04      	cmp	r7, #4
 8007f28:	d805      	bhi.n	8007f36 <dwt_ioctl+0x168a>
 8007f2a:	eb09 0300 	add.w	r3, r9, r0
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	3b05      	subs	r3, #5
 8007f32:	429f      	cmp	r7, r3
 8007f34:	db3b      	blt.n	8007fae <dwt_ioctl+0x1702>
 8007f36:	2a01      	cmp	r2, #1
 8007f38:	d877      	bhi.n	800802a <dwt_ioctl+0x177e>
 8007f3a:	4bae      	ldr	r3, [pc, #696]	; (80081f4 <dwt_ioctl+0x1948>)
 8007f3c:	5c99      	ldrb	r1, [r3, r2]
 8007f3e:	463e      	mov	r6, r7
 8007f40:	42b9      	cmp	r1, r7
 8007f42:	da74      	bge.n	800802e <dwt_ioctl+0x1782>
 8007f44:	1c55      	adds	r5, r2, #1
 8007f46:	fa53 f585 	uxtab	r5, r3, r5
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	440b      	add	r3, r1
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3201      	adds	r2, #1
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	2a02      	cmp	r2, #2
 8007f56:	d005      	beq.n	8007f64 <dwt_ioctl+0x16b8>
 8007f58:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007f5c:	eba6 0c03 	sub.w	ip, r6, r3
 8007f60:	4561      	cmp	r1, ip
 8007f62:	dbf3      	blt.n	8007f4c <dwt_ioctl+0x16a0>
 8007f64:	429f      	cmp	r7, r3
 8007f66:	bf08      	it	eq
 8007f68:	9003      	streq	r0, [sp, #12]
 8007f6a:	d064      	beq.n	8008036 <dwt_ioctl+0x178a>
 8007f6c:	f107 0805 	add.w	r8, r7, #5
 8007f70:	fa1f f888 	uxth.w	r8, r8
 8007f74:	2580      	movs	r5, #128	; 0x80
 8007f76:	2100      	movs	r1, #0
 8007f78:	9107      	str	r1, [sp, #28]
 8007f7a:	9103      	str	r1, [sp, #12]
 8007f7c:	9108      	str	r1, [sp, #32]
 8007f7e:	460e      	mov	r6, r1
 8007f80:	f04f 0b05 	mov.w	fp, #5
 8007f84:	46be      	mov	lr, r7
 8007f86:	455f      	cmp	r7, fp
 8007f88:	bf38      	it	cc
 8007f8a:	46de      	movcc	lr, fp
 8007f8c:	f1ae 0e05 	sub.w	lr, lr, #5
 8007f90:	fa1f fe8e 	uxth.w	lr, lr
 8007f94:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80081f4 <dwt_ioctl+0x1948>
 8007f98:	46bc      	mov	ip, r7
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	e3dd      	b.n	800875a <dwt_ioctl+0x1eae>
 8007f9e:	f240 1331 	movw	r3, #305	; 0x131
 8007fa2:	429f      	cmp	r7, r3
 8007fa4:	bf28      	it	cs
 8007fa6:	461f      	movcs	r7, r3
 8007fa8:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8008208 <dwt_ioctl+0x195c>
 8007fac:	e7bb      	b.n	8007f26 <dwt_ioctl+0x167a>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9a05      	ldr	r2, [sp, #20]
 8007fb2:	8013      	strh	r3, [r2, #0]
 8007fb4:	9a04      	ldr	r2, [sp, #16]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fba:	600a      	str	r2, [r1, #0]
 8007fbc:	e04a      	b.n	8008054 <dwt_ioctl+0x17a8>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9a05      	ldr	r2, [sp, #20]
 8007fc2:	8013      	strh	r3, [r2, #0]
 8007fc4:	9b04      	ldr	r3, [sp, #16]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fd0:	e040      	b.n	8008054 <dwt_ioctl+0x17a8>
 8007fd2:	fa1f fb81 	uxth.w	fp, r1
 8007fd6:	9207      	str	r2, [sp, #28]
 8007fd8:	9003      	str	r0, [sp, #12]
 8007fda:	9308      	str	r3, [sp, #32]
 8007fdc:	2701      	movs	r7, #1
 8007fde:	e3cd      	b.n	800877c <dwt_ioctl+0x1ed0>
 8007fe0:	2f00      	cmp	r7, #0
 8007fe2:	f040 83a1 	bne.w	8008728 <dwt_ioctl+0x1e7c>
 8007fe6:	4598      	cmp	r8, r3
 8007fe8:	f200 83a3 	bhi.w	8008732 <dwt_ioctl+0x1e86>
 8007fec:	2e00      	cmp	r6, #0
 8007fee:	d038      	beq.n	8008062 <dwt_ioctl+0x17b6>
 8007ff0:	283f      	cmp	r0, #63	; 0x3f
 8007ff2:	f000 83c8 	beq.w	8008786 <dwt_ioctl+0x1eda>
 8007ff6:	2700      	movs	r7, #0
 8007ff8:	f819 1000 	ldrb.w	r1, [r9, r0]
 8007ffc:	1a5b      	subs	r3, r3, r1
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	1e46      	subs	r6, r0, #1
 8008002:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8008006:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800800a:	bf18      	it	ne
 800800c:	2601      	movne	r6, #1
 800800e:	e39c      	b.n	800874a <dwt_ioctl+0x1e9e>
 8008010:	9906      	ldr	r1, [sp, #24]
 8008012:	2909      	cmp	r1, #9
 8008014:	f040 83bd 	bne.w	8008792 <dwt_ioctl+0x1ee6>
 8008018:	213f      	movs	r1, #63	; 0x3f
 800801a:	9103      	str	r1, [sp, #12]
 800801c:	e00b      	b.n	8008036 <dwt_ioctl+0x178a>
 800801e:	b2b3      	uxth	r3, r6
 8008020:	3201      	adds	r2, #1
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	213f      	movs	r1, #63	; 0x3f
 8008026:	9103      	str	r1, [sp, #12]
 8008028:	e005      	b.n	8008036 <dwt_ioctl+0x178a>
 800802a:	2300      	movs	r3, #0
 800802c:	e79a      	b.n	8007f64 <dwt_ioctl+0x16b8>
 800802e:	2300      	movs	r3, #0
 8008030:	e798      	b.n	8007f64 <dwt_ioctl+0x16b8>
 8008032:	9003      	str	r0, [sp, #12]
 8008034:	4663      	mov	r3, ip
 8008036:	9905      	ldr	r1, [sp, #20]
 8008038:	800b      	strh	r3, [r1, #0]
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	0413      	lsls	r3, r2, #16
 8008044:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008048:	4313      	orrs	r3, r2
 800804a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	2500      	movs	r5, #0
 8008058:	f7fe bcd2 	b.w	8006a00 <dwt_ioctl+0x154>
 800805c:	9a07      	ldr	r2, [sp, #28]
 800805e:	9b08      	ldr	r3, [sp, #32]
 8008060:	e7e9      	b.n	8008036 <dwt_ioctl+0x178a>
 8008062:	9003      	str	r0, [sp, #12]
 8008064:	e7e7      	b.n	8008036 <dwt_ioctl+0x178a>
 8008066:	9a07      	ldr	r2, [sp, #28]
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	e7e4      	b.n	8008036 <dwt_ioctl+0x178a>
 800806c:	213f      	movs	r1, #63	; 0x3f
 800806e:	9103      	str	r1, [sp, #12]
 8008070:	e7e1      	b.n	8008036 <dwt_ioctl+0x178a>
 8008072:	2c00      	cmp	r4, #0
 8008074:	f000 8327 	beq.w	80086c6 <dwt_ioctl+0x1e1a>
 8008078:	7825      	ldrb	r5, [r4, #0]
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	2a01      	cmp	r2, #1
 800807e:	bf15      	itete	ne
 8008080:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8008084:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8008088:	27df      	movne	r7, #223	; 0xdf
 800808a:	27ef      	moveq	r7, #239	; 0xef
 800808c:	bf14      	ite	ne
 800808e:	f04f 0820 	movne.w	r8, #32
 8008092:	f04f 0810 	moveq.w	r8, #16
 8008096:	2400      	movs	r4, #0
 8008098:	9400      	str	r4, [sp, #0]
 800809a:	4622      	mov	r2, r4
 800809c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80080a0:	f7fd fd04 	bl	8005aac <dwt_modify32bitoffsetreg>
 80080a4:	9400      	str	r4, [sp, #0]
 80080a6:	463b      	mov	r3, r7
 80080a8:	4622      	mov	r2, r4
 80080aa:	4953      	ldr	r1, [pc, #332]	; (80081f8 <dwt_ioctl+0x194c>)
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7fd fee7 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80080b2:	2d01      	cmp	r5, #1
 80080b4:	d003      	beq.n	80080be <dwt_ioctl+0x1812>
 80080b6:	b165      	cbz	r5, 80080d2 <dwt_ioctl+0x1826>
 80080b8:	2500      	movs	r5, #0
 80080ba:	f7fe bca1 	b.w	8006a00 <dwt_ioctl+0x154>
 80080be:	4625      	mov	r5, r4
 80080c0:	9400      	str	r4, [sp, #0]
 80080c2:	463b      	mov	r3, r7
 80080c4:	4622      	mov	r2, r4
 80080c6:	494d      	ldr	r1, [pc, #308]	; (80081fc <dwt_ioctl+0x1950>)
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7fd fed9 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80080ce:	f7fe bc97 	b.w	8006a00 <dwt_ioctl+0x154>
 80080d2:	f8cd 8000 	str.w	r8, [sp]
 80080d6:	23ff      	movs	r3, #255	; 0xff
 80080d8:	2200      	movs	r2, #0
 80080da:	4948      	ldr	r1, [pc, #288]	; (80081fc <dwt_ioctl+0x1950>)
 80080dc:	4630      	mov	r0, r6
 80080de:	f7fd fecf 	bl	8005e80 <dwt_modify8bitoffsetreg>
 80080e2:	f7fe bc8d 	b.w	8006a00 <dwt_ioctl+0x154>
 80080e6:	2c00      	cmp	r4, #0
 80080e8:	f000 82f0 	beq.w	80086cc <dwt_ioctl+0x1e20>
 80080ec:	7822      	ldrb	r2, [r4, #0]
 80080ee:	f012 0f01 	tst.w	r2, #1
 80080f2:	d02d      	beq.n	8008150 <dwt_ioctl+0x18a4>
 80080f4:	0157      	lsls	r7, r2, #5
 80080f6:	f007 0740 	and.w	r7, r7, #64	; 0x40
 80080fa:	2440      	movs	r4, #64	; 0x40
 80080fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008100:	f012 0f04 	tst.w	r2, #4
 8008104:	d028      	beq.n	8008158 <dwt_ioctl+0x18ac>
 8008106:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800810a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800810e:	0112      	lsls	r2, r2, #4
 8008110:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008114:	4317      	orrs	r7, r2
 8008116:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800811a:	9200      	str	r2, [sp, #0]
 800811c:	43db      	mvns	r3, r3
 800811e:	2200      	movs	r2, #0
 8008120:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008124:	4630      	mov	r0, r6
 8008126:	f7fd fcc1 	bl	8005aac <dwt_modify32bitoffsetreg>
 800812a:	43e4      	mvns	r4, r4
 800812c:	b2a4      	uxth	r4, r4
 800812e:	2500      	movs	r5, #0
 8008130:	9500      	str	r5, [sp, #0]
 8008132:	4623      	mov	r3, r4
 8008134:	462a      	mov	r2, r5
 8008136:	4930      	ldr	r1, [pc, #192]	; (80081f8 <dwt_ioctl+0x194c>)
 8008138:	4630      	mov	r0, r6
 800813a:	f7fe f853 	bl	80061e4 <dwt_modify16bitoffsetreg>
 800813e:	9700      	str	r7, [sp, #0]
 8008140:	4623      	mov	r3, r4
 8008142:	462a      	mov	r2, r5
 8008144:	492d      	ldr	r1, [pc, #180]	; (80081fc <dwt_ioctl+0x1950>)
 8008146:	4630      	mov	r0, r6
 8008148:	f7fe f84c 	bl	80061e4 <dwt_modify16bitoffsetreg>
 800814c:	f7fe bc58 	b.w	8006a00 <dwt_ioctl+0x154>
 8008150:	2700      	movs	r7, #0
 8008152:	463c      	mov	r4, r7
 8008154:	463b      	mov	r3, r7
 8008156:	e7d3      	b.n	8008100 <dwt_ioctl+0x1854>
 8008158:	2200      	movs	r2, #0
 800815a:	e7de      	b.n	800811a <dwt_ioctl+0x186e>
 800815c:	2308      	movs	r3, #8
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	23ff      	movs	r3, #255	; 0xff
 8008162:	2201      	movs	r2, #1
 8008164:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008168:	f7fd fe8a 	bl	8005e80 <dwt_modify8bitoffsetreg>
 800816c:	4c24      	ldr	r4, [pc, #144]	; (8008200 <dwt_ioctl+0x1954>)
 800816e:	2302      	movs	r3, #2
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	23ff      	movs	r3, #255	; 0xff
 8008174:	2203      	movs	r2, #3
 8008176:	4621      	mov	r1, r4
 8008178:	4630      	mov	r0, r6
 800817a:	f7fd fe81 	bl	8005e80 <dwt_modify8bitoffsetreg>
 800817e:	2500      	movs	r5, #0
 8008180:	9500      	str	r5, [sp, #0]
 8008182:	23f7      	movs	r3, #247	; 0xf7
 8008184:	2201      	movs	r2, #1
 8008186:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800818a:	4630      	mov	r0, r6
 800818c:	f7fd fe78 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8008190:	9500      	str	r5, [sp, #0]
 8008192:	23fd      	movs	r3, #253	; 0xfd
 8008194:	2203      	movs	r2, #3
 8008196:	4621      	mov	r1, r4
 8008198:	4630      	mov	r0, r6
 800819a:	f7fd fe71 	bl	8005e80 <dwt_modify8bitoffsetreg>
 800819e:	f7fe bc2f 	b.w	8006a00 <dwt_ioctl+0x154>
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	f000 8295 	beq.w	80086d2 <dwt_ioctl+0x1e26>
 80081a8:	8863      	ldrh	r3, [r4, #2]
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80081b0:	7822      	ldrb	r2, [r4, #0]
 80081b2:	b10a      	cbz	r2, 80081b8 <dwt_ioctl+0x190c>
 80081b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	f24f 0307 	movw	r3, #61447	; 0xf007
 80081be:	2200      	movs	r2, #0
 80081c0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7fe f80d 	bl	80061e4 <dwt_modify16bitoffsetreg>
 80081ca:	2500      	movs	r5, #0
 80081cc:	f7fe bc18 	b.w	8006a00 <dwt_ioctl+0x154>
 80081d0:	2c00      	cmp	r4, #0
 80081d2:	f000 8281 	beq.w	80086d8 <dwt_ioctl+0x1e2c>
 80081d6:	b2e3      	uxtb	r3, r4
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	2301      	movs	r3, #1
 80081dc:	4093      	lsls	r3, r2
 80081de:	3b01      	subs	r3, #1
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2200      	movs	r2, #0
 80081e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80081e8:	f7fc ff7b 	bl	80050e2 <dwt_write8bitoffsetreg>
 80081ec:	2500      	movs	r5, #0
 80081ee:	f7fe bc07 	b.w	8006a00 <dwt_ioctl+0x154>
 80081f2:	bf00      	nop
 80081f4:	08011fdc 	.word	0x08011fdc
 80081f8:	00050008 	.word	0x00050008
 80081fc:	0005000c 	.word	0x0005000c
 8008200:	00110008 	.word	0x00110008
 8008204:	08011f5c 	.word	0x08011f5c
 8008208:	08011f9c 	.word	0x08011f9c
 800820c:	2c00      	cmp	r4, #0
 800820e:	f000 8266 	beq.w	80086de <dwt_ioctl+0x1e32>
 8008212:	7ae3      	ldrb	r3, [r4, #11]
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8265 	beq.w	80086e4 <dwt_ioctl+0x1e38>
 800821a:	7b63      	ldrb	r3, [r4, #13]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d921      	bls.n	8008264 <dwt_ioctl+0x19b8>
 8008220:	7b22      	ldrb	r2, [r4, #12]
 8008222:	4bd7      	ldr	r3, [pc, #860]	; (8008580 <dwt_ioctl+0x1cd4>)
 8008224:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008228:	0112      	lsls	r2, r2, #4
 800822a:	0ad3      	lsrs	r3, r2, #11
 800822c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008234:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008238:	bf28      	it	cs
 800823a:	3301      	addcs	r3, #1
 800823c:	b29b      	uxth	r3, r3
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	f64f 7380 	movw	r3, #65408	; 0xff80
 8008248:	2202      	movs	r2, #2
 800824a:	49ce      	ldr	r1, [pc, #824]	; (8008584 <dwt_ioctl+0x1cd8>)
 800824c:	4630      	mov	r0, r6
 800824e:	f7fd ffc9 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8008252:	2394      	movs	r3, #148	; 0x94
 8008254:	2200      	movs	r2, #0
 8008256:	49cc      	ldr	r1, [pc, #816]	; (8008588 <dwt_ioctl+0x1cdc>)
 8008258:	4630      	mov	r0, r6
 800825a:	f7fc ff42 	bl	80050e2 <dwt_write8bitoffsetreg>
 800825e:	2500      	movs	r5, #0
 8008260:	f7fe bbce 	b.w	8006a00 <dwt_ioctl+0x154>
 8008264:	7b22      	ldrb	r2, [r4, #12]
 8008266:	4bc6      	ldr	r3, [pc, #792]	; (8008580 <dwt_ioctl+0x1cd4>)
 8008268:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800826c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8008270:	fb02 f203 	mul.w	r2, r2, r3
 8008274:	0c93      	lsrs	r3, r2, #18
 8008276:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800827a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800827e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008282:	bf28      	it	cs
 8008284:	3301      	addcs	r3, #1
 8008286:	b29b      	uxth	r3, r3
 8008288:	e7d9      	b.n	800823e <dwt_ioctl+0x1992>
 800828a:	2c00      	cmp	r4, #0
 800828c:	f000 822d 	beq.w	80086ea <dwt_ioctl+0x1e3e>
 8008290:	2200      	movs	r2, #0
 8008292:	49be      	ldr	r1, [pc, #760]	; (800858c <dwt_ioctl+0x1ce0>)
 8008294:	f7fc fb36 	bl	8004904 <dwt_read32bitoffsetreg>
 8008298:	6020      	str	r0, [r4, #0]
 800829a:	2500      	movs	r5, #0
 800829c:	f7fe bbb0 	b.w	8006a00 <dwt_ioctl+0x154>
 80082a0:	2c00      	cmp	r4, #0
 80082a2:	f000 8225 	beq.w	80086f0 <dwt_ioctl+0x1e44>
 80082a6:	2200      	movs	r2, #0
 80082a8:	49b9      	ldr	r1, [pc, #740]	; (8008590 <dwt_ioctl+0x1ce4>)
 80082aa:	f7fc fb2b 	bl	8004904 <dwt_read32bitoffsetreg>
 80082ae:	6020      	str	r0, [r4, #0]
 80082b0:	2500      	movs	r5, #0
 80082b2:	f7fe bba5 	b.w	8006a00 <dwt_ioctl+0x154>
 80082b6:	2c00      	cmp	r4, #0
 80082b8:	f000 821d 	beq.w	80086f6 <dwt_ioctl+0x1e4a>
 80082bc:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	2500      	movs	r5, #0
 80082c4:	f7fe bb9c 	b.w	8006a00 <dwt_ioctl+0x154>
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	f000 8217 	beq.w	80086fc <dwt_ioctl+0x1e50>
 80082ce:	2500      	movs	r5, #0
 80082d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80082d2:	af10      	add	r7, sp, #64	; 0x40
 80082d4:	2319      	movs	r3, #25
 80082d6:	f847 3d10 	str.w	r3, [r7, #-16]!
 80082da:	9700      	str	r7, [sp, #0]
 80082dc:	2304      	movs	r3, #4
 80082de:	462a      	mov	r2, r5
 80082e0:	49ac      	ldr	r1, [pc, #688]	; (8008594 <dwt_ioctl+0x1ce8>)
 80082e2:	f7fc fef3 	bl	80050cc <dwt_writetodevice>
 80082e6:	f641 7348 	movw	r3, #8008	; 0x1f48
 80082ea:	930c      	str	r3, [sp, #48]	; 0x30
 80082ec:	9700      	str	r7, [sp, #0]
 80082ee:	2304      	movs	r3, #4
 80082f0:	462a      	mov	r2, r5
 80082f2:	49a9      	ldr	r1, [pc, #676]	; (8008598 <dwt_ioctl+0x1cec>)
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7fc fee9 	bl	80050cc <dwt_writetodevice>
 80082fa:	ab0b      	add	r3, sp, #44	; 0x2c
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2304      	movs	r3, #4
 8008300:	462a      	mov	r2, r5
 8008302:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8008306:	4630      	mov	r0, r6
 8008308:	f7fc faf2 	bl	80048f0 <dwt_readfromdevice>
 800830c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	f7fe bb76 	b.w	8006a00 <dwt_ioctl+0x154>
 8008314:	2c00      	cmp	r4, #0
 8008316:	f000 81f4 	beq.w	8008702 <dwt_ioctl+0x1e56>
 800831a:	2200      	movs	r2, #0
 800831c:	499f      	ldr	r1, [pc, #636]	; (800859c <dwt_ioctl+0x1cf0>)
 800831e:	f7fc faf1 	bl	8004904 <dwt_read32bitoffsetreg>
 8008322:	b280      	uxth	r0, r0
 8008324:	6020      	str	r0, [r4, #0]
 8008326:	2200      	movs	r2, #0
 8008328:	499d      	ldr	r1, [pc, #628]	; (80085a0 <dwt_ioctl+0x1cf4>)
 800832a:	4630      	mov	r0, r6
 800832c:	f7fc faea 	bl	8004904 <dwt_read32bitoffsetreg>
 8008330:	0d43      	lsrs	r3, r0, #21
 8008332:	019b      	lsls	r3, r3, #6
 8008334:	b29b      	uxth	r3, r3
 8008336:	6063      	str	r3, [r4, #4]
 8008338:	2500      	movs	r5, #0
 800833a:	f7fe bb61 	b.w	8006a00 <dwt_ioctl+0x154>
 800833e:	2c00      	cmp	r4, #0
 8008340:	f000 81e2 	beq.w	8008708 <dwt_ioctl+0x1e5c>
 8008344:	7d63      	ldrb	r3, [r4, #21]
 8008346:	b12b      	cbz	r3, 8008354 <dwt_ioctl+0x1aa8>
 8008348:	2b01      	cmp	r3, #1
 800834a:	d037      	beq.n	80083bc <dwt_ioctl+0x1b10>
 800834c:	2b02      	cmp	r3, #2
 800834e:	d05e      	beq.n	800840e <dwt_ioctl+0x1b62>
 8008350:	23ff      	movs	r3, #255	; 0xff
 8008352:	e02f      	b.n	80083b4 <dwt_ioctl+0x1b08>
 8008354:	2200      	movs	r2, #0
 8008356:	4993      	ldr	r1, [pc, #588]	; (80085a4 <dwt_ioctl+0x1cf8>)
 8008358:	f7fc fad4 	bl	8004904 <dwt_read32bitoffsetreg>
 800835c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008360:	6020      	str	r0, [r4, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	4990      	ldr	r1, [pc, #576]	; (80085a8 <dwt_ioctl+0x1cfc>)
 8008366:	4630      	mov	r0, r6
 8008368:	f7fc facc 	bl	8004904 <dwt_read32bitoffsetreg>
 800836c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008370:	6060      	str	r0, [r4, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	498d      	ldr	r1, [pc, #564]	; (80085ac <dwt_ioctl+0x1d00>)
 8008376:	4630      	mov	r0, r6
 8008378:	f7fc fac4 	bl	8004904 <dwt_read32bitoffsetreg>
 800837c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008380:	60a0      	str	r0, [r4, #8]
 8008382:	2200      	movs	r2, #0
 8008384:	498a      	ldr	r1, [pc, #552]	; (80085b0 <dwt_ioctl+0x1d04>)
 8008386:	4630      	mov	r0, r6
 8008388:	f7fc fabc 	bl	8004904 <dwt_read32bitoffsetreg>
 800838c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008390:	60e0      	str	r0, [r4, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	4987      	ldr	r1, [pc, #540]	; (80085b4 <dwt_ioctl+0x1d08>)
 8008396:	4630      	mov	r0, r6
 8008398:	f7fc fab4 	bl	8004904 <dwt_read32bitoffsetreg>
 800839c:	f3c0 0010 	ubfx	r0, r0, #0, #17
 80083a0:	6120      	str	r0, [r4, #16]
 80083a2:	2203      	movs	r2, #3
 80083a4:	4979      	ldr	r1, [pc, #484]	; (800858c <dwt_ioctl+0x1ce0>)
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7fc fad4 	bl	8004954 <dwt_read8bitoffsetreg>
 80083ac:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80083b0:	7520      	strb	r0, [r4, #20]
 80083b2:	2300      	movs	r3, #0
 80083b4:	75a3      	strb	r3, [r4, #22]
 80083b6:	2500      	movs	r5, #0
 80083b8:	f7fe bb22 	b.w	8006a00 <dwt_ioctl+0x154>
 80083bc:	2200      	movs	r2, #0
 80083be:	497e      	ldr	r1, [pc, #504]	; (80085b8 <dwt_ioctl+0x1d0c>)
 80083c0:	f7fc faa0 	bl	8004904 <dwt_read32bitoffsetreg>
 80083c4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80083c8:	6020      	str	r0, [r4, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	497b      	ldr	r1, [pc, #492]	; (80085bc <dwt_ioctl+0x1d10>)
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7fc fa98 	bl	8004904 <dwt_read32bitoffsetreg>
 80083d4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80083d8:	6060      	str	r0, [r4, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	4978      	ldr	r1, [pc, #480]	; (80085c0 <dwt_ioctl+0x1d14>)
 80083de:	4630      	mov	r0, r6
 80083e0:	f7fc fa90 	bl	8004904 <dwt_read32bitoffsetreg>
 80083e4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80083e8:	60a0      	str	r0, [r4, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7fc fa87 	bl	8004904 <dwt_read32bitoffsetreg>
 80083f6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80083fa:	60e0      	str	r0, [r4, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	4971      	ldr	r1, [pc, #452]	; (80085c4 <dwt_ioctl+0x1d18>)
 8008400:	4630      	mov	r0, r6
 8008402:	f7fc fa7f 	bl	8004904 <dwt_read32bitoffsetreg>
 8008406:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800840a:	6120      	str	r0, [r4, #16]
 800840c:	e7c9      	b.n	80083a2 <dwt_ioctl+0x1af6>
 800840e:	2200      	movs	r2, #0
 8008410:	496d      	ldr	r1, [pc, #436]	; (80085c8 <dwt_ioctl+0x1d1c>)
 8008412:	f7fc fa77 	bl	8004904 <dwt_read32bitoffsetreg>
 8008416:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	2200      	movs	r2, #0
 800841e:	496b      	ldr	r1, [pc, #428]	; (80085cc <dwt_ioctl+0x1d20>)
 8008420:	4630      	mov	r0, r6
 8008422:	f7fc fa6f 	bl	8004904 <dwt_read32bitoffsetreg>
 8008426:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800842a:	6060      	str	r0, [r4, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	4968      	ldr	r1, [pc, #416]	; (80085d0 <dwt_ioctl+0x1d24>)
 8008430:	4630      	mov	r0, r6
 8008432:	f7fc fa67 	bl	8004904 <dwt_read32bitoffsetreg>
 8008436:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800843a:	60a0      	str	r0, [r4, #8]
 800843c:	2200      	movs	r2, #0
 800843e:	4965      	ldr	r1, [pc, #404]	; (80085d4 <dwt_ioctl+0x1d28>)
 8008440:	4630      	mov	r0, r6
 8008442:	f7fc fa5f 	bl	8004904 <dwt_read32bitoffsetreg>
 8008446:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800844a:	60e0      	str	r0, [r4, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	4962      	ldr	r1, [pc, #392]	; (80085d8 <dwt_ioctl+0x1d2c>)
 8008450:	4630      	mov	r0, r6
 8008452:	f7fc fa57 	bl	8004904 <dwt_read32bitoffsetreg>
 8008456:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800845a:	6120      	str	r0, [r4, #16]
 800845c:	e7a1      	b.n	80083a2 <dwt_ioctl+0x1af6>
 800845e:	2500      	movs	r5, #0
 8008460:	f7fe bace 	b.w	8006a00 <dwt_ioctl+0x154>
 8008464:	2500      	movs	r5, #0
 8008466:	f7fe bacb 	b.w	8006a00 <dwt_ioctl+0x154>
 800846a:	2500      	movs	r5, #0
 800846c:	f7fe bac8 	b.w	8006a00 <dwt_ioctl+0x154>
 8008470:	2500      	movs	r5, #0
 8008472:	f7fe bac5 	b.w	8006a00 <dwt_ioctl+0x154>
 8008476:	2500      	movs	r5, #0
 8008478:	f7fe bac2 	b.w	8006a00 <dwt_ioctl+0x154>
 800847c:	2500      	movs	r5, #0
 800847e:	f7fe babf 	b.w	8006a00 <dwt_ioctl+0x154>
 8008482:	2500      	movs	r5, #0
 8008484:	f7fe babc 	b.w	8006a00 <dwt_ioctl+0x154>
 8008488:	2500      	movs	r5, #0
 800848a:	f7fe bab9 	b.w	8006a00 <dwt_ioctl+0x154>
 800848e:	2500      	movs	r5, #0
 8008490:	f7fe bab6 	b.w	8006a00 <dwt_ioctl+0x154>
 8008494:	2500      	movs	r5, #0
 8008496:	f7fe bab3 	b.w	8006a00 <dwt_ioctl+0x154>
 800849a:	2500      	movs	r5, #0
 800849c:	f7fe bab0 	b.w	8006a00 <dwt_ioctl+0x154>
 80084a0:	2500      	movs	r5, #0
 80084a2:	f7fe baad 	b.w	8006a00 <dwt_ioctl+0x154>
 80084a6:	2500      	movs	r5, #0
 80084a8:	f7fe baaa 	b.w	8006a00 <dwt_ioctl+0x154>
 80084ac:	2500      	movs	r5, #0
 80084ae:	f7fe baa7 	b.w	8006a00 <dwt_ioctl+0x154>
 80084b2:	2500      	movs	r5, #0
 80084b4:	f7fe baa4 	b.w	8006a00 <dwt_ioctl+0x154>
 80084b8:	2500      	movs	r5, #0
 80084ba:	f7fe baa1 	b.w	8006a00 <dwt_ioctl+0x154>
 80084be:	2500      	movs	r5, #0
 80084c0:	f7fe ba9e 	b.w	8006a00 <dwt_ioctl+0x154>
 80084c4:	2500      	movs	r5, #0
 80084c6:	f7fe ba9b 	b.w	8006a00 <dwt_ioctl+0x154>
 80084ca:	2500      	movs	r5, #0
 80084cc:	f7fe ba98 	b.w	8006a00 <dwt_ioctl+0x154>
 80084d0:	2500      	movs	r5, #0
 80084d2:	f7fe ba95 	b.w	8006a00 <dwt_ioctl+0x154>
 80084d6:	2500      	movs	r5, #0
 80084d8:	f7fe ba92 	b.w	8006a00 <dwt_ioctl+0x154>
 80084dc:	2500      	movs	r5, #0
 80084de:	f7fe ba8f 	b.w	8006a00 <dwt_ioctl+0x154>
 80084e2:	2500      	movs	r5, #0
 80084e4:	f7fe ba8c 	b.w	8006a00 <dwt_ioctl+0x154>
 80084e8:	2500      	movs	r5, #0
 80084ea:	f7fe ba89 	b.w	8006a00 <dwt_ioctl+0x154>
 80084ee:	2500      	movs	r5, #0
 80084f0:	f7fe ba86 	b.w	8006a00 <dwt_ioctl+0x154>
 80084f4:	2500      	movs	r5, #0
 80084f6:	f7fe ba83 	b.w	8006a00 <dwt_ioctl+0x154>
 80084fa:	2500      	movs	r5, #0
 80084fc:	f7fe ba80 	b.w	8006a00 <dwt_ioctl+0x154>
 8008500:	2500      	movs	r5, #0
 8008502:	f7fe ba7d 	b.w	8006a00 <dwt_ioctl+0x154>
 8008506:	2500      	movs	r5, #0
 8008508:	f7fe ba7a 	b.w	8006a00 <dwt_ioctl+0x154>
 800850c:	2500      	movs	r5, #0
 800850e:	f7fe ba77 	b.w	8006a00 <dwt_ioctl+0x154>
 8008512:	2500      	movs	r5, #0
 8008514:	f7fe ba74 	b.w	8006a00 <dwt_ioctl+0x154>
 8008518:	2500      	movs	r5, #0
 800851a:	f7fe ba71 	b.w	8006a00 <dwt_ioctl+0x154>
 800851e:	2500      	movs	r5, #0
 8008520:	f7fe ba6e 	b.w	8006a00 <dwt_ioctl+0x154>
 8008524:	2500      	movs	r5, #0
 8008526:	f7fe ba6b 	b.w	8006a00 <dwt_ioctl+0x154>
 800852a:	2500      	movs	r5, #0
 800852c:	f7fe ba68 	b.w	8006a00 <dwt_ioctl+0x154>
 8008530:	2500      	movs	r5, #0
 8008532:	f7fe ba65 	b.w	8006a00 <dwt_ioctl+0x154>
 8008536:	2500      	movs	r5, #0
 8008538:	f7fe ba62 	b.w	8006a00 <dwt_ioctl+0x154>
 800853c:	2500      	movs	r5, #0
 800853e:	f7fe ba5f 	b.w	8006a00 <dwt_ioctl+0x154>
 8008542:	2500      	movs	r5, #0
 8008544:	f7fe ba5c 	b.w	8006a00 <dwt_ioctl+0x154>
 8008548:	2500      	movs	r5, #0
 800854a:	f7fe ba59 	b.w	8006a00 <dwt_ioctl+0x154>
 800854e:	2500      	movs	r5, #0
 8008550:	f7fe ba56 	b.w	8006a00 <dwt_ioctl+0x154>
 8008554:	2500      	movs	r5, #0
 8008556:	f7fe ba53 	b.w	8006a00 <dwt_ioctl+0x154>
 800855a:	2500      	movs	r5, #0
 800855c:	f7fe ba50 	b.w	8006a00 <dwt_ioctl+0x154>
 8008560:	2500      	movs	r5, #0
 8008562:	f7fe ba4d 	b.w	8006a00 <dwt_ioctl+0x154>
 8008566:	2500      	movs	r5, #0
 8008568:	f7fe ba4a 	b.w	8006a00 <dwt_ioctl+0x154>
 800856c:	2500      	movs	r5, #0
 800856e:	f7fe ba47 	b.w	8006a00 <dwt_ioctl+0x154>
 8008572:	2500      	movs	r5, #0
 8008574:	f7fe ba44 	b.w	8006a00 <dwt_ioctl+0x154>
 8008578:	2500      	movs	r5, #0
 800857a:	f7fe ba41 	b.w	8006a00 <dwt_ioctl+0x154>
 800857e:	bf00      	nop
 8008580:	08012018 	.word	0x08012018
 8008584:	000e0012 	.word	0x000e0012
 8008588:	000e0016 	.word	0x000e0016
 800858c:	00030060 	.word	0x00030060
 8008590:	000f0048 	.word	0x000f0048
 8008594:	001f0004 	.word	0x001f0004
 8008598:	001f0008 	.word	0x001f0008
 800859c:	000c0048 	.word	0x000c0048
 80085a0:	000c0028 	.word	0x000c0028
 80085a4:	000c0058 	.word	0x000c0058
 80085a8:	000c0030 	.word	0x000c0030
 80085ac:	000c0034 	.word	0x000c0034
 80085b0:	000c0038 	.word	0x000c0038
 80085b4:	000c002c 	.word	0x000c002c
 80085b8:	000d0020 	.word	0x000d0020
 80085bc:	000c0064 	.word	0x000c0064
 80085c0:	000c0068 	.word	0x000c0068
 80085c4:	000c0060 	.word	0x000c0060
 80085c8:	000d0068 	.word	0x000d0068
 80085cc:	000d0040 	.word	0x000d0040
 80085d0:	000d0044 	.word	0x000d0044
 80085d4:	000d0048 	.word	0x000d0048
 80085d8:	000d003c 	.word	0x000d003c
 80085dc:	2500      	movs	r5, #0
 80085de:	f7fe ba0f 	b.w	8006a00 <dwt_ioctl+0x154>
 80085e2:	2500      	movs	r5, #0
 80085e4:	f7fe ba0c 	b.w	8006a00 <dwt_ioctl+0x154>
 80085e8:	2500      	movs	r5, #0
 80085ea:	f7fe ba09 	b.w	8006a00 <dwt_ioctl+0x154>
 80085ee:	2500      	movs	r5, #0
 80085f0:	f7fe ba06 	b.w	8006a00 <dwt_ioctl+0x154>
 80085f4:	2500      	movs	r5, #0
 80085f6:	f7fe ba03 	b.w	8006a00 <dwt_ioctl+0x154>
 80085fa:	2500      	movs	r5, #0
 80085fc:	f7fe ba00 	b.w	8006a00 <dwt_ioctl+0x154>
 8008600:	2500      	movs	r5, #0
 8008602:	f7fe b9fd 	b.w	8006a00 <dwt_ioctl+0x154>
 8008606:	2500      	movs	r5, #0
 8008608:	f7fe b9fa 	b.w	8006a00 <dwt_ioctl+0x154>
 800860c:	2500      	movs	r5, #0
 800860e:	f7fe b9f7 	b.w	8006a00 <dwt_ioctl+0x154>
 8008612:	2500      	movs	r5, #0
 8008614:	f7fe b9f4 	b.w	8006a00 <dwt_ioctl+0x154>
 8008618:	2500      	movs	r5, #0
 800861a:	f7fe b9f1 	b.w	8006a00 <dwt_ioctl+0x154>
 800861e:	2500      	movs	r5, #0
 8008620:	f7fe b9ee 	b.w	8006a00 <dwt_ioctl+0x154>
 8008624:	2500      	movs	r5, #0
 8008626:	f7fe b9eb 	b.w	8006a00 <dwt_ioctl+0x154>
 800862a:	2500      	movs	r5, #0
 800862c:	f7fe b9e8 	b.w	8006a00 <dwt_ioctl+0x154>
 8008630:	2500      	movs	r5, #0
 8008632:	f7fe b9e5 	b.w	8006a00 <dwt_ioctl+0x154>
 8008636:	2500      	movs	r5, #0
 8008638:	f7fe b9e2 	b.w	8006a00 <dwt_ioctl+0x154>
 800863c:	2500      	movs	r5, #0
 800863e:	f7fe b9df 	b.w	8006a00 <dwt_ioctl+0x154>
 8008642:	2500      	movs	r5, #0
 8008644:	f7fe b9dc 	b.w	8006a00 <dwt_ioctl+0x154>
 8008648:	2500      	movs	r5, #0
 800864a:	f7fe b9d9 	b.w	8006a00 <dwt_ioctl+0x154>
 800864e:	2500      	movs	r5, #0
 8008650:	f7fe b9d6 	b.w	8006a00 <dwt_ioctl+0x154>
 8008654:	2500      	movs	r5, #0
 8008656:	f7fe b9d3 	b.w	8006a00 <dwt_ioctl+0x154>
 800865a:	2500      	movs	r5, #0
 800865c:	f7fe b9d0 	b.w	8006a00 <dwt_ioctl+0x154>
 8008660:	2500      	movs	r5, #0
 8008662:	f7fe b9cd 	b.w	8006a00 <dwt_ioctl+0x154>
 8008666:	2500      	movs	r5, #0
 8008668:	f7fe b9ca 	b.w	8006a00 <dwt_ioctl+0x154>
 800866c:	2500      	movs	r5, #0
 800866e:	f7fe b9c7 	b.w	8006a00 <dwt_ioctl+0x154>
 8008672:	2500      	movs	r5, #0
 8008674:	f7fe b9c4 	b.w	8006a00 <dwt_ioctl+0x154>
 8008678:	2500      	movs	r5, #0
 800867a:	f7fe b9c1 	b.w	8006a00 <dwt_ioctl+0x154>
 800867e:	2500      	movs	r5, #0
 8008680:	f7fe b9be 	b.w	8006a00 <dwt_ioctl+0x154>
 8008684:	2500      	movs	r5, #0
 8008686:	f7fe b9bb 	b.w	8006a00 <dwt_ioctl+0x154>
 800868a:	2500      	movs	r5, #0
 800868c:	f7fe b9b8 	b.w	8006a00 <dwt_ioctl+0x154>
 8008690:	2500      	movs	r5, #0
 8008692:	f7fe b9b5 	b.w	8006a00 <dwt_ioctl+0x154>
 8008696:	2500      	movs	r5, #0
 8008698:	f7fe b9b2 	b.w	8006a00 <dwt_ioctl+0x154>
 800869c:	2500      	movs	r5, #0
 800869e:	f7fe b9af 	b.w	8006a00 <dwt_ioctl+0x154>
 80086a2:	2500      	movs	r5, #0
 80086a4:	f7fe b9ac 	b.w	8006a00 <dwt_ioctl+0x154>
 80086a8:	2500      	movs	r5, #0
 80086aa:	f7fe b9a9 	b.w	8006a00 <dwt_ioctl+0x154>
 80086ae:	2500      	movs	r5, #0
 80086b0:	f7fe b9a6 	b.w	8006a00 <dwt_ioctl+0x154>
 80086b4:	2500      	movs	r5, #0
 80086b6:	f7fe b9a3 	b.w	8006a00 <dwt_ioctl+0x154>
 80086ba:	2500      	movs	r5, #0
 80086bc:	f7fe b9a0 	b.w	8006a00 <dwt_ioctl+0x154>
 80086c0:	2500      	movs	r5, #0
 80086c2:	f7fe b99d 	b.w	8006a00 <dwt_ioctl+0x154>
 80086c6:	2500      	movs	r5, #0
 80086c8:	f7fe b99a 	b.w	8006a00 <dwt_ioctl+0x154>
 80086cc:	2500      	movs	r5, #0
 80086ce:	f7fe b997 	b.w	8006a00 <dwt_ioctl+0x154>
 80086d2:	2500      	movs	r5, #0
 80086d4:	f7fe b994 	b.w	8006a00 <dwt_ioctl+0x154>
 80086d8:	2500      	movs	r5, #0
 80086da:	f7fe b991 	b.w	8006a00 <dwt_ioctl+0x154>
 80086de:	2500      	movs	r5, #0
 80086e0:	f7fe b98e 	b.w	8006a00 <dwt_ioctl+0x154>
 80086e4:	2500      	movs	r5, #0
 80086e6:	f7fe b98b 	b.w	8006a00 <dwt_ioctl+0x154>
 80086ea:	2500      	movs	r5, #0
 80086ec:	f7fe b988 	b.w	8006a00 <dwt_ioctl+0x154>
 80086f0:	2500      	movs	r5, #0
 80086f2:	f7fe b985 	b.w	8006a00 <dwt_ioctl+0x154>
 80086f6:	2500      	movs	r5, #0
 80086f8:	f7fe b982 	b.w	8006a00 <dwt_ioctl+0x154>
 80086fc:	2500      	movs	r5, #0
 80086fe:	f7fe b97f 	b.w	8006a00 <dwt_ioctl+0x154>
 8008702:	2500      	movs	r5, #0
 8008704:	f7fe b97c 	b.w	8006a00 <dwt_ioctl+0x154>
 8008708:	2500      	movs	r5, #0
 800870a:	f7fe b979 	b.w	8006a00 <dwt_ioctl+0x154>
 800870e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008712:	1e5a      	subs	r2, r3, #1
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	2a01      	cmp	r2, #1
 8008718:	f67f a801 	bls.w	800771e <dwt_ioctl+0xe72>
 800871c:	2202      	movs	r2, #2
 800871e:	f7fe bf88 	b.w	8007632 <dwt_ioctl+0xd86>
 8008722:	2f00      	cmp	r7, #0
 8008724:	f43f ac62 	beq.w	8007fec <dwt_ioctl+0x1740>
 8008728:	f819 1000 	ldrb.w	r1, [r9, r0]
 800872c:	1a5b      	subs	r3, r3, r1
 800872e:	b29b      	uxth	r3, r3
 8008730:	e481      	b.n	8008036 <dwt_ioctl+0x178a>
 8008732:	283f      	cmp	r0, #63	; 0x3f
 8008734:	d027      	beq.n	8008786 <dwt_ioctl+0x1eda>
 8008736:	2e00      	cmp	r6, #0
 8008738:	f47f ac5e 	bne.w	8007ff8 <dwt_ioctl+0x174c>
 800873c:	3001      	adds	r0, #1
 800873e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008742:	f819 1000 	ldrb.w	r1, [r9, r0]
 8008746:	440b      	add	r3, r1
 8008748:	b29b      	uxth	r3, r3
 800874a:	459c      	cmp	ip, r3
 800874c:	f43f ac71 	beq.w	8008032 <dwt_ioctl+0x1786>
 8008750:	3d01      	subs	r5, #1
 8008752:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8008756:	f43f ac32 	beq.w	8007fbe <dwt_ioctl+0x1712>
 800875a:	459e      	cmp	lr, r3
 800875c:	f4bf ac40 	bcs.w	8007fe0 <dwt_ioctl+0x1734>
 8008760:	4598      	cmp	r8, r3
 8008762:	d9de      	bls.n	8008722 <dwt_ioctl+0x1e76>
 8008764:	ebac 0103 	sub.w	r1, ip, r3
 8008768:	b209      	sxth	r1, r1
 800876a:	2900      	cmp	r1, #0
 800876c:	bfb8      	it	lt
 800876e:	4249      	neglt	r1, r1
 8008770:	4559      	cmp	r1, fp
 8008772:	f77f ac2e 	ble.w	8007fd2 <dwt_ioctl+0x1726>
 8008776:	2f00      	cmp	r7, #0
 8008778:	f47f ac70 	bne.w	800805c <dwt_ioctl+0x17b0>
 800877c:	283f      	cmp	r0, #63	; 0x3f
 800877e:	d1da      	bne.n	8008736 <dwt_ioctl+0x1e8a>
 8008780:	2f00      	cmp	r7, #0
 8008782:	f47f ac70 	bne.w	8008066 <dwt_ioctl+0x17ba>
 8008786:	2a03      	cmp	r2, #3
 8008788:	f43f ac70 	beq.w	800806c <dwt_ioctl+0x17c0>
 800878c:	2a02      	cmp	r2, #2
 800878e:	f43f ac3f 	beq.w	8008010 <dwt_ioctl+0x1764>
 8008792:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8008796:	185e      	adds	r6, r3, r1
 8008798:	4566      	cmp	r6, ip
 800879a:	f77f ac40 	ble.w	800801e <dwt_ioctl+0x1772>
 800879e:	440b      	add	r3, r1
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3201      	adds	r2, #1
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	2700      	movs	r7, #0
 80087a8:	e426      	b.n	8007ff8 <dwt_ioctl+0x174c>
 80087aa:	bf00      	nop

080087ac <ull_initialise>:
 80087ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b0:	4605      	mov	r5, r0
 80087b2:	460e      	mov	r6, r1
 80087b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d05c      	beq.n	8008874 <ull_initialise+0xc8>
 80087ba:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80087bc:	2300      	movs	r3, #0
 80087be:	73e3      	strb	r3, [r4, #15]
 80087c0:	2202      	movs	r2, #2
 80087c2:	8262      	strh	r2, [r4, #18]
 80087c4:	75a3      	strb	r3, [r4, #22]
 80087c6:	75e3      	strb	r3, [r4, #23]
 80087c8:	7423      	strb	r3, [r4, #16]
 80087ca:	72a3      	strb	r3, [r4, #10]
 80087cc:	72e3      	strb	r3, [r4, #11]
 80087ce:	2104      	movs	r1, #4
 80087d0:	4628      	mov	r0, r5
 80087d2:	f7fc fd33 	bl	800523c <_dwt_otpread>
 80087d6:	4607      	mov	r7, r0
 80087d8:	2105      	movs	r1, #5
 80087da:	4628      	mov	r0, r5
 80087dc:	f7fc fd2e 	bl	800523c <_dwt_otpread>
 80087e0:	4680      	mov	r8, r0
 80087e2:	210a      	movs	r1, #10
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7fc fd29 	bl	800523c <_dwt_otpread>
 80087ea:	f3c0 4004 	ubfx	r0, r0, #16, #5
 80087ee:	7220      	strb	r0, [r4, #8]
 80087f0:	b127      	cbz	r7, 80087fc <ull_initialise+0x50>
 80087f2:	f1b8 0f00 	cmp.w	r8, #0
 80087f6:	d001      	beq.n	80087fc <ull_initialise+0x50>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d140      	bne.n	800887e <ull_initialise+0xd2>
 80087fc:	2120      	movs	r1, #32
 80087fe:	4628      	mov	r0, r5
 8008800:	f7fc fd1c 	bl	800523c <_dwt_otpread>
 8008804:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <ull_initialise+0x118>)
 8008806:	4298      	cmp	r0, r3
 8008808:	bf0c      	ite	eq
 800880a:	2301      	moveq	r3, #1
 800880c:	2300      	movne	r3, #0
 800880e:	7263      	strb	r3, [r4, #9]
 8008810:	f016 0f10 	tst.w	r6, #16
 8008814:	d137      	bne.n	8008886 <ull_initialise+0xda>
 8008816:	f016 0f20 	tst.w	r6, #32
 800881a:	d13a      	bne.n	8008892 <ull_initialise+0xe6>
 800881c:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008820:	d13d      	bne.n	800889e <ull_initialise+0xf2>
 8008822:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008826:	d141      	bne.n	80088ac <ull_initialise+0x100>
 8008828:	7ae3      	ldrb	r3, [r4, #11]
 800882a:	b90b      	cbnz	r3, 8008830 <ull_initialise+0x84>
 800882c:	2385      	movs	r3, #133	; 0x85
 800882e:	72e3      	strb	r3, [r4, #11]
 8008830:	7aa3      	ldrb	r3, [r4, #10]
 8008832:	b90b      	cbnz	r3, 8008838 <ull_initialise+0x8c>
 8008834:	2374      	movs	r3, #116	; 0x74
 8008836:	72a3      	strb	r3, [r4, #10]
 8008838:	211f      	movs	r1, #31
 800883a:	4628      	mov	r0, r5
 800883c:	f7fc fcfe 	bl	800523c <_dwt_otpread>
 8008840:	7360      	strb	r0, [r4, #13]
 8008842:	211e      	movs	r1, #30
 8008844:	4628      	mov	r0, r5
 8008846:	f7fc fcf9 	bl	800523c <_dwt_otpread>
 800884a:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800884e:	bf12      	itee	ne
 8008850:	73a0      	strbne	r0, [r4, #14]
 8008852:	232e      	moveq	r3, #46	; 0x2e
 8008854:	73a3      	strbeq	r3, [r4, #14]
 8008856:	7ba3      	ldrb	r3, [r4, #14]
 8008858:	2200      	movs	r2, #0
 800885a:	491b      	ldr	r1, [pc, #108]	; (80088c8 <ull_initialise+0x11c>)
 800885c:	4628      	mov	r0, r5
 800885e:	f7fc fc40 	bl	80050e2 <dwt_write8bitoffsetreg>
 8008862:	2135      	movs	r1, #53	; 0x35
 8008864:	4628      	mov	r0, r5
 8008866:	f7fc fce9 	bl	800523c <_dwt_otpread>
 800886a:	4603      	mov	r3, r0
 800886c:	bb20      	cbnz	r0, 80088b8 <ull_initialise+0x10c>
 800886e:	2000      	movs	r0, #0
 8008870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008874:	202c      	movs	r0, #44	; 0x2c
 8008876:	f009 f983 	bl	8011b80 <malloc>
 800887a:	6528      	str	r0, [r5, #80]	; 0x50
 800887c:	e79d      	b.n	80087ba <ull_initialise+0xe>
 800887e:	4628      	mov	r0, r5
 8008880:	f7fd fcca 	bl	8006218 <_dwt_prog_ldo_and_bias_tune>
 8008884:	e7ba      	b.n	80087fc <ull_initialise+0x50>
 8008886:	2106      	movs	r1, #6
 8008888:	4628      	mov	r0, r5
 800888a:	f7fc fcd7 	bl	800523c <_dwt_otpread>
 800888e:	6020      	str	r0, [r4, #0]
 8008890:	e7c1      	b.n	8008816 <ull_initialise+0x6a>
 8008892:	2107      	movs	r1, #7
 8008894:	4628      	mov	r0, r5
 8008896:	f7fc fcd1 	bl	800523c <_dwt_otpread>
 800889a:	6060      	str	r0, [r4, #4]
 800889c:	e7be      	b.n	800881c <ull_initialise+0x70>
 800889e:	2108      	movs	r1, #8
 80088a0:	4628      	mov	r0, r5
 80088a2:	f7fc fccb 	bl	800523c <_dwt_otpread>
 80088a6:	0c00      	lsrs	r0, r0, #16
 80088a8:	72a0      	strb	r0, [r4, #10]
 80088aa:	e7ba      	b.n	8008822 <ull_initialise+0x76>
 80088ac:	2109      	movs	r1, #9
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7fc fcc4 	bl	800523c <_dwt_otpread>
 80088b4:	72e0      	strb	r0, [r4, #11]
 80088b6:	e7b7      	b.n	8008828 <ull_initialise+0x7c>
 80088b8:	2200      	movs	r2, #0
 80088ba:	4904      	ldr	r1, [pc, #16]	; (80088cc <ull_initialise+0x120>)
 80088bc:	4628      	mov	r0, r5
 80088be:	f7fc fd63 	bl	8005388 <dwt_write32bitoffsetreg>
 80088c2:	e7d4      	b.n	800886e <ull_initialise+0xc2>
 80088c4:	10000240 	.word	0x10000240
 80088c8:	00090014 	.word	0x00090014
 80088cc:	00090004 	.word	0x00090004

080088d0 <_init>:
 80088d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d2:	b085      	sub	sp, #20
 80088d4:	4604      	mov	r4, r0
 80088d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80088d8:	6819      	ldr	r1, [r3, #0]
 80088da:	f7ff ff67 	bl	80087ac <ull_initialise>
 80088de:	4606      	mov	r6, r0
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	4798      	blx	r3
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	2200      	movs	r2, #0
 80088ea:	4611      	mov	r1, r2
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7fd ffdd 	bl	80068ac <dwt_ioctl>
 80088f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	6819      	ldr	r1, [r3, #0]
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7fd fdad 	bl	8006458 <ull_configure>
 80088fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	6859      	ldr	r1, [r3, #4]
 8008904:	4620      	mov	r0, r4
 8008906:	f7fd fb47 	bl	8005f98 <ull_configuretxrf>
 800890a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	89db      	ldrh	r3, [r3, #14]
 8008910:	2200      	movs	r2, #0
 8008912:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8008916:	4620      	mov	r0, r4
 8008918:	f7fc fc35 	bl	8005186 <dwt_write16bitoffsetreg>
 800891c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	899b      	ldrh	r3, [r3, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	4952      	ldr	r1, [pc, #328]	; (8008a70 <_init+0x1a0>)
 8008926:	4620      	mov	r0, r4
 8008928:	f7fc fc2d 	bl	8005186 <dwt_write16bitoffsetreg>
 800892c:	2100      	movs	r1, #0
 800892e:	4620      	mov	r0, r4
 8008930:	f7fc fec6 	bl	80056c0 <ull_setrxaftertxdelay>
 8008934:	2500      	movs	r5, #0
 8008936:	9500      	str	r5, [sp, #0]
 8008938:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800893c:	462a      	mov	r2, r5
 800893e:	2110      	movs	r1, #16
 8008940:	4620      	mov	r0, r4
 8008942:	f7fd fc4f 	bl	80061e4 <dwt_modify16bitoffsetreg>
 8008946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	895a      	ldrh	r2, [r3, #10]
 800894c:	8919      	ldrh	r1, [r3, #8]
 800894e:	4620      	mov	r0, r4
 8008950:	f7fd fbb2 	bl	80060b8 <ull_configureframefilter>
 8008954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	8a1b      	ldrh	r3, [r3, #16]
 800895a:	2202      	movs	r2, #2
 800895c:	210c      	movs	r1, #12
 800895e:	4620      	mov	r0, r4
 8008960:	f7fc fc11 	bl	8005186 <dwt_write16bitoffsetreg>
 8008964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	8a5b      	ldrh	r3, [r3, #18]
 800896a:	462a      	mov	r2, r5
 800896c:	210c      	movs	r1, #12
 800896e:	4620      	mov	r0, r4
 8008970:	f7fc fc09 	bl	8005186 <dwt_write16bitoffsetreg>
 8008974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008976:	7a19      	ldrb	r1, [r3, #8]
 8008978:	4620      	mov	r0, r4
 800897a:	f7fd fc69 	bl	8006250 <ull_setleds>
 800897e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008980:	68d9      	ldr	r1, [r3, #12]
 8008982:	4620      	mov	r0, r4
 8008984:	f7fc feb2 	bl	80056ec <ull_setlnapamode>
 8008988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898a:	7e0b      	ldrb	r3, [r1, #24]
 800898c:	694a      	ldr	r2, [r1, #20]
 800898e:	6909      	ldr	r1, [r1, #16]
 8008990:	4620      	mov	r0, r4
 8008992:	f7fd f9e9 	bl	8005d68 <ull_setinterrupt>
 8008996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008998:	7f9a      	ldrb	r2, [r3, #30]
 800899a:	8b99      	ldrh	r1, [r3, #28]
 800899c:	4620      	mov	r0, r4
 800899e:	f7fc fcb7 	bl	8005310 <ull_configuresleep>
 80089a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80089a4:	7b93      	ldrb	r3, [r2, #14]
 80089a6:	2b2e      	cmp	r3, #46	; 0x2e
 80089a8:	d005      	beq.n	80089b6 <_init+0xe6>
 80089aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089b0:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 80089b4:	d00a      	beq.n	80089cc <_init+0xfc>
 80089b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089c0:	7393      	strb	r3, [r2, #14]
 80089c2:	2200      	movs	r2, #0
 80089c4:	492b      	ldr	r1, [pc, #172]	; (8008a74 <_init+0x1a4>)
 80089c6:	4620      	mov	r0, r4
 80089c8:	f7fc fb8b 	bl	80050e2 <dwt_write8bitoffsetreg>
 80089cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ce:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7fd fa68 	bl	8005ea8 <ull_configciadiag>
 80089d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089da:	6a19      	ldr	r1, [r3, #32]
 80089dc:	4620      	mov	r0, r4
 80089de:	f7fc fea7 	bl	8005730 <ull_configurestskey>
 80089e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7fc fec6 	bl	8005778 <ull_configurestsiv>
 80089ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80089f2:	bba3      	cbnz	r3, 8008a5e <_init+0x18e>
 80089f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089f6:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80089fa:	4620      	mov	r0, r4
 80089fc:	f7fc fbb0 	bl	8005160 <ull_configeventcounters>
 8008a00:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	db27      	blt.n	8008a58 <_init+0x188>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	fa03 f505 	lsl.w	r5, r3, r5
 8008a0e:	b2af      	uxth	r7, r5
 8008a10:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8008a14:	4639      	mov	r1, r7
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7fd f988 	bl	8005d2c <ull_setgpiomode>
 8008a1c:	f10d 030a 	add.w	r3, sp, #10
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	2302      	movs	r3, #2
 8008a24:	2200      	movs	r2, #0
 8008a26:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7fb ff60 	bl	80048f0 <dwt_readfromdevice>
 8008a30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008a34:	ea23 0305 	bic.w	r3, r3, r5
 8008a38:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	490e      	ldr	r1, [pc, #56]	; (8008a78 <_init+0x1a8>)
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7fc fba0 	bl	8005186 <dwt_write16bitoffsetreg>
 8008a46:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8008a4a:	fab2 f282 	clz	r2, r2
 8008a4e:	0952      	lsrs	r2, r2, #5
 8008a50:	4639      	mov	r1, r7
 8008a52:	4620      	mov	r0, r4
 8008a54:	f7fd fc7a 	bl	800634c <ull_setgpiovalue>
 8008a58:	4630      	mov	r0, r6
 8008a5a:	b005      	add	sp, #20
 8008a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a5e:	2301      	movs	r3, #1
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	23ff      	movs	r3, #255	; 0xff
 8008a64:	2200      	movs	r2, #0
 8008a66:	4905      	ldr	r1, [pc, #20]	; (8008a7c <_init+0x1ac>)
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f7fd fa09 	bl	8005e80 <dwt_modify8bitoffsetreg>
 8008a6e:	e7c1      	b.n	80089f4 <_init+0x124>
 8008a70:	00010004 	.word	0x00010004
 8008a74:	00090014 	.word	0x00090014
 8008a78:	00050008 	.word	0x00050008
 8008a7c:	00020004 	.word	0x00020004

08008a80 <dwt_dbg_fn>:
 8008a80:	2998      	cmp	r1, #152	; 0x98
 8008a82:	4802      	ldr	r0, [pc, #8]	; (8008a8c <dwt_dbg_fn+0xc>)
 8008a84:	bf18      	it	ne
 8008a86:	2000      	movne	r0, #0
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	08012120 	.word	0x08012120

08008a90 <_deinit>:
 8008a90:	4770      	bx	lr

08008a92 <dwt_xfer3xxx>:
 8008a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	4605      	mov	r5, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	461e      	mov	r6, r3
 8008a9e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8008aa2:	1e59      	subs	r1, r3, #1
 8008aa4:	b289      	uxth	r1, r1
 8008aa6:	2901      	cmp	r1, #1
 8008aa8:	d91c      	bls.n	8008ae4 <dwt_xfer3xxx+0x52>
 8008aaa:	19d0      	adds	r0, r2, r7
 8008aac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008ab0:	443a      	add	r2, r7
 8008ab2:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8008ab6:	0082      	lsls	r2, r0, #2
 8008ab8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8008abc:	ea43 0102 	orr.w	r1, r3, r2
 8008ac0:	0a09      	lsrs	r1, r1, #8
 8008ac2:	f88d 100c 	strb.w	r1, [sp, #12]
 8008ac6:	b920      	cbnz	r0, 8008ad2 <dwt_xfer3xxx+0x40>
 8008ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008acc:	d018      	beq.n	8008b00 <dwt_xfer3xxx+0x6e>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d037      	beq.n	8008b42 <dwt_xfer3xxx+0xb0>
 8008ad2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008ad6:	f88d 100c 	strb.w	r1, [sp, #12]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	f88d 200d 	strb.w	r2, [sp, #13]
 8008ae0:	2402      	movs	r4, #2
 8008ae2:	e005      	b.n	8008af0 <dwt_xfer3xxx+0x5e>
 8008ae4:	007a      	lsls	r2, r7, #1
 8008ae6:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8008aea:	f88d 200c 	strb.w	r2, [sp, #12]
 8008aee:	2401      	movs	r4, #1
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d006      	beq.n	8008b02 <dwt_xfer3xxx+0x70>
 8008af4:	d326      	bcc.n	8008b44 <dwt_xfer3xxx+0xb2>
 8008af6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d901      	bls.n	8008b02 <dwt_xfer3xxx+0x70>
 8008afe:	e7fe      	b.n	8008afe <dwt_xfer3xxx+0x6c>
 8008b00:	2401      	movs	r4, #1
 8008b02:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008b04:	7d1b      	ldrb	r3, [r3, #20]
 8008b06:	b94b      	cbnz	r3, 8008b1c <dwt_xfer3xxx+0x8a>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	685d      	ldr	r5, [r3, #4]
 8008b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0e:	4632      	mov	r2, r6
 8008b10:	a903      	add	r1, sp, #12
 8008b12:	4620      	mov	r0, r4
 8008b14:	47a8      	blx	r5
 8008b16:	b004      	add	sp, #16
 8008b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4621      	mov	r1, r4
 8008b20:	a803      	add	r0, sp, #12
 8008b22:	f7fb fddb 	bl	80046dc <dwt_generatecrc8>
 8008b26:	4602      	mov	r2, r0
 8008b28:	4631      	mov	r1, r6
 8008b2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b2c:	f7fb fdd6 	bl	80046dc <dwt_generatecrc8>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	9000      	str	r0, [sp, #0]
 8008b34:	689d      	ldr	r5, [r3, #8]
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	4632      	mov	r2, r6
 8008b3a:	a903      	add	r1, sp, #12
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	47a8      	blx	r5
 8008b40:	e7e9      	b.n	8008b16 <dwt_xfer3xxx+0x84>
 8008b42:	2401      	movs	r4, #1
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	f8d3 8000 	ldr.w	r8, [r3]
 8008b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	a903      	add	r1, sp, #12
 8008b50:	4620      	mov	r0, r4
 8008b52:	47c0      	blx	r8
 8008b54:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008b56:	7d1b      	ldrb	r3, [r3, #20]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d1dc      	bne.n	8008b16 <dwt_xfer3xxx+0x84>
 8008b5c:	2f18      	cmp	r7, #24
 8008b5e:	d0da      	beq.n	8008b16 <dwt_xfer3xxx+0x84>
 8008b60:	2200      	movs	r2, #0
 8008b62:	4621      	mov	r1, r4
 8008b64:	a803      	add	r0, sp, #12
 8008b66:	f7fb fdb9 	bl	80046dc <dwt_generatecrc8>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b70:	f7fb fdb4 	bl	80046dc <dwt_generatecrc8>
 8008b74:	4604      	mov	r4, r0
 8008b76:	2200      	movs	r2, #0
 8008b78:	2118      	movs	r1, #24
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f839 	bl	8008bf2 <dwt_read8bitoffsetreg>
 8008b80:	4284      	cmp	r4, r0
 8008b82:	d0c8      	beq.n	8008b16 <dwt_xfer3xxx+0x84>
 8008b84:	68eb      	ldr	r3, [r5, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0c5      	beq.n	8008b16 <dwt_xfer3xxx+0x84>
 8008b8a:	4798      	blx	r3
 8008b8c:	e7c3      	b.n	8008b16 <dwt_xfer3xxx+0x84>

08008b8e <dwt_readfromdevice>:
 8008b8e:	b510      	push	{r4, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	2400      	movs	r4, #0
 8008b94:	9401      	str	r4, [sp, #4]
 8008b96:	9c04      	ldr	r4, [sp, #16]
 8008b98:	9400      	str	r4, [sp, #0]
 8008b9a:	f7ff ff7a 	bl	8008a92 <dwt_xfer3xxx>
 8008b9e:	b002      	add	sp, #8
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <dwt_read32bitoffsetreg>:
 8008ba2:	b500      	push	{lr}
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	ab03      	add	r3, sp, #12
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	2304      	movs	r3, #4
 8008bac:	b292      	uxth	r2, r2
 8008bae:	f7ff ffee 	bl	8008b8e <dwt_readfromdevice>
 8008bb2:	f10d 030f 	add.w	r3, sp, #15
 8008bb6:	f10d 010b 	add.w	r1, sp, #11
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f813 2901 	ldrb.w	r2, [r3], #-1
 8008bc0:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	d1f9      	bne.n	8008bbc <dwt_read32bitoffsetreg+0x1a>
 8008bc8:	b005      	add	sp, #20
 8008bca:	f85d fb04 	ldr.w	pc, [sp], #4

08008bce <dwt_read16bitoffsetreg>:
 8008bce:	b500      	push	{lr}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	ab03      	add	r3, sp, #12
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	b292      	uxth	r2, r2
 8008bda:	f7ff ffd8 	bl	8008b8e <dwt_readfromdevice>
 8008bde:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008be2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8008be6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8008bea:	b280      	uxth	r0, r0
 8008bec:	b005      	add	sp, #20
 8008bee:	f85d fb04 	ldr.w	pc, [sp], #4

08008bf2 <dwt_read8bitoffsetreg>:
 8008bf2:	b500      	push	{lr}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	f10d 030f 	add.w	r3, sp, #15
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	b292      	uxth	r2, r2
 8008c00:	f7ff ffc5 	bl	8008b8e <dwt_readfromdevice>
 8008c04:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8008c08:	b005      	add	sp, #20
 8008c0a:	f85d fb04 	ldr.w	pc, [sp], #4

08008c0e <ull_readdiagnostics>:
 8008c0e:	b530      	push	{r4, r5, lr}
 8008c10:	b0bd      	sub	sp, #244	; 0xf4
 8008c12:	4605      	mov	r5, r0
 8008c14:	460c      	mov	r4, r1
 8008c16:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008c18:	7b9a      	ldrb	r2, [r3, #14]
 8008c1a:	2a01      	cmp	r2, #1
 8008c1c:	d01c      	beq.n	8008c58 <ull_readdiagnostics+0x4a>
 8008c1e:	2a03      	cmp	r2, #3
 8008c20:	f040 81e8 	bne.w	8008ff4 <ull_readdiagnostics+0x3e6>
 8008c24:	7d9b      	ldrb	r3, [r3, #22]
 8008c26:	f013 0f08 	tst.w	r3, #8
 8008c2a:	d10c      	bne.n	8008c46 <ull_readdiagnostics+0x38>
 8008c2c:	f013 0f04 	tst.w	r3, #4
 8008c30:	ab02      	add	r3, sp, #8
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	bf14      	ite	ne
 8008c36:	2338      	movne	r3, #56	; 0x38
 8008c38:	2320      	moveq	r3, #32
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008c40:	f7ff ffa5 	bl	8008b8e <dwt_readfromdevice>
 8008c44:	e019      	b.n	8008c7a <ull_readdiagnostics+0x6c>
 8008c46:	ab02      	add	r3, sp, #8
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	23e8      	movs	r3, #232	; 0xe8
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008c52:	f7ff ff9c 	bl	8008b8e <dwt_readfromdevice>
 8008c56:	e010      	b.n	8008c7a <ull_readdiagnostics+0x6c>
 8008c58:	7d9b      	ldrb	r3, [r3, #22]
 8008c5a:	f013 0f08 	tst.w	r3, #8
 8008c5e:	f040 81c0 	bne.w	8008fe2 <ull_readdiagnostics+0x3d4>
 8008c62:	f013 0f04 	tst.w	r3, #4
 8008c66:	ab02      	add	r3, sp, #8
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	bf14      	ite	ne
 8008c6c:	2338      	movne	r3, #56	; 0x38
 8008c6e:	2320      	moveq	r3, #32
 8008c70:	2200      	movs	r2, #0
 8008c72:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8008c76:	f7ff ff8a 	bl	8008b8e <dwt_readfromdevice>
 8008c7a:	f10d 0217 	add.w	r2, sp, #23
 8008c7e:	f104 031a 	add.w	r3, r4, #26
 8008c82:	f104 0020 	add.w	r0, r4, #32
 8008c86:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c8e:	4283      	cmp	r3, r0
 8008c90:	d1f9      	bne.n	8008c86 <ull_readdiagnostics+0x78>
 8008c92:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8008c96:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008c9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ca2:	8463      	strh	r3, [r4, #34]	; 0x22
 8008ca4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008ca8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8008cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008cb4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008cb8:	bf1c      	itt	ne
 8008cba:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8008cbe:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8008cc2:	8423      	strh	r3, [r4, #32]
 8008cc4:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8008cc8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008ccc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008cd6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008cd8:	7d9b      	ldrb	r3, [r3, #22]
 8008cda:	f013 0f02 	tst.w	r3, #2
 8008cde:	f040 817e 	bne.w	8008fde <ull_readdiagnostics+0x3d0>
 8008ce2:	aa0a      	add	r2, sp, #40	; 0x28
 8008ce4:	1e63      	subs	r3, r4, #1
 8008ce6:	1d20      	adds	r0, r4, #4
 8008ce8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008cec:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008cf0:	79d1      	ldrb	r1, [r2, #7]
 8008cf2:	7219      	strb	r1, [r3, #8]
 8008cf4:	7bd1      	ldrb	r1, [r2, #15]
 8008cf6:	7459      	strb	r1, [r3, #17]
 8008cf8:	4283      	cmp	r3, r0
 8008cfa:	d1f5      	bne.n	8008ce8 <ull_readdiagnostics+0xda>
 8008cfc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008d00:	7163      	strb	r3, [r4, #5]
 8008d02:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8008d06:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8008d0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d0e:	80e3      	strh	r3, [r4, #6]
 8008d10:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8008d14:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8008d18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008d1c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008d20:	f8a4 300d 	strh.w	r3, [r4, #13]
 8008d24:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8008d28:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8008d2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d30:	f8a4 300f 	strh.w	r3, [r4, #15]
 8008d34:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8008d38:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8008d3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008d40:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008d44:	82e3      	strh	r3, [r4, #22]
 8008d46:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8008d4a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8008d4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d52:	8323      	strh	r3, [r4, #24]
 8008d54:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008d56:	7d9b      	ldrb	r3, [r3, #22]
 8008d58:	f013 0f04 	tst.w	r3, #4
 8008d5c:	f040 813f 	bne.w	8008fde <ull_readdiagnostics+0x3d0>
 8008d60:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8008d64:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8008d68:	041b      	lsls	r3, r3, #16
 8008d6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d6e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8008d78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d7c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008d80:	6263      	str	r3, [r4, #36]	; 0x24
 8008d82:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8008d86:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8008d8a:	041b      	lsls	r3, r3, #16
 8008d8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d90:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008d94:	4313      	orrs	r3, r2
 8008d96:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8008d9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008da2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008da4:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8008da8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8008dac:	041b      	lsls	r3, r3, #16
 8008dae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008db2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8008dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dc6:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8008dca:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8008dce:	041b      	lsls	r3, r3, #16
 8008dd0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008dd4:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8008dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008de2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008de6:	6323      	str	r3, [r4, #48]	; 0x30
 8008de8:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8008dec:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8008df0:	041b      	lsls	r3, r3, #16
 8008df2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008df6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8008e00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e08:	6363      	str	r3, [r4, #52]	; 0x34
 8008e0a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8008e0e:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e18:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8008e22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e26:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e2c:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8008e30:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e38:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8008e3a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8008e3e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e48:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8008e52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e5a:	6423      	str	r3, [r4, #64]	; 0x40
 8008e5c:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8008e60:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e6a:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8008e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e7c:	6463      	str	r3, [r4, #68]	; 0x44
 8008e7e:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8008e82:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e8c:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8008e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e9a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e9e:	64a3      	str	r3, [r4, #72]	; 0x48
 8008ea0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8008ea4:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8008ea8:	041b      	lsls	r3, r3, #16
 8008eaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008eae:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8008eb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ebc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ec0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008ec2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8008ec6:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ed0:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8008eda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ede:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ee2:	6523      	str	r3, [r4, #80]	; 0x50
 8008ee4:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8008ee8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8008eec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ef0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ef4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8008ef8:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8008efc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8008f00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f08:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8008f0c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8008f10:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f1a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8008f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f28:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008f2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f2e:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8008f32:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8008f36:	041b      	lsls	r3, r3, #16
 8008f38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f3c:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8008f40:	4313      	orrs	r3, r2
 8008f42:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8008f46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f4e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008f50:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8008f54:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8008f58:	041b      	lsls	r3, r3, #16
 8008f5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f5e:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8008f68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f70:	6623      	str	r3, [r4, #96]	; 0x60
 8008f72:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8008f76:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8008f7a:	041b      	lsls	r3, r3, #16
 8008f7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f80:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8008f8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f8e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f92:	6663      	str	r3, [r4, #100]	; 0x64
 8008f94:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8008f98:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8008f9c:	041b      	lsls	r3, r3, #16
 8008f9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008fa2:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8008fac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008fb4:	66a3      	str	r3, [r4, #104]	; 0x68
 8008fb6:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8008fba:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8008fbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fc2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008fc6:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8008fca:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8008fce:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8008fd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fda:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8008fde:	b03d      	add	sp, #244	; 0xf4
 8008fe0:	bd30      	pop	{r4, r5, pc}
 8008fe2:	ab02      	add	r3, sp, #8
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	23e8      	movs	r3, #232	; 0xe8
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8008fee:	f7ff fdce 	bl	8008b8e <dwt_readfromdevice>
 8008ff2:	e642      	b.n	8008c7a <ull_readdiagnostics+0x6c>
 8008ff4:	7d9b      	ldrb	r3, [r3, #22]
 8008ff6:	f013 0f01 	tst.w	r3, #1
 8008ffa:	f000 81b3 	beq.w	8009364 <ull_readdiagnostics+0x756>
 8008ffe:	ab02      	add	r3, sp, #8
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	236c      	movs	r3, #108	; 0x6c
 8009004:	2200      	movs	r2, #0
 8009006:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800900a:	f7ff fdc0 	bl	8008b8e <dwt_readfromdevice>
 800900e:	ab1d      	add	r3, sp, #116	; 0x74
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	236c      	movs	r3, #108	; 0x6c
 8009014:	2200      	movs	r2, #0
 8009016:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800901a:	4628      	mov	r0, r5
 800901c:	f7ff fdb7 	bl	8008b8e <dwt_readfromdevice>
 8009020:	aa02      	add	r2, sp, #8
 8009022:	1e63      	subs	r3, r4, #1
 8009024:	1d20      	adds	r0, r4, #4
 8009026:	f812 1b01 	ldrb.w	r1, [r2], #1
 800902a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800902e:	79d1      	ldrb	r1, [r2, #7]
 8009030:	7219      	strb	r1, [r3, #8]
 8009032:	7bd1      	ldrb	r1, [r2, #15]
 8009034:	7459      	strb	r1, [r3, #17]
 8009036:	7dd1      	ldrb	r1, [r2, #23]
 8009038:	7699      	strb	r1, [r3, #26]
 800903a:	4283      	cmp	r3, r0
 800903c:	d1f3      	bne.n	8009026 <ull_readdiagnostics+0x418>
 800903e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009042:	77e3      	strb	r3, [r4, #31]
 8009044:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009048:	7163      	strb	r3, [r4, #5]
 800904a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800904e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009056:	80e3      	strh	r3, [r4, #6]
 8009058:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800905c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8009060:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8009064:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8009068:	f8a4 200d 	strh.w	r2, [r4, #13]
 800906c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009070:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009074:	f8a4 200f 	strh.w	r2, [r4, #15]
 8009078:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800907c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009080:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009084:	82e3      	strh	r3, [r4, #22]
 8009086:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800908a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800908e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009092:	8323      	strh	r3, [r4, #24]
 8009094:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8009098:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800909c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80090a4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80090a8:	bf1c      	itt	ne
 80090aa:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80090ae:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80090b2:	8423      	strh	r3, [r4, #32]
 80090b4:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80090b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80090bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090c4:	8463      	strh	r3, [r4, #34]	; 0x22
 80090c6:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80090ca:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80090ce:	041b      	lsls	r3, r3, #16
 80090d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090d4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80090d8:	4313      	orrs	r3, r2
 80090da:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80090de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090e2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80090e6:	6263      	str	r3, [r4, #36]	; 0x24
 80090e8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80090ea:	7d9b      	ldrb	r3, [r3, #22]
 80090ec:	f013 0f01 	tst.w	r3, #1
 80090f0:	f43f af75 	beq.w	8008fde <ull_readdiagnostics+0x3d0>
 80090f4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80090f8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80090fc:	041b      	lsls	r3, r3, #16
 80090fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009102:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8009106:	4313      	orrs	r3, r2
 8009108:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800910c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009114:	62a3      	str	r3, [r4, #40]	; 0x28
 8009116:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800911a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800911e:	041b      	lsls	r3, r3, #16
 8009120:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009124:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8009128:	4313      	orrs	r3, r2
 800912a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800912e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009136:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009138:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800913c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8009140:	041b      	lsls	r3, r3, #16
 8009142:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009146:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800914a:	4313      	orrs	r3, r2
 800914c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8009150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009154:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009158:	6323      	str	r3, [r4, #48]	; 0x30
 800915a:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800915e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009168:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800916c:	4313      	orrs	r3, r2
 800916e:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8009172:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009176:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800917a:	6363      	str	r3, [r4, #52]	; 0x34
 800917c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8009180:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009184:	041b      	lsls	r3, r3, #16
 8009186:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800918a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800918e:	4313      	orrs	r3, r2
 8009190:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8009194:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009198:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800919c:	63a3      	str	r3, [r4, #56]	; 0x38
 800919e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80091a2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80091a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091aa:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80091ac:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80091b0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80091b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80091be:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80091c2:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091cc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80091d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091de:	6423      	str	r3, [r4, #64]	; 0x40
 80091e0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80091e4:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091ee:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 80091f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009200:	6463      	str	r3, [r4, #68]	; 0x44
 8009202:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8009206:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009210:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8009214:	4313      	orrs	r3, r2
 8009216:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800921a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800921e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009222:	64a3      	str	r3, [r4, #72]	; 0x48
 8009224:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8009228:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800922c:	041b      	lsls	r3, r3, #16
 800922e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009232:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8009236:	4313      	orrs	r3, r2
 8009238:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800923c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009240:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009244:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009246:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800924a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800924e:	041b      	lsls	r3, r3, #16
 8009250:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009254:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8009258:	4313      	orrs	r3, r2
 800925a:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800925e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009262:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009266:	6523      	str	r3, [r4, #80]	; 0x50
 8009268:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800926c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8009270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009274:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009278:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800927c:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8009280:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8009284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8009290:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8009294:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8009298:	041b      	lsls	r3, r3, #16
 800929a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800929e:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 80092a2:	4313      	orrs	r3, r2
 80092a4:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 80092a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80092b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80092b2:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 80092b6:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80092c0:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80092c4:	4313      	orrs	r3, r2
 80092c6:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80092ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80092d4:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80092d8:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80092dc:	041b      	lsls	r3, r3, #16
 80092de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80092e2:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80092ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80092f4:	6623      	str	r3, [r4, #96]	; 0x60
 80092f6:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 80092fa:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 80092fe:	041b      	lsls	r3, r3, #16
 8009300:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009304:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8009308:	4313      	orrs	r3, r2
 800930a:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800930e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009312:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009316:	6663      	str	r3, [r4, #100]	; 0x64
 8009318:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800931c:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8009320:	041b      	lsls	r3, r3, #16
 8009322:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009326:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800932a:	4313      	orrs	r3, r2
 800932c:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8009330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009334:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009338:	66a3      	str	r3, [r4, #104]	; 0x68
 800933a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800933e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8009342:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009346:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800934a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800934e:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8009352:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8009356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800935a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800935e:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8009362:	e63c      	b.n	8008fde <ull_readdiagnostics+0x3d0>
 8009364:	ab02      	add	r3, sp, #8
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	2328      	movs	r3, #40	; 0x28
 800936a:	2200      	movs	r2, #0
 800936c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8009370:	f7ff fc0d 	bl	8008b8e <dwt_readfromdevice>
 8009374:	e654      	b.n	8009020 <ull_readdiagnostics+0x412>
	...

08009378 <ull_readrxtimestamp>:
 8009378:	b500      	push	{lr}
 800937a:	b083      	sub	sp, #12
 800937c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800937e:	7b9b      	ldrb	r3, [r3, #14]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d00b      	beq.n	800939c <ull_readrxtimestamp+0x24>
 8009384:	2b03      	cmp	r3, #3
 8009386:	d110      	bne.n	80093aa <ull_readrxtimestamp+0x32>
 8009388:	9100      	str	r1, [sp, #0]
 800938a:	2305      	movs	r3, #5
 800938c:	2204      	movs	r2, #4
 800938e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009392:	f7ff fbfc 	bl	8008b8e <dwt_readfromdevice>
 8009396:	b003      	add	sp, #12
 8009398:	f85d fb04 	ldr.w	pc, [sp], #4
 800939c:	9100      	str	r1, [sp, #0]
 800939e:	2305      	movs	r3, #5
 80093a0:	2200      	movs	r2, #0
 80093a2:	4905      	ldr	r1, [pc, #20]	; (80093b8 <ull_readrxtimestamp+0x40>)
 80093a4:	f7ff fbf3 	bl	8008b8e <dwt_readfromdevice>
 80093a8:	e7f5      	b.n	8009396 <ull_readrxtimestamp+0x1e>
 80093aa:	9100      	str	r1, [sp, #0]
 80093ac:	2305      	movs	r3, #5
 80093ae:	2200      	movs	r2, #0
 80093b0:	2160      	movs	r1, #96	; 0x60
 80093b2:	f7ff fbec 	bl	8008b8e <dwt_readfromdevice>
 80093b6:	e7ee      	b.n	8009396 <ull_readrxtimestamp+0x1e>
 80093b8:	00180004 	.word	0x00180004

080093bc <dwt_writetodevice>:
 80093bc:	b510      	push	{r4, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80093c4:	9401      	str	r4, [sp, #4]
 80093c6:	9c04      	ldr	r4, [sp, #16]
 80093c8:	9400      	str	r4, [sp, #0]
 80093ca:	f7ff fb62 	bl	8008a92 <dwt_xfer3xxx>
 80093ce:	b002      	add	sp, #8
 80093d0:	bd10      	pop	{r4, pc}

080093d2 <dwt_write16bitoffsetreg>:
 80093d2:	b500      	push	{lr}
 80093d4:	b085      	sub	sp, #20
 80093d6:	f88d 300c 	strb.w	r3, [sp, #12]
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	f88d 300d 	strb.w	r3, [sp, #13]
 80093e0:	ab03      	add	r3, sp, #12
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	2302      	movs	r3, #2
 80093e6:	b292      	uxth	r2, r2
 80093e8:	f7ff ffe8 	bl	80093bc <dwt_writetodevice>
 80093ec:	b005      	add	sp, #20
 80093ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080093f4 <ull_force_clocks>:
 80093f4:	b508      	push	{r3, lr}
 80093f6:	2901      	cmp	r1, #1
 80093f8:	d002      	beq.n	8009400 <ull_force_clocks+0xc>
 80093fa:	2905      	cmp	r1, #5
 80093fc:	d007      	beq.n	800940e <ull_force_clocks+0x1a>
 80093fe:	bd08      	pop	{r3, pc}
 8009400:	f641 0322 	movw	r3, #6178	; 0x1822
 8009404:	2200      	movs	r2, #0
 8009406:	4905      	ldr	r1, [pc, #20]	; (800941c <ull_force_clocks+0x28>)
 8009408:	f7ff ffe3 	bl	80093d2 <dwt_write16bitoffsetreg>
 800940c:	e7f7      	b.n	80093fe <ull_force_clocks+0xa>
 800940e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009412:	2200      	movs	r2, #0
 8009414:	4901      	ldr	r1, [pc, #4]	; (800941c <ull_force_clocks+0x28>)
 8009416:	f7ff ffdc 	bl	80093d2 <dwt_write16bitoffsetreg>
 800941a:	e7f0      	b.n	80093fe <ull_force_clocks+0xa>
 800941c:	00110004 	.word	0x00110004

08009420 <__dwt_otp_write_wdata_id_reg>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4605      	mov	r5, r0
 8009424:	460c      	mov	r4, r1
 8009426:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800942a:	b29b      	uxth	r3, r3
 800942c:	2200      	movs	r2, #0
 800942e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009432:	f7ff ffce 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009436:	b2a3      	uxth	r3, r4
 8009438:	2200      	movs	r2, #0
 800943a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800943e:	4628      	mov	r0, r5
 8009440:	f7ff ffc7 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009444:	bd38      	pop	{r3, r4, r5, pc}
	...

08009448 <_dwt_otpread>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	460e      	mov	r6, r1
 800944e:	4d0c      	ldr	r5, [pc, #48]	; (8009480 <_dwt_otpread+0x38>)
 8009450:	2301      	movs	r3, #1
 8009452:	2200      	movs	r2, #0
 8009454:	4629      	mov	r1, r5
 8009456:	f7ff ffbc 	bl	80093d2 <dwt_write16bitoffsetreg>
 800945a:	4633      	mov	r3, r6
 800945c:	2200      	movs	r2, #0
 800945e:	4909      	ldr	r1, [pc, #36]	; (8009484 <_dwt_otpread+0x3c>)
 8009460:	4620      	mov	r0, r4
 8009462:	f7ff ffb6 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009466:	2302      	movs	r3, #2
 8009468:	2200      	movs	r2, #0
 800946a:	4629      	mov	r1, r5
 800946c:	4620      	mov	r0, r4
 800946e:	f7ff ffb0 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009472:	2200      	movs	r2, #0
 8009474:	4904      	ldr	r1, [pc, #16]	; (8009488 <_dwt_otpread+0x40>)
 8009476:	4620      	mov	r0, r4
 8009478:	f7ff fb93 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	bf00      	nop
 8009480:	000b0008 	.word	0x000b0008
 8009484:	000b0004 	.word	0x000b0004
 8009488:	000b0010 	.word	0x000b0010

0800948c <dwt_write32bitoffsetreg>:
 800948c:	b510      	push	{r4, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	f88d 300c 	strb.w	r3, [sp, #12]
 8009494:	0a1c      	lsrs	r4, r3, #8
 8009496:	f88d 400d 	strb.w	r4, [sp, #13]
 800949a:	0c1c      	lsrs	r4, r3, #16
 800949c:	f88d 400e 	strb.w	r4, [sp, #14]
 80094a0:	0e1b      	lsrs	r3, r3, #24
 80094a2:	f88d 300f 	strb.w	r3, [sp, #15]
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	2304      	movs	r3, #4
 80094ac:	b292      	uxth	r2, r2
 80094ae:	f7ff ff85 	bl	80093bc <dwt_writetodevice>
 80094b2:	b004      	add	sp, #16
 80094b4:	bd10      	pop	{r4, pc}

080094b6 <_dwt_adjust_delaytime>:
 80094b6:	b538      	push	{r3, r4, r5, lr}
 80094b8:	4604      	mov	r4, r0
 80094ba:	b989      	cbnz	r1, 80094e0 <_dwt_adjust_delaytime+0x2a>
 80094bc:	2200      	movs	r2, #0
 80094be:	2128      	movs	r1, #40	; 0x28
 80094c0:	f7ff fb6f 	bl	8008ba2 <dwt_read32bitoffsetreg>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2201      	movs	r2, #1
 80094c8:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80094cc:	4620      	mov	r0, r4
 80094ce:	f7ff fb90 	bl	8008bf2 <dwt_read8bitoffsetreg>
 80094d2:	1a2b      	subs	r3, r5, r0
 80094d4:	2200      	movs	r2, #0
 80094d6:	2128      	movs	r1, #40	; 0x28
 80094d8:	4620      	mov	r0, r4
 80094da:	f7ff ffd7 	bl	800948c <dwt_write32bitoffsetreg>
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	2200      	movs	r2, #0
 80094e2:	2128      	movs	r1, #40	; 0x28
 80094e4:	f7ff fb5d 	bl	8008ba2 <dwt_read32bitoffsetreg>
 80094e8:	4605      	mov	r5, r0
 80094ea:	2201      	movs	r2, #1
 80094ec:	217c      	movs	r1, #124	; 0x7c
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff fb7f 	bl	8008bf2 <dwt_read8bitoffsetreg>
 80094f4:	1a2b      	subs	r3, r5, r0
 80094f6:	2200      	movs	r2, #0
 80094f8:	2128      	movs	r1, #40	; 0x28
 80094fa:	4620      	mov	r0, r4
 80094fc:	f7ff ffc6 	bl	800948c <dwt_write32bitoffsetreg>
 8009500:	e7ed      	b.n	80094de <_dwt_adjust_delaytime+0x28>

08009502 <ull_setrxaftertxdelay>:
 8009502:	b538      	push	{r3, r4, r5, lr}
 8009504:	4605      	mov	r5, r0
 8009506:	460c      	mov	r4, r1
 8009508:	2200      	movs	r2, #0
 800950a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800950e:	f7ff fb48 	bl	8008ba2 <dwt_read32bitoffsetreg>
 8009512:	0d00      	lsrs	r0, r0, #20
 8009514:	0500      	lsls	r0, r0, #20
 8009516:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800951a:	4303      	orrs	r3, r0
 800951c:	2200      	movs	r2, #0
 800951e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009522:	4628      	mov	r0, r5
 8009524:	f7ff ffb2 	bl	800948c <dwt_write32bitoffsetreg>
 8009528:	bd38      	pop	{r3, r4, r5, pc}

0800952a <ull_setlnapamode>:
 800952a:	b538      	push	{r3, r4, r5, lr}
 800952c:	4605      	mov	r5, r0
 800952e:	460c      	mov	r4, r1
 8009530:	2200      	movs	r2, #0
 8009532:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009536:	f7ff fb34 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800953a:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800953e:	f014 0f01 	tst.w	r4, #1
 8009542:	bf18      	it	ne
 8009544:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8009548:	f014 0f02 	tst.w	r4, #2
 800954c:	bf18      	it	ne
 800954e:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 8009552:	f014 0f04 	tst.w	r4, #4
 8009556:	bf18      	it	ne
 8009558:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800955c:	2200      	movs	r2, #0
 800955e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009562:	4628      	mov	r0, r5
 8009564:	f7ff ff92 	bl	800948c <dwt_write32bitoffsetreg>
 8009568:	bd38      	pop	{r3, r4, r5, pc}
	...

0800956c <ull_configurestskey>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4605      	mov	r5, r0
 8009570:	460c      	mov	r4, r1
 8009572:	680b      	ldr	r3, [r1, #0]
 8009574:	2200      	movs	r2, #0
 8009576:	490b      	ldr	r1, [pc, #44]	; (80095a4 <ull_configurestskey+0x38>)
 8009578:	f7ff ff88 	bl	800948c <dwt_write32bitoffsetreg>
 800957c:	6863      	ldr	r3, [r4, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	4909      	ldr	r1, [pc, #36]	; (80095a8 <ull_configurestskey+0x3c>)
 8009582:	4628      	mov	r0, r5
 8009584:	f7ff ff82 	bl	800948c <dwt_write32bitoffsetreg>
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	2200      	movs	r2, #0
 800958c:	4907      	ldr	r1, [pc, #28]	; (80095ac <ull_configurestskey+0x40>)
 800958e:	4628      	mov	r0, r5
 8009590:	f7ff ff7c 	bl	800948c <dwt_write32bitoffsetreg>
 8009594:	68e3      	ldr	r3, [r4, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	4905      	ldr	r1, [pc, #20]	; (80095b0 <ull_configurestskey+0x44>)
 800959a:	4628      	mov	r0, r5
 800959c:	f7ff ff76 	bl	800948c <dwt_write32bitoffsetreg>
 80095a0:	bd38      	pop	{r3, r4, r5, pc}
 80095a2:	bf00      	nop
 80095a4:	0002000c 	.word	0x0002000c
 80095a8:	00020010 	.word	0x00020010
 80095ac:	00020014 	.word	0x00020014
 80095b0:	00020018 	.word	0x00020018

080095b4 <ull_configurestsiv>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4605      	mov	r5, r0
 80095b8:	460c      	mov	r4, r1
 80095ba:	680b      	ldr	r3, [r1, #0]
 80095bc:	2200      	movs	r2, #0
 80095be:	490b      	ldr	r1, [pc, #44]	; (80095ec <ull_configurestsiv+0x38>)
 80095c0:	f7ff ff64 	bl	800948c <dwt_write32bitoffsetreg>
 80095c4:	6863      	ldr	r3, [r4, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	4909      	ldr	r1, [pc, #36]	; (80095f0 <ull_configurestsiv+0x3c>)
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7ff ff5e 	bl	800948c <dwt_write32bitoffsetreg>
 80095d0:	68a3      	ldr	r3, [r4, #8]
 80095d2:	2200      	movs	r2, #0
 80095d4:	4907      	ldr	r1, [pc, #28]	; (80095f4 <ull_configurestsiv+0x40>)
 80095d6:	4628      	mov	r0, r5
 80095d8:	f7ff ff58 	bl	800948c <dwt_write32bitoffsetreg>
 80095dc:	68e3      	ldr	r3, [r4, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	4905      	ldr	r1, [pc, #20]	; (80095f8 <ull_configurestsiv+0x44>)
 80095e2:	4628      	mov	r0, r5
 80095e4:	f7ff ff52 	bl	800948c <dwt_write32bitoffsetreg>
 80095e8:	bd38      	pop	{r3, r4, r5, pc}
 80095ea:	bf00      	nop
 80095ec:	0002001c 	.word	0x0002001c
 80095f0:	00020020 	.word	0x00020020
 80095f4:	00020024 	.word	0x00020024
 80095f8:	00020028 	.word	0x00020028

080095fc <ull_configmrxlut>:
 80095fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	4604      	mov	r4, r0
 8009602:	2905      	cmp	r1, #5
 8009604:	d03a      	beq.n	800967c <ull_configmrxlut+0x80>
 8009606:	4d23      	ldr	r5, [pc, #140]	; (8009694 <ull_configmrxlut+0x98>)
 8009608:	462e      	mov	r6, r5
 800960a:	4f23      	ldr	r7, [pc, #140]	; (8009698 <ull_configmrxlut+0x9c>)
 800960c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80096d4 <ull_configmrxlut+0xd8>
 8009610:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80096d8 <ull_configmrxlut+0xdc>
 8009614:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80096dc <ull_configmrxlut+0xe0>
 8009618:	4b20      	ldr	r3, [pc, #128]	; (800969c <ull_configmrxlut+0xa0>)
 800961a:	2200      	movs	r2, #0
 800961c:	4920      	ldr	r1, [pc, #128]	; (80096a0 <ull_configmrxlut+0xa4>)
 800961e:	4620      	mov	r0, r4
 8009620:	f7ff ff34 	bl	800948c <dwt_write32bitoffsetreg>
 8009624:	4653      	mov	r3, sl
 8009626:	2200      	movs	r2, #0
 8009628:	491e      	ldr	r1, [pc, #120]	; (80096a4 <ull_configmrxlut+0xa8>)
 800962a:	4620      	mov	r0, r4
 800962c:	f7ff ff2e 	bl	800948c <dwt_write32bitoffsetreg>
 8009630:	464b      	mov	r3, r9
 8009632:	2200      	movs	r2, #0
 8009634:	491c      	ldr	r1, [pc, #112]	; (80096a8 <ull_configmrxlut+0xac>)
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff ff28 	bl	800948c <dwt_write32bitoffsetreg>
 800963c:	4643      	mov	r3, r8
 800963e:	2200      	movs	r2, #0
 8009640:	491a      	ldr	r1, [pc, #104]	; (80096ac <ull_configmrxlut+0xb0>)
 8009642:	4620      	mov	r0, r4
 8009644:	f7ff ff22 	bl	800948c <dwt_write32bitoffsetreg>
 8009648:	463b      	mov	r3, r7
 800964a:	2200      	movs	r2, #0
 800964c:	4918      	ldr	r1, [pc, #96]	; (80096b0 <ull_configmrxlut+0xb4>)
 800964e:	4620      	mov	r0, r4
 8009650:	f7ff ff1c 	bl	800948c <dwt_write32bitoffsetreg>
 8009654:	4633      	mov	r3, r6
 8009656:	2200      	movs	r2, #0
 8009658:	4916      	ldr	r1, [pc, #88]	; (80096b4 <ull_configmrxlut+0xb8>)
 800965a:	4620      	mov	r0, r4
 800965c:	f7ff ff16 	bl	800948c <dwt_write32bitoffsetreg>
 8009660:	462b      	mov	r3, r5
 8009662:	2200      	movs	r2, #0
 8009664:	4914      	ldr	r1, [pc, #80]	; (80096b8 <ull_configmrxlut+0xbc>)
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff ff10 	bl	800948c <dwt_write32bitoffsetreg>
 800966c:	4b13      	ldr	r3, [pc, #76]	; (80096bc <ull_configmrxlut+0xc0>)
 800966e:	2200      	movs	r2, #0
 8009670:	4913      	ldr	r1, [pc, #76]	; (80096c0 <ull_configmrxlut+0xc4>)
 8009672:	4620      	mov	r0, r4
 8009674:	f7ff ff0a 	bl	800948c <dwt_write32bitoffsetreg>
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	4d11      	ldr	r5, [pc, #68]	; (80096c4 <ull_configmrxlut+0xc8>)
 800967e:	4e12      	ldr	r6, [pc, #72]	; (80096c8 <ull_configmrxlut+0xcc>)
 8009680:	4f12      	ldr	r7, [pc, #72]	; (80096cc <ull_configmrxlut+0xd0>)
 8009682:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80096e0 <ull_configmrxlut+0xe4>
 8009686:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80096e4 <ull_configmrxlut+0xe8>
 800968a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80096e8 <ull_configmrxlut+0xec>
 800968e:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <ull_configmrxlut+0xd4>)
 8009690:	e7c3      	b.n	800961a <ull_configmrxlut+0x1e>
 8009692:	bf00      	nop
 8009694:	0002afb5 	.word	0x0002afb5
 8009698:	0002af7d 	.word	0x0002af7d
 800969c:	0002a8fe 	.word	0x0002a8fe
 80096a0:	00030038 	.word	0x00030038
 80096a4:	0003003c 	.word	0x0003003c
 80096a8:	00030040 	.word	0x00030040
 80096ac:	00030044 	.word	0x00030044
 80096b0:	00030048 	.word	0x00030048
 80096b4:	0003004c 	.word	0x0003004c
 80096b8:	00030050 	.word	0x00030050
 80096bc:	10000240 	.word	0x10000240
 80096c0:	0003001c 	.word	0x0003001c
 80096c4:	0001cff5 	.word	0x0001cff5
 80096c8:	0001cfb5 	.word	0x0001cfb5
 80096cc:	0001cf36 	.word	0x0001cf36
 80096d0:	0001c0fd 	.word	0x0001c0fd
 80096d4:	0002af3e 	.word	0x0002af3e
 80096d8:	0002a5fe 	.word	0x0002a5fe
 80096dc:	0002ac36 	.word	0x0002ac36
 80096e0:	0001c77e 	.word	0x0001c77e
 80096e4:	0001c6be 	.word	0x0001c6be
 80096e8:	0001c43e 	.word	0x0001c43e

080096ec <ull_disable_rftx_blocks>:
 80096ec:	b508      	push	{r3, lr}
 80096ee:	2300      	movs	r3, #0
 80096f0:	461a      	mov	r2, r3
 80096f2:	4902      	ldr	r1, [pc, #8]	; (80096fc <ull_disable_rftx_blocks+0x10>)
 80096f4:	f7ff feca 	bl	800948c <dwt_write32bitoffsetreg>
 80096f8:	bd08      	pop	{r3, pc}
 80096fa:	bf00      	nop
 80096fc:	00070004 	.word	0x00070004

08009700 <ull_disable_rf_tx>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4604      	mov	r4, r0
 8009704:	460d      	mov	r5, r1
 8009706:	2300      	movs	r3, #0
 8009708:	461a      	mov	r2, r3
 800970a:	490a      	ldr	r1, [pc, #40]	; (8009734 <ull_disable_rf_tx+0x34>)
 800970c:	f7ff febe 	bl	800948c <dwt_write32bitoffsetreg>
 8009710:	2300      	movs	r3, #0
 8009712:	461a      	mov	r2, r3
 8009714:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8009718:	4620      	mov	r0, r4
 800971a:	f7ff feb7 	bl	800948c <dwt_write32bitoffsetreg>
 800971e:	b905      	cbnz	r5, 8009722 <ull_disable_rf_tx+0x22>
 8009720:	bd38      	pop	{r3, r4, r5, pc}
 8009722:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8009726:	2200      	movs	r2, #0
 8009728:	4903      	ldr	r1, [pc, #12]	; (8009738 <ull_disable_rf_tx+0x38>)
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff feae 	bl	800948c <dwt_write32bitoffsetreg>
 8009730:	e7f6      	b.n	8009720 <ull_disable_rf_tx+0x20>
 8009732:	bf00      	nop
 8009734:	00070048 	.word	0x00070048
 8009738:	00070014 	.word	0x00070014

0800973c <ull_readrxdata>:
 800973c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973e:	b083      	sub	sp, #12
 8009740:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8009742:	7ba4      	ldrb	r4, [r4, #14]
 8009744:	2c03      	cmp	r4, #3
 8009746:	bf0c      	ite	eq
 8009748:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800974c:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8009750:	189c      	adds	r4, r3, r2
 8009752:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009756:	da19      	bge.n	800978c <ull_readrxdata+0x50>
 8009758:	461d      	mov	r5, r3
 800975a:	4616      	mov	r6, r2
 800975c:	460f      	mov	r7, r1
 800975e:	4604      	mov	r4, r0
 8009760:	2b7f      	cmp	r3, #127	; 0x7f
 8009762:	d915      	bls.n	8009790 <ull_readrxdata+0x54>
 8009764:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8009768:	2200      	movs	r2, #0
 800976a:	490d      	ldr	r1, [pc, #52]	; (80097a0 <ull_readrxdata+0x64>)
 800976c:	f7ff fe8e 	bl	800948c <dwt_write32bitoffsetreg>
 8009770:	462b      	mov	r3, r5
 8009772:	2200      	movs	r2, #0
 8009774:	490b      	ldr	r1, [pc, #44]	; (80097a4 <ull_readrxdata+0x68>)
 8009776:	4620      	mov	r0, r4
 8009778:	f7ff fe88 	bl	800948c <dwt_write32bitoffsetreg>
 800977c:	9700      	str	r7, [sp, #0]
 800977e:	4633      	mov	r3, r6
 8009780:	2200      	movs	r2, #0
 8009782:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8009786:	4620      	mov	r0, r4
 8009788:	f7ff fa01 	bl	8008b8e <dwt_readfromdevice>
 800978c:	b003      	add	sp, #12
 800978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009790:	9100      	str	r1, [sp, #0]
 8009792:	4613      	mov	r3, r2
 8009794:	462a      	mov	r2, r5
 8009796:	4661      	mov	r1, ip
 8009798:	f7ff f9f9 	bl	8008b8e <dwt_readfromdevice>
 800979c:	e7f6      	b.n	800978c <ull_readrxdata+0x50>
 800979e:	bf00      	nop
 80097a0:	001f0004 	.word	0x001f0004
 80097a4:	001f0008 	.word	0x001f0008

080097a8 <dwt_write8bitoffsetreg>:
 80097a8:	b510      	push	{r4, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	ac04      	add	r4, sp, #16
 80097ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80097b2:	9400      	str	r4, [sp, #0]
 80097b4:	2301      	movs	r3, #1
 80097b6:	b292      	uxth	r2, r2
 80097b8:	f7ff fe00 	bl	80093bc <dwt_writetodevice>
 80097bc:	b004      	add	sp, #16
 80097be:	bd10      	pop	{r4, pc}

080097c0 <ull_getframelength>:
 80097c0:	b510      	push	{r4, lr}
 80097c2:	4604      	mov	r4, r0
 80097c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80097c6:	7b9b      	ldrb	r3, [r3, #14]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d013      	beq.n	80097f4 <ull_getframelength+0x34>
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d11d      	bne.n	800980c <ull_getframelength+0x4c>
 80097d0:	23f0      	movs	r3, #240	; 0xf0
 80097d2:	2200      	movs	r2, #0
 80097d4:	4912      	ldr	r1, [pc, #72]	; (8009820 <ull_getframelength+0x60>)
 80097d6:	f7ff ffe7 	bl	80097a8 <dwt_write8bitoffsetreg>
 80097da:	2200      	movs	r2, #0
 80097dc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7ff f9f4 	bl	8008bce <dwt_read16bitoffsetreg>
 80097e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80097e8:	7ada      	ldrb	r2, [r3, #11]
 80097ea:	b1a2      	cbz	r2, 8009816 <ull_getframelength+0x56>
 80097ec:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80097f0:	83d8      	strh	r0, [r3, #30]
 80097f2:	bd10      	pop	{r4, pc}
 80097f4:	230f      	movs	r3, #15
 80097f6:	2200      	movs	r2, #0
 80097f8:	4909      	ldr	r1, [pc, #36]	; (8009820 <ull_getframelength+0x60>)
 80097fa:	f7ff ffd5 	bl	80097a8 <dwt_write8bitoffsetreg>
 80097fe:	2200      	movs	r2, #0
 8009800:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff f9e2 	bl	8008bce <dwt_read16bitoffsetreg>
 800980a:	e7ec      	b.n	80097e6 <ull_getframelength+0x26>
 800980c:	2200      	movs	r2, #0
 800980e:	214c      	movs	r1, #76	; 0x4c
 8009810:	f7ff f9dd 	bl	8008bce <dwt_read16bitoffsetreg>
 8009814:	e7e7      	b.n	80097e6 <ull_getframelength+0x26>
 8009816:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800981a:	83d8      	strh	r0, [r3, #30]
 800981c:	e7e9      	b.n	80097f2 <ull_getframelength+0x32>
 800981e:	bf00      	nop
 8009820:	00010018 	.word	0x00010018

08009824 <_dwt_clear_db_events>:
 8009824:	b510      	push	{r4, lr}
 8009826:	4604      	mov	r4, r0
 8009828:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800982a:	7b9b      	ldrb	r3, [r3, #14]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d004      	beq.n	800983a <_dwt_clear_db_events+0x16>
 8009830:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009832:	7b9b      	ldrb	r3, [r3, #14]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d006      	beq.n	8009846 <_dwt_clear_db_events+0x22>
 8009838:	bd10      	pop	{r4, pc}
 800983a:	230f      	movs	r3, #15
 800983c:	2200      	movs	r2, #0
 800983e:	4905      	ldr	r1, [pc, #20]	; (8009854 <_dwt_clear_db_events+0x30>)
 8009840:	f7ff ffb2 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009844:	e7f4      	b.n	8009830 <_dwt_clear_db_events+0xc>
 8009846:	23f0      	movs	r3, #240	; 0xf0
 8009848:	2200      	movs	r2, #0
 800984a:	4902      	ldr	r1, [pc, #8]	; (8009854 <_dwt_clear_db_events+0x30>)
 800984c:	4620      	mov	r0, r4
 800984e:	f7ff ffab 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009852:	e7f1      	b.n	8009838 <_dwt_clear_db_events+0x14>
 8009854:	00010018 	.word	0x00010018

08009858 <ull_clearaonconfig>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4604      	mov	r4, r0
 800985c:	2300      	movs	r3, #0
 800985e:	461a      	mov	r2, r3
 8009860:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8009864:	f7ff fdb5 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009868:	2300      	movs	r3, #0
 800986a:	461a      	mov	r2, r3
 800986c:	4908      	ldr	r1, [pc, #32]	; (8009890 <ull_clearaonconfig+0x38>)
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff ff9a 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009874:	4d07      	ldr	r5, [pc, #28]	; (8009894 <ull_clearaonconfig+0x3c>)
 8009876:	2300      	movs	r3, #0
 8009878:	461a      	mov	r2, r3
 800987a:	4629      	mov	r1, r5
 800987c:	4620      	mov	r0, r4
 800987e:	f7ff ff93 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009882:	2302      	movs	r3, #2
 8009884:	2200      	movs	r2, #0
 8009886:	4629      	mov	r1, r5
 8009888:	4620      	mov	r0, r4
 800988a:	f7ff ff8d 	bl	80097a8 <dwt_write8bitoffsetreg>
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	000a0014 	.word	0x000a0014
 8009894:	000a0004 	.word	0x000a0004

08009898 <ull_configeventcounters>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4605      	mov	r5, r0
 800989c:	460c      	mov	r4, r1
 800989e:	2302      	movs	r3, #2
 80098a0:	2200      	movs	r2, #0
 80098a2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80098a6:	f7ff ff7f 	bl	80097a8 <dwt_write8bitoffsetreg>
 80098aa:	b904      	cbnz	r4, 80098ae <ull_configeventcounters+0x16>
 80098ac:	bd38      	pop	{r3, r4, r5, pc}
 80098ae:	2301      	movs	r3, #1
 80098b0:	2200      	movs	r2, #0
 80098b2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff ff76 	bl	80097a8 <dwt_write8bitoffsetreg>
 80098bc:	e7f6      	b.n	80098ac <ull_configeventcounters+0x14>
	...

080098c0 <ull_aon_read>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4604      	mov	r4, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	2200      	movs	r2, #0
 80098c8:	490a      	ldr	r1, [pc, #40]	; (80098f4 <ull_aon_read+0x34>)
 80098ca:	f7ff fd82 	bl	80093d2 <dwt_write16bitoffsetreg>
 80098ce:	4d0a      	ldr	r5, [pc, #40]	; (80098f8 <ull_aon_read+0x38>)
 80098d0:	2388      	movs	r3, #136	; 0x88
 80098d2:	2200      	movs	r2, #0
 80098d4:	4629      	mov	r1, r5
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7ff ff66 	bl	80097a8 <dwt_write8bitoffsetreg>
 80098dc:	2300      	movs	r3, #0
 80098de:	461a      	mov	r2, r3
 80098e0:	4629      	mov	r1, r5
 80098e2:	4620      	mov	r0, r4
 80098e4:	f7ff ff60 	bl	80097a8 <dwt_write8bitoffsetreg>
 80098e8:	2200      	movs	r2, #0
 80098ea:	4904      	ldr	r1, [pc, #16]	; (80098fc <ull_aon_read+0x3c>)
 80098ec:	4620      	mov	r0, r4
 80098ee:	f7ff f980 	bl	8008bf2 <dwt_read8bitoffsetreg>
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	000a000c 	.word	0x000a000c
 80098f8:	000a0004 	.word	0x000a0004
 80098fc:	000a0008 	.word	0x000a0008

08009900 <ull_aon_write>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	4604      	mov	r4, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4615      	mov	r5, r2
 8009908:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800990c:	bf34      	ite	cc
 800990e:	2600      	movcc	r6, #0
 8009910:	2620      	movcs	r6, #32
 8009912:	2200      	movs	r2, #0
 8009914:	490b      	ldr	r1, [pc, #44]	; (8009944 <ull_aon_write+0x44>)
 8009916:	f7ff fd5c 	bl	80093d2 <dwt_write16bitoffsetreg>
 800991a:	462b      	mov	r3, r5
 800991c:	2200      	movs	r2, #0
 800991e:	490a      	ldr	r1, [pc, #40]	; (8009948 <ull_aon_write+0x48>)
 8009920:	4620      	mov	r0, r4
 8009922:	f7ff ff41 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009926:	4d09      	ldr	r5, [pc, #36]	; (800994c <ull_aon_write+0x4c>)
 8009928:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800992c:	2200      	movs	r2, #0
 800992e:	4629      	mov	r1, r5
 8009930:	4620      	mov	r0, r4
 8009932:	f7ff ff39 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009936:	2300      	movs	r3, #0
 8009938:	461a      	mov	r2, r3
 800993a:	4629      	mov	r1, r5
 800993c:	4620      	mov	r0, r4
 800993e:	f7ff ff33 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009942:	bd70      	pop	{r4, r5, r6, pc}
 8009944:	000a000c 	.word	0x000a000c
 8009948:	000a0010 	.word	0x000a0010
 800994c:	000a0004 	.word	0x000a0004

08009950 <ull_configuresleep>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	4616      	mov	r6, r2
 8009958:	2200      	movs	r2, #0
 800995a:	f240 110b 	movw	r1, #267	; 0x10b
 800995e:	f7ff ffcf 	bl	8009900 <ull_aon_write>
 8009962:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009966:	4620      	mov	r0, r4
 8009968:	f7ff ffaa 	bl	80098c0 <ull_aon_read>
 800996c:	f000 021f 	and.w	r2, r0, #31
 8009970:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009974:	4620      	mov	r0, r4
 8009976:	f7ff ffc3 	bl	8009900 <ull_aon_write>
 800997a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800997c:	8a1a      	ldrh	r2, [r3, #16]
 800997e:	4315      	orrs	r5, r2
 8009980:	821d      	strh	r5, [r3, #16]
 8009982:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009984:	8a1b      	ldrh	r3, [r3, #16]
 8009986:	2200      	movs	r2, #0
 8009988:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800998c:	4620      	mov	r0, r4
 800998e:	f7ff fd20 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009992:	4633      	mov	r3, r6
 8009994:	2200      	movs	r2, #0
 8009996:	4902      	ldr	r1, [pc, #8]	; (80099a0 <ull_configuresleep+0x50>)
 8009998:	4620      	mov	r0, r4
 800999a:	f7ff ff05 	bl	80097a8 <dwt_write8bitoffsetreg>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	000a0014 	.word	0x000a0014

080099a4 <ull_writetxdata>:
 80099a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a6:	b083      	sub	sp, #12
 80099a8:	185c      	adds	r4, r3, r1
 80099aa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80099ae:	da24      	bge.n	80099fa <ull_writetxdata+0x56>
 80099b0:	461c      	mov	r4, r3
 80099b2:	4617      	mov	r7, r2
 80099b4:	460e      	mov	r6, r1
 80099b6:	4605      	mov	r5, r0
 80099b8:	2b7f      	cmp	r3, #127	; 0x7f
 80099ba:	d915      	bls.n	80099e8 <ull_writetxdata+0x44>
 80099bc:	2314      	movs	r3, #20
 80099be:	2200      	movs	r2, #0
 80099c0:	490f      	ldr	r1, [pc, #60]	; (8009a00 <ull_writetxdata+0x5c>)
 80099c2:	f7ff fd63 	bl	800948c <dwt_write32bitoffsetreg>
 80099c6:	4623      	mov	r3, r4
 80099c8:	2200      	movs	r2, #0
 80099ca:	490e      	ldr	r1, [pc, #56]	; (8009a04 <ull_writetxdata+0x60>)
 80099cc:	4628      	mov	r0, r5
 80099ce:	f7ff fd5d 	bl	800948c <dwt_write32bitoffsetreg>
 80099d2:	9700      	str	r7, [sp, #0]
 80099d4:	4633      	mov	r3, r6
 80099d6:	2200      	movs	r2, #0
 80099d8:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80099dc:	4628      	mov	r0, r5
 80099de:	f7ff fced 	bl	80093bc <dwt_writetodevice>
 80099e2:	2000      	movs	r0, #0
 80099e4:	b003      	add	sp, #12
 80099e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e8:	9200      	str	r2, [sp, #0]
 80099ea:	460b      	mov	r3, r1
 80099ec:	4622      	mov	r2, r4
 80099ee:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 80099f2:	f7ff fce3 	bl	80093bc <dwt_writetodevice>
 80099f6:	2000      	movs	r0, #0
 80099f8:	e7f4      	b.n	80099e4 <ull_writetxdata+0x40>
 80099fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099fe:	e7f1      	b.n	80099e4 <ull_writetxdata+0x40>
 8009a00:	001f0004 	.word	0x001f0004
 8009a04:	001f0008 	.word	0x001f0008

08009a08 <ull_signal_rx_buff_free>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	2302      	movs	r3, #2
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	9200      	str	r2, [sp, #0]
 8009a16:	4613      	mov	r3, r2
 8009a18:	2113      	movs	r1, #19
 8009a1a:	f7ff f83a 	bl	8008a92 <dwt_xfer3xxx>
 8009a1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a20:	7b9a      	ldrb	r2, [r3, #14]
 8009a22:	2a03      	cmp	r2, #3
 8009a24:	bf0c      	ite	eq
 8009a26:	2201      	moveq	r2, #1
 8009a28:	2203      	movne	r2, #3
 8009a2a:	739a      	strb	r2, [r3, #14]
 8009a2c:	b002      	add	sp, #8
 8009a2e:	bd10      	pop	{r4, pc}

08009a30 <ull_isr>:
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	4604      	mov	r4, r0
 8009a36:	2200      	movs	r2, #0
 8009a38:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8009a3c:	f7ff f8d9 	bl	8008bf2 <dwt_read8bitoffsetreg>
 8009a40:	4605      	mov	r5, r0
 8009a42:	2200      	movs	r2, #0
 8009a44:	2144      	movs	r1, #68	; 0x44
 8009a46:	4620      	mov	r0, r4
 8009a48:	f7ff f8ab 	bl	8008ba2 <dwt_read32bitoffsetreg>
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a50:	2200      	movs	r2, #0
 8009a52:	83da      	strh	r2, [r3, #30]
 8009a54:	f883 2020 	strb.w	r2, [r3, #32]
 8009a58:	619a      	str	r2, [r3, #24]
 8009a5a:	839a      	strh	r2, [r3, #28]
 8009a5c:	625a      	str	r2, [r3, #36]	; 0x24
 8009a5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a60:	625c      	str	r4, [r3, #36]	; 0x24
 8009a62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a64:	7b9f      	ldrb	r7, [r3, #14]
 8009a66:	2f00      	cmp	r7, #0
 8009a68:	d17f      	bne.n	8009b6a <ull_isr+0x13a>
 8009a6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a6c:	619e      	str	r6, [r3, #24]
 8009a6e:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 8009a72:	f898 3015 	ldrb.w	r3, [r8, #21]
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	f000 8090 	beq.w	8009ba0 <ull_isr+0x170>
 8009a80:	f015 0f80 	tst.w	r5, #128	; 0x80
 8009a84:	f040 8093 	bne.w	8009bae <ull_isr+0x17e>
 8009a88:	f015 0f01 	tst.w	r5, #1
 8009a8c:	f040 80c1 	bne.w	8009c12 <ull_isr+0x1e2>
 8009a90:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a94:	d00b      	beq.n	8009aae <ull_isr+0x7e>
 8009a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a98:	b113      	cbz	r3, 8009aa0 <ull_isr+0x70>
 8009a9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009a9c:	3018      	adds	r0, #24
 8009a9e:	4798      	blx	r3
 8009aa0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	2144      	movs	r1, #68	; 0x44
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7ff fc92 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009aae:	f015 0f08 	tst.w	r5, #8
 8009ab2:	d107      	bne.n	8009ac4 <ull_isr+0x94>
 8009ab4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ab6:	7b9b      	ldrb	r3, [r3, #14]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 80ea 	beq.w	8009c92 <ull_isr+0x262>
 8009abe:	2f00      	cmp	r7, #0
 8009ac0:	f000 80e7 	beq.w	8009c92 <ull_isr+0x262>
 8009ac4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2020 	strb.w	r2, [r3, #32]
 8009acc:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8009ad0:	f000 80ad 	beq.w	8009c2e <ull_isr+0x1fe>
 8009ad4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009ad6:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009ada:	f043 0308 	orr.w	r3, r3, #8
 8009ade:	f882 3020 	strb.w	r3, [r2, #32]
 8009ae2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8009ae6:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8009aea:	d008      	beq.n	8009afe <ull_isr+0xce>
 8009aec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009aee:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009af2:	f043 0310 	orr.w	r3, r3, #16
 8009af6:	f882 3020 	strb.w	r3, [r2, #32]
 8009afa:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8009afe:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009b02:	d006      	beq.n	8009b12 <ull_isr+0xe2>
 8009b04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b06:	7d53      	ldrb	r3, [r2, #21]
 8009b08:	f003 0303 	and.w	r3, r3, #3
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	f000 809a 	beq.w	8009c46 <ull_isr+0x216>
 8009b12:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8009b16:	f040 80a2 	bne.w	8009c5e <ull_isr+0x22e>
 8009b1a:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2144      	movs	r1, #68	; 0x44
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7ff fcb2 	bl	800948c <dwt_write32bitoffsetreg>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff fe7b 	bl	8009824 <_dwt_clear_db_events>
 8009b2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009b30:	8bc3      	ldrh	r3, [r0, #30]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f040 80a2 	bne.w	8009c7c <ull_isr+0x24c>
 8009b38:	7d43      	ldrb	r3, [r0, #21]
 8009b3a:	f003 0303 	and.w	r3, r3, #3
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	f000 809c 	beq.w	8009c7c <ull_isr+0x24c>
 8009b44:	6983      	ldr	r3, [r0, #24]
 8009b46:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009b4a:	6183      	str	r3, [r0, #24]
 8009b4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b4e:	6993      	ldr	r3, [r2, #24]
 8009b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b54:	6193      	str	r3, [r2, #24]
 8009b56:	69e3      	ldr	r3, [r4, #28]
 8009b58:	b113      	cbz	r3, 8009b60 <ull_isr+0x130>
 8009b5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009b5c:	3018      	adds	r0, #24
 8009b5e:	4798      	blx	r3
 8009b60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2020 	strb.w	r2, [r3, #32]
 8009b68:	e08c      	b.n	8009c84 <ull_isr+0x254>
 8009b6a:	496d      	ldr	r1, [pc, #436]	; (8009d20 <ull_isr+0x2f0>)
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f7ff f840 	bl	8008bf2 <dwt_read8bitoffsetreg>
 8009b72:	4607      	mov	r7, r0
 8009b74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b76:	7b9b      	ldrb	r3, [r3, #14]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	bf08      	it	eq
 8009b7c:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 8009b80:	f017 0f01 	tst.w	r7, #1
 8009b84:	bf18      	it	ne
 8009b86:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8009b8a:	f017 0f02 	tst.w	r7, #2
 8009b8e:	bf18      	it	ne
 8009b90:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8009b94:	f017 0f04 	tst.w	r7, #4
 8009b98:	bf18      	it	ne
 8009b9a:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8009b9e:	e764      	b.n	8009a6a <ull_isr+0x3a>
 8009ba0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009ba4:	bf1c      	itt	ne
 8009ba6:	f045 0508 	orrne.w	r5, r5, #8
 8009baa:	b2ed      	uxtbne	r5, r5
 8009bac:	e768      	b.n	8009a80 <ull_isr+0x50>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2148      	movs	r1, #72	; 0x48
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7ff f80b 	bl	8008bce <dwt_read16bitoffsetreg>
 8009bb8:	f8a8 001c 	strh.w	r0, [r8, #28]
 8009bbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009bbe:	7d1a      	ldrb	r2, [r3, #20]
 8009bc0:	b11a      	cbz	r2, 8009bca <ull_isr+0x19a>
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	f012 0f04 	tst.w	r2, #4
 8009bc8:	d103      	bne.n	8009bd2 <ull_isr+0x1a2>
 8009bca:	8b9b      	ldrh	r3, [r3, #28]
 8009bcc:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009bd0:	b18b      	cbz	r3, 8009bf6 <ull_isr+0x1c6>
 8009bd2:	2304      	movs	r3, #4
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2144      	movs	r1, #68	; 0x44
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff fde5 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009bde:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8009be2:	2200      	movs	r2, #0
 8009be4:	2148      	movs	r1, #72	; 0x48
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff fbf3 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009bec:	6a23      	ldr	r3, [r4, #32]
 8009bee:	b113      	cbz	r3, 8009bf6 <ull_isr+0x1c6>
 8009bf0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009bf2:	3018      	adds	r0, #24
 8009bf4:	4798      	blx	r3
 8009bf6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009bf8:	8b9b      	ldrh	r3, [r3, #28]
 8009bfa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009bfe:	f43f af43 	beq.w	8009a88 <ull_isr+0x58>
 8009c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c06:	2200      	movs	r2, #0
 8009c08:	2148      	movs	r1, #72	; 0x48
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff fbe1 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009c10:	e73a      	b.n	8009a88 <ull_isr+0x58>
 8009c12:	23f8      	movs	r3, #248	; 0xf8
 8009c14:	2200      	movs	r2, #0
 8009c16:	2144      	movs	r1, #68	; 0x44
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f7ff fdc5 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f43f af35 	beq.w	8009a90 <ull_isr+0x60>
 8009c26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009c28:	3018      	adds	r0, #24
 8009c2a:	4798      	blx	r3
 8009c2c:	e730      	b.n	8009a90 <ull_isr+0x60>
 8009c2e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8009c32:	bf1f      	itttt	ne
 8009c34:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8009c36:	f892 3020 	ldrbne.w	r3, [r2, #32]
 8009c3a:	f043 0304 	orrne.w	r3, r3, #4
 8009c3e:	f882 3020 	strbne.w	r3, [r2, #32]
 8009c42:	2700      	movs	r7, #0
 8009c44:	e74f      	b.n	8009ae6 <ull_isr+0xb6>
 8009c46:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009c4a:	f043 0302 	orr.w	r3, r3, #2
 8009c4e:	f882 3020 	strb.w	r3, [r2, #32]
 8009c52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c54:	2200      	movs	r2, #0
 8009c56:	83da      	strh	r2, [r3, #30]
 8009c58:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8009c5c:	e75d      	b.n	8009b1a <ull_isr+0xea>
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f7ff fdae 	bl	80097c0 <ull_getframelength>
 8009c64:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009c68:	f43f af57 	beq.w	8009b1a <ull_isr+0xea>
 8009c6c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009c6e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009c72:	f043 0301 	orr.w	r3, r3, #1
 8009c76:	f882 3020 	strb.w	r3, [r2, #32]
 8009c7a:	e74e      	b.n	8009b1a <ull_isr+0xea>
 8009c7c:	6963      	ldr	r3, [r4, #20]
 8009c7e:	b10b      	cbz	r3, 8009c84 <ull_isr+0x254>
 8009c80:	3018      	adds	r0, #24
 8009c82:	4798      	blx	r3
 8009c84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c86:	7b9b      	ldrb	r3, [r3, #14]
 8009c88:	bb03      	cbnz	r3, 8009ccc <ull_isr+0x29c>
 8009c8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2020 	strb.w	r2, [r3, #32]
 8009c92:	f015 0f10 	tst.w	r5, #16
 8009c96:	d11d      	bne.n	8009cd4 <ull_isr+0x2a4>
 8009c98:	f015 0f20 	tst.w	r5, #32
 8009c9c:	d12d      	bne.n	8009cfa <ull_isr+0x2ca>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4920      	ldr	r1, [pc, #128]	; (8009d24 <ull_isr+0x2f4>)
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7fe ffa5 	bl	8008bf2 <dwt_read8bitoffsetreg>
 8009ca8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009caa:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8009cae:	f010 0303 	ands.w	r3, r0, #3
 8009cb2:	d009      	beq.n	8009cc8 <ull_isr+0x298>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	491b      	ldr	r1, [pc, #108]	; (8009d24 <ull_isr+0x2f4>)
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f7ff fd75 	bl	80097a8 <dwt_write8bitoffsetreg>
 8009cbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cc0:	b113      	cbz	r3, 8009cc8 <ull_isr+0x298>
 8009cc2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009cc4:	3018      	adds	r0, #24
 8009cc6:	4798      	blx	r3
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff fe9b 	bl	8009a08 <ull_signal_rx_buff_free>
 8009cd2:	e7da      	b.n	8009c8a <ull_isr+0x25a>
 8009cd4:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <ull_isr+0x2f8>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2144      	movs	r1, #68	; 0x44
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff fbd6 	bl	800948c <dwt_write32bitoffsetreg>
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7ff fd9f 	bl	8009824 <_dwt_clear_db_events>
 8009ce6:	69e3      	ldr	r3, [r4, #28]
 8009ce8:	b113      	cbz	r3, 8009cf0 <ull_isr+0x2c0>
 8009cea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009cec:	3018      	adds	r0, #24
 8009cee:	4798      	blx	r3
 8009cf0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2020 	strb.w	r2, [r3, #32]
 8009cf8:	e7ce      	b.n	8009c98 <ull_isr+0x268>
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <ull_isr+0x2fc>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2144      	movs	r1, #68	; 0x44
 8009d00:	4620      	mov	r0, r4
 8009d02:	f7ff fbc3 	bl	800948c <dwt_write32bitoffsetreg>
 8009d06:	4620      	mov	r0, r4
 8009d08:	f7ff fd8c 	bl	8009824 <_dwt_clear_db_events>
 8009d0c:	69a3      	ldr	r3, [r4, #24]
 8009d0e:	b113      	cbz	r3, 8009d16 <ull_isr+0x2e6>
 8009d10:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009d12:	3018      	adds	r0, #24
 8009d14:	4798      	blx	r3
 8009d16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2020 	strb.w	r2, [r3, #32]
 8009d1e:	e7be      	b.n	8009c9e <ull_isr+0x26e>
 8009d20:	00010018 	.word	0x00010018
 8009d24:	00110038 	.word	0x00110038
 8009d28:	34059400 	.word	0x34059400
 8009d2c:	10220400 	.word	0x10220400

08009d30 <dwt_modify32bitoffsetreg>:
 8009d30:	b530      	push	{r4, r5, lr}
 8009d32:	b085      	sub	sp, #20
 8009d34:	9c08      	ldr	r4, [sp, #32]
 8009d36:	f88d 3008 	strb.w	r3, [sp, #8]
 8009d3a:	0a1d      	lsrs	r5, r3, #8
 8009d3c:	f88d 5009 	strb.w	r5, [sp, #9]
 8009d40:	0c1d      	lsrs	r5, r3, #16
 8009d42:	f88d 500a 	strb.w	r5, [sp, #10]
 8009d46:	0e1b      	lsrs	r3, r3, #24
 8009d48:	f88d 300b 	strb.w	r3, [sp, #11]
 8009d4c:	f88d 400c 	strb.w	r4, [sp, #12]
 8009d50:	0a23      	lsrs	r3, r4, #8
 8009d52:	f88d 300d 	strb.w	r3, [sp, #13]
 8009d56:	0c23      	lsrs	r3, r4, #16
 8009d58:	f88d 300e 	strb.w	r3, [sp, #14]
 8009d5c:	0e24      	lsrs	r4, r4, #24
 8009d5e:	f88d 400f 	strb.w	r4, [sp, #15]
 8009d62:	f248 0303 	movw	r3, #32771	; 0x8003
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	ab02      	add	r3, sp, #8
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	b292      	uxth	r2, r2
 8009d70:	f7fe fe8f 	bl	8008a92 <dwt_xfer3xxx>
 8009d74:	b005      	add	sp, #20
 8009d76:	bd30      	pop	{r4, r5, pc}

08009d78 <ull_enable_rf_tx>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	460e      	mov	r6, r1
 8009d80:	4d13      	ldr	r5, [pc, #76]	; (8009dd0 <ull_enable_rf_tx+0x58>)
 8009d82:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7ff ffce 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009d94:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d9e:	2200      	movs	r2, #0
 8009da0:	4629      	mov	r1, r5
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff ffc4 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009da8:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <ull_enable_rf_tx+0x5c>)
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009db0:	2200      	movs	r2, #0
 8009db2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8009db6:	4620      	mov	r0, r4
 8009db8:	f7ff ffba 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009dbc:	b90e      	cbnz	r6, 8009dc2 <ull_enable_rf_tx+0x4a>
 8009dbe:	b002      	add	sp, #8
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <ull_enable_rf_tx+0x60>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4905      	ldr	r1, [pc, #20]	; (8009ddc <ull_enable_rf_tx+0x64>)
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f7ff fb5f 	bl	800948c <dwt_write32bitoffsetreg>
 8009dce:	e7f6      	b.n	8009dbe <ull_enable_rf_tx+0x46>
 8009dd0:	00070048 	.word	0x00070048
 8009dd4:	02003c00 	.word	0x02003c00
 8009dd8:	01011100 	.word	0x01011100
 8009ddc:	00070014 	.word	0x00070014

08009de0 <ull_enable_rftx_blocks>:
 8009de0:	b500      	push	{lr}
 8009de2:	b083      	sub	sp, #12
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <ull_enable_rftx_blocks+0x1c>)
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dec:	2200      	movs	r2, #0
 8009dee:	4904      	ldr	r1, [pc, #16]	; (8009e00 <ull_enable_rftx_blocks+0x20>)
 8009df0:	f7ff ff9e 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009df4:	b003      	add	sp, #12
 8009df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dfa:	bf00      	nop
 8009dfc:	02003c00 	.word	0x02003c00
 8009e00:	00070004 	.word	0x00070004

08009e04 <_dwt_otpprogword32>:
 8009e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	4617      	mov	r7, r2
 8009e10:	4e56      	ldr	r6, [pc, #344]	; (8009f6c <_dwt_otpprogword32+0x168>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	4631      	mov	r1, r6
 8009e16:	f7fe fec4 	bl	8008ba2 <dwt_read32bitoffsetreg>
 8009e1a:	4681      	mov	r9, r0
 8009e1c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e26:	2200      	movs	r2, #0
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f7ff ff80 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009e30:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8009f70 <_dwt_otpprogword32+0x16c>
 8009e34:	2318      	movs	r3, #24
 8009e36:	2200      	movs	r2, #0
 8009e38:	4641      	mov	r1, r8
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7ff fac9 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009e40:	2125      	movs	r1, #37	; 0x25
 8009e42:	4620      	mov	r0, r4
 8009e44:	f7ff faec 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e48:	2102      	movs	r1, #2
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff fae8 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e50:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7ff fae3 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e5a:	b2f9      	uxtb	r1, r7
 8009e5c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009e60:	4620      	mov	r0, r4
 8009e62:	f7ff fadd 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff fad8 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e70:	2100      	movs	r1, #0
 8009e72:	4620      	mov	r0, r4
 8009e74:	f7ff fad4 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e78:	2102      	movs	r1, #2
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f7ff fad0 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e80:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009e84:	4620      	mov	r0, r4
 8009e86:	f7ff facb 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e8a:	b2e9      	uxtb	r1, r5
 8009e8c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7ff fac5 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009e96:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8009e9a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f7ff fabe 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009ea4:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8009ea8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009eac:	4620      	mov	r0, r4
 8009eae:	f7ff fab7 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009eb2:	0e29      	lsrs	r1, r5, #24
 8009eb4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f7ff fab1 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7ff faad 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009ec6:	213a      	movs	r1, #58	; 0x3a
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f7ff faa9 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009ece:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f7ff faa4 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009ed8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8009edc:	4620      	mov	r0, r4
 8009ede:	f7ff fa9f 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f7ff fa9b 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009eea:	213a      	movs	r1, #58	; 0x3a
 8009eec:	4620      	mov	r0, r4
 8009eee:	f7ff fa97 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009ef2:	f240 1101 	movw	r1, #257	; 0x101
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f7ff fa92 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009efc:	2302      	movs	r3, #2
 8009efe:	2200      	movs	r2, #0
 8009f00:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f04:	4620      	mov	r0, r4
 8009f06:	f7ff fa64 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f12:	4620      	mov	r0, r4
 8009f14:	f7ff fa5d 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009f18:	2002      	movs	r0, #2
 8009f1a:	f7f6 fc97 	bl	800084c <deca_sleep>
 8009f1e:	213a      	movs	r1, #58	; 0x3a
 8009f20:	4620      	mov	r0, r4
 8009f22:	f7ff fa7d 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009f26:	f44f 7181 	mov.w	r1, #258	; 0x102
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7ff fa78 	bl	8009420 <__dwt_otp_write_wdata_id_reg>
 8009f30:	2302      	movs	r3, #2
 8009f32:	2200      	movs	r2, #0
 8009f34:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f7ff fa4a 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	461a      	mov	r2, r3
 8009f42:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f46:	4620      	mov	r0, r4
 8009f48:	f7ff fa43 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4641      	mov	r1, r8
 8009f52:	4620      	mov	r0, r4
 8009f54:	f7ff fa3d 	bl	80093d2 <dwt_write16bitoffsetreg>
 8009f58:	464b      	mov	r3, r9
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff fa94 	bl	800948c <dwt_write32bitoffsetreg>
 8009f64:	b003      	add	sp, #12
 8009f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f6a:	bf00      	nop
 8009f6c:	00070044 	.word	0x00070044
 8009f70:	000b0008 	.word	0x000b0008

08009f74 <ull_setgpiomode>:
 8009f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f76:	b083      	sub	sp, #12
 8009f78:	2400      	movs	r4, #0
 8009f7a:	4623      	mov	r3, r4
 8009f7c:	2601      	movs	r6, #1
 8009f7e:	2707      	movs	r7, #7
 8009f80:	e002      	b.n	8009f88 <ull_setgpiomode+0x14>
 8009f82:	3401      	adds	r4, #1
 8009f84:	2c09      	cmp	r4, #9
 8009f86:	d009      	beq.n	8009f9c <ull_setgpiomode+0x28>
 8009f88:	fa06 f504 	lsl.w	r5, r6, r4
 8009f8c:	420d      	tst	r5, r1
 8009f8e:	d0f8      	beq.n	8009f82 <ull_setgpiomode+0xe>
 8009f90:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8009f94:	fa07 f505 	lsl.w	r5, r7, r5
 8009f98:	432b      	orrs	r3, r5
 8009f9a:	e7f2      	b.n	8009f82 <ull_setgpiomode+0xe>
 8009f9c:	401a      	ands	r2, r3
 8009f9e:	9200      	str	r2, [sp, #0]
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009fa8:	f7ff fec2 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009fac:	b003      	add	sp, #12
 8009fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fb0 <ull_writetxfctrl>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	2a7f      	cmp	r2, #127	; 0x7f
 8009fb8:	d912      	bls.n	8009fe0 <ull_writetxfctrl+0x30>
 8009fba:	3280      	adds	r2, #128	; 0x80
 8009fbc:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8009fc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fc4:	9100      	str	r1, [sp, #0]
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <ull_writetxfctrl+0x48>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2120      	movs	r1, #32
 8009fcc:	f7ff feb0 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7fe fe0b 	bl	8008bf2 <dwt_read8bitoffsetreg>
 8009fdc:	b002      	add	sp, #8
 8009fde:	bd10      	pop	{r4, pc}
 8009fe0:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8009fe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fe8:	9100      	str	r1, [sp, #0]
 8009fea:	4b03      	ldr	r3, [pc, #12]	; (8009ff8 <ull_writetxfctrl+0x48>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	2120      	movs	r1, #32
 8009ff0:	f7ff fe9e 	bl	8009d30 <dwt_modify32bitoffsetreg>
 8009ff4:	e7f2      	b.n	8009fdc <ull_writetxfctrl+0x2c>
 8009ff6:	bf00      	nop
 8009ff8:	fc00f400 	.word	0xfc00f400

08009ffc <prs_sys_status_and_or>:
 8009ffc:	b500      	push	{lr}
 8009ffe:	b083      	sub	sp, #12
 800a000:	9200      	str	r2, [sp, #0]
 800a002:	460b      	mov	r3, r1
 800a004:	2200      	movs	r2, #0
 800a006:	2144      	movs	r1, #68	; 0x44
 800a008:	f7ff fe92 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a00c:	2000      	movs	r0, #0
 800a00e:	b003      	add	sp, #12
 800a010:	f85d fb04 	ldr.w	pc, [sp], #4

0800a014 <dwt_modify8bitoffsetreg>:
 800a014:	b500      	push	{lr}
 800a016:	b085      	sub	sp, #20
 800a018:	f88d 300c 	strb.w	r3, [sp, #12]
 800a01c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a020:	f88d 300d 	strb.w	r3, [sp, #13]
 800a024:	f248 0301 	movw	r3, #32769	; 0x8001
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	ab03      	add	r3, sp, #12
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	2302      	movs	r3, #2
 800a030:	b292      	uxth	r2, r2
 800a032:	f7fe fd2e 	bl	8008a92 <dwt_xfer3xxx>
 800a036:	b005      	add	sp, #20
 800a038:	f85d fb04 	ldr.w	pc, [sp], #4

0800a03c <ull_configciadiag>:
 800a03c:	b530      	push	{r4, r5, lr}
 800a03e:	b083      	sub	sp, #12
 800a040:	4604      	mov	r4, r0
 800a042:	460d      	mov	r5, r1
 800a044:	f011 0f01 	tst.w	r1, #1
 800a048:	d015      	beq.n	800a076 <ull_configciadiag+0x3a>
 800a04a:	2300      	movs	r3, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	23ef      	movs	r3, #239	; 0xef
 800a050:	2202      	movs	r2, #2
 800a052:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a056:	f7ff ffdd 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a05a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a05c:	759d      	strb	r5, [r3, #22]
 800a05e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a060:	7d9b      	ldrb	r3, [r3, #22]
 800a062:	085b      	lsrs	r3, r3, #1
 800a064:	d010      	beq.n	800a088 <ull_configciadiag+0x4c>
 800a066:	086b      	lsrs	r3, r5, #1
 800a068:	2200      	movs	r2, #0
 800a06a:	490e      	ldr	r1, [pc, #56]	; (800a0a4 <ull_configciadiag+0x68>)
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7ff fb9b 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a072:	b003      	add	sp, #12
 800a074:	bd30      	pop	{r4, r5, pc}
 800a076:	2310      	movs	r3, #16
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	23ff      	movs	r3, #255	; 0xff
 800a07c:	2202      	movs	r2, #2
 800a07e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a082:	f7ff ffc7 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a086:	e7e8      	b.n	800a05a <ull_configciadiag+0x1e>
 800a088:	2301      	movs	r3, #1
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	23ff      	movs	r3, #255	; 0xff
 800a08e:	2200      	movs	r2, #0
 800a090:	4904      	ldr	r1, [pc, #16]	; (800a0a4 <ull_configciadiag+0x68>)
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff ffbe 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a098:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a09a:	7d93      	ldrb	r3, [r2, #22]
 800a09c:	f043 0302 	orr.w	r3, r3, #2
 800a0a0:	7593      	strb	r3, [r2, #22]
 800a0a2:	e7e6      	b.n	800a072 <ull_configciadiag+0x36>
 800a0a4:	00010020 	.word	0x00010020

0800a0a8 <ull_calcbandwidthadj>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	f7ff f99f 	bl	80093f4 <ull_force_clocks>
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff fe5d 	bl	8009d78 <ull_enable_rf_tx>
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7ff fe8e 	bl	8009de0 <ull_enable_rftx_blocks>
 800a0c4:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4915      	ldr	r1, [pc, #84]	; (800a120 <ull_calcbandwidthadj+0x78>)
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f7ff f980 	bl	80093d2 <dwt_write16bitoffsetreg>
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	23ff      	movs	r3, #255	; 0xff
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4912      	ldr	r1, [pc, #72]	; (800a124 <ull_calcbandwidthadj+0x7c>)
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f7ff ff99 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a0e2:	4e10      	ldr	r6, [pc, #64]	; (800a124 <ull_calcbandwidthadj+0x7c>)
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7fe fd81 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800a0f0:	f010 0f01 	tst.w	r0, #1
 800a0f4:	d1f7      	bne.n	800a0e6 <ull_calcbandwidthadj+0x3e>
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7ff faf8 	bl	80096ec <ull_disable_rftx_blocks>
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7ff fafe 	bl	8009700 <ull_disable_rf_tx>
 800a104:	2105      	movs	r1, #5
 800a106:	4620      	mov	r0, r4
 800a108:	f7ff f974 	bl	80093f4 <ull_force_clocks>
 800a10c:	2200      	movs	r2, #0
 800a10e:	4906      	ldr	r1, [pc, #24]	; (800a128 <ull_calcbandwidthadj+0x80>)
 800a110:	4620      	mov	r0, r4
 800a112:	f7fe fd6e 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800a116:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a11a:	b002      	add	sp, #8
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
 800a11e:	bf00      	nop
 800a120:	0008001c 	.word	0x0008001c
 800a124:	00080010 	.word	0x00080010
 800a128:	0007001c 	.word	0x0007001c

0800a12c <ull_configuretxrf>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4605      	mov	r5, r0
 800a130:	460c      	mov	r4, r1
 800a132:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800a136:	b149      	cbz	r1, 800a14c <ull_configuretxrf+0x20>
 800a138:	f7ff ffb6 	bl	800a0a8 <ull_calcbandwidthadj>
 800a13c:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800a140:	2200      	movs	r2, #0
 800a142:	4905      	ldr	r1, [pc, #20]	; (800a158 <ull_configuretxrf+0x2c>)
 800a144:	4628      	mov	r0, r5
 800a146:	f7ff f9a1 	bl	800948c <dwt_write32bitoffsetreg>
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	7823      	ldrb	r3, [r4, #0]
 800a14e:	2200      	movs	r2, #0
 800a150:	4902      	ldr	r1, [pc, #8]	; (800a15c <ull_configuretxrf+0x30>)
 800a152:	f7ff fb29 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a156:	e7f1      	b.n	800a13c <ull_configuretxrf+0x10>
 800a158:	00010004 	.word	0x00010004
 800a15c:	0007001c 	.word	0x0007001c

0800a160 <ull_repeated_frames>:
 800a160:	b530      	push	{r4, r5, lr}
 800a162:	b083      	sub	sp, #12
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	2310      	movs	r3, #16
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	23ff      	movs	r3, #255	; 0xff
 800a16e:	2200      	movs	r2, #0
 800a170:	4906      	ldr	r1, [pc, #24]	; (800a18c <ull_repeated_frames+0x2c>)
 800a172:	f7ff ff4f 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a176:	462b      	mov	r3, r5
 800a178:	2d02      	cmp	r5, #2
 800a17a:	bf38      	it	cc
 800a17c:	2302      	movcc	r3, #2
 800a17e:	2200      	movs	r2, #0
 800a180:	2128      	movs	r1, #40	; 0x28
 800a182:	4620      	mov	r0, r4
 800a184:	f7ff f982 	bl	800948c <dwt_write32bitoffsetreg>
 800a188:	b003      	add	sp, #12
 800a18a:	bd30      	pop	{r4, r5, pc}
 800a18c:	000f0028 	.word	0x000f0028

0800a190 <ull_setdwstate>:
 800a190:	b530      	push	{r4, r5, lr}
 800a192:	b083      	sub	sp, #12
 800a194:	4604      	mov	r4, r0
 800a196:	2901      	cmp	r1, #1
 800a198:	d01d      	beq.n	800a1d6 <ull_setdwstate+0x46>
 800a19a:	2902      	cmp	r1, #2
 800a19c:	d02f      	beq.n	800a1fe <ull_setdwstate+0x6e>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	23ff      	movs	r3, #255	; 0xff
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4925      	ldr	r1, [pc, #148]	; (800a23c <ull_setdwstate+0xac>)
 800a1a8:	f7ff ff34 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a1ac:	4d24      	ldr	r5, [pc, #144]	; (800a240 <ull_setdwstate+0xb0>)
 800a1ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7ff fdb7 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	237f      	movs	r3, #127	; 0x7f
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f7ff ff21 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a1d2:	b003      	add	sp, #12
 800a1d4:	bd30      	pop	{r4, r5, pc}
 800a1d6:	2105      	movs	r1, #5
 800a1d8:	f7ff f90c 	bl	80093f4 <ull_force_clocks>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4917      	ldr	r1, [pc, #92]	; (800a244 <ull_setdwstate+0xb4>)
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f7ff fda1 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	9200      	str	r2, [sp, #0]
 800a1f2:	23ff      	movs	r3, #255	; 0xff
 800a1f4:	4912      	ldr	r1, [pc, #72]	; (800a240 <ull_setdwstate+0xb0>)
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff ff0c 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a1fc:	e7e9      	b.n	800a1d2 <ull_setdwstate+0x42>
 800a1fe:	2303      	movs	r3, #3
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	23ff      	movs	r3, #255	; 0xff
 800a204:	2200      	movs	r2, #0
 800a206:	490d      	ldr	r1, [pc, #52]	; (800a23c <ull_setdwstate+0xac>)
 800a208:	f7ff ff04 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a20c:	4d0c      	ldr	r5, [pc, #48]	; (800a240 <ull_setdwstate+0xb0>)
 800a20e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a218:	2200      	movs	r2, #0
 800a21a:	4629      	mov	r1, r5
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7ff fd87 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a222:	2300      	movs	r3, #0
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	237f      	movs	r3, #127	; 0x7f
 800a228:	2202      	movs	r2, #2
 800a22a:	4629      	mov	r1, r5
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7ff fef1 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a232:	2105      	movs	r1, #5
 800a234:	4620      	mov	r0, r4
 800a236:	f7ff f8dd 	bl	80093f4 <ull_force_clocks>
 800a23a:	e7ca      	b.n	800a1d2 <ull_setdwstate+0x42>
 800a23c:	00110004 	.word	0x00110004
 800a240:	00110008 	.word	0x00110008
 800a244:	00090008 	.word	0x00090008

0800a248 <ull_configureframefilter>:
 800a248:	b530      	push	{r4, r5, lr}
 800a24a:	b083      	sub	sp, #12
 800a24c:	4605      	mov	r5, r0
 800a24e:	2902      	cmp	r1, #2
 800a250:	d00e      	beq.n	800a270 <ull_configureframefilter+0x28>
 800a252:	2400      	movs	r4, #0
 800a254:	9400      	str	r4, [sp, #0]
 800a256:	23fe      	movs	r3, #254	; 0xfe
 800a258:	4622      	mov	r2, r4
 800a25a:	2110      	movs	r1, #16
 800a25c:	f7ff feda 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a260:	4623      	mov	r3, r4
 800a262:	4622      	mov	r2, r4
 800a264:	2114      	movs	r1, #20
 800a266:	4628      	mov	r0, r5
 800a268:	f7ff f8b3 	bl	80093d2 <dwt_write16bitoffsetreg>
 800a26c:	b003      	add	sp, #12
 800a26e:	bd30      	pop	{r4, r5, pc}
 800a270:	4614      	mov	r4, r2
 800a272:	2301      	movs	r3, #1
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	23ff      	movs	r3, #255	; 0xff
 800a278:	2200      	movs	r2, #0
 800a27a:	2110      	movs	r1, #16
 800a27c:	f7ff feca 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a280:	4623      	mov	r3, r4
 800a282:	2200      	movs	r2, #0
 800a284:	2114      	movs	r1, #20
 800a286:	4628      	mov	r0, r5
 800a288:	f7ff f8a3 	bl	80093d2 <dwt_write16bitoffsetreg>
 800a28c:	e7ee      	b.n	800a26c <ull_configureframefilter+0x24>
	...

0800a290 <ull_run_pgfcal>:
 800a290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	4605      	mov	r5, r0
 800a298:	4c29      	ldr	r4, [pc, #164]	; (800a340 <ull_run_pgfcal+0xb0>)
 800a29a:	4b2a      	ldr	r3, [pc, #168]	; (800a344 <ull_run_pgfcal+0xb4>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	4621      	mov	r1, r4
 800a2a0:	f7ff f8f4 	bl	800948c <dwt_write32bitoffsetreg>
 800a2a4:	2310      	movs	r3, #16
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	23ff      	movs	r3, #255	; 0xff
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f7ff feb0 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a2b4:	2403      	movs	r4, #3
 800a2b6:	f04f 0814 	mov.w	r8, #20
 800a2ba:	4f23      	ldr	r7, [pc, #140]	; (800a348 <ull_run_pgfcal+0xb8>)
 800a2bc:	2600      	movs	r6, #0
 800a2be:	4640      	mov	r0, r8
 800a2c0:	f7f6 facf 	bl	8000862 <deca_usleep>
 800a2c4:	4632      	mov	r2, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f7fe fc92 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800a2ce:	2801      	cmp	r0, #1
 800a2d0:	d034      	beq.n	800a33c <ull_run_pgfcal+0xac>
 800a2d2:	1e63      	subs	r3, r4, #1
 800a2d4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a2d8:	d1f1      	bne.n	800a2be <ull_run_pgfcal+0x2e>
 800a2da:	f06f 0402 	mvn.w	r4, #2
 800a2de:	4e18      	ldr	r6, [pc, #96]	; (800a340 <ull_run_pgfcal+0xb0>)
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f7ff fa5e 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	4915      	ldr	r1, [pc, #84]	; (800a348 <ull_run_pgfcal+0xb8>)
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f7ff fa58 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	23ff      	movs	r3, #255	; 0xff
 800a2fe:	2202      	movs	r2, #2
 800a300:	4631      	mov	r1, r6
 800a302:	4628      	mov	r0, r5
 800a304:	f7ff fe86 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a308:	2200      	movs	r2, #0
 800a30a:	4910      	ldr	r1, [pc, #64]	; (800a34c <ull_run_pgfcal+0xbc>)
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7fe fc48 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800a312:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a316:	4298      	cmp	r0, r3
 800a318:	bf08      	it	eq
 800a31a:	f06f 0403 	mvneq.w	r4, #3
 800a31e:	2200      	movs	r2, #0
 800a320:	490b      	ldr	r1, [pc, #44]	; (800a350 <ull_run_pgfcal+0xc0>)
 800a322:	4628      	mov	r0, r5
 800a324:	f7fe fc3d 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800a328:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a32c:	4298      	cmp	r0, r3
 800a32e:	bf14      	ite	ne
 800a330:	4620      	movne	r0, r4
 800a332:	f06f 0004 	mvneq.w	r0, #4
 800a336:	b002      	add	sp, #8
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	2400      	movs	r4, #0
 800a33e:	e7ce      	b.n	800a2de <ull_run_pgfcal+0x4e>
 800a340:	0004000c 	.word	0x0004000c
 800a344:	00020001 	.word	0x00020001
 800a348:	00040020 	.word	0x00040020
 800a34c:	00040014 	.word	0x00040014
 800a350:	0004001c 	.word	0x0004001c

0800a354 <ull_setinterrupt>:
 800a354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a358:	b083      	sub	sp, #12
 800a35a:	4605      	mov	r5, r0
 800a35c:	4688      	mov	r8, r1
 800a35e:	4617      	mov	r7, r2
 800a360:	461c      	mov	r4, r3
 800a362:	f7f6 fa55 	bl	8000810 <decamutexon>
 800a366:	4606      	mov	r6, r0
 800a368:	2c02      	cmp	r4, #2
 800a36a:	d019      	beq.n	800a3a0 <ull_setinterrupt+0x4c>
 800a36c:	2c04      	cmp	r4, #4
 800a36e:	d017      	beq.n	800a3a0 <ull_setinterrupt+0x4c>
 800a370:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800a374:	2b01      	cmp	r3, #1
 800a376:	d03f      	beq.n	800a3f8 <ull_setinterrupt+0xa4>
 800a378:	f04f 0900 	mov.w	r9, #0
 800a37c:	f8cd 9000 	str.w	r9, [sp]
 800a380:	ea6f 0308 	mvn.w	r3, r8
 800a384:	464a      	mov	r2, r9
 800a386:	213c      	movs	r1, #60	; 0x3c
 800a388:	4628      	mov	r0, r5
 800a38a:	f7ff fcd1 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a38e:	f8cd 9000 	str.w	r9, [sp]
 800a392:	43fb      	mvns	r3, r7
 800a394:	464a      	mov	r2, r9
 800a396:	2140      	movs	r1, #64	; 0x40
 800a398:	4628      	mov	r0, r5
 800a39a:	f7ff fcc9 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a39e:	e00b      	b.n	800a3b8 <ull_setinterrupt+0x64>
 800a3a0:	4643      	mov	r3, r8
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	213c      	movs	r1, #60	; 0x3c
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f7ff f870 	bl	800948c <dwt_write32bitoffsetreg>
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2140      	movs	r1, #64	; 0x40
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f7ff f86a 	bl	800948c <dwt_write32bitoffsetreg>
 800a3b8:	3c03      	subs	r4, #3
 800a3ba:	b2e4      	uxtb	r4, r4
 800a3bc:	2c01      	cmp	r4, #1
 800a3be:	d92d      	bls.n	800a41c <ull_setinterrupt+0xc8>
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	213c      	movs	r1, #60	; 0x3c
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f7fe fbec 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2144      	movs	r1, #68	; 0x44
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f7ff f85b 	bl	800948c <dwt_write32bitoffsetreg>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2140      	movs	r1, #64	; 0x40
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f7fe fbe1 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2148      	movs	r1, #72	; 0x48
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	f7ff f850 	bl	800948c <dwt_write32bitoffsetreg>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7f6 fa20 	bl	8000832 <decamutexoff>
 800a3f2:	b003      	add	sp, #12
 800a3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3f8:	f8cd 8000 	str.w	r8, [sp]
 800a3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a400:	2200      	movs	r2, #0
 800a402:	213c      	movs	r1, #60	; 0x3c
 800a404:	4628      	mov	r0, r5
 800a406:	f7ff fc93 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a40a:	9700      	str	r7, [sp, #0]
 800a40c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a410:	2200      	movs	r2, #0
 800a412:	2140      	movs	r1, #64	; 0x40
 800a414:	4628      	mov	r0, r5
 800a416:	f7ff fc8b 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a41a:	e7cd      	b.n	800a3b8 <ull_setinterrupt+0x64>
 800a41c:	2110      	movs	r1, #16
 800a41e:	9100      	str	r1, [sp, #0]
 800a420:	23ff      	movs	r3, #255	; 0xff
 800a422:	2202      	movs	r2, #2
 800a424:	4628      	mov	r0, r5
 800a426:	f7ff fdf5 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a42a:	e7c9      	b.n	800a3c0 <ull_setinterrupt+0x6c>

0800a42c <prs_ack_enable>:
 800a42c:	b500      	push	{lr}
 800a42e:	b083      	sub	sp, #12
 800a430:	2900      	cmp	r1, #0
 800a432:	bf0b      	itete	eq
 800a434:	23ff      	moveq	r3, #255	; 0xff
 800a436:	23f7      	movne	r3, #247	; 0xf7
 800a438:	2200      	moveq	r2, #0
 800a43a:	2208      	movne	r2, #8
 800a43c:	9200      	str	r2, [sp, #0]
 800a43e:	2201      	movs	r2, #1
 800a440:	2110      	movs	r1, #16
 800a442:	f7ff fde7 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a446:	b003      	add	sp, #12
 800a448:	f85d fb04 	ldr.w	pc, [sp], #4

0800a44c <dwt_modify16bitoffsetreg>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800a454:	f88d 300c 	strb.w	r3, [sp, #12]
 800a458:	0a1b      	lsrs	r3, r3, #8
 800a45a:	f88d 300d 	strb.w	r3, [sp, #13]
 800a45e:	f88d 400e 	strb.w	r4, [sp, #14]
 800a462:	0a24      	lsrs	r4, r4, #8
 800a464:	f88d 400f 	strb.w	r4, [sp, #15]
 800a468:	f248 0302 	movw	r3, #32770	; 0x8002
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	2304      	movs	r3, #4
 800a474:	b292      	uxth	r2, r2
 800a476:	f7fe fb0c 	bl	8008a92 <dwt_xfer3xxx>
 800a47a:	b004      	add	sp, #16
 800a47c:	bd10      	pop	{r4, pc}
	...

0800a480 <ull_setleds>:
 800a480:	b530      	push	{r4, r5, lr}
 800a482:	b083      	sub	sp, #12
 800a484:	4604      	mov	r4, r0
 800a486:	f011 0f01 	tst.w	r1, #1
 800a48a:	d01f      	beq.n	800a4cc <ull_setleds+0x4c>
 800a48c:	460d      	mov	r5, r1
 800a48e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a498:	2200      	movs	r2, #0
 800a49a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a49e:	f7ff fc47 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a4a2:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4918      	ldr	r1, [pc, #96]	; (800a510 <ull_setleds+0x90>)
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7ff fc3d 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a4b6:	f015 0f02 	tst.w	r5, #2
 800a4ba:	d11a      	bne.n	800a4f2 <ull_setleds+0x72>
 800a4bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4914      	ldr	r1, [pc, #80]	; (800a514 <ull_setleds+0x94>)
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7fe ffe1 	bl	800948c <dwt_write32bitoffsetreg>
 800a4ca:	e010      	b.n	800a4ee <ull_setleds+0x6e>
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	9500      	str	r5, [sp, #0]
 800a4d0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a4da:	f7ff fc29 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a4de:	9500      	str	r5, [sp, #0]
 800a4e0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800a4e4:	462a      	mov	r2, r5
 800a4e6:	490b      	ldr	r1, [pc, #44]	; (800a514 <ull_setleds+0x94>)
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7ff ffaf 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a4ee:	b003      	add	sp, #12
 800a4f0:	bd30      	pop	{r4, r5, pc}
 800a4f2:	4d08      	ldr	r5, [pc, #32]	; (800a514 <ull_setleds+0x94>)
 800a4f4:	4b08      	ldr	r3, [pc, #32]	; (800a518 <ull_setleds+0x98>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7fe ffc6 	bl	800948c <dwt_write32bitoffsetreg>
 800a500:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a504:	2200      	movs	r2, #0
 800a506:	4629      	mov	r1, r5
 800a508:	4620      	mov	r0, r4
 800a50a:	f7fe ffbf 	bl	800948c <dwt_write32bitoffsetreg>
 800a50e:	e7ee      	b.n	800a4ee <ull_setleds+0x6e>
 800a510:	00110004 	.word	0x00110004
 800a514:	00110018 	.word	0x00110018
 800a518:	000f0110 	.word	0x000f0110

0800a51c <ull_pgf_cal>:
 800a51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a51e:	b083      	sub	sp, #12
 800a520:	4604      	mov	r4, r0
 800a522:	2901      	cmp	r1, #1
 800a524:	d009      	beq.n	800a53a <ull_pgf_cal+0x1e>
 800a526:	2014      	movs	r0, #20
 800a528:	f7f6 f99b 	bl	8000862 <deca_usleep>
 800a52c:	4620      	mov	r0, r4
 800a52e:	f7ff feaf 	bl	800a290 <ull_run_pgfcal>
 800a532:	4605      	mov	r5, r0
 800a534:	4628      	mov	r0, r5
 800a536:	b003      	add	sp, #12
 800a538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53a:	4e0f      	ldr	r6, [pc, #60]	; (800a578 <ull_pgf_cal+0x5c>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	4631      	mov	r1, r6
 800a540:	f7fe fb45 	bl	8008bce <dwt_read16bitoffsetreg>
 800a544:	4607      	mov	r7, r0
 800a546:	f240 1307 	movw	r3, #263	; 0x107
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a550:	2200      	movs	r2, #0
 800a552:	4631      	mov	r1, r6
 800a554:	4620      	mov	r0, r4
 800a556:	f7ff ff79 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a55a:	2014      	movs	r0, #20
 800a55c:	f7f6 f981 	bl	8000862 <deca_usleep>
 800a560:	4620      	mov	r0, r4
 800a562:	f7ff fe95 	bl	800a290 <ull_run_pgfcal>
 800a566:	4605      	mov	r5, r0
 800a568:	2200      	movs	r2, #0
 800a56a:	9200      	str	r2, [sp, #0]
 800a56c:	463b      	mov	r3, r7
 800a56e:	4631      	mov	r1, r6
 800a570:	4620      	mov	r0, r4
 800a572:	f7ff ff6b 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a576:	e7dd      	b.n	800a534 <ull_pgf_cal+0x18>
 800a578:	00070048 	.word	0x00070048

0800a57c <ull_setgpiovalue>:
 800a57c:	b500      	push	{lr}
 800a57e:	b083      	sub	sp, #12
 800a580:	2a01      	cmp	r2, #1
 800a582:	d009      	beq.n	800a598 <ull_setgpiovalue+0x1c>
 800a584:	43cb      	mvns	r3, r1
 800a586:	2200      	movs	r2, #0
 800a588:	9200      	str	r2, [sp, #0]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4906      	ldr	r1, [pc, #24]	; (800a5a8 <ull_setgpiovalue+0x2c>)
 800a58e:	f7ff ff5d 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a592:	b003      	add	sp, #12
 800a594:	f85d fb04 	ldr.w	pc, [sp], #4
 800a598:	9100      	str	r1, [sp, #0]
 800a59a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a59e:	2200      	movs	r2, #0
 800a5a0:	4901      	ldr	r1, [pc, #4]	; (800a5a8 <ull_setgpiovalue+0x2c>)
 800a5a2:	f7ff ff53 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a5a6:	e7f4      	b.n	800a592 <ull_setgpiovalue+0x16>
 800a5a8:	0005000c 	.word	0x0005000c

0800a5ac <ull_readaccdata>:
 800a5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460f      	mov	r7, r1
 800a5b4:	4616      	mov	r6, r2
 800a5b6:	461d      	mov	r5, r3
 800a5b8:	f248 0340 	movw	r3, #32832	; 0x8040
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	4918      	ldr	r1, [pc, #96]	; (800a628 <ull_readaccdata+0x7c>)
 800a5c6:	f7ff ff41 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a5ca:	19aa      	adds	r2, r5, r6
 800a5cc:	f243 0301 	movw	r3, #12289	; 0x3001
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	dc15      	bgt.n	800a600 <ull_readaccdata+0x54>
 800a5d4:	2d7f      	cmp	r5, #127	; 0x7f
 800a5d6:	d91d      	bls.n	800a614 <ull_readaccdata+0x68>
 800a5d8:	2315      	movs	r3, #21
 800a5da:	2200      	movs	r2, #0
 800a5dc:	4913      	ldr	r1, [pc, #76]	; (800a62c <ull_readaccdata+0x80>)
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f7fe ff54 	bl	800948c <dwt_write32bitoffsetreg>
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	4911      	ldr	r1, [pc, #68]	; (800a630 <ull_readaccdata+0x84>)
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f7fe ff4e 	bl	800948c <dwt_write32bitoffsetreg>
 800a5f0:	9700      	str	r7, [sp, #0]
 800a5f2:	4633      	mov	r3, r6
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f7fe fac7 	bl	8008b8e <dwt_readfromdevice>
 800a600:	2200      	movs	r2, #0
 800a602:	9200      	str	r2, [sp, #0]
 800a604:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800a608:	4907      	ldr	r1, [pc, #28]	; (800a628 <ull_readaccdata+0x7c>)
 800a60a:	4620      	mov	r0, r4
 800a60c:	f7ff ff1e 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a610:	b003      	add	sp, #12
 800a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a614:	9700      	str	r7, [sp, #0]
 800a616:	4633      	mov	r3, r6
 800a618:	462a      	mov	r2, r5
 800a61a:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800a61e:	4620      	mov	r0, r4
 800a620:	f7fe fab5 	bl	8008b8e <dwt_readfromdevice>
 800a624:	e7ec      	b.n	800a600 <ull_readaccdata+0x54>
 800a626:	bf00      	nop
 800a628:	00110004 	.word	0x00110004
 800a62c:	001f0004 	.word	0x001f0004
 800a630:	001f0008 	.word	0x001f0008

0800a634 <ull_repeated_cw>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	4606      	mov	r6, r0
 800a638:	460c      	mov	r4, r1
 800a63a:	4615      	mov	r5, r2
 800a63c:	4b0e      	ldr	r3, [pc, #56]	; (800a678 <ull_repeated_cw+0x44>)
 800a63e:	2202      	movs	r2, #2
 800a640:	490e      	ldr	r1, [pc, #56]	; (800a67c <ull_repeated_cw+0x48>)
 800a642:	f7fe ff23 	bl	800948c <dwt_write32bitoffsetreg>
 800a646:	2d0f      	cmp	r5, #15
 800a648:	bfa8      	it	ge
 800a64a:	250f      	movge	r5, #15
 800a64c:	1e63      	subs	r3, r4, #1
 800a64e:	2b03      	cmp	r3, #3
 800a650:	bf28      	it	cs
 800a652:	2404      	movcs	r4, #4
 800a654:	2310      	movs	r3, #16
 800a656:	4123      	asrs	r3, r4
 800a658:	2200      	movs	r2, #0
 800a65a:	4909      	ldr	r1, [pc, #36]	; (800a680 <ull_repeated_cw+0x4c>)
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7fe ff15 	bl	800948c <dwt_write32bitoffsetreg>
 800a662:	1e63      	subs	r3, r4, #1
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	fa05 f303 	lsl.w	r3, r5, r3
 800a66a:	2200      	movs	r2, #0
 800a66c:	4905      	ldr	r1, [pc, #20]	; (800a684 <ull_repeated_cw+0x50>)
 800a66e:	4630      	mov	r0, r6
 800a670:	f7fe ff0c 	bl	800948c <dwt_write32bitoffsetreg>
 800a674:	bd70      	pop	{r4, r5, r6, pc}
 800a676:	bf00      	nop
 800a678:	00d20874 	.word	0x00d20874
 800a67c:	00110010 	.word	0x00110010
 800a680:	00070028 	.word	0x00070028
 800a684:	00080018 	.word	0x00080018

0800a688 <ull_configure>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	b083      	sub	sp, #12
 800a68e:	4604      	mov	r4, r0
 800a690:	460d      	mov	r5, r1
 800a692:	f891 9000 	ldrb.w	r9, [r1]
 800a696:	790b      	ldrb	r3, [r1, #4]
 800a698:	2b18      	cmp	r3, #24
 800a69a:	d814      	bhi.n	800a6c6 <ull_configure+0x3e>
 800a69c:	78cf      	ldrb	r7, [r1, #3]
 800a69e:	2f18      	cmp	r7, #24
 800a6a0:	bf94      	ite	ls
 800a6a2:	2700      	movls	r7, #0
 800a6a4:	2701      	movhi	r7, #1
 800a6a6:	b2ff      	uxtb	r7, r7
 800a6a8:	79eb      	ldrb	r3, [r5, #7]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	bf0c      	ite	eq
 800a6ae:	2110      	moveq	r1, #16
 800a6b0:	2100      	movne	r1, #0
 800a6b2:	786b      	ldrb	r3, [r5, #1]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	2b06      	cmp	r3, #6
 800a6b8:	d810      	bhi.n	800a6dc <ull_configure+0x54>
 800a6ba:	e8df f003 	tbb	[pc, r3]
 800a6be:	0f06      	.short	0x0f06
 800a6c0:	0f0c120f 	.word	0x0f0c120f
 800a6c4:	09          	.byte	0x09
 800a6c5:	00          	.byte	0x00
 800a6c6:	2701      	movs	r7, #1
 800a6c8:	e7ed      	b.n	800a6a6 <ull_configure+0x1e>
 800a6ca:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800a6ce:	e00a      	b.n	800a6e6 <ull_configure+0x5e>
 800a6d0:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800a6d4:	e007      	b.n	800a6e6 <ull_configure+0x5e>
 800a6d6:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800a6da:	e004      	b.n	800a6e6 <ull_configure+0x5e>
 800a6dc:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800a6e0:	e001      	b.n	800a6e6 <ull_configure+0x5e>
 800a6e2:	f04f 0a20 	mov.w	sl, #32
 800a6e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a6e8:	8a13      	ldrh	r3, [r2, #16]
 800a6ea:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a6ee:	8213      	strh	r3, [r2, #16]
 800a6f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a6f2:	79ea      	ldrb	r2, [r5, #7]
 800a6f4:	72da      	strb	r2, [r3, #11]
 800a6f6:	7b2e      	ldrb	r6, [r5, #12]
 800a6f8:	1cb3      	adds	r3, r6, #2
 800a6fa:	2601      	movs	r6, #1
 800a6fc:	409e      	lsls	r6, r3
 800a6fe:	fa1f f886 	uxth.w	r8, r6
 800a702:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a704:	4bca      	ldr	r3, [pc, #808]	; (800aa30 <ull_configure+0x3a8>)
 800a706:	fb03 f308 	mul.w	r3, r3, r8
 800a70a:	0bdb      	lsrs	r3, r3, #15
 800a70c:	8253      	strh	r3, [r2, #18]
 800a70e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a710:	7aea      	ldrb	r2, [r5, #11]
 800a712:	755a      	strb	r2, [r3, #21]
 800a714:	7a2b      	ldrb	r3, [r5, #8]
 800a716:	015b      	lsls	r3, r3, #5
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	7b6a      	ldrb	r2, [r5, #13]
 800a71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a722:	7aea      	ldrb	r2, [r5, #11]
 800a724:	0312      	lsls	r2, r2, #12
 800a726:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800a72a:	4313      	orrs	r3, r2
 800a72c:	430b      	orrs	r3, r1
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	4bc0      	ldr	r3, [pc, #768]	; (800aa34 <ull_configure+0x3ac>)
 800a732:	2200      	movs	r2, #0
 800a734:	2110      	movs	r1, #16
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff fafa 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a73c:	2f00      	cmp	r7, #0
 800a73e:	f040 80fc 	bne.w	800a93a <ull_configure+0x2b2>
 800a742:	7aeb      	ldrb	r3, [r5, #11]
 800a744:	b1f3      	cbz	r3, 800a784 <ull_configure+0xfc>
 800a746:	7b6b      	ldrb	r3, [r5, #13]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	f240 8121 	bls.w	800a990 <ull_configure+0x308>
 800a74e:	7b2a      	ldrb	r2, [r5, #12]
 800a750:	4bb9      	ldr	r3, [pc, #740]	; (800aa38 <ull_configure+0x3b0>)
 800a752:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a756:	0112      	lsls	r2, r2, #4
 800a758:	0ad3      	lsrs	r3, r2, #11
 800a75a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800a75e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a762:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a766:	bf28      	it	cs
 800a768:	3301      	addcs	r3, #1
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800a770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a77a:	2202      	movs	r2, #2
 800a77c:	49af      	ldr	r1, [pc, #700]	; (800aa3c <ull_configure+0x3b4>)
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff fe64 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a784:	2394      	movs	r3, #148	; 0x94
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	4bad      	ldr	r3, [pc, #692]	; (800aa40 <ull_configure+0x3b8>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	49ad      	ldr	r1, [pc, #692]	; (800aa44 <ull_configure+0x3bc>)
 800a78e:	4620      	mov	r0, r4
 800a790:	f7ff face 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a794:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800a798:	f340 810d 	ble.w	800a9b6 <ull_configure+0x32e>
 800a79c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a79e:	8a13      	ldrh	r3, [r2, #16]
 800a7a0:	f043 0320 	orr.w	r3, r3, #32
 800a7a4:	8213      	strh	r3, [r2, #16]
 800a7a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	49a5      	ldr	r1, [pc, #660]	; (800aa48 <ull_configure+0x3c0>)
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f7ff fe49 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a7ba:	7b6b      	ldrb	r3, [r5, #13]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	f000 8105 	beq.w	800a9cc <ull_configure+0x344>
 800a7c2:	78ab      	ldrb	r3, [r5, #2]
 800a7c4:	f043 0310 	orr.w	r3, r3, #16
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	23fc      	movs	r3, #252	; 0xfc
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7ff fc1e 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a7d8:	1e73      	subs	r3, r6, #1
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f7fe ffe0 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a7e8:	786b      	ldrb	r3, [r5, #1]
 800a7ea:	2b07      	cmp	r3, #7
 800a7ec:	bf0c      	ite	eq
 800a7ee:	2308      	moveq	r3, #8
 800a7f0:	2300      	movne	r3, #0
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	2124      	movs	r1, #36	; 0x24
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f7fe ffd6 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a7fc:	7aeb      	ldrb	r3, [r5, #11]
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	2b03      	cmp	r3, #3
 800a804:	bf0c      	ite	eq
 800a806:	4b91      	ldreq	r3, [pc, #580]	; (800aa4c <ull_configure+0x3c4>)
 800a808:	4b91      	ldrne	r3, [pc, #580]	; (800aa50 <ull_configure+0x3c8>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	4991      	ldr	r1, [pc, #580]	; (800aa54 <ull_configure+0x3cc>)
 800a80e:	4620      	mov	r0, r4
 800a810:	f7fe fe3c 	bl	800948c <dwt_write32bitoffsetreg>
 800a814:	2200      	movs	r2, #0
 800a816:	4990      	ldr	r1, [pc, #576]	; (800aa58 <ull_configure+0x3d0>)
 800a818:	4620      	mov	r0, r4
 800a81a:	f7fe f9c2 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800a81e:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800a822:	f020 001f 	bic.w	r0, r0, #31
 800a826:	f1b9 0f09 	cmp.w	r9, #9
 800a82a:	bf08      	it	eq
 800a82c:	f040 0001 	orreq.w	r0, r0, #1
 800a830:	792a      	ldrb	r2, [r5, #4]
 800a832:	0212      	lsls	r2, r2, #8
 800a834:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800a838:	78eb      	ldrb	r3, [r5, #3]
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	431a      	orrs	r2, r3
 800a840:	796b      	ldrb	r3, [r5, #5]
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	f003 0306 	and.w	r3, r3, #6
 800a848:	4313      	orrs	r3, r2
 800a84a:	4303      	orrs	r3, r0
 800a84c:	2200      	movs	r2, #0
 800a84e:	4982      	ldr	r1, [pc, #520]	; (800aa58 <ull_configure+0x3d0>)
 800a850:	4620      	mov	r0, r4
 800a852:	f7fe fe1b 	bl	800948c <dwt_write32bitoffsetreg>
 800a856:	79aa      	ldrb	r2, [r5, #6]
 800a858:	786b      	ldrb	r3, [r5, #1]
 800a85a:	031b      	lsls	r3, r3, #12
 800a85c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800a866:	2200      	movs	r2, #0
 800a868:	2120      	movs	r1, #32
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7ff fa60 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a870:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800a874:	b923      	cbnz	r3, 800a880 <ull_configure+0x1f8>
 800a876:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800a87a:	726b      	strb	r3, [r5, #9]
 800a87c:	2300      	movs	r3, #0
 800a87e:	72ab      	strb	r3, [r5, #10]
 800a880:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800a884:	2202      	movs	r2, #2
 800a886:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7fe fda1 	bl	80093d2 <dwt_write16bitoffsetreg>
 800a890:	2202      	movs	r2, #2
 800a892:	4972      	ldr	r1, [pc, #456]	; (800aa5c <ull_configure+0x3d4>)
 800a894:	4620      	mov	r0, r4
 800a896:	f7fe f9ac 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800a89a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a89c:	7bdb      	ldrb	r3, [r3, #15]
 800a89e:	454b      	cmp	r3, r9
 800a8a0:	f000 809e 	beq.w	800a9e0 <ull_configure+0x358>
 800a8a4:	2803      	cmp	r0, #3
 800a8a6:	f000 809f 	beq.w	800a9e8 <ull_configure+0x360>
 800a8aa:	f1b9 0f09 	cmp.w	r9, #9
 800a8ae:	f000 80a0 	beq.w	800a9f2 <ull_configure+0x36a>
 800a8b2:	4b6b      	ldr	r3, [pc, #428]	; (800aa60 <ull_configure+0x3d8>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	496b      	ldr	r1, [pc, #428]	; (800aa64 <ull_configure+0x3dc>)
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7fe fde7 	bl	800948c <dwt_write32bitoffsetreg>
 800a8be:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7fe fd82 	bl	80093d2 <dwt_write16bitoffsetreg>
 800a8ce:	2314      	movs	r3, #20
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	4965      	ldr	r1, [pc, #404]	; (800aa68 <ull_configure+0x3e0>)
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7fe ff67 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a8da:	230e      	movs	r3, #14
 800a8dc:	2202      	movs	r2, #2
 800a8de:	4963      	ldr	r1, [pc, #396]	; (800aa6c <ull_configure+0x3e4>)
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f7fe ff61 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a8e6:	2381      	movs	r3, #129	; 0x81
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	4961      	ldr	r1, [pc, #388]	; (800aa70 <ull_configure+0x3e8>)
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f7fe ff5b 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2144      	movs	r1, #68	; 0x44
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f7fe ff55 	bl	80097a8 <dwt_write8bitoffsetreg>
 800a8fe:	2101      	movs	r1, #1
 800a900:	4620      	mov	r0, r4
 800a902:	f7ff fc45 	bl	800a190 <ull_setdwstate>
 800a906:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800a90a:	f04f 0814 	mov.w	r8, #20
 800a90e:	2700      	movs	r7, #0
 800a910:	2644      	movs	r6, #68	; 0x44
 800a912:	4640      	mov	r0, r8
 800a914:	f7f5 ffa5 	bl	8000862 <deca_usleep>
 800a918:	463a      	mov	r2, r7
 800a91a:	4631      	mov	r1, r6
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7fe f968 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800a922:	f010 0f02 	tst.w	r0, #2
 800a926:	f040 80b5 	bne.w	800aa94 <ull_configure+0x40c>
 800a92a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a92e:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800a932:	d1ee      	bne.n	800a912 <ull_configure+0x28a>
 800a934:	f06f 0001 	mvn.w	r0, #1
 800a938:	e0de      	b.n	800aaf8 <ull_configure+0x470>
 800a93a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a93c:	8a13      	ldrh	r3, [r2, #16]
 800a93e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a942:	8213      	strh	r3, [r2, #16]
 800a944:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800a94e:	2200      	movs	r2, #0
 800a950:	493d      	ldr	r1, [pc, #244]	; (800aa48 <ull_configure+0x3c0>)
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff f9ec 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a958:	f240 3306 	movw	r3, #774	; 0x306
 800a95c:	2200      	movs	r2, #0
 800a95e:	4945      	ldr	r1, [pc, #276]	; (800aa74 <ull_configure+0x3ec>)
 800a960:	4620      	mov	r0, r4
 800a962:	f7fe fd93 	bl	800948c <dwt_write32bitoffsetreg>
 800a966:	2300      	movs	r3, #0
 800a968:	461a      	mov	r2, r3
 800a96a:	4943      	ldr	r1, [pc, #268]	; (800aa78 <ull_configure+0x3f0>)
 800a96c:	4620      	mov	r0, r4
 800a96e:	f7fe fd8d 	bl	800948c <dwt_write32bitoffsetreg>
 800a972:	4b42      	ldr	r3, [pc, #264]	; (800aa7c <ull_configure+0x3f4>)
 800a974:	2200      	movs	r2, #0
 800a976:	4931      	ldr	r1, [pc, #196]	; (800aa3c <ull_configure+0x3b4>)
 800a978:	4620      	mov	r0, r4
 800a97a:	f7fe fd87 	bl	800948c <dwt_write32bitoffsetreg>
 800a97e:	239d      	movs	r3, #157	; 0x9d
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <ull_configure+0x3b8>)
 800a984:	2200      	movs	r2, #0
 800a986:	492f      	ldr	r1, [pc, #188]	; (800aa44 <ull_configure+0x3bc>)
 800a988:	4620      	mov	r0, r4
 800a98a:	f7ff f9d1 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800a98e:	e714      	b.n	800a7ba <ull_configure+0x132>
 800a990:	7b2a      	ldrb	r2, [r5, #12]
 800a992:	4b29      	ldr	r3, [pc, #164]	; (800aa38 <ull_configure+0x3b0>)
 800a994:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a998:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800a99c:	fb02 f203 	mul.w	r2, r2, r3
 800a9a0:	0c93      	lsrs	r3, r2, #18
 800a9a2:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800a9a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9aa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a9ae:	bf28      	it	cs
 800a9b0:	3301      	addcs	r3, #1
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	e6da      	b.n	800a76c <ull_configure+0xe4>
 800a9b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4921      	ldr	r1, [pc, #132]	; (800aa48 <ull_configure+0x3c0>)
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f7ff fd41 	bl	800a44c <dwt_modify16bitoffsetreg>
 800a9ca:	e6f6      	b.n	800a7ba <ull_configure+0x132>
 800a9cc:	78ab      	ldrb	r3, [r5, #2]
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	23ec      	movs	r3, #236	; 0xec
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f7ff fb1b 	bl	800a014 <dwt_modify8bitoffsetreg>
 800a9de:	e6fb      	b.n	800a7d8 <ull_configure+0x150>
 800a9e0:	2803      	cmp	r0, #3
 800a9e2:	f47f af62 	bne.w	800a8aa <ull_configure+0x222>
 800a9e6:	e058      	b.n	800aa9a <ull_configure+0x412>
 800a9e8:	2102      	movs	r1, #2
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f7ff fbd0 	bl	800a190 <ull_setdwstate>
 800a9f0:	e75b      	b.n	800a8aa <ull_configure+0x222>
 800a9f2:	4b23      	ldr	r3, [pc, #140]	; (800aa80 <ull_configure+0x3f8>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	491b      	ldr	r1, [pc, #108]	; (800aa64 <ull_configure+0x3dc>)
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7fe fd47 	bl	800948c <dwt_write32bitoffsetreg>
 800a9fe:	f640 733c 	movw	r3, #3900	; 0xf3c
 800aa02:	2200      	movs	r2, #0
 800aa04:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f7fe fce2 	bl	80093d2 <dwt_write16bitoffsetreg>
 800aa0e:	e75e      	b.n	800a8ce <ull_configure+0x246>
 800aa10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	490a      	ldr	r1, [pc, #40]	; (800aa48 <ull_configure+0x3c0>)
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f7ff fd14 	bl	800a44c <dwt_modify16bitoffsetreg>
 800aa24:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aa26:	8a13      	ldrh	r3, [r2, #16]
 800aa28:	f043 0308 	orr.w	r3, r3, #8
 800aa2c:	8213      	strh	r3, [r2, #16]
 800aa2e:	e046      	b.n	800aabe <ull_configure+0x436>
 800aa30:	00026668 	.word	0x00026668
 800aa34:	fffc4fcf 	.word	0xfffc4fcf
 800aa38:	08012128 	.word	0x08012128
 800aa3c:	000e0014 	.word	0x000e0014
 800aa40:	bfffff00 	.word	0xbfffff00
 800aa44:	000e0018 	.word	0x000e0018
 800aa48:	000b0008 	.word	0x000b0008
 800aa4c:	af5f35cc 	.word	0xaf5f35cc
 800aa50:	af5f584c 	.word	0xaf5f584c
 800aa54:	0006000c 	.word	0x0006000c
 800aa58:	00010008 	.word	0x00010008
 800aa5c:	000f0030 	.word	0x000f0030
 800aa60:	1c071134 	.word	0x1c071134
 800aa64:	0007001c 	.word	0x0007001c
 800aa68:	00070050 	.word	0x00070050
 800aa6c:	00070018 	.word	0x00070018
 800aa70:	00090008 	.word	0x00090008
 800aa74:	000e000c 	.word	0x000e000c
 800aa78:	000e0010 	.word	0x000e0010
 800aa7c:	000c5a0a 	.word	0x000c5a0a
 800aa80:	1c010034 	.word	0x1c010034
 800aa84:	2200      	movs	r2, #0
 800aa86:	9200      	str	r2, [sp, #0]
 800aa88:	23fe      	movs	r3, #254	; 0xfe
 800aa8a:	491d      	ldr	r1, [pc, #116]	; (800ab00 <ull_configure+0x478>)
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f7ff fac1 	bl	800a014 <dwt_modify8bitoffsetreg>
 800aa92:	e01e      	b.n	800aad2 <ull_configure+0x44a>
 800aa94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa96:	f883 900f 	strb.w	r9, [r3, #15]
 800aa9a:	792b      	ldrb	r3, [r5, #4]
 800aa9c:	3b09      	subs	r3, #9
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b0f      	cmp	r3, #15
 800aaa2:	d8ef      	bhi.n	800aa84 <ull_configure+0x3fc>
 800aaa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aaa6:	7a1b      	ldrb	r3, [r3, #8]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d0b1      	beq.n	800aa10 <ull_configure+0x388>
 800aaac:	4649      	mov	r1, r9
 800aaae:	4620      	mov	r0, r4
 800aab0:	f7fe fda4 	bl	80095fc <ull_configmrxlut>
 800aab4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aab6:	8a13      	ldrh	r3, [r2, #16]
 800aab8:	f023 0308 	bic.w	r3, r3, #8
 800aabc:	8213      	strh	r3, [r2, #16]
 800aabe:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800aac8:	2200      	movs	r2, #0
 800aaca:	490d      	ldr	r1, [pc, #52]	; (800ab00 <ull_configure+0x478>)
 800aacc:	4620      	mov	r0, r4
 800aace:	f7ff fcbd 	bl	800a44c <dwt_modify16bitoffsetreg>
 800aad2:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800aad6:	bfcc      	ite	gt
 800aad8:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800aadc:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800aae6:	2200      	movs	r2, #0
 800aae8:	4906      	ldr	r1, [pc, #24]	; (800ab04 <ull_configure+0x47c>)
 800aaea:	4620      	mov	r0, r4
 800aaec:	f7ff f920 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f7ff fd12 	bl	800a51c <ull_pgf_cal>
 800aaf8:	b003      	add	sp, #12
 800aafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafe:	bf00      	nop
 800ab00:	00030018 	.word	0x00030018
 800ab04:	00060010 	.word	0x00060010

0800ab08 <ull_initialise>:
 800ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	460e      	mov	r6, r1
 800ab10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d051      	beq.n	800abba <ull_initialise+0xb2>
 800ab16:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800ab18:	2300      	movs	r3, #0
 800ab1a:	73a3      	strb	r3, [r4, #14]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	8222      	strh	r2, [r4, #16]
 800ab20:	7523      	strb	r3, [r4, #20]
 800ab22:	7563      	strb	r3, [r4, #21]
 800ab24:	73e3      	strb	r3, [r4, #15]
 800ab26:	7263      	strb	r3, [r4, #9]
 800ab28:	72a3      	strb	r3, [r4, #10]
 800ab2a:	2104      	movs	r1, #4
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7fe fc8b 	bl	8009448 <_dwt_otpread>
 800ab32:	4607      	mov	r7, r0
 800ab34:	2105      	movs	r1, #5
 800ab36:	4628      	mov	r0, r5
 800ab38:	f7fe fc86 	bl	8009448 <_dwt_otpread>
 800ab3c:	b10f      	cbz	r7, 800ab42 <ull_initialise+0x3a>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d140      	bne.n	800abc4 <ull_initialise+0xbc>
 800ab42:	2120      	movs	r1, #32
 800ab44:	4628      	mov	r0, r5
 800ab46:	f7fe fc7f 	bl	8009448 <_dwt_otpread>
 800ab4a:	4b35      	ldr	r3, [pc, #212]	; (800ac20 <ull_initialise+0x118>)
 800ab4c:	4298      	cmp	r0, r3
 800ab4e:	bf0c      	ite	eq
 800ab50:	2301      	moveq	r3, #1
 800ab52:	2300      	movne	r3, #0
 800ab54:	7223      	strb	r3, [r4, #8]
 800ab56:	f016 0f10 	tst.w	r6, #16
 800ab5a:	d142      	bne.n	800abe2 <ull_initialise+0xda>
 800ab5c:	f016 0f20 	tst.w	r6, #32
 800ab60:	d145      	bne.n	800abee <ull_initialise+0xe6>
 800ab62:	f016 0f40 	tst.w	r6, #64	; 0x40
 800ab66:	d148      	bne.n	800abfa <ull_initialise+0xf2>
 800ab68:	f016 0f80 	tst.w	r6, #128	; 0x80
 800ab6c:	d14c      	bne.n	800ac08 <ull_initialise+0x100>
 800ab6e:	7aa3      	ldrb	r3, [r4, #10]
 800ab70:	b90b      	cbnz	r3, 800ab76 <ull_initialise+0x6e>
 800ab72:	2385      	movs	r3, #133	; 0x85
 800ab74:	72a3      	strb	r3, [r4, #10]
 800ab76:	7a63      	ldrb	r3, [r4, #9]
 800ab78:	b90b      	cbnz	r3, 800ab7e <ull_initialise+0x76>
 800ab7a:	2374      	movs	r3, #116	; 0x74
 800ab7c:	7263      	strb	r3, [r4, #9]
 800ab7e:	211f      	movs	r1, #31
 800ab80:	4628      	mov	r0, r5
 800ab82:	f7fe fc61 	bl	8009448 <_dwt_otpread>
 800ab86:	7320      	strb	r0, [r4, #12]
 800ab88:	211e      	movs	r1, #30
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f7fe fc5c 	bl	8009448 <_dwt_otpread>
 800ab90:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800ab94:	bf12      	itee	ne
 800ab96:	7360      	strbne	r0, [r4, #13]
 800ab98:	232e      	moveq	r3, #46	; 0x2e
 800ab9a:	7363      	strbeq	r3, [r4, #13]
 800ab9c:	7b63      	ldrb	r3, [r4, #13]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4920      	ldr	r1, [pc, #128]	; (800ac24 <ull_initialise+0x11c>)
 800aba2:	4628      	mov	r0, r5
 800aba4:	f7fe fe00 	bl	80097a8 <dwt_write8bitoffsetreg>
 800aba8:	2135      	movs	r1, #53	; 0x35
 800abaa:	4628      	mov	r0, r5
 800abac:	f7fe fc4c 	bl	8009448 <_dwt_otpread>
 800abb0:	4603      	mov	r3, r0
 800abb2:	bb78      	cbnz	r0, 800ac14 <ull_initialise+0x10c>
 800abb4:	2000      	movs	r0, #0
 800abb6:	b003      	add	sp, #12
 800abb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abba:	2028      	movs	r0, #40	; 0x28
 800abbc:	f006 ffe0 	bl	8011b80 <malloc>
 800abc0:	6528      	str	r0, [r5, #80]	; 0x50
 800abc2:	e7a8      	b.n	800ab16 <ull_initialise+0xe>
 800abc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abce:	2200      	movs	r2, #0
 800abd0:	4915      	ldr	r1, [pc, #84]	; (800ac28 <ull_initialise+0x120>)
 800abd2:	4628      	mov	r0, r5
 800abd4:	f7ff fc3a 	bl	800a44c <dwt_modify16bitoffsetreg>
 800abd8:	8a23      	ldrh	r3, [r4, #16]
 800abda:	f043 0310 	orr.w	r3, r3, #16
 800abde:	8223      	strh	r3, [r4, #16]
 800abe0:	e7af      	b.n	800ab42 <ull_initialise+0x3a>
 800abe2:	2106      	movs	r1, #6
 800abe4:	4628      	mov	r0, r5
 800abe6:	f7fe fc2f 	bl	8009448 <_dwt_otpread>
 800abea:	6020      	str	r0, [r4, #0]
 800abec:	e7b6      	b.n	800ab5c <ull_initialise+0x54>
 800abee:	2107      	movs	r1, #7
 800abf0:	4628      	mov	r0, r5
 800abf2:	f7fe fc29 	bl	8009448 <_dwt_otpread>
 800abf6:	6060      	str	r0, [r4, #4]
 800abf8:	e7b3      	b.n	800ab62 <ull_initialise+0x5a>
 800abfa:	2108      	movs	r1, #8
 800abfc:	4628      	mov	r0, r5
 800abfe:	f7fe fc23 	bl	8009448 <_dwt_otpread>
 800ac02:	0c00      	lsrs	r0, r0, #16
 800ac04:	7260      	strb	r0, [r4, #9]
 800ac06:	e7af      	b.n	800ab68 <ull_initialise+0x60>
 800ac08:	2109      	movs	r1, #9
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f7fe fc1c 	bl	8009448 <_dwt_otpread>
 800ac10:	72a0      	strb	r0, [r4, #10]
 800ac12:	e7ac      	b.n	800ab6e <ull_initialise+0x66>
 800ac14:	2200      	movs	r2, #0
 800ac16:	4905      	ldr	r1, [pc, #20]	; (800ac2c <ull_initialise+0x124>)
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f7fe fc37 	bl	800948c <dwt_write32bitoffsetreg>
 800ac1e:	e7c9      	b.n	800abb4 <ull_initialise+0xac>
 800ac20:	10000240 	.word	0x10000240
 800ac24:	00090014 	.word	0x00090014
 800ac28:	000b0008 	.word	0x000b0008
 800ac2c:	00090004 	.word	0x00090004

0800ac30 <ull_rxenable>:
 800ac30:	b530      	push	{r4, r5, lr}
 800ac32:	b083      	sub	sp, #12
 800ac34:	4605      	mov	r5, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	b171      	cbz	r1, 800ac58 <ull_rxenable+0x28>
 800ac3a:	f021 0302 	bic.w	r3, r1, #2
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	2b0f      	cmp	r3, #15
 800ac42:	d862      	bhi.n	800ad0a <ull_rxenable+0xda>
 800ac44:	e8df f003 	tbb	[pc, r3]
 800ac48:	24616111 	.word	0x24616111
 800ac4c:	2d616161 	.word	0x2d616161
 800ac50:	61616161 	.word	0x61616161
 800ac54:	3a616161 	.word	0x3a616161
 800ac58:	2102      	movs	r1, #2
 800ac5a:	9101      	str	r1, [sp, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	9200      	str	r2, [sp, #0]
 800ac60:	4613      	mov	r3, r2
 800ac62:	f7fd ff16 	bl	8008a92 <dwt_xfer3xxx>
 800ac66:	4620      	mov	r0, r4
 800ac68:	e010      	b.n	800ac8c <ull_rxenable+0x5c>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	9200      	str	r2, [sp, #0]
 800ac72:	4613      	mov	r3, r2
 800ac74:	2104      	movs	r1, #4
 800ac76:	f7fd ff0c 	bl	8008a92 <dwt_xfer3xxx>
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	2144      	movs	r1, #68	; 0x44
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f7fd ffb7 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800ac84:	f010 0f08 	tst.w	r0, #8
 800ac88:	d125      	bne.n	800acd6 <ull_rxenable+0xa6>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	b003      	add	sp, #12
 800ac8e:	bd30      	pop	{r4, r5, pc}
 800ac90:	2302      	movs	r3, #2
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	9200      	str	r2, [sp, #0]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	210a      	movs	r1, #10
 800ac9c:	f7fd fef9 	bl	8008a92 <dwt_xfer3xxx>
 800aca0:	e7eb      	b.n	800ac7a <ull_rxenable+0x4a>
 800aca2:	2100      	movs	r1, #0
 800aca4:	f7fe fc07 	bl	80094b6 <_dwt_adjust_delaytime>
 800aca8:	2302      	movs	r3, #2
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	9200      	str	r2, [sp, #0]
 800acb0:	4613      	mov	r3, r2
 800acb2:	2108      	movs	r1, #8
 800acb4:	4628      	mov	r0, r5
 800acb6:	f7fd feec 	bl	8008a92 <dwt_xfer3xxx>
 800acba:	e7de      	b.n	800ac7a <ull_rxenable+0x4a>
 800acbc:	2101      	movs	r1, #1
 800acbe:	f7fe fbfa 	bl	80094b6 <_dwt_adjust_delaytime>
 800acc2:	2302      	movs	r3, #2
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	9200      	str	r2, [sp, #0]
 800acca:	4613      	mov	r3, r2
 800accc:	2106      	movs	r1, #6
 800acce:	4628      	mov	r0, r5
 800acd0:	f7fd fedf 	bl	8008a92 <dwt_xfer3xxx>
 800acd4:	e7d1      	b.n	800ac7a <ull_rxenable+0x4a>
 800acd6:	2302      	movs	r3, #2
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	2100      	movs	r1, #0
 800acdc:	9100      	str	r1, [sp, #0]
 800acde:	460b      	mov	r3, r1
 800ace0:	460a      	mov	r2, r1
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7fd fed5 	bl	8008a92 <dwt_xfer3xxx>
 800ace8:	f014 0f02 	tst.w	r4, #2
 800acec:	d002      	beq.n	800acf4 <ull_rxenable+0xc4>
 800acee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acf2:	e7cb      	b.n	800ac8c <ull_rxenable+0x5c>
 800acf4:	2102      	movs	r1, #2
 800acf6:	9101      	str	r1, [sp, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	9200      	str	r2, [sp, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	4628      	mov	r0, r5
 800ad00:	f7fd fec7 	bl	8008a92 <dwt_xfer3xxx>
 800ad04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad08:	e7c0      	b.n	800ac8c <ull_rxenable+0x5c>
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad0e:	e7bd      	b.n	800ac8c <ull_rxenable+0x5c>

0800ad10 <ull_softreset_no_sema_fcmd>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	4606      	mov	r6, r0
 800ad16:	2502      	movs	r5, #2
 800ad18:	9501      	str	r5, [sp, #4]
 800ad1a:	2400      	movs	r4, #0
 800ad1c:	9400      	str	r4, [sp, #0]
 800ad1e:	4623      	mov	r3, r4
 800ad20:	4622      	mov	r2, r4
 800ad22:	2119      	movs	r1, #25
 800ad24:	f7fd feb5 	bl	8008a92 <dwt_xfer3xxx>
 800ad28:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ad2a:	739c      	strb	r4, [r3, #14]
 800ad2c:	821d      	strh	r5, [r3, #16]
 800ad2e:	751c      	strb	r4, [r3, #20]
 800ad30:	755c      	strb	r4, [r3, #21]
 800ad32:	73dc      	strb	r4, [r3, #15]
 800ad34:	b002      	add	sp, #8
 800ad36:	bd70      	pop	{r4, r5, r6, pc}

0800ad38 <ull_softreset_fcmd>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	2502      	movs	r5, #2
 800ad40:	9501      	str	r5, [sp, #4]
 800ad42:	2400      	movs	r4, #0
 800ad44:	9400      	str	r4, [sp, #0]
 800ad46:	4623      	mov	r3, r4
 800ad48:	4622      	mov	r2, r4
 800ad4a:	2118      	movs	r1, #24
 800ad4c:	f7fd fea1 	bl	8008a92 <dwt_xfer3xxx>
 800ad50:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ad52:	739c      	strb	r4, [r3, #14]
 800ad54:	821d      	strh	r5, [r3, #16]
 800ad56:	751c      	strb	r4, [r3, #20]
 800ad58:	755c      	strb	r4, [r3, #21]
 800ad5a:	73dc      	strb	r4, [r3, #15]
 800ad5c:	b002      	add	sp, #8
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}

0800ad60 <dwt_ioctl>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	b091      	sub	sp, #68	; 0x44
 800ad66:	4606      	mov	r6, r0
 800ad68:	4615      	mov	r5, r2
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	299c      	cmp	r1, #156	; 0x9c
 800ad6e:	f200 809f 	bhi.w	800aeb0 <dwt_ioctl+0x150>
 800ad72:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ad76:	0a54      	.short	0x0a54
 800ad78:	00a30a5f 	.word	0x00a30a5f
 800ad7c:	00c000a7 	.word	0x00c000a7
 800ad80:	0192014c 	.word	0x0192014c
 800ad84:	0156016f 	.word	0x0156016f
 800ad88:	01ad01a2 	.word	0x01ad01a2
 800ad8c:	01bd01b5 	.word	0x01bd01b5
 800ad90:	01cd01c5 	.word	0x01cd01c5
 800ad94:	01d901d5 	.word	0x01d901d5
 800ad98:	027201e1 	.word	0x027201e1
 800ad9c:	02850280 	.word	0x02850280
 800ada0:	0294028f 	.word	0x0294028f
 800ada4:	02a20299 	.word	0x02a20299
 800ada8:	02dd02a7 	.word	0x02dd02a7
 800adac:	030502fa 	.word	0x030502fa
 800adb0:	031a0310 	.word	0x031a0310
 800adb4:	03480352 	.word	0x03480352
 800adb8:	0324033e 	.word	0x0324033e
 800adbc:	03810331 	.word	0x03810331
 800adc0:	022f01fc 	.word	0x022f01fc
 800adc4:	0245023d 	.word	0x0245023d
 800adc8:	097d0259 	.word	0x097d0259
 800adcc:	03610982 	.word	0x03610982
 800add0:	03a3039f 	.word	0x03a3039f
 800add4:	03b103ac 	.word	0x03b103ac
 800add8:	03e503db 	.word	0x03e503db
 800addc:	041703ed 	.word	0x041703ed
 800ade0:	042e0423 	.word	0x042e0423
 800ade4:	04390357 	.word	0x04390357
 800ade8:	04540442 	.word	0x04540442
 800adec:	047e046d 	.word	0x047e046d
 800adf0:	04ca04c0 	.word	0x04ca04c0
 800adf4:	04ff04f0 	.word	0x04ff04f0
 800adf8:	0508051a 	.word	0x0508051a
 800adfc:	056a0524 	.word	0x056a0524
 800ae00:	05a20582 	.word	0x05a20582
 800ae04:	05e505d1 	.word	0x05e505d1
 800ae08:	060a05ee 	.word	0x060a05ee
 800ae0c:	074305f7 	.word	0x074305f7
 800ae10:	07d30785 	.word	0x07d30785
 800ae14:	07e407d9 	.word	0x07e407d9
 800ae18:	081d07fd 	.word	0x081d07fd
 800ae1c:	08310827 	.word	0x08310827
 800ae20:	0868085f 	.word	0x0868085f
 800ae24:	0877086e 	.word	0x0877086e
 800ae28:	08910884 	.word	0x08910884
 800ae2c:	08a4089b 	.word	0x08a4089b
 800ae30:	08b808ad 	.word	0x08b808ad
 800ae34:	08c908c3 	.word	0x08c908c3
 800ae38:	08f708ec 	.word	0x08f708ec
 800ae3c:	090d0902 	.word	0x090d0902
 800ae40:	0959094e 	.word	0x0959094e
 800ae44:	09880972 	.word	0x09880972
 800ae48:	0a0709fd 	.word	0x0a0709fd
 800ae4c:	0a670a12 	.word	0x0a670a12
 800ae50:	0a490a1c 	.word	0x0a490a1c
 800ae54:	09c60777 	.word	0x09c60777
 800ae58:	0ad509e7 	.word	0x0ad509e7
 800ae5c:	0a740aca 	.word	0x0a740aca
 800ae60:	0a8a0a7f 	.word	0x0a8a0a7f
 800ae64:	0aa00a95 	.word	0x0aa00a95
 800ae68:	0ab60aab 	.word	0x0ab60aab
 800ae6c:	0cb50abf 	.word	0x0cb50abf
 800ae70:	0d2a0cef 	.word	0x0d2a0cef
 800ae74:	0df90d4d 	.word	0x0df90d4d
 800ae78:	0afd0e0e 	.word	0x0afd0e0e
 800ae7c:	0bf40bc1 	.word	0x0bf40bc1
 800ae80:	0c040bff 	.word	0x0c040bff
 800ae84:	0c140c09 	.word	0x0c140c09
 800ae88:	0c320c27 	.word	0x0c320c27
 800ae8c:	0c5c0c47 	.word	0x0c5c0c47
 800ae90:	009d0c98 	.word	0x009d0c98
 800ae94:	009d009d 	.word	0x009d009d
 800ae98:	009d009d 	.word	0x009d009d
 800ae9c:	009d009d 	.word	0x009d009d
 800aea0:	0d64009d 	.word	0x0d64009d
 800aea4:	0ec20d75 	.word	0x0ec20d75
 800aea8:	0db40dbf 	.word	0x0db40dbf
 800aeac:	0dca0dd3 	.word	0x0dca0dd3
 800aeb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	b011      	add	sp, #68	; 0x44
 800aeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebc:	6843      	ldr	r3, [r0, #4]
 800aebe:	4798      	blx	r3
 800aec0:	2500      	movs	r5, #0
 800aec2:	e7f7      	b.n	800aeb4 <dwt_ioctl+0x154>
 800aec4:	2202      	movs	r2, #2
 800aec6:	49b4      	ldr	r1, [pc, #720]	; (800b198 <dwt_ioctl+0x438>)
 800aec8:	f7fd fe93 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800aecc:	2803      	cmp	r0, #3
 800aece:	d801      	bhi.n	800aed4 <dwt_ioctl+0x174>
 800aed0:	2500      	movs	r5, #0
 800aed2:	e7ef      	b.n	800aeb4 <dwt_ioctl+0x154>
 800aed4:	f7f5 fc9c 	bl	8000810 <decamutexon>
 800aed8:	4604      	mov	r4, r0
 800aeda:	2302      	movs	r3, #2
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	2500      	movs	r5, #0
 800aee0:	9500      	str	r5, [sp, #0]
 800aee2:	462b      	mov	r3, r5
 800aee4:	462a      	mov	r2, r5
 800aee6:	4629      	mov	r1, r5
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7fd fdd2 	bl	8008a92 <dwt_xfer3xxx>
 800aeee:	4620      	mov	r0, r4
 800aef0:	f7f5 fc9f 	bl	8000832 <decamutexoff>
 800aef4:	e7de      	b.n	800aeb4 <dwt_ioctl+0x154>
 800aef6:	2c00      	cmp	r4, #0
 800aef8:	f001 8602 	beq.w	800cb00 <dwt_ioctl+0x1da0>
 800aefc:	7824      	ldrb	r4, [r4, #0]
 800aefe:	f014 0f1d 	tst.w	r4, #29
 800af02:	d061      	beq.n	800afc8 <dwt_ioctl+0x268>
 800af04:	f014 0f01 	tst.w	r4, #1
 800af08:	d023      	beq.n	800af52 <dwt_ioctl+0x1f2>
 800af0a:	f014 0f02 	tst.w	r4, #2
 800af0e:	f04f 0302 	mov.w	r3, #2
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	f04f 0200 	mov.w	r2, #0
 800af18:	9200      	str	r2, [sp, #0]
 800af1a:	4613      	mov	r3, r2
 800af1c:	bf14      	ite	ne
 800af1e:	210d      	movne	r1, #13
 800af20:	2103      	moveq	r1, #3
 800af22:	f7fd fdb6 	bl	8008a92 <dwt_xfer3xxx>
 800af26:	2203      	movs	r2, #3
 800af28:	2144      	movs	r1, #68	; 0x44
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7fd fe61 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800af30:	f010 0f08 	tst.w	r0, #8
 800af34:	bf08      	it	eq
 800af36:	2500      	moveq	r5, #0
 800af38:	d0bc      	beq.n	800aeb4 <dwt_ioctl+0x154>
 800af3a:	2302      	movs	r3, #2
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	2100      	movs	r1, #0
 800af40:	9100      	str	r1, [sp, #0]
 800af42:	460b      	mov	r3, r1
 800af44:	460a      	mov	r2, r1
 800af46:	4630      	mov	r0, r6
 800af48:	f7fd fda3 	bl	8008a92 <dwt_xfer3xxx>
 800af4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800af50:	e7b0      	b.n	800aeb4 <dwt_ioctl+0x154>
 800af52:	f014 0f08 	tst.w	r4, #8
 800af56:	d111      	bne.n	800af7c <dwt_ioctl+0x21c>
 800af58:	f014 0f10 	tst.w	r4, #16
 800af5c:	d121      	bne.n	800afa2 <dwt_ioctl+0x242>
 800af5e:	f014 0f02 	tst.w	r4, #2
 800af62:	f04f 0302 	mov.w	r3, #2
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	f04f 0200 	mov.w	r2, #0
 800af6c:	9200      	str	r2, [sp, #0]
 800af6e:	4613      	mov	r3, r2
 800af70:	bf14      	ite	ne
 800af72:	2110      	movne	r1, #16
 800af74:	2109      	moveq	r1, #9
 800af76:	f7fd fd8c 	bl	8008a92 <dwt_xfer3xxx>
 800af7a:	e7d4      	b.n	800af26 <dwt_ioctl+0x1c6>
 800af7c:	2100      	movs	r1, #0
 800af7e:	f7fe fa9a 	bl	80094b6 <_dwt_adjust_delaytime>
 800af82:	f014 0f02 	tst.w	r4, #2
 800af86:	f04f 0302 	mov.w	r3, #2
 800af8a:	9301      	str	r3, [sp, #4]
 800af8c:	f04f 0200 	mov.w	r2, #0
 800af90:	9200      	str	r2, [sp, #0]
 800af92:	4613      	mov	r3, r2
 800af94:	bf14      	ite	ne
 800af96:	210f      	movne	r1, #15
 800af98:	2107      	moveq	r1, #7
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7fd fd79 	bl	8008a92 <dwt_xfer3xxx>
 800afa0:	e7c1      	b.n	800af26 <dwt_ioctl+0x1c6>
 800afa2:	2101      	movs	r1, #1
 800afa4:	f7fe fa87 	bl	80094b6 <_dwt_adjust_delaytime>
 800afa8:	f014 0f02 	tst.w	r4, #2
 800afac:	f04f 0302 	mov.w	r3, #2
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	9200      	str	r2, [sp, #0]
 800afb8:	4613      	mov	r3, r2
 800afba:	bf14      	ite	ne
 800afbc:	210e      	movne	r1, #14
 800afbe:	2105      	moveq	r1, #5
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7fd fd66 	bl	8008a92 <dwt_xfer3xxx>
 800afc6:	e7ae      	b.n	800af26 <dwt_ioctl+0x1c6>
 800afc8:	f014 0f20 	tst.w	r4, #32
 800afcc:	d00f      	beq.n	800afee <dwt_ioctl+0x28e>
 800afce:	f014 0f02 	tst.w	r4, #2
 800afd2:	f04f 0302 	mov.w	r3, #2
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	f04f 0500 	mov.w	r5, #0
 800afdc:	9500      	str	r5, [sp, #0]
 800afde:	462b      	mov	r3, r5
 800afe0:	462a      	mov	r2, r5
 800afe2:	bf14      	ite	ne
 800afe4:	2111      	movne	r1, #17
 800afe6:	210b      	moveq	r1, #11
 800afe8:	f7fd fd53 	bl	8008a92 <dwt_xfer3xxx>
 800afec:	e762      	b.n	800aeb4 <dwt_ioctl+0x154>
 800afee:	f014 0f02 	tst.w	r4, #2
 800aff2:	f04f 0302 	mov.w	r3, #2
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	f04f 0500 	mov.w	r5, #0
 800affc:	9500      	str	r5, [sp, #0]
 800affe:	462b      	mov	r3, r5
 800b000:	462a      	mov	r2, r5
 800b002:	bf14      	ite	ne
 800b004:	210c      	movne	r1, #12
 800b006:	2101      	moveq	r1, #1
 800b008:	f7fd fd43 	bl	8008a92 <dwt_xfer3xxx>
 800b00c:	e752      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b00e:	2c00      	cmp	r4, #0
 800b010:	f001 8579 	beq.w	800cb06 <dwt_ioctl+0x1da6>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	2200      	movs	r2, #0
 800b018:	2128      	movs	r1, #40	; 0x28
 800b01a:	f7fe fa37 	bl	800948c <dwt_write32bitoffsetreg>
 800b01e:	2500      	movs	r5, #0
 800b020:	e748      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	2200      	movs	r2, #0
 800b026:	495d      	ldr	r1, [pc, #372]	; (800b19c <dwt_ioctl+0x43c>)
 800b028:	f7fe fa30 	bl	800948c <dwt_write32bitoffsetreg>
 800b02c:	6863      	ldr	r3, [r4, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	495b      	ldr	r1, [pc, #364]	; (800b1a0 <dwt_ioctl+0x440>)
 800b032:	4630      	mov	r0, r6
 800b034:	f7fe fa2a 	bl	800948c <dwt_write32bitoffsetreg>
 800b038:	68a3      	ldr	r3, [r4, #8]
 800b03a:	2200      	movs	r2, #0
 800b03c:	4959      	ldr	r1, [pc, #356]	; (800b1a4 <dwt_ioctl+0x444>)
 800b03e:	4630      	mov	r0, r6
 800b040:	f7fe fa24 	bl	800948c <dwt_write32bitoffsetreg>
 800b044:	68e3      	ldr	r3, [r4, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	4957      	ldr	r1, [pc, #348]	; (800b1a8 <dwt_ioctl+0x448>)
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7fe fa1e 	bl	800948c <dwt_write32bitoffsetreg>
 800b050:	2500      	movs	r5, #0
 800b052:	e72f      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b054:	2c00      	cmp	r4, #0
 800b056:	f001 8559 	beq.w	800cb0c <dwt_ioctl+0x1dac>
 800b05a:	8823      	ldrh	r3, [r4, #0]
 800b05c:	6865      	ldr	r5, [r4, #4]
 800b05e:	2d03      	cmp	r5, #3
 800b060:	f201 8557 	bhi.w	800cb12 <dwt_ioctl+0x1db2>
 800b064:	e8df f005 	tbb	[pc, r5]
 800b068:	130d0702 	.word	0x130d0702
 800b06c:	2200      	movs	r2, #0
 800b06e:	494f      	ldr	r1, [pc, #316]	; (800b1ac <dwt_ioctl+0x44c>)
 800b070:	f7fe f9af 	bl	80093d2 <dwt_write16bitoffsetreg>
 800b074:	e71e      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b076:	2202      	movs	r2, #2
 800b078:	494c      	ldr	r1, [pc, #304]	; (800b1ac <dwt_ioctl+0x44c>)
 800b07a:	f7fe f9aa 	bl	80093d2 <dwt_write16bitoffsetreg>
 800b07e:	2500      	movs	r5, #0
 800b080:	e718      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b082:	2200      	movs	r2, #0
 800b084:	494a      	ldr	r1, [pc, #296]	; (800b1b0 <dwt_ioctl+0x450>)
 800b086:	f7fe f9a4 	bl	80093d2 <dwt_write16bitoffsetreg>
 800b08a:	2500      	movs	r5, #0
 800b08c:	e712      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b08e:	2202      	movs	r2, #2
 800b090:	4947      	ldr	r1, [pc, #284]	; (800b1b0 <dwt_ioctl+0x450>)
 800b092:	f7fe f99e 	bl	80093d2 <dwt_write16bitoffsetreg>
 800b096:	2500      	movs	r5, #0
 800b098:	e70c      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	f001 853c 	beq.w	800cb18 <dwt_ioctl+0x1db8>
 800b0a0:	7823      	ldrb	r3, [r4, #0]
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	f003 0306 	and.w	r3, r3, #6
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	f06f 0306 	mvn.w	r3, #6
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4940      	ldr	r1, [pc, #256]	; (800b1b4 <dwt_ioctl+0x454>)
 800b0b2:	f7fe fe3d 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800b0b6:	2500      	movs	r5, #0
 800b0b8:	e6fc      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b0ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	493c      	ldr	r1, [pc, #240]	; (800b1b8 <dwt_ioctl+0x458>)
 800b0c8:	f7fe fe32 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800b0cc:	2500      	movs	r5, #0
 800b0ce:	e6f1      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b0d0:	2c00      	cmp	r4, #0
 800b0d2:	f001 8524 	beq.w	800cb1e <dwt_ioctl+0x1dbe>
 800b0d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b0d8:	7b1b      	ldrb	r3, [r3, #12]
 800b0da:	7023      	strb	r3, [r4, #0]
 800b0dc:	2500      	movs	r5, #0
 800b0de:	e6e9      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b0e0:	2c00      	cmp	r4, #0
 800b0e2:	f001 851f 	beq.w	800cb24 <dwt_ioctl+0x1dc4>
 800b0e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b0e8:	7a5b      	ldrb	r3, [r3, #9]
 800b0ea:	7023      	strb	r3, [r4, #0]
 800b0ec:	2500      	movs	r5, #0
 800b0ee:	e6e1      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b0f0:	2c00      	cmp	r4, #0
 800b0f2:	f001 851a 	beq.w	800cb2a <dwt_ioctl+0x1dca>
 800b0f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b0f8:	7a9b      	ldrb	r3, [r3, #10]
 800b0fa:	7023      	strb	r3, [r4, #0]
 800b0fc:	2500      	movs	r5, #0
 800b0fe:	e6d9      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b100:	2c00      	cmp	r4, #0
 800b102:	f001 8515 	beq.w	800cb30 <dwt_ioctl+0x1dd0>
 800b106:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6023      	str	r3, [r4, #0]
 800b10c:	2500      	movs	r5, #0
 800b10e:	e6d1      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b110:	2c00      	cmp	r4, #0
 800b112:	f001 8510 	beq.w	800cb36 <dwt_ioctl+0x1dd6>
 800b116:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	6023      	str	r3, [r4, #0]
 800b11c:	2500      	movs	r5, #0
 800b11e:	e6c9      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b120:	f7fe fc72 	bl	8009a08 <ull_signal_rx_buff_free>
 800b124:	2500      	movs	r5, #0
 800b126:	e6c5      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b128:	2c00      	cmp	r4, #0
 800b12a:	f001 8507 	beq.w	800cb3c <dwt_ioctl+0x1ddc>
 800b12e:	6821      	ldr	r1, [r4, #0]
 800b130:	f7fe f9e7 	bl	8009502 <ull_setrxaftertxdelay>
 800b134:	2500      	movs	r5, #0
 800b136:	e6bd      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b138:	2c00      	cmp	r4, #0
 800b13a:	f001 8502 	beq.w	800cb42 <dwt_ioctl+0x1de2>
 800b13e:	7825      	ldrb	r5, [r4, #0]
 800b140:	b15d      	cbz	r5, 800b15a <dwt_ioctl+0x3fa>
 800b142:	6864      	ldr	r4, [r4, #4]
 800b144:	2340      	movs	r3, #64	; 0x40
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	23ff      	movs	r3, #255	; 0xff
 800b14a:	2200      	movs	r2, #0
 800b14c:	2110      	movs	r1, #16
 800b14e:	f7fe ff61 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b152:	2d02      	cmp	r5, #2
 800b154:	d107      	bne.n	800b166 <dwt_ioctl+0x406>
 800b156:	60f4      	str	r4, [r6, #12]
 800b158:	e005      	b.n	800b166 <dwt_ioctl+0x406>
 800b15a:	2200      	movs	r2, #0
 800b15c:	9200      	str	r2, [sp, #0]
 800b15e:	23bf      	movs	r3, #191	; 0xbf
 800b160:	2110      	movs	r1, #16
 800b162:	f7fe ff57 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b166:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b168:	751d      	strb	r5, [r3, #20]
 800b16a:	2500      	movs	r5, #0
 800b16c:	e6a2      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b16e:	2c00      	cmp	r4, #0
 800b170:	f001 84ea 	beq.w	800cb48 <dwt_ioctl+0x1de8>
 800b174:	6865      	ldr	r5, [r4, #4]
 800b176:	7823      	ldrb	r3, [r4, #0]
 800b178:	2203      	movs	r2, #3
 800b17a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b17e:	f7fe fb13 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b182:	b9dd      	cbnz	r5, 800b1bc <dwt_ioctl+0x45c>
 800b184:	2200      	movs	r2, #0
 800b186:	9200      	str	r2, [sp, #0]
 800b188:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b18c:	2110      	movs	r1, #16
 800b18e:	4630      	mov	r0, r6
 800b190:	f7ff f95c 	bl	800a44c <dwt_modify16bitoffsetreg>
 800b194:	e68e      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b196:	bf00      	nop
 800b198:	000f0030 	.word	0x000f0030
 800b19c:	00010054 	.word	0x00010054
 800b1a0:	00010058 	.word	0x00010058
 800b1a4:	0001005c 	.word	0x0001005c
 800b1a8:	00010060 	.word	0x00010060
 800b1ac:	0001000c 	.word	0x0001000c
 800b1b0:	00010010 	.word	0x00010010
 800b1b4:	00010008 	.word	0x00010008
 800b1b8:	00110004 	.word	0x00110004
 800b1bc:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2110      	movs	r1, #16
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7fe fdb0 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800b1d0:	2500      	movs	r5, #0
 800b1d2:	e66f      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	f7fd fce3 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800b1dc:	68b2      	ldr	r2, [r6, #8]
 800b1de:	6813      	ldr	r3, [r2, #0]
 800b1e0:	4043      	eors	r3, r0
 800b1e2:	6852      	ldr	r2, [r2, #4]
 800b1e4:	4213      	tst	r3, r2
 800b1e6:	bf14      	ite	ne
 800b1e8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b1ec:	2500      	moveq	r5, #0
 800b1ee:	e661      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b1f0:	2c00      	cmp	r4, #0
 800b1f2:	f001 84ac 	beq.w	800cb4e <dwt_ioctl+0x1dee>
 800b1f6:	7821      	ldrb	r1, [r4, #0]
 800b1f8:	f7fe ff20 	bl	800a03c <ull_configciadiag>
 800b1fc:	2500      	movs	r5, #0
 800b1fe:	e659      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b200:	b93a      	cbnz	r2, 800b212 <dwt_ioctl+0x4b2>
 800b202:	2200      	movs	r2, #0
 800b204:	9200      	str	r2, [sp, #0]
 800b206:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b20a:	49b8      	ldr	r1, [pc, #736]	; (800b4ec <dwt_ioctl+0x78c>)
 800b20c:	f7ff f91e 	bl	800a44c <dwt_modify16bitoffsetreg>
 800b210:	e650      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b212:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b21c:	2200      	movs	r2, #0
 800b21e:	49b3      	ldr	r1, [pc, #716]	; (800b4ec <dwt_ioctl+0x78c>)
 800b220:	f7ff f914 	bl	800a44c <dwt_modify16bitoffsetreg>
 800b224:	2500      	movs	r5, #0
 800b226:	e645      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b228:	f002 0201 	and.w	r2, r2, #1
 800b22c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b230:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800b234:	2a00      	cmp	r2, #0
 800b236:	bf08      	it	eq
 800b238:	460b      	moveq	r3, r1
 800b23a:	02d2      	lsls	r2, r2, #11
 800b23c:	f015 0f02 	tst.w	r5, #2
 800b240:	bf12      	itee	ne
 800b242:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800b246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b24a:	b29b      	uxtheq	r3, r3
 800b24c:	9200      	str	r2, [sp, #0]
 800b24e:	2200      	movs	r2, #0
 800b250:	49a6      	ldr	r1, [pc, #664]	; (800b4ec <dwt_ioctl+0x78c>)
 800b252:	f7ff f8fb 	bl	800a44c <dwt_modify16bitoffsetreg>
 800b256:	2500      	movs	r5, #0
 800b258:	e62c      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b25a:	b92a      	cbnz	r2, 800b268 <dwt_ioctl+0x508>
 800b25c:	4ba4      	ldr	r3, [pc, #656]	; (800b4f0 <dwt_ioctl+0x790>)
 800b25e:	2202      	movs	r2, #2
 800b260:	49a4      	ldr	r1, [pc, #656]	; (800b4f4 <dwt_ioctl+0x794>)
 800b262:	f7fe f913 	bl	800948c <dwt_write32bitoffsetreg>
 800b266:	e625      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b268:	4ba3      	ldr	r3, [pc, #652]	; (800b4f8 <dwt_ioctl+0x798>)
 800b26a:	2202      	movs	r2, #2
 800b26c:	49a1      	ldr	r1, [pc, #644]	; (800b4f4 <dwt_ioctl+0x794>)
 800b26e:	f7fe f90d 	bl	800948c <dwt_write32bitoffsetreg>
 800b272:	2500      	movs	r5, #0
 800b274:	e61e      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b276:	4611      	mov	r1, r2
 800b278:	f7fe f957 	bl	800952a <ull_setlnapamode>
 800b27c:	2500      	movs	r5, #0
 800b27e:	e619      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b280:	2c00      	cmp	r4, #0
 800b282:	f001 8467 	beq.w	800cb54 <dwt_ioctl+0x1df4>
 800b286:	2200      	movs	r2, #0
 800b288:	499c      	ldr	r1, [pc, #624]	; (800b4fc <dwt_ioctl+0x79c>)
 800b28a:	f7fd fcb2 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800b28e:	7020      	strb	r0, [r4, #0]
 800b290:	2500      	movs	r5, #0
 800b292:	e60f      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b294:	4621      	mov	r1, r4
 800b296:	f7fe f969 	bl	800956c <ull_configurestskey>
 800b29a:	2500      	movs	r5, #0
 800b29c:	e60a      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	f7fe f988 	bl	80095b4 <ull_configurestsiv>
 800b2a4:	2500      	movs	r5, #0
 800b2a6:	e605      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	23ff      	movs	r3, #255	; 0xff
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	4993      	ldr	r1, [pc, #588]	; (800b500 <dwt_ioctl+0x7a0>)
 800b2b2:	f7fe feaf 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b2b6:	2500      	movs	r5, #0
 800b2b8:	e5fc      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	f7fe f99e 	bl	80095fc <ull_configmrxlut>
 800b2c0:	2500      	movs	r5, #0
 800b2c2:	e5f7      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b2c4:	2318      	movs	r3, #24
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	498e      	ldr	r1, [pc, #568]	; (800b504 <dwt_ioctl+0x7a4>)
 800b2ca:	f7fe f8df 	bl	800948c <dwt_write32bitoffsetreg>
 800b2ce:	23e8      	movs	r3, #232	; 0xe8
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	498d      	ldr	r1, [pc, #564]	; (800b508 <dwt_ioctl+0x7a8>)
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f7fe f8d9 	bl	800948c <dwt_write32bitoffsetreg>
 800b2da:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b2dc:	7d9b      	ldrb	r3, [r3, #22]
 800b2de:	085b      	lsrs	r3, r3, #1
 800b2e0:	d01a      	beq.n	800b318 <dwt_ioctl+0x5b8>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	4989      	ldr	r1, [pc, #548]	; (800b50c <dwt_ioctl+0x7ac>)
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7fd fc71 	bl	8008bce <dwt_read16bitoffsetreg>
 800b2ec:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800b2f0:	3b09      	subs	r3, #9
 800b2f2:	2b0f      	cmp	r3, #15
 800b2f4:	f201 8431 	bhi.w	800cb5a <dwt_ioctl+0x1dfa>
 800b2f8:	f000 0001 	and.w	r0, r0, #1
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	bf0c      	ite	eq
 800b300:	2105      	moveq	r1, #5
 800b302:	2109      	movne	r1, #9
 800b304:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b306:	7a1b      	ldrb	r3, [r3, #8]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	f001 8429 	beq.w	800cb60 <dwt_ioctl+0x1e00>
 800b30e:	4630      	mov	r0, r6
 800b310:	f7fe f974 	bl	80095fc <ull_configmrxlut>
 800b314:	2500      	movs	r5, #0
 800b316:	e5cd      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b318:	2301      	movs	r3, #1
 800b31a:	2200      	movs	r2, #0
 800b31c:	497c      	ldr	r1, [pc, #496]	; (800b510 <dwt_ioctl+0x7b0>)
 800b31e:	4630      	mov	r0, r6
 800b320:	f7fe fa42 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b324:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800b326:	7d93      	ldrb	r3, [r2, #22]
 800b328:	f043 0302 	orr.w	r3, r3, #2
 800b32c:	7593      	strb	r3, [r2, #22]
 800b32e:	e7d8      	b.n	800b2e2 <dwt_ioctl+0x582>
 800b330:	2c00      	cmp	r4, #0
 800b332:	f001 8418 	beq.w	800cb66 <dwt_ioctl+0x1e06>
 800b336:	7824      	ldrb	r4, [r4, #0]
 800b338:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b33a:	755c      	strb	r4, [r3, #21]
 800b33c:	0323      	lsls	r3, r4, #12
 800b33e:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800b348:	2200      	movs	r2, #0
 800b34a:	2110      	movs	r1, #16
 800b34c:	f7ff f87e 	bl	800a44c <dwt_modify16bitoffsetreg>
 800b350:	f004 0403 	and.w	r4, r4, #3
 800b354:	2c03      	cmp	r4, #3
 800b356:	bf0c      	ite	eq
 800b358:	4b6e      	ldreq	r3, [pc, #440]	; (800b514 <dwt_ioctl+0x7b4>)
 800b35a:	4b6f      	ldrne	r3, [pc, #444]	; (800b518 <dwt_ioctl+0x7b8>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	496f      	ldr	r1, [pc, #444]	; (800b51c <dwt_ioctl+0x7bc>)
 800b360:	4630      	mov	r0, r6
 800b362:	f7fe f893 	bl	800948c <dwt_write32bitoffsetreg>
 800b366:	2500      	movs	r5, #0
 800b368:	e5a4      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b36a:	2c00      	cmp	r4, #0
 800b36c:	f001 83fe 	beq.w	800cb6c <dwt_ioctl+0x1e0c>
 800b370:	8823      	ldrh	r3, [r4, #0]
 800b372:	2200      	movs	r2, #0
 800b374:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b378:	f7fe f82b 	bl	80093d2 <dwt_write16bitoffsetreg>
 800b37c:	2500      	movs	r5, #0
 800b37e:	e599      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b380:	2c00      	cmp	r4, #0
 800b382:	f001 83f6 	beq.w	800cb72 <dwt_ioctl+0x1e12>
 800b386:	2200      	movs	r2, #0
 800b388:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b38c:	f7fd fc1f 	bl	8008bce <dwt_read16bitoffsetreg>
 800b390:	8020      	strh	r0, [r4, #0]
 800b392:	2500      	movs	r5, #0
 800b394:	e58e      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b396:	2c00      	cmp	r4, #0
 800b398:	f001 83ee 	beq.w	800cb78 <dwt_ioctl+0x1e18>
 800b39c:	8823      	ldrh	r3, [r4, #0]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	217c      	movs	r1, #124	; 0x7c
 800b3a2:	f7fe f816 	bl	80093d2 <dwt_write16bitoffsetreg>
 800b3a6:	2500      	movs	r5, #0
 800b3a8:	e584      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b3aa:	2c00      	cmp	r4, #0
 800b3ac:	f001 83e7 	beq.w	800cb7e <dwt_ioctl+0x1e1e>
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	217c      	movs	r1, #124	; 0x7c
 800b3b4:	f7fd fc0b 	bl	8008bce <dwt_read16bitoffsetreg>
 800b3b8:	8020      	strh	r0, [r4, #0]
 800b3ba:	2500      	movs	r5, #0
 800b3bc:	e57a      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b3be:	2c00      	cmp	r4, #0
 800b3c0:	f001 83e0 	beq.w	800cb84 <dwt_ioctl+0x1e24>
 800b3c4:	88a3      	ldrh	r3, [r4, #4]
 800b3c6:	88e2      	ldrh	r2, [r4, #6]
 800b3c8:	6821      	ldr	r1, [r4, #0]
 800b3ca:	9100      	str	r1, [sp, #0]
 800b3cc:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b3d0:	f7fd fff4 	bl	80093bc <dwt_writetodevice>
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	e56d      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b3d8:	2c00      	cmp	r4, #0
 800b3da:	f001 83d6 	beq.w	800cb8a <dwt_ioctl+0x1e2a>
 800b3de:	88a3      	ldrh	r3, [r4, #4]
 800b3e0:	88e2      	ldrh	r2, [r4, #6]
 800b3e2:	6821      	ldr	r1, [r4, #0]
 800b3e4:	9100      	str	r1, [sp, #0]
 800b3e6:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b3ea:	f7fd fbd0 	bl	8008b8e <dwt_readfromdevice>
 800b3ee:	2500      	movs	r5, #0
 800b3f0:	e560      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b3f2:	2c00      	cmp	r4, #0
 800b3f4:	f001 83cc 	beq.w	800cb90 <dwt_ioctl+0x1e30>
 800b3f8:	88e3      	ldrh	r3, [r4, #6]
 800b3fa:	88a2      	ldrh	r2, [r4, #4]
 800b3fc:	6821      	ldr	r1, [r4, #0]
 800b3fe:	f7fe f99d 	bl	800973c <ull_readrxdata>
 800b402:	2500      	movs	r5, #0
 800b404:	e556      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b406:	2c00      	cmp	r4, #0
 800b408:	f001 83c5 	beq.w	800cb96 <dwt_ioctl+0x1e36>
 800b40c:	88e3      	ldrh	r3, [r4, #6]
 800b40e:	6822      	ldr	r2, [r4, #0]
 800b410:	88a1      	ldrh	r1, [r4, #4]
 800b412:	f7fe fac7 	bl	80099a4 <ull_writetxdata>
 800b416:	2500      	movs	r5, #0
 800b418:	e54c      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b41a:	4611      	mov	r1, r2
 800b41c:	f7ff fc08 	bl	800ac30 <ull_rxenable>
 800b420:	2500      	movs	r5, #0
 800b422:	e547      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b424:	2c00      	cmp	r4, #0
 800b426:	f001 83b9 	beq.w	800cb9c <dwt_ioctl+0x1e3c>
 800b42a:	7923      	ldrb	r3, [r4, #4]
 800b42c:	8862      	ldrh	r2, [r4, #2]
 800b42e:	8821      	ldrh	r1, [r4, #0]
 800b430:	f7fe fdbe 	bl	8009fb0 <ull_writetxfctrl>
 800b434:	2500      	movs	r5, #0
 800b436:	e53d      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b438:	2c00      	cmp	r4, #0
 800b43a:	f001 83b2 	beq.w	800cba2 <dwt_ioctl+0x1e42>
 800b43e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b440:	7b9b      	ldrb	r3, [r3, #14]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d00c      	beq.n	800b460 <dwt_ioctl+0x700>
 800b446:	2b03      	cmp	r3, #3
 800b448:	d110      	bne.n	800b46c <dwt_ioctl+0x70c>
 800b44a:	220c      	movs	r2, #12
 800b44c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b450:	f7fd fbbd 	bl	8008bce <dwt_read16bitoffsetreg>
 800b454:	b200      	sxth	r0, r0
 800b456:	f340 030c 	sbfx	r3, r0, #0, #13
 800b45a:	8023      	strh	r3, [r4, #0]
 800b45c:	2500      	movs	r5, #0
 800b45e:	e529      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b460:	2200      	movs	r2, #0
 800b462:	492f      	ldr	r1, [pc, #188]	; (800b520 <dwt_ioctl+0x7c0>)
 800b464:	f7fd fbb3 	bl	8008bce <dwt_read16bitoffsetreg>
 800b468:	b200      	sxth	r0, r0
 800b46a:	e7f4      	b.n	800b456 <dwt_ioctl+0x6f6>
 800b46c:	2200      	movs	r2, #0
 800b46e:	492d      	ldr	r1, [pc, #180]	; (800b524 <dwt_ioctl+0x7c4>)
 800b470:	f7fd fbad 	bl	8008bce <dwt_read16bitoffsetreg>
 800b474:	b200      	sxth	r0, r0
 800b476:	e7ee      	b.n	800b456 <dwt_ioctl+0x6f6>
 800b478:	2c00      	cmp	r4, #0
 800b47a:	f001 8395 	beq.w	800cba8 <dwt_ioctl+0x1e48>
 800b47e:	ab0c      	add	r3, sp, #48	; 0x30
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	2303      	movs	r3, #3
 800b484:	2200      	movs	r2, #0
 800b486:	4928      	ldr	r1, [pc, #160]	; (800b528 <dwt_ioctl+0x7c8>)
 800b488:	f7fd fb81 	bl	8008b8e <dwt_readfromdevice>
 800b48c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800b490:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800b494:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800b498:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b49c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b4a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b4a4:	bf1c      	itt	ne
 800b4a6:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800b4aa:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	2500      	movs	r5, #0
 800b4b2:	e4ff      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b4b4:	f7fe f9d0 	bl	8009858 <ull_clearaonconfig>
 800b4b8:	2500      	movs	r5, #0
 800b4ba:	e4fb      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b4bc:	2c00      	cmp	r4, #0
 800b4be:	f001 8376 	beq.w	800cbae <dwt_ioctl+0x1e4e>
 800b4c2:	8861      	ldrh	r1, [r4, #2]
 800b4c4:	f7fe fdf0 	bl	800a0a8 <ull_calcbandwidthadj>
 800b4c8:	7020      	strb	r0, [r4, #0]
 800b4ca:	2500      	movs	r5, #0
 800b4cc:	e4f2      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	f7fd fb9d 	bl	8008c0e <ull_readdiagnostics>
 800b4d4:	2500      	movs	r5, #0
 800b4d6:	e4ed      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b4d8:	2c00      	cmp	r4, #0
 800b4da:	f001 836b 	beq.w	800cbb4 <dwt_ioctl+0x1e54>
 800b4de:	2201      	movs	r2, #1
 800b4e0:	2170      	movs	r1, #112	; 0x70
 800b4e2:	f7fd fb5e 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800b4e6:	6020      	str	r0, [r4, #0]
 800b4e8:	2500      	movs	r5, #0
 800b4ea:	e4e3      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b4ec:	00110008 	.word	0x00110008
 800b4f0:	00d20874 	.word	0x00d20874
 800b4f4:	00110010 	.word	0x00110010
 800b4f8:	04d28874 	.word	0x04d28874
 800b4fc:	0007001c 	.word	0x0007001c
 800b500:	00020004 	.word	0x00020004
 800b504:	001f000c 	.word	0x001f000c
 800b508:	001f0010 	.word	0x001f0010
 800b50c:	00010008 	.word	0x00010008
 800b510:	00010020 	.word	0x00010020
 800b514:	af5f35cc 	.word	0xaf5f35cc
 800b518:	af5f584c 	.word	0xaf5f584c
 800b51c:	0006000c 	.word	0x0006000c
 800b520:	0018000c 	.word	0x0018000c
 800b524:	000c0020 	.word	0x000c0020
 800b528:	00060029 	.word	0x00060029
 800b52c:	2c00      	cmp	r4, #0
 800b52e:	f001 8344 	beq.w	800cbba <dwt_ioctl+0x1e5a>
 800b532:	2200      	movs	r2, #0
 800b534:	2170      	movs	r1, #112	; 0x70
 800b536:	f7fd fb34 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800b53a:	6020      	str	r0, [r4, #0]
 800b53c:	2500      	movs	r5, #0
 800b53e:	e4b9      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b540:	9400      	str	r4, [sp, #0]
 800b542:	2305      	movs	r3, #5
 800b544:	2200      	movs	r2, #0
 800b546:	2170      	movs	r1, #112	; 0x70
 800b548:	f7fd fb21 	bl	8008b8e <dwt_readfromdevice>
 800b54c:	2500      	movs	r5, #0
 800b54e:	e4b1      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b550:	2c00      	cmp	r4, #0
 800b552:	f001 8335 	beq.w	800cbc0 <dwt_ioctl+0x1e60>
 800b556:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b558:	7b9b      	ldrb	r3, [r3, #14]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d014      	beq.n	800b588 <dwt_ioctl+0x828>
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d119      	bne.n	800b596 <dwt_ioctl+0x836>
 800b562:	2216      	movs	r2, #22
 800b564:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b568:	f7fd fb31 	bl	8008bce <dwt_read16bitoffsetreg>
 800b56c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b570:	b283      	uxth	r3, r0
 800b572:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b576:	d004      	beq.n	800b582 <dwt_ioctl+0x822>
 800b578:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800b57c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800b580:	b218      	sxth	r0, r3
 800b582:	8020      	strh	r0, [r4, #0]
 800b584:	2500      	movs	r5, #0
 800b586:	e495      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b588:	2202      	movs	r2, #2
 800b58a:	49d6      	ldr	r1, [pc, #856]	; (800b8e4 <dwt_ioctl+0xb84>)
 800b58c:	f7fd fb1f 	bl	8008bce <dwt_read16bitoffsetreg>
 800b590:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b594:	e7ec      	b.n	800b570 <dwt_ioctl+0x810>
 800b596:	2202      	movs	r2, #2
 800b598:	49d3      	ldr	r1, [pc, #844]	; (800b8e8 <dwt_ioctl+0xb88>)
 800b59a:	f7fd fb18 	bl	8008bce <dwt_read16bitoffsetreg>
 800b59e:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b5a2:	e7e5      	b.n	800b570 <dwt_ioctl+0x810>
 800b5a4:	9400      	str	r4, [sp, #0]
 800b5a6:	2306      	movs	r3, #6
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	49d0      	ldr	r1, [pc, #832]	; (800b8ec <dwt_ioctl+0xb8c>)
 800b5ac:	f7fd faef 	bl	8008b8e <dwt_readfromdevice>
 800b5b0:	7963      	ldrb	r3, [r4, #5]
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	7163      	strb	r3, [r4, #5]
 800b5b8:	2500      	movs	r5, #0
 800b5ba:	e47b      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	f001 8302 	beq.w	800cbc6 <dwt_ioctl+0x1e66>
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b5c8:	f7fd fb13 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800b5cc:	7020      	strb	r0, [r4, #0]
 800b5ce:	2500      	movs	r5, #0
 800b5d0:	e470      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b5d2:	2c00      	cmp	r4, #0
 800b5d4:	f001 82fa 	beq.w	800cbcc <dwt_ioctl+0x1e6c>
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b5de:	f7fd fb08 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800b5e2:	7020      	strb	r0, [r4, #0]
 800b5e4:	2500      	movs	r5, #0
 800b5e6:	e465      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b5e8:	2c00      	cmp	r4, #0
 800b5ea:	f001 82f2 	beq.w	800cbd2 <dwt_ioctl+0x1e72>
 800b5ee:	88a2      	ldrh	r2, [r4, #4]
 800b5f0:	6821      	ldr	r1, [r4, #0]
 800b5f2:	f7fe fc07 	bl	8009e04 <_dwt_otpprogword32>
 800b5f6:	2500      	movs	r5, #0
 800b5f8:	e45c      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b5fa:	2c00      	cmp	r4, #0
 800b5fc:	f001 82ec 	beq.w	800cbd8 <dwt_ioctl+0x1e78>
 800b600:	6825      	ldr	r5, [r4, #0]
 800b602:	88a4      	ldrh	r4, [r4, #4]
 800b604:	4622      	mov	r2, r4
 800b606:	4629      	mov	r1, r5
 800b608:	f7fe fbfc 	bl	8009e04 <_dwt_otpprogword32>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4630      	mov	r0, r6
 800b610:	f7fd ff1a 	bl	8009448 <_dwt_otpread>
 800b614:	1a2d      	subs	r5, r5, r0
 800b616:	bf18      	it	ne
 800b618:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b61c:	e44a      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b61e:	2a02      	cmp	r2, #2
 800b620:	d00e      	beq.n	800b640 <dwt_ioctl+0x8e0>
 800b622:	4cb3      	ldr	r4, [pc, #716]	; (800b8f0 <dwt_ioctl+0xb90>)
 800b624:	2300      	movs	r3, #0
 800b626:	461a      	mov	r2, r3
 800b628:	4621      	mov	r1, r4
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7fe f8bc 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b630:	2302      	movs	r3, #2
 800b632:	2200      	movs	r2, #0
 800b634:	4621      	mov	r1, r4
 800b636:	4630      	mov	r0, r6
 800b638:	f7fe f8b6 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b63c:	2500      	movs	r5, #0
 800b63e:	e439      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b640:	2300      	movs	r3, #0
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	23fe      	movs	r3, #254	; 0xfe
 800b646:	2201      	movs	r2, #1
 800b648:	49aa      	ldr	r1, [pc, #680]	; (800b8f4 <dwt_ioctl+0xb94>)
 800b64a:	f7fe fce3 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b64e:	e7e8      	b.n	800b622 <dwt_ioctl+0x8c2>
 800b650:	2c00      	cmp	r4, #0
 800b652:	f001 82c4 	beq.w	800cbde <dwt_ioctl+0x1e7e>
 800b656:	8824      	ldrh	r4, [r4, #0]
 800b658:	b2e2      	uxtb	r2, r4
 800b65a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b65e:	f7fe f94f 	bl	8009900 <ull_aon_write>
 800b662:	0a22      	lsrs	r2, r4, #8
 800b664:	f240 1103 	movw	r1, #259	; 0x103
 800b668:	4630      	mov	r0, r6
 800b66a:	f7fe f949 	bl	8009900 <ull_aon_write>
 800b66e:	2500      	movs	r5, #0
 800b670:	e420      	b.n	800aeb4 <dwt_ioctl+0x154>
 800b672:	2c00      	cmp	r4, #0
 800b674:	f001 82b6 	beq.w	800cbe4 <dwt_ioctl+0x1e84>
 800b678:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800b900 <dwt_ioctl+0xba0>
 800b67c:	2310      	movs	r3, #16
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	23ff      	movs	r3, #255	; 0xff
 800b682:	2200      	movs	r2, #0
 800b684:	4641      	mov	r1, r8
 800b686:	f7fe fcc5 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b68a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b68e:	4630      	mov	r0, r6
 800b690:	f7fe f916 	bl	80098c0 <ull_aon_read>
 800b694:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800b698:	462a      	mov	r2, r5
 800b69a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f7fe f92e 	bl	8009900 <ull_aon_write>
 800b6a4:	f045 0204 	orr.w	r2, r5, #4
 800b6a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7fe f927 	bl	8009900 <ull_aon_write>
 800b6b2:	2002      	movs	r0, #2
 800b6b4:	f7f5 f8ca 	bl	800084c <deca_sleep>
 800b6b8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7fe f8ff 	bl	80098c0 <ull_aon_read>
 800b6c2:	4607      	mov	r7, r0
 800b6c4:	f240 110f 	movw	r1, #271	; 0x10f
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7fe f8f9 	bl	80098c0 <ull_aon_read>
 800b6ce:	4681      	mov	r9, r0
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7fe f912 	bl	8009900 <ull_aon_write>
 800b6dc:	2500      	movs	r5, #0
 800b6de:	9500      	str	r5, [sp, #0]
 800b6e0:	23ef      	movs	r3, #239	; 0xef
 800b6e2:	462a      	mov	r2, r5
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7fe fc94 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b6ec:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800b6f0:	8027      	strh	r7, [r4, #0]
 800b6f2:	f7ff bbdf 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	f001 8277 	beq.w	800cbea <dwt_ioctl+0x1e8a>
 800b6fc:	78a2      	ldrb	r2, [r4, #2]
 800b6fe:	8821      	ldrh	r1, [r4, #0]
 800b700:	f7fe f926 	bl	8009950 <ull_configuresleep>
 800b704:	2500      	movs	r5, #0
 800b706:	f7ff bbd5 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	f001 8270 	beq.w	800cbf0 <dwt_ioctl+0x1e90>
 800b710:	6824      	ldr	r4, [r4, #0]
 800b712:	f7fe f8a1 	bl	8009858 <ull_clearaonconfig>
 800b716:	2001      	movs	r0, #1
 800b718:	f7f5 f898 	bl	800084c <deca_sleep>
 800b71c:	2303      	movs	r3, #3
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	23ff      	movs	r3, #255	; 0xff
 800b722:	2200      	movs	r2, #0
 800b724:	4974      	ldr	r1, [pc, #464]	; (800b8f8 <dwt_ioctl+0xb98>)
 800b726:	4630      	mov	r0, r6
 800b728:	f7fe fc74 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b72c:	b97c      	cbnz	r4, 800b74e <dwt_ioctl+0x9ee>
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff faee 	bl	800ad10 <ull_softreset_no_sema_fcmd>
 800b734:	2001      	movs	r0, #1
 800b736:	f7f5 f889 	bl	800084c <deca_sleep>
 800b73a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b73c:	2500      	movs	r5, #0
 800b73e:	739d      	strb	r5, [r3, #14]
 800b740:	2202      	movs	r2, #2
 800b742:	821a      	strh	r2, [r3, #16]
 800b744:	751d      	strb	r5, [r3, #20]
 800b746:	755d      	strb	r5, [r3, #21]
 800b748:	73dd      	strb	r5, [r3, #15]
 800b74a:	f7ff bbb3 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b74e:	4630      	mov	r0, r6
 800b750:	f7ff faf2 	bl	800ad38 <ull_softreset_fcmd>
 800b754:	e7ee      	b.n	800b734 <dwt_ioctl+0x9d4>
 800b756:	2c00      	cmp	r4, #0
 800b758:	f001 824d 	beq.w	800cbf6 <dwt_ioctl+0x1e96>
 800b75c:	7823      	ldrb	r3, [r4, #0]
 800b75e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b762:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b764:	7353      	strb	r3, [r2, #13]
 800b766:	2200      	movs	r2, #0
 800b768:	4964      	ldr	r1, [pc, #400]	; (800b8fc <dwt_ioctl+0xb9c>)
 800b76a:	f7fe f81d 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b76e:	2500      	movs	r5, #0
 800b770:	f7ff bba0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b774:	2c00      	cmp	r4, #0
 800b776:	f001 8241 	beq.w	800cbfc <dwt_ioctl+0x1e9c>
 800b77a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b77c:	7b5b      	ldrb	r3, [r3, #13]
 800b77e:	7023      	strb	r3, [r4, #0]
 800b780:	2500      	movs	r5, #0
 800b782:	f7ff bb97 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b786:	2101      	movs	r1, #1
 800b788:	f7fe faf6 	bl	8009d78 <ull_enable_rf_tx>
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7fe fb27 	bl	8009de0 <ull_enable_rftx_blocks>
 800b792:	2101      	movs	r1, #1
 800b794:	4630      	mov	r0, r6
 800b796:	f7fd fe2d 	bl	80093f4 <ull_force_clocks>
 800b79a:	220f      	movs	r2, #15
 800b79c:	2101      	movs	r1, #1
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7fe ff48 	bl	800a634 <ull_repeated_cw>
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	f7ff bb85 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b7aa:	2c00      	cmp	r4, #0
 800b7ac:	f001 8229 	beq.w	800cc02 <dwt_ioctl+0x1ea2>
 800b7b0:	6862      	ldr	r2, [r4, #4]
 800b7b2:	6821      	ldr	r1, [r4, #0]
 800b7b4:	f7fe ff3e 	bl	800a634 <ull_repeated_cw>
 800b7b8:	2500      	movs	r5, #0
 800b7ba:	f7ff bb7b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b7be:	2c00      	cmp	r4, #0
 800b7c0:	f001 8222 	beq.w	800cc08 <dwt_ioctl+0x1ea8>
 800b7c4:	4d4e      	ldr	r5, [pc, #312]	; (800b900 <dwt_ioctl+0xba0>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7fd fa12 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	23ff      	movs	r3, #255	; 0xff
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7fe fc1a 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b7e0:	2304      	movs	r3, #4
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4947      	ldr	r1, [pc, #284]	; (800b904 <dwt_ioctl+0xba4>)
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7fd ffde 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7fd ffd7 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b7fa:	4f43      	ldr	r7, [pc, #268]	; (800b908 <dwt_ioctl+0xba8>)
 800b7fc:	2500      	movs	r5, #0
 800b7fe:	462a      	mov	r2, r5
 800b800:	4639      	mov	r1, r7
 800b802:	4630      	mov	r0, r6
 800b804:	f7fd f9f5 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800b808:	f010 0f01 	tst.w	r0, #1
 800b80c:	d0f7      	beq.n	800b7fe <dwt_ioctl+0xa9e>
 800b80e:	2200      	movs	r2, #0
 800b810:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b814:	4630      	mov	r0, r6
 800b816:	f7fd f9da 	bl	8008bce <dwt_read16bitoffsetreg>
 800b81a:	4605      	mov	r5, r0
 800b81c:	2300      	movs	r3, #0
 800b81e:	461a      	mov	r2, r3
 800b820:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b824:	4630      	mov	r0, r6
 800b826:	f7fd ffbf 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b82a:	2300      	movs	r3, #0
 800b82c:	461a      	mov	r2, r3
 800b82e:	4935      	ldr	r1, [pc, #212]	; (800b904 <dwt_ioctl+0xba4>)
 800b830:	4630      	mov	r0, r6
 800b832:	f7fd ffb9 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b836:	4643      	mov	r3, r8
 800b838:	2200      	movs	r2, #0
 800b83a:	4931      	ldr	r1, [pc, #196]	; (800b900 <dwt_ioctl+0xba0>)
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7fd ffb3 	bl	80097a8 <dwt_write8bitoffsetreg>
 800b842:	8025      	strh	r5, [r4, #0]
 800b844:	2500      	movs	r5, #0
 800b846:	f7ff bb35 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b84a:	2c00      	cmp	r4, #0
 800b84c:	f001 81df 	beq.w	800cc0e <dwt_ioctl+0x1eae>
 800b850:	7923      	ldrb	r3, [r4, #4]
 800b852:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b854:	7a92      	ldrb	r2, [r2, #10]
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b860:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b90c <dwt_ioctl+0xbac>
 800b864:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b868:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800b86c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b870:	edc4 7a00 	vstr	s15, [r4]
 800b874:	2500      	movs	r5, #0
 800b876:	f7ff bb1d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b87a:	2c00      	cmp	r4, #0
 800b87c:	f001 81ca 	beq.w	800cc14 <dwt_ioctl+0x1eb4>
 800b880:	7923      	ldrb	r3, [r4, #4]
 800b882:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b884:	7a52      	ldrb	r2, [r2, #9]
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	ee07 3a90 	vmov	s15, r3
 800b88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b890:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b910 <dwt_ioctl+0xbb0>
 800b894:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b898:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800b89c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8a0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800b914 <dwt_ioctl+0xbb4>
 800b8a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b8a8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800b8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8b0:	edc4 7a00 	vstr	s15, [r4]
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	f7ff bafd 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	f001 81ad 	beq.w	800cc1a <dwt_ioctl+0x1eba>
 800b8c0:	6824      	ldr	r4, [r4, #0]
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	f7fe fa58 	bl	8009d78 <ull_enable_rf_tx>
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7fe fa89 	bl	8009de0 <ull_enable_rftx_blocks>
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7fd fd8f 	bl	80093f4 <ull_force_clocks>
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f7fe fc41 	bl	800a160 <ull_repeated_frames>
 800b8de:	2500      	movs	r5, #0
 800b8e0:	f7ff bae8 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b8e4:	00180014 	.word	0x00180014
 800b8e8:	000c001c 	.word	0x000c001c
 800b8ec:	000c0018 	.word	0x000c0018
 800b8f0:	000a0004 	.word	0x000a0004
 800b8f4:	00110008 	.word	0x00110008
 800b8f8:	00110004 	.word	0x00110004
 800b8fc:	00090014 	.word	0x00090014
 800b900:	00070048 	.word	0x00070048
 800b904:	00070034 	.word	0x00070034
 800b908:	00080004 	.word	0x00080004
 800b90c:	3f866666 	.word	0x3f866666
 800b910:	3ecccccd 	.word	0x3ecccccd
 800b914:	437f0000 	.word	0x437f0000
 800b918:	2500      	movs	r5, #0
 800b91a:	9500      	str	r5, [sp, #0]
 800b91c:	23ef      	movs	r3, #239	; 0xef
 800b91e:	462a      	mov	r2, r5
 800b920:	49c7      	ldr	r1, [pc, #796]	; (800bc40 <dwt_ioctl+0xee0>)
 800b922:	f7fe fb77 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b926:	2105      	movs	r1, #5
 800b928:	4630      	mov	r0, r6
 800b92a:	f7fd fd63 	bl	80093f4 <ull_force_clocks>
 800b92e:	2101      	movs	r1, #1
 800b930:	4630      	mov	r0, r6
 800b932:	f7fd fee5 	bl	8009700 <ull_disable_rf_tx>
 800b936:	4630      	mov	r0, r6
 800b938:	f7fd fed8 	bl	80096ec <ull_disable_rftx_blocks>
 800b93c:	f7ff baba 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b940:	2500      	movs	r5, #0
 800b942:	9500      	str	r5, [sp, #0]
 800b944:	23ef      	movs	r3, #239	; 0xef
 800b946:	462a      	mov	r2, r5
 800b948:	49bd      	ldr	r1, [pc, #756]	; (800bc40 <dwt_ioctl+0xee0>)
 800b94a:	f7fe fb63 	bl	800a014 <dwt_modify8bitoffsetreg>
 800b94e:	f7ff bab1 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b952:	2c00      	cmp	r4, #0
 800b954:	f001 8164 	beq.w	800cc20 <dwt_ioctl+0x1ec0>
 800b958:	6821      	ldr	r1, [r4, #0]
 800b95a:	f7fe fc01 	bl	800a160 <ull_repeated_frames>
 800b95e:	2500      	movs	r5, #0
 800b960:	f7ff baa8 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b964:	2200      	movs	r2, #0
 800b966:	49b7      	ldr	r1, [pc, #732]	; (800bc44 <dwt_ioctl+0xee4>)
 800b968:	f7fd f931 	bl	8008bce <dwt_read16bitoffsetreg>
 800b96c:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800b970:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800b974:	bf18      	it	ne
 800b976:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800b97a:	b22d      	sxth	r5, r5
 800b97c:	8025      	strh	r5, [r4, #0]
 800b97e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b980:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b984:	1aed      	subs	r5, r5, r3
 800b986:	f7ff ba95 	b.w	800aeb4 <dwt_ioctl+0x154>
 800b98a:	2c00      	cmp	r4, #0
 800b98c:	f001 814b 	beq.w	800cc26 <dwt_ioctl+0x1ec6>
 800b990:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b994:	7a23      	ldrb	r3, [r4, #8]
 800b996:	f899 2013 	ldrb.w	r2, [r9, #19]
 800b99a:	2aff      	cmp	r2, #255	; 0xff
 800b99c:	f000 8122 	beq.w	800bbe4 <dwt_ioctl+0xe84>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d136      	bne.n	800ba12 <dwt_ioctl+0xcb2>
 800b9a4:	f8d9 3000 	ldr.w	r3, [r9]
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	230c      	movs	r3, #12
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	49a6      	ldr	r1, [pc, #664]	; (800bc48 <dwt_ioctl+0xee8>)
 800b9b0:	f7fd fd04 	bl	80093bc <dwt_writetodevice>
 800b9b4:	f899 300c 	ldrb.w	r3, [r9, #12]
 800b9b8:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800b9bc:	18d1      	adds	r1, r2, r3
 800b9be:	f899 2012 	ldrb.w	r2, [r9, #18]
 800b9c2:	2a00      	cmp	r2, #0
 800b9c4:	d15f      	bne.n	800ba86 <dwt_ioctl+0xd26>
 800b9c6:	f899 0010 	ldrb.w	r0, [r9, #16]
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	bf0b      	itete	eq
 800b9ce:	227f      	moveq	r2, #127	; 0x7f
 800b9d0:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800b9d4:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800b9d8:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800b9dc:	f899 0013 	ldrb.w	r0, [r9, #19]
 800b9e0:	1a12      	subs	r2, r2, r0
 800b9e2:	3a02      	subs	r2, #2
 800b9e4:	4291      	cmp	r1, r2
 800b9e6:	f200 8103 	bhi.w	800bbf0 <dwt_ioctl+0xe90>
 800b9ea:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b9ee:	9200      	str	r2, [sp, #0]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7fd fce1 	bl	80093bc <dwt_writetodevice>
 800b9fa:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800b9fe:	f899 200c 	ldrb.w	r2, [r9, #12]
 800ba02:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ba06:	9100      	str	r1, [sp, #0]
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7fd fcd6 	bl	80093bc <dwt_writetodevice>
 800ba10:	e04a      	b.n	800baa8 <dwt_ioctl+0xd48>
 800ba12:	f8d9 3000 	ldr.w	r3, [r9]
 800ba16:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800ba1a:	7a9a      	ldrb	r2, [r3, #10]
 800ba1c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800ba20:	7a5a      	ldrb	r2, [r3, #9]
 800ba22:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800ba26:	7a1a      	ldrb	r2, [r3, #8]
 800ba28:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800ba2c:	79da      	ldrb	r2, [r3, #7]
 800ba2e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800ba32:	799a      	ldrb	r2, [r3, #6]
 800ba34:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800ba38:	795a      	ldrb	r2, [r3, #5]
 800ba3a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800ba3e:	791a      	ldrb	r2, [r3, #4]
 800ba40:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800ba44:	78da      	ldrb	r2, [r3, #3]
 800ba46:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800ba4a:	789a      	ldrb	r2, [r3, #2]
 800ba4c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800ba50:	785a      	ldrb	r2, [r3, #1]
 800ba52:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800ba56:	781a      	ldrb	r2, [r3, #0]
 800ba58:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800ba62:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800ba66:	0a09      	lsrs	r1, r1, #8
 800ba68:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800ba6c:	7b19      	ldrb	r1, [r3, #12]
 800ba6e:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800ba72:	7adb      	ldrb	r3, [r3, #11]
 800ba74:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800ba78:	ab0c      	add	r3, sp, #48	; 0x30
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	2310      	movs	r3, #16
 800ba7e:	4972      	ldr	r1, [pc, #456]	; (800bc48 <dwt_ioctl+0xee8>)
 800ba80:	f7fd fc9c 	bl	80093bc <dwt_writetodevice>
 800ba84:	e796      	b.n	800b9b4 <dwt_ioctl+0xc54>
 800ba86:	2a01      	cmp	r2, #1
 800ba88:	f040 80af 	bne.w	800bbea <dwt_ioctl+0xe8a>
 800ba8c:	f899 3011 	ldrb.w	r3, [r9, #17]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ba96:	bf08      	it	eq
 800ba98:	237f      	moveq	r3, #127	; 0x7f
 800ba9a:	f899 2013 	ldrb.w	r2, [r9, #19]
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	3b02      	subs	r3, #2
 800baa2:	4299      	cmp	r1, r3
 800baa4:	f200 80a7 	bhi.w	800bbf6 <dwt_ioctl+0xe96>
 800baa8:	f899 2010 	ldrb.w	r2, [r9, #16]
 800baac:	1e53      	subs	r3, r2, #1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d940      	bls.n	800bb36 <dwt_ioctl+0xdd6>
 800bab4:	f899 3011 	ldrb.w	r3, [r9, #17]
 800bab8:	1e59      	subs	r1, r3, #1
 800baba:	b2c9      	uxtb	r1, r1
 800babc:	2901      	cmp	r1, #1
 800babe:	d947      	bls.n	800bb50 <dwt_ioctl+0xdf0>
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d04c      	beq.n	800bb5e <dwt_ioctl+0xdfe>
 800bac4:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800bac8:	2200      	movs	r2, #0
 800baca:	4960      	ldr	r1, [pc, #384]	; (800bc4c <dwt_ioctl+0xeec>)
 800bacc:	4630      	mov	r0, r6
 800bace:	f7fd fcdd 	bl	800948c <dwt_write32bitoffsetreg>
 800bad2:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800bad6:	4a5e      	ldr	r2, [pc, #376]	; (800bc50 <dwt_ioctl+0xef0>)
 800bad8:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800badc:	f899 300c 	ldrb.w	r3, [r9, #12]
 800bae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae4:	4313      	orrs	r3, r2
 800bae6:	2200      	movs	r2, #0
 800bae8:	495a      	ldr	r1, [pc, #360]	; (800bc54 <dwt_ioctl+0xef4>)
 800baea:	4630      	mov	r0, r6
 800baec:	f7fd fcce 	bl	800948c <dwt_write32bitoffsetreg>
 800baf0:	2301      	movs	r3, #1
 800baf2:	2200      	movs	r2, #0
 800baf4:	4958      	ldr	r1, [pc, #352]	; (800bc58 <dwt_ioctl+0xef8>)
 800baf6:	4630      	mov	r0, r6
 800baf8:	f7fd fe56 	bl	80097a8 <dwt_write8bitoffsetreg>
 800bafc:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800bc5c <dwt_ioctl+0xefc>
 800bb00:	2700      	movs	r7, #0
 800bb02:	463a      	mov	r2, r7
 800bb04:	4641      	mov	r1, r8
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7fd f873 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800bb0c:	f010 0f05 	tst.w	r0, #5
 800bb10:	d0f7      	beq.n	800bb02 <dwt_ioctl+0xda2>
 800bb12:	4605      	mov	r5, r0
 800bb14:	4603      	mov	r3, r0
 800bb16:	2200      	movs	r2, #0
 800bb18:	4950      	ldr	r1, [pc, #320]	; (800bc5c <dwt_ioctl+0xefc>)
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7fd fe44 	bl	80097a8 <dwt_write8bitoffsetreg>
 800bb20:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800bb24:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d025      	beq.n	800bb78 <dwt_ioctl+0xe18>
 800bb2c:	b26b      	sxtb	r3, r5
 800bb2e:	7023      	strb	r3, [r4, #0]
 800bb30:	2500      	movs	r5, #0
 800bb32:	f7ff b9bf 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bb36:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bb38:	7b9b      	ldrb	r3, [r3, #14]
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	f001 8123 	beq.w	800cd86 <dwt_ioctl+0x2026>
 800bb40:	f899 3011 	ldrb.w	r3, [r9, #17]
 800bb44:	1e5a      	subs	r2, r3, #1
 800bb46:	b2d2      	uxtb	r2, r2
 800bb48:	2a01      	cmp	r2, #1
 800bb4a:	d912      	bls.n	800bb72 <dwt_ioctl+0xe12>
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	e7b7      	b.n	800bac0 <dwt_ioctl+0xd60>
 800bb50:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bb52:	7b9b      	ldrb	r3, [r3, #14]
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	bf0c      	ite	eq
 800bb58:	2302      	moveq	r3, #2
 800bb5a:	2301      	movne	r3, #1
 800bb5c:	e7b2      	b.n	800bac4 <dwt_ioctl+0xd64>
 800bb5e:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800bb62:	2910      	cmp	r1, #16
 800bb64:	d9ae      	bls.n	800bac4 <dwt_ioctl+0xd64>
 800bb66:	f06f 0303 	mvn.w	r3, #3
 800bb6a:	e7e0      	b.n	800bb2e <dwt_ioctl+0xdce>
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	4613      	mov	r3, r2
 800bb70:	e7a8      	b.n	800bac4 <dwt_ioctl+0xd64>
 800bb72:	2201      	movs	r2, #1
 800bb74:	4613      	mov	r3, r2
 800bb76:	e7a5      	b.n	800bac4 <dwt_ioctl+0xd64>
 800bb78:	f899 3012 	ldrb.w	r3, [r9, #18]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d1d5      	bne.n	800bb2c <dwt_ioctl+0xdcc>
 800bb80:	f899 2011 	ldrb.w	r2, [r9, #17]
 800bb84:	1e53      	subs	r3, r2, #1
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d91b      	bls.n	800bbc4 <dwt_ioctl+0xe64>
 800bb8c:	2a03      	cmp	r2, #3
 800bb8e:	bf0c      	ite	eq
 800bb90:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800bb94:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800bb98:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bb9c:	b112      	cbz	r2, 800bba4 <dwt_ioctl+0xe44>
 800bb9e:	f899 300c 	ldrb.w	r3, [r9, #12]
 800bba2:	b9c3      	cbnz	r3, 800bbd6 <dwt_ioctl+0xe76>
 800bba4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	d0bf      	beq.n	800bb2c <dwt_ioctl+0xdcc>
 800bbac:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0bb      	beq.n	800bb2c <dwt_ioctl+0xdcc>
 800bbb4:	f899 200c 	ldrb.w	r2, [r9, #12]
 800bbb8:	9100      	str	r1, [sp, #0]
 800bbba:	4639      	mov	r1, r7
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f7fc ffe6 	bl	8008b8e <dwt_readfromdevice>
 800bbc2:	e7b3      	b.n	800bb2c <dwt_ioctl+0xdcc>
 800bbc4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bbc6:	7b9b      	ldrb	r3, [r3, #14]
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	bf0c      	ite	eq
 800bbcc:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800bbd0:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800bbd4:	e7e0      	b.n	800bb98 <dwt_ioctl+0xe38>
 800bbd6:	9200      	str	r2, [sp, #0]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	4639      	mov	r1, r7
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f7fc ffd6 	bl	8008b8e <dwt_readfromdevice>
 800bbe2:	e7df      	b.n	800bba4 <dwt_ioctl+0xe44>
 800bbe4:	f06f 0302 	mvn.w	r3, #2
 800bbe8:	e7a1      	b.n	800bb2e <dwt_ioctl+0xdce>
 800bbea:	f06f 0301 	mvn.w	r3, #1
 800bbee:	e79e      	b.n	800bb2e <dwt_ioctl+0xdce>
 800bbf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf4:	e79b      	b.n	800bb2e <dwt_ioctl+0xdce>
 800bbf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbfa:	e798      	b.n	800bb2e <dwt_ioctl+0xdce>
 800bbfc:	7a23      	ldrb	r3, [r4, #8]
 800bbfe:	79e1      	ldrb	r1, [r4, #7]
 800bc00:	79a2      	ldrb	r2, [r4, #6]
 800bc02:	00d2      	lsls	r2, r2, #3
 800bc04:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	7962      	ldrb	r2, [r4, #5]
 800bc0c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800bc10:	7922      	ldrb	r2, [r4, #4]
 800bc12:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bc16:	78e2      	ldrb	r2, [r4, #3]
 800bc18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc1c:	78a2      	ldrb	r2, [r4, #2]
 800bc1e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800bc22:	7862      	ldrb	r2, [r4, #1]
 800bc24:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800bc28:	7822      	ldrb	r2, [r4, #0]
 800bc2a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	490b      	ldr	r1, [pc, #44]	; (800bc60 <dwt_ioctl+0xf00>)
 800bc34:	f7fd fbcd 	bl	80093d2 <dwt_write16bitoffsetreg>
 800bc38:	2500      	movs	r5, #0
 800bc3a:	f7ff b93b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bc3e:	bf00      	nop
 800bc40:	000f0028 	.word	0x000f0028
 800bc44:	00020008 	.word	0x00020008
 800bc48:	00010034 	.word	0x00010034
 800bc4c:	00010044 	.word	0x00010044
 800bc50:	0001ff80 	.word	0x0001ff80
 800bc54:	00010048 	.word	0x00010048
 800bc58:	0001004c 	.word	0x0001004c
 800bc5c:	00010050 	.word	0x00010050
 800bc60:	00010030 	.word	0x00010030
 800bc64:	2c00      	cmp	r4, #0
 800bc66:	f000 87e1 	beq.w	800cc2c <dwt_ioctl+0x1ecc>
 800bc6a:	7863      	ldrb	r3, [r4, #1]
 800bc6c:	b133      	cbz	r3, 800bc7c <dwt_ioctl+0xf1c>
 800bc6e:	085b      	lsrs	r3, r3, #1
 800bc70:	3b01      	subs	r3, #1
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	7023      	strb	r3, [r4, #0]
 800bc76:	2500      	movs	r5, #0
 800bc78:	f7ff b91c 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	e7f9      	b.n	800bc74 <dwt_ioctl+0xf14>
 800bc80:	2200      	movs	r2, #0
 800bc82:	49d0      	ldr	r1, [pc, #832]	; (800bfc4 <dwt_ioctl+0x1264>)
 800bc84:	f7fc ff8d 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bc88:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bc8c:	8023      	strh	r3, [r4, #0]
 800bc8e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bc92:	8060      	strh	r0, [r4, #2]
 800bc94:	2200      	movs	r2, #0
 800bc96:	49cc      	ldr	r1, [pc, #816]	; (800bfc8 <dwt_ioctl+0x1268>)
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f7fc ff82 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bc9e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bca2:	80a3      	strh	r3, [r4, #4]
 800bca4:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bca8:	80e0      	strh	r0, [r4, #6]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	49c7      	ldr	r1, [pc, #796]	; (800bfcc <dwt_ioctl+0x126c>)
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f7fc ff77 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bcb4:	7220      	strb	r0, [r4, #8]
 800bcb6:	0c00      	lsrs	r0, r0, #16
 800bcb8:	7260      	strb	r0, [r4, #9]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	49c4      	ldr	r1, [pc, #784]	; (800bfd0 <dwt_ioctl+0x1270>)
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7fc ff6f 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bcc4:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bcce:	8160      	strh	r0, [r4, #10]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	49c0      	ldr	r1, [pc, #768]	; (800bfd4 <dwt_ioctl+0x1274>)
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7fc ff64 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bcda:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bcde:	f8a4 300f 	strh.w	r3, [r4, #15]
 800bce2:	73a0      	strb	r0, [r4, #14]
 800bce4:	2200      	movs	r2, #0
 800bce6:	49bc      	ldr	r1, [pc, #752]	; (800bfd8 <dwt_ioctl+0x1278>)
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7fc ff5a 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bcee:	7460      	strb	r0, [r4, #17]
 800bcf0:	0c00      	lsrs	r0, r0, #16
 800bcf2:	74a0      	strb	r0, [r4, #18]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	49b9      	ldr	r1, [pc, #740]	; (800bfdc <dwt_ioctl+0x127c>)
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7fc ff52 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bcfe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bd02:	f8a4 0013 	strh.w	r0, [r4, #19]
 800bd06:	2500      	movs	r5, #0
 800bd08:	7565      	strb	r5, [r4, #21]
 800bd0a:	75a5      	strb	r5, [r4, #22]
 800bd0c:	462a      	mov	r2, r5
 800bd0e:	49b4      	ldr	r1, [pc, #720]	; (800bfe0 <dwt_ioctl+0x1280>)
 800bd10:	4630      	mov	r0, r6
 800bd12:	f7fc ff6e 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800bd16:	75e0      	strb	r0, [r4, #23]
 800bd18:	f7ff b8cc 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	f7fd fdbb 	bl	8009898 <ull_configeventcounters>
 800bd22:	2500      	movs	r5, #0
 800bd24:	f7ff b8c6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bd28:	2c00      	cmp	r4, #0
 800bd2a:	f000 8782 	beq.w	800cc32 <dwt_ioctl+0x1ed2>
 800bd2e:	8823      	ldrh	r3, [r4, #0]
 800bd30:	2200      	movs	r2, #0
 800bd32:	49ac      	ldr	r1, [pc, #688]	; (800bfe4 <dwt_ioctl+0x1284>)
 800bd34:	f7fd fb4d 	bl	80093d2 <dwt_write16bitoffsetreg>
 800bd38:	2500      	movs	r5, #0
 800bd3a:	f7ff b8bb 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	f000 877a 	beq.w	800cc38 <dwt_ioctl+0x1ed8>
 800bd44:	6825      	ldr	r5, [r4, #0]
 800bd46:	b935      	cbnz	r5, 800bd56 <dwt_ioctl+0xff6>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	49a6      	ldr	r1, [pc, #664]	; (800bfe8 <dwt_ioctl+0x1288>)
 800bd4e:	f7fd fb40 	bl	80093d2 <dwt_write16bitoffsetreg>
 800bd52:	f7ff b8af 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bd56:	7962      	ldrb	r2, [r4, #5]
 800bd58:	7923      	ldrb	r3, [r4, #4]
 800bd5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd62:	2200      	movs	r2, #0
 800bd64:	49a0      	ldr	r1, [pc, #640]	; (800bfe8 <dwt_ioctl+0x1288>)
 800bd66:	f7fd fb34 	bl	80093d2 <dwt_write16bitoffsetreg>
 800bd6a:	2500      	movs	r5, #0
 800bd6c:	f7ff b8a2 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bd70:	2c00      	cmp	r4, #0
 800bd72:	f000 8764 	beq.w	800cc3e <dwt_ioctl+0x1ede>
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	b94b      	cbnz	r3, 800bd8e <dwt_ioctl+0x102e>
 800bd7a:	2500      	movs	r5, #0
 800bd7c:	9500      	str	r5, [sp, #0]
 800bd7e:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800bd82:	462a      	mov	r2, r5
 800bd84:	2110      	movs	r1, #16
 800bd86:	f7fe fb61 	bl	800a44c <dwt_modify16bitoffsetreg>
 800bd8a:	f7ff b893 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2134      	movs	r1, #52	; 0x34
 800bd92:	f7fd fb7b 	bl	800948c <dwt_write32bitoffsetreg>
 800bd96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bda0:	2200      	movs	r2, #0
 800bda2:	2110      	movs	r1, #16
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7fe fb51 	bl	800a44c <dwt_modify16bitoffsetreg>
 800bdaa:	2500      	movs	r5, #0
 800bdac:	f7ff b882 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	f000 8747 	beq.w	800cc44 <dwt_ioctl+0x1ee4>
 800bdb6:	8861      	ldrh	r1, [r4, #2]
 800bdb8:	f7fd fd82 	bl	80098c0 <ull_aon_read>
 800bdbc:	7020      	strb	r0, [r4, #0]
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	f7ff b878 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bdc4:	2c00      	cmp	r4, #0
 800bdc6:	f000 8740 	beq.w	800cc4a <dwt_ioctl+0x1eea>
 800bdca:	78a2      	ldrb	r2, [r4, #2]
 800bdcc:	8821      	ldrh	r1, [r4, #0]
 800bdce:	f7fd fd97 	bl	8009900 <ull_aon_write>
 800bdd2:	2500      	movs	r5, #0
 800bdd4:	f7ff b86e 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bdd8:	4b84      	ldr	r3, [pc, #528]	; (800bfec <dwt_ioctl+0x128c>)
 800bdda:	4a85      	ldr	r2, [pc, #532]	; (800bff0 <dwt_ioctl+0x1290>)
 800bddc:	2d01      	cmp	r5, #1
 800bdde:	bf18      	it	ne
 800bde0:	4613      	movne	r3, r2
 800bde2:	2d01      	cmp	r5, #1
 800bde4:	4983      	ldr	r1, [pc, #524]	; (800bff4 <dwt_ioctl+0x1294>)
 800bde6:	bf18      	it	ne
 800bde8:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800bdec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bdee:	7b92      	ldrb	r2, [r2, #14]
 800bdf0:	2a01      	cmp	r2, #1
 800bdf2:	d012      	beq.n	800be1a <dwt_ioctl+0x10ba>
 800bdf4:	2a03      	cmp	r2, #3
 800bdf6:	d117      	bne.n	800be28 <dwt_ioctl+0x10c8>
 800bdf8:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800bdfc:	3a01      	subs	r2, #1
 800bdfe:	441a      	add	r2, r3
 800be00:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800be04:	f7fc fee3 	bl	8008bce <dwt_read16bitoffsetreg>
 800be08:	09c0      	lsrs	r0, r0, #7
 800be0a:	8020      	strh	r0, [r4, #0]
 800be0c:	8825      	ldrh	r5, [r4, #0]
 800be0e:	3500      	adds	r5, #0
 800be10:	bf18      	it	ne
 800be12:	2501      	movne	r5, #1
 800be14:	426d      	negs	r5, r5
 800be16:	f7ff b84d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800be1a:	2202      	movs	r2, #2
 800be1c:	4619      	mov	r1, r3
 800be1e:	f7fc fed6 	bl	8008bce <dwt_read16bitoffsetreg>
 800be22:	09c0      	lsrs	r0, r0, #7
 800be24:	8020      	strh	r0, [r4, #0]
 800be26:	e7f1      	b.n	800be0c <dwt_ioctl+0x10ac>
 800be28:	2202      	movs	r2, #2
 800be2a:	f7fc fed0 	bl	8008bce <dwt_read16bitoffsetreg>
 800be2e:	09c0      	lsrs	r0, r0, #7
 800be30:	8020      	strh	r0, [r4, #0]
 800be32:	e7eb      	b.n	800be0c <dwt_ioctl+0x10ac>
 800be34:	2c00      	cmp	r4, #0
 800be36:	f000 870b 	beq.w	800cc50 <dwt_ioctl+0x1ef0>
 800be3a:	7821      	ldrb	r1, [r4, #0]
 800be3c:	f7fe fb20 	bl	800a480 <ull_setleds>
 800be40:	2500      	movs	r5, #0
 800be42:	f7ff b837 	b.w	800aeb4 <dwt_ioctl+0x154>
 800be46:	4611      	mov	r1, r2
 800be48:	f7fe f9a2 	bl	800a190 <ull_setdwstate>
 800be4c:	2500      	movs	r5, #0
 800be4e:	f7ff b831 	b.w	800aeb4 <dwt_ioctl+0x154>
 800be52:	9400      	str	r4, [sp, #0]
 800be54:	2304      	movs	r3, #4
 800be56:	2200      	movs	r2, #0
 800be58:	211c      	movs	r1, #28
 800be5a:	f7fc fe98 	bl	8008b8e <dwt_readfromdevice>
 800be5e:	2500      	movs	r5, #0
 800be60:	f7ff b828 	b.w	800aeb4 <dwt_ioctl+0x154>
 800be64:	2c00      	cmp	r4, #0
 800be66:	f000 86f6 	beq.w	800cc56 <dwt_ioctl+0x1ef6>
 800be6a:	2202      	movs	r2, #2
 800be6c:	2144      	movs	r1, #68	; 0x44
 800be6e:	f7fc feae 	bl	8008bce <dwt_read16bitoffsetreg>
 800be72:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800be76:	7020      	strb	r0, [r4, #0]
 800be78:	2500      	movs	r5, #0
 800be7a:	f7ff b81b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800be7e:	2c00      	cmp	r4, #0
 800be80:	f000 86ec 	beq.w	800cc5c <dwt_ioctl+0x1efc>
 800be84:	2200      	movs	r2, #0
 800be86:	2144      	movs	r1, #68	; 0x44
 800be88:	f7fc feb3 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800be8c:	f000 0001 	and.w	r0, r0, #1
 800be90:	7020      	strb	r0, [r4, #0]
 800be92:	2500      	movs	r5, #0
 800be94:	f7ff b80e 	b.w	800aeb4 <dwt_ioctl+0x154>
 800be98:	2c00      	cmp	r4, #0
 800be9a:	f000 86e2 	beq.w	800cc62 <dwt_ioctl+0x1f02>
 800be9e:	8862      	ldrh	r2, [r4, #2]
 800bea0:	8821      	ldrh	r1, [r4, #0]
 800bea2:	f7fe f9d1 	bl	800a248 <ull_configureframefilter>
 800bea6:	2500      	movs	r5, #0
 800bea8:	f7ff b804 	b.w	800aeb4 <dwt_ioctl+0x154>
 800beac:	9400      	str	r4, [sp, #0]
 800beae:	2308      	movs	r3, #8
 800beb0:	2200      	movs	r2, #0
 800beb2:	2104      	movs	r1, #4
 800beb4:	f7fd fa82 	bl	80093bc <dwt_writetodevice>
 800beb8:	2500      	movs	r5, #0
 800beba:	f7fe bffb 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bebe:	9400      	str	r4, [sp, #0]
 800bec0:	2308      	movs	r3, #8
 800bec2:	2200      	movs	r2, #0
 800bec4:	2104      	movs	r1, #4
 800bec6:	f7fc fe62 	bl	8008b8e <dwt_readfromdevice>
 800beca:	2500      	movs	r5, #0
 800becc:	f7fe bff2 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bed0:	2c00      	cmp	r4, #0
 800bed2:	f000 86c9 	beq.w	800cc68 <dwt_ioctl+0x1f08>
 800bed6:	8823      	ldrh	r3, [r4, #0]
 800bed8:	2202      	movs	r2, #2
 800beda:	210c      	movs	r1, #12
 800bedc:	f7fd fa79 	bl	80093d2 <dwt_write16bitoffsetreg>
 800bee0:	2500      	movs	r5, #0
 800bee2:	f7fe bfe7 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bee6:	2c00      	cmp	r4, #0
 800bee8:	f000 86c1 	beq.w	800cc6e <dwt_ioctl+0x1f0e>
 800beec:	8823      	ldrh	r3, [r4, #0]
 800beee:	2200      	movs	r2, #0
 800bef0:	210c      	movs	r1, #12
 800bef2:	f7fd fa6e 	bl	80093d2 <dwt_write16bitoffsetreg>
 800bef6:	2500      	movs	r5, #0
 800bef8:	f7fe bfdc 	b.w	800aeb4 <dwt_ioctl+0x154>
 800befc:	4621      	mov	r1, r4
 800befe:	f7fd fa3b 	bl	8009378 <ull_readrxtimestamp>
 800bf02:	2500      	movs	r5, #0
 800bf04:	f7fe bfd6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bf08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bf0a:	7b9b      	ldrb	r3, [r3, #14]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d00b      	beq.n	800bf28 <dwt_ioctl+0x11c8>
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d112      	bne.n	800bf3a <dwt_ioctl+0x11da>
 800bf14:	9400      	str	r4, [sp, #0]
 800bf16:	2305      	movs	r3, #5
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800bf1e:	f7fc fe36 	bl	8008b8e <dwt_readfromdevice>
 800bf22:	2500      	movs	r5, #0
 800bf24:	f7fe bfc6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bf28:	9400      	str	r4, [sp, #0]
 800bf2a:	2305      	movs	r3, #5
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	4932      	ldr	r1, [pc, #200]	; (800bff8 <dwt_ioctl+0x1298>)
 800bf30:	f7fc fe2d 	bl	8008b8e <dwt_readfromdevice>
 800bf34:	2500      	movs	r5, #0
 800bf36:	f7fe bfbd 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bf3a:	9400      	str	r4, [sp, #0]
 800bf3c:	2305      	movs	r3, #5
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800bf44:	f7fc fe23 	bl	8008b8e <dwt_readfromdevice>
 800bf48:	2500      	movs	r5, #0
 800bf4a:	f7fe bfb3 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bf4e:	2500      	movs	r5, #0
 800bf50:	f804 5b01 	strb.w	r5, [r4], #1
 800bf54:	9400      	str	r4, [sp, #0]
 800bf56:	2304      	movs	r3, #4
 800bf58:	462a      	mov	r2, r5
 800bf5a:	216c      	movs	r1, #108	; 0x6c
 800bf5c:	f7fc fe17 	bl	8008b8e <dwt_readfromdevice>
 800bf60:	f7fe bfa8 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bf64:	2c00      	cmp	r4, #0
 800bf66:	f000 8685 	beq.w	800cc74 <dwt_ioctl+0x1f14>
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	2160      	movs	r1, #96	; 0x60
 800bf6e:	f7fc fe18 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bf72:	6020      	str	r0, [r4, #0]
 800bf74:	2500      	movs	r5, #0
 800bf76:	f7fe bf9d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bf7a:	2c00      	cmp	r4, #0
 800bf7c:	f000 867d 	beq.w	800cc7a <dwt_ioctl+0x1f1a>
 800bf80:	2200      	movs	r2, #0
 800bf82:	2160      	movs	r1, #96	; 0x60
 800bf84:	f7fc fe0d 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800bf88:	6020      	str	r0, [r4, #0]
 800bf8a:	2500      	movs	r5, #0
 800bf8c:	f7fe bf92 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bf90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bf92:	7b9b      	ldrb	r3, [r3, #14]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d00b      	beq.n	800bfb0 <dwt_ioctl+0x1250>
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d131      	bne.n	800c000 <dwt_ioctl+0x12a0>
 800bf9c:	9400      	str	r4, [sp, #0]
 800bf9e:	2305      	movs	r3, #5
 800bfa0:	2228      	movs	r2, #40	; 0x28
 800bfa2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800bfa6:	f7fc fdf2 	bl	8008b8e <dwt_readfromdevice>
 800bfaa:	2500      	movs	r5, #0
 800bfac:	f7fe bf82 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bfb0:	9400      	str	r4, [sp, #0]
 800bfb2:	2305      	movs	r3, #5
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4911      	ldr	r1, [pc, #68]	; (800bffc <dwt_ioctl+0x129c>)
 800bfb8:	f7fc fde9 	bl	8008b8e <dwt_readfromdevice>
 800bfbc:	2500      	movs	r5, #0
 800bfbe:	f7fe bf79 	b.w	800aeb4 <dwt_ioctl+0x154>
 800bfc2:	bf00      	nop
 800bfc4:	000f0004 	.word	0x000f0004
 800bfc8:	000f0008 	.word	0x000f0008
 800bfcc:	000f000c 	.word	0x000f000c
 800bfd0:	000f0010 	.word	0x000f0010
 800bfd4:	000f0014 	.word	0x000f0014
 800bfd8:	000f0018 	.word	0x000f0018
 800bfdc:	000f001c 	.word	0x000f001c
 800bfe0:	000f0020 	.word	0x000f0020
 800bfe4:	00060004 	.word	0x00060004
 800bfe8:	0011001c 	.word	0x0011001c
 800bfec:	00180034 	.word	0x00180034
 800bff0:	0018002c 	.word	0x0018002c
 800bff4:	000c0014 	.word	0x000c0014
 800bff8:	00180020 	.word	0x00180020
 800bffc:	00180028 	.word	0x00180028
 800c000:	9400      	str	r4, [sp, #0]
 800c002:	2305      	movs	r3, #5
 800c004:	2200      	movs	r2, #0
 800c006:	49ce      	ldr	r1, [pc, #824]	; (800c340 <dwt_ioctl+0x15e0>)
 800c008:	f7fc fdc1 	bl	8008b8e <dwt_readfromdevice>
 800c00c:	2500      	movs	r5, #0
 800c00e:	f7fe bf51 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c012:	2c00      	cmp	r4, #0
 800c014:	f000 8634 	beq.w	800cc80 <dwt_ioctl+0x1f20>
 800c018:	2200      	movs	r2, #0
 800c01a:	211c      	movs	r1, #28
 800c01c:	f7fc fdc1 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c020:	6020      	str	r0, [r4, #0]
 800c022:	2500      	movs	r5, #0
 800c024:	f7fe bf46 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c028:	2c00      	cmp	r4, #0
 800c02a:	f000 862c 	beq.w	800cc86 <dwt_ioctl+0x1f26>
 800c02e:	8825      	ldrh	r5, [r4, #0]
 800c030:	6867      	ldr	r7, [r4, #4]
 800c032:	7a23      	ldrb	r3, [r4, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 8629 	beq.w	800cc8c <dwt_ioctl+0x1f2c>
 800c03a:	463c      	mov	r4, r7
 800c03c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800c040:	4629      	mov	r1, r5
 800c042:	4630      	mov	r0, r6
 800c044:	f7fd fa00 	bl	8009448 <_dwt_otpread>
 800c048:	f844 0b04 	str.w	r0, [r4], #4
 800c04c:	3501      	adds	r5, #1
 800c04e:	b2ad      	uxth	r5, r5
 800c050:	42bc      	cmp	r4, r7
 800c052:	d1f5      	bne.n	800c040 <dwt_ioctl+0x12e0>
 800c054:	2500      	movs	r5, #0
 800c056:	f7fe bf2d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c05a:	2c00      	cmp	r4, #0
 800c05c:	f000 8619 	beq.w	800cc92 <dwt_ioctl+0x1f32>
 800c060:	7823      	ldrb	r3, [r4, #0]
 800c062:	2201      	movs	r2, #1
 800c064:	2124      	movs	r1, #36	; 0x24
 800c066:	f7fd fb9f 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c06a:	2500      	movs	r5, #0
 800c06c:	f7fe bf22 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c070:	f7fe f90e 	bl	800a290 <ull_run_pgfcal>
 800c074:	4605      	mov	r5, r0
 800c076:	f7fe bf1d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c07a:	4611      	mov	r1, r2
 800c07c:	f7fe fa4e 	bl	800a51c <ull_pgf_cal>
 800c080:	4605      	mov	r5, r0
 800c082:	f7fe bf17 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c086:	2c00      	cmp	r4, #0
 800c088:	f000 8606 	beq.w	800cc98 <dwt_ioctl+0x1f38>
 800c08c:	78a5      	ldrb	r5, [r4, #2]
 800c08e:	2101      	movs	r1, #1
 800c090:	f7fd f9b0 	bl	80093f4 <ull_force_clocks>
 800c094:	2100      	movs	r1, #0
 800c096:	4630      	mov	r0, r6
 800c098:	f7fd fe6e 	bl	8009d78 <ull_enable_rf_tx>
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7fd fe9f 	bl	8009de0 <ull_enable_rftx_blocks>
 800c0a2:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	49a6      	ldr	r1, [pc, #664]	; (800c344 <dwt_ioctl+0x15e4>)
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7fd fb7c 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	23ff      	movs	r3, #255	; 0xff
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	49a3      	ldr	r1, [pc, #652]	; (800c348 <dwt_ioctl+0x15e8>)
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f7fd ffaa 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c0c0:	4fa1      	ldr	r7, [pc, #644]	; (800c348 <dwt_ioctl+0x15e8>)
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	462a      	mov	r2, r5
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7fc fd92 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c0ce:	f010 0f01 	tst.w	r0, #1
 800c0d2:	d1f7      	bne.n	800c0c4 <dwt_ioctl+0x1364>
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	499d      	ldr	r1, [pc, #628]	; (800c34c <dwt_ioctl+0x15ec>)
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7fc fd78 	bl	8008bce <dwt_read16bitoffsetreg>
 800c0de:	4605      	mov	r5, r0
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7fd fb03 	bl	80096ec <ull_disable_rftx_blocks>
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	f7fd fb09 	bl	8009700 <ull_disable_rf_tx>
 800c0ee:	2105      	movs	r1, #5
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f7fd f97f 	bl	80093f4 <ull_force_clocks>
 800c0f6:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800c0fa:	8025      	strh	r5, [r4, #0]
 800c0fc:	2500      	movs	r5, #0
 800c0fe:	f7fe bed9 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c102:	2102      	movs	r1, #2
 800c104:	f7fe f844 	bl	800a190 <ull_setdwstate>
 800c108:	2101      	movs	r1, #1
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7fe f840 	bl	800a190 <ull_setdwstate>
 800c110:	2432      	movs	r4, #50	; 0x32
 800c112:	f04f 0814 	mov.w	r8, #20
 800c116:	2700      	movs	r7, #0
 800c118:	2544      	movs	r5, #68	; 0x44
 800c11a:	4640      	mov	r0, r8
 800c11c:	f7f4 fba1 	bl	8000862 <deca_usleep>
 800c120:	463a      	mov	r2, r7
 800c122:	4629      	mov	r1, r5
 800c124:	4630      	mov	r0, r6
 800c126:	f7fc fd64 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c12a:	f010 0f02 	tst.w	r0, #2
 800c12e:	d105      	bne.n	800c13c <dwt_ioctl+0x13dc>
 800c130:	1e63      	subs	r3, r4, #1
 800c132:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800c136:	d1f0      	bne.n	800c11a <dwt_ioctl+0x13ba>
 800c138:	2501      	movs	r5, #1
 800c13a:	e000      	b.n	800c13e <dwt_ioctl+0x13de>
 800c13c:	2500      	movs	r5, #0
 800c13e:	426d      	negs	r5, r5
 800c140:	f7fe beb8 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c144:	2c00      	cmp	r4, #0
 800c146:	f000 85aa 	beq.w	800cc9e <dwt_ioctl+0x1f3e>
 800c14a:	7823      	ldrb	r3, [r4, #0]
 800c14c:	031b      	lsls	r3, r3, #12
 800c14e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c152:	7862      	ldrb	r2, [r4, #1]
 800c154:	2a01      	cmp	r2, #1
 800c156:	bf08      	it	eq
 800c158:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800c162:	2200      	movs	r2, #0
 800c164:	497a      	ldr	r1, [pc, #488]	; (800c350 <dwt_ioctl+0x15f0>)
 800c166:	f7fd fde3 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800c16a:	2500      	movs	r5, #0
 800c16c:	f7fe bea2 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c170:	2c00      	cmp	r4, #0
 800c172:	f000 8597 	beq.w	800cca4 <dwt_ioctl+0x1f44>
 800c176:	6862      	ldr	r2, [r4, #4]
 800c178:	6821      	ldr	r1, [r4, #0]
 800c17a:	f7fd fefb 	bl	8009f74 <ull_setgpiomode>
 800c17e:	2500      	movs	r5, #0
 800c180:	f7fe be98 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c184:	2c00      	cmp	r4, #0
 800c186:	f000 8590 	beq.w	800ccaa <dwt_ioctl+0x1f4a>
 800c18a:	8823      	ldrh	r3, [r4, #0]
 800c18c:	2200      	movs	r2, #0
 800c18e:	4971      	ldr	r1, [pc, #452]	; (800c354 <dwt_ioctl+0x15f4>)
 800c190:	f7fd f91f 	bl	80093d2 <dwt_write16bitoffsetreg>
 800c194:	2500      	movs	r5, #0
 800c196:	f7fe be8d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c19a:	2c00      	cmp	r4, #0
 800c19c:	f000 8588 	beq.w	800ccb0 <dwt_ioctl+0x1f50>
 800c1a0:	6862      	ldr	r2, [r4, #4]
 800c1a2:	8821      	ldrh	r1, [r4, #0]
 800c1a4:	f7fe f9ea 	bl	800a57c <ull_setgpiovalue>
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	f7fe be83 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c1ae:	2c00      	cmp	r4, #0
 800c1b0:	f000 8581 	beq.w	800ccb6 <dwt_ioctl+0x1f56>
 800c1b4:	7865      	ldrb	r5, [r4, #1]
 800c1b6:	7823      	ldrb	r3, [r4, #0]
 800c1b8:	b18b      	cbz	r3, 800c1de <dwt_ioctl+0x147e>
 800c1ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1bc:	2200      	movs	r2, #0
 800c1be:	739a      	strb	r2, [r3, #14]
 800c1c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1c4:	2208      	movs	r2, #8
 800c1c6:	b1e5      	cbz	r5, 800c202 <dwt_ioctl+0x14a2>
 800c1c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1cc:	9200      	str	r2, [sp, #0]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2110      	movs	r1, #16
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7fd fdac 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800c1d8:	2500      	movs	r5, #0
 800c1da:	f7fe be6b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c1de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	739a      	strb	r2, [r3, #14]
 800c1e4:	2318      	movs	r3, #24
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	495b      	ldr	r1, [pc, #364]	; (800c358 <dwt_ioctl+0x15f8>)
 800c1ea:	f7fd f94f 	bl	800948c <dwt_write32bitoffsetreg>
 800c1ee:	23e8      	movs	r3, #232	; 0xe8
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	495a      	ldr	r1, [pc, #360]	; (800c35c <dwt_ioctl+0x15fc>)
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f7fd f949 	bl	800948c <dwt_write32bitoffsetreg>
 800c1fa:	f06f 0308 	mvn.w	r3, #8
 800c1fe:	2200      	movs	r2, #0
 800c200:	e7e1      	b.n	800c1c6 <dwt_ioctl+0x1466>
 800c202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c206:	e7e1      	b.n	800c1cc <dwt_ioctl+0x146c>
 800c208:	2c00      	cmp	r4, #0
 800c20a:	f000 8557 	beq.w	800ccbc <dwt_ioctl+0x1f5c>
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	2200      	movs	r2, #0
 800c212:	2130      	movs	r1, #48	; 0x30
 800c214:	f7fd f93a 	bl	800948c <dwt_write32bitoffsetreg>
 800c218:	2500      	movs	r5, #0
 800c21a:	f7fe be4b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c21e:	2c00      	cmp	r4, #0
 800c220:	f000 854f 	beq.w	800ccc2 <dwt_ioctl+0x1f62>
 800c224:	2200      	movs	r2, #0
 800c226:	4629      	mov	r1, r5
 800c228:	f7fc fcbb 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c22c:	6020      	str	r0, [r4, #0]
 800c22e:	2500      	movs	r5, #0
 800c230:	f7fe be40 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c234:	4623      	mov	r3, r4
 800c236:	2200      	movs	r2, #0
 800c238:	4629      	mov	r1, r5
 800c23a:	f7fd f927 	bl	800948c <dwt_write32bitoffsetreg>
 800c23e:	2500      	movs	r5, #0
 800c240:	f7fe be38 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c244:	2c00      	cmp	r4, #0
 800c246:	f000 853f 	beq.w	800ccc8 <dwt_ioctl+0x1f68>
 800c24a:	2203      	movs	r2, #3
 800c24c:	4944      	ldr	r1, [pc, #272]	; (800c360 <dwt_ioctl+0x1600>)
 800c24e:	f7fc fcd0 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c252:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800c256:	7020      	strb	r0, [r4, #0]
 800c258:	2500      	movs	r5, #0
 800c25a:	f7fe be2b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c25e:	2c00      	cmp	r4, #0
 800c260:	f000 8535 	beq.w	800ccce <dwt_ioctl+0x1f6e>
 800c264:	6823      	ldr	r3, [r4, #0]
 800c266:	2200      	movs	r2, #0
 800c268:	2144      	movs	r1, #68	; 0x44
 800c26a:	f7fd f90f 	bl	800948c <dwt_write32bitoffsetreg>
 800c26e:	2500      	movs	r5, #0
 800c270:	f7fe be20 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c274:	2c00      	cmp	r4, #0
 800c276:	f000 852d 	beq.w	800ccd4 <dwt_ioctl+0x1f74>
 800c27a:	8823      	ldrh	r3, [r4, #0]
 800c27c:	2200      	movs	r2, #0
 800c27e:	2148      	movs	r1, #72	; 0x48
 800c280:	f7fd f8a7 	bl	80093d2 <dwt_write16bitoffsetreg>
 800c284:	2500      	movs	r5, #0
 800c286:	f7fe be15 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c28a:	2c00      	cmp	r4, #0
 800c28c:	f000 8525 	beq.w	800ccda <dwt_ioctl+0x1f7a>
 800c290:	2200      	movs	r2, #0
 800c292:	2144      	movs	r1, #68	; 0x44
 800c294:	f7fc fc85 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c298:	6020      	str	r0, [r4, #0]
 800c29a:	2500      	movs	r5, #0
 800c29c:	f7fe be0a 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	f000 851d 	beq.w	800cce0 <dwt_ioctl+0x1f80>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2148      	movs	r1, #72	; 0x48
 800c2aa:	f7fc fc90 	bl	8008bce <dwt_read16bitoffsetreg>
 800c2ae:	6020      	str	r0, [r4, #0]
 800c2b0:	2500      	movs	r5, #0
 800c2b2:	f7fe bdff 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c2b6:	2c00      	cmp	r4, #0
 800c2b8:	f000 8515 	beq.w	800cce6 <dwt_ioctl+0x1f86>
 800c2bc:	7823      	ldrb	r3, [r4, #0]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	4928      	ldr	r1, [pc, #160]	; (800c364 <dwt_ioctl+0x1604>)
 800c2c2:	f7fd fa71 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c2c6:	2500      	movs	r5, #0
 800c2c8:	f7fe bdf4 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c2cc:	2c00      	cmp	r4, #0
 800c2ce:	f000 850d 	beq.w	800ccec <dwt_ioctl+0x1f8c>
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	2144      	movs	r1, #68	; 0x44
 800c2d6:	f7fc fc8c 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c2da:	7020      	strb	r0, [r4, #0]
 800c2dc:	2500      	movs	r5, #0
 800c2de:	f7fe bde9 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c2e2:	2c00      	cmp	r4, #0
 800c2e4:	f000 8505 	beq.w	800ccf2 <dwt_ioctl+0x1f92>
 800c2e8:	f7fd fa6a 	bl	80097c0 <ull_getframelength>
 800c2ec:	6020      	str	r0, [r4, #0]
 800c2ee:	2500      	movs	r5, #0
 800c2f0:	f7fe bde0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c2f4:	2c00      	cmp	r4, #0
 800c2f6:	f000 84ff 	beq.w	800ccf8 <dwt_ioctl+0x1f98>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	491a      	ldr	r1, [pc, #104]	; (800c368 <dwt_ioctl+0x1608>)
 800c2fe:	f7fc fc66 	bl	8008bce <dwt_read16bitoffsetreg>
 800c302:	8020      	strh	r0, [r4, #0]
 800c304:	2500      	movs	r5, #0
 800c306:	f7fe bdd5 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c30a:	2c00      	cmp	r4, #0
 800c30c:	f000 84f7 	beq.w	800ccfe <dwt_ioctl+0x1f9e>
 800c310:	2200      	movs	r2, #0
 800c312:	4916      	ldr	r1, [pc, #88]	; (800c36c <dwt_ioctl+0x160c>)
 800c314:	f7fc fc45 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c318:	6020      	str	r0, [r4, #0]
 800c31a:	2500      	movs	r5, #0
 800c31c:	f7fe bdca 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c320:	2c00      	cmp	r4, #0
 800c322:	f000 84ef 	beq.w	800cd04 <dwt_ioctl+0x1fa4>
 800c326:	8823      	ldrh	r3, [r4, #0]
 800c328:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c332:	2200      	movs	r2, #0
 800c334:	490d      	ldr	r1, [pc, #52]	; (800c36c <dwt_ioctl+0x160c>)
 800c336:	f7fe f889 	bl	800a44c <dwt_modify16bitoffsetreg>
 800c33a:	2500      	movs	r5, #0
 800c33c:	f7fe bdba 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c340:	000c0008 	.word	0x000c0008
 800c344:	0007001c 	.word	0x0007001c
 800c348:	00080010 	.word	0x00080010
 800c34c:	00080014 	.word	0x00080014
 800c350:	00070014 	.word	0x00070014
 800c354:	00050008 	.word	0x00050008
 800c358:	001f000c 	.word	0x001f000c
 800c35c:	001f0010 	.word	0x001f0010
 800c360:	00030060 	.word	0x00030060
 800c364:	00010018 	.word	0x00010018
 800c368:	0005002c 	.word	0x0005002c
 800c36c:	000e001c 	.word	0x000e001c
 800c370:	2c00      	cmp	r4, #0
 800c372:	f000 84ca 	beq.w	800cd0a <dwt_ioctl+0x1faa>
 800c376:	88a7      	ldrh	r7, [r4, #4]
 800c378:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800c37c:	7b23      	ldrb	r3, [r4, #12]
 800c37e:	9306      	str	r3, [sp, #24]
 800c380:	6922      	ldr	r2, [r4, #16]
 800c382:	9204      	str	r2, [sp, #16]
 800c384:	6962      	ldr	r2, [r4, #20]
 800c386:	9205      	str	r2, [sp, #20]
 800c388:	f00b 0203 	and.w	r2, fp, #3
 800c38c:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800c390:	2b05      	cmp	r3, #5
 800c392:	d145      	bne.n	800c420 <dwt_ioctl+0x16c0>
 800c394:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800c398:	bf28      	it	cs
 800c39a:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800c39e:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800c6d8 <dwt_ioctl+0x1978>
 800c3a2:	2f04      	cmp	r7, #4
 800c3a4:	d805      	bhi.n	800c3b2 <dwt_ioctl+0x1652>
 800c3a6:	eb09 0300 	add.w	r3, r9, r0
 800c3aa:	785b      	ldrb	r3, [r3, #1]
 800c3ac:	3b05      	subs	r3, #5
 800c3ae:	429f      	cmp	r7, r3
 800c3b0:	db3e      	blt.n	800c430 <dwt_ioctl+0x16d0>
 800c3b2:	2a01      	cmp	r2, #1
 800c3b4:	d87c      	bhi.n	800c4b0 <dwt_ioctl+0x1750>
 800c3b6:	4bc4      	ldr	r3, [pc, #784]	; (800c6c8 <dwt_ioctl+0x1968>)
 800c3b8:	5c99      	ldrb	r1, [r3, r2]
 800c3ba:	463e      	mov	r6, r7
 800c3bc:	42b9      	cmp	r1, r7
 800c3be:	da79      	bge.n	800c4b4 <dwt_ioctl+0x1754>
 800c3c0:	1c55      	adds	r5, r2, #1
 800c3c2:	fa53 f585 	uxtab	r5, r3, r5
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	440b      	add	r3, r1
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	3201      	adds	r2, #1
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	2a02      	cmp	r2, #2
 800c3d2:	d005      	beq.n	800c3e0 <dwt_ioctl+0x1680>
 800c3d4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c3d8:	eba6 0c03 	sub.w	ip, r6, r3
 800c3dc:	4561      	cmp	r1, ip
 800c3de:	dbf3      	blt.n	800c3c8 <dwt_ioctl+0x1668>
 800c3e0:	429f      	cmp	r7, r3
 800c3e2:	bf08      	it	eq
 800c3e4:	9003      	streq	r0, [sp, #12]
 800c3e6:	d069      	beq.n	800c4bc <dwt_ioctl+0x175c>
 800c3e8:	f107 0805 	add.w	r8, r7, #5
 800c3ec:	fa1f f888 	uxth.w	r8, r8
 800c3f0:	2580      	movs	r5, #128	; 0x80
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	9107      	str	r1, [sp, #28]
 800c3f6:	9103      	str	r1, [sp, #12]
 800c3f8:	9108      	str	r1, [sp, #32]
 800c3fa:	460e      	mov	r6, r1
 800c3fc:	2105      	movs	r1, #5
 800c3fe:	46be      	mov	lr, r7
 800c400:	428f      	cmp	r7, r1
 800c402:	bf38      	it	cc
 800c404:	468e      	movcc	lr, r1
 800c406:	f1ae 0e05 	sub.w	lr, lr, #5
 800c40a:	fa1f fe8e 	uxth.w	lr, lr
 800c40e:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800c6c8 <dwt_ioctl+0x1968>
 800c412:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c416:	468b      	mov	fp, r1
 800c418:	46bc      	mov	ip, r7
 800c41a:	4637      	mov	r7, r6
 800c41c:	f000 bcec 	b.w	800cdf8 <dwt_ioctl+0x2098>
 800c420:	f240 1331 	movw	r3, #305	; 0x131
 800c424:	429f      	cmp	r7, r3
 800c426:	bf28      	it	cs
 800c428:	461f      	movcs	r7, r3
 800c42a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800c6dc <dwt_ioctl+0x197c>
 800c42e:	e7b8      	b.n	800c3a2 <dwt_ioctl+0x1642>
 800c430:	2300      	movs	r3, #0
 800c432:	9a05      	ldr	r2, [sp, #20]
 800c434:	8013      	strh	r3, [r2, #0]
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	f8c2 b000 	str.w	fp, [r2]
 800c43c:	e04d      	b.n	800c4da <dwt_ioctl+0x177a>
 800c43e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800c442:	2300      	movs	r3, #0
 800c444:	9a05      	ldr	r2, [sp, #20]
 800c446:	8013      	strh	r3, [r2, #0]
 800c448:	9b04      	ldr	r3, [sp, #16]
 800c44a:	f8c3 b000 	str.w	fp, [r3]
 800c44e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c452:	e042      	b.n	800c4da <dwt_ioctl+0x177a>
 800c454:	fa1f fb81 	uxth.w	fp, r1
 800c458:	9207      	str	r2, [sp, #28]
 800c45a:	9003      	str	r0, [sp, #12]
 800c45c:	9308      	str	r3, [sp, #32]
 800c45e:	2701      	movs	r7, #1
 800c460:	f000 bcdb 	b.w	800ce1a <dwt_ioctl+0x20ba>
 800c464:	2f00      	cmp	r7, #0
 800c466:	f040 849b 	bne.w	800cda0 <dwt_ioctl+0x2040>
 800c46a:	4598      	cmp	r8, r3
 800c46c:	f200 84b0 	bhi.w	800cdd0 <dwt_ioctl+0x2070>
 800c470:	2e00      	cmp	r6, #0
 800c472:	d039      	beq.n	800c4e8 <dwt_ioctl+0x1788>
 800c474:	283f      	cmp	r0, #63	; 0x3f
 800c476:	f000 84d5 	beq.w	800ce24 <dwt_ioctl+0x20c4>
 800c47a:	2700      	movs	r7, #0
 800c47c:	f819 1000 	ldrb.w	r1, [r9, r0]
 800c480:	1a5b      	subs	r3, r3, r1
 800c482:	b29b      	uxth	r3, r3
 800c484:	1e46      	subs	r6, r0, #1
 800c486:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800c48a:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800c48e:	bf18      	it	ne
 800c490:	2601      	movne	r6, #1
 800c492:	f000 bca9 	b.w	800cde8 <dwt_ioctl+0x2088>
 800c496:	9906      	ldr	r1, [sp, #24]
 800c498:	2909      	cmp	r1, #9
 800c49a:	f040 84c9 	bne.w	800ce30 <dwt_ioctl+0x20d0>
 800c49e:	213f      	movs	r1, #63	; 0x3f
 800c4a0:	9103      	str	r1, [sp, #12]
 800c4a2:	e00b      	b.n	800c4bc <dwt_ioctl+0x175c>
 800c4a4:	b2b3      	uxth	r3, r6
 800c4a6:	3201      	adds	r2, #1
 800c4a8:	b2d2      	uxtb	r2, r2
 800c4aa:	213f      	movs	r1, #63	; 0x3f
 800c4ac:	9103      	str	r1, [sp, #12]
 800c4ae:	e005      	b.n	800c4bc <dwt_ioctl+0x175c>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e795      	b.n	800c3e0 <dwt_ioctl+0x1680>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	e793      	b.n	800c3e0 <dwt_ioctl+0x1680>
 800c4b8:	9003      	str	r0, [sp, #12]
 800c4ba:	4663      	mov	r3, ip
 800c4bc:	9905      	ldr	r1, [sp, #20]
 800c4be:	800b      	strh	r3, [r1, #0]
 800c4c0:	9b03      	ldr	r3, [sp, #12]
 800c4c2:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800c4c6:	b2d2      	uxtb	r2, r2
 800c4c8:	0413      	lsls	r3, r2, #16
 800c4ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c4d4:	9a04      	ldr	r2, [sp, #16]
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	6023      	str	r3, [r4, #0]
 800c4dc:	2500      	movs	r5, #0
 800c4de:	f7fe bce9 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	9b08      	ldr	r3, [sp, #32]
 800c4e6:	e7e9      	b.n	800c4bc <dwt_ioctl+0x175c>
 800c4e8:	9003      	str	r0, [sp, #12]
 800c4ea:	e7e7      	b.n	800c4bc <dwt_ioctl+0x175c>
 800c4ec:	9a07      	ldr	r2, [sp, #28]
 800c4ee:	9b08      	ldr	r3, [sp, #32]
 800c4f0:	e7e4      	b.n	800c4bc <dwt_ioctl+0x175c>
 800c4f2:	213f      	movs	r1, #63	; 0x3f
 800c4f4:	9103      	str	r1, [sp, #12]
 800c4f6:	e7e1      	b.n	800c4bc <dwt_ioctl+0x175c>
 800c4f8:	2c00      	cmp	r4, #0
 800c4fa:	f000 8409 	beq.w	800cd10 <dwt_ioctl+0x1fb0>
 800c4fe:	7827      	ldrb	r7, [r4, #0]
 800c500:	7864      	ldrb	r4, [r4, #1]
 800c502:	f7f4 f985 	bl	8000810 <decamutexon>
 800c506:	4605      	mov	r5, r0
 800c508:	2c02      	cmp	r4, #2
 800c50a:	d00e      	beq.n	800c52a <dwt_ioctl+0x17ca>
 800c50c:	2c04      	cmp	r4, #4
 800c50e:	d00c      	beq.n	800c52a <dwt_ioctl+0x17ca>
 800c510:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800c514:	2c01      	cmp	r4, #1
 800c516:	d01a      	beq.n	800c54e <dwt_ioctl+0x17ee>
 800c518:	43fb      	mvns	r3, r7
 800c51a:	2200      	movs	r2, #0
 800c51c:	9200      	str	r2, [sp, #0]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	496a      	ldr	r1, [pc, #424]	; (800c6cc <dwt_ioctl+0x196c>)
 800c522:	4630      	mov	r0, r6
 800c524:	f7fd fd76 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c528:	e005      	b.n	800c536 <dwt_ioctl+0x17d6>
 800c52a:	463b      	mov	r3, r7
 800c52c:	2200      	movs	r2, #0
 800c52e:	4967      	ldr	r1, [pc, #412]	; (800c6cc <dwt_ioctl+0x196c>)
 800c530:	4630      	mov	r0, r6
 800c532:	f7fd f939 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c536:	463b      	mov	r3, r7
 800c538:	2200      	movs	r2, #0
 800c53a:	4965      	ldr	r1, [pc, #404]	; (800c6d0 <dwt_ioctl+0x1970>)
 800c53c:	4630      	mov	r0, r6
 800c53e:	f7fc ffa5 	bl	800948c <dwt_write32bitoffsetreg>
 800c542:	4628      	mov	r0, r5
 800c544:	f7f4 f975 	bl	8000832 <decamutexoff>
 800c548:	2500      	movs	r5, #0
 800c54a:	f7fe bcb3 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c54e:	9700      	str	r7, [sp, #0]
 800c550:	23ff      	movs	r3, #255	; 0xff
 800c552:	2200      	movs	r2, #0
 800c554:	495d      	ldr	r1, [pc, #372]	; (800c6cc <dwt_ioctl+0x196c>)
 800c556:	4630      	mov	r0, r6
 800c558:	f7fd fd5c 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c55c:	e7eb      	b.n	800c536 <dwt_ioctl+0x17d6>
 800c55e:	2302      	movs	r3, #2
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	2500      	movs	r5, #0
 800c564:	9500      	str	r5, [sp, #0]
 800c566:	462b      	mov	r3, r5
 800c568:	462a      	mov	r2, r5
 800c56a:	211a      	movs	r1, #26
 800c56c:	f7fc fa91 	bl	8008a92 <dwt_xfer3xxx>
 800c570:	f7fe bca0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c574:	f7fe fbe0 	bl	800ad38 <ull_softreset_fcmd>
 800c578:	2500      	movs	r5, #0
 800c57a:	f7fe bc9b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c57e:	f7fe fbc7 	bl	800ad10 <ull_softreset_no_sema_fcmd>
 800c582:	2500      	movs	r5, #0
 800c584:	f7fe bc96 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c588:	2302      	movs	r3, #2
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	2500      	movs	r5, #0
 800c58e:	9500      	str	r5, [sp, #0]
 800c590:	462b      	mov	r3, r5
 800c592:	462a      	mov	r2, r5
 800c594:	2114      	movs	r1, #20
 800c596:	f7fc fa7c 	bl	8008a92 <dwt_xfer3xxx>
 800c59a:	f7fe bc8b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c59e:	2402      	movs	r4, #2
 800c5a0:	9401      	str	r4, [sp, #4]
 800c5a2:	2500      	movs	r5, #0
 800c5a4:	9500      	str	r5, [sp, #0]
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	462a      	mov	r2, r5
 800c5aa:	2115      	movs	r1, #21
 800c5ac:	f7fc fa71 	bl	8008a92 <dwt_xfer3xxx>
 800c5b0:	9401      	str	r4, [sp, #4]
 800c5b2:	9500      	str	r5, [sp, #0]
 800c5b4:	462b      	mov	r3, r5
 800c5b6:	462a      	mov	r2, r5
 800c5b8:	2115      	movs	r1, #21
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7fc fa69 	bl	8008a92 <dwt_xfer3xxx>
 800c5c0:	f7fe bc78 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	9500      	str	r5, [sp, #0]
 800c5cc:	462b      	mov	r3, r5
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	2116      	movs	r1, #22
 800c5d2:	f7fc fa5e 	bl	8008a92 <dwt_xfer3xxx>
 800c5d6:	f7fe bc6d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c5da:	2c00      	cmp	r4, #0
 800c5dc:	f000 839b 	beq.w	800cd16 <dwt_ioctl+0x1fb6>
 800c5e0:	b93a      	cbnz	r2, 800c5f2 <dwt_ioctl+0x1892>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c5e8:	f7fc fb03 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c5ec:	7020      	strb	r0, [r4, #0]
 800c5ee:	f7fe bc61 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c5f8:	f7fc fafb 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c5fc:	7020      	strb	r0, [r4, #0]
 800c5fe:	2500      	movs	r5, #0
 800c600:	f7fe bc58 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c604:	2c00      	cmp	r4, #0
 800c606:	f000 8389 	beq.w	800cd1c <dwt_ioctl+0x1fbc>
 800c60a:	7824      	ldrb	r4, [r4, #0]
 800c60c:	2200      	movs	r2, #0
 800c60e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c612:	f7fc faee 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c616:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800c61a:	4323      	orrs	r3, r4
 800c61c:	2200      	movs	r2, #0
 800c61e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c622:	4630      	mov	r0, r6
 800c624:	f7fd f8c0 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c628:	2500      	movs	r5, #0
 800c62a:	f7fe bc43 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c62e:	2c00      	cmp	r4, #0
 800c630:	f000 8377 	beq.w	800cd22 <dwt_ioctl+0x1fc2>
 800c634:	7824      	ldrb	r4, [r4, #0]
 800c636:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800c63a:	d01e      	beq.n	800c67a <dwt_ioctl+0x191a>
 800c63c:	2d01      	cmp	r5, #1
 800c63e:	f040 8373 	bne.w	800cd28 <dwt_ioctl+0x1fc8>
 800c642:	2502      	movs	r5, #2
 800c644:	2201      	movs	r2, #1
 800c646:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7fc fad1 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800c650:	b9ac      	cbnz	r4, 800c67e <dwt_ioctl+0x191e>
 800c652:	ea20 0305 	bic.w	r3, r0, r5
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2201      	movs	r2, #1
 800c65a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c65e:	4630      	mov	r0, r6
 800c660:	f7fd f8a2 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c664:	2200      	movs	r2, #0
 800c666:	2110      	movs	r1, #16
 800c668:	4630      	mov	r0, r6
 800c66a:	f7fc fa9a 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c66e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800c672:	d00b      	beq.n	800c68c <dwt_ioctl+0x192c>
 800c674:	2500      	movs	r5, #0
 800c676:	f7fe bc1d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c67a:	2504      	movs	r5, #4
 800c67c:	e7e2      	b.n	800c644 <dwt_ioctl+0x18e4>
 800c67e:	2c01      	cmp	r4, #1
 800c680:	f040 8356 	bne.w	800cd30 <dwt_ioctl+0x1fd0>
 800c684:	ea40 0305 	orr.w	r3, r0, r5
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	e7e5      	b.n	800c658 <dwt_ioctl+0x18f8>
 800c68c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c696:	2200      	movs	r2, #0
 800c698:	2110      	movs	r1, #16
 800c69a:	4630      	mov	r0, r6
 800c69c:	f7fd fb48 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800c6a0:	2500      	movs	r5, #0
 800c6a2:	f7fe bc07 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c6a6:	2c00      	cmp	r4, #0
 800c6a8:	f000 8346 	beq.w	800cd38 <dwt_ioctl+0x1fd8>
 800c6ac:	7823      	ldrb	r3, [r4, #0]
 800c6ae:	035b      	lsls	r3, r3, #13
 800c6b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	4905      	ldr	r1, [pc, #20]	; (800c6d4 <dwt_ioctl+0x1974>)
 800c6be:	f7fd fec5 	bl	800a44c <dwt_modify16bitoffsetreg>
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	f7fe bbf6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c6c8:	0801211c 	.word	0x0801211c
 800c6cc:	0001001c 	.word	0x0001001c
 800c6d0:	00010018 	.word	0x00010018
 800c6d4:	000e000c 	.word	0x000e000c
 800c6d8:	0801209c 	.word	0x0801209c
 800c6dc:	080120dc 	.word	0x080120dc
 800c6e0:	2c00      	cmp	r4, #0
 800c6e2:	f000 832c 	beq.w	800cd3e <dwt_ioctl+0x1fde>
 800c6e6:	7825      	ldrb	r5, [r4, #0]
 800c6e8:	6862      	ldr	r2, [r4, #4]
 800c6ea:	2a01      	cmp	r2, #1
 800c6ec:	bf15      	itete	ne
 800c6ee:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800c6f2:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800c6f6:	27df      	movne	r7, #223	; 0xdf
 800c6f8:	27ef      	moveq	r7, #239	; 0xef
 800c6fa:	bf14      	ite	ne
 800c6fc:	f04f 0820 	movne.w	r8, #32
 800c700:	f04f 0810 	moveq.w	r8, #16
 800c704:	2400      	movs	r4, #0
 800c706:	9400      	str	r4, [sp, #0]
 800c708:	4622      	mov	r2, r4
 800c70a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c70e:	f7fd fb0f 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800c712:	9400      	str	r4, [sp, #0]
 800c714:	463b      	mov	r3, r7
 800c716:	4622      	mov	r2, r4
 800c718:	49be      	ldr	r1, [pc, #760]	; (800ca14 <dwt_ioctl+0x1cb4>)
 800c71a:	4630      	mov	r0, r6
 800c71c:	f7fd fc7a 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c720:	2d01      	cmp	r5, #1
 800c722:	d003      	beq.n	800c72c <dwt_ioctl+0x19cc>
 800c724:	b165      	cbz	r5, 800c740 <dwt_ioctl+0x19e0>
 800c726:	2500      	movs	r5, #0
 800c728:	f7fe bbc4 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c72c:	4625      	mov	r5, r4
 800c72e:	9400      	str	r4, [sp, #0]
 800c730:	463b      	mov	r3, r7
 800c732:	4622      	mov	r2, r4
 800c734:	49b8      	ldr	r1, [pc, #736]	; (800ca18 <dwt_ioctl+0x1cb8>)
 800c736:	4630      	mov	r0, r6
 800c738:	f7fd fc6c 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c73c:	f7fe bbba 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c740:	f8cd 8000 	str.w	r8, [sp]
 800c744:	23ff      	movs	r3, #255	; 0xff
 800c746:	2200      	movs	r2, #0
 800c748:	49b3      	ldr	r1, [pc, #716]	; (800ca18 <dwt_ioctl+0x1cb8>)
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7fd fc62 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c750:	f7fe bbb0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c754:	2c00      	cmp	r4, #0
 800c756:	f000 82f5 	beq.w	800cd44 <dwt_ioctl+0x1fe4>
 800c75a:	7822      	ldrb	r2, [r4, #0]
 800c75c:	f012 0f01 	tst.w	r2, #1
 800c760:	d02d      	beq.n	800c7be <dwt_ioctl+0x1a5e>
 800c762:	0157      	lsls	r7, r2, #5
 800c764:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800c768:	2440      	movs	r4, #64	; 0x40
 800c76a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800c76e:	f012 0f04 	tst.w	r2, #4
 800c772:	d028      	beq.n	800c7c6 <dwt_ioctl+0x1a66>
 800c774:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800c778:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800c77c:	0112      	lsls	r2, r2, #4
 800c77e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c782:	4317      	orrs	r7, r2
 800c784:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c788:	9200      	str	r2, [sp, #0]
 800c78a:	43db      	mvns	r3, r3
 800c78c:	2200      	movs	r2, #0
 800c78e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c792:	4630      	mov	r0, r6
 800c794:	f7fd facc 	bl	8009d30 <dwt_modify32bitoffsetreg>
 800c798:	43e4      	mvns	r4, r4
 800c79a:	b2a4      	uxth	r4, r4
 800c79c:	2500      	movs	r5, #0
 800c79e:	9500      	str	r5, [sp, #0]
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	499b      	ldr	r1, [pc, #620]	; (800ca14 <dwt_ioctl+0x1cb4>)
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7fd fe50 	bl	800a44c <dwt_modify16bitoffsetreg>
 800c7ac:	9700      	str	r7, [sp, #0]
 800c7ae:	4623      	mov	r3, r4
 800c7b0:	462a      	mov	r2, r5
 800c7b2:	4999      	ldr	r1, [pc, #612]	; (800ca18 <dwt_ioctl+0x1cb8>)
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7fd fe49 	bl	800a44c <dwt_modify16bitoffsetreg>
 800c7ba:	f7fe bb7b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c7be:	2700      	movs	r7, #0
 800c7c0:	463c      	mov	r4, r7
 800c7c2:	463b      	mov	r3, r7
 800c7c4:	e7d3      	b.n	800c76e <dwt_ioctl+0x1a0e>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	e7de      	b.n	800c788 <dwt_ioctl+0x1a28>
 800c7ca:	2308      	movs	r3, #8
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	23ff      	movs	r3, #255	; 0xff
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c7d6:	f7fd fc1d 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c7da:	4c90      	ldr	r4, [pc, #576]	; (800ca1c <dwt_ioctl+0x1cbc>)
 800c7dc:	2302      	movs	r3, #2
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	23ff      	movs	r3, #255	; 0xff
 800c7e2:	2203      	movs	r2, #3
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7fd fc14 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c7ec:	2500      	movs	r5, #0
 800c7ee:	9500      	str	r5, [sp, #0]
 800c7f0:	23f7      	movs	r3, #247	; 0xf7
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f7fd fc0b 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c7fe:	9500      	str	r5, [sp, #0]
 800c800:	23fd      	movs	r3, #253	; 0xfd
 800c802:	2203      	movs	r2, #3
 800c804:	4621      	mov	r1, r4
 800c806:	4630      	mov	r0, r6
 800c808:	f7fd fc04 	bl	800a014 <dwt_modify8bitoffsetreg>
 800c80c:	f7fe bb52 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c810:	2c00      	cmp	r4, #0
 800c812:	f000 829a 	beq.w	800cd4a <dwt_ioctl+0x1fea>
 800c816:	8863      	ldrh	r3, [r4, #2]
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800c81e:	7822      	ldrb	r2, [r4, #0]
 800c820:	b10a      	cbz	r2, 800c826 <dwt_ioctl+0x1ac6>
 800c822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	f24f 0307 	movw	r3, #61447	; 0xf007
 800c82c:	2200      	movs	r2, #0
 800c82e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c832:	4630      	mov	r0, r6
 800c834:	f7fd fe0a 	bl	800a44c <dwt_modify16bitoffsetreg>
 800c838:	2500      	movs	r5, #0
 800c83a:	f7fe bb3b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c83e:	2c00      	cmp	r4, #0
 800c840:	f000 8286 	beq.w	800cd50 <dwt_ioctl+0x1ff0>
 800c844:	b2e3      	uxtb	r3, r4
 800c846:	1c9a      	adds	r2, r3, #2
 800c848:	2301      	movs	r3, #1
 800c84a:	4093      	lsls	r3, r2
 800c84c:	3b01      	subs	r3, #1
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2200      	movs	r2, #0
 800c852:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800c856:	f7fc ffa7 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c85a:	2500      	movs	r5, #0
 800c85c:	f7fe bb2a 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c860:	2c00      	cmp	r4, #0
 800c862:	f000 8278 	beq.w	800cd56 <dwt_ioctl+0x1ff6>
 800c866:	7ae3      	ldrb	r3, [r4, #11]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f000 8277 	beq.w	800cd5c <dwt_ioctl+0x1ffc>
 800c86e:	7b63      	ldrb	r3, [r4, #13]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d921      	bls.n	800c8b8 <dwt_ioctl+0x1b58>
 800c874:	7b22      	ldrb	r2, [r4, #12]
 800c876:	4b6a      	ldr	r3, [pc, #424]	; (800ca20 <dwt_ioctl+0x1cc0>)
 800c878:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c87c:	0112      	lsls	r2, r2, #4
 800c87e:	0ad3      	lsrs	r3, r2, #11
 800c880:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800c884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c888:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c88c:	bf28      	it	cs
 800c88e:	3301      	addcs	r3, #1
 800c890:	b29b      	uxth	r3, r3
 800c892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c89c:	2202      	movs	r2, #2
 800c89e:	4961      	ldr	r1, [pc, #388]	; (800ca24 <dwt_ioctl+0x1cc4>)
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7fd fdd3 	bl	800a44c <dwt_modify16bitoffsetreg>
 800c8a6:	2394      	movs	r3, #148	; 0x94
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	495f      	ldr	r1, [pc, #380]	; (800ca28 <dwt_ioctl+0x1cc8>)
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f7fc ff7b 	bl	80097a8 <dwt_write8bitoffsetreg>
 800c8b2:	2500      	movs	r5, #0
 800c8b4:	f7fe bafe 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c8b8:	7b22      	ldrb	r2, [r4, #12]
 800c8ba:	4b59      	ldr	r3, [pc, #356]	; (800ca20 <dwt_ioctl+0x1cc0>)
 800c8bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c8c0:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800c8c4:	fb02 f203 	mul.w	r2, r2, r3
 800c8c8:	0c93      	lsrs	r3, r2, #18
 800c8ca:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800c8ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8d2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c8d6:	bf28      	it	cs
 800c8d8:	3301      	addcs	r3, #1
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	e7d9      	b.n	800c892 <dwt_ioctl+0x1b32>
 800c8de:	2c00      	cmp	r4, #0
 800c8e0:	f000 823f 	beq.w	800cd62 <dwt_ioctl+0x2002>
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4951      	ldr	r1, [pc, #324]	; (800ca2c <dwt_ioctl+0x1ccc>)
 800c8e8:	f7fc f95b 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c8ec:	6020      	str	r0, [r4, #0]
 800c8ee:	2500      	movs	r5, #0
 800c8f0:	f7fe bae0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c8f4:	2c00      	cmp	r4, #0
 800c8f6:	f000 8237 	beq.w	800cd68 <dwt_ioctl+0x2008>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	494c      	ldr	r1, [pc, #304]	; (800ca30 <dwt_ioctl+0x1cd0>)
 800c8fe:	f7fc f950 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c902:	6020      	str	r0, [r4, #0]
 800c904:	2500      	movs	r5, #0
 800c906:	f7fe bad5 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c90a:	2c00      	cmp	r4, #0
 800c90c:	f000 822f 	beq.w	800cd6e <dwt_ioctl+0x200e>
 800c910:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	2500      	movs	r5, #0
 800c918:	f7fe bacc 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c91c:	2c00      	cmp	r4, #0
 800c91e:	f000 8229 	beq.w	800cd74 <dwt_ioctl+0x2014>
 800c922:	2500      	movs	r5, #0
 800c924:	950b      	str	r5, [sp, #44]	; 0x2c
 800c926:	af10      	add	r7, sp, #64	; 0x40
 800c928:	2319      	movs	r3, #25
 800c92a:	f847 3d10 	str.w	r3, [r7, #-16]!
 800c92e:	9700      	str	r7, [sp, #0]
 800c930:	2304      	movs	r3, #4
 800c932:	462a      	mov	r2, r5
 800c934:	493f      	ldr	r1, [pc, #252]	; (800ca34 <dwt_ioctl+0x1cd4>)
 800c936:	f7fc fd41 	bl	80093bc <dwt_writetodevice>
 800c93a:	f641 7348 	movw	r3, #8008	; 0x1f48
 800c93e:	930c      	str	r3, [sp, #48]	; 0x30
 800c940:	9700      	str	r7, [sp, #0]
 800c942:	2304      	movs	r3, #4
 800c944:	462a      	mov	r2, r5
 800c946:	493c      	ldr	r1, [pc, #240]	; (800ca38 <dwt_ioctl+0x1cd8>)
 800c948:	4630      	mov	r0, r6
 800c94a:	f7fc fd37 	bl	80093bc <dwt_writetodevice>
 800c94e:	ab0b      	add	r3, sp, #44	; 0x2c
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	2304      	movs	r3, #4
 800c954:	462a      	mov	r2, r5
 800c956:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800c95a:	4630      	mov	r0, r6
 800c95c:	f7fc f917 	bl	8008b8e <dwt_readfromdevice>
 800c960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c962:	6023      	str	r3, [r4, #0]
 800c964:	f7fe baa6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c968:	2c00      	cmp	r4, #0
 800c96a:	f000 8206 	beq.w	800cd7a <dwt_ioctl+0x201a>
 800c96e:	2200      	movs	r2, #0
 800c970:	4932      	ldr	r1, [pc, #200]	; (800ca3c <dwt_ioctl+0x1cdc>)
 800c972:	f7fc f916 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c976:	b280      	uxth	r0, r0
 800c978:	6020      	str	r0, [r4, #0]
 800c97a:	2200      	movs	r2, #0
 800c97c:	4930      	ldr	r1, [pc, #192]	; (800ca40 <dwt_ioctl+0x1ce0>)
 800c97e:	4630      	mov	r0, r6
 800c980:	f7fc f90f 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c984:	0d43      	lsrs	r3, r0, #21
 800c986:	019b      	lsls	r3, r3, #6
 800c988:	b29b      	uxth	r3, r3
 800c98a:	6063      	str	r3, [r4, #4]
 800c98c:	2500      	movs	r5, #0
 800c98e:	f7fe ba91 	b.w	800aeb4 <dwt_ioctl+0x154>
 800c992:	2c00      	cmp	r4, #0
 800c994:	f000 81f4 	beq.w	800cd80 <dwt_ioctl+0x2020>
 800c998:	7d63      	ldrb	r3, [r4, #21]
 800c99a:	b133      	cbz	r3, 800c9aa <dwt_ioctl+0x1c4a>
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d05b      	beq.n	800ca58 <dwt_ioctl+0x1cf8>
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	f000 8082 	beq.w	800caaa <dwt_ioctl+0x1d4a>
 800c9a6:	23ff      	movs	r3, #255	; 0xff
 800c9a8:	e02f      	b.n	800ca0a <dwt_ioctl+0x1caa>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	4925      	ldr	r1, [pc, #148]	; (800ca44 <dwt_ioctl+0x1ce4>)
 800c9ae:	f7fc f8f8 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c9b2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c9b6:	6020      	str	r0, [r4, #0]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4923      	ldr	r1, [pc, #140]	; (800ca48 <dwt_ioctl+0x1ce8>)
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7fc f8f0 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c9c2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9c6:	6060      	str	r0, [r4, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	4920      	ldr	r1, [pc, #128]	; (800ca4c <dwt_ioctl+0x1cec>)
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7fc f8e8 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c9d2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9d6:	60a0      	str	r0, [r4, #8]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	491d      	ldr	r1, [pc, #116]	; (800ca50 <dwt_ioctl+0x1cf0>)
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f7fc f8e0 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c9e2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9e6:	60e0      	str	r0, [r4, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	491a      	ldr	r1, [pc, #104]	; (800ca54 <dwt_ioctl+0x1cf4>)
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f7fc f8d8 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800c9f2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c9f6:	6120      	str	r0, [r4, #16]
 800c9f8:	2203      	movs	r2, #3
 800c9fa:	490c      	ldr	r1, [pc, #48]	; (800ca2c <dwt_ioctl+0x1ccc>)
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7fc f8f8 	bl	8008bf2 <dwt_read8bitoffsetreg>
 800ca02:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800ca06:	7520      	strb	r0, [r4, #20]
 800ca08:	2300      	movs	r3, #0
 800ca0a:	75a3      	strb	r3, [r4, #22]
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	f7fe ba51 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ca12:	bf00      	nop
 800ca14:	00050008 	.word	0x00050008
 800ca18:	0005000c 	.word	0x0005000c
 800ca1c:	00110008 	.word	0x00110008
 800ca20:	08012128 	.word	0x08012128
 800ca24:	000e0014 	.word	0x000e0014
 800ca28:	000e0018 	.word	0x000e0018
 800ca2c:	00030060 	.word	0x00030060
 800ca30:	000f004c 	.word	0x000f004c
 800ca34:	001f0004 	.word	0x001f0004
 800ca38:	001f0008 	.word	0x001f0008
 800ca3c:	000c0048 	.word	0x000c0048
 800ca40:	000c0028 	.word	0x000c0028
 800ca44:	000c0058 	.word	0x000c0058
 800ca48:	000c0030 	.word	0x000c0030
 800ca4c:	000c0034 	.word	0x000c0034
 800ca50:	000c0038 	.word	0x000c0038
 800ca54:	000c002c 	.word	0x000c002c
 800ca58:	2200      	movs	r2, #0
 800ca5a:	49d4      	ldr	r1, [pc, #848]	; (800cdac <dwt_ioctl+0x204c>)
 800ca5c:	f7fc f8a1 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800ca60:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800ca64:	6020      	str	r0, [r4, #0]
 800ca66:	2200      	movs	r2, #0
 800ca68:	49d1      	ldr	r1, [pc, #836]	; (800cdb0 <dwt_ioctl+0x2050>)
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7fc f899 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800ca70:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ca74:	6060      	str	r0, [r4, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	49ce      	ldr	r1, [pc, #824]	; (800cdb4 <dwt_ioctl+0x2054>)
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f7fc f891 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800ca80:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ca84:	60a0      	str	r0, [r4, #8]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7fc f888 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800ca92:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ca96:	60e0      	str	r0, [r4, #12]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	49c7      	ldr	r1, [pc, #796]	; (800cdb8 <dwt_ioctl+0x2058>)
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7fc f880 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800caa2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800caa6:	6120      	str	r0, [r4, #16]
 800caa8:	e7a6      	b.n	800c9f8 <dwt_ioctl+0x1c98>
 800caaa:	2200      	movs	r2, #0
 800caac:	49c3      	ldr	r1, [pc, #780]	; (800cdbc <dwt_ioctl+0x205c>)
 800caae:	f7fc f878 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800cab2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cab6:	6020      	str	r0, [r4, #0]
 800cab8:	2200      	movs	r2, #0
 800caba:	49c1      	ldr	r1, [pc, #772]	; (800cdc0 <dwt_ioctl+0x2060>)
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7fc f870 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800cac2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cac6:	6060      	str	r0, [r4, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	49be      	ldr	r1, [pc, #760]	; (800cdc4 <dwt_ioctl+0x2064>)
 800cacc:	4630      	mov	r0, r6
 800cace:	f7fc f868 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800cad2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cad6:	60a0      	str	r0, [r4, #8]
 800cad8:	2200      	movs	r2, #0
 800cada:	49bb      	ldr	r1, [pc, #748]	; (800cdc8 <dwt_ioctl+0x2068>)
 800cadc:	4630      	mov	r0, r6
 800cade:	f7fc f860 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800cae2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cae6:	60e0      	str	r0, [r4, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	49b8      	ldr	r1, [pc, #736]	; (800cdcc <dwt_ioctl+0x206c>)
 800caec:	4630      	mov	r0, r6
 800caee:	f7fc f858 	bl	8008ba2 <dwt_read32bitoffsetreg>
 800caf2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800caf6:	6120      	str	r0, [r4, #16]
 800caf8:	e77e      	b.n	800c9f8 <dwt_ioctl+0x1c98>
 800cafa:	2500      	movs	r5, #0
 800cafc:	f7fe b9da 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb00:	2500      	movs	r5, #0
 800cb02:	f7fe b9d7 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb06:	2500      	movs	r5, #0
 800cb08:	f7fe b9d4 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb0c:	2500      	movs	r5, #0
 800cb0e:	f7fe b9d1 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb12:	2500      	movs	r5, #0
 800cb14:	f7fe b9ce 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb18:	2500      	movs	r5, #0
 800cb1a:	f7fe b9cb 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb1e:	2500      	movs	r5, #0
 800cb20:	f7fe b9c8 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb24:	2500      	movs	r5, #0
 800cb26:	f7fe b9c5 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb2a:	2500      	movs	r5, #0
 800cb2c:	f7fe b9c2 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb30:	2500      	movs	r5, #0
 800cb32:	f7fe b9bf 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb36:	2500      	movs	r5, #0
 800cb38:	f7fe b9bc 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb3c:	2500      	movs	r5, #0
 800cb3e:	f7fe b9b9 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb42:	2500      	movs	r5, #0
 800cb44:	f7fe b9b6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb48:	2500      	movs	r5, #0
 800cb4a:	f7fe b9b3 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb4e:	2500      	movs	r5, #0
 800cb50:	f7fe b9b0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb54:	2500      	movs	r5, #0
 800cb56:	f7fe b9ad 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb5a:	2500      	movs	r5, #0
 800cb5c:	f7fe b9aa 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb60:	2500      	movs	r5, #0
 800cb62:	f7fe b9a7 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb66:	2500      	movs	r5, #0
 800cb68:	f7fe b9a4 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	f7fe b9a1 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb72:	2500      	movs	r5, #0
 800cb74:	f7fe b99e 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb78:	2500      	movs	r5, #0
 800cb7a:	f7fe b99b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb7e:	2500      	movs	r5, #0
 800cb80:	f7fe b998 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb84:	2500      	movs	r5, #0
 800cb86:	f7fe b995 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb8a:	2500      	movs	r5, #0
 800cb8c:	f7fe b992 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb90:	2500      	movs	r5, #0
 800cb92:	f7fe b98f 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb96:	2500      	movs	r5, #0
 800cb98:	f7fe b98c 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cb9c:	2500      	movs	r5, #0
 800cb9e:	f7fe b989 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cba2:	2500      	movs	r5, #0
 800cba4:	f7fe b986 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cba8:	2500      	movs	r5, #0
 800cbaa:	f7fe b983 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbae:	2500      	movs	r5, #0
 800cbb0:	f7fe b980 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbb4:	2500      	movs	r5, #0
 800cbb6:	f7fe b97d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbba:	2500      	movs	r5, #0
 800cbbc:	f7fe b97a 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbc0:	2500      	movs	r5, #0
 800cbc2:	f7fe b977 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbc6:	2500      	movs	r5, #0
 800cbc8:	f7fe b974 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbcc:	2500      	movs	r5, #0
 800cbce:	f7fe b971 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbd2:	2500      	movs	r5, #0
 800cbd4:	f7fe b96e 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbd8:	2500      	movs	r5, #0
 800cbda:	f7fe b96b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbde:	2500      	movs	r5, #0
 800cbe0:	f7fe b968 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	f7fe b965 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbea:	2500      	movs	r5, #0
 800cbec:	f7fe b962 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbf0:	2500      	movs	r5, #0
 800cbf2:	f7fe b95f 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbf6:	2500      	movs	r5, #0
 800cbf8:	f7fe b95c 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cbfc:	2500      	movs	r5, #0
 800cbfe:	f7fe b959 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc02:	2500      	movs	r5, #0
 800cc04:	f7fe b956 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc08:	2500      	movs	r5, #0
 800cc0a:	f7fe b953 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc0e:	2500      	movs	r5, #0
 800cc10:	f7fe b950 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc14:	2500      	movs	r5, #0
 800cc16:	f7fe b94d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc1a:	2500      	movs	r5, #0
 800cc1c:	f7fe b94a 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc20:	2500      	movs	r5, #0
 800cc22:	f7fe b947 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc26:	2500      	movs	r5, #0
 800cc28:	f7fe b944 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc2c:	2500      	movs	r5, #0
 800cc2e:	f7fe b941 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc32:	2500      	movs	r5, #0
 800cc34:	f7fe b93e 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc38:	2500      	movs	r5, #0
 800cc3a:	f7fe b93b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc3e:	2500      	movs	r5, #0
 800cc40:	f7fe b938 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc44:	2500      	movs	r5, #0
 800cc46:	f7fe b935 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc4a:	2500      	movs	r5, #0
 800cc4c:	f7fe b932 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc50:	2500      	movs	r5, #0
 800cc52:	f7fe b92f 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc56:	2500      	movs	r5, #0
 800cc58:	f7fe b92c 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc5c:	2500      	movs	r5, #0
 800cc5e:	f7fe b929 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc62:	2500      	movs	r5, #0
 800cc64:	f7fe b926 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc68:	2500      	movs	r5, #0
 800cc6a:	f7fe b923 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc6e:	2500      	movs	r5, #0
 800cc70:	f7fe b920 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc74:	2500      	movs	r5, #0
 800cc76:	f7fe b91d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	f7fe b91a 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc80:	2500      	movs	r5, #0
 800cc82:	f7fe b917 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc86:	2500      	movs	r5, #0
 800cc88:	f7fe b914 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc8c:	2500      	movs	r5, #0
 800cc8e:	f7fe b911 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc92:	2500      	movs	r5, #0
 800cc94:	f7fe b90e 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc98:	2500      	movs	r5, #0
 800cc9a:	f7fe b90b 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cc9e:	2500      	movs	r5, #0
 800cca0:	f7fe b908 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cca4:	2500      	movs	r5, #0
 800cca6:	f7fe b905 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccaa:	2500      	movs	r5, #0
 800ccac:	f7fe b902 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccb0:	2500      	movs	r5, #0
 800ccb2:	f7fe b8ff 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccb6:	2500      	movs	r5, #0
 800ccb8:	f7fe b8fc 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccbc:	2500      	movs	r5, #0
 800ccbe:	f7fe b8f9 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccc2:	2500      	movs	r5, #0
 800ccc4:	f7fe b8f6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccc8:	2500      	movs	r5, #0
 800ccca:	f7fe b8f3 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccce:	2500      	movs	r5, #0
 800ccd0:	f7fe b8f0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccd4:	2500      	movs	r5, #0
 800ccd6:	f7fe b8ed 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccda:	2500      	movs	r5, #0
 800ccdc:	f7fe b8ea 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cce0:	2500      	movs	r5, #0
 800cce2:	f7fe b8e7 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cce6:	2500      	movs	r5, #0
 800cce8:	f7fe b8e4 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccec:	2500      	movs	r5, #0
 800ccee:	f7fe b8e1 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccf2:	2500      	movs	r5, #0
 800ccf4:	f7fe b8de 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccf8:	2500      	movs	r5, #0
 800ccfa:	f7fe b8db 	b.w	800aeb4 <dwt_ioctl+0x154>
 800ccfe:	2500      	movs	r5, #0
 800cd00:	f7fe b8d8 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd04:	2500      	movs	r5, #0
 800cd06:	f7fe b8d5 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd0a:	2500      	movs	r5, #0
 800cd0c:	f7fe b8d2 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd10:	2500      	movs	r5, #0
 800cd12:	f7fe b8cf 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd16:	2500      	movs	r5, #0
 800cd18:	f7fe b8cc 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd1c:	2500      	movs	r5, #0
 800cd1e:	f7fe b8c9 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd22:	2500      	movs	r5, #0
 800cd24:	f7fe b8c6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cd2c:	f7fe b8c2 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cd34:	f7fe b8be 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd38:	2500      	movs	r5, #0
 800cd3a:	f7fe b8bb 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd3e:	2500      	movs	r5, #0
 800cd40:	f7fe b8b8 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd44:	2500      	movs	r5, #0
 800cd46:	f7fe b8b5 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd4a:	2500      	movs	r5, #0
 800cd4c:	f7fe b8b2 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd50:	2500      	movs	r5, #0
 800cd52:	f7fe b8af 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd56:	2500      	movs	r5, #0
 800cd58:	f7fe b8ac 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd5c:	2500      	movs	r5, #0
 800cd5e:	f7fe b8a9 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd62:	2500      	movs	r5, #0
 800cd64:	f7fe b8a6 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd68:	2500      	movs	r5, #0
 800cd6a:	f7fe b8a3 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd6e:	2500      	movs	r5, #0
 800cd70:	f7fe b8a0 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd74:	2500      	movs	r5, #0
 800cd76:	f7fe b89d 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd7a:	2500      	movs	r5, #0
 800cd7c:	f7fe b89a 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd80:	2500      	movs	r5, #0
 800cd82:	f7fe b897 	b.w	800aeb4 <dwt_ioctl+0x154>
 800cd86:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cd8a:	1e5a      	subs	r2, r3, #1
 800cd8c:	b2d2      	uxtb	r2, r2
 800cd8e:	2a01      	cmp	r2, #1
 800cd90:	f67e aeec 	bls.w	800bb6c <dwt_ioctl+0xe0c>
 800cd94:	2202      	movs	r2, #2
 800cd96:	f7fe be93 	b.w	800bac0 <dwt_ioctl+0xd60>
 800cd9a:	2f00      	cmp	r7, #0
 800cd9c:	f43f ab68 	beq.w	800c470 <dwt_ioctl+0x1710>
 800cda0:	f819 1000 	ldrb.w	r1, [r9, r0]
 800cda4:	1a5b      	subs	r3, r3, r1
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	f7ff bb88 	b.w	800c4bc <dwt_ioctl+0x175c>
 800cdac:	000d0020 	.word	0x000d0020
 800cdb0:	000c0064 	.word	0x000c0064
 800cdb4:	000c0068 	.word	0x000c0068
 800cdb8:	000c0060 	.word	0x000c0060
 800cdbc:	000d0068 	.word	0x000d0068
 800cdc0:	000d0040 	.word	0x000d0040
 800cdc4:	000d0044 	.word	0x000d0044
 800cdc8:	000d0048 	.word	0x000d0048
 800cdcc:	000d003c 	.word	0x000d003c
 800cdd0:	283f      	cmp	r0, #63	; 0x3f
 800cdd2:	d027      	beq.n	800ce24 <dwt_ioctl+0x20c4>
 800cdd4:	2e00      	cmp	r6, #0
 800cdd6:	f47f ab51 	bne.w	800c47c <dwt_ioctl+0x171c>
 800cdda:	3001      	adds	r0, #1
 800cddc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cde0:	f819 1000 	ldrb.w	r1, [r9, r0]
 800cde4:	440b      	add	r3, r1
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	459c      	cmp	ip, r3
 800cdea:	f43f ab65 	beq.w	800c4b8 <dwt_ioctl+0x1758>
 800cdee:	3d01      	subs	r5, #1
 800cdf0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800cdf4:	f43f ab23 	beq.w	800c43e <dwt_ioctl+0x16de>
 800cdf8:	459e      	cmp	lr, r3
 800cdfa:	f4bf ab33 	bcs.w	800c464 <dwt_ioctl+0x1704>
 800cdfe:	4598      	cmp	r8, r3
 800ce00:	d9cb      	bls.n	800cd9a <dwt_ioctl+0x203a>
 800ce02:	ebac 0103 	sub.w	r1, ip, r3
 800ce06:	b209      	sxth	r1, r1
 800ce08:	2900      	cmp	r1, #0
 800ce0a:	bfb8      	it	lt
 800ce0c:	4249      	neglt	r1, r1
 800ce0e:	4559      	cmp	r1, fp
 800ce10:	f77f ab20 	ble.w	800c454 <dwt_ioctl+0x16f4>
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	f47f ab64 	bne.w	800c4e2 <dwt_ioctl+0x1782>
 800ce1a:	283f      	cmp	r0, #63	; 0x3f
 800ce1c:	d1da      	bne.n	800cdd4 <dwt_ioctl+0x2074>
 800ce1e:	2f00      	cmp	r7, #0
 800ce20:	f47f ab64 	bne.w	800c4ec <dwt_ioctl+0x178c>
 800ce24:	2a03      	cmp	r2, #3
 800ce26:	f43f ab64 	beq.w	800c4f2 <dwt_ioctl+0x1792>
 800ce2a:	2a02      	cmp	r2, #2
 800ce2c:	f43f ab33 	beq.w	800c496 <dwt_ioctl+0x1736>
 800ce30:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800ce34:	185e      	adds	r6, r3, r1
 800ce36:	4566      	cmp	r6, ip
 800ce38:	f77f ab34 	ble.w	800c4a4 <dwt_ioctl+0x1744>
 800ce3c:	440b      	add	r3, r1
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	3201      	adds	r2, #1
 800ce42:	b2d2      	uxtb	r2, r2
 800ce44:	2700      	movs	r7, #0
 800ce46:	f7ff bb19 	b.w	800c47c <dwt_ioctl+0x171c>
 800ce4a:	bf00      	nop

0800ce4c <_init>:
 800ce4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	4604      	mov	r4, r0
 800ce52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce54:	6819      	ldr	r1, [r3, #0]
 800ce56:	f7fd fe57 	bl	800ab08 <ull_initialise>
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	4798      	blx	r3
 800ce62:	ab03      	add	r3, sp, #12
 800ce64:	2200      	movs	r2, #0
 800ce66:	4611      	mov	r1, r2
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f7fd ff79 	bl	800ad60 <dwt_ioctl>
 800ce6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce72:	6819      	ldr	r1, [r3, #0]
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7fd fc07 	bl	800a688 <ull_configure>
 800ce7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	6859      	ldr	r1, [r3, #4]
 800ce80:	4620      	mov	r0, r4
 800ce82:	f7fd f953 	bl	800a12c <ull_configuretxrf>
 800ce86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8a:	89db      	ldrh	r3, [r3, #14]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ce92:	4620      	mov	r0, r4
 800ce94:	f7fc fa9d 	bl	80093d2 <dwt_write16bitoffsetreg>
 800ce98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9c:	899b      	ldrh	r3, [r3, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	217c      	movs	r1, #124	; 0x7c
 800cea2:	4620      	mov	r0, r4
 800cea4:	f7fc fa95 	bl	80093d2 <dwt_write16bitoffsetreg>
 800cea8:	2100      	movs	r1, #0
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f7fc fb29 	bl	8009502 <ull_setrxaftertxdelay>
 800ceb0:	2500      	movs	r5, #0
 800ceb2:	9500      	str	r5, [sp, #0]
 800ceb4:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800ceb8:	462a      	mov	r2, r5
 800ceba:	2110      	movs	r1, #16
 800cebc:	4620      	mov	r0, r4
 800cebe:	f7fd fac5 	bl	800a44c <dwt_modify16bitoffsetreg>
 800cec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec6:	895a      	ldrh	r2, [r3, #10]
 800cec8:	8919      	ldrh	r1, [r3, #8]
 800ceca:	4620      	mov	r0, r4
 800cecc:	f7fd f9bc 	bl	800a248 <ull_configureframefilter>
 800ced0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ced2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced4:	8a1b      	ldrh	r3, [r3, #16]
 800ced6:	2202      	movs	r2, #2
 800ced8:	210c      	movs	r1, #12
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7fc fa79 	bl	80093d2 <dwt_write16bitoffsetreg>
 800cee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee4:	8a5b      	ldrh	r3, [r3, #18]
 800cee6:	462a      	mov	r2, r5
 800cee8:	210c      	movs	r1, #12
 800ceea:	4620      	mov	r0, r4
 800ceec:	f7fc fa71 	bl	80093d2 <dwt_write16bitoffsetreg>
 800cef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cef2:	7a19      	ldrb	r1, [r3, #8]
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7fd fac3 	bl	800a480 <ull_setleds>
 800cefa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cefc:	68d9      	ldr	r1, [r3, #12]
 800cefe:	4620      	mov	r0, r4
 800cf00:	f7fc fb13 	bl	800952a <ull_setlnapamode>
 800cf04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf06:	7e0b      	ldrb	r3, [r1, #24]
 800cf08:	694a      	ldr	r2, [r1, #20]
 800cf0a:	6909      	ldr	r1, [r1, #16]
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f7fd fa21 	bl	800a354 <ull_setinterrupt>
 800cf12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf14:	7f9a      	ldrb	r2, [r3, #30]
 800cf16:	8b99      	ldrh	r1, [r3, #28]
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f7fc fd19 	bl	8009950 <ull_configuresleep>
 800cf1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cf20:	7b53      	ldrb	r3, [r2, #13]
 800cf22:	2b2e      	cmp	r3, #46	; 0x2e
 800cf24:	d005      	beq.n	800cf32 <_init+0xe6>
 800cf26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf2c:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800cf30:	d00a      	beq.n	800cf48 <_init+0xfc>
 800cf32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf3c:	7353      	strb	r3, [r2, #13]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	492a      	ldr	r1, [pc, #168]	; (800cfec <_init+0x1a0>)
 800cf42:	4620      	mov	r0, r4
 800cf44:	f7fc fc30 	bl	80097a8 <dwt_write8bitoffsetreg>
 800cf48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf4a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f7fd f874 	bl	800a03c <ull_configciadiag>
 800cf54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf56:	6a19      	ldr	r1, [r3, #32]
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f7fc fb07 	bl	800956c <ull_configurestskey>
 800cf5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cf62:	4620      	mov	r0, r4
 800cf64:	f7fc fb26 	bl	80095b4 <ull_configurestsiv>
 800cf68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf6a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cf6e:	bb9b      	cbnz	r3, 800cfd8 <_init+0x18c>
 800cf70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf72:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7fc fc8e 	bl	8009898 <ull_configeventcounters>
 800cf7c:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800cf80:	2d00      	cmp	r5, #0
 800cf82:	db26      	blt.n	800cfd2 <_init+0x186>
 800cf84:	2301      	movs	r3, #1
 800cf86:	fa03 f505 	lsl.w	r5, r3, r5
 800cf8a:	b2af      	uxth	r7, r5
 800cf8c:	4a18      	ldr	r2, [pc, #96]	; (800cff0 <_init+0x1a4>)
 800cf8e:	4639      	mov	r1, r7
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7fc ffef 	bl	8009f74 <ull_setgpiomode>
 800cf96:	f10d 030a 	add.w	r3, sp, #10
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f7fb fdf2 	bl	8008b8e <dwt_readfromdevice>
 800cfaa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800cfae:	ea23 0305 	bic.w	r3, r3, r5
 800cfb2:	f8ad 300a 	strh.w	r3, [sp, #10]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	490e      	ldr	r1, [pc, #56]	; (800cff4 <_init+0x1a8>)
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f7fc fa09 	bl	80093d2 <dwt_write16bitoffsetreg>
 800cfc0:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800cfc4:	fab2 f282 	clz	r2, r2
 800cfc8:	0952      	lsrs	r2, r2, #5
 800cfca:	4639      	mov	r1, r7
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7fd fad5 	bl	800a57c <ull_setgpiovalue>
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	b005      	add	sp, #20
 800cfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd8:	2301      	movs	r3, #1
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	23ff      	movs	r3, #255	; 0xff
 800cfde:	2200      	movs	r2, #0
 800cfe0:	4905      	ldr	r1, [pc, #20]	; (800cff8 <_init+0x1ac>)
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f7fd f816 	bl	800a014 <dwt_modify8bitoffsetreg>
 800cfe8:	e7c2      	b.n	800cf70 <_init+0x124>
 800cfea:	bf00      	nop
 800cfec:	00090014 	.word	0x00090014
 800cff0:	01200492 	.word	0x01200492
 800cff4:	00050008 	.word	0x00050008
 800cff8:	00020004 	.word	0x00020004

0800cffc <ull_wakeup_ic>:
 800cffc:	b508      	push	{r3, lr}
 800cffe:	6843      	ldr	r3, [r0, #4]
 800d000:	4798      	blx	r3
 800d002:	bd08      	pop	{r3, pc}

0800d004 <get_sts_mnth>:
 800d004:	fb01 f100 	mul.w	r1, r1, r0
 800d008:	2a03      	cmp	r2, #3
 800d00a:	d00a      	beq.n	800d022 <get_sts_mnth+0x1e>
 800d00c:	0ac8      	lsrs	r0, r1, #11
 800d00e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800d012:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d016:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800d01a:	bf28      	it	cs
 800d01c:	3001      	addcs	r0, #1
 800d01e:	b280      	uxth	r0, r0
 800d020:	4770      	bx	lr
 800d022:	20b5      	movs	r0, #181	; 0xb5
 800d024:	fb00 f101 	mul.w	r1, r0, r1
 800d028:	09c9      	lsrs	r1, r1, #7
 800d02a:	e7ef      	b.n	800d00c <get_sts_mnth+0x8>

0800d02c <dwt_dbg_fn>:
 800d02c:	2998      	cmp	r1, #152	; 0x98
 800d02e:	4802      	ldr	r0, [pc, #8]	; (800d038 <dwt_dbg_fn+0xc>)
 800d030:	bf18      	it	ne
 800d032:	2000      	movne	r0, #0
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	08012230 	.word	0x08012230

0800d03c <_deinit>:
 800d03c:	4770      	bx	lr

0800d03e <dwt_xfer3xxx>:
 800d03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	4605      	mov	r5, r0
 800d046:	460f      	mov	r7, r1
 800d048:	461e      	mov	r6, r3
 800d04a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d04e:	1e59      	subs	r1, r3, #1
 800d050:	b289      	uxth	r1, r1
 800d052:	2901      	cmp	r1, #1
 800d054:	d91c      	bls.n	800d090 <dwt_xfer3xxx+0x52>
 800d056:	19d0      	adds	r0, r2, r7
 800d058:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d05c:	443a      	add	r2, r7
 800d05e:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800d062:	0082      	lsls	r2, r0, #2
 800d064:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800d068:	ea43 0102 	orr.w	r1, r3, r2
 800d06c:	0a09      	lsrs	r1, r1, #8
 800d06e:	f88d 100c 	strb.w	r1, [sp, #12]
 800d072:	b920      	cbnz	r0, 800d07e <dwt_xfer3xxx+0x40>
 800d074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d078:	d018      	beq.n	800d0ac <dwt_xfer3xxx+0x6e>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d037      	beq.n	800d0ee <dwt_xfer3xxx+0xb0>
 800d07e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d082:	f88d 100c 	strb.w	r1, [sp, #12]
 800d086:	431a      	orrs	r2, r3
 800d088:	f88d 200d 	strb.w	r2, [sp, #13]
 800d08c:	2402      	movs	r4, #2
 800d08e:	e005      	b.n	800d09c <dwt_xfer3xxx+0x5e>
 800d090:	007a      	lsls	r2, r7, #1
 800d092:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800d096:	f88d 200c 	strb.w	r2, [sp, #12]
 800d09a:	2401      	movs	r4, #1
 800d09c:	2b02      	cmp	r3, #2
 800d09e:	d006      	beq.n	800d0ae <dwt_xfer3xxx+0x70>
 800d0a0:	d326      	bcc.n	800d0f0 <dwt_xfer3xxx+0xb2>
 800d0a2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d0a6:	2b03      	cmp	r3, #3
 800d0a8:	d901      	bls.n	800d0ae <dwt_xfer3xxx+0x70>
 800d0aa:	e7fe      	b.n	800d0aa <dwt_xfer3xxx+0x6c>
 800d0ac:	2401      	movs	r4, #1
 800d0ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d0b0:	7d1b      	ldrb	r3, [r3, #20]
 800d0b2:	b94b      	cbnz	r3, 800d0c8 <dwt_xfer3xxx+0x8a>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	685d      	ldr	r5, [r3, #4]
 800d0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	a903      	add	r1, sp, #12
 800d0be:	4620      	mov	r0, r4
 800d0c0:	47a8      	blx	r5
 800d0c2:	b004      	add	sp, #16
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	a803      	add	r0, sp, #12
 800d0ce:	f7f7 fb05 	bl	80046dc <dwt_generatecrc8>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0d8:	f7f7 fb00 	bl	80046dc <dwt_generatecrc8>
 800d0dc:	682b      	ldr	r3, [r5, #0]
 800d0de:	9000      	str	r0, [sp, #0]
 800d0e0:	689d      	ldr	r5, [r3, #8]
 800d0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e4:	4632      	mov	r2, r6
 800d0e6:	a903      	add	r1, sp, #12
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	47a8      	blx	r5
 800d0ec:	e7e9      	b.n	800d0c2 <dwt_xfer3xxx+0x84>
 800d0ee:	2401      	movs	r4, #1
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	f8d3 8000 	ldr.w	r8, [r3]
 800d0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	a903      	add	r1, sp, #12
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	47c0      	blx	r8
 800d100:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d102:	7d1b      	ldrb	r3, [r3, #20]
 800d104:	2b02      	cmp	r3, #2
 800d106:	d1dc      	bne.n	800d0c2 <dwt_xfer3xxx+0x84>
 800d108:	2f18      	cmp	r7, #24
 800d10a:	d0da      	beq.n	800d0c2 <dwt_xfer3xxx+0x84>
 800d10c:	2200      	movs	r2, #0
 800d10e:	4621      	mov	r1, r4
 800d110:	a803      	add	r0, sp, #12
 800d112:	f7f7 fae3 	bl	80046dc <dwt_generatecrc8>
 800d116:	4602      	mov	r2, r0
 800d118:	4631      	mov	r1, r6
 800d11a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d11c:	f7f7 fade 	bl	80046dc <dwt_generatecrc8>
 800d120:	4604      	mov	r4, r0
 800d122:	2200      	movs	r2, #0
 800d124:	2118      	movs	r1, #24
 800d126:	4628      	mov	r0, r5
 800d128:	f000 f866 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800d12c:	4284      	cmp	r4, r0
 800d12e:	d0c8      	beq.n	800d0c2 <dwt_xfer3xxx+0x84>
 800d130:	68eb      	ldr	r3, [r5, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0c5      	beq.n	800d0c2 <dwt_xfer3xxx+0x84>
 800d136:	4798      	blx	r3
 800d138:	e7c3      	b.n	800d0c2 <dwt_xfer3xxx+0x84>

0800d13a <dwt_readfromdevice>:
 800d13a:	b510      	push	{r4, lr}
 800d13c:	b082      	sub	sp, #8
 800d13e:	2400      	movs	r4, #0
 800d140:	9401      	str	r4, [sp, #4]
 800d142:	9c04      	ldr	r4, [sp, #16]
 800d144:	9400      	str	r4, [sp, #0]
 800d146:	f7ff ff7a 	bl	800d03e <dwt_xfer3xxx>
 800d14a:	b002      	add	sp, #8
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <dwt_read32bitoffsetreg>:
 800d14e:	b500      	push	{lr}
 800d150:	b085      	sub	sp, #20
 800d152:	ab03      	add	r3, sp, #12
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	2304      	movs	r3, #4
 800d158:	b292      	uxth	r2, r2
 800d15a:	f7ff ffee 	bl	800d13a <dwt_readfromdevice>
 800d15e:	f10d 030f 	add.w	r3, sp, #15
 800d162:	f10d 010b 	add.w	r1, sp, #11
 800d166:	2000      	movs	r0, #0
 800d168:	f813 2901 	ldrb.w	r2, [r3], #-1
 800d16c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800d170:	428b      	cmp	r3, r1
 800d172:	d1f9      	bne.n	800d168 <dwt_read32bitoffsetreg+0x1a>
 800d174:	b005      	add	sp, #20
 800d176:	f85d fb04 	ldr.w	pc, [sp], #4

0800d17a <dwt_read16bitoffsetreg>:
 800d17a:	b500      	push	{lr}
 800d17c:	b085      	sub	sp, #20
 800d17e:	ab03      	add	r3, sp, #12
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	2302      	movs	r3, #2
 800d184:	b292      	uxth	r2, r2
 800d186:	f7ff ffd8 	bl	800d13a <dwt_readfromdevice>
 800d18a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d18e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d192:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d196:	b280      	uxth	r0, r0
 800d198:	b005      	add	sp, #20
 800d19a:	f85d fb04 	ldr.w	pc, [sp], #4

0800d19e <ull_getrxantennadelay>:
 800d19e:	b508      	push	{r3, lr}
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800d1a6:	f7ff ffe8 	bl	800d17a <dwt_read16bitoffsetreg>
 800d1aa:	bd08      	pop	{r3, pc}

0800d1ac <ull_gettxantennadelay>:
 800d1ac:	b508      	push	{r3, lr}
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	217c      	movs	r1, #124	; 0x7c
 800d1b2:	f7ff ffe2 	bl	800d17a <dwt_read16bitoffsetreg>
 800d1b6:	bd08      	pop	{r3, pc}

0800d1b8 <ull_readclockoffset>:
 800d1b8:	b508      	push	{r3, lr}
 800d1ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d1bc:	7b9b      	ldrb	r3, [r3, #14]
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d00a      	beq.n	800d1d8 <ull_readclockoffset+0x20>
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d10e      	bne.n	800d1e4 <ull_readclockoffset+0x2c>
 800d1c6:	220c      	movs	r2, #12
 800d1c8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d1cc:	f7ff ffd5 	bl	800d17a <dwt_read16bitoffsetreg>
 800d1d0:	b200      	sxth	r0, r0
 800d1d2:	f340 000c 	sbfx	r0, r0, #0, #13
 800d1d6:	bd08      	pop	{r3, pc}
 800d1d8:	2200      	movs	r2, #0
 800d1da:	4905      	ldr	r1, [pc, #20]	; (800d1f0 <ull_readclockoffset+0x38>)
 800d1dc:	f7ff ffcd 	bl	800d17a <dwt_read16bitoffsetreg>
 800d1e0:	b200      	sxth	r0, r0
 800d1e2:	e7f6      	b.n	800d1d2 <ull_readclockoffset+0x1a>
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	4903      	ldr	r1, [pc, #12]	; (800d1f4 <ull_readclockoffset+0x3c>)
 800d1e8:	f7ff ffc7 	bl	800d17a <dwt_read16bitoffsetreg>
 800d1ec:	b200      	sxth	r0, r0
 800d1ee:	e7f0      	b.n	800d1d2 <ull_readclockoffset+0x1a>
 800d1f0:	0018000c 	.word	0x0018000c
 800d1f4:	000c0020 	.word	0x000c0020

0800d1f8 <dwt_read8bitoffsetreg>:
 800d1f8:	b500      	push	{lr}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	f10d 030f 	add.w	r3, sp, #15
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	2301      	movs	r3, #1
 800d204:	b292      	uxth	r2, r2
 800d206:	f7ff ff98 	bl	800d13a <dwt_readfromdevice>
 800d20a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800d20e:	b005      	add	sp, #20
 800d210:	f85d fb04 	ldr.w	pc, [sp], #4

0800d214 <ull_readcarrierintegrator>:
 800d214:	b500      	push	{lr}
 800d216:	b085      	sub	sp, #20
 800d218:	ab03      	add	r3, sp, #12
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	2303      	movs	r3, #3
 800d21e:	2200      	movs	r2, #0
 800d220:	490b      	ldr	r1, [pc, #44]	; (800d250 <ull_readcarrierintegrator+0x3c>)
 800d222:	f7ff ff8a 	bl	800d13a <dwt_readfromdevice>
 800d226:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d22a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800d22e:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800d232:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d236:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d23a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d23e:	bf1c      	itt	ne
 800d240:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800d244:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800d248:	b005      	add	sp, #20
 800d24a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d24e:	bf00      	nop
 800d250:	00060029 	.word	0x00060029

0800d254 <ull_readdiagnostics>:
 800d254:	b530      	push	{r4, r5, lr}
 800d256:	b0bd      	sub	sp, #244	; 0xf4
 800d258:	4605      	mov	r5, r0
 800d25a:	460c      	mov	r4, r1
 800d25c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d25e:	7b9a      	ldrb	r2, [r3, #14]
 800d260:	2a01      	cmp	r2, #1
 800d262:	d01c      	beq.n	800d29e <ull_readdiagnostics+0x4a>
 800d264:	2a03      	cmp	r2, #3
 800d266:	f040 81f1 	bne.w	800d64c <ull_readdiagnostics+0x3f8>
 800d26a:	7d9b      	ldrb	r3, [r3, #22]
 800d26c:	f013 0f08 	tst.w	r3, #8
 800d270:	d10c      	bne.n	800d28c <ull_readdiagnostics+0x38>
 800d272:	f013 0f04 	tst.w	r3, #4
 800d276:	ab02      	add	r3, sp, #8
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	bf14      	ite	ne
 800d27c:	2338      	movne	r3, #56	; 0x38
 800d27e:	2320      	moveq	r3, #32
 800d280:	2200      	movs	r2, #0
 800d282:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d286:	f7ff ff58 	bl	800d13a <dwt_readfromdevice>
 800d28a:	e019      	b.n	800d2c0 <ull_readdiagnostics+0x6c>
 800d28c:	ab02      	add	r3, sp, #8
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	23e8      	movs	r3, #232	; 0xe8
 800d292:	2200      	movs	r2, #0
 800d294:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d298:	f7ff ff4f 	bl	800d13a <dwt_readfromdevice>
 800d29c:	e010      	b.n	800d2c0 <ull_readdiagnostics+0x6c>
 800d29e:	7d9b      	ldrb	r3, [r3, #22]
 800d2a0:	f013 0f08 	tst.w	r3, #8
 800d2a4:	f040 81c9 	bne.w	800d63a <ull_readdiagnostics+0x3e6>
 800d2a8:	f013 0f04 	tst.w	r3, #4
 800d2ac:	ab02      	add	r3, sp, #8
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	bf14      	ite	ne
 800d2b2:	2338      	movne	r3, #56	; 0x38
 800d2b4:	2320      	moveq	r3, #32
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d2bc:	f7ff ff3d 	bl	800d13a <dwt_readfromdevice>
 800d2c0:	f10d 0217 	add.w	r2, sp, #23
 800d2c4:	f104 031a 	add.w	r3, r4, #26
 800d2c8:	f104 0020 	add.w	r0, r4, #32
 800d2cc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d2d0:	f803 1b01 	strb.w	r1, [r3], #1
 800d2d4:	4283      	cmp	r3, r0
 800d2d6:	d1f9      	bne.n	800d2cc <ull_readdiagnostics+0x78>
 800d2d8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d2dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d2e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2e8:	8463      	strh	r3, [r4, #34]	; 0x22
 800d2ea:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d2ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d2f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d2fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d2fe:	bf1c      	itt	ne
 800d300:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d304:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d308:	8423      	strh	r3, [r4, #32]
 800d30a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800d30e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d31a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d31c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d31e:	7d9b      	ldrb	r3, [r3, #22]
 800d320:	f013 0f02 	tst.w	r3, #2
 800d324:	f040 817e 	bne.w	800d624 <ull_readdiagnostics+0x3d0>
 800d328:	aa0a      	add	r2, sp, #40	; 0x28
 800d32a:	1e63      	subs	r3, r4, #1
 800d32c:	1d20      	adds	r0, r4, #4
 800d32e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d332:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d336:	79d1      	ldrb	r1, [r2, #7]
 800d338:	7219      	strb	r1, [r3, #8]
 800d33a:	7bd1      	ldrb	r1, [r2, #15]
 800d33c:	7459      	strb	r1, [r3, #17]
 800d33e:	4283      	cmp	r3, r0
 800d340:	d1f5      	bne.n	800d32e <ull_readdiagnostics+0xda>
 800d342:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800d346:	7163      	strb	r3, [r4, #5]
 800d348:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800d34c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800d350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d354:	80e3      	strh	r3, [r4, #6]
 800d356:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d35a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d35e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d362:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d366:	f8a4 300d 	strh.w	r3, [r4, #13]
 800d36a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800d36e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800d372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d376:	f8a4 300f 	strh.w	r3, [r4, #15]
 800d37a:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800d37e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800d382:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d386:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d38a:	82e3      	strh	r3, [r4, #22]
 800d38c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800d390:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800d394:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d398:	8323      	strh	r3, [r4, #24]
 800d39a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d39c:	7d9b      	ldrb	r3, [r3, #22]
 800d39e:	f013 0f04 	tst.w	r3, #4
 800d3a2:	f040 813f 	bne.w	800d624 <ull_readdiagnostics+0x3d0>
 800d3a6:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800d3aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d3ae:	041b      	lsls	r3, r3, #16
 800d3b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3b4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800d3be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3c2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d3c6:	6263      	str	r3, [r4, #36]	; 0x24
 800d3c8:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800d3cc:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800d3d0:	041b      	lsls	r3, r3, #16
 800d3d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3d6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800d3e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ea:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800d3ee:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800d3f2:	041b      	lsls	r3, r3, #16
 800d3f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3f8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800d402:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d40a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d40c:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800d410:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800d414:	041b      	lsls	r3, r3, #16
 800d416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d41a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800d41e:	4313      	orrs	r3, r2
 800d420:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800d424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d428:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d42c:	6323      	str	r3, [r4, #48]	; 0x30
 800d42e:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800d432:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800d436:	041b      	lsls	r3, r3, #16
 800d438:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d43c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800d440:	4313      	orrs	r3, r2
 800d442:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800d446:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d44a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d44e:	6363      	str	r3, [r4, #52]	; 0x34
 800d450:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800d454:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800d458:	041b      	lsls	r3, r3, #16
 800d45a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d45e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800d462:	4313      	orrs	r3, r2
 800d464:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800d468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d46c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d470:	63a3      	str	r3, [r4, #56]	; 0x38
 800d472:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800d476:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d47a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d47e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800d480:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800d484:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d488:	041b      	lsls	r3, r3, #16
 800d48a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d48e:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d492:	4313      	orrs	r3, r2
 800d494:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d498:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d49c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d4a0:	6423      	str	r3, [r4, #64]	; 0x40
 800d4a2:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800d4a6:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800d4aa:	041b      	lsls	r3, r3, #16
 800d4ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4b0:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800d4ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4c2:	6463      	str	r3, [r4, #68]	; 0x44
 800d4c4:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800d4c8:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800d4cc:	041b      	lsls	r3, r3, #16
 800d4ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4d2:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800d4dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d4e4:	64a3      	str	r3, [r4, #72]	; 0x48
 800d4e6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800d4ea:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800d4ee:	041b      	lsls	r3, r3, #16
 800d4f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4f4:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800d4fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d502:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d506:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d508:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800d50c:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800d510:	041b      	lsls	r3, r3, #16
 800d512:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d516:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800d51a:	4313      	orrs	r3, r2
 800d51c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d524:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d528:	6523      	str	r3, [r4, #80]	; 0x50
 800d52a:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d52e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d532:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d536:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d53a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d53e:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800d542:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800d546:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d54a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d54e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d552:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d556:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d55a:	041b      	lsls	r3, r3, #16
 800d55c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d560:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d564:	4313      	orrs	r3, r2
 800d566:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d56a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d56e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d572:	65a3      	str	r3, [r4, #88]	; 0x58
 800d574:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800d578:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800d57c:	041b      	lsls	r3, r3, #16
 800d57e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d582:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800d586:	4313      	orrs	r3, r2
 800d588:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800d58c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d594:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d596:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800d59a:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800d59e:	041b      	lsls	r3, r3, #16
 800d5a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5a4:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800d5ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d5b6:	6623      	str	r3, [r4, #96]	; 0x60
 800d5b8:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800d5bc:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800d5c0:	041b      	lsls	r3, r3, #16
 800d5c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5c6:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800d5d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d5d8:	6663      	str	r3, [r4, #100]	; 0x64
 800d5da:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800d5de:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800d5e2:	041b      	lsls	r3, r3, #16
 800d5e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5e8:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d5f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5f6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d5fa:	66a3      	str	r3, [r4, #104]	; 0x68
 800d5fc:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d600:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d604:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d608:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d60c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d610:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800d614:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800d618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d61c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d620:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d624:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f2c0 81d0 	blt.w	800d9ce <ull_readdiagnostics+0x77a>
 800d62e:	7fe3      	ldrb	r3, [r4, #31]
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	77e3      	strb	r3, [r4, #31]
 800d636:	b03d      	add	sp, #244	; 0xf4
 800d638:	bd30      	pop	{r4, r5, pc}
 800d63a:	ab02      	add	r3, sp, #8
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	23e8      	movs	r3, #232	; 0xe8
 800d640:	2200      	movs	r2, #0
 800d642:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d646:	f7ff fd78 	bl	800d13a <dwt_readfromdevice>
 800d64a:	e639      	b.n	800d2c0 <ull_readdiagnostics+0x6c>
 800d64c:	7d9b      	ldrb	r3, [r3, #22]
 800d64e:	f013 0f01 	tst.w	r3, #1
 800d652:	f000 81b3 	beq.w	800d9bc <ull_readdiagnostics+0x768>
 800d656:	ab02      	add	r3, sp, #8
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	236c      	movs	r3, #108	; 0x6c
 800d65c:	2200      	movs	r2, #0
 800d65e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d662:	f7ff fd6a 	bl	800d13a <dwt_readfromdevice>
 800d666:	ab1d      	add	r3, sp, #116	; 0x74
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	236c      	movs	r3, #108	; 0x6c
 800d66c:	2200      	movs	r2, #0
 800d66e:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800d672:	4628      	mov	r0, r5
 800d674:	f7ff fd61 	bl	800d13a <dwt_readfromdevice>
 800d678:	aa02      	add	r2, sp, #8
 800d67a:	1e63      	subs	r3, r4, #1
 800d67c:	1d20      	adds	r0, r4, #4
 800d67e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d682:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d686:	79d1      	ldrb	r1, [r2, #7]
 800d688:	7219      	strb	r1, [r3, #8]
 800d68a:	7bd1      	ldrb	r1, [r2, #15]
 800d68c:	7459      	strb	r1, [r3, #17]
 800d68e:	7dd1      	ldrb	r1, [r2, #23]
 800d690:	7699      	strb	r1, [r3, #26]
 800d692:	4283      	cmp	r3, r0
 800d694:	d1f3      	bne.n	800d67e <ull_readdiagnostics+0x42a>
 800d696:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d69a:	77e3      	strb	r3, [r4, #31]
 800d69c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d6a0:	7163      	strb	r3, [r4, #5]
 800d6a2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d6a6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d6aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6ae:	80e3      	strh	r3, [r4, #6]
 800d6b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d6b4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d6b8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800d6bc:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800d6c0:	f8a4 200d 	strh.w	r2, [r4, #13]
 800d6c4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d6c8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800d6cc:	f8a4 200f 	strh.w	r2, [r4, #15]
 800d6d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d6d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6d8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d6dc:	82e3      	strh	r3, [r4, #22]
 800d6de:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800d6e2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d6e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6ea:	8323      	strh	r3, [r4, #24]
 800d6ec:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800d6f0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800d6f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d6fc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d700:	bf1c      	itt	ne
 800d702:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d706:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d70a:	8423      	strh	r3, [r4, #32]
 800d70c:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800d710:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d71c:	8463      	strh	r3, [r4, #34]	; 0x22
 800d71e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800d722:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d726:	041b      	lsls	r3, r3, #16
 800d728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d72c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800d730:	4313      	orrs	r3, r2
 800d732:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800d736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d73a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d73e:	6263      	str	r3, [r4, #36]	; 0x24
 800d740:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d742:	7d9b      	ldrb	r3, [r3, #22]
 800d744:	f013 0f01 	tst.w	r3, #1
 800d748:	f43f af6c 	beq.w	800d624 <ull_readdiagnostics+0x3d0>
 800d74c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800d750:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800d754:	041b      	lsls	r3, r3, #16
 800d756:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d75a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800d75e:	4313      	orrs	r3, r2
 800d760:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800d764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d76c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d76e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d772:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d776:	041b      	lsls	r3, r3, #16
 800d778:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d77c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800d780:	4313      	orrs	r3, r2
 800d782:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800d786:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d78e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d790:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800d794:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800d798:	041b      	lsls	r3, r3, #16
 800d79a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d79e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800d7a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7b0:	6323      	str	r3, [r4, #48]	; 0x30
 800d7b2:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800d7b6:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800d7ba:	041b      	lsls	r3, r3, #16
 800d7bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7c0:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800d7ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7d2:	6363      	str	r3, [r4, #52]	; 0x34
 800d7d4:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800d7d8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d7dc:	041b      	lsls	r3, r3, #16
 800d7de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7e2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800d7ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7f4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d7f6:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800d7fa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d7fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d802:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800d804:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800d808:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800d80c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d814:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d816:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800d81a:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800d81e:	041b      	lsls	r3, r3, #16
 800d820:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d824:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800d828:	4313      	orrs	r3, r2
 800d82a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800d82e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d832:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d836:	6423      	str	r3, [r4, #64]	; 0x40
 800d838:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800d83c:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800d840:	041b      	lsls	r3, r3, #16
 800d842:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d846:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800d84a:	4313      	orrs	r3, r2
 800d84c:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800d850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d858:	6463      	str	r3, [r4, #68]	; 0x44
 800d85a:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800d85e:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800d862:	041b      	lsls	r3, r3, #16
 800d864:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d868:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800d86c:	4313      	orrs	r3, r2
 800d86e:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800d872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d876:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d87a:	64a3      	str	r3, [r4, #72]	; 0x48
 800d87c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800d880:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800d884:	041b      	lsls	r3, r3, #16
 800d886:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d88a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800d88e:	4313      	orrs	r3, r2
 800d890:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800d894:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d898:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d89c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d89e:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800d8a2:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d8a6:	041b      	lsls	r3, r3, #16
 800d8a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d8ac:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d8b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8be:	6523      	str	r3, [r4, #80]	; 0x50
 800d8c0:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d8c4:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800d8c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d8d0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d8d4:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d8d8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d8dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8e4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d8e8:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800d8ec:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800d8f0:	041b      	lsls	r3, r3, #16
 800d8f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d8f6:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800d900:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d904:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d908:	65a3      	str	r3, [r4, #88]	; 0x58
 800d90a:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800d90e:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800d912:	041b      	lsls	r3, r3, #16
 800d914:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d918:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800d91c:	4313      	orrs	r3, r2
 800d91e:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800d922:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d92a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d92c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800d930:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800d934:	041b      	lsls	r3, r3, #16
 800d936:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d93a:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800d93e:	4313      	orrs	r3, r2
 800d940:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800d944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d948:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d94c:	6623      	str	r3, [r4, #96]	; 0x60
 800d94e:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800d952:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800d956:	041b      	lsls	r3, r3, #16
 800d958:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d95c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800d960:	4313      	orrs	r3, r2
 800d962:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800d966:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d96a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d96e:	6663      	str	r3, [r4, #100]	; 0x64
 800d970:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d974:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d978:	041b      	lsls	r3, r3, #16
 800d97a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d97e:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d982:	4313      	orrs	r3, r2
 800d984:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d98c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d990:	66a3      	str	r3, [r4, #104]	; 0x68
 800d992:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d996:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800d99a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d99e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d9a2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d9a6:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d9aa:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d9ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9b6:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d9ba:	e633      	b.n	800d624 <ull_readdiagnostics+0x3d0>
 800d9bc:	ab02      	add	r3, sp, #8
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	2328      	movs	r3, #40	; 0x28
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d9c8:	f7ff fbb7 	bl	800d13a <dwt_readfromdevice>
 800d9cc:	e654      	b.n	800d678 <ull_readdiagnostics+0x424>
 800d9ce:	23ff      	movs	r3, #255	; 0xff
 800d9d0:	7723      	strb	r3, [r4, #28]
 800d9d2:	7763      	strb	r3, [r4, #29]
 800d9d4:	77a3      	strb	r3, [r4, #30]
 800d9d6:	77e3      	strb	r3, [r4, #31]
 800d9d8:	e629      	b.n	800d62e <ull_readdiagnostics+0x3da>
	...

0800d9dc <ull_readrxtimestamp>:
 800d9dc:	b500      	push	{lr}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d9e2:	7b9b      	ldrb	r3, [r3, #14]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d00b      	beq.n	800da00 <ull_readrxtimestamp+0x24>
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d110      	bne.n	800da0e <ull_readrxtimestamp+0x32>
 800d9ec:	9100      	str	r1, [sp, #0]
 800d9ee:	2305      	movs	r3, #5
 800d9f0:	2204      	movs	r2, #4
 800d9f2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d9f6:	f7ff fba0 	bl	800d13a <dwt_readfromdevice>
 800d9fa:	b003      	add	sp, #12
 800d9fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800da00:	9100      	str	r1, [sp, #0]
 800da02:	2305      	movs	r3, #5
 800da04:	2200      	movs	r2, #0
 800da06:	4905      	ldr	r1, [pc, #20]	; (800da1c <ull_readrxtimestamp+0x40>)
 800da08:	f7ff fb97 	bl	800d13a <dwt_readfromdevice>
 800da0c:	e7f5      	b.n	800d9fa <ull_readrxtimestamp+0x1e>
 800da0e:	9100      	str	r1, [sp, #0]
 800da10:	2305      	movs	r3, #5
 800da12:	2200      	movs	r2, #0
 800da14:	2160      	movs	r1, #96	; 0x60
 800da16:	f7ff fb90 	bl	800d13a <dwt_readfromdevice>
 800da1a:	e7ee      	b.n	800d9fa <ull_readrxtimestamp+0x1e>
 800da1c:	00180004 	.word	0x00180004

0800da20 <dwt_writetodevice>:
 800da20:	b510      	push	{r4, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800da28:	9401      	str	r4, [sp, #4]
 800da2a:	9c04      	ldr	r4, [sp, #16]
 800da2c:	9400      	str	r4, [sp, #0]
 800da2e:	f7ff fb06 	bl	800d03e <dwt_xfer3xxx>
 800da32:	b002      	add	sp, #8
 800da34:	bd10      	pop	{r4, pc}

0800da36 <dwt_write16bitoffsetreg>:
 800da36:	b500      	push	{lr}
 800da38:	b085      	sub	sp, #20
 800da3a:	f88d 300c 	strb.w	r3, [sp, #12]
 800da3e:	0a1b      	lsrs	r3, r3, #8
 800da40:	f88d 300d 	strb.w	r3, [sp, #13]
 800da44:	ab03      	add	r3, sp, #12
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	2302      	movs	r3, #2
 800da4a:	b292      	uxth	r2, r2
 800da4c:	f7ff ffe8 	bl	800da20 <dwt_writetodevice>
 800da50:	b005      	add	sp, #20
 800da52:	f85d fb04 	ldr.w	pc, [sp], #4

0800da56 <ull_setrxantennadelay>:
 800da56:	b508      	push	{r3, lr}
 800da58:	460b      	mov	r3, r1
 800da5a:	2200      	movs	r2, #0
 800da5c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800da60:	f7ff ffe9 	bl	800da36 <dwt_write16bitoffsetreg>
 800da64:	bd08      	pop	{r3, pc}

0800da66 <ull_settxantennadelay>:
 800da66:	b508      	push	{r3, lr}
 800da68:	460b      	mov	r3, r1
 800da6a:	2200      	movs	r2, #0
 800da6c:	217c      	movs	r1, #124	; 0x7c
 800da6e:	f7ff ffe2 	bl	800da36 <dwt_write16bitoffsetreg>
 800da72:	bd08      	pop	{r3, pc}

0800da74 <ull_force_clocks>:
 800da74:	b508      	push	{r3, lr}
 800da76:	2901      	cmp	r1, #1
 800da78:	d002      	beq.n	800da80 <ull_force_clocks+0xc>
 800da7a:	2905      	cmp	r1, #5
 800da7c:	d007      	beq.n	800da8e <ull_force_clocks+0x1a>
 800da7e:	bd08      	pop	{r3, pc}
 800da80:	f641 0322 	movw	r3, #6178	; 0x1822
 800da84:	2200      	movs	r2, #0
 800da86:	4905      	ldr	r1, [pc, #20]	; (800da9c <ull_force_clocks+0x28>)
 800da88:	f7ff ffd5 	bl	800da36 <dwt_write16bitoffsetreg>
 800da8c:	e7f7      	b.n	800da7e <ull_force_clocks+0xa>
 800da8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da92:	2200      	movs	r2, #0
 800da94:	4901      	ldr	r1, [pc, #4]	; (800da9c <ull_force_clocks+0x28>)
 800da96:	f7ff ffce 	bl	800da36 <dwt_write16bitoffsetreg>
 800da9a:	e7f0      	b.n	800da7e <ull_force_clocks+0xa>
 800da9c:	00110004 	.word	0x00110004

0800daa0 <__dwt_otp_write_wdata_id_reg>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4605      	mov	r5, r0
 800daa4:	460c      	mov	r4, r1
 800daa6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800daaa:	b29b      	uxth	r3, r3
 800daac:	2200      	movs	r2, #0
 800daae:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dab2:	f7ff ffc0 	bl	800da36 <dwt_write16bitoffsetreg>
 800dab6:	b2a3      	uxth	r3, r4
 800dab8:	2200      	movs	r2, #0
 800daba:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dabe:	4628      	mov	r0, r5
 800dac0:	f7ff ffb9 	bl	800da36 <dwt_write16bitoffsetreg>
 800dac4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dac8 <_dwt_otpread>:
 800dac8:	b570      	push	{r4, r5, r6, lr}
 800daca:	4604      	mov	r4, r0
 800dacc:	460e      	mov	r6, r1
 800dace:	4d0c      	ldr	r5, [pc, #48]	; (800db00 <_dwt_otpread+0x38>)
 800dad0:	2301      	movs	r3, #1
 800dad2:	2200      	movs	r2, #0
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7ff ffae 	bl	800da36 <dwt_write16bitoffsetreg>
 800dada:	4633      	mov	r3, r6
 800dadc:	2200      	movs	r2, #0
 800dade:	4909      	ldr	r1, [pc, #36]	; (800db04 <_dwt_otpread+0x3c>)
 800dae0:	4620      	mov	r0, r4
 800dae2:	f7ff ffa8 	bl	800da36 <dwt_write16bitoffsetreg>
 800dae6:	2302      	movs	r3, #2
 800dae8:	2200      	movs	r2, #0
 800daea:	4629      	mov	r1, r5
 800daec:	4620      	mov	r0, r4
 800daee:	f7ff ffa2 	bl	800da36 <dwt_write16bitoffsetreg>
 800daf2:	2200      	movs	r2, #0
 800daf4:	4904      	ldr	r1, [pc, #16]	; (800db08 <_dwt_otpread+0x40>)
 800daf6:	4620      	mov	r0, r4
 800daf8:	f7ff fb29 	bl	800d14e <dwt_read32bitoffsetreg>
 800dafc:	bd70      	pop	{r4, r5, r6, pc}
 800dafe:	bf00      	nop
 800db00:	000b0008 	.word	0x000b0008
 800db04:	000b0004 	.word	0x000b0004
 800db08:	000b0010 	.word	0x000b0010

0800db0c <dwt_write32bitoffsetreg>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	f88d 300c 	strb.w	r3, [sp, #12]
 800db14:	0a1c      	lsrs	r4, r3, #8
 800db16:	f88d 400d 	strb.w	r4, [sp, #13]
 800db1a:	0c1c      	lsrs	r4, r3, #16
 800db1c:	f88d 400e 	strb.w	r4, [sp, #14]
 800db20:	0e1b      	lsrs	r3, r3, #24
 800db22:	f88d 300f 	strb.w	r3, [sp, #15]
 800db26:	ab03      	add	r3, sp, #12
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	2304      	movs	r3, #4
 800db2c:	b292      	uxth	r2, r2
 800db2e:	f7ff ff77 	bl	800da20 <dwt_writetodevice>
 800db32:	b004      	add	sp, #16
 800db34:	bd10      	pop	{r4, pc}

0800db36 <_dwt_adjust_delaytime>:
 800db36:	b538      	push	{r3, r4, r5, lr}
 800db38:	4604      	mov	r4, r0
 800db3a:	b989      	cbnz	r1, 800db60 <_dwt_adjust_delaytime+0x2a>
 800db3c:	2200      	movs	r2, #0
 800db3e:	2128      	movs	r1, #40	; 0x28
 800db40:	f7ff fb05 	bl	800d14e <dwt_read32bitoffsetreg>
 800db44:	4605      	mov	r5, r0
 800db46:	2201      	movs	r2, #1
 800db48:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800db4c:	4620      	mov	r0, r4
 800db4e:	f7ff fb53 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800db52:	1a2b      	subs	r3, r5, r0
 800db54:	2200      	movs	r2, #0
 800db56:	2128      	movs	r1, #40	; 0x28
 800db58:	4620      	mov	r0, r4
 800db5a:	f7ff ffd7 	bl	800db0c <dwt_write32bitoffsetreg>
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	2200      	movs	r2, #0
 800db62:	2128      	movs	r1, #40	; 0x28
 800db64:	f7ff faf3 	bl	800d14e <dwt_read32bitoffsetreg>
 800db68:	4605      	mov	r5, r0
 800db6a:	2201      	movs	r2, #1
 800db6c:	217c      	movs	r1, #124	; 0x7c
 800db6e:	4620      	mov	r0, r4
 800db70:	f7ff fb42 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800db74:	1a2b      	subs	r3, r5, r0
 800db76:	2200      	movs	r2, #0
 800db78:	2128      	movs	r1, #40	; 0x28
 800db7a:	4620      	mov	r0, r4
 800db7c:	f7ff ffc6 	bl	800db0c <dwt_write32bitoffsetreg>
 800db80:	e7ed      	b.n	800db5e <_dwt_adjust_delaytime+0x28>

0800db82 <ull_setrxaftertxdelay>:
 800db82:	b538      	push	{r3, r4, r5, lr}
 800db84:	4605      	mov	r5, r0
 800db86:	460c      	mov	r4, r1
 800db88:	2200      	movs	r2, #0
 800db8a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800db8e:	f7ff fade 	bl	800d14e <dwt_read32bitoffsetreg>
 800db92:	0d00      	lsrs	r0, r0, #20
 800db94:	0500      	lsls	r0, r0, #20
 800db96:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800db9a:	4303      	orrs	r3, r0
 800db9c:	2200      	movs	r2, #0
 800db9e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800dba2:	4628      	mov	r0, r5
 800dba4:	f7ff ffb2 	bl	800db0c <dwt_write32bitoffsetreg>
 800dba8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dbac <ull_setfinegraintxseq>:
 800dbac:	b508      	push	{r3, lr}
 800dbae:	b929      	cbnz	r1, 800dbbc <ull_setfinegraintxseq+0x10>
 800dbb0:	4b05      	ldr	r3, [pc, #20]	; (800dbc8 <ull_setfinegraintxseq+0x1c>)
 800dbb2:	2202      	movs	r2, #2
 800dbb4:	4905      	ldr	r1, [pc, #20]	; (800dbcc <ull_setfinegraintxseq+0x20>)
 800dbb6:	f7ff ffa9 	bl	800db0c <dwt_write32bitoffsetreg>
 800dbba:	bd08      	pop	{r3, pc}
 800dbbc:	4b04      	ldr	r3, [pc, #16]	; (800dbd0 <ull_setfinegraintxseq+0x24>)
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	4902      	ldr	r1, [pc, #8]	; (800dbcc <ull_setfinegraintxseq+0x20>)
 800dbc2:	f7ff ffa3 	bl	800db0c <dwt_write32bitoffsetreg>
 800dbc6:	e7f8      	b.n	800dbba <ull_setfinegraintxseq+0xe>
 800dbc8:	00d20874 	.word	0x00d20874
 800dbcc:	00110010 	.word	0x00110010
 800dbd0:	04d28874 	.word	0x04d28874

0800dbd4 <ull_setlnapamode>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	460c      	mov	r4, r1
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800dbe0:	f7ff fab5 	bl	800d14e <dwt_read32bitoffsetreg>
 800dbe4:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800dbe8:	f014 0f01 	tst.w	r4, #1
 800dbec:	bf18      	it	ne
 800dbee:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800dbf2:	f014 0f02 	tst.w	r4, #2
 800dbf6:	bf18      	it	ne
 800dbf8:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800dbfc:	f014 0f04 	tst.w	r4, #4
 800dc00:	bf18      	it	ne
 800dc02:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800dc06:	2200      	movs	r2, #0
 800dc08:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f7ff ff7d 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc12:	bd38      	pop	{r3, r4, r5, pc}

0800dc14 <ull_configurestskey>:
 800dc14:	b538      	push	{r3, r4, r5, lr}
 800dc16:	4605      	mov	r5, r0
 800dc18:	460c      	mov	r4, r1
 800dc1a:	680b      	ldr	r3, [r1, #0]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	490b      	ldr	r1, [pc, #44]	; (800dc4c <ull_configurestskey+0x38>)
 800dc20:	f7ff ff74 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc24:	6863      	ldr	r3, [r4, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	4909      	ldr	r1, [pc, #36]	; (800dc50 <ull_configurestskey+0x3c>)
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	f7ff ff6e 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc30:	68a3      	ldr	r3, [r4, #8]
 800dc32:	2200      	movs	r2, #0
 800dc34:	4907      	ldr	r1, [pc, #28]	; (800dc54 <ull_configurestskey+0x40>)
 800dc36:	4628      	mov	r0, r5
 800dc38:	f7ff ff68 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc3c:	68e3      	ldr	r3, [r4, #12]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	4905      	ldr	r1, [pc, #20]	; (800dc58 <ull_configurestskey+0x44>)
 800dc42:	4628      	mov	r0, r5
 800dc44:	f7ff ff62 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc48:	bd38      	pop	{r3, r4, r5, pc}
 800dc4a:	bf00      	nop
 800dc4c:	0002000c 	.word	0x0002000c
 800dc50:	00020010 	.word	0x00020010
 800dc54:	00020014 	.word	0x00020014
 800dc58:	00020018 	.word	0x00020018

0800dc5c <ull_configurestsiv>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4605      	mov	r5, r0
 800dc60:	460c      	mov	r4, r1
 800dc62:	680b      	ldr	r3, [r1, #0]
 800dc64:	2200      	movs	r2, #0
 800dc66:	490b      	ldr	r1, [pc, #44]	; (800dc94 <ull_configurestsiv+0x38>)
 800dc68:	f7ff ff50 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc6c:	6863      	ldr	r3, [r4, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	4909      	ldr	r1, [pc, #36]	; (800dc98 <ull_configurestsiv+0x3c>)
 800dc72:	4628      	mov	r0, r5
 800dc74:	f7ff ff4a 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4907      	ldr	r1, [pc, #28]	; (800dc9c <ull_configurestsiv+0x40>)
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f7ff ff44 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc84:	68e3      	ldr	r3, [r4, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	4905      	ldr	r1, [pc, #20]	; (800dca0 <ull_configurestsiv+0x44>)
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f7ff ff3e 	bl	800db0c <dwt_write32bitoffsetreg>
 800dc90:	bd38      	pop	{r3, r4, r5, pc}
 800dc92:	bf00      	nop
 800dc94:	0002001c 	.word	0x0002001c
 800dc98:	00020020 	.word	0x00020020
 800dc9c:	00020024 	.word	0x00020024
 800dca0:	00020028 	.word	0x00020028

0800dca4 <ull_configmrxlut>:
 800dca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca8:	4604      	mov	r4, r0
 800dcaa:	4d35      	ldr	r5, [pc, #212]	; (800dd80 <ull_configmrxlut+0xdc>)
 800dcac:	4b35      	ldr	r3, [pc, #212]	; (800dd84 <ull_configmrxlut+0xe0>)
 800dcae:	2905      	cmp	r1, #5
 800dcb0:	bf18      	it	ne
 800dcb2:	461d      	movne	r5, r3
 800dcb4:	4e34      	ldr	r6, [pc, #208]	; (800dd88 <ull_configmrxlut+0xe4>)
 800dcb6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800dcba:	2905      	cmp	r1, #5
 800dcbc:	bf18      	it	ne
 800dcbe:	461e      	movne	r6, r3
 800dcc0:	4f32      	ldr	r7, [pc, #200]	; (800dd8c <ull_configmrxlut+0xe8>)
 800dcc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dcc6:	2905      	cmp	r1, #5
 800dcc8:	bf18      	it	ne
 800dcca:	461f      	movne	r7, r3
 800dccc:	4a30      	ldr	r2, [pc, #192]	; (800dd90 <ull_configmrxlut+0xec>)
 800dcce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dcd2:	2905      	cmp	r1, #5
 800dcd4:	bf0c      	ite	eq
 800dcd6:	4690      	moveq	r8, r2
 800dcd8:	4698      	movne	r8, r3
 800dcda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcde:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800dce2:	2905      	cmp	r1, #5
 800dce4:	bf0c      	ite	eq
 800dce6:	4691      	moveq	r9, r2
 800dce8:	4699      	movne	r9, r3
 800dcea:	4a2a      	ldr	r2, [pc, #168]	; (800dd94 <ull_configmrxlut+0xf0>)
 800dcec:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800dcf0:	2905      	cmp	r1, #5
 800dcf2:	bf0c      	ite	eq
 800dcf4:	4692      	moveq	sl, r2
 800dcf6:	469a      	movne	sl, r3
 800dcf8:	4b27      	ldr	r3, [pc, #156]	; (800dd98 <ull_configmrxlut+0xf4>)
 800dcfa:	4a28      	ldr	r2, [pc, #160]	; (800dd9c <ull_configmrxlut+0xf8>)
 800dcfc:	2905      	cmp	r1, #5
 800dcfe:	bf0c      	ite	eq
 800dd00:	469b      	moveq	fp, r3
 800dd02:	4693      	movne	fp, r2
 800dd04:	f44f 7310 	mov.w	r3, #576	; 0x240
 800dd08:	2200      	movs	r2, #0
 800dd0a:	4925      	ldr	r1, [pc, #148]	; (800dda0 <ull_configmrxlut+0xfc>)
 800dd0c:	f7ff fefe 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd10:	4b24      	ldr	r3, [pc, #144]	; (800dda4 <ull_configmrxlut+0x100>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	4924      	ldr	r1, [pc, #144]	; (800dda8 <ull_configmrxlut+0x104>)
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff fef8 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd1c:	4b23      	ldr	r3, [pc, #140]	; (800ddac <ull_configmrxlut+0x108>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	4923      	ldr	r1, [pc, #140]	; (800ddb0 <ull_configmrxlut+0x10c>)
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7ff fef2 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd28:	465b      	mov	r3, fp
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	4921      	ldr	r1, [pc, #132]	; (800ddb4 <ull_configmrxlut+0x110>)
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f7ff feec 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd34:	4653      	mov	r3, sl
 800dd36:	2200      	movs	r2, #0
 800dd38:	491f      	ldr	r1, [pc, #124]	; (800ddb8 <ull_configmrxlut+0x114>)
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7ff fee6 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd40:	464b      	mov	r3, r9
 800dd42:	2200      	movs	r2, #0
 800dd44:	491d      	ldr	r1, [pc, #116]	; (800ddbc <ull_configmrxlut+0x118>)
 800dd46:	4620      	mov	r0, r4
 800dd48:	f7ff fee0 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd4c:	4643      	mov	r3, r8
 800dd4e:	2200      	movs	r2, #0
 800dd50:	491b      	ldr	r1, [pc, #108]	; (800ddc0 <ull_configmrxlut+0x11c>)
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7ff feda 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd58:	463b      	mov	r3, r7
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	4919      	ldr	r1, [pc, #100]	; (800ddc4 <ull_configmrxlut+0x120>)
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f7ff fed4 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd64:	4633      	mov	r3, r6
 800dd66:	2200      	movs	r2, #0
 800dd68:	4917      	ldr	r1, [pc, #92]	; (800ddc8 <ull_configmrxlut+0x124>)
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f7ff fece 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd70:	462b      	mov	r3, r5
 800dd72:	2200      	movs	r2, #0
 800dd74:	4915      	ldr	r1, [pc, #84]	; (800ddcc <ull_configmrxlut+0x128>)
 800dd76:	4620      	mov	r0, r4
 800dd78:	f7ff fec8 	bl	800db0c <dwt_write32bitoffsetreg>
 800dd7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd80:	00039ff6 	.word	0x00039ff6
 800dd84:	00055ffe 	.word	0x00055ffe
 800dd88:	00039dfe 	.word	0x00039dfe
 800dd8c:	00039c7e 	.word	0x00039c7e
 800dd90:	00038efe 	.word	0x00038efe
 800dd94:	0003876e 	.word	0x0003876e
 800dd98:	0003803e 	.word	0x0003803e
 800dd9c:	0005407e 	.word	0x0005407e
 800dda0:	0003001c 	.word	0x0003001c
 800dda4:	1a491248 	.word	0x1a491248
 800dda8:	00030020 	.word	0x00030020
 800ddac:	2db248db 	.word	0x2db248db
 800ddb0:	00030024 	.word	0x00030024
 800ddb4:	0003002c 	.word	0x0003002c
 800ddb8:	00030030 	.word	0x00030030
 800ddbc:	00030034 	.word	0x00030034
 800ddc0:	00030038 	.word	0x00030038
 800ddc4:	0003003c 	.word	0x0003003c
 800ddc8:	00030040 	.word	0x00030040
 800ddcc:	00030044 	.word	0x00030044

0800ddd0 <ull_disable_rftx_blocks>:
 800ddd0:	b508      	push	{r3, lr}
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	4902      	ldr	r1, [pc, #8]	; (800dde0 <ull_disable_rftx_blocks+0x10>)
 800ddd8:	f7ff fe98 	bl	800db0c <dwt_write32bitoffsetreg>
 800dddc:	bd08      	pop	{r3, pc}
 800ddde:	bf00      	nop
 800dde0:	00070004 	.word	0x00070004

0800dde4 <ull_disable_rf_tx>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4604      	mov	r4, r0
 800dde8:	460d      	mov	r5, r1
 800ddea:	2300      	movs	r3, #0
 800ddec:	461a      	mov	r2, r3
 800ddee:	490a      	ldr	r1, [pc, #40]	; (800de18 <ull_disable_rf_tx+0x34>)
 800ddf0:	f7ff fe8c 	bl	800db0c <dwt_write32bitoffsetreg>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f7ff fe85 	bl	800db0c <dwt_write32bitoffsetreg>
 800de02:	b905      	cbnz	r5, 800de06 <ull_disable_rf_tx+0x22>
 800de04:	bd38      	pop	{r3, r4, r5, pc}
 800de06:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800de0a:	2200      	movs	r2, #0
 800de0c:	4903      	ldr	r1, [pc, #12]	; (800de1c <ull_disable_rf_tx+0x38>)
 800de0e:	4620      	mov	r0, r4
 800de10:	f7ff fe7c 	bl	800db0c <dwt_write32bitoffsetreg>
 800de14:	e7f6      	b.n	800de04 <ull_disable_rf_tx+0x20>
 800de16:	bf00      	nop
 800de18:	00070048 	.word	0x00070048
 800de1c:	00070014 	.word	0x00070014

0800de20 <ull_repeated_cw>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	4606      	mov	r6, r0
 800de24:	460c      	mov	r4, r1
 800de26:	4615      	mov	r5, r2
 800de28:	2100      	movs	r1, #0
 800de2a:	f7ff febf 	bl	800dbac <ull_setfinegraintxseq>
 800de2e:	2d0f      	cmp	r5, #15
 800de30:	bfa8      	it	ge
 800de32:	250f      	movge	r5, #15
 800de34:	1e63      	subs	r3, r4, #1
 800de36:	2b03      	cmp	r3, #3
 800de38:	bf28      	it	cs
 800de3a:	2404      	movcs	r4, #4
 800de3c:	2310      	movs	r3, #16
 800de3e:	4123      	asrs	r3, r4
 800de40:	2200      	movs	r2, #0
 800de42:	4907      	ldr	r1, [pc, #28]	; (800de60 <ull_repeated_cw+0x40>)
 800de44:	4630      	mov	r0, r6
 800de46:	f7ff fe61 	bl	800db0c <dwt_write32bitoffsetreg>
 800de4a:	1e63      	subs	r3, r4, #1
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	fa05 f303 	lsl.w	r3, r5, r3
 800de52:	2200      	movs	r2, #0
 800de54:	4903      	ldr	r1, [pc, #12]	; (800de64 <ull_repeated_cw+0x44>)
 800de56:	4630      	mov	r0, r6
 800de58:	f7ff fe58 	bl	800db0c <dwt_write32bitoffsetreg>
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	bf00      	nop
 800de60:	00070028 	.word	0x00070028
 800de64:	00080018 	.word	0x00080018

0800de68 <ull_readrxdata>:
 800de68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de6a:	b083      	sub	sp, #12
 800de6c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800de6e:	7ba4      	ldrb	r4, [r4, #14]
 800de70:	2c03      	cmp	r4, #3
 800de72:	bf0c      	ite	eq
 800de74:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800de78:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800de7c:	189c      	adds	r4, r3, r2
 800de7e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800de82:	da19      	bge.n	800deb8 <ull_readrxdata+0x50>
 800de84:	461d      	mov	r5, r3
 800de86:	4616      	mov	r6, r2
 800de88:	460f      	mov	r7, r1
 800de8a:	4604      	mov	r4, r0
 800de8c:	2b7f      	cmp	r3, #127	; 0x7f
 800de8e:	d915      	bls.n	800debc <ull_readrxdata+0x54>
 800de90:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800de94:	2200      	movs	r2, #0
 800de96:	490d      	ldr	r1, [pc, #52]	; (800decc <ull_readrxdata+0x64>)
 800de98:	f7ff fe38 	bl	800db0c <dwt_write32bitoffsetreg>
 800de9c:	462b      	mov	r3, r5
 800de9e:	2200      	movs	r2, #0
 800dea0:	490b      	ldr	r1, [pc, #44]	; (800ded0 <ull_readrxdata+0x68>)
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7ff fe32 	bl	800db0c <dwt_write32bitoffsetreg>
 800dea8:	9700      	str	r7, [sp, #0]
 800deaa:	4633      	mov	r3, r6
 800deac:	2200      	movs	r2, #0
 800deae:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800deb2:	4620      	mov	r0, r4
 800deb4:	f7ff f941 	bl	800d13a <dwt_readfromdevice>
 800deb8:	b003      	add	sp, #12
 800deba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800debc:	9100      	str	r1, [sp, #0]
 800debe:	4613      	mov	r3, r2
 800dec0:	462a      	mov	r2, r5
 800dec2:	4661      	mov	r1, ip
 800dec4:	f7ff f939 	bl	800d13a <dwt_readfromdevice>
 800dec8:	e7f6      	b.n	800deb8 <ull_readrxdata+0x50>
 800deca:	bf00      	nop
 800decc:	001f0004 	.word	0x001f0004
 800ded0:	001f0008 	.word	0x001f0008

0800ded4 <dwt_write8bitoffsetreg>:
 800ded4:	b510      	push	{r4, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	ac04      	add	r4, sp, #16
 800deda:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800dede:	9400      	str	r4, [sp, #0]
 800dee0:	2301      	movs	r3, #1
 800dee2:	b292      	uxth	r2, r2
 800dee4:	f7ff fd9c 	bl	800da20 <dwt_writetodevice>
 800dee8:	b004      	add	sp, #16
 800deea:	bd10      	pop	{r4, pc}

0800deec <ull_getframelength>:
 800deec:	b510      	push	{r4, lr}
 800deee:	4604      	mov	r4, r0
 800def0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800def2:	7b9b      	ldrb	r3, [r3, #14]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d013      	beq.n	800df20 <ull_getframelength+0x34>
 800def8:	2b03      	cmp	r3, #3
 800defa:	d11d      	bne.n	800df38 <ull_getframelength+0x4c>
 800defc:	23f0      	movs	r3, #240	; 0xf0
 800defe:	2200      	movs	r2, #0
 800df00:	4912      	ldr	r1, [pc, #72]	; (800df4c <ull_getframelength+0x60>)
 800df02:	f7ff ffe7 	bl	800ded4 <dwt_write8bitoffsetreg>
 800df06:	2200      	movs	r2, #0
 800df08:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800df0c:	4620      	mov	r0, r4
 800df0e:	f7ff f934 	bl	800d17a <dwt_read16bitoffsetreg>
 800df12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df14:	7ada      	ldrb	r2, [r3, #11]
 800df16:	b1a2      	cbz	r2, 800df42 <ull_getframelength+0x56>
 800df18:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800df1c:	83d8      	strh	r0, [r3, #30]
 800df1e:	bd10      	pop	{r4, pc}
 800df20:	230f      	movs	r3, #15
 800df22:	2200      	movs	r2, #0
 800df24:	4909      	ldr	r1, [pc, #36]	; (800df4c <ull_getframelength+0x60>)
 800df26:	f7ff ffd5 	bl	800ded4 <dwt_write8bitoffsetreg>
 800df2a:	2200      	movs	r2, #0
 800df2c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800df30:	4620      	mov	r0, r4
 800df32:	f7ff f922 	bl	800d17a <dwt_read16bitoffsetreg>
 800df36:	e7ec      	b.n	800df12 <ull_getframelength+0x26>
 800df38:	2200      	movs	r2, #0
 800df3a:	214c      	movs	r1, #76	; 0x4c
 800df3c:	f7ff f91d 	bl	800d17a <dwt_read16bitoffsetreg>
 800df40:	e7e7      	b.n	800df12 <ull_getframelength+0x26>
 800df42:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800df46:	83d8      	strh	r0, [r3, #30]
 800df48:	e7e9      	b.n	800df1e <ull_getframelength+0x32>
 800df4a:	bf00      	nop
 800df4c:	00010018 	.word	0x00010018

0800df50 <_dwt_clear_db_events>:
 800df50:	b510      	push	{r4, lr}
 800df52:	4604      	mov	r4, r0
 800df54:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800df56:	7b9b      	ldrb	r3, [r3, #14]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d004      	beq.n	800df66 <_dwt_clear_db_events+0x16>
 800df5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df5e:	7b9b      	ldrb	r3, [r3, #14]
 800df60:	2b03      	cmp	r3, #3
 800df62:	d006      	beq.n	800df72 <_dwt_clear_db_events+0x22>
 800df64:	bd10      	pop	{r4, pc}
 800df66:	230f      	movs	r3, #15
 800df68:	2200      	movs	r2, #0
 800df6a:	4905      	ldr	r1, [pc, #20]	; (800df80 <_dwt_clear_db_events+0x30>)
 800df6c:	f7ff ffb2 	bl	800ded4 <dwt_write8bitoffsetreg>
 800df70:	e7f4      	b.n	800df5c <_dwt_clear_db_events+0xc>
 800df72:	23f0      	movs	r3, #240	; 0xf0
 800df74:	2200      	movs	r2, #0
 800df76:	4902      	ldr	r1, [pc, #8]	; (800df80 <_dwt_clear_db_events+0x30>)
 800df78:	4620      	mov	r0, r4
 800df7a:	f7ff ffab 	bl	800ded4 <dwt_write8bitoffsetreg>
 800df7e:	e7f1      	b.n	800df64 <_dwt_clear_db_events+0x14>
 800df80:	00010018 	.word	0x00010018

0800df84 <ull_clearaonconfig>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	4604      	mov	r4, r0
 800df88:	2300      	movs	r3, #0
 800df8a:	461a      	mov	r2, r3
 800df8c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800df90:	f7ff fd51 	bl	800da36 <dwt_write16bitoffsetreg>
 800df94:	2300      	movs	r3, #0
 800df96:	461a      	mov	r2, r3
 800df98:	4908      	ldr	r1, [pc, #32]	; (800dfbc <ull_clearaonconfig+0x38>)
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7ff ff9a 	bl	800ded4 <dwt_write8bitoffsetreg>
 800dfa0:	4d07      	ldr	r5, [pc, #28]	; (800dfc0 <ull_clearaonconfig+0x3c>)
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f7ff ff93 	bl	800ded4 <dwt_write8bitoffsetreg>
 800dfae:	2302      	movs	r3, #2
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f7ff ff8d 	bl	800ded4 <dwt_write8bitoffsetreg>
 800dfba:	bd38      	pop	{r3, r4, r5, pc}
 800dfbc:	000a0014 	.word	0x000a0014
 800dfc0:	000a0004 	.word	0x000a0004

0800dfc4 <ull_configeventcounters>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	460c      	mov	r4, r1
 800dfca:	2302      	movs	r3, #2
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800dfd2:	f7ff ff7f 	bl	800ded4 <dwt_write8bitoffsetreg>
 800dfd6:	b904      	cbnz	r4, 800dfda <ull_configeventcounters+0x16>
 800dfd8:	bd38      	pop	{r3, r4, r5, pc}
 800dfda:	2301      	movs	r3, #1
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f7ff ff76 	bl	800ded4 <dwt_write8bitoffsetreg>
 800dfe8:	e7f6      	b.n	800dfd8 <ull_configeventcounters+0x14>
	...

0800dfec <ull_aon_read>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4604      	mov	r4, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	2200      	movs	r2, #0
 800dff4:	490a      	ldr	r1, [pc, #40]	; (800e020 <ull_aon_read+0x34>)
 800dff6:	f7ff fd1e 	bl	800da36 <dwt_write16bitoffsetreg>
 800dffa:	4d0a      	ldr	r5, [pc, #40]	; (800e024 <ull_aon_read+0x38>)
 800dffc:	2388      	movs	r3, #136	; 0x88
 800dffe:	2200      	movs	r2, #0
 800e000:	4629      	mov	r1, r5
 800e002:	4620      	mov	r0, r4
 800e004:	f7ff ff66 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e008:	2300      	movs	r3, #0
 800e00a:	461a      	mov	r2, r3
 800e00c:	4629      	mov	r1, r5
 800e00e:	4620      	mov	r0, r4
 800e010:	f7ff ff60 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e014:	2200      	movs	r2, #0
 800e016:	4904      	ldr	r1, [pc, #16]	; (800e028 <ull_aon_read+0x3c>)
 800e018:	4620      	mov	r0, r4
 800e01a:	f7ff f8ed 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800e01e:	bd38      	pop	{r3, r4, r5, pc}
 800e020:	000a000c 	.word	0x000a000c
 800e024:	000a0004 	.word	0x000a0004
 800e028:	000a0008 	.word	0x000a0008

0800e02c <ull_aon_write>:
 800e02c:	b570      	push	{r4, r5, r6, lr}
 800e02e:	4604      	mov	r4, r0
 800e030:	460b      	mov	r3, r1
 800e032:	4615      	mov	r5, r2
 800e034:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e038:	bf34      	ite	cc
 800e03a:	2600      	movcc	r6, #0
 800e03c:	2620      	movcs	r6, #32
 800e03e:	2200      	movs	r2, #0
 800e040:	490b      	ldr	r1, [pc, #44]	; (800e070 <ull_aon_write+0x44>)
 800e042:	f7ff fcf8 	bl	800da36 <dwt_write16bitoffsetreg>
 800e046:	462b      	mov	r3, r5
 800e048:	2200      	movs	r2, #0
 800e04a:	490a      	ldr	r1, [pc, #40]	; (800e074 <ull_aon_write+0x48>)
 800e04c:	4620      	mov	r0, r4
 800e04e:	f7ff ff41 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e052:	4d09      	ldr	r5, [pc, #36]	; (800e078 <ull_aon_write+0x4c>)
 800e054:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800e058:	2200      	movs	r2, #0
 800e05a:	4629      	mov	r1, r5
 800e05c:	4620      	mov	r0, r4
 800e05e:	f7ff ff39 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e062:	2300      	movs	r3, #0
 800e064:	461a      	mov	r2, r3
 800e066:	4629      	mov	r1, r5
 800e068:	4620      	mov	r0, r4
 800e06a:	f7ff ff33 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	000a000c 	.word	0x000a000c
 800e074:	000a0010 	.word	0x000a0010
 800e078:	000a0004 	.word	0x000a0004

0800e07c <ull_configuresleep>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	4604      	mov	r4, r0
 800e080:	460d      	mov	r5, r1
 800e082:	4616      	mov	r6, r2
 800e084:	2200      	movs	r2, #0
 800e086:	f240 110b 	movw	r1, #267	; 0x10b
 800e08a:	f7ff ffcf 	bl	800e02c <ull_aon_write>
 800e08e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e092:	4620      	mov	r0, r4
 800e094:	f7ff ffaa 	bl	800dfec <ull_aon_read>
 800e098:	f000 021f 	and.w	r2, r0, #31
 800e09c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f7ff ffc3 	bl	800e02c <ull_aon_write>
 800e0a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e0a8:	8a1a      	ldrh	r2, [r3, #16]
 800e0aa:	4315      	orrs	r5, r2
 800e0ac:	821d      	strh	r5, [r3, #16]
 800e0ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e0b0:	8a13      	ldrh	r3, [r2, #16]
 800e0b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800e0b6:	bf1c      	itt	ne
 800e0b8:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800e0bc:	8213      	strhne	r3, [r2, #16]
 800e0be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e0c0:	8a1b      	ldrh	r3, [r3, #16]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f7ff fcb4 	bl	800da36 <dwt_write16bitoffsetreg>
 800e0ce:	4633      	mov	r3, r6
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	4902      	ldr	r1, [pc, #8]	; (800e0dc <ull_configuresleep+0x60>)
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f7ff fefd 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	000a0014 	.word	0x000a0014

0800e0e0 <ull_setplenfine>:
 800e0e0:	b508      	push	{r3, lr}
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	2124      	movs	r1, #36	; 0x24
 800e0e8:	f7ff fef4 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e0ec:	bd08      	pop	{r3, pc}
	...

0800e0f0 <ull_update_nonce_GCM>:
 800e0f0:	b500      	push	{lr}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	9100      	str	r1, [sp, #0]
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4903      	ldr	r1, [pc, #12]	; (800e108 <ull_update_nonce_GCM+0x18>)
 800e0fc:	f7ff fc90 	bl	800da20 <dwt_writetodevice>
 800e100:	b003      	add	sp, #12
 800e102:	f85d fb04 	ldr.w	pc, [sp], #4
 800e106:	bf00      	nop
 800e108:	00010034 	.word	0x00010034

0800e10c <ull_update_nonce_CCM>:
 800e10c:	b500      	push	{lr}
 800e10e:	b087      	sub	sp, #28
 800e110:	4613      	mov	r3, r2
 800e112:	7a8a      	ldrb	r2, [r1, #10]
 800e114:	f88d 2008 	strb.w	r2, [sp, #8]
 800e118:	7a4a      	ldrb	r2, [r1, #9]
 800e11a:	f88d 2009 	strb.w	r2, [sp, #9]
 800e11e:	7a0a      	ldrb	r2, [r1, #8]
 800e120:	f88d 200a 	strb.w	r2, [sp, #10]
 800e124:	79ca      	ldrb	r2, [r1, #7]
 800e126:	f88d 200b 	strb.w	r2, [sp, #11]
 800e12a:	798a      	ldrb	r2, [r1, #6]
 800e12c:	f88d 200c 	strb.w	r2, [sp, #12]
 800e130:	794a      	ldrb	r2, [r1, #5]
 800e132:	f88d 200d 	strb.w	r2, [sp, #13]
 800e136:	790a      	ldrb	r2, [r1, #4]
 800e138:	f88d 200e 	strb.w	r2, [sp, #14]
 800e13c:	78ca      	ldrb	r2, [r1, #3]
 800e13e:	f88d 200f 	strb.w	r2, [sp, #15]
 800e142:	788a      	ldrb	r2, [r1, #2]
 800e144:	f88d 2010 	strb.w	r2, [sp, #16]
 800e148:	784a      	ldrb	r2, [r1, #1]
 800e14a:	f88d 2011 	strb.w	r2, [sp, #17]
 800e14e:	780a      	ldrb	r2, [r1, #0]
 800e150:	f88d 2012 	strb.w	r2, [sp, #18]
 800e154:	2200      	movs	r2, #0
 800e156:	f88d 2013 	strb.w	r2, [sp, #19]
 800e15a:	f88d 3014 	strb.w	r3, [sp, #20]
 800e15e:	0a1b      	lsrs	r3, r3, #8
 800e160:	f88d 3015 	strb.w	r3, [sp, #21]
 800e164:	7b0b      	ldrb	r3, [r1, #12]
 800e166:	f88d 3016 	strb.w	r3, [sp, #22]
 800e16a:	7acb      	ldrb	r3, [r1, #11]
 800e16c:	f88d 3017 	strb.w	r3, [sp, #23]
 800e170:	ab02      	add	r3, sp, #8
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	2310      	movs	r3, #16
 800e176:	4903      	ldr	r1, [pc, #12]	; (800e184 <ull_update_nonce_CCM+0x78>)
 800e178:	f7ff fc52 	bl	800da20 <dwt_writetodevice>
 800e17c:	b007      	add	sp, #28
 800e17e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e182:	bf00      	nop
 800e184:	00010034 	.word	0x00010034

0800e188 <ull_writetxdata>:
 800e188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e18a:	b083      	sub	sp, #12
 800e18c:	185c      	adds	r4, r3, r1
 800e18e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e192:	da24      	bge.n	800e1de <ull_writetxdata+0x56>
 800e194:	461c      	mov	r4, r3
 800e196:	4617      	mov	r7, r2
 800e198:	460e      	mov	r6, r1
 800e19a:	4605      	mov	r5, r0
 800e19c:	2b7f      	cmp	r3, #127	; 0x7f
 800e19e:	d915      	bls.n	800e1cc <ull_writetxdata+0x44>
 800e1a0:	2314      	movs	r3, #20
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	490f      	ldr	r1, [pc, #60]	; (800e1e4 <ull_writetxdata+0x5c>)
 800e1a6:	f7ff fcb1 	bl	800db0c <dwt_write32bitoffsetreg>
 800e1aa:	4623      	mov	r3, r4
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	490e      	ldr	r1, [pc, #56]	; (800e1e8 <ull_writetxdata+0x60>)
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	f7ff fcab 	bl	800db0c <dwt_write32bitoffsetreg>
 800e1b6:	9700      	str	r7, [sp, #0]
 800e1b8:	4633      	mov	r3, r6
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	f7ff fc2d 	bl	800da20 <dwt_writetodevice>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	b003      	add	sp, #12
 800e1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1cc:	9200      	str	r2, [sp, #0]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800e1d6:	f7ff fc23 	bl	800da20 <dwt_writetodevice>
 800e1da:	2000      	movs	r0, #0
 800e1dc:	e7f4      	b.n	800e1c8 <ull_writetxdata+0x40>
 800e1de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1e2:	e7f1      	b.n	800e1c8 <ull_writetxdata+0x40>
 800e1e4:	001f0004 	.word	0x001f0004
 800e1e8:	001f0008 	.word	0x001f0008

0800e1ec <ull_signal_rx_buff_free>:
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	2302      	movs	r3, #2
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	9200      	str	r2, [sp, #0]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	2113      	movs	r1, #19
 800e1fe:	f7fe ff1e 	bl	800d03e <dwt_xfer3xxx>
 800e202:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e204:	7b9a      	ldrb	r2, [r3, #14]
 800e206:	2a03      	cmp	r2, #3
 800e208:	bf0c      	ite	eq
 800e20a:	2201      	moveq	r2, #1
 800e20c:	2203      	movne	r2, #3
 800e20e:	739a      	strb	r2, [r3, #14]
 800e210:	b002      	add	sp, #8
 800e212:	bd10      	pop	{r4, pc}

0800e214 <ull_isr>:
 800e214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e218:	4604      	mov	r4, r0
 800e21a:	2200      	movs	r2, #0
 800e21c:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800e220:	f7fe ffea 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800e224:	4605      	mov	r5, r0
 800e226:	2200      	movs	r2, #0
 800e228:	2144      	movs	r1, #68	; 0x44
 800e22a:	4620      	mov	r0, r4
 800e22c:	f7fe ff8f 	bl	800d14e <dwt_read32bitoffsetreg>
 800e230:	4606      	mov	r6, r0
 800e232:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e234:	2200      	movs	r2, #0
 800e236:	83da      	strh	r2, [r3, #30]
 800e238:	f883 2020 	strb.w	r2, [r3, #32]
 800e23c:	619a      	str	r2, [r3, #24]
 800e23e:	839a      	strh	r2, [r3, #28]
 800e240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800e244:	625a      	str	r2, [r3, #36]	; 0x24
 800e246:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e248:	625c      	str	r4, [r3, #36]	; 0x24
 800e24a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e24c:	7b9f      	ldrb	r7, [r3, #14]
 800e24e:	2f00      	cmp	r7, #0
 800e250:	d17f      	bne.n	800e352 <ull_isr+0x13e>
 800e252:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e254:	619e      	str	r6, [r3, #24]
 800e256:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800e25a:	f898 3015 	ldrb.w	r3, [r8, #21]
 800e25e:	f003 0303 	and.w	r3, r3, #3
 800e262:	2b03      	cmp	r3, #3
 800e264:	f000 8090 	beq.w	800e388 <ull_isr+0x174>
 800e268:	f015 0f80 	tst.w	r5, #128	; 0x80
 800e26c:	f040 8093 	bne.w	800e396 <ull_isr+0x182>
 800e270:	f015 0f01 	tst.w	r5, #1
 800e274:	f040 80c1 	bne.w	800e3fa <ull_isr+0x1e6>
 800e278:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e27c:	d00b      	beq.n	800e296 <ull_isr+0x82>
 800e27e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e280:	b113      	cbz	r3, 800e288 <ull_isr+0x74>
 800e282:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e284:	3018      	adds	r0, #24
 800e286:	4798      	blx	r3
 800e288:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800e28c:	2202      	movs	r2, #2
 800e28e:	2144      	movs	r1, #68	; 0x44
 800e290:	4620      	mov	r0, r4
 800e292:	f7ff fbd0 	bl	800da36 <dwt_write16bitoffsetreg>
 800e296:	f015 0f08 	tst.w	r5, #8
 800e29a:	d107      	bne.n	800e2ac <ull_isr+0x98>
 800e29c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e29e:	7b9b      	ldrb	r3, [r3, #14]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80ea 	beq.w	800e47a <ull_isr+0x266>
 800e2a6:	2f00      	cmp	r7, #0
 800e2a8:	f000 80e7 	beq.w	800e47a <ull_isr+0x266>
 800e2ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2020 	strb.w	r2, [r3, #32]
 800e2b4:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800e2b8:	f000 80ad 	beq.w	800e416 <ull_isr+0x202>
 800e2bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e2be:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e2c2:	f043 0308 	orr.w	r3, r3, #8
 800e2c6:	f882 3020 	strb.w	r3, [r2, #32]
 800e2ca:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800e2ce:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800e2d2:	d008      	beq.n	800e2e6 <ull_isr+0xd2>
 800e2d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e2d6:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e2da:	f043 0310 	orr.w	r3, r3, #16
 800e2de:	f882 3020 	strb.w	r3, [r2, #32]
 800e2e2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800e2e6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e2ea:	d006      	beq.n	800e2fa <ull_isr+0xe6>
 800e2ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e2ee:	7d53      	ldrb	r3, [r2, #21]
 800e2f0:	f003 0303 	and.w	r3, r3, #3
 800e2f4:	2b03      	cmp	r3, #3
 800e2f6:	f000 809a 	beq.w	800e42e <ull_isr+0x21a>
 800e2fa:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800e2fe:	f040 80a2 	bne.w	800e446 <ull_isr+0x232>
 800e302:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800e306:	2200      	movs	r2, #0
 800e308:	2144      	movs	r1, #68	; 0x44
 800e30a:	4620      	mov	r0, r4
 800e30c:	f7ff fbfe 	bl	800db0c <dwt_write32bitoffsetreg>
 800e310:	4620      	mov	r0, r4
 800e312:	f7ff fe1d 	bl	800df50 <_dwt_clear_db_events>
 800e316:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e318:	8bc3      	ldrh	r3, [r0, #30]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f040 80a2 	bne.w	800e464 <ull_isr+0x250>
 800e320:	7d43      	ldrb	r3, [r0, #21]
 800e322:	f003 0303 	and.w	r3, r3, #3
 800e326:	2b03      	cmp	r3, #3
 800e328:	f000 809c 	beq.w	800e464 <ull_isr+0x250>
 800e32c:	6983      	ldr	r3, [r0, #24]
 800e32e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800e332:	6183      	str	r3, [r0, #24]
 800e334:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e336:	6993      	ldr	r3, [r2, #24]
 800e338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e33c:	6193      	str	r3, [r2, #24]
 800e33e:	69e3      	ldr	r3, [r4, #28]
 800e340:	b113      	cbz	r3, 800e348 <ull_isr+0x134>
 800e342:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e344:	3018      	adds	r0, #24
 800e346:	4798      	blx	r3
 800e348:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2020 	strb.w	r2, [r3, #32]
 800e350:	e08c      	b.n	800e46c <ull_isr+0x258>
 800e352:	496d      	ldr	r1, [pc, #436]	; (800e508 <ull_isr+0x2f4>)
 800e354:	4620      	mov	r0, r4
 800e356:	f7fe ff4f 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800e35a:	4607      	mov	r7, r0
 800e35c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e35e:	7b9b      	ldrb	r3, [r3, #14]
 800e360:	2b03      	cmp	r3, #3
 800e362:	bf08      	it	eq
 800e364:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800e368:	f017 0f01 	tst.w	r7, #1
 800e36c:	bf18      	it	ne
 800e36e:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800e372:	f017 0f02 	tst.w	r7, #2
 800e376:	bf18      	it	ne
 800e378:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800e37c:	f017 0f04 	tst.w	r7, #4
 800e380:	bf18      	it	ne
 800e382:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800e386:	e764      	b.n	800e252 <ull_isr+0x3e>
 800e388:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e38c:	bf1c      	itt	ne
 800e38e:	f045 0508 	orrne.w	r5, r5, #8
 800e392:	b2ed      	uxtbne	r5, r5
 800e394:	e768      	b.n	800e268 <ull_isr+0x54>
 800e396:	2200      	movs	r2, #0
 800e398:	2148      	movs	r1, #72	; 0x48
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7fe feed 	bl	800d17a <dwt_read16bitoffsetreg>
 800e3a0:	f8a8 001c 	strh.w	r0, [r8, #28]
 800e3a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e3a6:	7d1a      	ldrb	r2, [r3, #20]
 800e3a8:	b11a      	cbz	r2, 800e3b2 <ull_isr+0x19e>
 800e3aa:	699a      	ldr	r2, [r3, #24]
 800e3ac:	f012 0f04 	tst.w	r2, #4
 800e3b0:	d103      	bne.n	800e3ba <ull_isr+0x1a6>
 800e3b2:	8b9b      	ldrh	r3, [r3, #28]
 800e3b4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800e3b8:	b18b      	cbz	r3, 800e3de <ull_isr+0x1ca>
 800e3ba:	2304      	movs	r3, #4
 800e3bc:	2200      	movs	r2, #0
 800e3be:	2144      	movs	r1, #68	; 0x44
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f7ff fd87 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e3c6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	2148      	movs	r1, #72	; 0x48
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f7ff fb31 	bl	800da36 <dwt_write16bitoffsetreg>
 800e3d4:	6a23      	ldr	r3, [r4, #32]
 800e3d6:	b113      	cbz	r3, 800e3de <ull_isr+0x1ca>
 800e3d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e3da:	3018      	adds	r0, #24
 800e3dc:	4798      	blx	r3
 800e3de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e3e0:	8b9b      	ldrh	r3, [r3, #28]
 800e3e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e3e6:	f43f af43 	beq.w	800e270 <ull_isr+0x5c>
 800e3ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	2148      	movs	r1, #72	; 0x48
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f7ff fb1f 	bl	800da36 <dwt_write16bitoffsetreg>
 800e3f8:	e73a      	b.n	800e270 <ull_isr+0x5c>
 800e3fa:	23f8      	movs	r3, #248	; 0xf8
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2144      	movs	r1, #68	; 0x44
 800e400:	4620      	mov	r0, r4
 800e402:	f7ff fd67 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e406:	6923      	ldr	r3, [r4, #16]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f43f af35 	beq.w	800e278 <ull_isr+0x64>
 800e40e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e410:	3018      	adds	r0, #24
 800e412:	4798      	blx	r3
 800e414:	e730      	b.n	800e278 <ull_isr+0x64>
 800e416:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800e41a:	bf1f      	itttt	ne
 800e41c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800e41e:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800e422:	f043 0304 	orrne.w	r3, r3, #4
 800e426:	f882 3020 	strbne.w	r3, [r2, #32]
 800e42a:	2700      	movs	r7, #0
 800e42c:	e74f      	b.n	800e2ce <ull_isr+0xba>
 800e42e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e432:	f043 0302 	orr.w	r3, r3, #2
 800e436:	f882 3020 	strb.w	r3, [r2, #32]
 800e43a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e43c:	2200      	movs	r2, #0
 800e43e:	83da      	strh	r2, [r3, #30]
 800e440:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800e444:	e75d      	b.n	800e302 <ull_isr+0xee>
 800e446:	4620      	mov	r0, r4
 800e448:	f7ff fd50 	bl	800deec <ull_getframelength>
 800e44c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800e450:	f43f af57 	beq.w	800e302 <ull_isr+0xee>
 800e454:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e456:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e45a:	f043 0301 	orr.w	r3, r3, #1
 800e45e:	f882 3020 	strb.w	r3, [r2, #32]
 800e462:	e74e      	b.n	800e302 <ull_isr+0xee>
 800e464:	6963      	ldr	r3, [r4, #20]
 800e466:	b10b      	cbz	r3, 800e46c <ull_isr+0x258>
 800e468:	3018      	adds	r0, #24
 800e46a:	4798      	blx	r3
 800e46c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e46e:	7b9b      	ldrb	r3, [r3, #14]
 800e470:	bb03      	cbnz	r3, 800e4b4 <ull_isr+0x2a0>
 800e472:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e474:	2200      	movs	r2, #0
 800e476:	f883 2020 	strb.w	r2, [r3, #32]
 800e47a:	f015 0f10 	tst.w	r5, #16
 800e47e:	d11d      	bne.n	800e4bc <ull_isr+0x2a8>
 800e480:	f015 0f20 	tst.w	r5, #32
 800e484:	d12d      	bne.n	800e4e2 <ull_isr+0x2ce>
 800e486:	2200      	movs	r2, #0
 800e488:	4920      	ldr	r1, [pc, #128]	; (800e50c <ull_isr+0x2f8>)
 800e48a:	4620      	mov	r0, r4
 800e48c:	f7fe feb4 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800e490:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e492:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800e496:	f010 0303 	ands.w	r3, r0, #3
 800e49a:	d009      	beq.n	800e4b0 <ull_isr+0x29c>
 800e49c:	2200      	movs	r2, #0
 800e49e:	491b      	ldr	r1, [pc, #108]	; (800e50c <ull_isr+0x2f8>)
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f7ff fd17 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e4a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e4a8:	b113      	cbz	r3, 800e4b0 <ull_isr+0x29c>
 800e4aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e4ac:	3018      	adds	r0, #24
 800e4ae:	4798      	blx	r3
 800e4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f7ff fe99 	bl	800e1ec <ull_signal_rx_buff_free>
 800e4ba:	e7da      	b.n	800e472 <ull_isr+0x25e>
 800e4bc:	4b14      	ldr	r3, [pc, #80]	; (800e510 <ull_isr+0x2fc>)
 800e4be:	2200      	movs	r2, #0
 800e4c0:	2144      	movs	r1, #68	; 0x44
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f7ff fb22 	bl	800db0c <dwt_write32bitoffsetreg>
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7ff fd41 	bl	800df50 <_dwt_clear_db_events>
 800e4ce:	69e3      	ldr	r3, [r4, #28]
 800e4d0:	b113      	cbz	r3, 800e4d8 <ull_isr+0x2c4>
 800e4d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e4d4:	3018      	adds	r0, #24
 800e4d6:	4798      	blx	r3
 800e4d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f883 2020 	strb.w	r2, [r3, #32]
 800e4e0:	e7ce      	b.n	800e480 <ull_isr+0x26c>
 800e4e2:	4b0c      	ldr	r3, [pc, #48]	; (800e514 <ull_isr+0x300>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2144      	movs	r1, #68	; 0x44
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7ff fb0f 	bl	800db0c <dwt_write32bitoffsetreg>
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	f7ff fd2e 	bl	800df50 <_dwt_clear_db_events>
 800e4f4:	69a3      	ldr	r3, [r4, #24]
 800e4f6:	b113      	cbz	r3, 800e4fe <ull_isr+0x2ea>
 800e4f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e4fa:	3018      	adds	r0, #24
 800e4fc:	4798      	blx	r3
 800e4fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2020 	strb.w	r2, [r3, #32]
 800e506:	e7be      	b.n	800e486 <ull_isr+0x272>
 800e508:	00010018 	.word	0x00010018
 800e50c:	00110038 	.word	0x00110038
 800e510:	34059400 	.word	0x34059400
 800e514:	10220400 	.word	0x10220400

0800e518 <dwt_modify32bitoffsetreg>:
 800e518:	b530      	push	{r4, r5, lr}
 800e51a:	b085      	sub	sp, #20
 800e51c:	9c08      	ldr	r4, [sp, #32]
 800e51e:	f88d 3008 	strb.w	r3, [sp, #8]
 800e522:	0a1d      	lsrs	r5, r3, #8
 800e524:	f88d 5009 	strb.w	r5, [sp, #9]
 800e528:	0c1d      	lsrs	r5, r3, #16
 800e52a:	f88d 500a 	strb.w	r5, [sp, #10]
 800e52e:	0e1b      	lsrs	r3, r3, #24
 800e530:	f88d 300b 	strb.w	r3, [sp, #11]
 800e534:	f88d 400c 	strb.w	r4, [sp, #12]
 800e538:	0a23      	lsrs	r3, r4, #8
 800e53a:	f88d 300d 	strb.w	r3, [sp, #13]
 800e53e:	0c23      	lsrs	r3, r4, #16
 800e540:	f88d 300e 	strb.w	r3, [sp, #14]
 800e544:	0e24      	lsrs	r4, r4, #24
 800e546:	f88d 400f 	strb.w	r4, [sp, #15]
 800e54a:	f248 0303 	movw	r3, #32771	; 0x8003
 800e54e:	9301      	str	r3, [sp, #4]
 800e550:	ab02      	add	r3, sp, #8
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	2308      	movs	r3, #8
 800e556:	b292      	uxth	r2, r2
 800e558:	f7fe fd71 	bl	800d03e <dwt_xfer3xxx>
 800e55c:	b005      	add	sp, #20
 800e55e:	bd30      	pop	{r4, r5, pc}

0800e560 <ull_enablegpioclocks>:
 800e560:	b500      	push	{lr}
 800e562:	b083      	sub	sp, #12
 800e564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e56e:	2200      	movs	r2, #0
 800e570:	4902      	ldr	r1, [pc, #8]	; (800e57c <ull_enablegpioclocks+0x1c>)
 800e572:	f7ff ffd1 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e576:	b003      	add	sp, #12
 800e578:	f85d fb04 	ldr.w	pc, [sp], #4
 800e57c:	00110004 	.word	0x00110004

0800e580 <ull_enable_rf_tx>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	4604      	mov	r4, r0
 800e586:	460e      	mov	r6, r1
 800e588:	4d13      	ldr	r5, [pc, #76]	; (800e5d8 <ull_enable_rf_tx+0x58>)
 800e58a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e594:	2200      	movs	r2, #0
 800e596:	4629      	mov	r1, r5
 800e598:	f7ff ffbe 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e59c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f7ff ffb4 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e5b0:	4b0a      	ldr	r3, [pc, #40]	; (800e5dc <ull_enable_rf_tx+0x5c>)
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7ff ffaa 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e5c4:	b90e      	cbnz	r6, 800e5ca <ull_enable_rf_tx+0x4a>
 800e5c6:	b002      	add	sp, #8
 800e5c8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ca:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <ull_enable_rf_tx+0x60>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	4905      	ldr	r1, [pc, #20]	; (800e5e4 <ull_enable_rf_tx+0x64>)
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f7ff fa9b 	bl	800db0c <dwt_write32bitoffsetreg>
 800e5d6:	e7f6      	b.n	800e5c6 <ull_enable_rf_tx+0x46>
 800e5d8:	00070048 	.word	0x00070048
 800e5dc:	02003c00 	.word	0x02003c00
 800e5e0:	01011100 	.word	0x01011100
 800e5e4:	00070014 	.word	0x00070014

0800e5e8 <ull_enable_rftx_blocks>:
 800e5e8:	b500      	push	{lr}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	4b05      	ldr	r3, [pc, #20]	; (800e604 <ull_enable_rftx_blocks+0x1c>)
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	4904      	ldr	r1, [pc, #16]	; (800e608 <ull_enable_rftx_blocks+0x20>)
 800e5f8:	f7ff ff8e 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e5fc:	b003      	add	sp, #12
 800e5fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800e602:	bf00      	nop
 800e604:	02003c00 	.word	0x02003c00
 800e608:	00070004 	.word	0x00070004

0800e60c <_dwt_otpprogword32>:
 800e60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e610:	b083      	sub	sp, #12
 800e612:	4604      	mov	r4, r0
 800e614:	460d      	mov	r5, r1
 800e616:	4617      	mov	r7, r2
 800e618:	4e56      	ldr	r6, [pc, #344]	; (800e774 <_dwt_otpprogword32+0x168>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	4631      	mov	r1, r6
 800e61e:	f7fe fd96 	bl	800d14e <dwt_read32bitoffsetreg>
 800e622:	4681      	mov	r9, r0
 800e624:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e628:	9300      	str	r3, [sp, #0]
 800e62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e62e:	2200      	movs	r2, #0
 800e630:	4631      	mov	r1, r6
 800e632:	4620      	mov	r0, r4
 800e634:	f7ff ff70 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e638:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e778 <_dwt_otpprogword32+0x16c>
 800e63c:	2318      	movs	r3, #24
 800e63e:	2200      	movs	r2, #0
 800e640:	4641      	mov	r1, r8
 800e642:	4620      	mov	r0, r4
 800e644:	f7ff f9f7 	bl	800da36 <dwt_write16bitoffsetreg>
 800e648:	2125      	movs	r1, #37	; 0x25
 800e64a:	4620      	mov	r0, r4
 800e64c:	f7ff fa28 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e650:	2102      	movs	r1, #2
 800e652:	4620      	mov	r0, r4
 800e654:	f7ff fa24 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e658:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800e65c:	4620      	mov	r0, r4
 800e65e:	f7ff fa1f 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e662:	b2f9      	uxtb	r1, r7
 800e664:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e668:	4620      	mov	r0, r4
 800e66a:	f7ff fa19 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e66e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e672:	4620      	mov	r0, r4
 800e674:	f7ff fa14 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e678:	2100      	movs	r1, #0
 800e67a:	4620      	mov	r0, r4
 800e67c:	f7ff fa10 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e680:	2102      	movs	r1, #2
 800e682:	4620      	mov	r0, r4
 800e684:	f7ff fa0c 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e688:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800e68c:	4620      	mov	r0, r4
 800e68e:	f7ff fa07 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e692:	b2e9      	uxtb	r1, r5
 800e694:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e698:	4620      	mov	r0, r4
 800e69a:	f7ff fa01 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e69e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800e6a2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f7ff f9fa 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6ac:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800e6b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f7ff f9f3 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6ba:	0e29      	lsrs	r1, r5, #24
 800e6bc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f7ff f9ed 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7ff f9e9 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6ce:	213a      	movs	r1, #58	; 0x3a
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f7ff f9e5 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f7ff f9e0 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6e0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7ff f9db 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f7ff f9d7 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6f2:	213a      	movs	r1, #58	; 0x3a
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	f7ff f9d3 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e6fa:	f240 1101 	movw	r1, #257	; 0x101
 800e6fe:	4620      	mov	r0, r4
 800e700:	f7ff f9ce 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e704:	2302      	movs	r3, #2
 800e706:	2200      	movs	r2, #0
 800e708:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e70c:	4620      	mov	r0, r4
 800e70e:	f7ff f992 	bl	800da36 <dwt_write16bitoffsetreg>
 800e712:	2300      	movs	r3, #0
 800e714:	461a      	mov	r2, r3
 800e716:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7ff f98b 	bl	800da36 <dwt_write16bitoffsetreg>
 800e720:	2002      	movs	r0, #2
 800e722:	f7f2 f893 	bl	800084c <deca_sleep>
 800e726:	213a      	movs	r1, #58	; 0x3a
 800e728:	4620      	mov	r0, r4
 800e72a:	f7ff f9b9 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e72e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800e732:	4620      	mov	r0, r4
 800e734:	f7ff f9b4 	bl	800daa0 <__dwt_otp_write_wdata_id_reg>
 800e738:	2302      	movs	r3, #2
 800e73a:	2200      	movs	r2, #0
 800e73c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e740:	4620      	mov	r0, r4
 800e742:	f7ff f978 	bl	800da36 <dwt_write16bitoffsetreg>
 800e746:	2300      	movs	r3, #0
 800e748:	461a      	mov	r2, r3
 800e74a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e74e:	4620      	mov	r0, r4
 800e750:	f7ff f971 	bl	800da36 <dwt_write16bitoffsetreg>
 800e754:	2300      	movs	r3, #0
 800e756:	461a      	mov	r2, r3
 800e758:	4641      	mov	r1, r8
 800e75a:	4620      	mov	r0, r4
 800e75c:	f7ff f96b 	bl	800da36 <dwt_write16bitoffsetreg>
 800e760:	464b      	mov	r3, r9
 800e762:	2200      	movs	r2, #0
 800e764:	4631      	mov	r1, r6
 800e766:	4620      	mov	r0, r4
 800e768:	f7ff f9d0 	bl	800db0c <dwt_write32bitoffsetreg>
 800e76c:	b003      	add	sp, #12
 800e76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e772:	bf00      	nop
 800e774:	00070044 	.word	0x00070044
 800e778:	000b0008 	.word	0x000b0008

0800e77c <ull_setgpiomode>:
 800e77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e77e:	b083      	sub	sp, #12
 800e780:	2400      	movs	r4, #0
 800e782:	4623      	mov	r3, r4
 800e784:	2601      	movs	r6, #1
 800e786:	2707      	movs	r7, #7
 800e788:	e002      	b.n	800e790 <ull_setgpiomode+0x14>
 800e78a:	3401      	adds	r4, #1
 800e78c:	2c09      	cmp	r4, #9
 800e78e:	d009      	beq.n	800e7a4 <ull_setgpiomode+0x28>
 800e790:	fa06 f504 	lsl.w	r5, r6, r4
 800e794:	420d      	tst	r5, r1
 800e796:	d0f8      	beq.n	800e78a <ull_setgpiomode+0xe>
 800e798:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e79c:	fa07 f505 	lsl.w	r5, r7, r5
 800e7a0:	432b      	orrs	r3, r5
 800e7a2:	e7f2      	b.n	800e78a <ull_setgpiomode+0xe>
 800e7a4:	401a      	ands	r2, r3
 800e7a6:	9200      	str	r2, [sp, #0]
 800e7a8:	43db      	mvns	r3, r3
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e7b0:	f7ff feb2 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e7b4:	b003      	add	sp, #12
 800e7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7b8 <ull_writetxfctrl>:
 800e7b8:	b500      	push	{lr}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	2a7f      	cmp	r2, #127	; 0x7f
 800e7be:	bf88      	it	hi
 800e7c0:	3280      	addhi	r2, #128	; 0x80
 800e7c2:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800e7c6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e7ca:	9100      	str	r1, [sp, #0]
 800e7cc:	4b03      	ldr	r3, [pc, #12]	; (800e7dc <ull_writetxfctrl+0x24>)
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	2120      	movs	r1, #32
 800e7d2:	f7ff fea1 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e7d6:	b003      	add	sp, #12
 800e7d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7dc:	fc00f400 	.word	0xfc00f400

0800e7e0 <prs_sys_status_and_or>:
 800e7e0:	b500      	push	{lr}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	9200      	str	r2, [sp, #0]
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	2144      	movs	r1, #68	; 0x44
 800e7ec:	f7ff fe94 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	b003      	add	sp, #12
 800e7f4:	f85d fb04 	ldr.w	pc, [sp], #4

0800e7f8 <dwt_modify8bitoffsetreg>:
 800e7f8:	b500      	push	{lr}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	f88d 300c 	strb.w	r3, [sp, #12]
 800e800:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e804:	f88d 300d 	strb.w	r3, [sp, #13]
 800e808:	f248 0301 	movw	r3, #32769	; 0x8001
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	ab03      	add	r3, sp, #12
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	2302      	movs	r3, #2
 800e814:	b292      	uxth	r2, r2
 800e816:	f7fe fc12 	bl	800d03e <dwt_xfer3xxx>
 800e81a:	b005      	add	sp, #20
 800e81c:	f85d fb04 	ldr.w	pc, [sp], #4

0800e820 <ull_enablespicrccheck>:
 800e820:	b570      	push	{r4, r5, r6, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	4604      	mov	r4, r0
 800e826:	460d      	mov	r5, r1
 800e828:	b159      	cbz	r1, 800e842 <ull_enablespicrccheck+0x22>
 800e82a:	4616      	mov	r6, r2
 800e82c:	2340      	movs	r3, #64	; 0x40
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	23ff      	movs	r3, #255	; 0xff
 800e832:	2200      	movs	r2, #0
 800e834:	2110      	movs	r1, #16
 800e836:	f7ff ffdf 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e83a:	2d02      	cmp	r5, #2
 800e83c:	d107      	bne.n	800e84e <ull_enablespicrccheck+0x2e>
 800e83e:	60e6      	str	r6, [r4, #12]
 800e840:	e005      	b.n	800e84e <ull_enablespicrccheck+0x2e>
 800e842:	2200      	movs	r2, #0
 800e844:	9200      	str	r2, [sp, #0]
 800e846:	23bf      	movs	r3, #191	; 0xbf
 800e848:	2110      	movs	r1, #16
 800e84a:	f7ff ffd5 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e84e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e850:	751d      	strb	r5, [r3, #20]
 800e852:	b002      	add	sp, #8
 800e854:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e858 <ull_configciadiag>:
 800e858:	b530      	push	{r4, r5, lr}
 800e85a:	b083      	sub	sp, #12
 800e85c:	4604      	mov	r4, r0
 800e85e:	460d      	mov	r5, r1
 800e860:	f011 0f01 	tst.w	r1, #1
 800e864:	d015      	beq.n	800e892 <ull_configciadiag+0x3a>
 800e866:	2300      	movs	r3, #0
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	23ef      	movs	r3, #239	; 0xef
 800e86c:	2202      	movs	r2, #2
 800e86e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e872:	f7ff ffc1 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e876:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e878:	759d      	strb	r5, [r3, #22]
 800e87a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e87c:	7d9b      	ldrb	r3, [r3, #22]
 800e87e:	085b      	lsrs	r3, r3, #1
 800e880:	d010      	beq.n	800e8a4 <ull_configciadiag+0x4c>
 800e882:	086b      	lsrs	r3, r5, #1
 800e884:	2200      	movs	r2, #0
 800e886:	490e      	ldr	r1, [pc, #56]	; (800e8c0 <ull_configciadiag+0x68>)
 800e888:	4620      	mov	r0, r4
 800e88a:	f7ff fb23 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e88e:	b003      	add	sp, #12
 800e890:	bd30      	pop	{r4, r5, pc}
 800e892:	2310      	movs	r3, #16
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	23ff      	movs	r3, #255	; 0xff
 800e898:	2202      	movs	r2, #2
 800e89a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e89e:	f7ff ffab 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e8a2:	e7e8      	b.n	800e876 <ull_configciadiag+0x1e>
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	9300      	str	r3, [sp, #0]
 800e8a8:	23ff      	movs	r3, #255	; 0xff
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	4904      	ldr	r1, [pc, #16]	; (800e8c0 <ull_configciadiag+0x68>)
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f7ff ffa2 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e8b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e8b6:	7d93      	ldrb	r3, [r2, #22]
 800e8b8:	f043 0302 	orr.w	r3, r3, #2
 800e8bc:	7593      	strb	r3, [r2, #22]
 800e8be:	e7e6      	b.n	800e88e <ull_configciadiag+0x36>
 800e8c0:	00010020 	.word	0x00010020

0800e8c4 <ull_configurestsloadiv>:
 800e8c4:	b500      	push	{lr}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	23ff      	movs	r3, #255	; 0xff
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	4902      	ldr	r1, [pc, #8]	; (800e8dc <ull_configurestsloadiv+0x18>)
 800e8d2:	f7ff ff91 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e8d6:	b003      	add	sp, #12
 800e8d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8dc:	00020004 	.word	0x00020004

0800e8e0 <ull_adcoffsetscalibration>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	b08b      	sub	sp, #44	; 0x2c
 800e8e6:	4607      	mov	r7, r0
 800e8e8:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800eb0c <ull_adcoffsetscalibration+0x22c>
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4641      	mov	r1, r8
 800e8f0:	f7fe fc2d 	bl	800d14e <dwt_read32bitoffsetreg>
 800e8f4:	9004      	str	r0, [sp, #16]
 800e8f6:	4c7d      	ldr	r4, [pc, #500]	; (800eaec <ull_adcoffsetscalibration+0x20c>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	4621      	mov	r1, r4
 800e8fc:	4638      	mov	r0, r7
 800e8fe:	f7fe fc26 	bl	800d14e <dwt_read32bitoffsetreg>
 800e902:	9005      	str	r0, [sp, #20]
 800e904:	4d7a      	ldr	r5, [pc, #488]	; (800eaf0 <ull_adcoffsetscalibration+0x210>)
 800e906:	2200      	movs	r2, #0
 800e908:	4629      	mov	r1, r5
 800e90a:	4638      	mov	r0, r7
 800e90c:	f7fe fc74 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800e910:	9006      	str	r0, [sp, #24]
 800e912:	4e78      	ldr	r6, [pc, #480]	; (800eaf4 <ull_adcoffsetscalibration+0x214>)
 800e914:	2200      	movs	r2, #0
 800e916:	4631      	mov	r1, r6
 800e918:	4638      	mov	r0, r7
 800e91a:	f7fe fc18 	bl	800d14e <dwt_read32bitoffsetreg>
 800e91e:	4682      	mov	sl, r0
 800e920:	9007      	str	r0, [sp, #28]
 800e922:	2200      	movs	r2, #0
 800e924:	4974      	ldr	r1, [pc, #464]	; (800eaf8 <ull_adcoffsetscalibration+0x218>)
 800e926:	4638      	mov	r0, r7
 800e928:	f7fe fc11 	bl	800d14e <dwt_read32bitoffsetreg>
 800e92c:	4681      	mov	r9, r0
 800e92e:	4b73      	ldr	r3, [pc, #460]	; (800eafc <ull_adcoffsetscalibration+0x21c>)
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800e936:	2200      	movs	r2, #0
 800e938:	4641      	mov	r1, r8
 800e93a:	4638      	mov	r0, r7
 800e93c:	f7ff fdec 	bl	800e518 <dwt_modify32bitoffsetreg>
 800e940:	464b      	mov	r3, r9
 800e942:	2200      	movs	r2, #0
 800e944:	4631      	mov	r1, r6
 800e946:	4638      	mov	r0, r7
 800e948:	f7ff f8e0 	bl	800db0c <dwt_write32bitoffsetreg>
 800e94c:	4653      	mov	r3, sl
 800e94e:	00db      	lsls	r3, r3, #3
 800e950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	2386      	movs	r3, #134	; 0x86
 800e95c:	2200      	movs	r2, #0
 800e95e:	4621      	mov	r1, r4
 800e960:	4638      	mov	r0, r7
 800e962:	f7ff ff49 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e966:	2300      	movs	r3, #0
 800e968:	2203      	movs	r2, #3
 800e96a:	4621      	mov	r1, r4
 800e96c:	4638      	mov	r0, r7
 800e96e:	f7ff fab1 	bl	800ded4 <dwt_write8bitoffsetreg>
 800e972:	f04f 0900 	mov.w	r9, #0
 800e976:	f8cd 9000 	str.w	r9, [sp]
 800e97a:	23fe      	movs	r3, #254	; 0xfe
 800e97c:	464a      	mov	r2, r9
 800e97e:	4629      	mov	r1, r5
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff ff39 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800e986:	464a      	mov	r2, r9
 800e988:	213c      	movs	r1, #60	; 0x3c
 800e98a:	4638      	mov	r0, r7
 800e98c:	f7fe fbdf 	bl	800d14e <dwt_read32bitoffsetreg>
 800e990:	9008      	str	r0, [sp, #32]
 800e992:	464a      	mov	r2, r9
 800e994:	2140      	movs	r1, #64	; 0x40
 800e996:	4638      	mov	r0, r7
 800e998:	f7fe fbd9 	bl	800d14e <dwt_read32bitoffsetreg>
 800e99c:	9009      	str	r0, [sp, #36]	; 0x24
 800e99e:	464b      	mov	r3, r9
 800e9a0:	464a      	mov	r2, r9
 800e9a2:	213c      	movs	r1, #60	; 0x3c
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	f7ff f8b1 	bl	800db0c <dwt_write32bitoffsetreg>
 800e9aa:	464b      	mov	r3, r9
 800e9ac:	464a      	mov	r2, r9
 800e9ae:	2140      	movs	r1, #64	; 0x40
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f7ff f8ab 	bl	800db0c <dwt_write32bitoffsetreg>
 800e9b6:	f7f5 fe63 	bl	8004680 <dwt_forcetrxoff>
 800e9ba:	f04f 0b02 	mov.w	fp, #2
 800e9be:	464c      	mov	r4, r9
 800e9c0:	464d      	mov	r5, r9
 800e9c2:	464e      	mov	r6, r9
 800e9c4:	46c8      	mov	r8, r9
 800e9c6:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9ca:	46ca      	mov	sl, r9
 800e9cc:	e00e      	b.n	800e9ec <ull_adcoffsetscalibration+0x10c>
 800e9ce:	f7f5 fe57 	bl	8004680 <dwt_forcetrxoff>
 800e9d2:	9b03      	ldr	r3, [sp, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 8082 	beq.w	800eade <ull_adcoffsetscalibration+0x1fe>
 800e9da:	f1bb 0f01 	cmp.w	fp, #1
 800e9de:	f000 8081 	beq.w	800eae4 <ull_adcoffsetscalibration+0x204>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	9303      	str	r3, [sp, #12]
 800e9e6:	f1bb 0b01 	subs.w	fp, fp, #1
 800e9ea:	d043      	beq.n	800ea74 <ull_adcoffsetscalibration+0x194>
 800e9ec:	4650      	mov	r0, sl
 800e9ee:	f7f5 fe55 	bl	800469c <dwt_rxenable>
 800e9f2:	2014      	movs	r0, #20
 800e9f4:	f7f1 ff35 	bl	8000862 <deca_usleep>
 800e9f8:	f04f 0904 	mov.w	r9, #4
 800e9fc:	f8cd a000 	str.w	sl, [sp]
 800ea00:	23fe      	movs	r3, #254	; 0xfe
 800ea02:	4652      	mov	r2, sl
 800ea04:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800ea08:	4638      	mov	r0, r7
 800ea0a:	f7ff fef5 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	23fe      	movs	r3, #254	; 0xfe
 800ea14:	4652      	mov	r2, sl
 800ea16:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	f7ff feec 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ea20:	4652      	mov	r2, sl
 800ea22:	4937      	ldr	r1, [pc, #220]	; (800eb00 <ull_adcoffsetscalibration+0x220>)
 800ea24:	4638      	mov	r0, r7
 800ea26:	f7fe fb92 	bl	800d14e <dwt_read32bitoffsetreg>
 800ea2a:	fa58 f880 	uxtab	r8, r8, r0
 800ea2e:	fa1f f888 	uxth.w	r8, r8
 800ea32:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ea36:	441e      	add	r6, r3
 800ea38:	b2b6      	uxth	r6, r6
 800ea3a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ea3e:	441d      	add	r5, r3
 800ea40:	b2ad      	uxth	r5, r5
 800ea42:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800ea46:	b2a4      	uxth	r4, r4
 800ea48:	f1b9 0901 	subs.w	r9, r9, #1
 800ea4c:	d1d6      	bne.n	800e9fc <ull_adcoffsetscalibration+0x11c>
 800ea4e:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800ea52:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800ea56:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800ea5a:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800ea5e:	4652      	mov	r2, sl
 800ea60:	2144      	movs	r1, #68	; 0x44
 800ea62:	4638      	mov	r0, r7
 800ea64:	f7fe fb73 	bl	800d14e <dwt_read32bitoffsetreg>
 800ea68:	4b26      	ldr	r3, [pc, #152]	; (800eb04 <ull_adcoffsetscalibration+0x224>)
 800ea6a:	4218      	tst	r0, r3
 800ea6c:	d0af      	beq.n	800e9ce <ull_adcoffsetscalibration+0xee>
 800ea6e:	f7f5 fe07 	bl	8004680 <dwt_forcetrxoff>
 800ea72:	e7b2      	b.n	800e9da <ull_adcoffsetscalibration+0xfa>
 800ea74:	f04f 0900 	mov.w	r9, #0
 800ea78:	9b08      	ldr	r3, [sp, #32]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	213c      	movs	r1, #60	; 0x3c
 800ea7e:	4638      	mov	r0, r7
 800ea80:	f7ff f844 	bl	800db0c <dwt_write32bitoffsetreg>
 800ea84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea86:	2200      	movs	r2, #0
 800ea88:	2140      	movs	r1, #64	; 0x40
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	f7ff f83e 	bl	800db0c <dwt_write32bitoffsetreg>
 800ea90:	042b      	lsls	r3, r5, #16
 800ea92:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800ea96:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800ea9a:	4443      	add	r3, r8
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	491a      	ldr	r1, [pc, #104]	; (800eb08 <ull_adcoffsetscalibration+0x228>)
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	f7ff f833 	bl	800db0c <dwt_write32bitoffsetreg>
 800eaa6:	9b04      	ldr	r3, [sp, #16]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	4918      	ldr	r1, [pc, #96]	; (800eb0c <ull_adcoffsetscalibration+0x22c>)
 800eaac:	4638      	mov	r0, r7
 800eaae:	f7ff f82d 	bl	800db0c <dwt_write32bitoffsetreg>
 800eab2:	9b05      	ldr	r3, [sp, #20]
 800eab4:	2200      	movs	r2, #0
 800eab6:	490d      	ldr	r1, [pc, #52]	; (800eaec <ull_adcoffsetscalibration+0x20c>)
 800eab8:	4638      	mov	r0, r7
 800eaba:	f7ff f827 	bl	800db0c <dwt_write32bitoffsetreg>
 800eabe:	9b06      	ldr	r3, [sp, #24]
 800eac0:	2200      	movs	r2, #0
 800eac2:	490b      	ldr	r1, [pc, #44]	; (800eaf0 <ull_adcoffsetscalibration+0x210>)
 800eac4:	4638      	mov	r0, r7
 800eac6:	f7ff fa05 	bl	800ded4 <dwt_write8bitoffsetreg>
 800eaca:	9b07      	ldr	r3, [sp, #28]
 800eacc:	2200      	movs	r2, #0
 800eace:	4909      	ldr	r1, [pc, #36]	; (800eaf4 <ull_adcoffsetscalibration+0x214>)
 800ead0:	4638      	mov	r0, r7
 800ead2:	f7ff f81b 	bl	800db0c <dwt_write32bitoffsetreg>
 800ead6:	4648      	mov	r0, r9
 800ead8:	b00b      	add	sp, #44	; 0x2c
 800eada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eade:	f04f 0900 	mov.w	r9, #0
 800eae2:	e7c9      	b.n	800ea78 <ull_adcoffsetscalibration+0x198>
 800eae4:	f06f 0905 	mvn.w	r9, #5
 800eae8:	e7c6      	b.n	800ea78 <ull_adcoffsetscalibration+0x198>
 800eaea:	bf00      	nop
 800eaec:	00030014 	.word	0x00030014
 800eaf0:	00030018 	.word	0x00030018
 800eaf4:	0003002c 	.word	0x0003002c
 800eaf8:	00030044 	.word	0x00030044
 800eafc:	38010000 	.word	0x38010000
 800eb00:	0003004c 	.word	0x0003004c
 800eb04:	3427ff00 	.word	0x3427ff00
 800eb08:	00030010 	.word	0x00030010
 800eb0c:	00070014 	.word	0x00070014

0800eb10 <ull_restoreconfig>:
 800eb10:	b510      	push	{r4, lr}
 800eb12:	4604      	mov	r4, r0
 800eb14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eb16:	7d9b      	ldrb	r3, [r3, #22]
 800eb18:	085b      	lsrs	r3, r3, #1
 800eb1a:	d01a      	beq.n	800eb52 <ull_restoreconfig+0x42>
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	4912      	ldr	r1, [pc, #72]	; (800eb68 <ull_restoreconfig+0x58>)
 800eb20:	4620      	mov	r0, r4
 800eb22:	f7fe fb2a 	bl	800d17a <dwt_read16bitoffsetreg>
 800eb26:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800eb2a:	3b09      	subs	r3, #9
 800eb2c:	2b0f      	cmp	r3, #15
 800eb2e:	d80c      	bhi.n	800eb4a <ull_restoreconfig+0x3a>
 800eb30:	f000 0001 	and.w	r0, r0, #1
 800eb34:	2800      	cmp	r0, #0
 800eb36:	bf0c      	ite	eq
 800eb38:	2105      	moveq	r1, #5
 800eb3a:	2109      	movne	r1, #9
 800eb3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb3e:	7a1b      	ldrb	r3, [r3, #8]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d002      	beq.n	800eb4a <ull_restoreconfig+0x3a>
 800eb44:	4620      	mov	r0, r4
 800eb46:	f7ff f8ad 	bl	800dca4 <ull_configmrxlut>
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f7ff fec8 	bl	800e8e0 <ull_adcoffsetscalibration>
 800eb50:	bd10      	pop	{r4, pc}
 800eb52:	2301      	movs	r3, #1
 800eb54:	2200      	movs	r2, #0
 800eb56:	4905      	ldr	r1, [pc, #20]	; (800eb6c <ull_restoreconfig+0x5c>)
 800eb58:	f7ff f9bc 	bl	800ded4 <dwt_write8bitoffsetreg>
 800eb5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb5e:	7d93      	ldrb	r3, [r2, #22]
 800eb60:	f043 0302 	orr.w	r3, r3, #2
 800eb64:	7593      	strb	r3, [r2, #22]
 800eb66:	e7d9      	b.n	800eb1c <ull_restoreconfig+0xc>
 800eb68:	00010008 	.word	0x00010008
 800eb6c:	00010020 	.word	0x00010020

0800eb70 <ull_calcbandwidthadj>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	4604      	mov	r4, r0
 800eb76:	460d      	mov	r5, r1
 800eb78:	2101      	movs	r1, #1
 800eb7a:	f7fe ff7b 	bl	800da74 <ull_force_clocks>
 800eb7e:	2100      	movs	r1, #0
 800eb80:	4620      	mov	r0, r4
 800eb82:	f7ff fcfd 	bl	800e580 <ull_enable_rf_tx>
 800eb86:	4620      	mov	r0, r4
 800eb88:	f7ff fd2e 	bl	800e5e8 <ull_enable_rftx_blocks>
 800eb8c:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800eb90:	2200      	movs	r2, #0
 800eb92:	4915      	ldr	r1, [pc, #84]	; (800ebe8 <ull_calcbandwidthadj+0x78>)
 800eb94:	4620      	mov	r0, r4
 800eb96:	f7fe ff4e 	bl	800da36 <dwt_write16bitoffsetreg>
 800eb9a:	2303      	movs	r3, #3
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	23ff      	movs	r3, #255	; 0xff
 800eba0:	2200      	movs	r2, #0
 800eba2:	4912      	ldr	r1, [pc, #72]	; (800ebec <ull_calcbandwidthadj+0x7c>)
 800eba4:	4620      	mov	r0, r4
 800eba6:	f7ff fe27 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ebaa:	4e10      	ldr	r6, [pc, #64]	; (800ebec <ull_calcbandwidthadj+0x7c>)
 800ebac:	2500      	movs	r5, #0
 800ebae:	462a      	mov	r2, r5
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f7fe fb20 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800ebb8:	f010 0f01 	tst.w	r0, #1
 800ebbc:	d1f7      	bne.n	800ebae <ull_calcbandwidthadj+0x3e>
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f7ff f906 	bl	800ddd0 <ull_disable_rftx_blocks>
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f7ff f90c 	bl	800dde4 <ull_disable_rf_tx>
 800ebcc:	2105      	movs	r1, #5
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f7fe ff50 	bl	800da74 <ull_force_clocks>
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	4906      	ldr	r1, [pc, #24]	; (800ebf0 <ull_calcbandwidthadj+0x80>)
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f7fe fb0d 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800ebde:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ebe2:	b002      	add	sp, #8
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
 800ebe6:	bf00      	nop
 800ebe8:	0008001c 	.word	0x0008001c
 800ebec:	00080010 	.word	0x00080010
 800ebf0:	0007001c 	.word	0x0007001c

0800ebf4 <ull_configuretxrf>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	4605      	mov	r5, r0
 800ebf8:	460c      	mov	r4, r1
 800ebfa:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800ebfe:	b149      	cbz	r1, 800ec14 <ull_configuretxrf+0x20>
 800ec00:	f7ff ffb6 	bl	800eb70 <ull_calcbandwidthadj>
 800ec04:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4905      	ldr	r1, [pc, #20]	; (800ec20 <ull_configuretxrf+0x2c>)
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	f7fe ff7d 	bl	800db0c <dwt_write32bitoffsetreg>
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	7823      	ldrb	r3, [r4, #0]
 800ec16:	2200      	movs	r2, #0
 800ec18:	4902      	ldr	r1, [pc, #8]	; (800ec24 <ull_configuretxrf+0x30>)
 800ec1a:	f7ff f95b 	bl	800ded4 <dwt_write8bitoffsetreg>
 800ec1e:	e7f1      	b.n	800ec04 <ull_configuretxrf+0x10>
 800ec20:	00010004 	.word	0x00010004
 800ec24:	0007001c 	.word	0x0007001c

0800ec28 <ull_repeated_frames>:
 800ec28:	b530      	push	{r4, r5, lr}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	460d      	mov	r5, r1
 800ec30:	2310      	movs	r3, #16
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	23ff      	movs	r3, #255	; 0xff
 800ec36:	2200      	movs	r2, #0
 800ec38:	4906      	ldr	r1, [pc, #24]	; (800ec54 <ull_repeated_frames+0x2c>)
 800ec3a:	f7ff fddd 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ec3e:	462b      	mov	r3, r5
 800ec40:	2d02      	cmp	r5, #2
 800ec42:	bf38      	it	cc
 800ec44:	2302      	movcc	r3, #2
 800ec46:	2200      	movs	r2, #0
 800ec48:	2128      	movs	r1, #40	; 0x28
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7fe ff5e 	bl	800db0c <dwt_write32bitoffsetreg>
 800ec50:	b003      	add	sp, #12
 800ec52:	bd30      	pop	{r4, r5, pc}
 800ec54:	000f0028 	.word	0x000f0028

0800ec58 <ull_setdwstate>:
 800ec58:	b530      	push	{r4, r5, lr}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	2901      	cmp	r1, #1
 800ec60:	d01d      	beq.n	800ec9e <ull_setdwstate+0x46>
 800ec62:	2902      	cmp	r1, #2
 800ec64:	d030      	beq.n	800ecc8 <ull_setdwstate+0x70>
 800ec66:	2301      	movs	r3, #1
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	23ff      	movs	r3, #255	; 0xff
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	4926      	ldr	r1, [pc, #152]	; (800ed08 <ull_setdwstate+0xb0>)
 800ec70:	f7ff fdc2 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ec74:	4d25      	ldr	r5, [pc, #148]	; (800ed0c <ull_setdwstate+0xb4>)
 800ec76:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ec80:	2200      	movs	r2, #0
 800ec82:	4629      	mov	r1, r5
 800ec84:	4620      	mov	r0, r4
 800ec86:	f7ff fc47 	bl	800e518 <dwt_modify32bitoffsetreg>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	237f      	movs	r3, #127	; 0x7f
 800ec90:	2202      	movs	r2, #2
 800ec92:	4629      	mov	r1, r5
 800ec94:	4620      	mov	r0, r4
 800ec96:	f7ff fdaf 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ec9a:	b003      	add	sp, #12
 800ec9c:	bd30      	pop	{r4, r5, pc}
 800ec9e:	2105      	movs	r1, #5
 800eca0:	f7fe fee8 	bl	800da74 <ull_force_clocks>
 800eca4:	f44f 7381 	mov.w	r3, #258	; 0x102
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecae:	2200      	movs	r2, #0
 800ecb0:	4917      	ldr	r1, [pc, #92]	; (800ed10 <ull_setdwstate+0xb8>)
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f7ff fc30 	bl	800e518 <dwt_modify32bitoffsetreg>
 800ecb8:	2201      	movs	r2, #1
 800ecba:	9200      	str	r2, [sp, #0]
 800ecbc:	23ff      	movs	r3, #255	; 0xff
 800ecbe:	4913      	ldr	r1, [pc, #76]	; (800ed0c <ull_setdwstate+0xb4>)
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f7ff fd99 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ecc6:	e7e8      	b.n	800ec9a <ull_setdwstate+0x42>
 800ecc8:	2303      	movs	r3, #3
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	23ff      	movs	r3, #255	; 0xff
 800ecce:	2200      	movs	r2, #0
 800ecd0:	490d      	ldr	r1, [pc, #52]	; (800ed08 <ull_setdwstate+0xb0>)
 800ecd2:	f7ff fd91 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ecd6:	4d0d      	ldr	r5, [pc, #52]	; (800ed0c <ull_setdwstate+0xb4>)
 800ecd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ece2:	2200      	movs	r2, #0
 800ece4:	4629      	mov	r1, r5
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7ff fc16 	bl	800e518 <dwt_modify32bitoffsetreg>
 800ecec:	2300      	movs	r3, #0
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	237f      	movs	r3, #127	; 0x7f
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f7ff fd7e 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ecfc:	2105      	movs	r1, #5
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f7fe feb8 	bl	800da74 <ull_force_clocks>
 800ed04:	e7c9      	b.n	800ec9a <ull_setdwstate+0x42>
 800ed06:	bf00      	nop
 800ed08:	00110004 	.word	0x00110004
 800ed0c:	00110008 	.word	0x00110008
 800ed10:	00090008 	.word	0x00090008

0800ed14 <ull_configureframefilter>:
 800ed14:	b530      	push	{r4, r5, lr}
 800ed16:	b083      	sub	sp, #12
 800ed18:	4605      	mov	r5, r0
 800ed1a:	2902      	cmp	r1, #2
 800ed1c:	d00e      	beq.n	800ed3c <ull_configureframefilter+0x28>
 800ed1e:	2400      	movs	r4, #0
 800ed20:	9400      	str	r4, [sp, #0]
 800ed22:	23fe      	movs	r3, #254	; 0xfe
 800ed24:	4622      	mov	r2, r4
 800ed26:	2110      	movs	r1, #16
 800ed28:	f7ff fd66 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ed2c:	4623      	mov	r3, r4
 800ed2e:	4622      	mov	r2, r4
 800ed30:	2114      	movs	r1, #20
 800ed32:	4628      	mov	r0, r5
 800ed34:	f7fe fe7f 	bl	800da36 <dwt_write16bitoffsetreg>
 800ed38:	b003      	add	sp, #12
 800ed3a:	bd30      	pop	{r4, r5, pc}
 800ed3c:	4614      	mov	r4, r2
 800ed3e:	2301      	movs	r3, #1
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	23ff      	movs	r3, #255	; 0xff
 800ed44:	2200      	movs	r2, #0
 800ed46:	2110      	movs	r1, #16
 800ed48:	f7ff fd56 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ed4c:	4623      	mov	r3, r4
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2114      	movs	r1, #20
 800ed52:	4628      	mov	r0, r5
 800ed54:	f7fe fe6f 	bl	800da36 <dwt_write16bitoffsetreg>
 800ed58:	e7ee      	b.n	800ed38 <ull_configureframefilter+0x24>
	...

0800ed5c <ull_run_pgfcal>:
 800ed5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed60:	b082      	sub	sp, #8
 800ed62:	4605      	mov	r5, r0
 800ed64:	4c2a      	ldr	r4, [pc, #168]	; (800ee10 <ull_run_pgfcal+0xb4>)
 800ed66:	2301      	movs	r3, #1
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	23ff      	movs	r3, #255	; 0xff
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	4621      	mov	r1, r4
 800ed70:	f7ff fd42 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ed74:	2310      	movs	r3, #16
 800ed76:	9300      	str	r3, [sp, #0]
 800ed78:	23ff      	movs	r3, #255	; 0xff
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f7ff fd3a 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ed84:	2403      	movs	r4, #3
 800ed86:	f04f 0814 	mov.w	r8, #20
 800ed8a:	4f22      	ldr	r7, [pc, #136]	; (800ee14 <ull_run_pgfcal+0xb8>)
 800ed8c:	2600      	movs	r6, #0
 800ed8e:	4640      	mov	r0, r8
 800ed90:	f7f1 fd67 	bl	8000862 <deca_usleep>
 800ed94:	4632      	mov	r2, r6
 800ed96:	4639      	mov	r1, r7
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f7fe fa2d 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800ed9e:	2801      	cmp	r0, #1
 800eda0:	d034      	beq.n	800ee0c <ull_run_pgfcal+0xb0>
 800eda2:	1e63      	subs	r3, r4, #1
 800eda4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800eda8:	d1f1      	bne.n	800ed8e <ull_run_pgfcal+0x32>
 800edaa:	f06f 0402 	mvn.w	r4, #2
 800edae:	4e18      	ldr	r6, [pc, #96]	; (800ee10 <ull_run_pgfcal+0xb4>)
 800edb0:	2300      	movs	r3, #0
 800edb2:	461a      	mov	r2, r3
 800edb4:	4631      	mov	r1, r6
 800edb6:	4628      	mov	r0, r5
 800edb8:	f7ff f88c 	bl	800ded4 <dwt_write8bitoffsetreg>
 800edbc:	2301      	movs	r3, #1
 800edbe:	2200      	movs	r2, #0
 800edc0:	4914      	ldr	r1, [pc, #80]	; (800ee14 <ull_run_pgfcal+0xb8>)
 800edc2:	4628      	mov	r0, r5
 800edc4:	f7ff f886 	bl	800ded4 <dwt_write8bitoffsetreg>
 800edc8:	2301      	movs	r3, #1
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	23ff      	movs	r3, #255	; 0xff
 800edce:	2202      	movs	r2, #2
 800edd0:	4631      	mov	r1, r6
 800edd2:	4628      	mov	r0, r5
 800edd4:	f7ff fd10 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800edd8:	2200      	movs	r2, #0
 800edda:	490f      	ldr	r1, [pc, #60]	; (800ee18 <ull_run_pgfcal+0xbc>)
 800eddc:	4628      	mov	r0, r5
 800edde:	f7fe f9b6 	bl	800d14e <dwt_read32bitoffsetreg>
 800ede2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ede6:	4298      	cmp	r0, r3
 800ede8:	bf08      	it	eq
 800edea:	f06f 0403 	mvneq.w	r4, #3
 800edee:	2200      	movs	r2, #0
 800edf0:	490a      	ldr	r1, [pc, #40]	; (800ee1c <ull_run_pgfcal+0xc0>)
 800edf2:	4628      	mov	r0, r5
 800edf4:	f7fe f9ab 	bl	800d14e <dwt_read32bitoffsetreg>
 800edf8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800edfc:	4298      	cmp	r0, r3
 800edfe:	bf14      	ite	ne
 800ee00:	4620      	movne	r0, r4
 800ee02:	f06f 0004 	mvneq.w	r0, #4
 800ee06:	b002      	add	sp, #8
 800ee08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee0c:	2400      	movs	r4, #0
 800ee0e:	e7ce      	b.n	800edae <ull_run_pgfcal+0x52>
 800ee10:	0004000c 	.word	0x0004000c
 800ee14:	00040020 	.word	0x00040020
 800ee18:	00040014 	.word	0x00040014
 800ee1c:	0004001c 	.word	0x0004001c

0800ee20 <ull_setinterrupt>:
 800ee20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee24:	b083      	sub	sp, #12
 800ee26:	4605      	mov	r5, r0
 800ee28:	4688      	mov	r8, r1
 800ee2a:	4617      	mov	r7, r2
 800ee2c:	461c      	mov	r4, r3
 800ee2e:	f7f1 fcef 	bl	8000810 <decamutexon>
 800ee32:	4606      	mov	r6, r0
 800ee34:	2c02      	cmp	r4, #2
 800ee36:	d019      	beq.n	800ee6c <ull_setinterrupt+0x4c>
 800ee38:	2c04      	cmp	r4, #4
 800ee3a:	d017      	beq.n	800ee6c <ull_setinterrupt+0x4c>
 800ee3c:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d03f      	beq.n	800eec4 <ull_setinterrupt+0xa4>
 800ee44:	f04f 0900 	mov.w	r9, #0
 800ee48:	f8cd 9000 	str.w	r9, [sp]
 800ee4c:	ea6f 0308 	mvn.w	r3, r8
 800ee50:	464a      	mov	r2, r9
 800ee52:	213c      	movs	r1, #60	; 0x3c
 800ee54:	4628      	mov	r0, r5
 800ee56:	f7ff fb5f 	bl	800e518 <dwt_modify32bitoffsetreg>
 800ee5a:	f8cd 9000 	str.w	r9, [sp]
 800ee5e:	43fb      	mvns	r3, r7
 800ee60:	464a      	mov	r2, r9
 800ee62:	2140      	movs	r1, #64	; 0x40
 800ee64:	4628      	mov	r0, r5
 800ee66:	f7ff fb57 	bl	800e518 <dwt_modify32bitoffsetreg>
 800ee6a:	e00b      	b.n	800ee84 <ull_setinterrupt+0x64>
 800ee6c:	4643      	mov	r3, r8
 800ee6e:	2200      	movs	r2, #0
 800ee70:	213c      	movs	r1, #60	; 0x3c
 800ee72:	4628      	mov	r0, r5
 800ee74:	f7fe fe4a 	bl	800db0c <dwt_write32bitoffsetreg>
 800ee78:	463b      	mov	r3, r7
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	2140      	movs	r1, #64	; 0x40
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f7fe fe44 	bl	800db0c <dwt_write32bitoffsetreg>
 800ee84:	3c03      	subs	r4, #3
 800ee86:	b2e4      	uxtb	r4, r4
 800ee88:	2c01      	cmp	r4, #1
 800ee8a:	d92d      	bls.n	800eee8 <ull_setinterrupt+0xc8>
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	213c      	movs	r1, #60	; 0x3c
 800ee90:	4628      	mov	r0, r5
 800ee92:	f7fe f95c 	bl	800d14e <dwt_read32bitoffsetreg>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2144      	movs	r1, #68	; 0x44
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f7fe fe35 	bl	800db0c <dwt_write32bitoffsetreg>
 800eea2:	2200      	movs	r2, #0
 800eea4:	2140      	movs	r1, #64	; 0x40
 800eea6:	4628      	mov	r0, r5
 800eea8:	f7fe f951 	bl	800d14e <dwt_read32bitoffsetreg>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2200      	movs	r2, #0
 800eeb0:	2148      	movs	r1, #72	; 0x48
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f7fe fe2a 	bl	800db0c <dwt_write32bitoffsetreg>
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f7f1 fcba 	bl	8000832 <decamutexoff>
 800eebe:	b003      	add	sp, #12
 800eec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec4:	f8cd 8000 	str.w	r8, [sp]
 800eec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eecc:	2200      	movs	r2, #0
 800eece:	213c      	movs	r1, #60	; 0x3c
 800eed0:	4628      	mov	r0, r5
 800eed2:	f7ff fb21 	bl	800e518 <dwt_modify32bitoffsetreg>
 800eed6:	9700      	str	r7, [sp, #0]
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eedc:	2200      	movs	r2, #0
 800eede:	2140      	movs	r1, #64	; 0x40
 800eee0:	4628      	mov	r0, r5
 800eee2:	f7ff fb19 	bl	800e518 <dwt_modify32bitoffsetreg>
 800eee6:	e7cd      	b.n	800ee84 <ull_setinterrupt+0x64>
 800eee8:	2110      	movs	r1, #16
 800eeea:	9100      	str	r1, [sp, #0]
 800eeec:	23ff      	movs	r3, #255	; 0xff
 800eeee:	2202      	movs	r2, #2
 800eef0:	4628      	mov	r0, r5
 800eef2:	f7ff fc81 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800eef6:	e7c9      	b.n	800ee8c <ull_setinterrupt+0x6c>

0800eef8 <prs_ack_enable>:
 800eef8:	b500      	push	{lr}
 800eefa:	b083      	sub	sp, #12
 800eefc:	2900      	cmp	r1, #0
 800eefe:	bf0b      	itete	eq
 800ef00:	23ff      	moveq	r3, #255	; 0xff
 800ef02:	23f7      	movne	r3, #247	; 0xf7
 800ef04:	2200      	moveq	r2, #0
 800ef06:	2208      	movne	r2, #8
 800ef08:	9200      	str	r2, [sp, #0]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	2110      	movs	r1, #16
 800ef0e:	f7ff fc73 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800ef12:	b003      	add	sp, #12
 800ef14:	f85d fb04 	ldr.w	pc, [sp], #4

0800ef18 <dwt_modify16bitoffsetreg>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800ef20:	f88d 300c 	strb.w	r3, [sp, #12]
 800ef24:	0a1b      	lsrs	r3, r3, #8
 800ef26:	f88d 300d 	strb.w	r3, [sp, #13]
 800ef2a:	f88d 400e 	strb.w	r4, [sp, #14]
 800ef2e:	0a24      	lsrs	r4, r4, #8
 800ef30:	f88d 400f 	strb.w	r4, [sp, #15]
 800ef34:	f248 0302 	movw	r3, #32770	; 0x8002
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	ab03      	add	r3, sp, #12
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	2304      	movs	r3, #4
 800ef40:	b292      	uxth	r2, r2
 800ef42:	f7fe f87c 	bl	800d03e <dwt_xfer3xxx>
 800ef46:	b004      	add	sp, #16
 800ef48:	bd10      	pop	{r4, pc}
	...

0800ef4c <ull_configurestsmode>:
 800ef4c:	b530      	push	{r4, r5, lr}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	4605      	mov	r5, r0
 800ef52:	460c      	mov	r4, r1
 800ef54:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ef56:	7559      	strb	r1, [r3, #21]
 800ef58:	030b      	lsls	r3, r1, #12
 800ef5a:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800ef64:	2200      	movs	r2, #0
 800ef66:	2110      	movs	r1, #16
 800ef68:	f7ff ffd6 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800ef6c:	f004 0403 	and.w	r4, r4, #3
 800ef70:	2c03      	cmp	r4, #3
 800ef72:	bf0c      	ite	eq
 800ef74:	4b04      	ldreq	r3, [pc, #16]	; (800ef88 <ull_configurestsmode+0x3c>)
 800ef76:	4b05      	ldrne	r3, [pc, #20]	; (800ef8c <ull_configurestsmode+0x40>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	4905      	ldr	r1, [pc, #20]	; (800ef90 <ull_configurestsmode+0x44>)
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f7fe fdc5 	bl	800db0c <dwt_write32bitoffsetreg>
 800ef82:	b003      	add	sp, #12
 800ef84:	bd30      	pop	{r4, r5, pc}
 800ef86:	bf00      	nop
 800ef88:	af5f35cc 	.word	0xaf5f35cc
 800ef8c:	af5f584c 	.word	0xaf5f584c
 800ef90:	0006000c 	.word	0x0006000c

0800ef94 <ull_setleds>:
 800ef94:	b530      	push	{r4, r5, lr}
 800ef96:	b083      	sub	sp, #12
 800ef98:	4604      	mov	r4, r0
 800ef9a:	f011 0f01 	tst.w	r1, #1
 800ef9e:	d01f      	beq.n	800efe0 <ull_setleds+0x4c>
 800efa0:	460d      	mov	r5, r1
 800efa2:	f44f 7310 	mov.w	r3, #576	; 0x240
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800efac:	2200      	movs	r2, #0
 800efae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800efb2:	f7ff fab1 	bl	800e518 <dwt_modify32bitoffsetreg>
 800efb6:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efc0:	2200      	movs	r2, #0
 800efc2:	4918      	ldr	r1, [pc, #96]	; (800f024 <ull_setleds+0x90>)
 800efc4:	4620      	mov	r0, r4
 800efc6:	f7ff faa7 	bl	800e518 <dwt_modify32bitoffsetreg>
 800efca:	f015 0f02 	tst.w	r5, #2
 800efce:	d11a      	bne.n	800f006 <ull_setleds+0x72>
 800efd0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800efd4:	2200      	movs	r2, #0
 800efd6:	4914      	ldr	r1, [pc, #80]	; (800f028 <ull_setleds+0x94>)
 800efd8:	4620      	mov	r0, r4
 800efda:	f7fe fd97 	bl	800db0c <dwt_write32bitoffsetreg>
 800efde:	e010      	b.n	800f002 <ull_setleds+0x6e>
 800efe0:	2500      	movs	r5, #0
 800efe2:	9500      	str	r5, [sp, #0]
 800efe4:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800efe8:	462a      	mov	r2, r5
 800efea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800efee:	f7ff fa93 	bl	800e518 <dwt_modify32bitoffsetreg>
 800eff2:	9500      	str	r5, [sp, #0]
 800eff4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800eff8:	462a      	mov	r2, r5
 800effa:	490b      	ldr	r1, [pc, #44]	; (800f028 <ull_setleds+0x94>)
 800effc:	4620      	mov	r0, r4
 800effe:	f7ff ff8b 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f002:	b003      	add	sp, #12
 800f004:	bd30      	pop	{r4, r5, pc}
 800f006:	4d08      	ldr	r5, [pc, #32]	; (800f028 <ull_setleds+0x94>)
 800f008:	4b08      	ldr	r3, [pc, #32]	; (800f02c <ull_setleds+0x98>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	4629      	mov	r1, r5
 800f00e:	4620      	mov	r0, r4
 800f010:	f7fe fd7c 	bl	800db0c <dwt_write32bitoffsetreg>
 800f014:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f018:	2200      	movs	r2, #0
 800f01a:	4629      	mov	r1, r5
 800f01c:	4620      	mov	r0, r4
 800f01e:	f7fe fd75 	bl	800db0c <dwt_write32bitoffsetreg>
 800f022:	e7ee      	b.n	800f002 <ull_setleds+0x6e>
 800f024:	00110004 	.word	0x00110004
 800f028:	00110018 	.word	0x00110018
 800f02c:	000f0110 	.word	0x000f0110

0800f030 <ull_pgf_cal>:
 800f030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f032:	b083      	sub	sp, #12
 800f034:	4604      	mov	r4, r0
 800f036:	2901      	cmp	r1, #1
 800f038:	d009      	beq.n	800f04e <ull_pgf_cal+0x1e>
 800f03a:	2014      	movs	r0, #20
 800f03c:	f7f1 fc11 	bl	8000862 <deca_usleep>
 800f040:	4620      	mov	r0, r4
 800f042:	f7ff fe8b 	bl	800ed5c <ull_run_pgfcal>
 800f046:	4605      	mov	r5, r0
 800f048:	4628      	mov	r0, r5
 800f04a:	b003      	add	sp, #12
 800f04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f04e:	4e0f      	ldr	r6, [pc, #60]	; (800f08c <ull_pgf_cal+0x5c>)
 800f050:	2200      	movs	r2, #0
 800f052:	4631      	mov	r1, r6
 800f054:	f7fe f891 	bl	800d17a <dwt_read16bitoffsetreg>
 800f058:	4607      	mov	r7, r0
 800f05a:	f240 1307 	movw	r3, #263	; 0x107
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f064:	2200      	movs	r2, #0
 800f066:	4631      	mov	r1, r6
 800f068:	4620      	mov	r0, r4
 800f06a:	f7ff ff55 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f06e:	2014      	movs	r0, #20
 800f070:	f7f1 fbf7 	bl	8000862 <deca_usleep>
 800f074:	4620      	mov	r0, r4
 800f076:	f7ff fe71 	bl	800ed5c <ull_run_pgfcal>
 800f07a:	4605      	mov	r5, r0
 800f07c:	2200      	movs	r2, #0
 800f07e:	9200      	str	r2, [sp, #0]
 800f080:	463b      	mov	r3, r7
 800f082:	4631      	mov	r1, r6
 800f084:	4620      	mov	r0, r4
 800f086:	f7ff ff47 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f08a:	e7dd      	b.n	800f048 <ull_pgf_cal+0x18>
 800f08c:	00070048 	.word	0x00070048

0800f090 <ull_setgpiovalue>:
 800f090:	b500      	push	{lr}
 800f092:	b083      	sub	sp, #12
 800f094:	2a01      	cmp	r2, #1
 800f096:	d009      	beq.n	800f0ac <ull_setgpiovalue+0x1c>
 800f098:	43cb      	mvns	r3, r1
 800f09a:	2200      	movs	r2, #0
 800f09c:	9200      	str	r2, [sp, #0]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4906      	ldr	r1, [pc, #24]	; (800f0bc <ull_setgpiovalue+0x2c>)
 800f0a2:	f7ff ff39 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f0a6:	b003      	add	sp, #12
 800f0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0ac:	9100      	str	r1, [sp, #0]
 800f0ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	4901      	ldr	r1, [pc, #4]	; (800f0bc <ull_setgpiovalue+0x2c>)
 800f0b6:	f7ff ff2f 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f0ba:	e7f4      	b.n	800f0a6 <ull_setgpiovalue+0x16>
 800f0bc:	0005000c 	.word	0x0005000c

0800f0c0 <ull_readaccdata>:
 800f0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	460f      	mov	r7, r1
 800f0c8:	4616      	mov	r6, r2
 800f0ca:	461d      	mov	r5, r3
 800f0cc:	f248 0340 	movw	r3, #32832	; 0x8040
 800f0d0:	9300      	str	r3, [sp, #0]
 800f0d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	4918      	ldr	r1, [pc, #96]	; (800f13c <ull_readaccdata+0x7c>)
 800f0da:	f7ff ff1d 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f0de:	19aa      	adds	r2, r5, r6
 800f0e0:	f243 0301 	movw	r3, #12289	; 0x3001
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	dc15      	bgt.n	800f114 <ull_readaccdata+0x54>
 800f0e8:	2d7f      	cmp	r5, #127	; 0x7f
 800f0ea:	d91d      	bls.n	800f128 <ull_readaccdata+0x68>
 800f0ec:	2315      	movs	r3, #21
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	4913      	ldr	r1, [pc, #76]	; (800f140 <ull_readaccdata+0x80>)
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f7fe fd0a 	bl	800db0c <dwt_write32bitoffsetreg>
 800f0f8:	462b      	mov	r3, r5
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	4911      	ldr	r1, [pc, #68]	; (800f144 <ull_readaccdata+0x84>)
 800f0fe:	4620      	mov	r0, r4
 800f100:	f7fe fd04 	bl	800db0c <dwt_write32bitoffsetreg>
 800f104:	9700      	str	r7, [sp, #0]
 800f106:	4633      	mov	r3, r6
 800f108:	2200      	movs	r2, #0
 800f10a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f10e:	4620      	mov	r0, r4
 800f110:	f7fe f813 	bl	800d13a <dwt_readfromdevice>
 800f114:	2200      	movs	r2, #0
 800f116:	9200      	str	r2, [sp, #0]
 800f118:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800f11c:	4907      	ldr	r1, [pc, #28]	; (800f13c <ull_readaccdata+0x7c>)
 800f11e:	4620      	mov	r0, r4
 800f120:	f7ff fefa 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f124:	b003      	add	sp, #12
 800f126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f128:	9700      	str	r7, [sp, #0]
 800f12a:	4633      	mov	r3, r6
 800f12c:	462a      	mov	r2, r5
 800f12e:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800f132:	4620      	mov	r0, r4
 800f134:	f7fe f801 	bl	800d13a <dwt_readfromdevice>
 800f138:	e7ec      	b.n	800f114 <ull_readaccdata+0x54>
 800f13a:	bf00      	nop
 800f13c:	00110004 	.word	0x00110004
 800f140:	001f0004 	.word	0x001f0004
 800f144:	001f0008 	.word	0x001f0008

0800f148 <ull_configure>:
 800f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14c:	b083      	sub	sp, #12
 800f14e:	4604      	mov	r4, r0
 800f150:	460d      	mov	r5, r1
 800f152:	f891 9000 	ldrb.w	r9, [r1]
 800f156:	790b      	ldrb	r3, [r1, #4]
 800f158:	2b18      	cmp	r3, #24
 800f15a:	d814      	bhi.n	800f186 <ull_configure+0x3e>
 800f15c:	78cf      	ldrb	r7, [r1, #3]
 800f15e:	2f18      	cmp	r7, #24
 800f160:	bf94      	ite	ls
 800f162:	2700      	movls	r7, #0
 800f164:	2701      	movhi	r7, #1
 800f166:	b2ff      	uxtb	r7, r7
 800f168:	79eb      	ldrb	r3, [r5, #7]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	bf0c      	ite	eq
 800f16e:	2110      	moveq	r1, #16
 800f170:	2100      	movne	r1, #0
 800f172:	786b      	ldrb	r3, [r5, #1]
 800f174:	3b01      	subs	r3, #1
 800f176:	2b06      	cmp	r3, #6
 800f178:	d810      	bhi.n	800f19c <ull_configure+0x54>
 800f17a:	e8df f003 	tbb	[pc, r3]
 800f17e:	0f06      	.short	0x0f06
 800f180:	0f0c120f 	.word	0x0f0c120f
 800f184:	09          	.byte	0x09
 800f185:	00          	.byte	0x00
 800f186:	2701      	movs	r7, #1
 800f188:	e7ed      	b.n	800f166 <ull_configure+0x1e>
 800f18a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800f18e:	e00a      	b.n	800f1a6 <ull_configure+0x5e>
 800f190:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800f194:	e007      	b.n	800f1a6 <ull_configure+0x5e>
 800f196:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800f19a:	e004      	b.n	800f1a6 <ull_configure+0x5e>
 800f19c:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800f1a0:	e001      	b.n	800f1a6 <ull_configure+0x5e>
 800f1a2:	f04f 0a20 	mov.w	sl, #32
 800f1a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1a8:	8a13      	ldrh	r3, [r2, #16]
 800f1aa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f1ae:	8213      	strh	r3, [r2, #16]
 800f1b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f1b2:	79ea      	ldrb	r2, [r5, #7]
 800f1b4:	72da      	strb	r2, [r3, #11]
 800f1b6:	7b2e      	ldrb	r6, [r5, #12]
 800f1b8:	1cb3      	adds	r3, r6, #2
 800f1ba:	2601      	movs	r6, #1
 800f1bc:	409e      	lsls	r6, r3
 800f1be:	fa1f f886 	uxth.w	r8, r6
 800f1c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1c4:	4bca      	ldr	r3, [pc, #808]	; (800f4f0 <ull_configure+0x3a8>)
 800f1c6:	fb03 f308 	mul.w	r3, r3, r8
 800f1ca:	0bdb      	lsrs	r3, r3, #15
 800f1cc:	8253      	strh	r3, [r2, #18]
 800f1ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f1d0:	7aea      	ldrb	r2, [r5, #11]
 800f1d2:	755a      	strb	r2, [r3, #21]
 800f1d4:	7a2b      	ldrb	r3, [r5, #8]
 800f1d6:	015b      	lsls	r3, r3, #5
 800f1d8:	f003 0320 	and.w	r3, r3, #32
 800f1dc:	7b6a      	ldrb	r2, [r5, #13]
 800f1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1e2:	7aea      	ldrb	r2, [r5, #11]
 800f1e4:	0312      	lsls	r2, r2, #12
 800f1e6:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	430b      	orrs	r3, r1
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	4bc0      	ldr	r3, [pc, #768]	; (800f4f4 <ull_configure+0x3ac>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2110      	movs	r1, #16
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f7ff f98e 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f1fc:	2f00      	cmp	r7, #0
 800f1fe:	f040 80fe 	bne.w	800f3fe <ull_configure+0x2b6>
 800f202:	7aeb      	ldrb	r3, [r5, #11]
 800f204:	b1bb      	cbz	r3, 800f236 <ull_configure+0xee>
 800f206:	7b6b      	ldrb	r3, [r5, #13]
 800f208:	2b01      	cmp	r3, #1
 800f20a:	7b28      	ldrb	r0, [r5, #12]
 800f20c:	bf94      	ite	ls
 800f20e:	2203      	movls	r2, #3
 800f210:	2204      	movhi	r2, #4
 800f212:	2110      	movs	r1, #16
 800f214:	4bb8      	ldr	r3, [pc, #736]	; (800f4f8 <ull_configure+0x3b0>)
 800f216:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f21a:	f7fd fef3 	bl	800d004 <get_sts_mnth>
 800f21e:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800f222:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f226:	9000      	str	r0, [sp, #0]
 800f228:	f64f 7380 	movw	r3, #65408	; 0xff80
 800f22c:	2202      	movs	r2, #2
 800f22e:	49b3      	ldr	r1, [pc, #716]	; (800f4fc <ull_configure+0x3b4>)
 800f230:	4620      	mov	r0, r4
 800f232:	f7ff fe71 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f236:	2394      	movs	r3, #148	; 0x94
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	4bb1      	ldr	r3, [pc, #708]	; (800f500 <ull_configure+0x3b8>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	49b1      	ldr	r1, [pc, #708]	; (800f504 <ull_configure+0x3bc>)
 800f240:	4620      	mov	r0, r4
 800f242:	f7ff f969 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f246:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f24a:	f340 8103 	ble.w	800f454 <ull_configure+0x30c>
 800f24e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f250:	8a13      	ldrh	r3, [r2, #16]
 800f252:	f043 0320 	orr.w	r3, r3, #32
 800f256:	8213      	strh	r3, [r2, #16]
 800f258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f262:	2200      	movs	r2, #0
 800f264:	49a8      	ldr	r1, [pc, #672]	; (800f508 <ull_configure+0x3c0>)
 800f266:	4620      	mov	r0, r4
 800f268:	f7ff fe56 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f26c:	7b6b      	ldrb	r3, [r5, #13]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	f000 80fb 	beq.w	800f46a <ull_configure+0x322>
 800f274:	78ab      	ldrb	r3, [r5, #2]
 800f276:	f043 0310 	orr.w	r3, r3, #16
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	23fc      	movs	r3, #252	; 0xfc
 800f27e:	2200      	movs	r2, #0
 800f280:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f284:	4620      	mov	r0, r4
 800f286:	f7ff fab7 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800f28a:	1e73      	subs	r3, r6, #1
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2200      	movs	r2, #0
 800f290:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f294:	4620      	mov	r0, r4
 800f296:	f7fe fe1d 	bl	800ded4 <dwt_write8bitoffsetreg>
 800f29a:	786b      	ldrb	r3, [r5, #1]
 800f29c:	2b07      	cmp	r3, #7
 800f29e:	bf0c      	ite	eq
 800f2a0:	2108      	moveq	r1, #8
 800f2a2:	2100      	movne	r1, #0
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f7fe ff1b 	bl	800e0e0 <ull_setplenfine>
 800f2aa:	7aeb      	ldrb	r3, [r5, #11]
 800f2ac:	f003 0303 	and.w	r3, r3, #3
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	bf0c      	ite	eq
 800f2b4:	4b95      	ldreq	r3, [pc, #596]	; (800f50c <ull_configure+0x3c4>)
 800f2b6:	4b96      	ldrne	r3, [pc, #600]	; (800f510 <ull_configure+0x3c8>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	4996      	ldr	r1, [pc, #600]	; (800f514 <ull_configure+0x3cc>)
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7fe fc25 	bl	800db0c <dwt_write32bitoffsetreg>
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	4994      	ldr	r1, [pc, #592]	; (800f518 <ull_configure+0x3d0>)
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f7fd ff41 	bl	800d14e <dwt_read32bitoffsetreg>
 800f2cc:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800f2d0:	f020 001f 	bic.w	r0, r0, #31
 800f2d4:	f1b9 0f09 	cmp.w	r9, #9
 800f2d8:	bf08      	it	eq
 800f2da:	f040 0001 	orreq.w	r0, r0, #1
 800f2de:	792a      	ldrb	r2, [r5, #4]
 800f2e0:	0212      	lsls	r2, r2, #8
 800f2e2:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800f2e6:	78eb      	ldrb	r3, [r5, #3]
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	431a      	orrs	r2, r3
 800f2ee:	796b      	ldrb	r3, [r5, #5]
 800f2f0:	005b      	lsls	r3, r3, #1
 800f2f2:	f003 0306 	and.w	r3, r3, #6
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	4303      	orrs	r3, r0
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	4986      	ldr	r1, [pc, #536]	; (800f518 <ull_configure+0x3d0>)
 800f2fe:	4620      	mov	r0, r4
 800f300:	f7fe fc04 	bl	800db0c <dwt_write32bitoffsetreg>
 800f304:	79aa      	ldrb	r2, [r5, #6]
 800f306:	786b      	ldrb	r3, [r5, #1]
 800f308:	031b      	lsls	r3, r3, #12
 800f30a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800f314:	2200      	movs	r2, #0
 800f316:	2120      	movs	r1, #32
 800f318:	4620      	mov	r0, r4
 800f31a:	f7ff f8fd 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f31e:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f322:	b923      	cbnz	r3, 800f32e <ull_configure+0x1e6>
 800f324:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800f328:	726b      	strb	r3, [r5, #9]
 800f32a:	2300      	movs	r3, #0
 800f32c:	72ab      	strb	r3, [r5, #10]
 800f32e:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f332:	2202      	movs	r2, #2
 800f334:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f338:	4620      	mov	r0, r4
 800f33a:	f7fe fb7c 	bl	800da36 <dwt_write16bitoffsetreg>
 800f33e:	2202      	movs	r2, #2
 800f340:	4976      	ldr	r1, [pc, #472]	; (800f51c <ull_configure+0x3d4>)
 800f342:	4620      	mov	r0, r4
 800f344:	f7fd ff58 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800f348:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f34a:	7bdb      	ldrb	r3, [r3, #15]
 800f34c:	454b      	cmp	r3, r9
 800f34e:	f000 8096 	beq.w	800f47e <ull_configure+0x336>
 800f352:	2803      	cmp	r0, #3
 800f354:	f000 8097 	beq.w	800f486 <ull_configure+0x33e>
 800f358:	f1b9 0f09 	cmp.w	r9, #9
 800f35c:	f000 8098 	beq.w	800f490 <ull_configure+0x348>
 800f360:	4b6f      	ldr	r3, [pc, #444]	; (800f520 <ull_configure+0x3d8>)
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f368:	2200      	movs	r2, #0
 800f36a:	496e      	ldr	r1, [pc, #440]	; (800f524 <ull_configure+0x3dc>)
 800f36c:	4620      	mov	r0, r4
 800f36e:	f7ff f8d3 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f372:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800f376:	2200      	movs	r2, #0
 800f378:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f37c:	4620      	mov	r0, r4
 800f37e:	f7fe fb5a 	bl	800da36 <dwt_write16bitoffsetreg>
 800f382:	2314      	movs	r3, #20
 800f384:	2201      	movs	r2, #1
 800f386:	4968      	ldr	r1, [pc, #416]	; (800f528 <ull_configure+0x3e0>)
 800f388:	4620      	mov	r0, r4
 800f38a:	f7fe fda3 	bl	800ded4 <dwt_write8bitoffsetreg>
 800f38e:	230e      	movs	r3, #14
 800f390:	2202      	movs	r2, #2
 800f392:	4966      	ldr	r1, [pc, #408]	; (800f52c <ull_configure+0x3e4>)
 800f394:	4620      	mov	r0, r4
 800f396:	f7fe fd9d 	bl	800ded4 <dwt_write8bitoffsetreg>
 800f39a:	2381      	movs	r3, #129	; 0x81
 800f39c:	2200      	movs	r2, #0
 800f39e:	4964      	ldr	r1, [pc, #400]	; (800f530 <ull_configure+0x3e8>)
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f7fe fd97 	bl	800ded4 <dwt_write8bitoffsetreg>
 800f3a6:	2600      	movs	r6, #0
 800f3a8:	9600      	str	r6, [sp, #0]
 800f3aa:	23fc      	movs	r3, #252	; 0xfc
 800f3ac:	2203      	movs	r2, #3
 800f3ae:	4961      	ldr	r1, [pc, #388]	; (800f534 <ull_configure+0x3ec>)
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f7ff fa21 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800f3b6:	2302      	movs	r3, #2
 800f3b8:	4632      	mov	r2, r6
 800f3ba:	2144      	movs	r1, #68	; 0x44
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f7fe fd89 	bl	800ded4 <dwt_write8bitoffsetreg>
 800f3c2:	2101      	movs	r1, #1
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f7ff fc47 	bl	800ec58 <ull_setdwstate>
 800f3ca:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800f3ce:	f04f 0814 	mov.w	r8, #20
 800f3d2:	4637      	mov	r7, r6
 800f3d4:	2644      	movs	r6, #68	; 0x44
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	f7f1 fa43 	bl	8000862 <deca_usleep>
 800f3dc:	463a      	mov	r2, r7
 800f3de:	4631      	mov	r1, r6
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f7fd ff09 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800f3e6:	f010 0f02 	tst.w	r0, #2
 800f3ea:	f040 80af 	bne.w	800f54c <ull_configure+0x404>
 800f3ee:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800f3f2:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800f3f6:	d1ee      	bne.n	800f3d6 <ull_configure+0x28e>
 800f3f8:	f06f 0001 	mvn.w	r0, #1
 800f3fc:	e0e6      	b.n	800f5cc <ull_configure+0x484>
 800f3fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f400:	8a13      	ldrh	r3, [r2, #16]
 800f402:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f406:	8213      	strh	r3, [r2, #16]
 800f408:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800f412:	2200      	movs	r2, #0
 800f414:	493c      	ldr	r1, [pc, #240]	; (800f508 <ull_configure+0x3c0>)
 800f416:	4620      	mov	r0, r4
 800f418:	f7ff f87e 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f41c:	f240 3306 	movw	r3, #774	; 0x306
 800f420:	2200      	movs	r2, #0
 800f422:	4945      	ldr	r1, [pc, #276]	; (800f538 <ull_configure+0x3f0>)
 800f424:	4620      	mov	r0, r4
 800f426:	f7fe fb71 	bl	800db0c <dwt_write32bitoffsetreg>
 800f42a:	2300      	movs	r3, #0
 800f42c:	461a      	mov	r2, r3
 800f42e:	4943      	ldr	r1, [pc, #268]	; (800f53c <ull_configure+0x3f4>)
 800f430:	4620      	mov	r0, r4
 800f432:	f7fe fb6b 	bl	800db0c <dwt_write32bitoffsetreg>
 800f436:	4b42      	ldr	r3, [pc, #264]	; (800f540 <ull_configure+0x3f8>)
 800f438:	2200      	movs	r2, #0
 800f43a:	4930      	ldr	r1, [pc, #192]	; (800f4fc <ull_configure+0x3b4>)
 800f43c:	4620      	mov	r0, r4
 800f43e:	f7fe fb65 	bl	800db0c <dwt_write32bitoffsetreg>
 800f442:	239d      	movs	r3, #157	; 0x9d
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	4b2e      	ldr	r3, [pc, #184]	; (800f500 <ull_configure+0x3b8>)
 800f448:	2200      	movs	r2, #0
 800f44a:	492e      	ldr	r1, [pc, #184]	; (800f504 <ull_configure+0x3bc>)
 800f44c:	4620      	mov	r0, r4
 800f44e:	f7ff f863 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f452:	e70b      	b.n	800f26c <ull_configure+0x124>
 800f454:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f45e:	2200      	movs	r2, #0
 800f460:	4929      	ldr	r1, [pc, #164]	; (800f508 <ull_configure+0x3c0>)
 800f462:	4620      	mov	r0, r4
 800f464:	f7ff fd58 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f468:	e700      	b.n	800f26c <ull_configure+0x124>
 800f46a:	78ab      	ldrb	r3, [r5, #2]
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	23ec      	movs	r3, #236	; 0xec
 800f470:	2200      	movs	r2, #0
 800f472:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f476:	4620      	mov	r0, r4
 800f478:	f7ff f9be 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800f47c:	e705      	b.n	800f28a <ull_configure+0x142>
 800f47e:	2803      	cmp	r0, #3
 800f480:	f47f af6a 	bne.w	800f358 <ull_configure+0x210>
 800f484:	e065      	b.n	800f552 <ull_configure+0x40a>
 800f486:	2102      	movs	r1, #2
 800f488:	4620      	mov	r0, r4
 800f48a:	f7ff fbe5 	bl	800ec58 <ull_setdwstate>
 800f48e:	e763      	b.n	800f358 <ull_configure+0x210>
 800f490:	4b2c      	ldr	r3, [pc, #176]	; (800f544 <ull_configure+0x3fc>)
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f498:	2200      	movs	r2, #0
 800f49a:	4922      	ldr	r1, [pc, #136]	; (800f524 <ull_configure+0x3dc>)
 800f49c:	4620      	mov	r0, r4
 800f49e:	f7ff f83b 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f4a2:	f640 733c 	movw	r3, #3900	; 0xf3c
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f7fe fac2 	bl	800da36 <dwt_write16bitoffsetreg>
 800f4b2:	e766      	b.n	800f382 <ull_configure+0x23a>
 800f4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4be:	2200      	movs	r2, #0
 800f4c0:	4911      	ldr	r1, [pc, #68]	; (800f508 <ull_configure+0x3c0>)
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7ff fd28 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f4c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f4ca:	8a13      	ldrh	r3, [r2, #16]
 800f4cc:	f043 0308 	orr.w	r3, r3, #8
 800f4d0:	8213      	strh	r3, [r2, #16]
 800f4d2:	e050      	b.n	800f576 <ull_configure+0x42e>
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	9200      	str	r2, [sp, #0]
 800f4d8:	23fe      	movs	r3, #254	; 0xfe
 800f4da:	491b      	ldr	r1, [pc, #108]	; (800f548 <ull_configure+0x400>)
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f7ff f98b 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800f4e2:	e052      	b.n	800f58a <ull_configure+0x442>
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f7ff fda2 	bl	800f030 <ull_pgf_cal>
 800f4ec:	e06b      	b.n	800f5c6 <ull_configure+0x47e>
 800f4ee:	bf00      	nop
 800f4f0:	00026668 	.word	0x00026668
 800f4f4:	fffc4fcf 	.word	0xfffc4fcf
 800f4f8:	08012238 	.word	0x08012238
 800f4fc:	000e0014 	.word	0x000e0014
 800f500:	bfffff00 	.word	0xbfffff00
 800f504:	000e0018 	.word	0x000e0018
 800f508:	000b0008 	.word	0x000b0008
 800f50c:	af5f35cc 	.word	0xaf5f35cc
 800f510:	af5f584c 	.word	0xaf5f584c
 800f514:	0006000c 	.word	0x0006000c
 800f518:	00010008 	.word	0x00010008
 800f51c:	000f0030 	.word	0x000f0030
 800f520:	1c071134 	.word	0x1c071134
 800f524:	0007001c 	.word	0x0007001c
 800f528:	00070050 	.word	0x00070050
 800f52c:	00070018 	.word	0x00070018
 800f530:	00090008 	.word	0x00090008
 800f534:	00090004 	.word	0x00090004
 800f538:	000e000c 	.word	0x000e000c
 800f53c:	000e0010 	.word	0x000e0010
 800f540:	000c5a0a 	.word	0x000c5a0a
 800f544:	1c010034 	.word	0x1c010034
 800f548:	00030018 	.word	0x00030018
 800f54c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f54e:	f883 900f 	strb.w	r9, [r3, #15]
 800f552:	792b      	ldrb	r3, [r5, #4]
 800f554:	3b09      	subs	r3, #9
 800f556:	b2db      	uxtb	r3, r3
 800f558:	2b0f      	cmp	r3, #15
 800f55a:	d8bb      	bhi.n	800f4d4 <ull_configure+0x38c>
 800f55c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f55e:	7a1b      	ldrb	r3, [r3, #8]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d0a7      	beq.n	800f4b4 <ull_configure+0x36c>
 800f564:	4649      	mov	r1, r9
 800f566:	4620      	mov	r0, r4
 800f568:	f7fe fb9c 	bl	800dca4 <ull_configmrxlut>
 800f56c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f56e:	8a13      	ldrh	r3, [r2, #16]
 800f570:	f023 0308 	bic.w	r3, r3, #8
 800f574:	8213      	strh	r3, [r2, #16]
 800f576:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800f580:	2200      	movs	r2, #0
 800f582:	4914      	ldr	r1, [pc, #80]	; (800f5d4 <ull_configure+0x48c>)
 800f584:	4620      	mov	r0, r4
 800f586:	f7ff fcc7 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f58a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800f58e:	bfcc      	ite	gt
 800f590:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800f594:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f59e:	2200      	movs	r2, #0
 800f5a0:	490d      	ldr	r1, [pc, #52]	; (800f5d8 <ull_configure+0x490>)
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f7fe ffb8 	bl	800e518 <dwt_modify32bitoffsetreg>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	23ff      	movs	r3, #255	; 0xff
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	490a      	ldr	r1, [pc, #40]	; (800f5dc <ull_configure+0x494>)
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f7ff f920 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4909      	ldr	r1, [pc, #36]	; (800f5e0 <ull_configure+0x498>)
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f7fd fdc6 	bl	800d14e <dwt_read32bitoffsetreg>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d08e      	beq.n	800f4e4 <ull_configure+0x39c>
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f7ff f98a 	bl	800e8e0 <ull_adcoffsetscalibration>
 800f5cc:	b003      	add	sp, #12
 800f5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d2:	bf00      	nop
 800f5d4:	00030018 	.word	0x00030018
 800f5d8:	00060010 	.word	0x00060010
 800f5dc:	0004000c 	.word	0x0004000c
 800f5e0:	00040014 	.word	0x00040014

0800f5e4 <ull_initialise>:
 800f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	460e      	mov	r6, r1
 800f5ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d05b      	beq.n	800f6ac <ull_initialise+0xc8>
 800f5f4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	73a3      	strb	r3, [r4, #14]
 800f5fa:	2202      	movs	r2, #2
 800f5fc:	8222      	strh	r2, [r4, #16]
 800f5fe:	7523      	strb	r3, [r4, #20]
 800f600:	7563      	strb	r3, [r4, #21]
 800f602:	73e3      	strb	r3, [r4, #15]
 800f604:	7263      	strb	r3, [r4, #9]
 800f606:	72a3      	strb	r3, [r4, #10]
 800f608:	2104      	movs	r1, #4
 800f60a:	4628      	mov	r0, r5
 800f60c:	f7fe fa5c 	bl	800dac8 <_dwt_otpread>
 800f610:	4607      	mov	r7, r0
 800f612:	2105      	movs	r1, #5
 800f614:	4628      	mov	r0, r5
 800f616:	f7fe fa57 	bl	800dac8 <_dwt_otpread>
 800f61a:	4680      	mov	r8, r0
 800f61c:	210a      	movs	r1, #10
 800f61e:	4628      	mov	r0, r5
 800f620:	f7fe fa52 	bl	800dac8 <_dwt_otpread>
 800f624:	b12f      	cbz	r7, 800f632 <ull_initialise+0x4e>
 800f626:	f1b8 0f00 	cmp.w	r8, #0
 800f62a:	d002      	beq.n	800f632 <ull_initialise+0x4e>
 800f62c:	b280      	uxth	r0, r0
 800f62e:	2800      	cmp	r0, #0
 800f630:	d141      	bne.n	800f6b6 <ull_initialise+0xd2>
 800f632:	2120      	movs	r1, #32
 800f634:	4628      	mov	r0, r5
 800f636:	f7fe fa47 	bl	800dac8 <_dwt_otpread>
 800f63a:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800f63e:	bf0c      	ite	eq
 800f640:	2301      	moveq	r3, #1
 800f642:	2300      	movne	r3, #0
 800f644:	7223      	strb	r3, [r4, #8]
 800f646:	f016 0f10 	tst.w	r6, #16
 800f64a:	d143      	bne.n	800f6d4 <ull_initialise+0xf0>
 800f64c:	f016 0f20 	tst.w	r6, #32
 800f650:	d146      	bne.n	800f6e0 <ull_initialise+0xfc>
 800f652:	f016 0f40 	tst.w	r6, #64	; 0x40
 800f656:	d149      	bne.n	800f6ec <ull_initialise+0x108>
 800f658:	f016 0f80 	tst.w	r6, #128	; 0x80
 800f65c:	d14d      	bne.n	800f6fa <ull_initialise+0x116>
 800f65e:	7aa3      	ldrb	r3, [r4, #10]
 800f660:	b90b      	cbnz	r3, 800f666 <ull_initialise+0x82>
 800f662:	2385      	movs	r3, #133	; 0x85
 800f664:	72a3      	strb	r3, [r4, #10]
 800f666:	7a63      	ldrb	r3, [r4, #9]
 800f668:	b90b      	cbnz	r3, 800f66e <ull_initialise+0x8a>
 800f66a:	2374      	movs	r3, #116	; 0x74
 800f66c:	7263      	strb	r3, [r4, #9]
 800f66e:	211f      	movs	r1, #31
 800f670:	4628      	mov	r0, r5
 800f672:	f7fe fa29 	bl	800dac8 <_dwt_otpread>
 800f676:	7320      	strb	r0, [r4, #12]
 800f678:	211e      	movs	r1, #30
 800f67a:	4628      	mov	r0, r5
 800f67c:	f7fe fa24 	bl	800dac8 <_dwt_otpread>
 800f680:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800f684:	bf12      	itee	ne
 800f686:	7360      	strbne	r0, [r4, #13]
 800f688:	232e      	moveq	r3, #46	; 0x2e
 800f68a:	7363      	strbeq	r3, [r4, #13]
 800f68c:	7b63      	ldrb	r3, [r4, #13]
 800f68e:	2200      	movs	r2, #0
 800f690:	4920      	ldr	r1, [pc, #128]	; (800f714 <ull_initialise+0x130>)
 800f692:	4628      	mov	r0, r5
 800f694:	f7fe fc1e 	bl	800ded4 <dwt_write8bitoffsetreg>
 800f698:	2135      	movs	r1, #53	; 0x35
 800f69a:	4628      	mov	r0, r5
 800f69c:	f7fe fa14 	bl	800dac8 <_dwt_otpread>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	bb80      	cbnz	r0, 800f706 <ull_initialise+0x122>
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	b002      	add	sp, #8
 800f6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ac:	2028      	movs	r0, #40	; 0x28
 800f6ae:	f002 fa67 	bl	8011b80 <malloc>
 800f6b2:	6528      	str	r0, [r5, #80]	; 0x50
 800f6b4:	e79e      	b.n	800f5f4 <ull_initialise+0x10>
 800f6b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	4915      	ldr	r1, [pc, #84]	; (800f718 <ull_initialise+0x134>)
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f7ff fc27 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800f6ca:	8a23      	ldrh	r3, [r4, #16]
 800f6cc:	f043 0314 	orr.w	r3, r3, #20
 800f6d0:	8223      	strh	r3, [r4, #16]
 800f6d2:	e7ae      	b.n	800f632 <ull_initialise+0x4e>
 800f6d4:	2106      	movs	r1, #6
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f7fe f9f6 	bl	800dac8 <_dwt_otpread>
 800f6dc:	6020      	str	r0, [r4, #0]
 800f6de:	e7b5      	b.n	800f64c <ull_initialise+0x68>
 800f6e0:	2107      	movs	r1, #7
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	f7fe f9f0 	bl	800dac8 <_dwt_otpread>
 800f6e8:	6060      	str	r0, [r4, #4]
 800f6ea:	e7b2      	b.n	800f652 <ull_initialise+0x6e>
 800f6ec:	2108      	movs	r1, #8
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	f7fe f9ea 	bl	800dac8 <_dwt_otpread>
 800f6f4:	0c00      	lsrs	r0, r0, #16
 800f6f6:	7260      	strb	r0, [r4, #9]
 800f6f8:	e7ae      	b.n	800f658 <ull_initialise+0x74>
 800f6fa:	2109      	movs	r1, #9
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	f7fe f9e3 	bl	800dac8 <_dwt_otpread>
 800f702:	72a0      	strb	r0, [r4, #10]
 800f704:	e7ab      	b.n	800f65e <ull_initialise+0x7a>
 800f706:	2200      	movs	r2, #0
 800f708:	4904      	ldr	r1, [pc, #16]	; (800f71c <ull_initialise+0x138>)
 800f70a:	4628      	mov	r0, r5
 800f70c:	f7fe f9fe 	bl	800db0c <dwt_write32bitoffsetreg>
 800f710:	e7c8      	b.n	800f6a4 <ull_initialise+0xc0>
 800f712:	bf00      	nop
 800f714:	00090014 	.word	0x00090014
 800f718:	000b0008 	.word	0x000b0008
 800f71c:	00090004 	.word	0x00090004

0800f720 <ull_rxenable>:
 800f720:	b530      	push	{r4, r5, lr}
 800f722:	b083      	sub	sp, #12
 800f724:	4605      	mov	r5, r0
 800f726:	460c      	mov	r4, r1
 800f728:	b171      	cbz	r1, 800f748 <ull_rxenable+0x28>
 800f72a:	f021 0302 	bic.w	r3, r1, #2
 800f72e:	3b01      	subs	r3, #1
 800f730:	2b0f      	cmp	r3, #15
 800f732:	d862      	bhi.n	800f7fa <ull_rxenable+0xda>
 800f734:	e8df f003 	tbb	[pc, r3]
 800f738:	24616111 	.word	0x24616111
 800f73c:	2d616161 	.word	0x2d616161
 800f740:	61616161 	.word	0x61616161
 800f744:	3a616161 	.word	0x3a616161
 800f748:	2102      	movs	r1, #2
 800f74a:	9101      	str	r1, [sp, #4]
 800f74c:	2200      	movs	r2, #0
 800f74e:	9200      	str	r2, [sp, #0]
 800f750:	4613      	mov	r3, r2
 800f752:	f7fd fc74 	bl	800d03e <dwt_xfer3xxx>
 800f756:	4620      	mov	r0, r4
 800f758:	e010      	b.n	800f77c <ull_rxenable+0x5c>
 800f75a:	2302      	movs	r3, #2
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	9200      	str	r2, [sp, #0]
 800f762:	4613      	mov	r3, r2
 800f764:	2104      	movs	r1, #4
 800f766:	f7fd fc6a 	bl	800d03e <dwt_xfer3xxx>
 800f76a:	2203      	movs	r2, #3
 800f76c:	2144      	movs	r1, #68	; 0x44
 800f76e:	4628      	mov	r0, r5
 800f770:	f7fd fd42 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800f774:	f010 0f08 	tst.w	r0, #8
 800f778:	d125      	bne.n	800f7c6 <ull_rxenable+0xa6>
 800f77a:	2000      	movs	r0, #0
 800f77c:	b003      	add	sp, #12
 800f77e:	bd30      	pop	{r4, r5, pc}
 800f780:	2302      	movs	r3, #2
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	9200      	str	r2, [sp, #0]
 800f788:	4613      	mov	r3, r2
 800f78a:	210a      	movs	r1, #10
 800f78c:	f7fd fc57 	bl	800d03e <dwt_xfer3xxx>
 800f790:	e7eb      	b.n	800f76a <ull_rxenable+0x4a>
 800f792:	2100      	movs	r1, #0
 800f794:	f7fe f9cf 	bl	800db36 <_dwt_adjust_delaytime>
 800f798:	2302      	movs	r3, #2
 800f79a:	9301      	str	r3, [sp, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	9200      	str	r2, [sp, #0]
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	2108      	movs	r1, #8
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f7fd fc4a 	bl	800d03e <dwt_xfer3xxx>
 800f7aa:	e7de      	b.n	800f76a <ull_rxenable+0x4a>
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	f7fe f9c2 	bl	800db36 <_dwt_adjust_delaytime>
 800f7b2:	2302      	movs	r3, #2
 800f7b4:	9301      	str	r3, [sp, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	9200      	str	r2, [sp, #0]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	2106      	movs	r1, #6
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f7fd fc3d 	bl	800d03e <dwt_xfer3xxx>
 800f7c4:	e7d1      	b.n	800f76a <ull_rxenable+0x4a>
 800f7c6:	2302      	movs	r3, #2
 800f7c8:	9301      	str	r3, [sp, #4]
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	9100      	str	r1, [sp, #0]
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	460a      	mov	r2, r1
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f7fd fc33 	bl	800d03e <dwt_xfer3xxx>
 800f7d8:	f014 0f02 	tst.w	r4, #2
 800f7dc:	d002      	beq.n	800f7e4 <ull_rxenable+0xc4>
 800f7de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7e2:	e7cb      	b.n	800f77c <ull_rxenable+0x5c>
 800f7e4:	2102      	movs	r1, #2
 800f7e6:	9101      	str	r1, [sp, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	9200      	str	r2, [sp, #0]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7fd fc25 	bl	800d03e <dwt_xfer3xxx>
 800f7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7f8:	e7c0      	b.n	800f77c <ull_rxenable+0x5c>
 800f7fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7fe:	e7bd      	b.n	800f77c <ull_rxenable+0x5c>

0800f800 <ull_softreset_no_sema_fcmd>:
 800f800:	b570      	push	{r4, r5, r6, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	4606      	mov	r6, r0
 800f806:	2502      	movs	r5, #2
 800f808:	9501      	str	r5, [sp, #4]
 800f80a:	2400      	movs	r4, #0
 800f80c:	9400      	str	r4, [sp, #0]
 800f80e:	4623      	mov	r3, r4
 800f810:	4622      	mov	r2, r4
 800f812:	2119      	movs	r1, #25
 800f814:	f7fd fc13 	bl	800d03e <dwt_xfer3xxx>
 800f818:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f81a:	739c      	strb	r4, [r3, #14]
 800f81c:	821d      	strh	r5, [r3, #16]
 800f81e:	751c      	strb	r4, [r3, #20]
 800f820:	755c      	strb	r4, [r3, #21]
 800f822:	73dc      	strb	r4, [r3, #15]
 800f824:	b002      	add	sp, #8
 800f826:	bd70      	pop	{r4, r5, r6, pc}

0800f828 <ull_softreset_fcmd>:
 800f828:	b570      	push	{r4, r5, r6, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	4606      	mov	r6, r0
 800f82e:	2502      	movs	r5, #2
 800f830:	9501      	str	r5, [sp, #4]
 800f832:	2400      	movs	r4, #0
 800f834:	9400      	str	r4, [sp, #0]
 800f836:	4623      	mov	r3, r4
 800f838:	4622      	mov	r2, r4
 800f83a:	2118      	movs	r1, #24
 800f83c:	f7fd fbff 	bl	800d03e <dwt_xfer3xxx>
 800f840:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f842:	739c      	strb	r4, [r3, #14]
 800f844:	821d      	strh	r5, [r3, #16]
 800f846:	751c      	strb	r4, [r3, #20]
 800f848:	755c      	strb	r4, [r3, #21]
 800f84a:	73dc      	strb	r4, [r3, #15]
 800f84c:	b002      	add	sp, #8
 800f84e:	bd70      	pop	{r4, r5, r6, pc}

0800f850 <dwt_ioctl>:
 800f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f854:	b08d      	sub	sp, #52	; 0x34
 800f856:	4606      	mov	r6, r0
 800f858:	4615      	mov	r5, r2
 800f85a:	461c      	mov	r4, r3
 800f85c:	299c      	cmp	r1, #156	; 0x9c
 800f85e:	f200 809f 	bhi.w	800f9a0 <dwt_ioctl+0x150>
 800f862:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f866:	09b9      	.short	0x09b9
 800f868:	00a109c4 	.word	0x00a109c4
 800f86c:	00c100a6 	.word	0x00c100a6
 800f870:	019d0151 	.word	0x019d0151
 800f874:	015c0176 	.word	0x015c0176
 800f878:	01b301ae 	.word	0x01b301ae
 800f87c:	01c501bc 	.word	0x01c501bc
 800f880:	01d701ce 	.word	0x01d701ce
 800f884:	01e501e0 	.word	0x01e501e0
 800f888:	027201ee 	.word	0x027201ee
 800f88c:	027e0278 	.word	0x027e0278
 800f890:	028f0289 	.word	0x028f0289
 800f894:	029a0295 	.word	0x029a0295
 800f898:	02a502a0 	.word	0x02a502a0
 800f89c:	02b702ae 	.word	0x02b702ae
 800f8a0:	02c902c0 	.word	0x02c902c0
 800f8a4:	02f90304 	.word	0x02f90304
 800f8a8:	02d202ee 	.word	0x02d202ee
 800f8ac:	031e02e0 	.word	0x031e02e0
 800f8b0:	021a01f8 	.word	0x021a01f8
 800f8b4:	02420239 	.word	0x02420239
 800f8b8:	08ba0258 	.word	0x08ba0258
 800f8bc:	031508bf 	.word	0x031508bf
 800f8c0:	032c0327 	.word	0x032c0327
 800f8c4:	033c0336 	.word	0x033c0336
 800f8c8:	03520347 	.word	0x03520347
 800f8cc:	0386035b 	.word	0x0386035b
 800f8d0:	03a9039d 	.word	0x03a9039d
 800f8d4:	03b5030a 	.word	0x03b5030a
 800f8d8:	03d203bf 	.word	0x03d203bf
 800f8dc:	040b03f9 	.word	0x040b03f9
 800f8e0:	0457044d 	.word	0x0457044d
 800f8e4:	048c047d 	.word	0x048c047d
 800f8e8:	049504a7 	.word	0x049504a7
 800f8ec:	04f704b1 	.word	0x04f704b1
 800f8f0:	052f050f 	.word	0x052f050f
 800f8f4:	05580544 	.word	0x05580544
 800f8f8:	057d0561 	.word	0x057d0561
 800f8fc:	0692056a 	.word	0x0692056a
 800f900:	071106c1 	.word	0x071106c1
 800f904:	07220717 	.word	0x07220717
 800f908:	075b073b 	.word	0x075b073b
 800f90c:	078f0765 	.word	0x078f0765
 800f910:	07c607bd 	.word	0x07c607bd
 800f914:	07d507cc 	.word	0x07d507cc
 800f918:	07ef07e2 	.word	0x07ef07e2
 800f91c:	080207f9 	.word	0x080207f9
 800f920:	0816080b 	.word	0x0816080b
 800f924:	08270821 	.word	0x08270821
 800f928:	0855084a 	.word	0x0855084a
 800f92c:	086b0860 	.word	0x086b0860
 800f930:	0898088d 	.word	0x0898088d
 800f934:	08c508b1 	.word	0x08c508b1
 800f938:	0959094f 	.word	0x0959094f
 800f93c:	09cc0964 	.word	0x09cc0964
 800f940:	09ae096e 	.word	0x09ae096e
 800f944:	090306b3 	.word	0x090306b3
 800f948:	0a3a0924 	.word	0x0a3a0924
 800f94c:	09d90a2f 	.word	0x09d90a2f
 800f950:	09ef09e4 	.word	0x09ef09e4
 800f954:	0a0509fa 	.word	0x0a0509fa
 800f958:	0a1b0a10 	.word	0x0a1b0a10
 800f95c:	0c320a24 	.word	0x0c320a24
 800f960:	0ca30c69 	.word	0x0ca30c69
 800f964:	0e2d0cc5 	.word	0x0e2d0cc5
 800f968:	0a4a0e41 	.word	0x0a4a0e41
 800f96c:	0b890b57 	.word	0x0b890b57
 800f970:	0b970b93 	.word	0x0b970b93
 800f974:	0ba50b9b 	.word	0x0ba50b9b
 800f978:	0bc10bb7 	.word	0x0bc10bb7
 800f97c:	0be80bd4 	.word	0x0be80bd4
 800f980:	0cdb0c22 	.word	0x0cdb0c22
 800f984:	0cfd0ce5 	.word	0x0cfd0ce5
 800f988:	0d2d0d18 	.word	0x0d2d0d18
 800f98c:	0d890d4d 	.word	0x0d890d4d
 800f990:	0db70da1 	.word	0x0db70da1
 800f994:	0efc0dc7 	.word	0x0efc0dc7
 800f998:	0dec0df6 	.word	0x0dec0df6
 800f99c:	0e000e08 	.word	0x0e000e08
 800f9a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f9a4:	f001 be5c 	b.w	8011660 <dwt_ioctl+0x1e10>
 800f9a8:	f7fd fb28 	bl	800cffc <ull_wakeup_ic>
 800f9ac:	2500      	movs	r5, #0
 800f9ae:	f001 be57 	b.w	8011660 <dwt_ioctl+0x1e10>
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	49c0      	ldr	r1, [pc, #768]	; (800fcb8 <dwt_ioctl+0x468>)
 800f9b6:	f7fd fc1f 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800f9ba:	2803      	cmp	r0, #3
 800f9bc:	d802      	bhi.n	800f9c4 <dwt_ioctl+0x174>
 800f9be:	2500      	movs	r5, #0
 800f9c0:	f001 be4e 	b.w	8011660 <dwt_ioctl+0x1e10>
 800f9c4:	f7f0 ff24 	bl	8000810 <decamutexon>
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	2302      	movs	r3, #2
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	2500      	movs	r5, #0
 800f9d0:	9500      	str	r5, [sp, #0]
 800f9d2:	462b      	mov	r3, r5
 800f9d4:	462a      	mov	r2, r5
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f7fd fb30 	bl	800d03e <dwt_xfer3xxx>
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f7f0 ff27 	bl	8000832 <decamutexoff>
 800f9e4:	f001 be3c 	b.w	8011660 <dwt_ioctl+0x1e10>
 800f9e8:	2c00      	cmp	r4, #0
 800f9ea:	f001 863d 	beq.w	8011668 <dwt_ioctl+0x1e18>
 800f9ee:	7824      	ldrb	r4, [r4, #0]
 800f9f0:	f014 0f1d 	tst.w	r4, #29
 800f9f4:	d063      	beq.n	800fabe <dwt_ioctl+0x26e>
 800f9f6:	f014 0f01 	tst.w	r4, #1
 800f9fa:	d025      	beq.n	800fa48 <dwt_ioctl+0x1f8>
 800f9fc:	f014 0f02 	tst.w	r4, #2
 800fa00:	f04f 0302 	mov.w	r3, #2
 800fa04:	9301      	str	r3, [sp, #4]
 800fa06:	f04f 0200 	mov.w	r2, #0
 800fa0a:	9200      	str	r2, [sp, #0]
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	bf14      	ite	ne
 800fa10:	210d      	movne	r1, #13
 800fa12:	2103      	moveq	r1, #3
 800fa14:	f7fd fb13 	bl	800d03e <dwt_xfer3xxx>
 800fa18:	2203      	movs	r2, #3
 800fa1a:	2144      	movs	r1, #68	; 0x44
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f7fd fbeb 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800fa22:	f010 0f08 	tst.w	r0, #8
 800fa26:	bf08      	it	eq
 800fa28:	2500      	moveq	r5, #0
 800fa2a:	f001 8619 	beq.w	8011660 <dwt_ioctl+0x1e10>
 800fa2e:	2302      	movs	r3, #2
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	2100      	movs	r1, #0
 800fa34:	9100      	str	r1, [sp, #0]
 800fa36:	460b      	mov	r3, r1
 800fa38:	460a      	mov	r2, r1
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f7fd faff 	bl	800d03e <dwt_xfer3xxx>
 800fa40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fa44:	f001 be0c 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fa48:	f014 0f08 	tst.w	r4, #8
 800fa4c:	d111      	bne.n	800fa72 <dwt_ioctl+0x222>
 800fa4e:	f014 0f10 	tst.w	r4, #16
 800fa52:	d121      	bne.n	800fa98 <dwt_ioctl+0x248>
 800fa54:	f014 0f02 	tst.w	r4, #2
 800fa58:	f04f 0302 	mov.w	r3, #2
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	f04f 0200 	mov.w	r2, #0
 800fa62:	9200      	str	r2, [sp, #0]
 800fa64:	4613      	mov	r3, r2
 800fa66:	bf14      	ite	ne
 800fa68:	2110      	movne	r1, #16
 800fa6a:	2109      	moveq	r1, #9
 800fa6c:	f7fd fae7 	bl	800d03e <dwt_xfer3xxx>
 800fa70:	e7d2      	b.n	800fa18 <dwt_ioctl+0x1c8>
 800fa72:	2100      	movs	r1, #0
 800fa74:	f7fe f85f 	bl	800db36 <_dwt_adjust_delaytime>
 800fa78:	f014 0f02 	tst.w	r4, #2
 800fa7c:	f04f 0302 	mov.w	r3, #2
 800fa80:	9301      	str	r3, [sp, #4]
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	9200      	str	r2, [sp, #0]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	bf14      	ite	ne
 800fa8c:	210f      	movne	r1, #15
 800fa8e:	2107      	moveq	r1, #7
 800fa90:	4630      	mov	r0, r6
 800fa92:	f7fd fad4 	bl	800d03e <dwt_xfer3xxx>
 800fa96:	e7bf      	b.n	800fa18 <dwt_ioctl+0x1c8>
 800fa98:	2101      	movs	r1, #1
 800fa9a:	f7fe f84c 	bl	800db36 <_dwt_adjust_delaytime>
 800fa9e:	f014 0f02 	tst.w	r4, #2
 800faa2:	f04f 0302 	mov.w	r3, #2
 800faa6:	9301      	str	r3, [sp, #4]
 800faa8:	f04f 0200 	mov.w	r2, #0
 800faac:	9200      	str	r2, [sp, #0]
 800faae:	4613      	mov	r3, r2
 800fab0:	bf14      	ite	ne
 800fab2:	210e      	movne	r1, #14
 800fab4:	2105      	moveq	r1, #5
 800fab6:	4630      	mov	r0, r6
 800fab8:	f7fd fac1 	bl	800d03e <dwt_xfer3xxx>
 800fabc:	e7ac      	b.n	800fa18 <dwt_ioctl+0x1c8>
 800fabe:	f014 0f20 	tst.w	r4, #32
 800fac2:	d010      	beq.n	800fae6 <dwt_ioctl+0x296>
 800fac4:	f014 0f02 	tst.w	r4, #2
 800fac8:	f04f 0302 	mov.w	r3, #2
 800facc:	9301      	str	r3, [sp, #4]
 800face:	f04f 0500 	mov.w	r5, #0
 800fad2:	9500      	str	r5, [sp, #0]
 800fad4:	462b      	mov	r3, r5
 800fad6:	462a      	mov	r2, r5
 800fad8:	bf14      	ite	ne
 800fada:	2111      	movne	r1, #17
 800fadc:	210b      	moveq	r1, #11
 800fade:	f7fd faae 	bl	800d03e <dwt_xfer3xxx>
 800fae2:	f001 bdbd 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fae6:	f014 0f02 	tst.w	r4, #2
 800faea:	f04f 0302 	mov.w	r3, #2
 800faee:	9301      	str	r3, [sp, #4]
 800faf0:	f04f 0500 	mov.w	r5, #0
 800faf4:	9500      	str	r5, [sp, #0]
 800faf6:	462b      	mov	r3, r5
 800faf8:	462a      	mov	r2, r5
 800fafa:	bf14      	ite	ne
 800fafc:	210c      	movne	r1, #12
 800fafe:	2101      	moveq	r1, #1
 800fb00:	f7fd fa9d 	bl	800d03e <dwt_xfer3xxx>
 800fb04:	f001 bdac 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fb08:	2c00      	cmp	r4, #0
 800fb0a:	f001 85af 	beq.w	801166c <dwt_ioctl+0x1e1c>
 800fb0e:	6823      	ldr	r3, [r4, #0]
 800fb10:	2200      	movs	r2, #0
 800fb12:	2128      	movs	r1, #40	; 0x28
 800fb14:	f7fd fffa 	bl	800db0c <dwt_write32bitoffsetreg>
 800fb18:	2500      	movs	r5, #0
 800fb1a:	f001 bda1 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	2200      	movs	r2, #0
 800fb22:	4966      	ldr	r1, [pc, #408]	; (800fcbc <dwt_ioctl+0x46c>)
 800fb24:	f7fd fff2 	bl	800db0c <dwt_write32bitoffsetreg>
 800fb28:	6863      	ldr	r3, [r4, #4]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4964      	ldr	r1, [pc, #400]	; (800fcc0 <dwt_ioctl+0x470>)
 800fb2e:	4630      	mov	r0, r6
 800fb30:	f7fd ffec 	bl	800db0c <dwt_write32bitoffsetreg>
 800fb34:	68a3      	ldr	r3, [r4, #8]
 800fb36:	2200      	movs	r2, #0
 800fb38:	4962      	ldr	r1, [pc, #392]	; (800fcc4 <dwt_ioctl+0x474>)
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f7fd ffe6 	bl	800db0c <dwt_write32bitoffsetreg>
 800fb40:	68e3      	ldr	r3, [r4, #12]
 800fb42:	2200      	movs	r2, #0
 800fb44:	4960      	ldr	r1, [pc, #384]	; (800fcc8 <dwt_ioctl+0x478>)
 800fb46:	4630      	mov	r0, r6
 800fb48:	f7fd ffe0 	bl	800db0c <dwt_write32bitoffsetreg>
 800fb4c:	2500      	movs	r5, #0
 800fb4e:	f001 bd87 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fb52:	2c00      	cmp	r4, #0
 800fb54:	f001 858c 	beq.w	8011670 <dwt_ioctl+0x1e20>
 800fb58:	8823      	ldrh	r3, [r4, #0]
 800fb5a:	6865      	ldr	r5, [r4, #4]
 800fb5c:	2d03      	cmp	r5, #3
 800fb5e:	f201 8589 	bhi.w	8011674 <dwt_ioctl+0x1e24>
 800fb62:	e8df f005 	tbb	[pc, r5]
 800fb66:	0802      	.short	0x0802
 800fb68:	160f      	.short	0x160f
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	4957      	ldr	r1, [pc, #348]	; (800fccc <dwt_ioctl+0x47c>)
 800fb6e:	f7fd ff62 	bl	800da36 <dwt_write16bitoffsetreg>
 800fb72:	f001 bd75 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fb76:	2202      	movs	r2, #2
 800fb78:	4954      	ldr	r1, [pc, #336]	; (800fccc <dwt_ioctl+0x47c>)
 800fb7a:	f7fd ff5c 	bl	800da36 <dwt_write16bitoffsetreg>
 800fb7e:	2500      	movs	r5, #0
 800fb80:	f001 bd6e 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fb84:	2200      	movs	r2, #0
 800fb86:	4952      	ldr	r1, [pc, #328]	; (800fcd0 <dwt_ioctl+0x480>)
 800fb88:	f7fd ff55 	bl	800da36 <dwt_write16bitoffsetreg>
 800fb8c:	2500      	movs	r5, #0
 800fb8e:	f001 bd67 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fb92:	2202      	movs	r2, #2
 800fb94:	494e      	ldr	r1, [pc, #312]	; (800fcd0 <dwt_ioctl+0x480>)
 800fb96:	f7fd ff4e 	bl	800da36 <dwt_write16bitoffsetreg>
 800fb9a:	2500      	movs	r5, #0
 800fb9c:	f001 bd60 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fba0:	2c00      	cmp	r4, #0
 800fba2:	f001 8569 	beq.w	8011678 <dwt_ioctl+0x1e28>
 800fba6:	7823      	ldrb	r3, [r4, #0]
 800fba8:	005b      	lsls	r3, r3, #1
 800fbaa:	f003 0306 	and.w	r3, r3, #6
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	f06f 0306 	mvn.w	r3, #6
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	4947      	ldr	r1, [pc, #284]	; (800fcd4 <dwt_ioctl+0x484>)
 800fbb8:	f7fe fcae 	bl	800e518 <dwt_modify32bitoffsetreg>
 800fbbc:	2500      	movs	r5, #0
 800fbbe:	f001 bd4f 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fbc2:	f7fe fccd 	bl	800e560 <ull_enablegpioclocks>
 800fbc6:	2500      	movs	r5, #0
 800fbc8:	f001 bd4a 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fbcc:	2c00      	cmp	r4, #0
 800fbce:	f001 8555 	beq.w	801167c <dwt_ioctl+0x1e2c>
 800fbd2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbd4:	7b1b      	ldrb	r3, [r3, #12]
 800fbd6:	7023      	strb	r3, [r4, #0]
 800fbd8:	2500      	movs	r5, #0
 800fbda:	f001 bd41 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fbde:	2c00      	cmp	r4, #0
 800fbe0:	f001 854e 	beq.w	8011680 <dwt_ioctl+0x1e30>
 800fbe4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbe6:	7a5b      	ldrb	r3, [r3, #9]
 800fbe8:	7023      	strb	r3, [r4, #0]
 800fbea:	2500      	movs	r5, #0
 800fbec:	f001 bd38 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fbf0:	2c00      	cmp	r4, #0
 800fbf2:	f001 8547 	beq.w	8011684 <dwt_ioctl+0x1e34>
 800fbf6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbf8:	7a9b      	ldrb	r3, [r3, #10]
 800fbfa:	7023      	strb	r3, [r4, #0]
 800fbfc:	2500      	movs	r5, #0
 800fbfe:	f001 bd2f 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc02:	2c00      	cmp	r4, #0
 800fc04:	f001 8540 	beq.w	8011688 <dwt_ioctl+0x1e38>
 800fc08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	2500      	movs	r5, #0
 800fc10:	f001 bd26 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc14:	2c00      	cmp	r4, #0
 800fc16:	f001 8539 	beq.w	801168c <dwt_ioctl+0x1e3c>
 800fc1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	6023      	str	r3, [r4, #0]
 800fc20:	2500      	movs	r5, #0
 800fc22:	f001 bd1d 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc26:	f7fe fae1 	bl	800e1ec <ull_signal_rx_buff_free>
 800fc2a:	2500      	movs	r5, #0
 800fc2c:	f001 bd18 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc30:	2c00      	cmp	r4, #0
 800fc32:	f001 852d 	beq.w	8011690 <dwt_ioctl+0x1e40>
 800fc36:	6821      	ldr	r1, [r4, #0]
 800fc38:	f7fd ffa3 	bl	800db82 <ull_setrxaftertxdelay>
 800fc3c:	2500      	movs	r5, #0
 800fc3e:	f001 bd0f 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc42:	2c00      	cmp	r4, #0
 800fc44:	f001 8526 	beq.w	8011694 <dwt_ioctl+0x1e44>
 800fc48:	6862      	ldr	r2, [r4, #4]
 800fc4a:	7821      	ldrb	r1, [r4, #0]
 800fc4c:	f7fe fde8 	bl	800e820 <ull_enablespicrccheck>
 800fc50:	2500      	movs	r5, #0
 800fc52:	f001 bd05 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc56:	2c00      	cmp	r4, #0
 800fc58:	f001 851e 	beq.w	8011698 <dwt_ioctl+0x1e48>
 800fc5c:	6865      	ldr	r5, [r4, #4]
 800fc5e:	7823      	ldrb	r3, [r4, #0]
 800fc60:	2203      	movs	r2, #3
 800fc62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800fc66:	f7fe f935 	bl	800ded4 <dwt_write8bitoffsetreg>
 800fc6a:	b94d      	cbnz	r5, 800fc80 <dwt_ioctl+0x430>
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	9200      	str	r2, [sp, #0]
 800fc70:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800fc74:	2110      	movs	r1, #16
 800fc76:	4630      	mov	r0, r6
 800fc78:	f7ff f94e 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800fc7c:	f001 bcf0 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc80:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	2110      	movs	r1, #16
 800fc8e:	4630      	mov	r0, r6
 800fc90:	f7fe fc42 	bl	800e518 <dwt_modify32bitoffsetreg>
 800fc94:	2500      	movs	r5, #0
 800fc96:	f001 bce3 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	4611      	mov	r1, r2
 800fc9e:	f7fd fa56 	bl	800d14e <dwt_read32bitoffsetreg>
 800fca2:	68b2      	ldr	r2, [r6, #8]
 800fca4:	6813      	ldr	r3, [r2, #0]
 800fca6:	4043      	eors	r3, r0
 800fca8:	6852      	ldr	r2, [r2, #4]
 800fcaa:	4213      	tst	r3, r2
 800fcac:	bf14      	ite	ne
 800fcae:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800fcb2:	2500      	moveq	r5, #0
 800fcb4:	f001 bcd4 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fcb8:	000f0030 	.word	0x000f0030
 800fcbc:	00010054 	.word	0x00010054
 800fcc0:	00010058 	.word	0x00010058
 800fcc4:	0001005c 	.word	0x0001005c
 800fcc8:	00010060 	.word	0x00010060
 800fccc:	0001000c 	.word	0x0001000c
 800fcd0:	00010010 	.word	0x00010010
 800fcd4:	00010008 	.word	0x00010008
 800fcd8:	2c00      	cmp	r4, #0
 800fcda:	f001 84df 	beq.w	801169c <dwt_ioctl+0x1e4c>
 800fcde:	7821      	ldrb	r1, [r4, #0]
 800fce0:	f7fe fdba 	bl	800e858 <ull_configciadiag>
 800fce4:	2500      	movs	r5, #0
 800fce6:	f001 bcbb 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fcea:	b942      	cbnz	r2, 800fcfe <dwt_ioctl+0x4ae>
 800fcec:	2200      	movs	r2, #0
 800fcee:	9200      	str	r2, [sp, #0]
 800fcf0:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800fcf4:	49d2      	ldr	r1, [pc, #840]	; (8010040 <dwt_ioctl+0x7f0>)
 800fcf6:	f7ff f90f 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800fcfa:	f001 bcb1 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fcfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd08:	2200      	movs	r2, #0
 800fd0a:	49cd      	ldr	r1, [pc, #820]	; (8010040 <dwt_ioctl+0x7f0>)
 800fd0c:	f7ff f904 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800fd10:	2500      	movs	r5, #0
 800fd12:	f001 bca5 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd16:	f002 0201 	and.w	r2, r2, #1
 800fd1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd1e:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800fd22:	2a00      	cmp	r2, #0
 800fd24:	bf08      	it	eq
 800fd26:	460b      	moveq	r3, r1
 800fd28:	02d2      	lsls	r2, r2, #11
 800fd2a:	f015 0f02 	tst.w	r5, #2
 800fd2e:	bf12      	itee	ne
 800fd30:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800fd34:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd38:	b29b      	uxtheq	r3, r3
 800fd3a:	9200      	str	r2, [sp, #0]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	49c0      	ldr	r1, [pc, #768]	; (8010040 <dwt_ioctl+0x7f0>)
 800fd40:	f7ff f8ea 	bl	800ef18 <dwt_modify16bitoffsetreg>
 800fd44:	2500      	movs	r5, #0
 800fd46:	f001 bc8b 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd4a:	4611      	mov	r1, r2
 800fd4c:	f7fd ff2e 	bl	800dbac <ull_setfinegraintxseq>
 800fd50:	2500      	movs	r5, #0
 800fd52:	f001 bc85 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd56:	4611      	mov	r1, r2
 800fd58:	f7fd ff3c 	bl	800dbd4 <ull_setlnapamode>
 800fd5c:	2500      	movs	r5, #0
 800fd5e:	f001 bc7f 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd62:	2c00      	cmp	r4, #0
 800fd64:	f001 849c 	beq.w	80116a0 <dwt_ioctl+0x1e50>
 800fd68:	2200      	movs	r2, #0
 800fd6a:	49b6      	ldr	r1, [pc, #728]	; (8010044 <dwt_ioctl+0x7f4>)
 800fd6c:	f7fd fa44 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800fd70:	7020      	strb	r0, [r4, #0]
 800fd72:	2500      	movs	r5, #0
 800fd74:	f001 bc74 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd78:	4621      	mov	r1, r4
 800fd7a:	f7fd ff4b 	bl	800dc14 <ull_configurestskey>
 800fd7e:	2500      	movs	r5, #0
 800fd80:	f001 bc6e 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd84:	4621      	mov	r1, r4
 800fd86:	f7fd ff69 	bl	800dc5c <ull_configurestsiv>
 800fd8a:	2500      	movs	r5, #0
 800fd8c:	f001 bc68 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd90:	f7fe fd98 	bl	800e8c4 <ull_configurestsloadiv>
 800fd94:	2500      	movs	r5, #0
 800fd96:	f001 bc63 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	f7fd ff82 	bl	800dca4 <ull_configmrxlut>
 800fda0:	2500      	movs	r5, #0
 800fda2:	f001 bc5d 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fda6:	f7fe feb3 	bl	800eb10 <ull_restoreconfig>
 800fdaa:	2500      	movs	r5, #0
 800fdac:	f001 bc58 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fdb0:	2c00      	cmp	r4, #0
 800fdb2:	f001 8477 	beq.w	80116a4 <dwt_ioctl+0x1e54>
 800fdb6:	7821      	ldrb	r1, [r4, #0]
 800fdb8:	f7ff f8c8 	bl	800ef4c <ull_configurestsmode>
 800fdbc:	2500      	movs	r5, #0
 800fdbe:	f001 bc4f 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fdc2:	2c00      	cmp	r4, #0
 800fdc4:	f001 8470 	beq.w	80116a8 <dwt_ioctl+0x1e58>
 800fdc8:	8821      	ldrh	r1, [r4, #0]
 800fdca:	f7fd fe44 	bl	800da56 <ull_setrxantennadelay>
 800fdce:	2500      	movs	r5, #0
 800fdd0:	f001 bc46 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fdd4:	2c00      	cmp	r4, #0
 800fdd6:	f001 8469 	beq.w	80116ac <dwt_ioctl+0x1e5c>
 800fdda:	f7fd f9e0 	bl	800d19e <ull_getrxantennadelay>
 800fdde:	8020      	strh	r0, [r4, #0]
 800fde0:	2500      	movs	r5, #0
 800fde2:	f001 bc3d 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fde6:	2c00      	cmp	r4, #0
 800fde8:	f001 8462 	beq.w	80116b0 <dwt_ioctl+0x1e60>
 800fdec:	8821      	ldrh	r1, [r4, #0]
 800fdee:	f7fd fe3a 	bl	800da66 <ull_settxantennadelay>
 800fdf2:	2500      	movs	r5, #0
 800fdf4:	f001 bc34 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fdf8:	2c00      	cmp	r4, #0
 800fdfa:	f001 845b 	beq.w	80116b4 <dwt_ioctl+0x1e64>
 800fdfe:	f7fd f9d5 	bl	800d1ac <ull_gettxantennadelay>
 800fe02:	8020      	strh	r0, [r4, #0]
 800fe04:	2500      	movs	r5, #0
 800fe06:	f001 bc2b 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fe0a:	2c00      	cmp	r4, #0
 800fe0c:	f001 8454 	beq.w	80116b8 <dwt_ioctl+0x1e68>
 800fe10:	88a3      	ldrh	r3, [r4, #4]
 800fe12:	88e2      	ldrh	r2, [r4, #6]
 800fe14:	6821      	ldr	r1, [r4, #0]
 800fe16:	9100      	str	r1, [sp, #0]
 800fe18:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800fe1c:	f7fd fe00 	bl	800da20 <dwt_writetodevice>
 800fe20:	2500      	movs	r5, #0
 800fe22:	f001 bc1d 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fe26:	2c00      	cmp	r4, #0
 800fe28:	f001 8448 	beq.w	80116bc <dwt_ioctl+0x1e6c>
 800fe2c:	88a3      	ldrh	r3, [r4, #4]
 800fe2e:	88e2      	ldrh	r2, [r4, #6]
 800fe30:	6821      	ldr	r1, [r4, #0]
 800fe32:	9100      	str	r1, [sp, #0]
 800fe34:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800fe38:	f7fd f97f 	bl	800d13a <dwt_readfromdevice>
 800fe3c:	2500      	movs	r5, #0
 800fe3e:	f001 bc0f 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fe42:	2c00      	cmp	r4, #0
 800fe44:	f001 843c 	beq.w	80116c0 <dwt_ioctl+0x1e70>
 800fe48:	88e3      	ldrh	r3, [r4, #6]
 800fe4a:	88a2      	ldrh	r2, [r4, #4]
 800fe4c:	6821      	ldr	r1, [r4, #0]
 800fe4e:	f7fe f80b 	bl	800de68 <ull_readrxdata>
 800fe52:	2500      	movs	r5, #0
 800fe54:	f001 bc04 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fe58:	2c00      	cmp	r4, #0
 800fe5a:	f001 8433 	beq.w	80116c4 <dwt_ioctl+0x1e74>
 800fe5e:	88e3      	ldrh	r3, [r4, #6]
 800fe60:	6822      	ldr	r2, [r4, #0]
 800fe62:	88a1      	ldrh	r1, [r4, #4]
 800fe64:	f7fe f990 	bl	800e188 <ull_writetxdata>
 800fe68:	2500      	movs	r5, #0
 800fe6a:	f001 bbf9 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fe6e:	4611      	mov	r1, r2
 800fe70:	f7ff fc56 	bl	800f720 <ull_rxenable>
 800fe74:	2500      	movs	r5, #0
 800fe76:	f001 bbf3 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fe7a:	2c00      	cmp	r4, #0
 800fe7c:	f001 8424 	beq.w	80116c8 <dwt_ioctl+0x1e78>
 800fe80:	7923      	ldrb	r3, [r4, #4]
 800fe82:	8862      	ldrh	r2, [r4, #2]
 800fe84:	8821      	ldrh	r1, [r4, #0]
 800fe86:	f7fe fc97 	bl	800e7b8 <ull_writetxfctrl>
 800fe8a:	2500      	movs	r5, #0
 800fe8c:	f001 bbe8 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fe90:	2c00      	cmp	r4, #0
 800fe92:	f001 841b 	beq.w	80116cc <dwt_ioctl+0x1e7c>
 800fe96:	f7fd f98f 	bl	800d1b8 <ull_readclockoffset>
 800fe9a:	8020      	strh	r0, [r4, #0]
 800fe9c:	2500      	movs	r5, #0
 800fe9e:	f001 bbdf 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fea2:	2c00      	cmp	r4, #0
 800fea4:	f001 8414 	beq.w	80116d0 <dwt_ioctl+0x1e80>
 800fea8:	f7fd f9b4 	bl	800d214 <ull_readcarrierintegrator>
 800feac:	6020      	str	r0, [r4, #0]
 800feae:	2500      	movs	r5, #0
 800feb0:	f001 bbd6 	b.w	8011660 <dwt_ioctl+0x1e10>
 800feb4:	f7fe f866 	bl	800df84 <ull_clearaonconfig>
 800feb8:	2500      	movs	r5, #0
 800feba:	f001 bbd1 	b.w	8011660 <dwt_ioctl+0x1e10>
 800febe:	2c00      	cmp	r4, #0
 800fec0:	f001 8408 	beq.w	80116d4 <dwt_ioctl+0x1e84>
 800fec4:	8861      	ldrh	r1, [r4, #2]
 800fec6:	f7fe fe53 	bl	800eb70 <ull_calcbandwidthadj>
 800feca:	7020      	strb	r0, [r4, #0]
 800fecc:	2500      	movs	r5, #0
 800fece:	f001 bbc7 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fed2:	4621      	mov	r1, r4
 800fed4:	f7fd f9be 	bl	800d254 <ull_readdiagnostics>
 800fed8:	2500      	movs	r5, #0
 800feda:	f001 bbc1 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fede:	2c00      	cmp	r4, #0
 800fee0:	f001 83fa 	beq.w	80116d8 <dwt_ioctl+0x1e88>
 800fee4:	2201      	movs	r2, #1
 800fee6:	2170      	movs	r1, #112	; 0x70
 800fee8:	f7fd f931 	bl	800d14e <dwt_read32bitoffsetreg>
 800feec:	6020      	str	r0, [r4, #0]
 800feee:	2500      	movs	r5, #0
 800fef0:	f001 bbb6 	b.w	8011660 <dwt_ioctl+0x1e10>
 800fef4:	2c00      	cmp	r4, #0
 800fef6:	f001 83f1 	beq.w	80116dc <dwt_ioctl+0x1e8c>
 800fefa:	2200      	movs	r2, #0
 800fefc:	2170      	movs	r1, #112	; 0x70
 800fefe:	f7fd f926 	bl	800d14e <dwt_read32bitoffsetreg>
 800ff02:	6020      	str	r0, [r4, #0]
 800ff04:	2500      	movs	r5, #0
 800ff06:	f001 bbab 	b.w	8011660 <dwt_ioctl+0x1e10>
 800ff0a:	9400      	str	r4, [sp, #0]
 800ff0c:	2305      	movs	r3, #5
 800ff0e:	2200      	movs	r2, #0
 800ff10:	2170      	movs	r1, #112	; 0x70
 800ff12:	f7fd f912 	bl	800d13a <dwt_readfromdevice>
 800ff16:	2500      	movs	r5, #0
 800ff18:	f001 bba2 	b.w	8011660 <dwt_ioctl+0x1e10>
 800ff1c:	2c00      	cmp	r4, #0
 800ff1e:	f001 83df 	beq.w	80116e0 <dwt_ioctl+0x1e90>
 800ff22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ff24:	7b9b      	ldrb	r3, [r3, #14]
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d015      	beq.n	800ff56 <dwt_ioctl+0x706>
 800ff2a:	2b03      	cmp	r3, #3
 800ff2c:	d11a      	bne.n	800ff64 <dwt_ioctl+0x714>
 800ff2e:	2216      	movs	r2, #22
 800ff30:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ff34:	f7fd f921 	bl	800d17a <dwt_read16bitoffsetreg>
 800ff38:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800ff3c:	b283      	uxth	r3, r0
 800ff3e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800ff42:	d004      	beq.n	800ff4e <dwt_ioctl+0x6fe>
 800ff44:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800ff48:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800ff4c:	b218      	sxth	r0, r3
 800ff4e:	8020      	strh	r0, [r4, #0]
 800ff50:	2500      	movs	r5, #0
 800ff52:	f001 bb85 	b.w	8011660 <dwt_ioctl+0x1e10>
 800ff56:	2202      	movs	r2, #2
 800ff58:	493b      	ldr	r1, [pc, #236]	; (8010048 <dwt_ioctl+0x7f8>)
 800ff5a:	f7fd f90e 	bl	800d17a <dwt_read16bitoffsetreg>
 800ff5e:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800ff62:	e7eb      	b.n	800ff3c <dwt_ioctl+0x6ec>
 800ff64:	2202      	movs	r2, #2
 800ff66:	4939      	ldr	r1, [pc, #228]	; (801004c <dwt_ioctl+0x7fc>)
 800ff68:	f7fd f907 	bl	800d17a <dwt_read16bitoffsetreg>
 800ff6c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800ff70:	e7e4      	b.n	800ff3c <dwt_ioctl+0x6ec>
 800ff72:	9400      	str	r4, [sp, #0]
 800ff74:	2306      	movs	r3, #6
 800ff76:	2200      	movs	r2, #0
 800ff78:	4935      	ldr	r1, [pc, #212]	; (8010050 <dwt_ioctl+0x800>)
 800ff7a:	f7fd f8de 	bl	800d13a <dwt_readfromdevice>
 800ff7e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	db06      	blt.n	800ff94 <dwt_ioctl+0x744>
 800ff86:	7963      	ldrb	r3, [r4, #5]
 800ff88:	f003 0301 	and.w	r3, r3, #1
 800ff8c:	7163      	strb	r3, [r4, #5]
 800ff8e:	2500      	movs	r5, #0
 800ff90:	f001 bb66 	b.w	8011660 <dwt_ioctl+0x1e10>
 800ff94:	23ff      	movs	r3, #255	; 0xff
 800ff96:	70a3      	strb	r3, [r4, #2]
 800ff98:	70e3      	strb	r3, [r4, #3]
 800ff9a:	7123      	strb	r3, [r4, #4]
 800ff9c:	7163      	strb	r3, [r4, #5]
 800ff9e:	e7f2      	b.n	800ff86 <dwt_ioctl+0x736>
 800ffa0:	2c00      	cmp	r4, #0
 800ffa2:	f001 839f 	beq.w	80116e4 <dwt_ioctl+0x1e94>
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800ffac:	f7fd f924 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800ffb0:	7020      	strb	r0, [r4, #0]
 800ffb2:	2500      	movs	r5, #0
 800ffb4:	f001 bb54 	b.w	8011660 <dwt_ioctl+0x1e10>
 800ffb8:	2c00      	cmp	r4, #0
 800ffba:	f001 8395 	beq.w	80116e8 <dwt_ioctl+0x1e98>
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800ffc4:	f7fd f918 	bl	800d1f8 <dwt_read8bitoffsetreg>
 800ffc8:	7020      	strb	r0, [r4, #0]
 800ffca:	2500      	movs	r5, #0
 800ffcc:	f001 bb48 	b.w	8011660 <dwt_ioctl+0x1e10>
 800ffd0:	2c00      	cmp	r4, #0
 800ffd2:	f001 838b 	beq.w	80116ec <dwt_ioctl+0x1e9c>
 800ffd6:	88a2      	ldrh	r2, [r4, #4]
 800ffd8:	6821      	ldr	r1, [r4, #0]
 800ffda:	f7fe fb17 	bl	800e60c <_dwt_otpprogword32>
 800ffde:	2500      	movs	r5, #0
 800ffe0:	f001 bb3e 	b.w	8011660 <dwt_ioctl+0x1e10>
 800ffe4:	2c00      	cmp	r4, #0
 800ffe6:	f001 8383 	beq.w	80116f0 <dwt_ioctl+0x1ea0>
 800ffea:	6825      	ldr	r5, [r4, #0]
 800ffec:	88a4      	ldrh	r4, [r4, #4]
 800ffee:	4622      	mov	r2, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	f7fe fb0b 	bl	800e60c <_dwt_otpprogword32>
 800fff6:	4621      	mov	r1, r4
 800fff8:	4630      	mov	r0, r6
 800fffa:	f7fd fd65 	bl	800dac8 <_dwt_otpread>
 800fffe:	1a2d      	subs	r5, r5, r0
 8010000:	bf18      	it	ne
 8010002:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8010006:	f001 bb2b 	b.w	8011660 <dwt_ioctl+0x1e10>
 801000a:	2a02      	cmp	r2, #2
 801000c:	d00f      	beq.n	801002e <dwt_ioctl+0x7de>
 801000e:	4c11      	ldr	r4, [pc, #68]	; (8010054 <dwt_ioctl+0x804>)
 8010010:	2300      	movs	r3, #0
 8010012:	461a      	mov	r2, r3
 8010014:	4621      	mov	r1, r4
 8010016:	4630      	mov	r0, r6
 8010018:	f7fd ff5c 	bl	800ded4 <dwt_write8bitoffsetreg>
 801001c:	2302      	movs	r3, #2
 801001e:	2200      	movs	r2, #0
 8010020:	4621      	mov	r1, r4
 8010022:	4630      	mov	r0, r6
 8010024:	f7fd ff56 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010028:	2500      	movs	r5, #0
 801002a:	f001 bb19 	b.w	8011660 <dwt_ioctl+0x1e10>
 801002e:	2300      	movs	r3, #0
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	23fe      	movs	r3, #254	; 0xfe
 8010034:	2201      	movs	r2, #1
 8010036:	4902      	ldr	r1, [pc, #8]	; (8010040 <dwt_ioctl+0x7f0>)
 8010038:	f7fe fbde 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 801003c:	e7e7      	b.n	801000e <dwt_ioctl+0x7be>
 801003e:	bf00      	nop
 8010040:	00110008 	.word	0x00110008
 8010044:	0007001c 	.word	0x0007001c
 8010048:	00180014 	.word	0x00180014
 801004c:	000c001c 	.word	0x000c001c
 8010050:	000c0018 	.word	0x000c0018
 8010054:	000a0004 	.word	0x000a0004
 8010058:	2c00      	cmp	r4, #0
 801005a:	f001 834b 	beq.w	80116f4 <dwt_ioctl+0x1ea4>
 801005e:	8824      	ldrh	r4, [r4, #0]
 8010060:	b2e2      	uxtb	r2, r4
 8010062:	f44f 7181 	mov.w	r1, #258	; 0x102
 8010066:	f7fd ffe1 	bl	800e02c <ull_aon_write>
 801006a:	0a22      	lsrs	r2, r4, #8
 801006c:	f240 1103 	movw	r1, #259	; 0x103
 8010070:	4630      	mov	r0, r6
 8010072:	f7fd ffdb 	bl	800e02c <ull_aon_write>
 8010076:	2500      	movs	r5, #0
 8010078:	f001 baf2 	b.w	8011660 <dwt_ioctl+0x1e10>
 801007c:	2c00      	cmp	r4, #0
 801007e:	f001 833b 	beq.w	80116f8 <dwt_ioctl+0x1ea8>
 8010082:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80103f4 <dwt_ioctl+0xba4>
 8010086:	2310      	movs	r3, #16
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	23ff      	movs	r3, #255	; 0xff
 801008c:	2200      	movs	r2, #0
 801008e:	4641      	mov	r1, r8
 8010090:	f7fe fbb2 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8010094:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010098:	4630      	mov	r0, r6
 801009a:	f7fd ffa7 	bl	800dfec <ull_aon_read>
 801009e:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80100a2:	462a      	mov	r2, r5
 80100a4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7fd ffbf 	bl	800e02c <ull_aon_write>
 80100ae:	f045 0204 	orr.w	r2, r5, #4
 80100b2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7fd ffb8 	bl	800e02c <ull_aon_write>
 80100bc:	2002      	movs	r0, #2
 80100be:	f7f0 fbc5 	bl	800084c <deca_sleep>
 80100c2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80100c6:	4630      	mov	r0, r6
 80100c8:	f7fd ff90 	bl	800dfec <ull_aon_read>
 80100cc:	4607      	mov	r7, r0
 80100ce:	f240 110f 	movw	r1, #271	; 0x10f
 80100d2:	4630      	mov	r0, r6
 80100d4:	f7fd ff8a 	bl	800dfec <ull_aon_read>
 80100d8:	4681      	mov	r9, r0
 80100da:	462a      	mov	r2, r5
 80100dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100e0:	4630      	mov	r0, r6
 80100e2:	f7fd ffa3 	bl	800e02c <ull_aon_write>
 80100e6:	2500      	movs	r5, #0
 80100e8:	9500      	str	r5, [sp, #0]
 80100ea:	23ef      	movs	r3, #239	; 0xef
 80100ec:	462a      	mov	r2, r5
 80100ee:	4641      	mov	r1, r8
 80100f0:	4630      	mov	r0, r6
 80100f2:	f7fe fb81 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80100f6:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80100fa:	8027      	strh	r7, [r4, #0]
 80100fc:	f001 bab0 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010100:	2c00      	cmp	r4, #0
 8010102:	f001 82fb 	beq.w	80116fc <dwt_ioctl+0x1eac>
 8010106:	78a2      	ldrb	r2, [r4, #2]
 8010108:	8821      	ldrh	r1, [r4, #0]
 801010a:	f7fd ffb7 	bl	800e07c <ull_configuresleep>
 801010e:	2500      	movs	r5, #0
 8010110:	f001 baa6 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010114:	2c00      	cmp	r4, #0
 8010116:	f001 82f3 	beq.w	8011700 <dwt_ioctl+0x1eb0>
 801011a:	6824      	ldr	r4, [r4, #0]
 801011c:	f7fd ff32 	bl	800df84 <ull_clearaonconfig>
 8010120:	2001      	movs	r0, #1
 8010122:	f7f0 fb93 	bl	800084c <deca_sleep>
 8010126:	2303      	movs	r3, #3
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	23ff      	movs	r3, #255	; 0xff
 801012c:	2200      	movs	r2, #0
 801012e:	49af      	ldr	r1, [pc, #700]	; (80103ec <dwt_ioctl+0xb9c>)
 8010130:	4630      	mov	r0, r6
 8010132:	f7fe fb61 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8010136:	b97c      	cbnz	r4, 8010158 <dwt_ioctl+0x908>
 8010138:	4630      	mov	r0, r6
 801013a:	f7ff fb61 	bl	800f800 <ull_softreset_no_sema_fcmd>
 801013e:	2001      	movs	r0, #1
 8010140:	f7f0 fb84 	bl	800084c <deca_sleep>
 8010144:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010146:	2500      	movs	r5, #0
 8010148:	739d      	strb	r5, [r3, #14]
 801014a:	2202      	movs	r2, #2
 801014c:	821a      	strh	r2, [r3, #16]
 801014e:	751d      	strb	r5, [r3, #20]
 8010150:	755d      	strb	r5, [r3, #21]
 8010152:	73dd      	strb	r5, [r3, #15]
 8010154:	f001 ba84 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010158:	4630      	mov	r0, r6
 801015a:	f7ff fb65 	bl	800f828 <ull_softreset_fcmd>
 801015e:	e7ee      	b.n	801013e <dwt_ioctl+0x8ee>
 8010160:	2c00      	cmp	r4, #0
 8010162:	f001 82cf 	beq.w	8011704 <dwt_ioctl+0x1eb4>
 8010166:	7823      	ldrb	r3, [r4, #0]
 8010168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801016c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801016e:	7353      	strb	r3, [r2, #13]
 8010170:	2200      	movs	r2, #0
 8010172:	499f      	ldr	r1, [pc, #636]	; (80103f0 <dwt_ioctl+0xba0>)
 8010174:	f7fd feae 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010178:	2500      	movs	r5, #0
 801017a:	f001 ba71 	b.w	8011660 <dwt_ioctl+0x1e10>
 801017e:	2c00      	cmp	r4, #0
 8010180:	f001 82c2 	beq.w	8011708 <dwt_ioctl+0x1eb8>
 8010184:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010186:	7b5b      	ldrb	r3, [r3, #13]
 8010188:	7023      	strb	r3, [r4, #0]
 801018a:	2500      	movs	r5, #0
 801018c:	f001 ba68 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010190:	2101      	movs	r1, #1
 8010192:	f7fe f9f5 	bl	800e580 <ull_enable_rf_tx>
 8010196:	4630      	mov	r0, r6
 8010198:	f7fe fa26 	bl	800e5e8 <ull_enable_rftx_blocks>
 801019c:	2101      	movs	r1, #1
 801019e:	4630      	mov	r0, r6
 80101a0:	f7fd fc68 	bl	800da74 <ull_force_clocks>
 80101a4:	220f      	movs	r2, #15
 80101a6:	2101      	movs	r1, #1
 80101a8:	4630      	mov	r0, r6
 80101aa:	f7fd fe39 	bl	800de20 <ull_repeated_cw>
 80101ae:	2500      	movs	r5, #0
 80101b0:	f001 ba56 	b.w	8011660 <dwt_ioctl+0x1e10>
 80101b4:	2c00      	cmp	r4, #0
 80101b6:	f001 82a9 	beq.w	801170c <dwt_ioctl+0x1ebc>
 80101ba:	6862      	ldr	r2, [r4, #4]
 80101bc:	6821      	ldr	r1, [r4, #0]
 80101be:	f7fd fe2f 	bl	800de20 <ull_repeated_cw>
 80101c2:	2500      	movs	r5, #0
 80101c4:	f001 ba4c 	b.w	8011660 <dwt_ioctl+0x1e10>
 80101c8:	2c00      	cmp	r4, #0
 80101ca:	f001 82a1 	beq.w	8011710 <dwt_ioctl+0x1ec0>
 80101ce:	4d89      	ldr	r5, [pc, #548]	; (80103f4 <dwt_ioctl+0xba4>)
 80101d0:	2200      	movs	r2, #0
 80101d2:	4629      	mov	r1, r5
 80101d4:	f7fd f810 	bl	800d1f8 <dwt_read8bitoffsetreg>
 80101d8:	4680      	mov	r8, r0
 80101da:	2302      	movs	r3, #2
 80101dc:	9300      	str	r3, [sp, #0]
 80101de:	23ff      	movs	r3, #255	; 0xff
 80101e0:	2200      	movs	r2, #0
 80101e2:	4629      	mov	r1, r5
 80101e4:	4630      	mov	r0, r6
 80101e6:	f7fe fb07 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80101ea:	2304      	movs	r3, #4
 80101ec:	2200      	movs	r2, #0
 80101ee:	4982      	ldr	r1, [pc, #520]	; (80103f8 <dwt_ioctl+0xba8>)
 80101f0:	4630      	mov	r0, r6
 80101f2:	f7fd fe6f 	bl	800ded4 <dwt_write8bitoffsetreg>
 80101f6:	2301      	movs	r3, #1
 80101f8:	2200      	movs	r2, #0
 80101fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80101fe:	4630      	mov	r0, r6
 8010200:	f7fd fe68 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010204:	4f7d      	ldr	r7, [pc, #500]	; (80103fc <dwt_ioctl+0xbac>)
 8010206:	2500      	movs	r5, #0
 8010208:	462a      	mov	r2, r5
 801020a:	4639      	mov	r1, r7
 801020c:	4630      	mov	r0, r6
 801020e:	f7fc fff3 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010212:	f010 0f01 	tst.w	r0, #1
 8010216:	d0f7      	beq.n	8010208 <dwt_ioctl+0x9b8>
 8010218:	2200      	movs	r2, #0
 801021a:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801021e:	4630      	mov	r0, r6
 8010220:	f7fc ffab 	bl	800d17a <dwt_read16bitoffsetreg>
 8010224:	4605      	mov	r5, r0
 8010226:	2300      	movs	r3, #0
 8010228:	461a      	mov	r2, r3
 801022a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801022e:	4630      	mov	r0, r6
 8010230:	f7fd fe50 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010234:	2300      	movs	r3, #0
 8010236:	461a      	mov	r2, r3
 8010238:	496f      	ldr	r1, [pc, #444]	; (80103f8 <dwt_ioctl+0xba8>)
 801023a:	4630      	mov	r0, r6
 801023c:	f7fd fe4a 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010240:	4643      	mov	r3, r8
 8010242:	2200      	movs	r2, #0
 8010244:	496b      	ldr	r1, [pc, #428]	; (80103f4 <dwt_ioctl+0xba4>)
 8010246:	4630      	mov	r0, r6
 8010248:	f7fd fe44 	bl	800ded4 <dwt_write8bitoffsetreg>
 801024c:	8025      	strh	r5, [r4, #0]
 801024e:	2500      	movs	r5, #0
 8010250:	f001 ba06 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010254:	2c00      	cmp	r4, #0
 8010256:	f001 825d 	beq.w	8011714 <dwt_ioctl+0x1ec4>
 801025a:	7923      	ldrb	r3, [r4, #4]
 801025c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801025e:	7a92      	ldrb	r2, [r2, #10]
 8010260:	1a9b      	subs	r3, r3, r2
 8010262:	ee07 3a90 	vmov	s15, r3
 8010266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801026a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8010400 <dwt_ioctl+0xbb0>
 801026e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010272:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8010276:	ee77 7a87 	vadd.f32	s15, s15, s14
 801027a:	edc4 7a00 	vstr	s15, [r4]
 801027e:	2500      	movs	r5, #0
 8010280:	f001 b9ee 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010284:	2c00      	cmp	r4, #0
 8010286:	f001 8247 	beq.w	8011718 <dwt_ioctl+0x1ec8>
 801028a:	7923      	ldrb	r3, [r4, #4]
 801028c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801028e:	7a52      	ldrb	r2, [r2, #9]
 8010290:	1a9b      	subs	r3, r3, r2
 8010292:	ee07 3a90 	vmov	s15, r3
 8010296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801029a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8010404 <dwt_ioctl+0xbb4>
 801029e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102a2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80102a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102aa:	eddf 6a57 	vldr	s13, [pc, #348]	; 8010408 <dwt_ioctl+0xbb8>
 80102ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80102b2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80102b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102ba:	edc4 7a00 	vstr	s15, [r4]
 80102be:	2500      	movs	r5, #0
 80102c0:	f001 b9ce 	b.w	8011660 <dwt_ioctl+0x1e10>
 80102c4:	2c00      	cmp	r4, #0
 80102c6:	f001 8229 	beq.w	801171c <dwt_ioctl+0x1ecc>
 80102ca:	6824      	ldr	r4, [r4, #0]
 80102cc:	2101      	movs	r1, #1
 80102ce:	f7fe f957 	bl	800e580 <ull_enable_rf_tx>
 80102d2:	4630      	mov	r0, r6
 80102d4:	f7fe f988 	bl	800e5e8 <ull_enable_rftx_blocks>
 80102d8:	2101      	movs	r1, #1
 80102da:	4630      	mov	r0, r6
 80102dc:	f7fd fbca 	bl	800da74 <ull_force_clocks>
 80102e0:	4621      	mov	r1, r4
 80102e2:	4630      	mov	r0, r6
 80102e4:	f7fe fca0 	bl	800ec28 <ull_repeated_frames>
 80102e8:	2500      	movs	r5, #0
 80102ea:	f001 b9b9 	b.w	8011660 <dwt_ioctl+0x1e10>
 80102ee:	2500      	movs	r5, #0
 80102f0:	9500      	str	r5, [sp, #0]
 80102f2:	23ef      	movs	r3, #239	; 0xef
 80102f4:	462a      	mov	r2, r5
 80102f6:	4945      	ldr	r1, [pc, #276]	; (801040c <dwt_ioctl+0xbbc>)
 80102f8:	f7fe fa7e 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80102fc:	2105      	movs	r1, #5
 80102fe:	4630      	mov	r0, r6
 8010300:	f7fd fbb8 	bl	800da74 <ull_force_clocks>
 8010304:	2101      	movs	r1, #1
 8010306:	4630      	mov	r0, r6
 8010308:	f7fd fd6c 	bl	800dde4 <ull_disable_rf_tx>
 801030c:	4630      	mov	r0, r6
 801030e:	f7fd fd5f 	bl	800ddd0 <ull_disable_rftx_blocks>
 8010312:	f001 b9a5 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010316:	2500      	movs	r5, #0
 8010318:	9500      	str	r5, [sp, #0]
 801031a:	23ef      	movs	r3, #239	; 0xef
 801031c:	462a      	mov	r2, r5
 801031e:	493b      	ldr	r1, [pc, #236]	; (801040c <dwt_ioctl+0xbbc>)
 8010320:	f7fe fa6a 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8010324:	f001 b99c 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010328:	2c00      	cmp	r4, #0
 801032a:	f001 81f9 	beq.w	8011720 <dwt_ioctl+0x1ed0>
 801032e:	6821      	ldr	r1, [r4, #0]
 8010330:	f7fe fc7a 	bl	800ec28 <ull_repeated_frames>
 8010334:	2500      	movs	r5, #0
 8010336:	f001 b993 	b.w	8011660 <dwt_ioctl+0x1e10>
 801033a:	2200      	movs	r2, #0
 801033c:	4934      	ldr	r1, [pc, #208]	; (8010410 <dwt_ioctl+0xbc0>)
 801033e:	f7fc ff1c 	bl	800d17a <dwt_read16bitoffsetreg>
 8010342:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8010346:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801034a:	bf18      	it	ne
 801034c:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8010350:	b22d      	sxth	r5, r5
 8010352:	8025      	strh	r5, [r4, #0]
 8010354:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010356:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801035a:	1aed      	subs	r5, r5, r3
 801035c:	f001 b980 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010360:	2c00      	cmp	r4, #0
 8010362:	f001 81df 	beq.w	8011724 <dwt_ioctl+0x1ed4>
 8010366:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801036a:	7a23      	ldrb	r3, [r4, #8]
 801036c:	f899 2013 	ldrb.w	r2, [r9, #19]
 8010370:	2aff      	cmp	r2, #255	; 0xff
 8010372:	f000 80fe 	beq.w	8010572 <dwt_ioctl+0xd22>
 8010376:	bb93      	cbnz	r3, 80103de <dwt_ioctl+0xb8e>
 8010378:	f8d9 1000 	ldr.w	r1, [r9]
 801037c:	f7fd feb8 	bl	800e0f0 <ull_update_nonce_GCM>
 8010380:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010384:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8010388:	18d1      	adds	r1, r2, r3
 801038a:	f899 2012 	ldrb.w	r2, [r9, #18]
 801038e:	2a00      	cmp	r2, #0
 8010390:	d140      	bne.n	8010414 <dwt_ioctl+0xbc4>
 8010392:	f899 0010 	ldrb.w	r0, [r9, #16]
 8010396:	2800      	cmp	r0, #0
 8010398:	bf0b      	itete	eq
 801039a:	227f      	moveq	r2, #127	; 0x7f
 801039c:	f44f 6280 	movne.w	r2, #1024	; 0x400
 80103a0:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 80103a4:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 80103a8:	f899 0013 	ldrb.w	r0, [r9, #19]
 80103ac:	1a12      	subs	r2, r2, r0
 80103ae:	3a02      	subs	r2, #2
 80103b0:	4291      	cmp	r1, r2
 80103b2:	f200 80e7 	bhi.w	8010584 <dwt_ioctl+0xd34>
 80103b6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80103ba:	9200      	str	r2, [sp, #0]
 80103bc:	2200      	movs	r2, #0
 80103be:	4629      	mov	r1, r5
 80103c0:	4630      	mov	r0, r6
 80103c2:	f7fd fb2d 	bl	800da20 <dwt_writetodevice>
 80103c6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80103ca:	f899 200c 	ldrb.w	r2, [r9, #12]
 80103ce:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80103d2:	9100      	str	r1, [sp, #0]
 80103d4:	4629      	mov	r1, r5
 80103d6:	4630      	mov	r0, r6
 80103d8:	f7fd fb22 	bl	800da20 <dwt_writetodevice>
 80103dc:	e02b      	b.n	8010436 <dwt_ioctl+0xbe6>
 80103de:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80103e2:	f8d9 1000 	ldr.w	r1, [r9]
 80103e6:	f7fd fe91 	bl	800e10c <ull_update_nonce_CCM>
 80103ea:	e7c9      	b.n	8010380 <dwt_ioctl+0xb30>
 80103ec:	00110004 	.word	0x00110004
 80103f0:	00090014 	.word	0x00090014
 80103f4:	00070048 	.word	0x00070048
 80103f8:	00070034 	.word	0x00070034
 80103fc:	00080004 	.word	0x00080004
 8010400:	3f866666 	.word	0x3f866666
 8010404:	3ecccccd 	.word	0x3ecccccd
 8010408:	437f0000 	.word	0x437f0000
 801040c:	000f0028 	.word	0x000f0028
 8010410:	00020008 	.word	0x00020008
 8010414:	2a01      	cmp	r2, #1
 8010416:	f040 80af 	bne.w	8010578 <dwt_ioctl+0xd28>
 801041a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801041e:	2b00      	cmp	r3, #0
 8010420:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8010424:	bf08      	it	eq
 8010426:	237f      	moveq	r3, #127	; 0x7f
 8010428:	f899 2013 	ldrb.w	r2, [r9, #19]
 801042c:	1a9b      	subs	r3, r3, r2
 801042e:	3b02      	subs	r3, #2
 8010430:	4299      	cmp	r1, r3
 8010432:	f200 80a4 	bhi.w	801057e <dwt_ioctl+0xd2e>
 8010436:	f899 2010 	ldrb.w	r2, [r9, #16]
 801043a:	1e53      	subs	r3, r2, #1
 801043c:	b2db      	uxtb	r3, r3
 801043e:	2b01      	cmp	r3, #1
 8010440:	d940      	bls.n	80104c4 <dwt_ioctl+0xc74>
 8010442:	f899 3011 	ldrb.w	r3, [r9, #17]
 8010446:	1e59      	subs	r1, r3, #1
 8010448:	b2c9      	uxtb	r1, r1
 801044a:	2901      	cmp	r1, #1
 801044c:	d947      	bls.n	80104de <dwt_ioctl+0xc8e>
 801044e:	2b04      	cmp	r3, #4
 8010450:	d04c      	beq.n	80104ec <dwt_ioctl+0xc9c>
 8010452:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8010456:	2200      	movs	r2, #0
 8010458:	49ba      	ldr	r1, [pc, #744]	; (8010744 <dwt_ioctl+0xef4>)
 801045a:	4630      	mov	r0, r6
 801045c:	f7fd fb56 	bl	800db0c <dwt_write32bitoffsetreg>
 8010460:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8010464:	4ab8      	ldr	r2, [pc, #736]	; (8010748 <dwt_ioctl+0xef8>)
 8010466:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 801046a:	f899 300c 	ldrb.w	r3, [r9, #12]
 801046e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010472:	4313      	orrs	r3, r2
 8010474:	2200      	movs	r2, #0
 8010476:	49b5      	ldr	r1, [pc, #724]	; (801074c <dwt_ioctl+0xefc>)
 8010478:	4630      	mov	r0, r6
 801047a:	f7fd fb47 	bl	800db0c <dwt_write32bitoffsetreg>
 801047e:	2301      	movs	r3, #1
 8010480:	2200      	movs	r2, #0
 8010482:	49b3      	ldr	r1, [pc, #716]	; (8010750 <dwt_ioctl+0xf00>)
 8010484:	4630      	mov	r0, r6
 8010486:	f7fd fd25 	bl	800ded4 <dwt_write8bitoffsetreg>
 801048a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8010754 <dwt_ioctl+0xf04>
 801048e:	2700      	movs	r7, #0
 8010490:	463a      	mov	r2, r7
 8010492:	4641      	mov	r1, r8
 8010494:	4630      	mov	r0, r6
 8010496:	f7fc feaf 	bl	800d1f8 <dwt_read8bitoffsetreg>
 801049a:	f010 0f05 	tst.w	r0, #5
 801049e:	d0f7      	beq.n	8010490 <dwt_ioctl+0xc40>
 80104a0:	4605      	mov	r5, r0
 80104a2:	4603      	mov	r3, r0
 80104a4:	2200      	movs	r2, #0
 80104a6:	49ab      	ldr	r1, [pc, #684]	; (8010754 <dwt_ioctl+0xf04>)
 80104a8:	4630      	mov	r0, r6
 80104aa:	f7fd fd13 	bl	800ded4 <dwt_write8bitoffsetreg>
 80104ae:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80104b2:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d025      	beq.n	8010506 <dwt_ioctl+0xcb6>
 80104ba:	b26b      	sxtb	r3, r5
 80104bc:	7023      	strb	r3, [r4, #0]
 80104be:	2500      	movs	r5, #0
 80104c0:	f001 b8ce 	b.w	8011660 <dwt_ioctl+0x1e10>
 80104c4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80104c6:	7b9b      	ldrb	r3, [r3, #14]
 80104c8:	2b03      	cmp	r3, #3
 80104ca:	f001 81af 	beq.w	801182c <dwt_ioctl+0x1fdc>
 80104ce:	f899 3011 	ldrb.w	r3, [r9, #17]
 80104d2:	1e5a      	subs	r2, r3, #1
 80104d4:	b2d2      	uxtb	r2, r2
 80104d6:	2a01      	cmp	r2, #1
 80104d8:	d912      	bls.n	8010500 <dwt_ioctl+0xcb0>
 80104da:	2201      	movs	r2, #1
 80104dc:	e7b7      	b.n	801044e <dwt_ioctl+0xbfe>
 80104de:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80104e0:	7b9b      	ldrb	r3, [r3, #14]
 80104e2:	2b03      	cmp	r3, #3
 80104e4:	bf0c      	ite	eq
 80104e6:	2302      	moveq	r3, #2
 80104e8:	2301      	movne	r3, #1
 80104ea:	e7b2      	b.n	8010452 <dwt_ioctl+0xc02>
 80104ec:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80104f0:	2910      	cmp	r1, #16
 80104f2:	d9ae      	bls.n	8010452 <dwt_ioctl+0xc02>
 80104f4:	f06f 0303 	mvn.w	r3, #3
 80104f8:	e7e0      	b.n	80104bc <dwt_ioctl+0xc6c>
 80104fa:	2202      	movs	r2, #2
 80104fc:	4613      	mov	r3, r2
 80104fe:	e7a8      	b.n	8010452 <dwt_ioctl+0xc02>
 8010500:	2201      	movs	r2, #1
 8010502:	4613      	mov	r3, r2
 8010504:	e7a5      	b.n	8010452 <dwt_ioctl+0xc02>
 8010506:	f899 3012 	ldrb.w	r3, [r9, #18]
 801050a:	2b01      	cmp	r3, #1
 801050c:	d1d5      	bne.n	80104ba <dwt_ioctl+0xc6a>
 801050e:	f899 2011 	ldrb.w	r2, [r9, #17]
 8010512:	1e53      	subs	r3, r2, #1
 8010514:	b2db      	uxtb	r3, r3
 8010516:	2b01      	cmp	r3, #1
 8010518:	d91b      	bls.n	8010552 <dwt_ioctl+0xd02>
 801051a:	2a03      	cmp	r2, #3
 801051c:	bf0c      	ite	eq
 801051e:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8010522:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8010526:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801052a:	b112      	cbz	r2, 8010532 <dwt_ioctl+0xce2>
 801052c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010530:	b9c3      	cbnz	r3, 8010564 <dwt_ioctl+0xd14>
 8010532:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8010536:	2900      	cmp	r1, #0
 8010538:	d0bf      	beq.n	80104ba <dwt_ioctl+0xc6a>
 801053a:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d0bb      	beq.n	80104ba <dwt_ioctl+0xc6a>
 8010542:	f899 200c 	ldrb.w	r2, [r9, #12]
 8010546:	9100      	str	r1, [sp, #0]
 8010548:	4639      	mov	r1, r7
 801054a:	4630      	mov	r0, r6
 801054c:	f7fc fdf5 	bl	800d13a <dwt_readfromdevice>
 8010550:	e7b3      	b.n	80104ba <dwt_ioctl+0xc6a>
 8010552:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010554:	7b9b      	ldrb	r3, [r3, #14]
 8010556:	2b03      	cmp	r3, #3
 8010558:	bf0c      	ite	eq
 801055a:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 801055e:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8010562:	e7e0      	b.n	8010526 <dwt_ioctl+0xcd6>
 8010564:	9200      	str	r2, [sp, #0]
 8010566:	2200      	movs	r2, #0
 8010568:	4639      	mov	r1, r7
 801056a:	4630      	mov	r0, r6
 801056c:	f7fc fde5 	bl	800d13a <dwt_readfromdevice>
 8010570:	e7df      	b.n	8010532 <dwt_ioctl+0xce2>
 8010572:	f06f 0302 	mvn.w	r3, #2
 8010576:	e7a1      	b.n	80104bc <dwt_ioctl+0xc6c>
 8010578:	f06f 0301 	mvn.w	r3, #1
 801057c:	e79e      	b.n	80104bc <dwt_ioctl+0xc6c>
 801057e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010582:	e79b      	b.n	80104bc <dwt_ioctl+0xc6c>
 8010584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010588:	e798      	b.n	80104bc <dwt_ioctl+0xc6c>
 801058a:	7a23      	ldrb	r3, [r4, #8]
 801058c:	79e1      	ldrb	r1, [r4, #7]
 801058e:	79a2      	ldrb	r2, [r4, #6]
 8010590:	00d2      	lsls	r2, r2, #3
 8010592:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8010596:	4313      	orrs	r3, r2
 8010598:	7962      	ldrb	r2, [r4, #5]
 801059a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801059e:	7922      	ldrb	r2, [r4, #4]
 80105a0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80105a4:	78e2      	ldrb	r2, [r4, #3]
 80105a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80105aa:	78a2      	ldrb	r2, [r4, #2]
 80105ac:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80105b0:	7862      	ldrb	r2, [r4, #1]
 80105b2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80105b6:	7822      	ldrb	r2, [r4, #0]
 80105b8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80105bc:	b29b      	uxth	r3, r3
 80105be:	2200      	movs	r2, #0
 80105c0:	4965      	ldr	r1, [pc, #404]	; (8010758 <dwt_ioctl+0xf08>)
 80105c2:	f7fd fa38 	bl	800da36 <dwt_write16bitoffsetreg>
 80105c6:	2500      	movs	r5, #0
 80105c8:	f001 b84a 	b.w	8011660 <dwt_ioctl+0x1e10>
 80105cc:	2c00      	cmp	r4, #0
 80105ce:	f001 80ab 	beq.w	8011728 <dwt_ioctl+0x1ed8>
 80105d2:	7863      	ldrb	r3, [r4, #1]
 80105d4:	b133      	cbz	r3, 80105e4 <dwt_ioctl+0xd94>
 80105d6:	085b      	lsrs	r3, r3, #1
 80105d8:	3b01      	subs	r3, #1
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	7023      	strb	r3, [r4, #0]
 80105de:	2500      	movs	r5, #0
 80105e0:	f001 b83e 	b.w	8011660 <dwt_ioctl+0x1e10>
 80105e4:	2300      	movs	r3, #0
 80105e6:	e7f9      	b.n	80105dc <dwt_ioctl+0xd8c>
 80105e8:	2200      	movs	r2, #0
 80105ea:	495c      	ldr	r1, [pc, #368]	; (801075c <dwt_ioctl+0xf0c>)
 80105ec:	f7fc fdaf 	bl	800d14e <dwt_read32bitoffsetreg>
 80105f0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80105f4:	8023      	strh	r3, [r4, #0]
 80105f6:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80105fa:	8060      	strh	r0, [r4, #2]
 80105fc:	2200      	movs	r2, #0
 80105fe:	4958      	ldr	r1, [pc, #352]	; (8010760 <dwt_ioctl+0xf10>)
 8010600:	4630      	mov	r0, r6
 8010602:	f7fc fda4 	bl	800d14e <dwt_read32bitoffsetreg>
 8010606:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801060a:	80a3      	strh	r3, [r4, #4]
 801060c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8010610:	80e0      	strh	r0, [r4, #6]
 8010612:	2200      	movs	r2, #0
 8010614:	4953      	ldr	r1, [pc, #332]	; (8010764 <dwt_ioctl+0xf14>)
 8010616:	4630      	mov	r0, r6
 8010618:	f7fc fd99 	bl	800d14e <dwt_read32bitoffsetreg>
 801061c:	7220      	strb	r0, [r4, #8]
 801061e:	0c00      	lsrs	r0, r0, #16
 8010620:	7260      	strb	r0, [r4, #9]
 8010622:	2200      	movs	r2, #0
 8010624:	4950      	ldr	r1, [pc, #320]	; (8010768 <dwt_ioctl+0xf18>)
 8010626:	4630      	mov	r0, r6
 8010628:	f7fc fd91 	bl	800d14e <dwt_read32bitoffsetreg>
 801062c:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8010630:	81a3      	strh	r3, [r4, #12]
 8010632:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8010636:	8160      	strh	r0, [r4, #10]
 8010638:	2200      	movs	r2, #0
 801063a:	494c      	ldr	r1, [pc, #304]	; (801076c <dwt_ioctl+0xf1c>)
 801063c:	4630      	mov	r0, r6
 801063e:	f7fc fd86 	bl	800d14e <dwt_read32bitoffsetreg>
 8010642:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8010646:	f8a4 300f 	strh.w	r3, [r4, #15]
 801064a:	73a0      	strb	r0, [r4, #14]
 801064c:	2200      	movs	r2, #0
 801064e:	4948      	ldr	r1, [pc, #288]	; (8010770 <dwt_ioctl+0xf20>)
 8010650:	4630      	mov	r0, r6
 8010652:	f7fc fd7c 	bl	800d14e <dwt_read32bitoffsetreg>
 8010656:	7460      	strb	r0, [r4, #17]
 8010658:	0c00      	lsrs	r0, r0, #16
 801065a:	74a0      	strb	r0, [r4, #18]
 801065c:	2200      	movs	r2, #0
 801065e:	4945      	ldr	r1, [pc, #276]	; (8010774 <dwt_ioctl+0xf24>)
 8010660:	4630      	mov	r0, r6
 8010662:	f7fc fd74 	bl	800d14e <dwt_read32bitoffsetreg>
 8010666:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801066a:	f8a4 3013 	strh.w	r3, [r4, #19]
 801066e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8010672:	f8a4 0015 	strh.w	r0, [r4, #21]
 8010676:	2200      	movs	r2, #0
 8010678:	493f      	ldr	r1, [pc, #252]	; (8010778 <dwt_ioctl+0xf28>)
 801067a:	4630      	mov	r0, r6
 801067c:	f7fc fdbc 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010680:	75e0      	strb	r0, [r4, #23]
 8010682:	2500      	movs	r5, #0
 8010684:	f000 bfec 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010688:	4611      	mov	r1, r2
 801068a:	f7fd fc9b 	bl	800dfc4 <ull_configeventcounters>
 801068e:	2500      	movs	r5, #0
 8010690:	f000 bfe6 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010694:	2c00      	cmp	r4, #0
 8010696:	f001 8049 	beq.w	801172c <dwt_ioctl+0x1edc>
 801069a:	8823      	ldrh	r3, [r4, #0]
 801069c:	2200      	movs	r2, #0
 801069e:	4937      	ldr	r1, [pc, #220]	; (801077c <dwt_ioctl+0xf2c>)
 80106a0:	f7fd f9c9 	bl	800da36 <dwt_write16bitoffsetreg>
 80106a4:	2500      	movs	r5, #0
 80106a6:	f000 bfdb 	b.w	8011660 <dwt_ioctl+0x1e10>
 80106aa:	2c00      	cmp	r4, #0
 80106ac:	f001 8040 	beq.w	8011730 <dwt_ioctl+0x1ee0>
 80106b0:	6825      	ldr	r5, [r4, #0]
 80106b2:	b935      	cbnz	r5, 80106c2 <dwt_ioctl+0xe72>
 80106b4:	2300      	movs	r3, #0
 80106b6:	461a      	mov	r2, r3
 80106b8:	4931      	ldr	r1, [pc, #196]	; (8010780 <dwt_ioctl+0xf30>)
 80106ba:	f7fd f9bc 	bl	800da36 <dwt_write16bitoffsetreg>
 80106be:	f000 bfcf 	b.w	8011660 <dwt_ioctl+0x1e10>
 80106c2:	7962      	ldrb	r2, [r4, #5]
 80106c4:	7923      	ldrb	r3, [r4, #4]
 80106c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80106ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80106ce:	2200      	movs	r2, #0
 80106d0:	492b      	ldr	r1, [pc, #172]	; (8010780 <dwt_ioctl+0xf30>)
 80106d2:	f7fd f9b0 	bl	800da36 <dwt_write16bitoffsetreg>
 80106d6:	2500      	movs	r5, #0
 80106d8:	f000 bfc2 	b.w	8011660 <dwt_ioctl+0x1e10>
 80106dc:	2c00      	cmp	r4, #0
 80106de:	f001 8029 	beq.w	8011734 <dwt_ioctl+0x1ee4>
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	b94b      	cbnz	r3, 80106fa <dwt_ioctl+0xeaa>
 80106e6:	2500      	movs	r5, #0
 80106e8:	9500      	str	r5, [sp, #0]
 80106ea:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80106ee:	462a      	mov	r2, r5
 80106f0:	2110      	movs	r1, #16
 80106f2:	f7fe fc11 	bl	800ef18 <dwt_modify16bitoffsetreg>
 80106f6:	f000 bfb3 	b.w	8011660 <dwt_ioctl+0x1e10>
 80106fa:	2200      	movs	r2, #0
 80106fc:	2134      	movs	r1, #52	; 0x34
 80106fe:	f7fd fa05 	bl	800db0c <dwt_write32bitoffsetreg>
 8010702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801070c:	2200      	movs	r2, #0
 801070e:	2110      	movs	r1, #16
 8010710:	4630      	mov	r0, r6
 8010712:	f7fe fc01 	bl	800ef18 <dwt_modify16bitoffsetreg>
 8010716:	2500      	movs	r5, #0
 8010718:	f000 bfa2 	b.w	8011660 <dwt_ioctl+0x1e10>
 801071c:	2c00      	cmp	r4, #0
 801071e:	f001 800b 	beq.w	8011738 <dwt_ioctl+0x1ee8>
 8010722:	8861      	ldrh	r1, [r4, #2]
 8010724:	f7fd fc62 	bl	800dfec <ull_aon_read>
 8010728:	7020      	strb	r0, [r4, #0]
 801072a:	2500      	movs	r5, #0
 801072c:	f000 bf98 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010730:	2c00      	cmp	r4, #0
 8010732:	f001 8003 	beq.w	801173c <dwt_ioctl+0x1eec>
 8010736:	78a2      	ldrb	r2, [r4, #2]
 8010738:	8821      	ldrh	r1, [r4, #0]
 801073a:	f7fd fc77 	bl	800e02c <ull_aon_write>
 801073e:	2500      	movs	r5, #0
 8010740:	f000 bf8e 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010744:	00010044 	.word	0x00010044
 8010748:	0001ff80 	.word	0x0001ff80
 801074c:	00010048 	.word	0x00010048
 8010750:	0001004c 	.word	0x0001004c
 8010754:	00010050 	.word	0x00010050
 8010758:	00010030 	.word	0x00010030
 801075c:	000f0004 	.word	0x000f0004
 8010760:	000f0008 	.word	0x000f0008
 8010764:	000f000c 	.word	0x000f000c
 8010768:	000f0010 	.word	0x000f0010
 801076c:	000f0014 	.word	0x000f0014
 8010770:	000f0018 	.word	0x000f0018
 8010774:	000f001c 	.word	0x000f001c
 8010778:	000f0020 	.word	0x000f0020
 801077c:	00060004 	.word	0x00060004
 8010780:	0011001c 	.word	0x0011001c
 8010784:	4bd5      	ldr	r3, [pc, #852]	; (8010adc <dwt_ioctl+0x128c>)
 8010786:	4ad6      	ldr	r2, [pc, #856]	; (8010ae0 <dwt_ioctl+0x1290>)
 8010788:	2d01      	cmp	r5, #1
 801078a:	bf18      	it	ne
 801078c:	4613      	movne	r3, r2
 801078e:	2d01      	cmp	r5, #1
 8010790:	49d4      	ldr	r1, [pc, #848]	; (8010ae4 <dwt_ioctl+0x1294>)
 8010792:	bf18      	it	ne
 8010794:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8010798:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801079a:	7b92      	ldrb	r2, [r2, #14]
 801079c:	2a01      	cmp	r2, #1
 801079e:	d012      	beq.n	80107c6 <dwt_ioctl+0xf76>
 80107a0:	2a03      	cmp	r2, #3
 80107a2:	d117      	bne.n	80107d4 <dwt_ioctl+0xf84>
 80107a4:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 80107a8:	3a01      	subs	r2, #1
 80107aa:	441a      	add	r2, r3
 80107ac:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80107b0:	f7fc fce3 	bl	800d17a <dwt_read16bitoffsetreg>
 80107b4:	09c0      	lsrs	r0, r0, #7
 80107b6:	8020      	strh	r0, [r4, #0]
 80107b8:	8825      	ldrh	r5, [r4, #0]
 80107ba:	3500      	adds	r5, #0
 80107bc:	bf18      	it	ne
 80107be:	2501      	movne	r5, #1
 80107c0:	426d      	negs	r5, r5
 80107c2:	f000 bf4d 	b.w	8011660 <dwt_ioctl+0x1e10>
 80107c6:	2202      	movs	r2, #2
 80107c8:	4619      	mov	r1, r3
 80107ca:	f7fc fcd6 	bl	800d17a <dwt_read16bitoffsetreg>
 80107ce:	09c0      	lsrs	r0, r0, #7
 80107d0:	8020      	strh	r0, [r4, #0]
 80107d2:	e7f1      	b.n	80107b8 <dwt_ioctl+0xf68>
 80107d4:	2202      	movs	r2, #2
 80107d6:	f7fc fcd0 	bl	800d17a <dwt_read16bitoffsetreg>
 80107da:	09c0      	lsrs	r0, r0, #7
 80107dc:	8020      	strh	r0, [r4, #0]
 80107de:	e7eb      	b.n	80107b8 <dwt_ioctl+0xf68>
 80107e0:	2c00      	cmp	r4, #0
 80107e2:	f000 87ad 	beq.w	8011740 <dwt_ioctl+0x1ef0>
 80107e6:	7821      	ldrb	r1, [r4, #0]
 80107e8:	f7fe fbd4 	bl	800ef94 <ull_setleds>
 80107ec:	2500      	movs	r5, #0
 80107ee:	f000 bf37 	b.w	8011660 <dwt_ioctl+0x1e10>
 80107f2:	4611      	mov	r1, r2
 80107f4:	f7fe fa30 	bl	800ec58 <ull_setdwstate>
 80107f8:	2500      	movs	r5, #0
 80107fa:	f000 bf31 	b.w	8011660 <dwt_ioctl+0x1e10>
 80107fe:	9400      	str	r4, [sp, #0]
 8010800:	2304      	movs	r3, #4
 8010802:	2200      	movs	r2, #0
 8010804:	211c      	movs	r1, #28
 8010806:	f7fc fc98 	bl	800d13a <dwt_readfromdevice>
 801080a:	2500      	movs	r5, #0
 801080c:	f000 bf28 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010810:	2c00      	cmp	r4, #0
 8010812:	f000 8797 	beq.w	8011744 <dwt_ioctl+0x1ef4>
 8010816:	2202      	movs	r2, #2
 8010818:	2144      	movs	r1, #68	; 0x44
 801081a:	f7fc fcae 	bl	800d17a <dwt_read16bitoffsetreg>
 801081e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8010822:	7020      	strb	r0, [r4, #0]
 8010824:	2500      	movs	r5, #0
 8010826:	f000 bf1b 	b.w	8011660 <dwt_ioctl+0x1e10>
 801082a:	2c00      	cmp	r4, #0
 801082c:	f000 878c 	beq.w	8011748 <dwt_ioctl+0x1ef8>
 8010830:	2200      	movs	r2, #0
 8010832:	2144      	movs	r1, #68	; 0x44
 8010834:	f7fc fce0 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010838:	f000 0001 	and.w	r0, r0, #1
 801083c:	7020      	strb	r0, [r4, #0]
 801083e:	2500      	movs	r5, #0
 8010840:	f000 bf0e 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010844:	2c00      	cmp	r4, #0
 8010846:	f000 8781 	beq.w	801174c <dwt_ioctl+0x1efc>
 801084a:	8862      	ldrh	r2, [r4, #2]
 801084c:	8821      	ldrh	r1, [r4, #0]
 801084e:	f7fe fa61 	bl	800ed14 <ull_configureframefilter>
 8010852:	2500      	movs	r5, #0
 8010854:	f000 bf04 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010858:	9400      	str	r4, [sp, #0]
 801085a:	2308      	movs	r3, #8
 801085c:	2200      	movs	r2, #0
 801085e:	2104      	movs	r1, #4
 8010860:	f7fd f8de 	bl	800da20 <dwt_writetodevice>
 8010864:	2500      	movs	r5, #0
 8010866:	f000 befb 	b.w	8011660 <dwt_ioctl+0x1e10>
 801086a:	9400      	str	r4, [sp, #0]
 801086c:	2308      	movs	r3, #8
 801086e:	2200      	movs	r2, #0
 8010870:	2104      	movs	r1, #4
 8010872:	f7fc fc62 	bl	800d13a <dwt_readfromdevice>
 8010876:	2500      	movs	r5, #0
 8010878:	f000 bef2 	b.w	8011660 <dwt_ioctl+0x1e10>
 801087c:	2c00      	cmp	r4, #0
 801087e:	f000 8767 	beq.w	8011750 <dwt_ioctl+0x1f00>
 8010882:	8823      	ldrh	r3, [r4, #0]
 8010884:	2202      	movs	r2, #2
 8010886:	210c      	movs	r1, #12
 8010888:	f7fd f8d5 	bl	800da36 <dwt_write16bitoffsetreg>
 801088c:	2500      	movs	r5, #0
 801088e:	f000 bee7 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010892:	2c00      	cmp	r4, #0
 8010894:	f000 875e 	beq.w	8011754 <dwt_ioctl+0x1f04>
 8010898:	8823      	ldrh	r3, [r4, #0]
 801089a:	2200      	movs	r2, #0
 801089c:	210c      	movs	r1, #12
 801089e:	f7fd f8ca 	bl	800da36 <dwt_write16bitoffsetreg>
 80108a2:	2500      	movs	r5, #0
 80108a4:	f000 bedc 	b.w	8011660 <dwt_ioctl+0x1e10>
 80108a8:	4621      	mov	r1, r4
 80108aa:	f7fd f897 	bl	800d9dc <ull_readrxtimestamp>
 80108ae:	2500      	movs	r5, #0
 80108b0:	f000 bed6 	b.w	8011660 <dwt_ioctl+0x1e10>
 80108b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80108b6:	7b9b      	ldrb	r3, [r3, #14]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d00b      	beq.n	80108d4 <dwt_ioctl+0x1084>
 80108bc:	2b03      	cmp	r3, #3
 80108be:	d112      	bne.n	80108e6 <dwt_ioctl+0x1096>
 80108c0:	9400      	str	r4, [sp, #0]
 80108c2:	2305      	movs	r3, #5
 80108c4:	2220      	movs	r2, #32
 80108c6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80108ca:	f7fc fc36 	bl	800d13a <dwt_readfromdevice>
 80108ce:	2500      	movs	r5, #0
 80108d0:	f000 bec6 	b.w	8011660 <dwt_ioctl+0x1e10>
 80108d4:	9400      	str	r4, [sp, #0]
 80108d6:	2305      	movs	r3, #5
 80108d8:	2200      	movs	r2, #0
 80108da:	4983      	ldr	r1, [pc, #524]	; (8010ae8 <dwt_ioctl+0x1298>)
 80108dc:	f7fc fc2d 	bl	800d13a <dwt_readfromdevice>
 80108e0:	2500      	movs	r5, #0
 80108e2:	f000 bebd 	b.w	8011660 <dwt_ioctl+0x1e10>
 80108e6:	9400      	str	r4, [sp, #0]
 80108e8:	2305      	movs	r3, #5
 80108ea:	2200      	movs	r2, #0
 80108ec:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80108f0:	f7fc fc23 	bl	800d13a <dwt_readfromdevice>
 80108f4:	2500      	movs	r5, #0
 80108f6:	f000 beb3 	b.w	8011660 <dwt_ioctl+0x1e10>
 80108fa:	2500      	movs	r5, #0
 80108fc:	f804 5b01 	strb.w	r5, [r4], #1
 8010900:	9400      	str	r4, [sp, #0]
 8010902:	2304      	movs	r3, #4
 8010904:	462a      	mov	r2, r5
 8010906:	216c      	movs	r1, #108	; 0x6c
 8010908:	f7fc fc17 	bl	800d13a <dwt_readfromdevice>
 801090c:	f000 bea8 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010910:	2c00      	cmp	r4, #0
 8010912:	f000 8721 	beq.w	8011758 <dwt_ioctl+0x1f08>
 8010916:	2201      	movs	r2, #1
 8010918:	2160      	movs	r1, #96	; 0x60
 801091a:	f7fc fc18 	bl	800d14e <dwt_read32bitoffsetreg>
 801091e:	6020      	str	r0, [r4, #0]
 8010920:	2500      	movs	r5, #0
 8010922:	f000 be9d 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010926:	2c00      	cmp	r4, #0
 8010928:	f000 8718 	beq.w	801175c <dwt_ioctl+0x1f0c>
 801092c:	2200      	movs	r2, #0
 801092e:	2160      	movs	r1, #96	; 0x60
 8010930:	f7fc fc0d 	bl	800d14e <dwt_read32bitoffsetreg>
 8010934:	6020      	str	r0, [r4, #0]
 8010936:	2500      	movs	r5, #0
 8010938:	f000 be92 	b.w	8011660 <dwt_ioctl+0x1e10>
 801093c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801093e:	7b9b      	ldrb	r3, [r3, #14]
 8010940:	2b01      	cmp	r3, #1
 8010942:	d00b      	beq.n	801095c <dwt_ioctl+0x110c>
 8010944:	2b03      	cmp	r3, #3
 8010946:	d112      	bne.n	801096e <dwt_ioctl+0x111e>
 8010948:	9400      	str	r4, [sp, #0]
 801094a:	2305      	movs	r3, #5
 801094c:	2228      	movs	r2, #40	; 0x28
 801094e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010952:	f7fc fbf2 	bl	800d13a <dwt_readfromdevice>
 8010956:	2500      	movs	r5, #0
 8010958:	f000 be82 	b.w	8011660 <dwt_ioctl+0x1e10>
 801095c:	9400      	str	r4, [sp, #0]
 801095e:	2305      	movs	r3, #5
 8010960:	2200      	movs	r2, #0
 8010962:	4962      	ldr	r1, [pc, #392]	; (8010aec <dwt_ioctl+0x129c>)
 8010964:	f7fc fbe9 	bl	800d13a <dwt_readfromdevice>
 8010968:	2500      	movs	r5, #0
 801096a:	f000 be79 	b.w	8011660 <dwt_ioctl+0x1e10>
 801096e:	9400      	str	r4, [sp, #0]
 8010970:	2305      	movs	r3, #5
 8010972:	2200      	movs	r2, #0
 8010974:	495e      	ldr	r1, [pc, #376]	; (8010af0 <dwt_ioctl+0x12a0>)
 8010976:	f7fc fbe0 	bl	800d13a <dwt_readfromdevice>
 801097a:	2500      	movs	r5, #0
 801097c:	f000 be70 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010980:	2c00      	cmp	r4, #0
 8010982:	f000 86ed 	beq.w	8011760 <dwt_ioctl+0x1f10>
 8010986:	2200      	movs	r2, #0
 8010988:	211c      	movs	r1, #28
 801098a:	f7fc fbe0 	bl	800d14e <dwt_read32bitoffsetreg>
 801098e:	6020      	str	r0, [r4, #0]
 8010990:	2500      	movs	r5, #0
 8010992:	f000 be65 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010996:	2c00      	cmp	r4, #0
 8010998:	f000 86e4 	beq.w	8011764 <dwt_ioctl+0x1f14>
 801099c:	8825      	ldrh	r5, [r4, #0]
 801099e:	6867      	ldr	r7, [r4, #4]
 80109a0:	7a23      	ldrb	r3, [r4, #8]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 86e0 	beq.w	8011768 <dwt_ioctl+0x1f18>
 80109a8:	463c      	mov	r4, r7
 80109aa:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80109ae:	4629      	mov	r1, r5
 80109b0:	4630      	mov	r0, r6
 80109b2:	f7fd f889 	bl	800dac8 <_dwt_otpread>
 80109b6:	f844 0b04 	str.w	r0, [r4], #4
 80109ba:	3501      	adds	r5, #1
 80109bc:	b2ad      	uxth	r5, r5
 80109be:	42bc      	cmp	r4, r7
 80109c0:	d1f5      	bne.n	80109ae <dwt_ioctl+0x115e>
 80109c2:	2500      	movs	r5, #0
 80109c4:	f000 be4c 	b.w	8011660 <dwt_ioctl+0x1e10>
 80109c8:	2c00      	cmp	r4, #0
 80109ca:	f000 86cf 	beq.w	801176c <dwt_ioctl+0x1f1c>
 80109ce:	7821      	ldrb	r1, [r4, #0]
 80109d0:	f7fd fb86 	bl	800e0e0 <ull_setplenfine>
 80109d4:	2500      	movs	r5, #0
 80109d6:	f000 be43 	b.w	8011660 <dwt_ioctl+0x1e10>
 80109da:	f7fe f9bf 	bl	800ed5c <ull_run_pgfcal>
 80109de:	4605      	mov	r5, r0
 80109e0:	f000 be3e 	b.w	8011660 <dwt_ioctl+0x1e10>
 80109e4:	4611      	mov	r1, r2
 80109e6:	f7fe fb23 	bl	800f030 <ull_pgf_cal>
 80109ea:	4605      	mov	r5, r0
 80109ec:	f000 be38 	b.w	8011660 <dwt_ioctl+0x1e10>
 80109f0:	2c00      	cmp	r4, #0
 80109f2:	f000 86bd 	beq.w	8011770 <dwt_ioctl+0x1f20>
 80109f6:	78a5      	ldrb	r5, [r4, #2]
 80109f8:	2101      	movs	r1, #1
 80109fa:	f7fd f83b 	bl	800da74 <ull_force_clocks>
 80109fe:	2100      	movs	r1, #0
 8010a00:	4630      	mov	r0, r6
 8010a02:	f7fd fdbd 	bl	800e580 <ull_enable_rf_tx>
 8010a06:	4630      	mov	r0, r6
 8010a08:	f7fd fdee 	bl	800e5e8 <ull_enable_rftx_blocks>
 8010a0c:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8010a10:	2200      	movs	r2, #0
 8010a12:	4938      	ldr	r1, [pc, #224]	; (8010af4 <dwt_ioctl+0x12a4>)
 8010a14:	4630      	mov	r0, r6
 8010a16:	f7fd fa5d 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	9300      	str	r3, [sp, #0]
 8010a1e:	23ff      	movs	r3, #255	; 0xff
 8010a20:	2200      	movs	r2, #0
 8010a22:	4935      	ldr	r1, [pc, #212]	; (8010af8 <dwt_ioctl+0x12a8>)
 8010a24:	4630      	mov	r0, r6
 8010a26:	f7fd fee7 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8010a2a:	4f33      	ldr	r7, [pc, #204]	; (8010af8 <dwt_ioctl+0x12a8>)
 8010a2c:	2500      	movs	r5, #0
 8010a2e:	462a      	mov	r2, r5
 8010a30:	4639      	mov	r1, r7
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7fc fbe0 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010a38:	f010 0f01 	tst.w	r0, #1
 8010a3c:	d1f7      	bne.n	8010a2e <dwt_ioctl+0x11de>
 8010a3e:	2200      	movs	r2, #0
 8010a40:	492e      	ldr	r1, [pc, #184]	; (8010afc <dwt_ioctl+0x12ac>)
 8010a42:	4630      	mov	r0, r6
 8010a44:	f7fc fb99 	bl	800d17a <dwt_read16bitoffsetreg>
 8010a48:	4605      	mov	r5, r0
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f7fd f9c0 	bl	800ddd0 <ull_disable_rftx_blocks>
 8010a50:	2100      	movs	r1, #0
 8010a52:	4630      	mov	r0, r6
 8010a54:	f7fd f9c6 	bl	800dde4 <ull_disable_rf_tx>
 8010a58:	2105      	movs	r1, #5
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f7fd f80a 	bl	800da74 <ull_force_clocks>
 8010a60:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8010a64:	8025      	strh	r5, [r4, #0]
 8010a66:	2500      	movs	r5, #0
 8010a68:	f000 bdfa 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010a6c:	2102      	movs	r1, #2
 8010a6e:	f7fe f8f3 	bl	800ec58 <ull_setdwstate>
 8010a72:	2101      	movs	r1, #1
 8010a74:	4630      	mov	r0, r6
 8010a76:	f7fe f8ef 	bl	800ec58 <ull_setdwstate>
 8010a7a:	2432      	movs	r4, #50	; 0x32
 8010a7c:	f04f 0814 	mov.w	r8, #20
 8010a80:	2700      	movs	r7, #0
 8010a82:	2544      	movs	r5, #68	; 0x44
 8010a84:	4640      	mov	r0, r8
 8010a86:	f7ef feec 	bl	8000862 <deca_usleep>
 8010a8a:	463a      	mov	r2, r7
 8010a8c:	4629      	mov	r1, r5
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f7fc fbb2 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010a94:	f010 0f02 	tst.w	r0, #2
 8010a98:	d105      	bne.n	8010aa6 <dwt_ioctl+0x1256>
 8010a9a:	1e63      	subs	r3, r4, #1
 8010a9c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8010aa0:	d1f0      	bne.n	8010a84 <dwt_ioctl+0x1234>
 8010aa2:	2501      	movs	r5, #1
 8010aa4:	e000      	b.n	8010aa8 <dwt_ioctl+0x1258>
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	426d      	negs	r5, r5
 8010aaa:	f000 bdd9 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010aae:	2c00      	cmp	r4, #0
 8010ab0:	f000 8660 	beq.w	8011774 <dwt_ioctl+0x1f24>
 8010ab4:	7823      	ldrb	r3, [r4, #0]
 8010ab6:	031b      	lsls	r3, r3, #12
 8010ab8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010abc:	7862      	ldrb	r2, [r4, #1]
 8010abe:	2a01      	cmp	r2, #1
 8010ac0:	bf08      	it	eq
 8010ac2:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8010acc:	2200      	movs	r2, #0
 8010ace:	490c      	ldr	r1, [pc, #48]	; (8010b00 <dwt_ioctl+0x12b0>)
 8010ad0:	f7fd fd22 	bl	800e518 <dwt_modify32bitoffsetreg>
 8010ad4:	2500      	movs	r5, #0
 8010ad6:	f000 bdc3 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010ada:	bf00      	nop
 8010adc:	00180034 	.word	0x00180034
 8010ae0:	0018002c 	.word	0x0018002c
 8010ae4:	000c0014 	.word	0x000c0014
 8010ae8:	00180020 	.word	0x00180020
 8010aec:	00180028 	.word	0x00180028
 8010af0:	000c0008 	.word	0x000c0008
 8010af4:	0007001c 	.word	0x0007001c
 8010af8:	00080010 	.word	0x00080010
 8010afc:	00080014 	.word	0x00080014
 8010b00:	00070014 	.word	0x00070014
 8010b04:	2c00      	cmp	r4, #0
 8010b06:	f000 8637 	beq.w	8011778 <dwt_ioctl+0x1f28>
 8010b0a:	6862      	ldr	r2, [r4, #4]
 8010b0c:	6821      	ldr	r1, [r4, #0]
 8010b0e:	f7fd fe35 	bl	800e77c <ull_setgpiomode>
 8010b12:	2500      	movs	r5, #0
 8010b14:	f000 bda4 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010b18:	2c00      	cmp	r4, #0
 8010b1a:	f000 862f 	beq.w	801177c <dwt_ioctl+0x1f2c>
 8010b1e:	8823      	ldrh	r3, [r4, #0]
 8010b20:	2200      	movs	r2, #0
 8010b22:	49c4      	ldr	r1, [pc, #784]	; (8010e34 <dwt_ioctl+0x15e4>)
 8010b24:	f7fc ff87 	bl	800da36 <dwt_write16bitoffsetreg>
 8010b28:	2500      	movs	r5, #0
 8010b2a:	f000 bd99 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010b2e:	2c00      	cmp	r4, #0
 8010b30:	f000 8626 	beq.w	8011780 <dwt_ioctl+0x1f30>
 8010b34:	6862      	ldr	r2, [r4, #4]
 8010b36:	8821      	ldrh	r1, [r4, #0]
 8010b38:	f7fe faaa 	bl	800f090 <ull_setgpiovalue>
 8010b3c:	2500      	movs	r5, #0
 8010b3e:	f000 bd8f 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010b42:	2c00      	cmp	r4, #0
 8010b44:	f000 861e 	beq.w	8011784 <dwt_ioctl+0x1f34>
 8010b48:	7865      	ldrb	r5, [r4, #1]
 8010b4a:	7823      	ldrb	r3, [r4, #0]
 8010b4c:	b18b      	cbz	r3, 8010b72 <dwt_ioctl+0x1322>
 8010b4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010b50:	2200      	movs	r2, #0
 8010b52:	739a      	strb	r2, [r3, #14]
 8010b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b58:	2208      	movs	r2, #8
 8010b5a:	b37d      	cbz	r5, 8010bbc <dwt_ioctl+0x136c>
 8010b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010b60:	9200      	str	r2, [sp, #0]
 8010b62:	2200      	movs	r2, #0
 8010b64:	2110      	movs	r1, #16
 8010b66:	4630      	mov	r0, r6
 8010b68:	f7fd fcd6 	bl	800e518 <dwt_modify32bitoffsetreg>
 8010b6c:	2500      	movs	r5, #0
 8010b6e:	f000 bd77 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010b72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010b74:	2201      	movs	r2, #1
 8010b76:	739a      	strb	r2, [r3, #14]
 8010b78:	2318      	movs	r3, #24
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	49ae      	ldr	r1, [pc, #696]	; (8010e38 <dwt_ioctl+0x15e8>)
 8010b7e:	f7fc ffc5 	bl	800db0c <dwt_write32bitoffsetreg>
 8010b82:	23e8      	movs	r3, #232	; 0xe8
 8010b84:	2200      	movs	r2, #0
 8010b86:	49ad      	ldr	r1, [pc, #692]	; (8010e3c <dwt_ioctl+0x15ec>)
 8010b88:	4630      	mov	r0, r6
 8010b8a:	f7fc ffbf 	bl	800db0c <dwt_write32bitoffsetreg>
 8010b8e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010b90:	7d9b      	ldrb	r3, [r3, #22]
 8010b92:	085b      	lsrs	r3, r3, #1
 8010b94:	d003      	beq.n	8010b9e <dwt_ioctl+0x134e>
 8010b96:	f06f 0308 	mvn.w	r3, #8
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	e7dd      	b.n	8010b5a <dwt_ioctl+0x130a>
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	49a7      	ldr	r1, [pc, #668]	; (8010e40 <dwt_ioctl+0x15f0>)
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f7fd f995 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010baa:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8010bac:	7d93      	ldrb	r3, [r2, #22]
 8010bae:	f043 0302 	orr.w	r3, r3, #2
 8010bb2:	7593      	strb	r3, [r2, #22]
 8010bb4:	f06f 0308 	mvn.w	r3, #8
 8010bb8:	2200      	movs	r2, #0
 8010bba:	e7ce      	b.n	8010b5a <dwt_ioctl+0x130a>
 8010bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010bc0:	e7ce      	b.n	8010b60 <dwt_ioctl+0x1310>
 8010bc2:	2c00      	cmp	r4, #0
 8010bc4:	f000 85e0 	beq.w	8011788 <dwt_ioctl+0x1f38>
 8010bc8:	6823      	ldr	r3, [r4, #0]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	2130      	movs	r1, #48	; 0x30
 8010bce:	f7fc ff9d 	bl	800db0c <dwt_write32bitoffsetreg>
 8010bd2:	2500      	movs	r5, #0
 8010bd4:	f000 bd44 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010bd8:	2c00      	cmp	r4, #0
 8010bda:	f000 85d7 	beq.w	801178c <dwt_ioctl+0x1f3c>
 8010bde:	2200      	movs	r2, #0
 8010be0:	4629      	mov	r1, r5
 8010be2:	f7fc fab4 	bl	800d14e <dwt_read32bitoffsetreg>
 8010be6:	6020      	str	r0, [r4, #0]
 8010be8:	2500      	movs	r5, #0
 8010bea:	f000 bd39 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010bee:	4623      	mov	r3, r4
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	f7fc ff8a 	bl	800db0c <dwt_write32bitoffsetreg>
 8010bf8:	2500      	movs	r5, #0
 8010bfa:	f000 bd31 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010bfe:	2c00      	cmp	r4, #0
 8010c00:	f000 85c6 	beq.w	8011790 <dwt_ioctl+0x1f40>
 8010c04:	2203      	movs	r2, #3
 8010c06:	498f      	ldr	r1, [pc, #572]	; (8010e44 <dwt_ioctl+0x15f4>)
 8010c08:	f7fc faf6 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010c0c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8010c10:	7020      	strb	r0, [r4, #0]
 8010c12:	2500      	movs	r5, #0
 8010c14:	f000 bd24 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010c18:	2c00      	cmp	r4, #0
 8010c1a:	f000 85bb 	beq.w	8011794 <dwt_ioctl+0x1f44>
 8010c1e:	6823      	ldr	r3, [r4, #0]
 8010c20:	2200      	movs	r2, #0
 8010c22:	2144      	movs	r1, #68	; 0x44
 8010c24:	f7fc ff72 	bl	800db0c <dwt_write32bitoffsetreg>
 8010c28:	2500      	movs	r5, #0
 8010c2a:	f000 bd19 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010c2e:	2c00      	cmp	r4, #0
 8010c30:	f000 85b2 	beq.w	8011798 <dwt_ioctl+0x1f48>
 8010c34:	8823      	ldrh	r3, [r4, #0]
 8010c36:	2200      	movs	r2, #0
 8010c38:	2148      	movs	r1, #72	; 0x48
 8010c3a:	f7fc fefc 	bl	800da36 <dwt_write16bitoffsetreg>
 8010c3e:	2500      	movs	r5, #0
 8010c40:	f000 bd0e 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010c44:	2c00      	cmp	r4, #0
 8010c46:	f000 85a9 	beq.w	801179c <dwt_ioctl+0x1f4c>
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	2144      	movs	r1, #68	; 0x44
 8010c4e:	f7fc fa7e 	bl	800d14e <dwt_read32bitoffsetreg>
 8010c52:	6020      	str	r0, [r4, #0]
 8010c54:	2500      	movs	r5, #0
 8010c56:	f000 bd03 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010c5a:	2c00      	cmp	r4, #0
 8010c5c:	f000 85a0 	beq.w	80117a0 <dwt_ioctl+0x1f50>
 8010c60:	2200      	movs	r2, #0
 8010c62:	2148      	movs	r1, #72	; 0x48
 8010c64:	f7fc fa89 	bl	800d17a <dwt_read16bitoffsetreg>
 8010c68:	6020      	str	r0, [r4, #0]
 8010c6a:	2500      	movs	r5, #0
 8010c6c:	f000 bcf8 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010c70:	2c00      	cmp	r4, #0
 8010c72:	f000 8597 	beq.w	80117a4 <dwt_ioctl+0x1f54>
 8010c76:	7823      	ldrb	r3, [r4, #0]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	4973      	ldr	r1, [pc, #460]	; (8010e48 <dwt_ioctl+0x15f8>)
 8010c7c:	f7fd f92a 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010c80:	2500      	movs	r5, #0
 8010c82:	f000 bced 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010c86:	2c00      	cmp	r4, #0
 8010c88:	f000 858e 	beq.w	80117a8 <dwt_ioctl+0x1f58>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	2144      	movs	r1, #68	; 0x44
 8010c90:	f7fc fab2 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010c94:	7020      	strb	r0, [r4, #0]
 8010c96:	2500      	movs	r5, #0
 8010c98:	f000 bce2 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010c9c:	2c00      	cmp	r4, #0
 8010c9e:	f000 8585 	beq.w	80117ac <dwt_ioctl+0x1f5c>
 8010ca2:	f7fd f923 	bl	800deec <ull_getframelength>
 8010ca6:	6020      	str	r0, [r4, #0]
 8010ca8:	2500      	movs	r5, #0
 8010caa:	f000 bcd9 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010cae:	2c00      	cmp	r4, #0
 8010cb0:	f000 857e 	beq.w	80117b0 <dwt_ioctl+0x1f60>
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	4965      	ldr	r1, [pc, #404]	; (8010e4c <dwt_ioctl+0x15fc>)
 8010cb8:	f7fc fa5f 	bl	800d17a <dwt_read16bitoffsetreg>
 8010cbc:	8020      	strh	r0, [r4, #0]
 8010cbe:	2500      	movs	r5, #0
 8010cc0:	f000 bcce 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010cc4:	2c00      	cmp	r4, #0
 8010cc6:	f000 8575 	beq.w	80117b4 <dwt_ioctl+0x1f64>
 8010cca:	2200      	movs	r2, #0
 8010ccc:	4960      	ldr	r1, [pc, #384]	; (8010e50 <dwt_ioctl+0x1600>)
 8010cce:	f7fc fa3e 	bl	800d14e <dwt_read32bitoffsetreg>
 8010cd2:	6020      	str	r0, [r4, #0]
 8010cd4:	2500      	movs	r5, #0
 8010cd6:	f000 bcc3 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010cda:	2c00      	cmp	r4, #0
 8010cdc:	f000 856c 	beq.w	80117b8 <dwt_ioctl+0x1f68>
 8010ce0:	8823      	ldrh	r3, [r4, #0]
 8010ce2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010cec:	2200      	movs	r2, #0
 8010cee:	4958      	ldr	r1, [pc, #352]	; (8010e50 <dwt_ioctl+0x1600>)
 8010cf0:	f7fe f912 	bl	800ef18 <dwt_modify16bitoffsetreg>
 8010cf4:	2500      	movs	r5, #0
 8010cf6:	f000 bcb3 	b.w	8011660 <dwt_ioctl+0x1e10>
 8010cfa:	2c00      	cmp	r4, #0
 8010cfc:	f000 855e 	beq.w	80117bc <dwt_ioctl+0x1f6c>
 8010d00:	88a7      	ldrh	r7, [r4, #4]
 8010d02:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8010d06:	7b23      	ldrb	r3, [r4, #12]
 8010d08:	9306      	str	r3, [sp, #24]
 8010d0a:	6922      	ldr	r2, [r4, #16]
 8010d0c:	9204      	str	r2, [sp, #16]
 8010d0e:	6962      	ldr	r2, [r4, #20]
 8010d10:	9205      	str	r2, [sp, #20]
 8010d12:	f00b 0203 	and.w	r2, fp, #3
 8010d16:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8010d1a:	2b05      	cmp	r3, #5
 8010d1c:	d147      	bne.n	8010dae <dwt_ioctl+0x155e>
 8010d1e:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8010d22:	bf28      	it	cs
 8010d24:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8010d28:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8010e58 <dwt_ioctl+0x1608>
 8010d2c:	2f04      	cmp	r7, #4
 8010d2e:	d805      	bhi.n	8010d3c <dwt_ioctl+0x14ec>
 8010d30:	eb09 0305 	add.w	r3, r9, r5
 8010d34:	785b      	ldrb	r3, [r3, #1]
 8010d36:	3b05      	subs	r3, #5
 8010d38:	429f      	cmp	r7, r3
 8010d3a:	db40      	blt.n	8010dbe <dwt_ioctl+0x156e>
 8010d3c:	2a01      	cmp	r2, #1
 8010d3e:	f200 80c8 	bhi.w	8010ed2 <dwt_ioctl+0x1682>
 8010d42:	4b44      	ldr	r3, [pc, #272]	; (8010e54 <dwt_ioctl+0x1604>)
 8010d44:	5c99      	ldrb	r1, [r3, r2]
 8010d46:	463e      	mov	r6, r7
 8010d48:	42b9      	cmp	r1, r7
 8010d4a:	f280 80c4 	bge.w	8010ed6 <dwt_ioctl+0x1686>
 8010d4e:	1c50      	adds	r0, r2, #1
 8010d50:	fa53 f080 	uxtab	r0, r3, r0
 8010d54:	2300      	movs	r3, #0
 8010d56:	440b      	add	r3, r1
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	3201      	adds	r2, #1
 8010d5c:	b2d2      	uxtb	r2, r2
 8010d5e:	2a02      	cmp	r2, #2
 8010d60:	d005      	beq.n	8010d6e <dwt_ioctl+0x151e>
 8010d62:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010d66:	eba6 0c03 	sub.w	ip, r6, r3
 8010d6a:	4561      	cmp	r1, ip
 8010d6c:	dbf3      	blt.n	8010d56 <dwt_ioctl+0x1506>
 8010d6e:	429f      	cmp	r7, r3
 8010d70:	bf08      	it	eq
 8010d72:	9503      	streq	r5, [sp, #12]
 8010d74:	f000 80b4 	beq.w	8010ee0 <dwt_ioctl+0x1690>
 8010d78:	f107 0c05 	add.w	ip, r7, #5
 8010d7c:	fa1f fc8c 	uxth.w	ip, ip
 8010d80:	2680      	movs	r6, #128	; 0x80
 8010d82:	2100      	movs	r1, #0
 8010d84:	9107      	str	r1, [sp, #28]
 8010d86:	9103      	str	r1, [sp, #12]
 8010d88:	9108      	str	r1, [sp, #32]
 8010d8a:	2005      	movs	r0, #5
 8010d8c:	46b8      	mov	r8, r7
 8010d8e:	4287      	cmp	r7, r0
 8010d90:	bf38      	it	cc
 8010d92:	4680      	movcc	r8, r0
 8010d94:	f1a8 0805 	sub.w	r8, r8, #5
 8010d98:	fa1f f888 	uxth.w	r8, r8
 8010d9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8010e54 <dwt_ioctl+0x1604>
 8010da0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010da4:	4683      	mov	fp, r0
 8010da6:	4620      	mov	r0, r4
 8010da8:	460c      	mov	r4, r1
 8010daa:	4686      	mov	lr, r0
 8010dac:	e031      	b.n	8010e12 <dwt_ioctl+0x15c2>
 8010dae:	f240 1331 	movw	r3, #305	; 0x131
 8010db2:	429f      	cmp	r7, r3
 8010db4:	bf28      	it	cs
 8010db6:	461f      	movcs	r7, r3
 8010db8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8010e5c <dwt_ioctl+0x160c>
 8010dbc:	e7b6      	b.n	8010d2c <dwt_ioctl+0x14dc>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	9a05      	ldr	r2, [sp, #20]
 8010dc2:	8013      	strh	r3, [r2, #0]
 8010dc4:	9a04      	ldr	r2, [sp, #16]
 8010dc6:	f8c2 b000 	str.w	fp, [r2]
 8010dca:	e098      	b.n	8010efe <dwt_ioctl+0x16ae>
 8010dcc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8010dd0:	4674      	mov	r4, lr
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	9a05      	ldr	r2, [sp, #20]
 8010dd6:	8013      	strh	r3, [r2, #0]
 8010dd8:	9b04      	ldr	r3, [sp, #16]
 8010dda:	f8c3 b000 	str.w	fp, [r3]
 8010dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010de2:	e08c      	b.n	8010efe <dwt_ioctl+0x16ae>
 8010de4:	fa1f fb80 	uxth.w	fp, r0
 8010de8:	9207      	str	r2, [sp, #28]
 8010dea:	9503      	str	r5, [sp, #12]
 8010dec:	9308      	str	r3, [sp, #32]
 8010dee:	2401      	movs	r4, #1
 8010df0:	2d3f      	cmp	r5, #63	; 0x3f
 8010df2:	d050      	beq.n	8010e96 <dwt_ioctl+0x1646>
 8010df4:	2900      	cmp	r1, #0
 8010df6:	d139      	bne.n	8010e6c <dwt_ioctl+0x161c>
 8010df8:	3501      	adds	r5, #1
 8010dfa:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8010dfe:	f819 0005 	ldrb.w	r0, [r9, r5]
 8010e02:	4403      	add	r3, r0
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	429f      	cmp	r7, r3
 8010e08:	d067      	beq.n	8010eda <dwt_ioctl+0x168a>
 8010e0a:	3e01      	subs	r6, #1
 8010e0c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8010e10:	d0dc      	beq.n	8010dcc <dwt_ioctl+0x157c>
 8010e12:	4543      	cmp	r3, r8
 8010e14:	d924      	bls.n	8010e60 <dwt_ioctl+0x1610>
 8010e16:	4563      	cmp	r3, ip
 8010e18:	d222      	bcs.n	8010e60 <dwt_ioctl+0x1610>
 8010e1a:	1af8      	subs	r0, r7, r3
 8010e1c:	b200      	sxth	r0, r0
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	bfb8      	it	lt
 8010e22:	4240      	neglt	r0, r0
 8010e24:	4558      	cmp	r0, fp
 8010e26:	dddd      	ble.n	8010de4 <dwt_ioctl+0x1594>
 8010e28:	2c00      	cmp	r4, #0
 8010e2a:	d0e1      	beq.n	8010df0 <dwt_ioctl+0x15a0>
 8010e2c:	4674      	mov	r4, lr
 8010e2e:	9a07      	ldr	r2, [sp, #28]
 8010e30:	9b08      	ldr	r3, [sp, #32]
 8010e32:	e055      	b.n	8010ee0 <dwt_ioctl+0x1690>
 8010e34:	00050008 	.word	0x00050008
 8010e38:	001f000c 	.word	0x001f000c
 8010e3c:	001f0010 	.word	0x001f0010
 8010e40:	00010020 	.word	0x00010020
 8010e44:	00030054 	.word	0x00030054
 8010e48:	00010018 	.word	0x00010018
 8010e4c:	0005002c 	.word	0x0005002c
 8010e50:	000e001c 	.word	0x000e001c
 8010e54:	0801222c 	.word	0x0801222c
 8010e58:	080121ac 	.word	0x080121ac
 8010e5c:	080121ec 	.word	0x080121ec
 8010e60:	b984      	cbnz	r4, 8010e84 <dwt_ioctl+0x1634>
 8010e62:	4563      	cmp	r3, ip
 8010e64:	d3c4      	bcc.n	8010df0 <dwt_ioctl+0x15a0>
 8010e66:	b199      	cbz	r1, 8010e90 <dwt_ioctl+0x1640>
 8010e68:	2d3f      	cmp	r5, #63	; 0x3f
 8010e6a:	d014      	beq.n	8010e96 <dwt_ioctl+0x1646>
 8010e6c:	f819 1005 	ldrb.w	r1, [r9, r5]
 8010e70:	1a5b      	subs	r3, r3, r1
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	1e69      	subs	r1, r5, #1
 8010e76:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8010e7a:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8010e7e:	bf18      	it	ne
 8010e80:	2101      	movne	r1, #1
 8010e82:	e7c0      	b.n	8010e06 <dwt_ioctl+0x15b6>
 8010e84:	4674      	mov	r4, lr
 8010e86:	f819 1005 	ldrb.w	r1, [r9, r5]
 8010e8a:	1a5b      	subs	r3, r3, r1
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	e027      	b.n	8010ee0 <dwt_ioctl+0x1690>
 8010e90:	4674      	mov	r4, lr
 8010e92:	9503      	str	r5, [sp, #12]
 8010e94:	e024      	b.n	8010ee0 <dwt_ioctl+0x1690>
 8010e96:	2c00      	cmp	r4, #0
 8010e98:	d134      	bne.n	8010f04 <dwt_ioctl+0x16b4>
 8010e9a:	2a03      	cmp	r2, #3
 8010e9c:	d036      	beq.n	8010f0c <dwt_ioctl+0x16bc>
 8010e9e:	2a02      	cmp	r2, #2
 8010ea0:	d009      	beq.n	8010eb6 <dwt_ioctl+0x1666>
 8010ea2:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010ea6:	1858      	adds	r0, r3, r1
 8010ea8:	42b8      	cmp	r0, r7
 8010eaa:	dd0b      	ble.n	8010ec4 <dwt_ioctl+0x1674>
 8010eac:	440b      	add	r3, r1
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	3201      	adds	r2, #1
 8010eb2:	b2d2      	uxtb	r2, r2
 8010eb4:	e7da      	b.n	8010e6c <dwt_ioctl+0x161c>
 8010eb6:	9906      	ldr	r1, [sp, #24]
 8010eb8:	2909      	cmp	r1, #9
 8010eba:	d1f2      	bne.n	8010ea2 <dwt_ioctl+0x1652>
 8010ebc:	4674      	mov	r4, lr
 8010ebe:	213f      	movs	r1, #63	; 0x3f
 8010ec0:	9103      	str	r1, [sp, #12]
 8010ec2:	e00d      	b.n	8010ee0 <dwt_ioctl+0x1690>
 8010ec4:	4674      	mov	r4, lr
 8010ec6:	b283      	uxth	r3, r0
 8010ec8:	3201      	adds	r2, #1
 8010eca:	b2d2      	uxtb	r2, r2
 8010ecc:	213f      	movs	r1, #63	; 0x3f
 8010ece:	9103      	str	r1, [sp, #12]
 8010ed0:	e006      	b.n	8010ee0 <dwt_ioctl+0x1690>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	e74b      	b.n	8010d6e <dwt_ioctl+0x151e>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	e749      	b.n	8010d6e <dwt_ioctl+0x151e>
 8010eda:	4674      	mov	r4, lr
 8010edc:	9503      	str	r5, [sp, #12]
 8010ede:	463b      	mov	r3, r7
 8010ee0:	9905      	ldr	r1, [sp, #20]
 8010ee2:	800b      	strh	r3, [r1, #0]
 8010ee4:	9b03      	ldr	r3, [sp, #12]
 8010ee6:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	041a      	lsls	r2, r3, #16
 8010eee:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8010ef2:	431a      	orrs	r2, r3
 8010ef4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8010ef8:	9a04      	ldr	r2, [sp, #16]
 8010efa:	6013      	str	r3, [r2, #0]
 8010efc:	2300      	movs	r3, #0
 8010efe:	6023      	str	r3, [r4, #0]
 8010f00:	2500      	movs	r5, #0
 8010f02:	e3ad      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010f04:	4674      	mov	r4, lr
 8010f06:	9a07      	ldr	r2, [sp, #28]
 8010f08:	9b08      	ldr	r3, [sp, #32]
 8010f0a:	e7e9      	b.n	8010ee0 <dwt_ioctl+0x1690>
 8010f0c:	4674      	mov	r4, lr
 8010f0e:	213f      	movs	r1, #63	; 0x3f
 8010f10:	9103      	str	r1, [sp, #12]
 8010f12:	e7e5      	b.n	8010ee0 <dwt_ioctl+0x1690>
 8010f14:	2c00      	cmp	r4, #0
 8010f16:	f000 8453 	beq.w	80117c0 <dwt_ioctl+0x1f70>
 8010f1a:	7827      	ldrb	r7, [r4, #0]
 8010f1c:	7864      	ldrb	r4, [r4, #1]
 8010f1e:	f7ef fc77 	bl	8000810 <decamutexon>
 8010f22:	4605      	mov	r5, r0
 8010f24:	2c02      	cmp	r4, #2
 8010f26:	d00e      	beq.n	8010f46 <dwt_ioctl+0x16f6>
 8010f28:	2c04      	cmp	r4, #4
 8010f2a:	d00c      	beq.n	8010f46 <dwt_ioctl+0x16f6>
 8010f2c:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8010f30:	2c01      	cmp	r4, #1
 8010f32:	d019      	beq.n	8010f68 <dwt_ioctl+0x1718>
 8010f34:	43fb      	mvns	r3, r7
 8010f36:	2200      	movs	r2, #0
 8010f38:	9200      	str	r2, [sp, #0]
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	49c1      	ldr	r1, [pc, #772]	; (8011244 <dwt_ioctl+0x19f4>)
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f7fd fc5a 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8010f44:	e005      	b.n	8010f52 <dwt_ioctl+0x1702>
 8010f46:	463b      	mov	r3, r7
 8010f48:	2200      	movs	r2, #0
 8010f4a:	49be      	ldr	r1, [pc, #760]	; (8011244 <dwt_ioctl+0x19f4>)
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	f7fc ffc1 	bl	800ded4 <dwt_write8bitoffsetreg>
 8010f52:	463b      	mov	r3, r7
 8010f54:	2200      	movs	r2, #0
 8010f56:	49bc      	ldr	r1, [pc, #752]	; (8011248 <dwt_ioctl+0x19f8>)
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f7fc fdd7 	bl	800db0c <dwt_write32bitoffsetreg>
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f7ef fc67 	bl	8000832 <decamutexoff>
 8010f64:	2500      	movs	r5, #0
 8010f66:	e37b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010f68:	9700      	str	r7, [sp, #0]
 8010f6a:	23ff      	movs	r3, #255	; 0xff
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	49b5      	ldr	r1, [pc, #724]	; (8011244 <dwt_ioctl+0x19f4>)
 8010f70:	4630      	mov	r0, r6
 8010f72:	f7fd fc41 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8010f76:	e7ec      	b.n	8010f52 <dwt_ioctl+0x1702>
 8010f78:	2302      	movs	r3, #2
 8010f7a:	9301      	str	r3, [sp, #4]
 8010f7c:	2500      	movs	r5, #0
 8010f7e:	9500      	str	r5, [sp, #0]
 8010f80:	462b      	mov	r3, r5
 8010f82:	462a      	mov	r2, r5
 8010f84:	211a      	movs	r1, #26
 8010f86:	f7fc f85a 	bl	800d03e <dwt_xfer3xxx>
 8010f8a:	e369      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010f8c:	f7fe fc4c 	bl	800f828 <ull_softreset_fcmd>
 8010f90:	2500      	movs	r5, #0
 8010f92:	e365      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010f94:	f7fe fc34 	bl	800f800 <ull_softreset_no_sema_fcmd>
 8010f98:	2500      	movs	r5, #0
 8010f9a:	e361      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	9301      	str	r3, [sp, #4]
 8010fa0:	2500      	movs	r5, #0
 8010fa2:	9500      	str	r5, [sp, #0]
 8010fa4:	462b      	mov	r3, r5
 8010fa6:	462a      	mov	r2, r5
 8010fa8:	2114      	movs	r1, #20
 8010faa:	f7fc f848 	bl	800d03e <dwt_xfer3xxx>
 8010fae:	e357      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010fb0:	2402      	movs	r4, #2
 8010fb2:	9401      	str	r4, [sp, #4]
 8010fb4:	2500      	movs	r5, #0
 8010fb6:	9500      	str	r5, [sp, #0]
 8010fb8:	462b      	mov	r3, r5
 8010fba:	462a      	mov	r2, r5
 8010fbc:	2115      	movs	r1, #21
 8010fbe:	f7fc f83e 	bl	800d03e <dwt_xfer3xxx>
 8010fc2:	9401      	str	r4, [sp, #4]
 8010fc4:	9500      	str	r5, [sp, #0]
 8010fc6:	462b      	mov	r3, r5
 8010fc8:	462a      	mov	r2, r5
 8010fca:	2115      	movs	r1, #21
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f7fc f836 	bl	800d03e <dwt_xfer3xxx>
 8010fd2:	e345      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010fd4:	2302      	movs	r3, #2
 8010fd6:	9301      	str	r3, [sp, #4]
 8010fd8:	2500      	movs	r5, #0
 8010fda:	9500      	str	r5, [sp, #0]
 8010fdc:	462b      	mov	r3, r5
 8010fde:	462a      	mov	r2, r5
 8010fe0:	2116      	movs	r1, #22
 8010fe2:	f7fc f82c 	bl	800d03e <dwt_xfer3xxx>
 8010fe6:	e33b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010fe8:	2c00      	cmp	r4, #0
 8010fea:	f000 83eb 	beq.w	80117c4 <dwt_ioctl+0x1f74>
 8010fee:	b932      	cbnz	r2, 8010ffe <dwt_ioctl+0x17ae>
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8010ff6:	f7fc f8ff 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8010ffa:	7020      	strb	r0, [r4, #0]
 8010ffc:	e330      	b.n	8011660 <dwt_ioctl+0x1e10>
 8010ffe:	2201      	movs	r2, #1
 8011000:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011004:	f7fc f8f8 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8011008:	7020      	strb	r0, [r4, #0]
 801100a:	2500      	movs	r5, #0
 801100c:	e328      	b.n	8011660 <dwt_ioctl+0x1e10>
 801100e:	2c00      	cmp	r4, #0
 8011010:	f000 83da 	beq.w	80117c8 <dwt_ioctl+0x1f78>
 8011014:	7824      	ldrb	r4, [r4, #0]
 8011016:	2200      	movs	r2, #0
 8011018:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801101c:	f7fc f8ec 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8011020:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8011024:	4323      	orrs	r3, r4
 8011026:	2200      	movs	r2, #0
 8011028:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801102c:	4630      	mov	r0, r6
 801102e:	f7fc ff51 	bl	800ded4 <dwt_write8bitoffsetreg>
 8011032:	2500      	movs	r5, #0
 8011034:	e314      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011036:	2c00      	cmp	r4, #0
 8011038:	f000 83c8 	beq.w	80117cc <dwt_ioctl+0x1f7c>
 801103c:	7824      	ldrb	r4, [r4, #0]
 801103e:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8011042:	d01d      	beq.n	8011080 <dwt_ioctl+0x1830>
 8011044:	2d01      	cmp	r5, #1
 8011046:	f040 83c3 	bne.w	80117d0 <dwt_ioctl+0x1f80>
 801104a:	2502      	movs	r5, #2
 801104c:	2201      	movs	r2, #1
 801104e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011052:	4630      	mov	r0, r6
 8011054:	f7fc f8d0 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8011058:	b9a4      	cbnz	r4, 8011084 <dwt_ioctl+0x1834>
 801105a:	ea20 0305 	bic.w	r3, r0, r5
 801105e:	b2db      	uxtb	r3, r3
 8011060:	2201      	movs	r2, #1
 8011062:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011066:	4630      	mov	r0, r6
 8011068:	f7fc ff34 	bl	800ded4 <dwt_write8bitoffsetreg>
 801106c:	2200      	movs	r2, #0
 801106e:	2110      	movs	r1, #16
 8011070:	4630      	mov	r0, r6
 8011072:	f7fc f86c 	bl	800d14e <dwt_read32bitoffsetreg>
 8011076:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 801107a:	d00a      	beq.n	8011092 <dwt_ioctl+0x1842>
 801107c:	2500      	movs	r5, #0
 801107e:	e2ef      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011080:	2504      	movs	r5, #4
 8011082:	e7e3      	b.n	801104c <dwt_ioctl+0x17fc>
 8011084:	2c01      	cmp	r4, #1
 8011086:	f040 83a6 	bne.w	80117d6 <dwt_ioctl+0x1f86>
 801108a:	ea40 0305 	orr.w	r3, r0, r5
 801108e:	b2db      	uxtb	r3, r3
 8011090:	e7e6      	b.n	8011060 <dwt_ioctl+0x1810>
 8011092:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801109c:	2200      	movs	r2, #0
 801109e:	2110      	movs	r1, #16
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7fd fa39 	bl	800e518 <dwt_modify32bitoffsetreg>
 80110a6:	2500      	movs	r5, #0
 80110a8:	e2da      	b.n	8011660 <dwt_ioctl+0x1e10>
 80110aa:	2c00      	cmp	r4, #0
 80110ac:	f000 8396 	beq.w	80117dc <dwt_ioctl+0x1f8c>
 80110b0:	7823      	ldrb	r3, [r4, #0]
 80110b2:	035b      	lsls	r3, r3, #13
 80110b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80110b8:	9300      	str	r3, [sp, #0]
 80110ba:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80110be:	2200      	movs	r2, #0
 80110c0:	4962      	ldr	r1, [pc, #392]	; (801124c <dwt_ioctl+0x19fc>)
 80110c2:	f7fd ff29 	bl	800ef18 <dwt_modify16bitoffsetreg>
 80110c6:	2500      	movs	r5, #0
 80110c8:	e2ca      	b.n	8011660 <dwt_ioctl+0x1e10>
 80110ca:	2c00      	cmp	r4, #0
 80110cc:	f000 8388 	beq.w	80117e0 <dwt_ioctl+0x1f90>
 80110d0:	7825      	ldrb	r5, [r4, #0]
 80110d2:	6862      	ldr	r2, [r4, #4]
 80110d4:	2a01      	cmp	r2, #1
 80110d6:	bf15      	itete	ne
 80110d8:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 80110dc:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80110e0:	27df      	movne	r7, #223	; 0xdf
 80110e2:	27ef      	moveq	r7, #239	; 0xef
 80110e4:	bf14      	ite	ne
 80110e6:	f04f 0820 	movne.w	r8, #32
 80110ea:	f04f 0810 	moveq.w	r8, #16
 80110ee:	2400      	movs	r4, #0
 80110f0:	9400      	str	r4, [sp, #0]
 80110f2:	4622      	mov	r2, r4
 80110f4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80110f8:	f7fd fa0e 	bl	800e518 <dwt_modify32bitoffsetreg>
 80110fc:	9400      	str	r4, [sp, #0]
 80110fe:	463b      	mov	r3, r7
 8011100:	4622      	mov	r2, r4
 8011102:	4953      	ldr	r1, [pc, #332]	; (8011250 <dwt_ioctl+0x1a00>)
 8011104:	4630      	mov	r0, r6
 8011106:	f7fd fb77 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 801110a:	2d01      	cmp	r5, #1
 801110c:	d002      	beq.n	8011114 <dwt_ioctl+0x18c4>
 801110e:	b155      	cbz	r5, 8011126 <dwt_ioctl+0x18d6>
 8011110:	2500      	movs	r5, #0
 8011112:	e2a5      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011114:	4625      	mov	r5, r4
 8011116:	9400      	str	r4, [sp, #0]
 8011118:	463b      	mov	r3, r7
 801111a:	4622      	mov	r2, r4
 801111c:	494d      	ldr	r1, [pc, #308]	; (8011254 <dwt_ioctl+0x1a04>)
 801111e:	4630      	mov	r0, r6
 8011120:	f7fd fb6a 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8011124:	e29c      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011126:	f8cd 8000 	str.w	r8, [sp]
 801112a:	23ff      	movs	r3, #255	; 0xff
 801112c:	2200      	movs	r2, #0
 801112e:	4949      	ldr	r1, [pc, #292]	; (8011254 <dwt_ioctl+0x1a04>)
 8011130:	4630      	mov	r0, r6
 8011132:	f7fd fb61 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8011136:	e293      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011138:	2c00      	cmp	r4, #0
 801113a:	f000 8353 	beq.w	80117e4 <dwt_ioctl+0x1f94>
 801113e:	7822      	ldrb	r2, [r4, #0]
 8011140:	f012 0f01 	tst.w	r2, #1
 8011144:	d02c      	beq.n	80111a0 <dwt_ioctl+0x1950>
 8011146:	0157      	lsls	r7, r2, #5
 8011148:	f007 0740 	and.w	r7, r7, #64	; 0x40
 801114c:	2440      	movs	r4, #64	; 0x40
 801114e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8011152:	f012 0f04 	tst.w	r2, #4
 8011156:	d027      	beq.n	80111a8 <dwt_ioctl+0x1958>
 8011158:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 801115c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8011160:	0112      	lsls	r2, r2, #4
 8011162:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011166:	4317      	orrs	r7, r2
 8011168:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801116c:	9200      	str	r2, [sp, #0]
 801116e:	43db      	mvns	r3, r3
 8011170:	2200      	movs	r2, #0
 8011172:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011176:	4630      	mov	r0, r6
 8011178:	f7fd f9ce 	bl	800e518 <dwt_modify32bitoffsetreg>
 801117c:	43e4      	mvns	r4, r4
 801117e:	b2a4      	uxth	r4, r4
 8011180:	2500      	movs	r5, #0
 8011182:	9500      	str	r5, [sp, #0]
 8011184:	4623      	mov	r3, r4
 8011186:	462a      	mov	r2, r5
 8011188:	4931      	ldr	r1, [pc, #196]	; (8011250 <dwt_ioctl+0x1a00>)
 801118a:	4630      	mov	r0, r6
 801118c:	f7fd fec4 	bl	800ef18 <dwt_modify16bitoffsetreg>
 8011190:	9700      	str	r7, [sp, #0]
 8011192:	4623      	mov	r3, r4
 8011194:	462a      	mov	r2, r5
 8011196:	492f      	ldr	r1, [pc, #188]	; (8011254 <dwt_ioctl+0x1a04>)
 8011198:	4630      	mov	r0, r6
 801119a:	f7fd febd 	bl	800ef18 <dwt_modify16bitoffsetreg>
 801119e:	e25f      	b.n	8011660 <dwt_ioctl+0x1e10>
 80111a0:	2700      	movs	r7, #0
 80111a2:	463c      	mov	r4, r7
 80111a4:	463b      	mov	r3, r7
 80111a6:	e7d4      	b.n	8011152 <dwt_ioctl+0x1902>
 80111a8:	2200      	movs	r2, #0
 80111aa:	e7df      	b.n	801116c <dwt_ioctl+0x191c>
 80111ac:	2308      	movs	r3, #8
 80111ae:	9300      	str	r3, [sp, #0]
 80111b0:	23ff      	movs	r3, #255	; 0xff
 80111b2:	2201      	movs	r2, #1
 80111b4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80111b8:	f7fd fb1e 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80111bc:	4c26      	ldr	r4, [pc, #152]	; (8011258 <dwt_ioctl+0x1a08>)
 80111be:	2302      	movs	r3, #2
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	23ff      	movs	r3, #255	; 0xff
 80111c4:	2203      	movs	r2, #3
 80111c6:	4621      	mov	r1, r4
 80111c8:	4630      	mov	r0, r6
 80111ca:	f7fd fb15 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80111ce:	2500      	movs	r5, #0
 80111d0:	9500      	str	r5, [sp, #0]
 80111d2:	23f7      	movs	r3, #247	; 0xf7
 80111d4:	2201      	movs	r2, #1
 80111d6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80111da:	4630      	mov	r0, r6
 80111dc:	f7fd fb0c 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80111e0:	9500      	str	r5, [sp, #0]
 80111e2:	23fd      	movs	r3, #253	; 0xfd
 80111e4:	2203      	movs	r2, #3
 80111e6:	4621      	mov	r1, r4
 80111e8:	4630      	mov	r0, r6
 80111ea:	f7fd fb05 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80111ee:	e237      	b.n	8011660 <dwt_ioctl+0x1e10>
 80111f0:	2c00      	cmp	r4, #0
 80111f2:	f000 82f9 	beq.w	80117e8 <dwt_ioctl+0x1f98>
 80111f6:	8863      	ldrh	r3, [r4, #2]
 80111f8:	00db      	lsls	r3, r3, #3
 80111fa:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80111fe:	7822      	ldrb	r2, [r4, #0]
 8011200:	b10a      	cbz	r2, 8011206 <dwt_ioctl+0x19b6>
 8011202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011206:	9300      	str	r3, [sp, #0]
 8011208:	f24f 0307 	movw	r3, #61447	; 0xf007
 801120c:	2200      	movs	r2, #0
 801120e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8011212:	4630      	mov	r0, r6
 8011214:	f7fd fe80 	bl	800ef18 <dwt_modify16bitoffsetreg>
 8011218:	2500      	movs	r5, #0
 801121a:	e221      	b.n	8011660 <dwt_ioctl+0x1e10>
 801121c:	2500      	movs	r5, #0
 801121e:	9500      	str	r5, [sp, #0]
 8011220:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8011224:	462a      	mov	r2, r5
 8011226:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 801122a:	f7fd fe75 	bl	800ef18 <dwt_modify16bitoffsetreg>
 801122e:	e217      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011230:	2c00      	cmp	r4, #0
 8011232:	f000 82db 	beq.w	80117ec <dwt_ioctl+0x1f9c>
 8011236:	2200      	movs	r2, #0
 8011238:	4908      	ldr	r1, [pc, #32]	; (801125c <dwt_ioctl+0x1a0c>)
 801123a:	f7fb ff9e 	bl	800d17a <dwt_read16bitoffsetreg>
 801123e:	8020      	strh	r0, [r4, #0]
 8011240:	2500      	movs	r5, #0
 8011242:	e20d      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011244:	0001001c 	.word	0x0001001c
 8011248:	00010018 	.word	0x00010018
 801124c:	000e000c 	.word	0x000e000c
 8011250:	00050008 	.word	0x00050008
 8011254:	0005000c 	.word	0x0005000c
 8011258:	00110008 	.word	0x00110008
 801125c:	00110048 	.word	0x00110048
 8011260:	2c00      	cmp	r4, #0
 8011262:	f000 82c5 	beq.w	80117f0 <dwt_ioctl+0x1fa0>
 8011266:	7823      	ldrb	r3, [r4, #0]
 8011268:	2b01      	cmp	r3, #1
 801126a:	7862      	ldrb	r2, [r4, #1]
 801126c:	78a3      	ldrb	r3, [r4, #2]
 801126e:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8011272:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011276:	78e2      	ldrb	r2, [r4, #3]
 8011278:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 801127c:	7922      	ldrb	r2, [r4, #4]
 801127e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 8011282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011286:	bf0c      	ite	eq
 8011288:	2202      	moveq	r2, #2
 801128a:	2200      	movne	r2, #0
 801128c:	49b6      	ldr	r1, [pc, #728]	; (8011568 <dwt_ioctl+0x1d18>)
 801128e:	f7fc fbd2 	bl	800da36 <dwt_write16bitoffsetreg>
 8011292:	2500      	movs	r5, #0
 8011294:	e1e4      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011296:	2c00      	cmp	r4, #0
 8011298:	f000 82ac 	beq.w	80117f4 <dwt_ioctl+0x1fa4>
 801129c:	6863      	ldr	r3, [r4, #4]
 801129e:	7822      	ldrb	r2, [r4, #0]
 80112a0:	b13a      	cbz	r2, 80112b2 <dwt_ioctl+0x1a62>
 80112a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112a6:	2200      	movs	r2, #0
 80112a8:	49b0      	ldr	r1, [pc, #704]	; (801156c <dwt_ioctl+0x1d1c>)
 80112aa:	f7fc fc2f 	bl	800db0c <dwt_write32bitoffsetreg>
 80112ae:	2500      	movs	r5, #0
 80112b0:	e1d6      	b.n	8011660 <dwt_ioctl+0x1e10>
 80112b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112b6:	49ae      	ldr	r1, [pc, #696]	; (8011570 <dwt_ioctl+0x1d20>)
 80112b8:	f7fc fc28 	bl	800db0c <dwt_write32bitoffsetreg>
 80112bc:	2500      	movs	r5, #0
 80112be:	e1cf      	b.n	8011660 <dwt_ioctl+0x1e10>
 80112c0:	2c00      	cmp	r4, #0
 80112c2:	f000 8299 	beq.w	80117f8 <dwt_ioctl+0x1fa8>
 80112c6:	7823      	ldrb	r3, [r4, #0]
 80112c8:	2401      	movs	r4, #1
 80112ca:	409c      	lsls	r4, r3
 80112cc:	b2e4      	uxtb	r4, r4
 80112ce:	2310      	movs	r3, #16
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	23ff      	movs	r3, #255	; 0xff
 80112d4:	2200      	movs	r2, #0
 80112d6:	49a7      	ldr	r1, [pc, #668]	; (8011574 <dwt_ioctl+0x1d24>)
 80112d8:	f7fd fa8e 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80112dc:	43e3      	mvns	r3, r4
 80112de:	4fa2      	ldr	r7, [pc, #648]	; (8011568 <dwt_ioctl+0x1d18>)
 80112e0:	2500      	movs	r5, #0
 80112e2:	9500      	str	r5, [sp, #0]
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	462a      	mov	r2, r5
 80112e8:	4639      	mov	r1, r7
 80112ea:	4630      	mov	r0, r6
 80112ec:	f7fd fa84 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80112f0:	9400      	str	r4, [sp, #0]
 80112f2:	23ff      	movs	r3, #255	; 0xff
 80112f4:	462a      	mov	r2, r5
 80112f6:	4639      	mov	r1, r7
 80112f8:	4630      	mov	r0, r6
 80112fa:	f7fd fa7d 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80112fe:	e1af      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011300:	2c00      	cmp	r4, #0
 8011302:	f000 827b 	beq.w	80117fc <dwt_ioctl+0x1fac>
 8011306:	7822      	ldrb	r2, [r4, #0]
 8011308:	7863      	ldrb	r3, [r4, #1]
 801130a:	b19b      	cbz	r3, 8011334 <dwt_ioctl+0x1ae4>
 801130c:	2a00      	cmp	r2, #0
 801130e:	f040 8297 	bne.w	8011840 <dwt_ioctl+0x1ff0>
 8011312:	2400      	movs	r4, #0
 8011314:	9400      	str	r4, [sp, #0]
 8011316:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801131a:	4622      	mov	r2, r4
 801131c:	2110      	movs	r1, #16
 801131e:	f7fd f8fb 	bl	800e518 <dwt_modify32bitoffsetreg>
 8011322:	9400      	str	r4, [sp, #0]
 8011324:	4b94      	ldr	r3, [pc, #592]	; (8011578 <dwt_ioctl+0x1d28>)
 8011326:	4622      	mov	r2, r4
 8011328:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801132c:	4630      	mov	r0, r6
 801132e:	f7fd f8f3 	bl	800e518 <dwt_modify32bitoffsetreg>
 8011332:	e017      	b.n	8011364 <dwt_ioctl+0x1b14>
 8011334:	2a00      	cmp	r2, #0
 8011336:	f000 8285 	beq.w	8011844 <dwt_ioctl+0x1ff4>
 801133a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 801133e:	2400      	movs	r4, #0
 8011340:	9400      	str	r4, [sp, #0]
 8011342:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8011346:	4622      	mov	r2, r4
 8011348:	2110      	movs	r1, #16
 801134a:	4630      	mov	r0, r6
 801134c:	f7fd f8e4 	bl	800e518 <dwt_modify32bitoffsetreg>
 8011350:	9500      	str	r5, [sp, #0]
 8011352:	4b89      	ldr	r3, [pc, #548]	; (8011578 <dwt_ioctl+0x1d28>)
 8011354:	4622      	mov	r2, r4
 8011356:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801135a:	4630      	mov	r0, r6
 801135c:	f7fd f8dc 	bl	800e518 <dwt_modify32bitoffsetreg>
 8011360:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8011364:	9400      	str	r4, [sp, #0]
 8011366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801136a:	2200      	movs	r2, #0
 801136c:	2110      	movs	r1, #16
 801136e:	4630      	mov	r0, r6
 8011370:	f7fd f8d2 	bl	800e518 <dwt_modify32bitoffsetreg>
 8011374:	2500      	movs	r5, #0
 8011376:	e173      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011378:	2c00      	cmp	r4, #0
 801137a:	f000 8241 	beq.w	8011800 <dwt_ioctl+0x1fb0>
 801137e:	7823      	ldrb	r3, [r4, #0]
 8011380:	b93b      	cbnz	r3, 8011392 <dwt_ioctl+0x1b42>
 8011382:	2500      	movs	r5, #0
 8011384:	9500      	str	r5, [sp, #0]
 8011386:	23df      	movs	r3, #223	; 0xdf
 8011388:	2203      	movs	r2, #3
 801138a:	497c      	ldr	r1, [pc, #496]	; (801157c <dwt_ioctl+0x1d2c>)
 801138c:	f7fd fa34 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 8011390:	e166      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011392:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801139c:	2200      	movs	r2, #0
 801139e:	4977      	ldr	r1, [pc, #476]	; (801157c <dwt_ioctl+0x1d2c>)
 80113a0:	f7fd f8ba 	bl	800e518 <dwt_modify32bitoffsetreg>
 80113a4:	2500      	movs	r5, #0
 80113a6:	e15b      	b.n	8011660 <dwt_ioctl+0x1e10>
 80113a8:	2c00      	cmp	r4, #0
 80113aa:	f000 822b 	beq.w	8011804 <dwt_ioctl+0x1fb4>
 80113ae:	7823      	ldrb	r3, [r4, #0]
 80113b0:	b93b      	cbnz	r3, 80113c2 <dwt_ioctl+0x1b72>
 80113b2:	2500      	movs	r5, #0
 80113b4:	9500      	str	r5, [sp, #0]
 80113b6:	237f      	movs	r3, #127	; 0x7f
 80113b8:	2203      	movs	r2, #3
 80113ba:	4971      	ldr	r1, [pc, #452]	; (8011580 <dwt_ioctl+0x1d30>)
 80113bc:	f7fd fa1c 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80113c0:	e14e      	b.n	8011660 <dwt_ioctl+0x1e10>
 80113c2:	2380      	movs	r3, #128	; 0x80
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	23ff      	movs	r3, #255	; 0xff
 80113c8:	2203      	movs	r2, #3
 80113ca:	496d      	ldr	r1, [pc, #436]	; (8011580 <dwt_ioctl+0x1d30>)
 80113cc:	f7fd fa14 	bl	800e7f8 <dwt_modify8bitoffsetreg>
 80113d0:	2500      	movs	r5, #0
 80113d2:	e145      	b.n	8011660 <dwt_ioctl+0x1e10>
 80113d4:	2c00      	cmp	r4, #0
 80113d6:	f000 8217 	beq.w	8011808 <dwt_ioctl+0x1fb8>
 80113da:	b2e3      	uxtb	r3, r4
 80113dc:	1c9a      	adds	r2, r3, #2
 80113de:	2301      	movs	r3, #1
 80113e0:	4093      	lsls	r3, r2
 80113e2:	3b01      	subs	r3, #1
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2200      	movs	r2, #0
 80113e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80113ec:	f7fc fd72 	bl	800ded4 <dwt_write8bitoffsetreg>
 80113f0:	2500      	movs	r5, #0
 80113f2:	e135      	b.n	8011660 <dwt_ioctl+0x1e10>
 80113f4:	2c00      	cmp	r4, #0
 80113f6:	f000 8209 	beq.w	801180c <dwt_ioctl+0x1fbc>
 80113fa:	7ae3      	ldrb	r3, [r4, #11]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f000 8207 	beq.w	8011810 <dwt_ioctl+0x1fc0>
 8011402:	7b63      	ldrb	r3, [r4, #13]
 8011404:	2b01      	cmp	r3, #1
 8011406:	7b20      	ldrb	r0, [r4, #12]
 8011408:	bf94      	ite	ls
 801140a:	2203      	movls	r2, #3
 801140c:	2204      	movhi	r2, #4
 801140e:	2110      	movs	r1, #16
 8011410:	4b5c      	ldr	r3, [pc, #368]	; (8011584 <dwt_ioctl+0x1d34>)
 8011412:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011416:	f7fb fdf5 	bl	800d004 <get_sts_mnth>
 801141a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801141e:	9000      	str	r0, [sp, #0]
 8011420:	f64f 7380 	movw	r3, #65408	; 0xff80
 8011424:	2202      	movs	r2, #2
 8011426:	4958      	ldr	r1, [pc, #352]	; (8011588 <dwt_ioctl+0x1d38>)
 8011428:	4630      	mov	r0, r6
 801142a:	f7fd fd75 	bl	800ef18 <dwt_modify16bitoffsetreg>
 801142e:	2394      	movs	r3, #148	; 0x94
 8011430:	2200      	movs	r2, #0
 8011432:	4956      	ldr	r1, [pc, #344]	; (801158c <dwt_ioctl+0x1d3c>)
 8011434:	4630      	mov	r0, r6
 8011436:	f7fc fd4d 	bl	800ded4 <dwt_write8bitoffsetreg>
 801143a:	2500      	movs	r5, #0
 801143c:	e110      	b.n	8011660 <dwt_ioctl+0x1e10>
 801143e:	2c00      	cmp	r4, #0
 8011440:	f000 81e8 	beq.w	8011814 <dwt_ioctl+0x1fc4>
 8011444:	2200      	movs	r2, #0
 8011446:	4952      	ldr	r1, [pc, #328]	; (8011590 <dwt_ioctl+0x1d40>)
 8011448:	f7fb fe81 	bl	800d14e <dwt_read32bitoffsetreg>
 801144c:	6020      	str	r0, [r4, #0]
 801144e:	2500      	movs	r5, #0
 8011450:	e106      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011452:	2c00      	cmp	r4, #0
 8011454:	f000 81e0 	beq.w	8011818 <dwt_ioctl+0x1fc8>
 8011458:	2200      	movs	r2, #0
 801145a:	494e      	ldr	r1, [pc, #312]	; (8011594 <dwt_ioctl+0x1d44>)
 801145c:	f7fb fe77 	bl	800d14e <dwt_read32bitoffsetreg>
 8011460:	6020      	str	r0, [r4, #0]
 8011462:	2500      	movs	r5, #0
 8011464:	e0fc      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011466:	2c00      	cmp	r4, #0
 8011468:	f000 81d8 	beq.w	801181c <dwt_ioctl+0x1fcc>
 801146c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8011470:	6023      	str	r3, [r4, #0]
 8011472:	2500      	movs	r5, #0
 8011474:	e0f4      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011476:	2c00      	cmp	r4, #0
 8011478:	f000 81d2 	beq.w	8011820 <dwt_ioctl+0x1fd0>
 801147c:	2500      	movs	r5, #0
 801147e:	950a      	str	r5, [sp, #40]	; 0x28
 8011480:	af0c      	add	r7, sp, #48	; 0x30
 8011482:	2319      	movs	r3, #25
 8011484:	f847 3d04 	str.w	r3, [r7, #-4]!
 8011488:	9700      	str	r7, [sp, #0]
 801148a:	2304      	movs	r3, #4
 801148c:	462a      	mov	r2, r5
 801148e:	4942      	ldr	r1, [pc, #264]	; (8011598 <dwt_ioctl+0x1d48>)
 8011490:	f7fc fac6 	bl	800da20 <dwt_writetodevice>
 8011494:	f641 7348 	movw	r3, #8008	; 0x1f48
 8011498:	930b      	str	r3, [sp, #44]	; 0x2c
 801149a:	9700      	str	r7, [sp, #0]
 801149c:	2304      	movs	r3, #4
 801149e:	462a      	mov	r2, r5
 80114a0:	493e      	ldr	r1, [pc, #248]	; (801159c <dwt_ioctl+0x1d4c>)
 80114a2:	4630      	mov	r0, r6
 80114a4:	f7fc fabc 	bl	800da20 <dwt_writetodevice>
 80114a8:	ab0a      	add	r3, sp, #40	; 0x28
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	2304      	movs	r3, #4
 80114ae:	462a      	mov	r2, r5
 80114b0:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80114b4:	4630      	mov	r0, r6
 80114b6:	f7fb fe40 	bl	800d13a <dwt_readfromdevice>
 80114ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114bc:	6023      	str	r3, [r4, #0]
 80114be:	e0cf      	b.n	8011660 <dwt_ioctl+0x1e10>
 80114c0:	2c00      	cmp	r4, #0
 80114c2:	f000 81af 	beq.w	8011824 <dwt_ioctl+0x1fd4>
 80114c6:	2200      	movs	r2, #0
 80114c8:	4935      	ldr	r1, [pc, #212]	; (80115a0 <dwt_ioctl+0x1d50>)
 80114ca:	f7fb fe40 	bl	800d14e <dwt_read32bitoffsetreg>
 80114ce:	b280      	uxth	r0, r0
 80114d0:	6020      	str	r0, [r4, #0]
 80114d2:	2200      	movs	r2, #0
 80114d4:	4933      	ldr	r1, [pc, #204]	; (80115a4 <dwt_ioctl+0x1d54>)
 80114d6:	4630      	mov	r0, r6
 80114d8:	f7fb fe39 	bl	800d14e <dwt_read32bitoffsetreg>
 80114dc:	0d43      	lsrs	r3, r0, #21
 80114de:	019b      	lsls	r3, r3, #6
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	6063      	str	r3, [r4, #4]
 80114e4:	2500      	movs	r5, #0
 80114e6:	e0bb      	b.n	8011660 <dwt_ioctl+0x1e10>
 80114e8:	2c00      	cmp	r4, #0
 80114ea:	f000 819d 	beq.w	8011828 <dwt_ioctl+0x1fd8>
 80114ee:	7d63      	ldrb	r3, [r4, #21]
 80114f0:	b133      	cbz	r3, 8011500 <dwt_ioctl+0x1cb0>
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d062      	beq.n	80115bc <dwt_ioctl+0x1d6c>
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	f000 8089 	beq.w	801160e <dwt_ioctl+0x1dbe>
 80114fc:	23ff      	movs	r3, #255	; 0xff
 80114fe:	e02f      	b.n	8011560 <dwt_ioctl+0x1d10>
 8011500:	2200      	movs	r2, #0
 8011502:	4929      	ldr	r1, [pc, #164]	; (80115a8 <dwt_ioctl+0x1d58>)
 8011504:	f7fb fe23 	bl	800d14e <dwt_read32bitoffsetreg>
 8011508:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801150c:	6020      	str	r0, [r4, #0]
 801150e:	2200      	movs	r2, #0
 8011510:	4926      	ldr	r1, [pc, #152]	; (80115ac <dwt_ioctl+0x1d5c>)
 8011512:	4630      	mov	r0, r6
 8011514:	f7fb fe1b 	bl	800d14e <dwt_read32bitoffsetreg>
 8011518:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801151c:	6060      	str	r0, [r4, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	4923      	ldr	r1, [pc, #140]	; (80115b0 <dwt_ioctl+0x1d60>)
 8011522:	4630      	mov	r0, r6
 8011524:	f7fb fe13 	bl	800d14e <dwt_read32bitoffsetreg>
 8011528:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801152c:	60a0      	str	r0, [r4, #8]
 801152e:	2200      	movs	r2, #0
 8011530:	4920      	ldr	r1, [pc, #128]	; (80115b4 <dwt_ioctl+0x1d64>)
 8011532:	4630      	mov	r0, r6
 8011534:	f7fb fe0b 	bl	800d14e <dwt_read32bitoffsetreg>
 8011538:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801153c:	60e0      	str	r0, [r4, #12]
 801153e:	2200      	movs	r2, #0
 8011540:	491d      	ldr	r1, [pc, #116]	; (80115b8 <dwt_ioctl+0x1d68>)
 8011542:	4630      	mov	r0, r6
 8011544:	f7fb fe03 	bl	800d14e <dwt_read32bitoffsetreg>
 8011548:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801154c:	6120      	str	r0, [r4, #16]
 801154e:	2203      	movs	r2, #3
 8011550:	490f      	ldr	r1, [pc, #60]	; (8011590 <dwt_ioctl+0x1d40>)
 8011552:	4630      	mov	r0, r6
 8011554:	f7fb fe50 	bl	800d1f8 <dwt_read8bitoffsetreg>
 8011558:	f3c0 1002 	ubfx	r0, r0, #4, #3
 801155c:	7520      	strb	r0, [r4, #20]
 801155e:	2300      	movs	r3, #0
 8011560:	75a3      	strb	r3, [r4, #22]
 8011562:	2500      	movs	r5, #0
 8011564:	e07c      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011566:	bf00      	nop
 8011568:	0011003c 	.word	0x0011003c
 801156c:	00110044 	.word	0x00110044
 8011570:	00110040 	.word	0x00110040
 8011574:	00070048 	.word	0x00070048
 8011578:	f7fc0fff 	.word	0xf7fc0fff
 801157c:	000f0028 	.word	0x000f0028
 8011580:	0007001c 	.word	0x0007001c
 8011584:	08012238 	.word	0x08012238
 8011588:	000e0014 	.word	0x000e0014
 801158c:	000e0018 	.word	0x000e0018
 8011590:	00030054 	.word	0x00030054
 8011594:	000f004c 	.word	0x000f004c
 8011598:	001f0004 	.word	0x001f0004
 801159c:	001f0008 	.word	0x001f0008
 80115a0:	000c0048 	.word	0x000c0048
 80115a4:	000c0028 	.word	0x000c0028
 80115a8:	000c0058 	.word	0x000c0058
 80115ac:	000c0030 	.word	0x000c0030
 80115b0:	000c0034 	.word	0x000c0034
 80115b4:	000c0038 	.word	0x000c0038
 80115b8:	000c002c 	.word	0x000c002c
 80115bc:	2200      	movs	r2, #0
 80115be:	49aa      	ldr	r1, [pc, #680]	; (8011868 <dwt_ioctl+0x2018>)
 80115c0:	f7fb fdc5 	bl	800d14e <dwt_read32bitoffsetreg>
 80115c4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80115c8:	6020      	str	r0, [r4, #0]
 80115ca:	2200      	movs	r2, #0
 80115cc:	49a7      	ldr	r1, [pc, #668]	; (801186c <dwt_ioctl+0x201c>)
 80115ce:	4630      	mov	r0, r6
 80115d0:	f7fb fdbd 	bl	800d14e <dwt_read32bitoffsetreg>
 80115d4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80115d8:	6060      	str	r0, [r4, #4]
 80115da:	2200      	movs	r2, #0
 80115dc:	49a4      	ldr	r1, [pc, #656]	; (8011870 <dwt_ioctl+0x2020>)
 80115de:	4630      	mov	r0, r6
 80115e0:	f7fb fdb5 	bl	800d14e <dwt_read32bitoffsetreg>
 80115e4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80115e8:	60a0      	str	r0, [r4, #8]
 80115ea:	2200      	movs	r2, #0
 80115ec:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80115f0:	4630      	mov	r0, r6
 80115f2:	f7fb fdac 	bl	800d14e <dwt_read32bitoffsetreg>
 80115f6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80115fa:	60e0      	str	r0, [r4, #12]
 80115fc:	2200      	movs	r2, #0
 80115fe:	499d      	ldr	r1, [pc, #628]	; (8011874 <dwt_ioctl+0x2024>)
 8011600:	4630      	mov	r0, r6
 8011602:	f7fb fda4 	bl	800d14e <dwt_read32bitoffsetreg>
 8011606:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801160a:	6120      	str	r0, [r4, #16]
 801160c:	e79f      	b.n	801154e <dwt_ioctl+0x1cfe>
 801160e:	2200      	movs	r2, #0
 8011610:	4999      	ldr	r1, [pc, #612]	; (8011878 <dwt_ioctl+0x2028>)
 8011612:	f7fb fd9c 	bl	800d14e <dwt_read32bitoffsetreg>
 8011616:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801161a:	6020      	str	r0, [r4, #0]
 801161c:	2200      	movs	r2, #0
 801161e:	4997      	ldr	r1, [pc, #604]	; (801187c <dwt_ioctl+0x202c>)
 8011620:	4630      	mov	r0, r6
 8011622:	f7fb fd94 	bl	800d14e <dwt_read32bitoffsetreg>
 8011626:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801162a:	6060      	str	r0, [r4, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	4994      	ldr	r1, [pc, #592]	; (8011880 <dwt_ioctl+0x2030>)
 8011630:	4630      	mov	r0, r6
 8011632:	f7fb fd8c 	bl	800d14e <dwt_read32bitoffsetreg>
 8011636:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801163a:	60a0      	str	r0, [r4, #8]
 801163c:	2200      	movs	r2, #0
 801163e:	4991      	ldr	r1, [pc, #580]	; (8011884 <dwt_ioctl+0x2034>)
 8011640:	4630      	mov	r0, r6
 8011642:	f7fb fd84 	bl	800d14e <dwt_read32bitoffsetreg>
 8011646:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801164a:	60e0      	str	r0, [r4, #12]
 801164c:	2200      	movs	r2, #0
 801164e:	498e      	ldr	r1, [pc, #568]	; (8011888 <dwt_ioctl+0x2038>)
 8011650:	4630      	mov	r0, r6
 8011652:	f7fb fd7c 	bl	800d14e <dwt_read32bitoffsetreg>
 8011656:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801165a:	6120      	str	r0, [r4, #16]
 801165c:	e777      	b.n	801154e <dwt_ioctl+0x1cfe>
 801165e:	2500      	movs	r5, #0
 8011660:	4628      	mov	r0, r5
 8011662:	b00d      	add	sp, #52	; 0x34
 8011664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011668:	2500      	movs	r5, #0
 801166a:	e7f9      	b.n	8011660 <dwt_ioctl+0x1e10>
 801166c:	2500      	movs	r5, #0
 801166e:	e7f7      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011670:	2500      	movs	r5, #0
 8011672:	e7f5      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011674:	2500      	movs	r5, #0
 8011676:	e7f3      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011678:	2500      	movs	r5, #0
 801167a:	e7f1      	b.n	8011660 <dwt_ioctl+0x1e10>
 801167c:	2500      	movs	r5, #0
 801167e:	e7ef      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011680:	2500      	movs	r5, #0
 8011682:	e7ed      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011684:	2500      	movs	r5, #0
 8011686:	e7eb      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011688:	2500      	movs	r5, #0
 801168a:	e7e9      	b.n	8011660 <dwt_ioctl+0x1e10>
 801168c:	2500      	movs	r5, #0
 801168e:	e7e7      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011690:	2500      	movs	r5, #0
 8011692:	e7e5      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011694:	2500      	movs	r5, #0
 8011696:	e7e3      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011698:	2500      	movs	r5, #0
 801169a:	e7e1      	b.n	8011660 <dwt_ioctl+0x1e10>
 801169c:	2500      	movs	r5, #0
 801169e:	e7df      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116a0:	2500      	movs	r5, #0
 80116a2:	e7dd      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116a4:	2500      	movs	r5, #0
 80116a6:	e7db      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116a8:	2500      	movs	r5, #0
 80116aa:	e7d9      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116ac:	2500      	movs	r5, #0
 80116ae:	e7d7      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116b0:	2500      	movs	r5, #0
 80116b2:	e7d5      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116b4:	2500      	movs	r5, #0
 80116b6:	e7d3      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116b8:	2500      	movs	r5, #0
 80116ba:	e7d1      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116bc:	2500      	movs	r5, #0
 80116be:	e7cf      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116c0:	2500      	movs	r5, #0
 80116c2:	e7cd      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116c4:	2500      	movs	r5, #0
 80116c6:	e7cb      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116c8:	2500      	movs	r5, #0
 80116ca:	e7c9      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116cc:	2500      	movs	r5, #0
 80116ce:	e7c7      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116d0:	2500      	movs	r5, #0
 80116d2:	e7c5      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116d4:	2500      	movs	r5, #0
 80116d6:	e7c3      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116d8:	2500      	movs	r5, #0
 80116da:	e7c1      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116dc:	2500      	movs	r5, #0
 80116de:	e7bf      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116e0:	2500      	movs	r5, #0
 80116e2:	e7bd      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116e4:	2500      	movs	r5, #0
 80116e6:	e7bb      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116e8:	2500      	movs	r5, #0
 80116ea:	e7b9      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116ec:	2500      	movs	r5, #0
 80116ee:	e7b7      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116f0:	2500      	movs	r5, #0
 80116f2:	e7b5      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116f4:	2500      	movs	r5, #0
 80116f6:	e7b3      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116f8:	2500      	movs	r5, #0
 80116fa:	e7b1      	b.n	8011660 <dwt_ioctl+0x1e10>
 80116fc:	2500      	movs	r5, #0
 80116fe:	e7af      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011700:	2500      	movs	r5, #0
 8011702:	e7ad      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011704:	2500      	movs	r5, #0
 8011706:	e7ab      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011708:	2500      	movs	r5, #0
 801170a:	e7a9      	b.n	8011660 <dwt_ioctl+0x1e10>
 801170c:	2500      	movs	r5, #0
 801170e:	e7a7      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011710:	2500      	movs	r5, #0
 8011712:	e7a5      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011714:	2500      	movs	r5, #0
 8011716:	e7a3      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011718:	2500      	movs	r5, #0
 801171a:	e7a1      	b.n	8011660 <dwt_ioctl+0x1e10>
 801171c:	2500      	movs	r5, #0
 801171e:	e79f      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011720:	2500      	movs	r5, #0
 8011722:	e79d      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011724:	2500      	movs	r5, #0
 8011726:	e79b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011728:	2500      	movs	r5, #0
 801172a:	e799      	b.n	8011660 <dwt_ioctl+0x1e10>
 801172c:	2500      	movs	r5, #0
 801172e:	e797      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011730:	2500      	movs	r5, #0
 8011732:	e795      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011734:	2500      	movs	r5, #0
 8011736:	e793      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011738:	2500      	movs	r5, #0
 801173a:	e791      	b.n	8011660 <dwt_ioctl+0x1e10>
 801173c:	2500      	movs	r5, #0
 801173e:	e78f      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011740:	2500      	movs	r5, #0
 8011742:	e78d      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011744:	2500      	movs	r5, #0
 8011746:	e78b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011748:	2500      	movs	r5, #0
 801174a:	e789      	b.n	8011660 <dwt_ioctl+0x1e10>
 801174c:	2500      	movs	r5, #0
 801174e:	e787      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011750:	2500      	movs	r5, #0
 8011752:	e785      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011754:	2500      	movs	r5, #0
 8011756:	e783      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011758:	2500      	movs	r5, #0
 801175a:	e781      	b.n	8011660 <dwt_ioctl+0x1e10>
 801175c:	2500      	movs	r5, #0
 801175e:	e77f      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011760:	2500      	movs	r5, #0
 8011762:	e77d      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011764:	2500      	movs	r5, #0
 8011766:	e77b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011768:	2500      	movs	r5, #0
 801176a:	e779      	b.n	8011660 <dwt_ioctl+0x1e10>
 801176c:	2500      	movs	r5, #0
 801176e:	e777      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011770:	2500      	movs	r5, #0
 8011772:	e775      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011774:	2500      	movs	r5, #0
 8011776:	e773      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011778:	2500      	movs	r5, #0
 801177a:	e771      	b.n	8011660 <dwt_ioctl+0x1e10>
 801177c:	2500      	movs	r5, #0
 801177e:	e76f      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011780:	2500      	movs	r5, #0
 8011782:	e76d      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011784:	2500      	movs	r5, #0
 8011786:	e76b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011788:	2500      	movs	r5, #0
 801178a:	e769      	b.n	8011660 <dwt_ioctl+0x1e10>
 801178c:	2500      	movs	r5, #0
 801178e:	e767      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011790:	2500      	movs	r5, #0
 8011792:	e765      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011794:	2500      	movs	r5, #0
 8011796:	e763      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011798:	2500      	movs	r5, #0
 801179a:	e761      	b.n	8011660 <dwt_ioctl+0x1e10>
 801179c:	2500      	movs	r5, #0
 801179e:	e75f      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117a0:	2500      	movs	r5, #0
 80117a2:	e75d      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117a4:	2500      	movs	r5, #0
 80117a6:	e75b      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117a8:	2500      	movs	r5, #0
 80117aa:	e759      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117ac:	2500      	movs	r5, #0
 80117ae:	e757      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117b0:	2500      	movs	r5, #0
 80117b2:	e755      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117b4:	2500      	movs	r5, #0
 80117b6:	e753      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117b8:	2500      	movs	r5, #0
 80117ba:	e751      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117bc:	2500      	movs	r5, #0
 80117be:	e74f      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117c0:	2500      	movs	r5, #0
 80117c2:	e74d      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117c4:	2500      	movs	r5, #0
 80117c6:	e74b      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117c8:	2500      	movs	r5, #0
 80117ca:	e749      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117cc:	2500      	movs	r5, #0
 80117ce:	e747      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80117d4:	e744      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80117da:	e741      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117dc:	2500      	movs	r5, #0
 80117de:	e73f      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117e0:	2500      	movs	r5, #0
 80117e2:	e73d      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117e4:	2500      	movs	r5, #0
 80117e6:	e73b      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117e8:	2500      	movs	r5, #0
 80117ea:	e739      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117ec:	2500      	movs	r5, #0
 80117ee:	e737      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117f0:	2500      	movs	r5, #0
 80117f2:	e735      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117f4:	2500      	movs	r5, #0
 80117f6:	e733      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117f8:	2500      	movs	r5, #0
 80117fa:	e731      	b.n	8011660 <dwt_ioctl+0x1e10>
 80117fc:	2500      	movs	r5, #0
 80117fe:	e72f      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011800:	2500      	movs	r5, #0
 8011802:	e72d      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011804:	2500      	movs	r5, #0
 8011806:	e72b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011808:	2500      	movs	r5, #0
 801180a:	e729      	b.n	8011660 <dwt_ioctl+0x1e10>
 801180c:	2500      	movs	r5, #0
 801180e:	e727      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011810:	2500      	movs	r5, #0
 8011812:	e725      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011814:	2500      	movs	r5, #0
 8011816:	e723      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011818:	2500      	movs	r5, #0
 801181a:	e721      	b.n	8011660 <dwt_ioctl+0x1e10>
 801181c:	2500      	movs	r5, #0
 801181e:	e71f      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011820:	2500      	movs	r5, #0
 8011822:	e71d      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011824:	2500      	movs	r5, #0
 8011826:	e71b      	b.n	8011660 <dwt_ioctl+0x1e10>
 8011828:	2500      	movs	r5, #0
 801182a:	e719      	b.n	8011660 <dwt_ioctl+0x1e10>
 801182c:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011830:	1e5a      	subs	r2, r3, #1
 8011832:	b2d2      	uxtb	r2, r2
 8011834:	2a01      	cmp	r2, #1
 8011836:	f67e ae60 	bls.w	80104fa <dwt_ioctl+0xcaa>
 801183a:	2202      	movs	r2, #2
 801183c:	f7fe be07 	b.w	801044e <dwt_ioctl+0xbfe>
 8011840:	4d12      	ldr	r5, [pc, #72]	; (801188c <dwt_ioctl+0x203c>)
 8011842:	e57c      	b.n	801133e <dwt_ioctl+0x1aee>
 8011844:	2400      	movs	r4, #0
 8011846:	9400      	str	r4, [sp, #0]
 8011848:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801184c:	4622      	mov	r2, r4
 801184e:	2110      	movs	r1, #16
 8011850:	f7fc fe62 	bl	800e518 <dwt_modify32bitoffsetreg>
 8011854:	9400      	str	r4, [sp, #0]
 8011856:	4b0e      	ldr	r3, [pc, #56]	; (8011890 <dwt_ioctl+0x2040>)
 8011858:	4622      	mov	r2, r4
 801185a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801185e:	4630      	mov	r0, r6
 8011860:	f7fc fe5a 	bl	800e518 <dwt_modify32bitoffsetreg>
 8011864:	e57e      	b.n	8011364 <dwt_ioctl+0x1b14>
 8011866:	bf00      	nop
 8011868:	000d0020 	.word	0x000d0020
 801186c:	000c0064 	.word	0x000c0064
 8011870:	000c0068 	.word	0x000c0068
 8011874:	000c0060 	.word	0x000c0060
 8011878:	000d0068 	.word	0x000d0068
 801187c:	000d0040 	.word	0x000d0040
 8011880:	000d0044 	.word	0x000d0044
 8011884:	000d0048 	.word	0x000d0048
 8011888:	000d003c 	.word	0x000d003c
 801188c:	08001000 	.word	0x08001000
 8011890:	f7fc0fff 	.word	0xf7fc0fff

08011894 <_init>:
 8011894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011896:	b085      	sub	sp, #20
 8011898:	4604      	mov	r4, r0
 801189a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801189c:	6819      	ldr	r1, [r3, #0]
 801189e:	f7fd fea1 	bl	800f5e4 <ull_initialise>
 80118a2:	4606      	mov	r6, r0
 80118a4:	6823      	ldr	r3, [r4, #0]
 80118a6:	691b      	ldr	r3, [r3, #16]
 80118a8:	4798      	blx	r3
 80118aa:	ab03      	add	r3, sp, #12
 80118ac:	2200      	movs	r2, #0
 80118ae:	4611      	mov	r1, r2
 80118b0:	4620      	mov	r0, r4
 80118b2:	f7fd ffcd 	bl	800f850 <dwt_ioctl>
 80118b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ba:	6819      	ldr	r1, [r3, #0]
 80118bc:	4620      	mov	r0, r4
 80118be:	f7fd fc43 	bl	800f148 <ull_configure>
 80118c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c6:	6859      	ldr	r1, [r3, #4]
 80118c8:	4620      	mov	r0, r4
 80118ca:	f7fd f993 	bl	800ebf4 <ull_configuretxrf>
 80118ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d2:	89d9      	ldrh	r1, [r3, #14]
 80118d4:	4620      	mov	r0, r4
 80118d6:	f7fc f8be 	bl	800da56 <ull_setrxantennadelay>
 80118da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118de:	8999      	ldrh	r1, [r3, #12]
 80118e0:	4620      	mov	r0, r4
 80118e2:	f7fc f8c0 	bl	800da66 <ull_settxantennadelay>
 80118e6:	2100      	movs	r1, #0
 80118e8:	4620      	mov	r0, r4
 80118ea:	f7fc f94a 	bl	800db82 <ull_setrxaftertxdelay>
 80118ee:	2500      	movs	r5, #0
 80118f0:	9500      	str	r5, [sp, #0]
 80118f2:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80118f6:	462a      	mov	r2, r5
 80118f8:	2110      	movs	r1, #16
 80118fa:	4620      	mov	r0, r4
 80118fc:	f7fd fb0c 	bl	800ef18 <dwt_modify16bitoffsetreg>
 8011900:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011904:	895a      	ldrh	r2, [r3, #10]
 8011906:	8919      	ldrh	r1, [r3, #8]
 8011908:	4620      	mov	r0, r4
 801190a:	f7fd fa03 	bl	800ed14 <ull_configureframefilter>
 801190e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011912:	8a1b      	ldrh	r3, [r3, #16]
 8011914:	2202      	movs	r2, #2
 8011916:	210c      	movs	r1, #12
 8011918:	4620      	mov	r0, r4
 801191a:	f7fc f88c 	bl	800da36 <dwt_write16bitoffsetreg>
 801191e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011922:	8a5b      	ldrh	r3, [r3, #18]
 8011924:	462a      	mov	r2, r5
 8011926:	210c      	movs	r1, #12
 8011928:	4620      	mov	r0, r4
 801192a:	f7fc f884 	bl	800da36 <dwt_write16bitoffsetreg>
 801192e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011930:	7a19      	ldrb	r1, [r3, #8]
 8011932:	4620      	mov	r0, r4
 8011934:	f7fd fb2e 	bl	800ef94 <ull_setleds>
 8011938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801193a:	68d9      	ldr	r1, [r3, #12]
 801193c:	4620      	mov	r0, r4
 801193e:	f7fc f949 	bl	800dbd4 <ull_setlnapamode>
 8011942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011944:	7e0b      	ldrb	r3, [r1, #24]
 8011946:	694a      	ldr	r2, [r1, #20]
 8011948:	6909      	ldr	r1, [r1, #16]
 801194a:	4620      	mov	r0, r4
 801194c:	f7fd fa68 	bl	800ee20 <ull_setinterrupt>
 8011950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011952:	7f9a      	ldrb	r2, [r3, #30]
 8011954:	8b99      	ldrh	r1, [r3, #28]
 8011956:	4620      	mov	r0, r4
 8011958:	f7fc fb90 	bl	800e07c <ull_configuresleep>
 801195c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801195e:	7b53      	ldrb	r3, [r2, #13]
 8011960:	2b2e      	cmp	r3, #46	; 0x2e
 8011962:	d005      	beq.n	8011970 <_init+0xdc>
 8011964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011966:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801196a:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 801196e:	d00a      	beq.n	8011986 <_init+0xf2>
 8011970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011972:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801197a:	7353      	strb	r3, [r2, #13]
 801197c:	2200      	movs	r2, #0
 801197e:	4928      	ldr	r1, [pc, #160]	; (8011a20 <_init+0x18c>)
 8011980:	4620      	mov	r0, r4
 8011982:	f7fc faa7 	bl	800ded4 <dwt_write8bitoffsetreg>
 8011986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011988:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 801198c:	4620      	mov	r0, r4
 801198e:	f7fc ff63 	bl	800e858 <ull_configciadiag>
 8011992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011994:	6a19      	ldr	r1, [r3, #32]
 8011996:	4620      	mov	r0, r4
 8011998:	f7fc f93c 	bl	800dc14 <ull_configurestskey>
 801199c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801199e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80119a0:	4620      	mov	r0, r4
 80119a2:	f7fc f95b 	bl	800dc5c <ull_configurestsiv>
 80119a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80119ac:	bb9b      	cbnz	r3, 8011a16 <_init+0x182>
 80119ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119b0:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80119b4:	4620      	mov	r0, r4
 80119b6:	f7fc fb05 	bl	800dfc4 <ull_configeventcounters>
 80119ba:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 80119be:	2d00      	cmp	r5, #0
 80119c0:	db26      	blt.n	8011a10 <_init+0x17c>
 80119c2:	2301      	movs	r3, #1
 80119c4:	fa03 f505 	lsl.w	r5, r3, r5
 80119c8:	b2af      	uxth	r7, r5
 80119ca:	4a16      	ldr	r2, [pc, #88]	; (8011a24 <_init+0x190>)
 80119cc:	4639      	mov	r1, r7
 80119ce:	4620      	mov	r0, r4
 80119d0:	f7fc fed4 	bl	800e77c <ull_setgpiomode>
 80119d4:	f10d 030a 	add.w	r3, sp, #10
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	2302      	movs	r3, #2
 80119dc:	2200      	movs	r2, #0
 80119de:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80119e2:	4620      	mov	r0, r4
 80119e4:	f7fb fba9 	bl	800d13a <dwt_readfromdevice>
 80119e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80119ec:	ea23 0305 	bic.w	r3, r3, r5
 80119f0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80119f4:	2200      	movs	r2, #0
 80119f6:	490c      	ldr	r1, [pc, #48]	; (8011a28 <_init+0x194>)
 80119f8:	4620      	mov	r0, r4
 80119fa:	f7fc f81c 	bl	800da36 <dwt_write16bitoffsetreg>
 80119fe:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8011a02:	fab2 f282 	clz	r2, r2
 8011a06:	0952      	lsrs	r2, r2, #5
 8011a08:	4639      	mov	r1, r7
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f7fd fb40 	bl	800f090 <ull_setgpiovalue>
 8011a10:	4630      	mov	r0, r6
 8011a12:	b005      	add	sp, #20
 8011a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a16:	4620      	mov	r0, r4
 8011a18:	f7fc ff54 	bl	800e8c4 <ull_configurestsloadiv>
 8011a1c:	e7c7      	b.n	80119ae <_init+0x11a>
 8011a1e:	bf00      	nop
 8011a20:	00090014 	.word	0x00090014
 8011a24:	01200492 	.word	0x01200492
 8011a28:	00050008 	.word	0x00050008

08011a2c <__register_exitproc>:
 8011a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a30:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011aec <__register_exitproc+0xc0>
 8011a34:	4606      	mov	r6, r0
 8011a36:	f8d8 0000 	ldr.w	r0, [r8]
 8011a3a:	461f      	mov	r7, r3
 8011a3c:	460d      	mov	r5, r1
 8011a3e:	4691      	mov	r9, r2
 8011a40:	f000 f89a 	bl	8011b78 <__retarget_lock_acquire_recursive>
 8011a44:	4b25      	ldr	r3, [pc, #148]	; (8011adc <__register_exitproc+0xb0>)
 8011a46:	681c      	ldr	r4, [r3, #0]
 8011a48:	b934      	cbnz	r4, 8011a58 <__register_exitproc+0x2c>
 8011a4a:	4c25      	ldr	r4, [pc, #148]	; (8011ae0 <__register_exitproc+0xb4>)
 8011a4c:	601c      	str	r4, [r3, #0]
 8011a4e:	4b25      	ldr	r3, [pc, #148]	; (8011ae4 <__register_exitproc+0xb8>)
 8011a50:	b113      	cbz	r3, 8011a58 <__register_exitproc+0x2c>
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011a58:	6863      	ldr	r3, [r4, #4]
 8011a5a:	2b1f      	cmp	r3, #31
 8011a5c:	dd07      	ble.n	8011a6e <__register_exitproc+0x42>
 8011a5e:	f8d8 0000 	ldr.w	r0, [r8]
 8011a62:	f000 f88b 	bl	8011b7c <__retarget_lock_release_recursive>
 8011a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a6e:	b34e      	cbz	r6, 8011ac4 <__register_exitproc+0x98>
 8011a70:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011a74:	b988      	cbnz	r0, 8011a9a <__register_exitproc+0x6e>
 8011a76:	4b1c      	ldr	r3, [pc, #112]	; (8011ae8 <__register_exitproc+0xbc>)
 8011a78:	b923      	cbnz	r3, 8011a84 <__register_exitproc+0x58>
 8011a7a:	f8d8 0000 	ldr.w	r0, [r8]
 8011a7e:	f000 f87c 	bl	8011b7a <__retarget_lock_release>
 8011a82:	e7f0      	b.n	8011a66 <__register_exitproc+0x3a>
 8011a84:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011a88:	f000 f87a 	bl	8011b80 <malloc>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d0f4      	beq.n	8011a7a <__register_exitproc+0x4e>
 8011a90:	2300      	movs	r3, #0
 8011a92:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011a96:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011a9a:	6863      	ldr	r3, [r4, #4]
 8011a9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	409a      	lsls	r2, r3
 8011aa4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011aa8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011aac:	4313      	orrs	r3, r2
 8011aae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011ab2:	2e02      	cmp	r6, #2
 8011ab4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011ab8:	bf02      	ittt	eq
 8011aba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011abe:	4313      	orreq	r3, r2
 8011ac0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8011ac4:	6863      	ldr	r3, [r4, #4]
 8011ac6:	f8d8 0000 	ldr.w	r0, [r8]
 8011aca:	1c5a      	adds	r2, r3, #1
 8011acc:	3302      	adds	r3, #2
 8011ace:	6062      	str	r2, [r4, #4]
 8011ad0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011ad4:	f000 f852 	bl	8011b7c <__retarget_lock_release_recursive>
 8011ad8:	2000      	movs	r0, #0
 8011ada:	e7c6      	b.n	8011a6a <__register_exitproc+0x3e>
 8011adc:	200002e4 	.word	0x200002e4
 8011ae0:	20000258 	.word	0x20000258
 8011ae4:	080122a8 	.word	0x080122a8
 8011ae8:	08011b81 	.word	0x08011b81
 8011aec:	20000068 	.word	0x20000068

08011af0 <atexit>:
 8011af0:	2300      	movs	r3, #0
 8011af2:	4601      	mov	r1, r0
 8011af4:	461a      	mov	r2, r3
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7ff bf98 	b.w	8011a2c <__register_exitproc>

08011afc <__errno>:
 8011afc:	4b01      	ldr	r3, [pc, #4]	; (8011b04 <__errno+0x8>)
 8011afe:	6818      	ldr	r0, [r3, #0]
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop
 8011b04:	2000006c 	.word	0x2000006c

08011b08 <__libc_fini_array>:
 8011b08:	b538      	push	{r3, r4, r5, lr}
 8011b0a:	4d07      	ldr	r5, [pc, #28]	; (8011b28 <__libc_fini_array+0x20>)
 8011b0c:	4c07      	ldr	r4, [pc, #28]	; (8011b2c <__libc_fini_array+0x24>)
 8011b0e:	1b64      	subs	r4, r4, r5
 8011b10:	10a4      	asrs	r4, r4, #2
 8011b12:	b91c      	cbnz	r4, 8011b1c <__libc_fini_array+0x14>
 8011b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b18:	f000 b91c 	b.w	8011d54 <_fini>
 8011b1c:	3c01      	subs	r4, #1
 8011b1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011b22:	4798      	blx	r3
 8011b24:	e7f5      	b.n	8011b12 <__libc_fini_array+0xa>
 8011b26:	bf00      	nop
 8011b28:	080122cc 	.word	0x080122cc
 8011b2c:	080122d0 	.word	0x080122d0

08011b30 <__libc_init_array>:
 8011b30:	b570      	push	{r4, r5, r6, lr}
 8011b32:	4d0d      	ldr	r5, [pc, #52]	; (8011b68 <__libc_init_array+0x38>)
 8011b34:	4c0d      	ldr	r4, [pc, #52]	; (8011b6c <__libc_init_array+0x3c>)
 8011b36:	1b64      	subs	r4, r4, r5
 8011b38:	10a4      	asrs	r4, r4, #2
 8011b3a:	2600      	movs	r6, #0
 8011b3c:	42a6      	cmp	r6, r4
 8011b3e:	d109      	bne.n	8011b54 <__libc_init_array+0x24>
 8011b40:	4d0b      	ldr	r5, [pc, #44]	; (8011b70 <__libc_init_array+0x40>)
 8011b42:	4c0c      	ldr	r4, [pc, #48]	; (8011b74 <__libc_init_array+0x44>)
 8011b44:	f000 f900 	bl	8011d48 <_init>
 8011b48:	1b64      	subs	r4, r4, r5
 8011b4a:	10a4      	asrs	r4, r4, #2
 8011b4c:	2600      	movs	r6, #0
 8011b4e:	42a6      	cmp	r6, r4
 8011b50:	d105      	bne.n	8011b5e <__libc_init_array+0x2e>
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b58:	4798      	blx	r3
 8011b5a:	3601      	adds	r6, #1
 8011b5c:	e7ee      	b.n	8011b3c <__libc_init_array+0xc>
 8011b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b62:	4798      	blx	r3
 8011b64:	3601      	adds	r6, #1
 8011b66:	e7f2      	b.n	8011b4e <__libc_init_array+0x1e>
 8011b68:	080122b4 	.word	0x080122b4
 8011b6c:	080122b4 	.word	0x080122b4
 8011b70:	080122b4 	.word	0x080122b4
 8011b74:	080122cc 	.word	0x080122cc

08011b78 <__retarget_lock_acquire_recursive>:
 8011b78:	4770      	bx	lr

08011b7a <__retarget_lock_release>:
 8011b7a:	4770      	bx	lr

08011b7c <__retarget_lock_release_recursive>:
 8011b7c:	4770      	bx	lr
	...

08011b80 <malloc>:
 8011b80:	4b02      	ldr	r3, [pc, #8]	; (8011b8c <malloc+0xc>)
 8011b82:	4601      	mov	r1, r0
 8011b84:	6818      	ldr	r0, [r3, #0]
 8011b86:	f000 b847 	b.w	8011c18 <_malloc_r>
 8011b8a:	bf00      	nop
 8011b8c:	2000006c 	.word	0x2000006c

08011b90 <memcmp>:
 8011b90:	b510      	push	{r4, lr}
 8011b92:	3901      	subs	r1, #1
 8011b94:	4402      	add	r2, r0
 8011b96:	4290      	cmp	r0, r2
 8011b98:	d101      	bne.n	8011b9e <memcmp+0xe>
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	e005      	b.n	8011baa <memcmp+0x1a>
 8011b9e:	7803      	ldrb	r3, [r0, #0]
 8011ba0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ba4:	42a3      	cmp	r3, r4
 8011ba6:	d001      	beq.n	8011bac <memcmp+0x1c>
 8011ba8:	1b18      	subs	r0, r3, r4
 8011baa:	bd10      	pop	{r4, pc}
 8011bac:	3001      	adds	r0, #1
 8011bae:	e7f2      	b.n	8011b96 <memcmp+0x6>

08011bb0 <memset>:
 8011bb0:	4402      	add	r2, r0
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d100      	bne.n	8011bba <memset+0xa>
 8011bb8:	4770      	bx	lr
 8011bba:	f803 1b01 	strb.w	r1, [r3], #1
 8011bbe:	e7f9      	b.n	8011bb4 <memset+0x4>

08011bc0 <__malloc_lock>:
 8011bc0:	4801      	ldr	r0, [pc, #4]	; (8011bc8 <__malloc_lock+0x8>)
 8011bc2:	f7ff bfd9 	b.w	8011b78 <__retarget_lock_acquire_recursive>
 8011bc6:	bf00      	nop
 8011bc8:	200002e9 	.word	0x200002e9

08011bcc <__malloc_unlock>:
 8011bcc:	4801      	ldr	r0, [pc, #4]	; (8011bd4 <__malloc_unlock+0x8>)
 8011bce:	f7ff bfd5 	b.w	8011b7c <__retarget_lock_release_recursive>
 8011bd2:	bf00      	nop
 8011bd4:	200002e9 	.word	0x200002e9

08011bd8 <sbrk_aligned>:
 8011bd8:	b570      	push	{r4, r5, r6, lr}
 8011bda:	4e0e      	ldr	r6, [pc, #56]	; (8011c14 <sbrk_aligned+0x3c>)
 8011bdc:	460c      	mov	r4, r1
 8011bde:	6831      	ldr	r1, [r6, #0]
 8011be0:	4605      	mov	r5, r0
 8011be2:	b911      	cbnz	r1, 8011bea <sbrk_aligned+0x12>
 8011be4:	f000 f88c 	bl	8011d00 <_sbrk_r>
 8011be8:	6030      	str	r0, [r6, #0]
 8011bea:	4621      	mov	r1, r4
 8011bec:	4628      	mov	r0, r5
 8011bee:	f000 f887 	bl	8011d00 <_sbrk_r>
 8011bf2:	1c43      	adds	r3, r0, #1
 8011bf4:	d00a      	beq.n	8011c0c <sbrk_aligned+0x34>
 8011bf6:	1cc4      	adds	r4, r0, #3
 8011bf8:	f024 0403 	bic.w	r4, r4, #3
 8011bfc:	42a0      	cmp	r0, r4
 8011bfe:	d007      	beq.n	8011c10 <sbrk_aligned+0x38>
 8011c00:	1a21      	subs	r1, r4, r0
 8011c02:	4628      	mov	r0, r5
 8011c04:	f000 f87c 	bl	8011d00 <_sbrk_r>
 8011c08:	3001      	adds	r0, #1
 8011c0a:	d101      	bne.n	8011c10 <sbrk_aligned+0x38>
 8011c0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011c10:	4620      	mov	r0, r4
 8011c12:	bd70      	pop	{r4, r5, r6, pc}
 8011c14:	200002f0 	.word	0x200002f0

08011c18 <_malloc_r>:
 8011c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c1c:	1ccd      	adds	r5, r1, #3
 8011c1e:	f025 0503 	bic.w	r5, r5, #3
 8011c22:	3508      	adds	r5, #8
 8011c24:	2d0c      	cmp	r5, #12
 8011c26:	bf38      	it	cc
 8011c28:	250c      	movcc	r5, #12
 8011c2a:	2d00      	cmp	r5, #0
 8011c2c:	4607      	mov	r7, r0
 8011c2e:	db01      	blt.n	8011c34 <_malloc_r+0x1c>
 8011c30:	42a9      	cmp	r1, r5
 8011c32:	d905      	bls.n	8011c40 <_malloc_r+0x28>
 8011c34:	230c      	movs	r3, #12
 8011c36:	603b      	str	r3, [r7, #0]
 8011c38:	2600      	movs	r6, #0
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c40:	4e2e      	ldr	r6, [pc, #184]	; (8011cfc <_malloc_r+0xe4>)
 8011c42:	f7ff ffbd 	bl	8011bc0 <__malloc_lock>
 8011c46:	6833      	ldr	r3, [r6, #0]
 8011c48:	461c      	mov	r4, r3
 8011c4a:	bb34      	cbnz	r4, 8011c9a <_malloc_r+0x82>
 8011c4c:	4629      	mov	r1, r5
 8011c4e:	4638      	mov	r0, r7
 8011c50:	f7ff ffc2 	bl	8011bd8 <sbrk_aligned>
 8011c54:	1c43      	adds	r3, r0, #1
 8011c56:	4604      	mov	r4, r0
 8011c58:	d14d      	bne.n	8011cf6 <_malloc_r+0xde>
 8011c5a:	6834      	ldr	r4, [r6, #0]
 8011c5c:	4626      	mov	r6, r4
 8011c5e:	2e00      	cmp	r6, #0
 8011c60:	d140      	bne.n	8011ce4 <_malloc_r+0xcc>
 8011c62:	6823      	ldr	r3, [r4, #0]
 8011c64:	4631      	mov	r1, r6
 8011c66:	4638      	mov	r0, r7
 8011c68:	eb04 0803 	add.w	r8, r4, r3
 8011c6c:	f000 f848 	bl	8011d00 <_sbrk_r>
 8011c70:	4580      	cmp	r8, r0
 8011c72:	d13a      	bne.n	8011cea <_malloc_r+0xd2>
 8011c74:	6821      	ldr	r1, [r4, #0]
 8011c76:	3503      	adds	r5, #3
 8011c78:	1a6d      	subs	r5, r5, r1
 8011c7a:	f025 0503 	bic.w	r5, r5, #3
 8011c7e:	3508      	adds	r5, #8
 8011c80:	2d0c      	cmp	r5, #12
 8011c82:	bf38      	it	cc
 8011c84:	250c      	movcc	r5, #12
 8011c86:	4629      	mov	r1, r5
 8011c88:	4638      	mov	r0, r7
 8011c8a:	f7ff ffa5 	bl	8011bd8 <sbrk_aligned>
 8011c8e:	3001      	adds	r0, #1
 8011c90:	d02b      	beq.n	8011cea <_malloc_r+0xd2>
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	442b      	add	r3, r5
 8011c96:	6023      	str	r3, [r4, #0]
 8011c98:	e00e      	b.n	8011cb8 <_malloc_r+0xa0>
 8011c9a:	6822      	ldr	r2, [r4, #0]
 8011c9c:	1b52      	subs	r2, r2, r5
 8011c9e:	d41e      	bmi.n	8011cde <_malloc_r+0xc6>
 8011ca0:	2a0b      	cmp	r2, #11
 8011ca2:	d916      	bls.n	8011cd2 <_malloc_r+0xba>
 8011ca4:	1961      	adds	r1, r4, r5
 8011ca6:	42a3      	cmp	r3, r4
 8011ca8:	6025      	str	r5, [r4, #0]
 8011caa:	bf18      	it	ne
 8011cac:	6059      	strne	r1, [r3, #4]
 8011cae:	6863      	ldr	r3, [r4, #4]
 8011cb0:	bf08      	it	eq
 8011cb2:	6031      	streq	r1, [r6, #0]
 8011cb4:	5162      	str	r2, [r4, r5]
 8011cb6:	604b      	str	r3, [r1, #4]
 8011cb8:	4638      	mov	r0, r7
 8011cba:	f104 060b 	add.w	r6, r4, #11
 8011cbe:	f7ff ff85 	bl	8011bcc <__malloc_unlock>
 8011cc2:	f026 0607 	bic.w	r6, r6, #7
 8011cc6:	1d23      	adds	r3, r4, #4
 8011cc8:	1af2      	subs	r2, r6, r3
 8011cca:	d0b6      	beq.n	8011c3a <_malloc_r+0x22>
 8011ccc:	1b9b      	subs	r3, r3, r6
 8011cce:	50a3      	str	r3, [r4, r2]
 8011cd0:	e7b3      	b.n	8011c3a <_malloc_r+0x22>
 8011cd2:	6862      	ldr	r2, [r4, #4]
 8011cd4:	42a3      	cmp	r3, r4
 8011cd6:	bf0c      	ite	eq
 8011cd8:	6032      	streq	r2, [r6, #0]
 8011cda:	605a      	strne	r2, [r3, #4]
 8011cdc:	e7ec      	b.n	8011cb8 <_malloc_r+0xa0>
 8011cde:	4623      	mov	r3, r4
 8011ce0:	6864      	ldr	r4, [r4, #4]
 8011ce2:	e7b2      	b.n	8011c4a <_malloc_r+0x32>
 8011ce4:	4634      	mov	r4, r6
 8011ce6:	6876      	ldr	r6, [r6, #4]
 8011ce8:	e7b9      	b.n	8011c5e <_malloc_r+0x46>
 8011cea:	230c      	movs	r3, #12
 8011cec:	603b      	str	r3, [r7, #0]
 8011cee:	4638      	mov	r0, r7
 8011cf0:	f7ff ff6c 	bl	8011bcc <__malloc_unlock>
 8011cf4:	e7a1      	b.n	8011c3a <_malloc_r+0x22>
 8011cf6:	6025      	str	r5, [r4, #0]
 8011cf8:	e7de      	b.n	8011cb8 <_malloc_r+0xa0>
 8011cfa:	bf00      	nop
 8011cfc:	200002ec 	.word	0x200002ec

08011d00 <_sbrk_r>:
 8011d00:	b538      	push	{r3, r4, r5, lr}
 8011d02:	4d06      	ldr	r5, [pc, #24]	; (8011d1c <_sbrk_r+0x1c>)
 8011d04:	2300      	movs	r3, #0
 8011d06:	4604      	mov	r4, r0
 8011d08:	4608      	mov	r0, r1
 8011d0a:	602b      	str	r3, [r5, #0]
 8011d0c:	f7ef fc74 	bl	80015f8 <_sbrk>
 8011d10:	1c43      	adds	r3, r0, #1
 8011d12:	d102      	bne.n	8011d1a <_sbrk_r+0x1a>
 8011d14:	682b      	ldr	r3, [r5, #0]
 8011d16:	b103      	cbz	r3, 8011d1a <_sbrk_r+0x1a>
 8011d18:	6023      	str	r3, [r4, #0]
 8011d1a:	bd38      	pop	{r3, r4, r5, pc}
 8011d1c:	200003fc 	.word	0x200003fc

08011d20 <__stack_chk_init>:
 8011d20:	4b03      	ldr	r3, [pc, #12]	; (8011d30 <__stack_chk_init+0x10>)
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	b912      	cbnz	r2, 8011d2c <__stack_chk_init+0xc>
 8011d26:	f5a2 0276 	sub.w	r2, r2, #16121856	; 0xf60000
 8011d2a:	601a      	str	r2, [r3, #0]
 8011d2c:	4770      	bx	lr
 8011d2e:	bf00      	nop
 8011d30:	20000400 	.word	0x20000400

08011d34 <register_fini>:
 8011d34:	4b02      	ldr	r3, [pc, #8]	; (8011d40 <register_fini+0xc>)
 8011d36:	b113      	cbz	r3, 8011d3e <register_fini+0xa>
 8011d38:	4802      	ldr	r0, [pc, #8]	; (8011d44 <register_fini+0x10>)
 8011d3a:	f7ff bed9 	b.w	8011af0 <atexit>
 8011d3e:	4770      	bx	lr
 8011d40:	00000000 	.word	0x00000000
 8011d44:	08011b09 	.word	0x08011b09

08011d48 <_init>:
 8011d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d4a:	bf00      	nop
 8011d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d4e:	bc08      	pop	{r3}
 8011d50:	469e      	mov	lr, r3
 8011d52:	4770      	bx	lr

08011d54 <_fini>:
 8011d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d56:	bf00      	nop
 8011d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d5a:	bc08      	pop	{r3}
 8011d5c:	469e      	mov	lr, r3
 8011d5e:	4770      	bx	lr
