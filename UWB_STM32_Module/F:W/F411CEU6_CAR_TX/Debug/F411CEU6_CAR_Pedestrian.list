
F411CEU6_CAR_Pedestrian.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bdc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08011d74  08011d74  00021d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122c0  080122c0  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  080122c0  080122c0  000222c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122c8  080122c8  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  080122c8  080122c8  000222c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122e0  080122e0  000222e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080122e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200000d0  080123b4  000300d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080123b4  00030404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131a3  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd4  00000000  00000000  000432a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00045f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00046f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019162  00000000  00000000  00047e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001486e  00000000  00000000  00060f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009359d  00000000  00000000  000757f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  00108d8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  00108e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      00000453  00000000  00000000  0010d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <dw3000_driver>:
 8000198:	12 03 ca de 0f ff ff ff fc 1f 01 08 04 20 01 08     ............. ..
 80001a8:	38 1f 01 08 fc 1e 01 08 07 00 06 00                 8...........

080001b4 <dw3700_driver>:
 80001b4:	13 03 ca de 0f ff ff ff fc 1f 01 08 04 20 01 08     ............. ..
 80001c4:	78 20 01 08 3c 20 01 08 07 00 06 00                 x ..< ......

080001d0 <dw3720_driver>:
 80001d0:	14 03 ca de 0f ff ff ff fc 1f 01 08 04 20 01 08     ............. ..
 80001e0:	88 21 01 08 4c 21 01 08 07 00 06 00                 .!..L!......

080001ec <__do_global_dtors_aux>:
 80001ec:	b510      	push	{r4, lr}
 80001ee:	4c05      	ldr	r4, [pc, #20]	; (8000204 <__do_global_dtors_aux+0x18>)
 80001f0:	7823      	ldrb	r3, [r4, #0]
 80001f2:	b933      	cbnz	r3, 8000202 <__do_global_dtors_aux+0x16>
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x1c>)
 80001f6:	b113      	cbz	r3, 80001fe <__do_global_dtors_aux+0x12>
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <__do_global_dtors_aux+0x20>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	2301      	movs	r3, #1
 8000200:	7023      	strb	r3, [r4, #0]
 8000202:	bd10      	pop	{r4, pc}
 8000204:	200000d0 	.word	0x200000d0
 8000208:	00000000 	.word	0x00000000
 800020c:	08011d5c 	.word	0x08011d5c

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	4b03      	ldr	r3, [pc, #12]	; (8000220 <frame_dummy+0x10>)
 8000214:	b11b      	cbz	r3, 800021e <frame_dummy+0xe>
 8000216:	4903      	ldr	r1, [pc, #12]	; (8000224 <frame_dummy+0x14>)
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <frame_dummy+0x18>)
 800021a:	f3af 8000 	nop.w
 800021e:	bd08      	pop	{r3, pc}
 8000220:	00000000 	.word	0x00000000
 8000224:	200000d4 	.word	0x200000d4
 8000228:	08011d5c 	.word	0x08011d5c

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f7ff bff2 	b.w	800023c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <Pdoa_uwb_tx>:

/**
 * Application entry point.
 */
int Pdoa_uwb_tx(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000546:	f000 fbbb 	bl	8000cc0 <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 800054a:	f000 fb39 	bl	8000bc0 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 800054e:	2002      	movs	r0, #2
 8000550:	f000 fb0a 	bl	8000b68 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <Pdoa_uwb_tx+0xb8>)
 8000556:	f003 ffaf 	bl	80044b8 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 800055a:	bf00      	nop
 800055c:	f004 f8b4 	bl	80046c8 <dwt_checkidlerc>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0fa      	beq.n	800055c <Pdoa_uwb_tx+0x1c>

    if (dwt_initialise(DWT_DW_INIT /*| DWT_READ_OTP_PID*/) == DWT_ERROR)
 8000566:	2000      	movs	r0, #0
 8000568:	f004 f800 	bl	800456c <dwt_initialise>
 800056c:	4603      	mov	r3, r0
 800056e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000572:	d103      	bne.n	800057c <Pdoa_uwb_tx+0x3c>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <Pdoa_uwb_tx+0xbc>)
 8000576:	f000 fc9f 	bl	8000eb8 <test_run_info>
        while (1) { };
 800057a:	e7fe      	b.n	800057a <Pdoa_uwb_tx+0x3a>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 800057c:	2003      	movs	r0, #3
 800057e:	f004 f8d9 	bl	8004734 <dwt_setleds>

    /* Configure DW IC. See NOTE 5 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8000582:	481f      	ldr	r0, [pc, #124]	; (8000600 <Pdoa_uwb_tx+0xc0>)
 8000584:	f003 fffe 	bl	8004584 <dwt_configure>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <Pdoa_uwb_tx+0x56>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <Pdoa_uwb_tx+0xc4>)
 8000590:	f000 fc92 	bl	8000eb8 <test_run_info>
        while (1) { };
 8000594:	e7fe      	b.n	8000594 <Pdoa_uwb_tx+0x54>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8000596:	481c      	ldr	r0, [pc, #112]	; (8000608 <Pdoa_uwb_tx+0xc8>)
 8000598:	f004 f800 	bl	800459c <dwt_configuretxrf>
//
//        return 0;
//
//    }

    for (int var = 0; var < 5; var++) {
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e021      	b.n	80005e6 <Pdoa_uwb_tx+0xa6>

    	dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 80005a2:	2200      	movs	r2, #0
 80005a4:	4919      	ldr	r1, [pc, #100]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005a6:	200a      	movs	r0, #10
 80005a8:	f004 f828 	bl	80045fc <dwt_writetxdata>

		/* In this example since the length of the transmitted frame does not change,
		 * nor the other parameters of the dwt_writetxfctrl function, the
		 * dwt_writetxfctrl call could be outside the main while(1) loop.
		 */
		dwt_writetxfctrl(FRAME_LENGTH, 0, 0); /* Zero offset in TX buffer, no ranging. */
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	200c      	movs	r0, #12
 80005b2:	f004 f831 	bl	8004618 <dwt_writetxfctrl>

		/* Start transmission. */
		dwt_starttx(DWT_START_TX_IMMEDIATE);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f004 f83c 	bl	8004634 <dwt_starttx>
		/* Poll DW IC until TX frame sent event set. See NOTE 4 below.
		 * STATUS register is 4 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
		 * function to access it.*/
		waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 80005bc:	2300      	movs	r3, #0
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	2100      	movs	r1, #0
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fc37 	bl	8000e36 <waitforsysstatus>

		/* Clear TX frame sent event. */
		dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 80005c8:	2080      	movs	r0, #128	; 0x80
 80005ca:	f004 f8c5 	bl	8004758 <dwt_writesysstatuslo>

		/* Execute a delay between transmissions. */
		Sleep(TX_DELAY_MS);
 80005ce:	2050      	movs	r0, #80	; 0x50
 80005d0:	f000 faca 	bl	8000b68 <Sleep>



		/* Increment the blink frame sequence number (modulo 256). */
		tx_msg[BLINK_FRAME_SN_IDX]++;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005de:	705a      	strb	r2, [r3, #1]
    for (int var = 0; var < 5; var++) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	ddda      	ble.n	80005a2 <Pdoa_uwb_tx+0x62>

	}

    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08011dd8 	.word	0x08011dd8
 80005fc:	08011d74 	.word	0x08011d74
 8000600:	20000000 	.word	0x20000000
 8000604:	08011d88 	.word	0x08011d88
 8000608:	2000004c 	.word	0x2000004c
 800060c:	20000010 	.word	0x20000010

08000610 <ss_twr_responder_uwb>:
 * @param  none
 *
 * @return none
 */
int ss_twr_responder_uwb(void)
{
 8000610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000614:	b088      	sub	sp, #32
 8000616:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */


    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000618:	f000 fb52 	bl	8000cc0 <port_set_dw_ic_spi_fastrate>

    /* Reset and initialize DW chip. */
    reset_DWIC(); /* Target specific drive of RSTn line into DW3000 low for a period. */
 800061c:	f000 fad0 	bl	8000bc0 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8000620:	2002      	movs	r0, #2
 8000622:	f000 faa1 	bl	8000b68 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000626:	486e      	ldr	r0, [pc, #440]	; (80007e0 <ss_twr_responder_uwb+0x1d0>)
 8000628:	f003 ff46 	bl	80044b8 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 800062c:	bf00      	nop
 800062e:	f004 f84b 	bl	80046c8 <dwt_checkidlerc>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0fa      	beq.n	800062e <ss_twr_responder_uwb+0x1e>
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8000638:	2000      	movs	r0, #0
 800063a:	f003 ff97 	bl	800456c <dwt_initialise>
 800063e:	4603      	mov	r3, r0
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000644:	d103      	bne.n	800064e <ss_twr_responder_uwb+0x3e>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8000646:	4867      	ldr	r0, [pc, #412]	; (80007e4 <ss_twr_responder_uwb+0x1d4>)
 8000648:	f000 fc36 	bl	8000eb8 <test_run_info>
        while (1) { };
 800064c:	e7fe      	b.n	800064c <ss_twr_responder_uwb+0x3c>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 800064e:	2003      	movs	r0, #3
 8000650:	f004 f870 	bl	8004734 <dwt_setleds>

    /* Configure DW IC. See NOTE 13 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config_twr))
 8000654:	4864      	ldr	r0, [pc, #400]	; (80007e8 <ss_twr_responder_uwb+0x1d8>)
 8000656:	f003 ff95 	bl	8004584 <dwt_configure>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <ss_twr_responder_uwb+0x58>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8000660:	4862      	ldr	r0, [pc, #392]	; (80007ec <ss_twr_responder_uwb+0x1dc>)
 8000662:	f000 fc29 	bl	8000eb8 <test_run_info>
        while (1) { };
 8000666:	e7fe      	b.n	8000666 <ss_twr_responder_uwb+0x56>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8000668:	4861      	ldr	r0, [pc, #388]	; (80007f0 <ss_twr_responder_uwb+0x1e0>)
 800066a:	f003 ff97 	bl	800459c <dwt_configuretxrf>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 800066e:	f244 0001 	movw	r0, #16385	; 0x4001
 8000672:	f003 ff9f 	bl	80045b4 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8000676:	f244 0001 	movw	r0, #16385	; 0x4001
 800067a:	f003 ffad 	bl	80045d8 <dwt_settxantennadelay>

    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 800067e:	2003      	movs	r0, #3
 8000680:	f003 ff66 	bl	8004550 <dwt_setlnapamode>

    /* Loop forever responding to ranging requests. */
    while (1){
    	unsigned char loop_num = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	77fb      	strb	r3, [r7, #31]
        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8000688:	2000      	movs	r0, #0
 800068a:	f004 f811 	bl	80046b0 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 6 below. */
        waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR), 0);
 800068e:	2300      	movs	r3, #0
 8000690:	4a58      	ldr	r2, [pc, #352]	; (80007f4 <ss_twr_responder_uwb+0x1e4>)
 8000692:	2100      	movs	r1, #0
 8000694:	4858      	ldr	r0, [pc, #352]	; (80007f8 <ss_twr_responder_uwb+0x1e8>)
 8000696:	f000 fbce 	bl	8000e36 <waitforsysstatus>

        if (status_reg & DWT_INT_RXFCG_BIT_MASK){
 800069a:	4b57      	ldr	r3, [pc, #348]	; (80007f8 <ss_twr_responder_uwb+0x1e8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 8093 	beq.w	80007ce <ss_twr_responder_uwb+0x1be>
            uint16_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 80006a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006ac:	f004 f854 	bl	8004758 <dwt_writesysstatuslo>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_getframelength();
 80006b0:	f004 f888 	bl	80047c4 <dwt_getframelength>
 80006b4:	4603      	mov	r3, r0
 80006b6:	83bb      	strh	r3, [r7, #28]

            if (frame_len <= sizeof(rx_buffer)){
 80006b8:	8bbb      	ldrh	r3, [r7, #28]
 80006ba:	2b0c      	cmp	r3, #12
 80006bc:	d8e2      	bhi.n	8000684 <ss_twr_responder_uwb+0x74>
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80006be:	8bbb      	ldrh	r3, [r7, #28]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	484d      	ldr	r0, [pc, #308]	; (80007fc <ss_twr_responder_uwb+0x1ec>)
 80006c6:	f004 f827 	bl	8004718 <dwt_readrxdata>

                /* Check that the frame is a poll sent by "SS TWR initiator" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 80006ca:	4b4c      	ldr	r3, [pc, #304]	; (80007fc <ss_twr_responder_uwb+0x1ec>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	709a      	strb	r2, [r3, #2]
                if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0){
 80006d0:	220a      	movs	r2, #10
 80006d2:	494b      	ldr	r1, [pc, #300]	; (8000800 <ss_twr_responder_uwb+0x1f0>)
 80006d4:	4849      	ldr	r0, [pc, #292]	; (80007fc <ss_twr_responder_uwb+0x1ec>)
 80006d6:	f011 fa65 	bl	8011ba4 <memcmp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1d1      	bne.n	8000684 <ss_twr_responder_uwb+0x74>
                    uint32_t resp_tx_time;
                    int ret;

                    /* Retrieve poll reception timestamp. */
                    poll_rx_ts = get_rx_timestamp_u64();
 80006e0:	f000 fb3c 	bl	8000d5c <get_rx_timestamp_u64>
 80006e4:	4602      	mov	r2, r0
 80006e6:	460b      	mov	r3, r1
 80006e8:	4946      	ldr	r1, [pc, #280]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 80006ea:	e9c1 2300 	strd	r2, r3, [r1]

                    /* Compute response message transmission time. See NOTE 7 below. */
                    resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80006ee:	4b45      	ldr	r3, [pc, #276]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 80006f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f4:	4944      	ldr	r1, [pc, #272]	; (8000808 <ss_twr_responder_uwb+0x1f8>)
 80006f6:	eb12 0801 	adds.w	r8, r2, r1
 80006fa:	f143 0900 	adc.w	r9, r3, #0
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800070a:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 800070e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8000712:	4613      	mov	r3, r2
 8000714:	61bb      	str	r3, [r7, #24]
                    dwt_setdelayedtrxtime(resp_tx_time);
 8000716:	69b8      	ldr	r0, [r7, #24]
 8000718:	f003 ff9e 	bl	8004658 <dwt_setdelayedtrxtime>

                    /* Response TX timestamp is the transmission time we programmed plus the antenna delay. */
                    resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	2200      	movs	r2, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	60fa      	str	r2, [r7, #12]
 8000724:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000728:	460b      	mov	r3, r1
 800072a:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 800072e:	460b      	mov	r3, r1
 8000730:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8000734:	f42a 74ff 	bic.w	r4, sl, #510	; 0x1fe
 8000738:	f024 0401 	bic.w	r4, r4, #1
 800073c:	f00b 05ff 	and.w	r5, fp, #255	; 0xff
 8000740:	f244 0301 	movw	r3, #16385	; 0x4001
 8000744:	18e3      	adds	r3, r4, r3
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	f145 0300 	adc.w	r3, r5, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <ss_twr_responder_uwb+0x1fc>)
 8000750:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000754:	e9c3 1200 	strd	r1, r2, [r3]

                    /* Write all timestamps in the final message. See NOTE 8 below. */
                    resp_msg_set_ts(&tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX], poll_rx_ts);
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 800075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800075e:	482c      	ldr	r0, [pc, #176]	; (8000810 <ss_twr_responder_uwb+0x200>)
 8000760:	f000 fb3d 	bl	8000dde <resp_msg_set_ts>
                    resp_msg_set_ts(&tx_resp_msg[RESP_MSG_RESP_TX_TS_IDX], resp_tx_ts);
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <ss_twr_responder_uwb+0x1fc>)
 8000766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800076a:	482a      	ldr	r0, [pc, #168]	; (8000814 <ss_twr_responder_uwb+0x204>)
 800076c:	f000 fb37 	bl	8000dde <resp_msg_set_ts>

                    /* Write and send the response message. See NOTE 9 below. */
                    tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <ss_twr_responder_uwb+0x208>)
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <ss_twr_responder_uwb+0x20c>)
 8000776:	709a      	strb	r2, [r3, #2]
                    dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8000778:	2200      	movs	r2, #0
 800077a:	4928      	ldr	r1, [pc, #160]	; (800081c <ss_twr_responder_uwb+0x20c>)
 800077c:	2014      	movs	r0, #20
 800077e:	f003 ff3d 	bl	80045fc <dwt_writetxdata>
                    dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8000782:	2201      	movs	r2, #1
 8000784:	2100      	movs	r1, #0
 8000786:	2014      	movs	r0, #20
 8000788:	f003 ff46 	bl	8004618 <dwt_writetxfctrl>
                    ret = dwt_starttx(DWT_START_TX_DELAYED);
 800078c:	2001      	movs	r0, #1
 800078e:	f003 ff51 	bl	8004634 <dwt_starttx>
 8000792:	6178      	str	r0, [r7, #20]

                    /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 10 below. */
                    if (ret == DWT_SUCCESS){
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d110      	bne.n	80007bc <ss_twr_responder_uwb+0x1ac>
                        /* Poll DW IC until TX frame sent event set. See NOTE 6 below. */
                        waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 800079a:	2300      	movs	r3, #0
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fb48 	bl	8000e36 <waitforsysstatus>

                        /* Clear TXFRS event. */
                        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 80007a6:	2080      	movs	r0, #128	; 0x80
 80007a8:	f003 ffd6 	bl	8004758 <dwt_writesysstatuslo>

                        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
                        frame_seq_nb++;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <ss_twr_responder_uwb+0x208>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <ss_twr_responder_uwb+0x208>)
 80007b6:	701a      	strb	r2, [r3, #0]

                        return 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	e00c      	b.n	80007d6 <ss_twr_responder_uwb+0x1c6>
                    }
                    else if (loop_num > 5){
 80007bc:	7ffb      	ldrb	r3, [r7, #31]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d901      	bls.n	80007c6 <ss_twr_responder_uwb+0x1b6>
                    	return 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e007      	b.n	80007d6 <ss_twr_responder_uwb+0x1c6>
                    }
                    else{
                    	loop_num++;
 80007c6:	7ffb      	ldrb	r3, [r7, #31]
 80007c8:	3301      	adds	r3, #1
 80007ca:	77fb      	strb	r3, [r7, #31]
 80007cc:	e75a      	b.n	8000684 <ss_twr_responder_uwb+0x74>
            }
        }
        else
        {
            /* Clear RX error events in the DW IC status register. */
            dwt_writesysstatuslo(SYS_STATUS_ALL_RX_ERR);
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <ss_twr_responder_uwb+0x210>)
 80007d0:	f003 ffc2 	bl	8004758 <dwt_writesysstatuslo>
    while (1){
 80007d4:	e756      	b.n	8000684 <ss_twr_responder_uwb+0x74>
        }
    }
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007e0:	08011dd8 	.word	0x08011dd8
 80007e4:	08011d9c 	.word	0x08011d9c
 80007e8:	2000001c 	.word	0x2000001c
 80007ec:	08011db0 	.word	0x08011db0
 80007f0:	2000004c 	.word	0x2000004c
 80007f4:	3405d000 	.word	0x3405d000
 80007f8:	200000fc 	.word	0x200000fc
 80007fc:	200000f0 	.word	0x200000f0
 8000800:	2000002c 	.word	0x2000002c
 8000804:	20000100 	.word	0x20000100
 8000808:	0279c104 	.word	0x0279c104
 800080c:	20000108 	.word	0x20000108
 8000810:	20000042 	.word	0x20000042
 8000814:	20000046 	.word	0x20000046
 8000818:	200000ec 	.word	0x200000ec
 800081c:	20000038 	.word	0x20000038
 8000820:	34059000 	.word	0x34059000

08000824 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800082a:	f000 fa7d 	bl	8000d28 <port_GetEXT_IRQStatus>
 800082e:	4603      	mov	r3, r0
 8000830:	607b      	str	r3, [r7, #4]

    if (s)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 8000838:	f000 fa52 	bl	8000ce0 <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
    if (s)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8000854:	f000 fa56 	bl	8000d04 <port_EnableEXT_IRQ>
    }
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f97d 	bl	8000b68 <Sleep>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f956 	bl	8000b30 <usleep>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4603      	mov	r3, r0
 8000898:	81fb      	strh	r3, [r7, #14]
 800089a:	4613      	mov	r3, r2
 800089c:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 800089e:	f7ff ffc1 	bl	8000824 <decamutexon>
 80008a2:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80008a4:	bf00      	nop
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <writetospiwithcrc+0x90>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 f8b5 	bl	8002a1a <HAL_SPI_GetState>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d1f7      	bne.n	80008a6 <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <writetospiwithcrc+0x94>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <writetospiwithcrc+0x98>)
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <writetospiwithcrc+0x9c>)
 80008c2:	f001 fa73 	bl	8001dac <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <writetospiwithcrc+0x90>)
 80008c8:	6818      	ldr	r0, [r3, #0]
 80008ca:	89fa      	ldrh	r2, [r7, #14]
 80008cc:	230a      	movs	r3, #10
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	f001 ff67 	bl	80027a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <writetospiwithcrc+0x90>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	89ba      	ldrh	r2, [r7, #12]
 80008da:	230a      	movs	r3, #10
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	f001 ff60 	bl	80027a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <writetospiwithcrc+0x90>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	230a      	movs	r3, #10
 80008e8:	2201      	movs	r2, #1
 80008ea:	f107 0120 	add.w	r1, r7, #32
 80008ee:	f001 ff58 	bl	80027a2 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <writetospiwithcrc+0x94>)
 80008f4:	8819      	ldrh	r1, [r3, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <writetospiwithcrc+0x98>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <writetospiwithcrc+0x9c>)
 8000908:	f001 fa50 	bl	8001dac <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800090c:	6978      	ldr	r0, [r7, #20]
 800090e:	f7ff ff9a 	bl	8000846 <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 8000912:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000054 	.word	0x20000054
 8000920:	20000058 	.word	0x20000058
 8000924:	200001f4 	.word	0x200001f4
 8000928:	40020000 	.word	0x40020000

0800092c <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4603      	mov	r3, r0
 8000938:	81fb      	strh	r3, [r7, #14]
 800093a:	4613      	mov	r3, r2
 800093c:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 800093e:	f7ff ff71 	bl	8000824 <decamutexon>
 8000942:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000944:	bf00      	nop
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <writetospi+0x8c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f865 	bl	8002a1a <HAL_SPI_GetState>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d1f7      	bne.n	8000946 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <writetospi+0x90>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <writetospi+0x94>)
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	4818      	ldr	r0, [pc, #96]	; (80009c4 <writetospi+0x98>)
 8000962:	f001 fa23 	bl	8001dac <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <writetospi+0x8c>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	89fa      	ldrh	r2, [r7, #14]
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	f001 ff16 	bl	80027a2 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8000976:	89bb      	ldrh	r3, [r7, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d007      	beq.n	800098c <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <writetospi+0x8c>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	89ba      	ldrh	r2, [r7, #12]
 8000982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f001 ff0b 	bl	80027a2 <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <writetospi+0x90>)
 800098e:	8819      	ldrh	r1, [r3, #0]
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <writetospi+0x94>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	bf0c      	ite	eq
 8000998:	2301      	moveq	r3, #1
 800099a:	2300      	movne	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <writetospi+0x98>)
 80009a2:	f001 fa03 	bl	8001dac <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff4d 	bl	8000846 <decamutexoff>

    return 0;
 80009ac:	2300      	movs	r3, #0
} // end writetospi()
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000054 	.word	0x20000054
 80009bc:	20000058 	.word	0x20000058
 80009c0:	200001f4 	.word	0x200001f4
 80009c4:	40020000 	.word	0x40020000

080009c8 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4603      	mov	r3, r0
 80009d4:	81fb      	strh	r3, [r7, #14]
 80009d6:	4613      	mov	r3, r2
 80009d8:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 80009da:	f7ff ff23 	bl	8000824 <decamutexon>
 80009de:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80009e0:	bf00      	nop
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <readfromspi+0xd4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 f817 	bl	8002a1a <HAL_SPI_GetState>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d1f7      	bne.n	80009e2 <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <readfromspi+0xd8>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <readfromspi+0xdc>)
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4619      	mov	r1, r3
 80009fc:	482a      	ldr	r0, [pc, #168]	; (8000aa8 <readfromspi+0xe0>)
 80009fe:	f001 f9d5 	bl	8001dac <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <readfromspi+0xd4>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	89fa      	ldrh	r2, [r7, #14]
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	f001 fec8 	bl	80027a2 <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 8000a12:	bf00      	nop
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <readfromspi+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d1f7      	bne.n	8000a14 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8000a24:	e01f      	b.n	8000a66 <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 8000a26:	bf00      	nop
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <readfromspi+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d1f7      	bne.n	8000a28 <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <readfromspi+0xd4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8000a42:	bf00      	nop
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <readfromspi+0xd4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d1f7      	bne.n	8000a44 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <readfromspi+0xd4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68d9      	ldr	r1, [r3, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8000a66:	89bb      	ldrh	r3, [r7, #12]
 8000a68:	1e5a      	subs	r2, r3, #1
 8000a6a:	81ba      	strh	r2, [r7, #12]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1da      	bne.n	8000a26 <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <readfromspi+0xd8>)
 8000a72:	8819      	ldrh	r1, [r3, #0]
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <readfromspi+0xdc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <readfromspi+0xe0>)
 8000a86:	f001 f991 	bl	8001dac <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff fedb 	bl	8000846 <decamutexoff>

    return 0;
 8000a90:	2300      	movs	r3, #0
} // end readfromspi()
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000054 	.word	0x20000054
 8000aa0:	20000058 	.word	0x20000058
 8000aa4:	200001f4 	.word	0x200001f4
 8000aa8:	40020000 	.word	0x40020000

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <__NVIC_EnableIRQ+0x38>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db12      	blt.n	8000b20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	490a      	ldr	r1, [pc, #40]	; (8000b2c <__NVIC_DisableIRQ+0x44>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	3320      	adds	r3, #32
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
}
 8000b18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b1a:	f3bf 8f6f 	isb	sy
}
 8000b1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e003      	b.n	8000b52 <usleep+0x22>
    {
        __NOP();
 8000b4a:	bf00      	nop
    for (i = 0; i < usec; i++)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d3f7      	bcc.n	8000b4a <usleep+0x1a>
    }
    return 0;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 fe2f 	bl	80017d4 <HAL_Delay>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <EXTI_GetITEnStatus+0x3c>)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	095b      	lsrs	r3, r3, #5
 8000b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 031f 	and.w	r3, r3, #31
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bca:	2311      	movs	r3, #17
 8000bcc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <reset_DWIC+0x40>)
 8000bd8:	f000 ff64 	bl	8001aa4 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <reset_DWIC+0x40>)
 8000be2:	f001 f8e3 	bl	8001dac <HAL_GPIO_WritePin>

    usleep(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff ffa2 	bl	8000b30 <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 f809 	bl	8000c04 <setup_DWICRSTnIRQ>
    Sleep(2);
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f7ff ffb8 	bl	8000b68 <Sleep>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020400 	.word	0x40020400

08000c04 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d015      	beq.n	8000c3e <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4813      	ldr	r0, [pc, #76]	; (8000c74 <setup_DWICRSTnIRQ+0x70>)
 8000c28:	f000 ff3c 	bl	8001aa4 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000c2c:	2006      	movs	r0, #6
 8000c2e:	f000 ff10 	bl	8001a52 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2105      	movs	r1, #5
 8000c36:	2006      	movs	r0, #6
 8000c38:	f000 feef 	bl	8001a1a <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8000c3c:	e015      	b.n	8000c6a <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f000 ff15 	bl	8001a6e <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000c44:	2301      	movs	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c48:	2311      	movs	r3, #17
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <setup_DWICRSTnIRQ+0x70>)
 8000c5c:	f000 ff22 	bl	8001aa4 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2101      	movs	r1, #1
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <setup_DWICRSTnIRQ+0x70>)
 8000c66:	f001 f8a1 	bl	8001dac <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40020400 	.word	0x40020400

08000c78 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4806      	ldr	r0, [pc, #24]	; (8000c9c <wakeup_device_with_io+0x24>)
 8000c82:	f001 f893 	bl	8001dac <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ff6e 	bl	8000b68 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2102      	movs	r1, #2
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <wakeup_device_with_io+0x24>)
 8000c92:	f001 f88b 	bl	8001dac <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <port_set_dw_ic_spi_slowrate+0x1c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2218      	movs	r2, #24
 8000caa:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <port_set_dw_ic_spi_slowrate+0x1c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fced 	bl	8002690 <HAL_SPI_Init>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000054 	.word	0x20000054

08000cc0 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <port_set_dw_ic_spi_fastrate+0x1c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <port_set_dw_ic_spi_fastrate+0x1c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fcdd 	bl	8002690 <HAL_SPI_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000054 	.word	0x20000054

08000ce0 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <port_DisableEXT_IRQ+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d103      	bne.n	8000cf4 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8000cec:	2028      	movs	r0, #40	; 0x28
 8000cee:	f7ff fefb 	bl	8000ae8 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 8000cf2:	e002      	b.n	8000cfa <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8000cf4:	2017      	movs	r0, #23
 8000cf6:	f7ff fef7 	bl	8000ae8 <__NVIC_DisableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001f5 	.word	0x200001f5

08000d04 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <port_EnableEXT_IRQ+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d103      	bne.n	8000d18 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8000d10:	2028      	movs	r0, #40	; 0x28
 8000d12:	f7ff fecb 	bl	8000aac <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8000d16:	e002      	b.n	8000d1e <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8000d18:	2017      	movs	r0, #23
 8000d1a:	f7ff fec7 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001f5 	.word	0x200001f5

08000d28 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <port_GetEXT_IRQStatus+0x30>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d105      	bne.n	8000d42 <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8000d36:	2028      	movs	r0, #40	; 0x28
 8000d38:	f7ff ff22 	bl	8000b80 <EXTI_GetITEnStatus>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	e004      	b.n	8000d4c <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8000d42:	2017      	movs	r0, #23
 8000d44:	f7ff ff1c 	bl	8000b80 <EXTI_GetITEnStatus>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	607b      	str	r3, [r7, #4]
    }
    return status;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200001f5 	.word	0x200001f5

08000d5c <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 8000d5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 8000d70:	463b      	mov	r3, r7
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fc82 	bl	800467c <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8000d78:	2304      	movs	r3, #4
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	e023      	b.n	8000dc6 <get_rx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 8000d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	020b      	lsls	r3, r1, #8
 8000d8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000d90:	0202      	lsls	r2, r0, #8
 8000d92:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	3310      	adds	r3, #16
 8000d9c:	443b      	add	r3, r7
 8000d9e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	461c      	mov	r4, r3
 8000da8:	4615      	mov	r5, r2
 8000daa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dae:	ea42 0804 	orr.w	r8, r2, r4
 8000db2:	ea43 0905 	orr.w	r9, r3, r5
 8000db6:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dad7      	bge.n	8000d7e <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8000dce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000dde <resp_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_set_ts(uint8_t *ts_field, const uint64_t ts)
{
 8000dde:	b4f0      	push	{r4, r5, r6, r7}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	75fb      	strb	r3, [r7, #23]
 8000dee:	e019      	b.n	8000e24 <resp_msg_set_ts+0x46>
    {
        ts_field[i] = (uint8_t)(ts >> (i * 8));
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	00d9      	lsls	r1, r3, #3
 8000df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	f1a1 0020 	sub.w	r0, r1, #32
 8000e00:	fa22 f401 	lsr.w	r4, r2, r1
 8000e04:	fa03 f606 	lsl.w	r6, r3, r6
 8000e08:	4334      	orrs	r4, r6
 8000e0a:	fa23 f000 	lsr.w	r0, r3, r0
 8000e0e:	4304      	orrs	r4, r0
 8000e10:	fa23 f501 	lsr.w	r5, r3, r1
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	b2e2      	uxtb	r2, r4
 8000e1c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	3301      	adds	r3, #1
 8000e22:	75fb      	strb	r3, [r7, #23]
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d9e2      	bls.n	8000df0 <resp_msg_set_ts+0x12>
    }
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bcf0      	pop	{r4, r5, r6, r7}
 8000e34:	4770      	bx	lr

08000e36 <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d014      	beq.n	8000e7c <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000e52:	e00a      	b.n	8000e6a <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 8000e5a:	f003 fca1 	bl	80047a0 <dwt_readsysstatushi>
 8000e5e:	6138      	str	r0, [r7, #16]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d115      	bne.n	8000e96 <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000e6a:	f003 fc87 	bl	800477c <dwt_readsysstatuslo>
 8000e6e:	6178      	str	r0, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0ec      	beq.n	8000e54 <waitforsysstatus+0x1e>
 8000e7a:	e00d      	b.n	8000e98 <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8000e82:	bf00      	nop
 8000e84:	f003 fc8c 	bl	80047a0 <dwt_readsysstatushi>
 8000e88:	6138      	str	r0, [r7, #16]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f7      	beq.n	8000e84 <waitforsysstatus+0x4e>
 8000e94:	e000      	b.n	8000e98 <waitforsysstatus+0x62>
                    break;
 8000e96:	bf00      	nop
    }

    if (lo_result != NULL)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	601a      	str	r2, [r3, #0]
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <test_run_info>:
//extern example_ptr example_pointer;
//extern int unit_test_main(void);


void test_run_info(unsigned char *data) // UART print code will be added.
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	uint16_t data_length = strlen((const char *)data);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff f9b3 	bl	800022c <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, data_length, 1000);
 8000eca:	89fa      	ldrh	r2, [r7, #14]
 8000ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <test_run_info+0x28>)
 8000ed4:	f002 fe1b 	bl	8003b0e <HAL_UART_Transmit>

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200001b0 	.word	0x200001b0

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fc02 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f81a 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f99a 	bl	8001228 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ef4:	f000 f880 	bl	8000ff8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ef8:	f000 f96c 	bl	80011d4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000efc:	f000 f8b2 	bl	8001064 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 8000f00:	f7ff feee 	bl	8000ce0 <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fe7d 	bl	8000c04 <setup_DWICRSTnIRQ>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <main+0x3c>)
 8000f12:	f000 ff4b 	bl	8001dac <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  Pdoa_uwb_tx();
 8000f16:	f7ff fb13 	bl	8000540 <Pdoa_uwb_tx>
	  ss_twr_responder_uwb();
 8000f1a:	f7ff fb79 	bl	8000610 <ss_twr_responder_uwb>
	  Pdoa_uwb_tx();
 8000f1e:	e7fa      	b.n	8000f16 <main+0x32>
 8000f20:	40020400 	.word	0x40020400

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	; 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f010 fe46 	bl	8011bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a27      	ldr	r2, [pc, #156]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8000f94:	2314      	movs	r3, #20
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 ff19 	bl	8001de0 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb4:	f000 f9e4 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 f97a 	bl	80022d0 <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fe2:	f000 f9cd 	bl	8001380 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3750      	adds	r7, #80	; 0x50
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_SPI1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_SPI1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_SPI1_Init+0x64>)
 8001004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_SPI1_Init+0x64>)
 8001024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001028:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_SPI1_Init+0x64>)
 800102c:	2210      	movs	r2, #16
 800102e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_SPI1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_SPI1_Init+0x64>)
 8001044:	220a      	movs	r2, #10
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_SPI1_Init+0x64>)
 800104a:	f001 fb21 	bl	8002690 <HAL_SPI_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 f994 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000110 	.word	0x20000110
 8001060:	40013000 	.word	0x40013000

08001064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09a      	sub	sp, #104	; 0x68
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001078:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
 80010a2:	615a      	str	r2, [r3, #20]
 80010a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2220      	movs	r2, #32
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f010 fd89 	bl	8011bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010b2:	4b46      	ldr	r3, [pc, #280]	; (80011cc <MX_TIM1_Init+0x168>)
 80010b4:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <MX_TIM1_Init+0x16c>)
 80010b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <MX_TIM1_Init+0x168>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010be:	4b43      	ldr	r3, [pc, #268]	; (80011cc <MX_TIM1_Init+0x168>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010c4:	4b41      	ldr	r3, [pc, #260]	; (80011cc <MX_TIM1_Init+0x168>)
 80010c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010cc:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <MX_TIM1_Init+0x168>)
 80010ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <MX_TIM1_Init+0x168>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <MX_TIM1_Init+0x168>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e0:	483a      	ldr	r0, [pc, #232]	; (80011cc <MX_TIM1_Init+0x168>)
 80010e2:	f001 fd73 	bl	8002bcc <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 f948 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010fa:	4619      	mov	r1, r3
 80010fc:	4833      	ldr	r0, [pc, #204]	; (80011cc <MX_TIM1_Init+0x168>)
 80010fe:	f001 ff71 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001108:	f000 f93a 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800110c:	482f      	ldr	r0, [pc, #188]	; (80011cc <MX_TIM1_Init+0x168>)
 800110e:	f001 fdac 	bl	8002c6a <HAL_TIM_OC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001118:	f000 f932 	bl	8001380 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800111c:	2306      	movs	r3, #6
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001120:	2300      	movs	r3, #0
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001124:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001128:	4619      	mov	r1, r3
 800112a:	4828      	ldr	r0, [pc, #160]	; (80011cc <MX_TIM1_Init+0x168>)
 800112c:	f002 f821 	bl	8003172 <HAL_TIM_SlaveConfigSynchro>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001136:	f000 f923 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001142:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001146:	4619      	mov	r1, r3
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <MX_TIM1_Init+0x168>)
 800114a:	f002 fbbf 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001154:	f000 f914 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	4813      	ldr	r0, [pc, #76]	; (80011cc <MX_TIM1_Init+0x168>)
 800117e:	f001 fed5 	bl	8002f2c <HAL_TIM_OC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001188:	f000 f8fa 	bl	8001380 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM1_Init+0x168>)
 80011b0:	f002 fbfa 	bl	80039a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80011ba:	f000 f8e1 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM1_Init+0x168>)
 80011c0:	f000 f97c 	bl	80014bc <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3768      	adds	r7, #104	; 0x68
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000168 	.word	0x20000168
 80011d0:	40010000 	.word	0x40010000

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f002 fc32 	bl	8003a74 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f8b3 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001b0 	.word	0x200001b0
 8001224:	40011000 	.word	0x40011000

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <MX_GPIO_Init+0x148>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <MX_GPIO_Init+0x148>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b48      	ldr	r3, [pc, #288]	; (8001370 <MX_GPIO_Init+0x148>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <MX_GPIO_Init+0x148>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a43      	ldr	r2, [pc, #268]	; (8001370 <MX_GPIO_Init+0x148>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <MX_GPIO_Init+0x148>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <MX_GPIO_Init+0x148>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a3c      	ldr	r2, [pc, #240]	; (8001370 <MX_GPIO_Init+0x148>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <MX_GPIO_Init+0x148>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <MX_GPIO_Init+0x148>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a35      	ldr	r2, [pc, #212]	; (8001370 <MX_GPIO_Init+0x148>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <MX_GPIO_Init+0x148>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_S_GPIO_Port, LED_S_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b4:	482f      	ldr	r0, [pc, #188]	; (8001374 <MX_GPIO_Init+0x14c>)
 80012b6:	f000 fd79 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2110      	movs	r1, #16
 80012be:	482e      	ldr	r0, [pc, #184]	; (8001378 <MX_GPIO_Init+0x150>)
 80012c0:	f000 fd74 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2103      	movs	r1, #3
 80012c8:	482c      	ldr	r0, [pc, #176]	; (800137c <MX_GPIO_Init+0x154>)
 80012ca:	f000 fd6f 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_r_Pin|LED_y_Pin|LED_g_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012d4:	4829      	ldr	r0, [pc, #164]	; (800137c <MX_GPIO_Init+0x154>)
 80012d6:	f000 fd69 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_S_Pin */
  GPIO_InitStruct.Pin = LED_S_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_S_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4820      	ldr	r0, [pc, #128]	; (8001374 <MX_GPIO_Init+0x14c>)
 80012f4:	f000 fbd6 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin|DW_IRQn_Pin;
 80012f8:	2306      	movs	r3, #6
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	481a      	ldr	r0, [pc, #104]	; (8001378 <MX_GPIO_Init+0x150>)
 800130e:	f000 fbc9 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8001312:	2310      	movs	r3, #16
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_GPIO_Init+0x150>)
 800132a:	f000 fbbb 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_NSS1_WAKEUP_Pin;
 800132e:	2303      	movs	r3, #3
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_GPIO_Init+0x154>)
 8001346:	f000 fbad 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_r_Pin LED_y_Pin LED_g_Pin */
  GPIO_InitStruct.Pin = LED_r_Pin|LED_y_Pin|LED_g_Pin;
 800134a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001354:	2301      	movs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_GPIO_Init+0x154>)
 8001364:	f000 fb9e 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	40020800 	.word	0x40020800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <HAL_SPI_MspInit+0x84>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d12b      	bne.n	8001456 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_SPI_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001436:	23e0      	movs	r3, #224	; 0xe0
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001446:	2305      	movs	r3, #5
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_SPI_MspInit+0x8c>)
 8001452:	f000 fb27 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40013000 	.word	0x40013000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_TIM_Base_MspInit+0x48>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d115      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	201b      	movs	r0, #27
 80014a0:	f000 fabb 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014a4:	201b      	movs	r0, #27
 80014a6:	f000 fad4 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <HAL_TIM_MspPostInit+0x68>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d11e      	bne.n	800151c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_TIM_MspPostInit+0x6c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_TIM_MspPostInit+0x6c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_TIM_MspPostInit+0x6c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_TIM_MspPostInit+0x70>)
 8001518:	f000 fac4 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40010000 	.word	0x40010000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12b      	bne.n	80015aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x88>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800158a:	23c0      	movs	r3, #192	; 0xc0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159a:	2307      	movs	r3, #7
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0x8c>)
 80015a6:	f000 fa7d 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400

080015c0 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ee:	f000 f8d1 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <TIM1_CC_IRQHandler+0x10>)
 80015fe:	f001 fb8d 	bl	8002d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000168 	.word	0x20000168

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f010 fa68 	bl	8011b10 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20020000 	.word	0x20020000
 800166c:	00000400 	.word	0x00000400
 8001670:	200001f8 	.word	0x200001f8
 8001674:	20000408 	.word	0x20000408

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b8:	4c0b      	ldr	r4, [pc, #44]	; (80016e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ffd7 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f010 fa3b 	bl	8011b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fc09 	bl	8000ee4 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80016e0:	080122e4 	.word	0x080122e4
  ldr r2, =_sbss
 80016e4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80016e8:	20000404 	.word	0x20000404

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f973 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fe32 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f999 	bl	8001a8a <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f000 f953 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000005c 	.word	0x2000005c
 800178c:	20000064 	.word	0x20000064
 8001790:	20000060 	.word	0x20000060

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000064 	.word	0x20000064
 80017b8:	200001fc 	.word	0x200001fc

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200001fc 	.word	0x200001fc

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000064 	.word	0x20000064

0800181c <__NVIC_SetPriorityGrouping>:
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_DisableIRQ>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db12      	blt.n	80018f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	490a      	ldr	r1, [pc, #40]	; (8001900 <__NVIC_DisableIRQ+0x44>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	3320      	adds	r3, #32
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80018e8:	f3bf 8f4f 	dsb	sy
}
 80018ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018ee:	f3bf 8f6f 	isb	sy
}
 80018f2:	bf00      	nop
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff05 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff1a 	bl	8001864 <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff0d 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff1d 	bl	80018bc <__NVIC_DisableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff94 	bl	80019c0 <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e159      	b.n	8001d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 8148 	bne.w	8001d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a2 	beq.w	8001d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x202>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2f4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x1fe>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x1f2>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f aea2 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e267      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d075      	beq.n	8001eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d00c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0a:	4b85      	ldr	r3, [pc, #532]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d112      	bne.n	8001e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e16:	4b82      	ldr	r3, [pc, #520]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e22:	d10b      	bne.n	8001e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	4b7e      	ldr	r3, [pc, #504]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d05b      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x108>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d157      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e242      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0x74>
 8001e46:	4b76      	ldr	r3, [pc, #472]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a75      	ldr	r2, [pc, #468]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0xb0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x98>
 8001e5e:	4b70      	ldr	r3, [pc, #448]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6f      	ldr	r2, [pc, #444]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6c      	ldr	r2, [pc, #432]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xb0>
 8001e78:	4b69      	ldr	r3, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a68      	ldr	r2, [pc, #416]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b66      	ldr	r3, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a65      	ldr	r2, [pc, #404]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fc90 	bl	80017bc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fc8c 	bl	80017bc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e207      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xc0>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fc7c 	bl	80017bc <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fc78 	bl	80017bc <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1f3      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b51      	ldr	r3, [pc, #324]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xe8>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0e:	4b44      	ldr	r3, [pc, #272]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x152>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1c7      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4937      	ldr	r1, [pc, #220]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e03a      	b.n	8001fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_RCC_OscConfig+0x244>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff fc31 	bl	80017bc <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7ff fc2d 	bl	80017bc <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1a8      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4925      	ldr	r1, [pc, #148]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_OscConfig+0x244>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff fc10 	bl	80017bc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fc0c 	bl	80017bc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e187      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d036      	beq.n	8002038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d016      	beq.n	8002000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_RCC_OscConfig+0x248>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fbf0 	bl	80017bc <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fbec 	bl	80017bc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e167      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x200>
 8001ffe:	e01b      	b.n	8002038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_OscConfig+0x248>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7ff fbd9 	bl	80017bc <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	e00e      	b.n	800202c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff fbd5 	bl	80017bc <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d907      	bls.n	800202c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e150      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
 8002020:	40023800 	.word	0x40023800
 8002024:	42470000 	.word	0x42470000
 8002028:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ea      	bne.n	800200e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8097 	beq.w	8002174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4b81      	ldr	r3, [pc, #516]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10f      	bne.n	8002076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b7d      	ldr	r3, [pc, #500]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a7c      	ldr	r2, [pc, #496]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
 8002066:	4b7a      	ldr	r3, [pc, #488]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b77      	ldr	r3, [pc, #476]	; (8002254 <HAL_RCC_OscConfig+0x474>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	4b74      	ldr	r3, [pc, #464]	; (8002254 <HAL_RCC_OscConfig+0x474>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a73      	ldr	r2, [pc, #460]	; (8002254 <HAL_RCC_OscConfig+0x474>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7ff fb95 	bl	80017bc <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7ff fb91 	bl	80017bc <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e10c      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <HAL_RCC_OscConfig+0x474>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x2ea>
 80020bc:	4b64      	ldr	r3, [pc, #400]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a63      	ldr	r2, [pc, #396]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
 80020c8:	e01c      	b.n	8002104 <HAL_RCC_OscConfig+0x324>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x30c>
 80020d2:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a5e      	ldr	r2, [pc, #376]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a5b      	ldr	r2, [pc, #364]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0x324>
 80020ec:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	4a57      	ldr	r2, [pc, #348]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	; 0x70
 80020f8:	4b55      	ldr	r3, [pc, #340]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a54      	ldr	r2, [pc, #336]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80020fe:	f023 0304 	bic.w	r3, r3, #4
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7ff fb56 	bl	80017bc <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7ff fb52 	bl	80017bc <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e0cb      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	4b49      	ldr	r3, [pc, #292]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ee      	beq.n	8002114 <HAL_RCC_OscConfig+0x334>
 8002136:	e014      	b.n	8002162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002138:	f7ff fb40 	bl	80017bc <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7ff fb3c 	bl	80017bc <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0b5      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ee      	bne.n	8002140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4a38      	ldr	r2, [pc, #224]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 800216e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002172:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a1 	beq.w	80022c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800217e:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b08      	cmp	r3, #8
 8002188:	d05c      	beq.n	8002244 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d141      	bne.n	8002216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_OscConfig+0x478>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fb10 	bl	80017bc <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a0:	f7ff fb0c 	bl	80017bc <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e087      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	491b      	ldr	r1, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x478>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff fae5 	bl	80017bc <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f6:	f7ff fae1 	bl	80017bc <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e05c      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x416>
 8002214:	e054      	b.n	80022c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_OscConfig+0x478>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff face 	bl	80017bc <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff faca 	bl	80017bc <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e045      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_OscConfig+0x470>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x444>
 8002242:	e03d      	b.n	80022c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e038      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
 8002250:	40023800 	.word	0x40023800
 8002254:	40007000 	.word	0x40007000
 8002258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4ec>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d028      	beq.n	80022bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d121      	bne.n	80022bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d11a      	bne.n	80022bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800228c:	4013      	ands	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002294:	4293      	cmp	r3, r2
 8002296:	d111      	bne.n	80022bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	3b01      	subs	r3, #1
 80022a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0cc      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b68      	ldr	r3, [pc, #416]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d90c      	bls.n	800230c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0b8      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800232e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800233c:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	494d      	ldr	r1, [pc, #308]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d044      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d119      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d003      	beq.n	800238e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238a:	2b03      	cmp	r3, #3
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e067      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4934      	ldr	r1, [pc, #208]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c0:	f7ff f9fc 	bl	80017bc <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	e00a      	b.n	80023de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c8:	f7ff f9f8 	bl	80017bc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e04f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 020c 	and.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1eb      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d20c      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e032      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4916      	ldr	r1, [pc, #88]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002456:	f000 f821 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	490a      	ldr	r1, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	5ccb      	ldrb	r3, [r1, r3]
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f95c 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00
 800248c:	40023800 	.word	0x40023800
 8002490:	08011de4 	.word	0x08011de4
 8002494:	2000005c 	.word	0x2000005c
 8002498:	20000060 	.word	0x20000060

0800249c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a0:	b090      	sub	sp, #64	; 0x40
 80024a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
 80024a8:	2300      	movs	r3, #0
 80024aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ac:	2300      	movs	r3, #0
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_GetSysClockFreq+0x180>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d00d      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x40>
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	f200 80a1 	bhi.w	8002608 <HAL_RCC_GetSysClockFreq+0x16c>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ce:	e09b      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_GetSysClockFreq+0x184>)
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80024d4:	e09b      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024d6:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCC_GetSysClockFreq+0x188>)
 80024d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024da:	e098      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <HAL_RCC_GetSysClockFreq+0x180>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e6:	4b4d      	ldr	r3, [pc, #308]	; (800261c <HAL_RCC_GetSysClockFreq+0x180>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d028      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f2:	4b4a      	ldr	r3, [pc, #296]	; (800261c <HAL_RCC_GetSysClockFreq+0x180>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	2200      	movs	r2, #0
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	627a      	str	r2, [r7, #36]	; 0x24
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002504:	2100      	movs	r1, #0
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_GetSysClockFreq+0x188>)
 8002508:	fb03 f201 	mul.w	r2, r3, r1
 800250c:	2300      	movs	r3, #0
 800250e:	fb00 f303 	mul.w	r3, r0, r3
 8002512:	4413      	add	r3, r2
 8002514:	4a43      	ldr	r2, [pc, #268]	; (8002624 <HAL_RCC_GetSysClockFreq+0x188>)
 8002516:	fba0 1202 	umull	r1, r2, r0, r2
 800251a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800251c:	460a      	mov	r2, r1
 800251e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	4413      	add	r3, r2
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	2200      	movs	r2, #0
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	61fa      	str	r2, [r7, #28]
 800252e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002532:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002536:	f7fd fe83 	bl	8000240 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4613      	mov	r3, r2
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002542:	e053      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCC_GetSysClockFreq+0x180>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	2200      	movs	r2, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	617a      	str	r2, [r7, #20]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002556:	f04f 0b00 	mov.w	fp, #0
 800255a:	4652      	mov	r2, sl
 800255c:	465b      	mov	r3, fp
 800255e:	f04f 0000 	mov.w	r0, #0
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	0159      	lsls	r1, r3, #5
 8002568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800256c:	0150      	lsls	r0, r2, #5
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	ebb2 080a 	subs.w	r8, r2, sl
 8002576:	eb63 090b 	sbc.w	r9, r3, fp
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002586:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800258a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800258e:	ebb2 0408 	subs.w	r4, r2, r8
 8002592:	eb63 0509 	sbc.w	r5, r3, r9
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	00eb      	lsls	r3, r5, #3
 80025a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a4:	00e2      	lsls	r2, r4, #3
 80025a6:	4614      	mov	r4, r2
 80025a8:	461d      	mov	r5, r3
 80025aa:	eb14 030a 	adds.w	r3, r4, sl
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	eb45 030b 	adc.w	r3, r5, fp
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c2:	4629      	mov	r1, r5
 80025c4:	028b      	lsls	r3, r1, #10
 80025c6:	4621      	mov	r1, r4
 80025c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025cc:	4621      	mov	r1, r4
 80025ce:	028a      	lsls	r2, r1, #10
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	2200      	movs	r2, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025e0:	f7fd fe2e 	bl	8000240 <__aeabi_uldivmod>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4613      	mov	r3, r2
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_GetSysClockFreq+0x180>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	3301      	adds	r3, #1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetSysClockFreq+0x184>)
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002610:	4618      	mov	r0, r3
 8002612:	3740      	adds	r7, #64	; 0x40
 8002614:	46bd      	mov	sp, r7
 8002616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	00f42400 	.word	0x00f42400
 8002624:	017d7840 	.word	0x017d7840

08002628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_GetHCLKFreq+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	2000005c 	.word	0x2000005c

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002644:	f7ff fff0 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0a9b      	lsrs	r3, r3, #10
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	08011df4 	.word	0x08011df4

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800266c:	f7ff ffdc 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0b5b      	lsrs	r3, r3, #13
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	08011df4 	.word	0x08011df4

08002690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07b      	b.n	800279a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026b2:	d009      	beq.n	80026c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
 80026ba:	e005      	b.n	80026c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fe7a 	bl	80013dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	ea42 0103 	orr.w	r1, r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	f003 0104 	and.w	r1, r3, #4
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	f003 0210 	and.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002788:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b088      	sub	sp, #32
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_SPI_Transmit+0x22>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e126      	b.n	8002a12 <HAL_SPI_Transmit+0x270>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027cc:	f7fe fff6 	bl	80017bc <HAL_GetTick>
 80027d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d002      	beq.n	80027e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027e6:	e10b      	b.n	8002a00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_SPI_Transmit+0x52>
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f8:	e102      	b.n	8002a00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2203      	movs	r2, #3
 80027fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002840:	d10f      	bne.n	8002862 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002850:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002860:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d007      	beq.n	8002880 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002888:	d14b      	bne.n	8002922 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_Transmit+0xf6>
 8002892:	8afb      	ldrh	r3, [r7, #22]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d13e      	bne.n	8002916 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028bc:	e02b      	b.n	8002916 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d112      	bne.n	80028f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	1c9a      	adds	r2, r3, #2
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80028f0:	e011      	b.n	8002916 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f2:	f7fe ff63 	bl	80017bc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d803      	bhi.n	800290a <HAL_SPI_Transmit+0x168>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002908:	d102      	bne.n	8002910 <HAL_SPI_Transmit+0x16e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002914:	e074      	b.n	8002a00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ce      	bne.n	80028be <HAL_SPI_Transmit+0x11c>
 8002920:	e04c      	b.n	80029bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_SPI_Transmit+0x18e>
 800292a:	8afb      	ldrh	r3, [r7, #22]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d140      	bne.n	80029b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	330c      	adds	r3, #12
 800293a:	7812      	ldrb	r2, [r2, #0]
 800293c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002956:	e02c      	b.n	80029b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d113      	bne.n	800298e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	86da      	strh	r2, [r3, #54]	; 0x36
 800298c:	e011      	b.n	80029b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800298e:	f7fe ff15 	bl	80017bc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d803      	bhi.n	80029a6 <HAL_SPI_Transmit+0x204>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a4:	d102      	bne.n	80029ac <HAL_SPI_Transmit+0x20a>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029b0:	e026      	b.n	8002a00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1cd      	bne.n	8002958 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f8c1 	bl	8002b48 <SPI_EndRxTxTransaction>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	e000      	b.n	8002a00 <HAL_SPI_Transmit+0x25e>
  }

error:
 80029fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a28:	b2db      	uxtb	r3, r3
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a48:	f7fe feb8 	bl	80017bc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a58:	f7fe feb0 	bl	80017bc <HAL_GetTick>
 8002a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	015b      	lsls	r3, r3, #5
 8002a64:	0d1b      	lsrs	r3, r3, #20
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6e:	e054      	b.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a76:	d050      	beq.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a78:	f7fe fea0 	bl	80017bc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d902      	bls.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d13d      	bne.n	8002b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa6:	d111      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab0:	d004      	beq.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d107      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d10f      	bne.n	8002af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e017      	b.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d19b      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000005c 	.word	0x2000005c

08002b48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <SPI_EndRxTxTransaction+0x7c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <SPI_EndRxTxTransaction+0x80>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0d5b      	lsrs	r3, r3, #21
 8002b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b72:	d112      	bne.n	8002b9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff ff5a 	bl	8002a38 <SPI_WaitFlagStateUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e00f      	b.n	8002bba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d0f2      	beq.n	8002b9a <SPI_EndRxTxTransaction+0x52>
 8002bb4:	e000      	b.n	8002bb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002bb6:	bf00      	nop
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000005c 	.word	0x2000005c
 8002bc8:	165e9f81 	.word	0x165e9f81

08002bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e041      	b.n	8002c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fc3a 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 fb26 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e041      	b.n	8002d00 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f839 	bl	8002d08 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f000 fad7 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa5d 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa4f 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa60 	bl	8003232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0204 	mvn.w	r2, #4
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa33 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa25 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fa36 	bl	8003232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0208 	mvn.w	r2, #8
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa09 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9fb 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa0c 	bl	8003232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0210 	mvn.w	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f9df 	bl	800321e <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9d1 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f9e2 	bl	8003232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9ab 	bl	80031f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fdca 	bl	8003a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9a7 	bl	8003246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0220 	mvn.w	r2, #32
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fd94 	bl	8003a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e048      	b.n	8002fdc <HAL_TIM_OC_ConfigChannel+0xb0>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d839      	bhi.n	8002fcc <HAL_TIM_OC_ConfigChannel+0xa0>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002fcd 	.word	0x08002fcd
 8002f68:	08002fcd 	.word	0x08002fcd
 8002f6c:	08002fcd 	.word	0x08002fcd
 8002f70:	08002fa3 	.word	0x08002fa3
 8002f74:	08002fcd 	.word	0x08002fcd
 8002f78:	08002fcd 	.word	0x08002fcd
 8002f7c:	08002fcd 	.word	0x08002fcd
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08002fcd 	.word	0x08002fcd
 8002f88:	08002fcd 	.word	0x08002fcd
 8002f8c:	08002fcd 	.word	0x08002fcd
 8002f90:	08002fbf 	.word	0x08002fbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f9de 	bl	800335c <TIM_OC1_SetConfig>
      break;
 8002fa0:	e017      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa3d 	bl	8003428 <TIM_OC2_SetConfig>
      break;
 8002fae:	e010      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 faa2 	bl	8003500 <TIM_OC3_SetConfig>
      break;
 8002fbc:	e009      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fb05 	bl	80035d4 <TIM_OC4_SetConfig>
      break;
 8002fca:	e002      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_ConfigClockSource+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0b4      	b.n	800316a <HAL_TIM_ConfigClockSource+0x186>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800301e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003038:	d03e      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0xd4>
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303e:	f200 8087 	bhi.w	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	f000 8086 	beq.w	8003156 <HAL_TIM_ConfigClockSource+0x172>
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d87f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d01a      	beq.n	800308a <HAL_TIM_ConfigClockSource+0xa6>
 8003054:	2b70      	cmp	r3, #112	; 0x70
 8003056:	d87b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d050      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x11a>
 800305c:	2b60      	cmp	r3, #96	; 0x60
 800305e:	d877      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d03c      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xfa>
 8003064:	2b50      	cmp	r3, #80	; 0x50
 8003066:	d873      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d058      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x13a>
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d86f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d064      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b30      	cmp	r3, #48	; 0x30
 8003076:	d86b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d060      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d867      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d05c      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003084:	2b10      	cmp	r3, #16
 8003086:	d05a      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	e062      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f000 fbf6 	bl	800388a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]
      break;
 80030b6:	e04f      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f000 fbdf 	bl	800388a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030da:	609a      	str	r2, [r3, #8]
      break;
 80030dc:	e03c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 fb53 	bl	8003796 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2150      	movs	r1, #80	; 0x50
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fbac 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 80030fc:	e02c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	461a      	mov	r2, r3
 800310c:	f000 fb72 	bl	80037f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2160      	movs	r1, #96	; 0x60
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fb9c 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 800311c:	e01c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f000 fb33 	bl	8003796 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fb8c 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 800313c:	e00c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 fb83 	bl	8003854 <TIM_ITRx_SetConfig>
      break;
 800314e:	e003      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e000      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003186:	2302      	movs	r3, #2
 8003188:	e031      	b.n	80031ee <HAL_TIM_SlaveConfigSynchro+0x7c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa69 	bl	8003674 <TIM_SlaveTimer_SetConfig>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e018      	b.n	80031ee <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ca:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031da:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a34      	ldr	r2, [pc, #208]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00f      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d00b      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a31      	ldr	r2, [pc, #196]	; (8003344 <TIM_Base_SetConfig+0xe8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d007      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a30      	ldr	r2, [pc, #192]	; (8003348 <TIM_Base_SetConfig+0xec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a2f      	ldr	r2, [pc, #188]	; (800334c <TIM_Base_SetConfig+0xf0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a25      	ldr	r2, [pc, #148]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01b      	beq.n	80032e6 <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b4:	d017      	beq.n	80032e6 <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a22      	ldr	r2, [pc, #136]	; (8003344 <TIM_Base_SetConfig+0xe8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <TIM_Base_SetConfig+0x8a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <TIM_Base_SetConfig+0xec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_Base_SetConfig+0x8a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <TIM_Base_SetConfig+0xf0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_Base_SetConfig+0x8a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <TIM_Base_SetConfig+0xf4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0x8a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <TIM_Base_SetConfig+0xf8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <TIM_Base_SetConfig+0xfc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a08      	ldr	r2, [pc, #32]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d103      	bne.n	800332c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	615a      	str	r2, [r3, #20]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40010000 	.word	0x40010000
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	40014000 	.word	0x40014000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800

0800335c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 0302 	bic.w	r3, r3, #2
 80033a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <TIM_OC1_SetConfig+0xc8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10c      	bne.n	80033d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0308 	bic.w	r3, r3, #8
 80033be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a13      	ldr	r2, [pc, #76]	; (8003424 <TIM_OC1_SetConfig+0xc8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d111      	bne.n	80033fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40010000 	.word	0x40010000

08003428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0210 	bic.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0320 	bic.w	r3, r3, #32
 8003472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <TIM_OC2_SetConfig+0xd4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10d      	bne.n	80034a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <TIM_OC2_SetConfig+0xd4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d113      	bne.n	80034d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000

08003500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0303 	bic.w	r3, r3, #3
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <TIM_OC3_SetConfig+0xd0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10d      	bne.n	800357a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <TIM_OC3_SetConfig+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d113      	bne.n	80035aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	621a      	str	r2, [r3, #32]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40010000 	.word	0x40010000

080035d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	031b      	lsls	r3, r3, #12
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <TIM_OC4_SetConfig+0x9c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d109      	bne.n	8003648 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000

08003674 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003690:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f023 0307 	bic.w	r3, r3, #7
 80036a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b70      	cmp	r3, #112	; 0x70
 80036bc:	d01a      	beq.n	80036f4 <TIM_SlaveTimer_SetConfig+0x80>
 80036be:	2b70      	cmp	r3, #112	; 0x70
 80036c0:	d860      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x110>
 80036c2:	2b60      	cmp	r3, #96	; 0x60
 80036c4:	d054      	beq.n	8003770 <TIM_SlaveTimer_SetConfig+0xfc>
 80036c6:	2b60      	cmp	r3, #96	; 0x60
 80036c8:	d85c      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x110>
 80036ca:	2b50      	cmp	r3, #80	; 0x50
 80036cc:	d046      	beq.n	800375c <TIM_SlaveTimer_SetConfig+0xe8>
 80036ce:	2b50      	cmp	r3, #80	; 0x50
 80036d0:	d858      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x110>
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d019      	beq.n	800370a <TIM_SlaveTimer_SetConfig+0x96>
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d854      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x110>
 80036da:	2b30      	cmp	r3, #48	; 0x30
 80036dc:	d055      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x116>
 80036de:	2b30      	cmp	r3, #48	; 0x30
 80036e0:	d850      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x110>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d051      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x116>
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d84c      	bhi.n	8003784 <TIM_SlaveTimer_SetConfig+0x110>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04d      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x116>
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d04b      	beq.n	800378a <TIM_SlaveTimer_SetConfig+0x116>
 80036f2:	e047      	b.n	8003784 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f000 f8c1 	bl	800388a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003708:	e040      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b05      	cmp	r3, #5
 8003710:	d101      	bne.n	8003716 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e03b      	b.n	800378e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
      break;
 800375a:	e017      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	461a      	mov	r2, r3
 800376a:	f000 f814 	bl	8003796 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800376e:	e00d      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6899      	ldr	r1, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	461a      	mov	r2, r3
 800377e:	f000 f839 	bl	80037f4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003782:	e003      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	e000      	b.n	800378c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800378a:	bf00      	nop
  }

  return status;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f023 0201 	bic.w	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 030a 	bic.w	r3, r3, #10
 80037d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 0210 	bic.w	r2, r3, #16
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800381e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	031b      	lsls	r3, r3, #12
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003830:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	f043 0307 	orr.w	r3, r3, #7
 8003876:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	609a      	str	r2, [r3, #8]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800388a:	b480      	push	{r7}
 800388c:	b087      	sub	sp, #28
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	021a      	lsls	r2, r3, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	609a      	str	r2, [r3, #8]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e050      	b.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d018      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003930:	d013      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a16      	ldr	r2, [pc, #88]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d10c      	bne.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	4313      	orrs	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40010000 	.word	0x40010000
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40014000 	.word	0x40014000

080039a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e03d      	b.n	8003a40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e03f      	b.n	8003b06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd fd48 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f929 	bl	8003d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08a      	sub	sp, #40	; 0x28
 8003b12:	af02      	add	r7, sp, #8
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d17c      	bne.n	8003c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_UART_Transmit+0x2c>
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e075      	b.n	8003c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit+0x3e>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e06e      	b.n	8003c2a <HAL_UART_Transmit+0x11c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2221      	movs	r2, #33	; 0x21
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b62:	f7fd fe2b 	bl	80017bc <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7c:	d108      	bne.n	8003b90 <HAL_UART_Transmit+0x82>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d104      	bne.n	8003b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e003      	b.n	8003b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ba0:	e02a      	b.n	8003bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f840 	bl	8003c32 <UART_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e036      	b.n	8003c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	e007      	b.n	8003bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1cf      	bne.n	8003ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2140      	movs	r1, #64	; 0x40
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f810 	bl	8003c32 <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b090      	sub	sp, #64	; 0x40
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c42:	e050      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c4a:	d04c      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c52:	f7fd fdb3 	bl	80017bc <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d241      	bcs.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c82:	637a      	str	r2, [r7, #52]	; 0x34
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb6:	623a      	str	r2, [r7, #32]
 8003cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	69f9      	ldr	r1, [r7, #28]
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e00f      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d09f      	beq.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3740      	adds	r7, #64	; 0x40
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b0c0      	sub	sp, #256	; 0x100
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	68d9      	ldr	r1, [r3, #12]
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	ea40 0301 	orr.w	r3, r0, r1
 8003d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d68:	f021 010c 	bic.w	r1, r1, #12
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d76:	430b      	orrs	r3, r1
 8003d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	6999      	ldr	r1, [r3, #24]
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	ea40 0301 	orr.w	r3, r0, r1
 8003d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b8f      	ldr	r3, [pc, #572]	; (8003fdc <UART_SetConfig+0x2cc>)
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d005      	beq.n	8003db0 <UART_SetConfig+0xa0>
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b8d      	ldr	r3, [pc, #564]	; (8003fe0 <UART_SetConfig+0x2d0>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d104      	bne.n	8003dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7fe fc5a 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003db4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003db8:	e003      	b.n	8003dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dba:	f7fe fc41 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8003dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dcc:	f040 810c 	bne.w	8003fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003de2:	4622      	mov	r2, r4
 8003de4:	462b      	mov	r3, r5
 8003de6:	1891      	adds	r1, r2, r2
 8003de8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dea:	415b      	adcs	r3, r3
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003df2:	4621      	mov	r1, r4
 8003df4:	eb12 0801 	adds.w	r8, r2, r1
 8003df8:	4629      	mov	r1, r5
 8003dfa:	eb43 0901 	adc.w	r9, r3, r1
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e12:	4690      	mov	r8, r2
 8003e14:	4699      	mov	r9, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	eb18 0303 	adds.w	r3, r8, r3
 8003e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e20:	462b      	mov	r3, r5
 8003e22:	eb49 0303 	adc.w	r3, r9, r3
 8003e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e3e:	460b      	mov	r3, r1
 8003e40:	18db      	adds	r3, r3, r3
 8003e42:	653b      	str	r3, [r7, #80]	; 0x50
 8003e44:	4613      	mov	r3, r2
 8003e46:	eb42 0303 	adc.w	r3, r2, r3
 8003e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e54:	f7fc f9f4 	bl	8000240 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	011c      	lsls	r4, r3, #4
 8003e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	1891      	adds	r1, r2, r2
 8003e7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e80:	415b      	adcs	r3, r3
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e88:	4641      	mov	r1, r8
 8003e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e8e:	4649      	mov	r1, r9
 8003e90:	eb43 0b01 	adc.w	fp, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea8:	4692      	mov	sl, r2
 8003eaa:	469b      	mov	fp, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	eb1a 0303 	adds.w	r3, sl, r3
 8003eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	18db      	adds	r3, r3, r3
 8003ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eda:	4613      	mov	r3, r2
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003eea:	f7fc f9a9 	bl	8000240 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2264      	movs	r2, #100	; 0x64
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	1acb      	subs	r3, r1, r3
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f18:	441c      	add	r4, r3
 8003f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f34:	415b      	adcs	r3, r3
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	1851      	adds	r1, r2, r1
 8003f40:	6339      	str	r1, [r7, #48]	; 0x30
 8003f42:	4649      	mov	r1, r9
 8003f44:	414b      	adcs	r3, r1
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f54:	4659      	mov	r1, fp
 8003f56:	00cb      	lsls	r3, r1, #3
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5e:	4651      	mov	r1, sl
 8003f60:	00ca      	lsls	r2, r1, #3
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	4642      	mov	r2, r8
 8003f6a:	189b      	adds	r3, r3, r2
 8003f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f70:	464b      	mov	r3, r9
 8003f72:	460a      	mov	r2, r1
 8003f74:	eb42 0303 	adc.w	r3, r2, r3
 8003f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f90:	460b      	mov	r3, r1
 8003f92:	18db      	adds	r3, r3, r3
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f96:	4613      	mov	r3, r2
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fa6:	f7fc f94b 	bl	8000240 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	2164      	movs	r1, #100	; 0x64
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	3332      	adds	r3, #50	; 0x32
 8003fc2:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	f003 0207 	and.w	r2, r3, #7
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4422      	add	r2, r4
 8003fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd8:	e105      	b.n	80041e6 <UART_SetConfig+0x4d6>
 8003fda:	bf00      	nop
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	40011400 	.word	0x40011400
 8003fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	1891      	adds	r1, r2, r2
 8004000:	6239      	str	r1, [r7, #32]
 8004002:	415b      	adcs	r3, r3
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800400a:	4641      	mov	r1, r8
 800400c:	1854      	adds	r4, r2, r1
 800400e:	4649      	mov	r1, r9
 8004010:	eb43 0501 	adc.w	r5, r3, r1
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	00eb      	lsls	r3, r5, #3
 800401e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004022:	00e2      	lsls	r2, r4, #3
 8004024:	4614      	mov	r4, r2
 8004026:	461d      	mov	r5, r3
 8004028:	4643      	mov	r3, r8
 800402a:	18e3      	adds	r3, r4, r3
 800402c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004030:	464b      	mov	r3, r9
 8004032:	eb45 0303 	adc.w	r3, r5, r3
 8004036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004056:	4629      	mov	r1, r5
 8004058:	008b      	lsls	r3, r1, #2
 800405a:	4621      	mov	r1, r4
 800405c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004060:	4621      	mov	r1, r4
 8004062:	008a      	lsls	r2, r1, #2
 8004064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004068:	f7fc f8ea 	bl	8000240 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4b60      	ldr	r3, [pc, #384]	; (80041f4 <UART_SetConfig+0x4e4>)
 8004072:	fba3 2302 	umull	r2, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	011c      	lsls	r4, r3, #4
 800407a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004084:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	1891      	adds	r1, r2, r2
 8004092:	61b9      	str	r1, [r7, #24]
 8004094:	415b      	adcs	r3, r3
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800409c:	4641      	mov	r1, r8
 800409e:	1851      	adds	r1, r2, r1
 80040a0:	6139      	str	r1, [r7, #16]
 80040a2:	4649      	mov	r1, r9
 80040a4:	414b      	adcs	r3, r1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b4:	4659      	mov	r1, fp
 80040b6:	00cb      	lsls	r3, r1, #3
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040be:	4651      	mov	r1, sl
 80040c0:	00ca      	lsls	r2, r1, #3
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	4642      	mov	r2, r8
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040d0:	464b      	mov	r3, r9
 80040d2:	460a      	mov	r2, r1
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040f4:	4649      	mov	r1, r9
 80040f6:	008b      	lsls	r3, r1, #2
 80040f8:	4641      	mov	r1, r8
 80040fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fe:	4641      	mov	r1, r8
 8004100:	008a      	lsls	r2, r1, #2
 8004102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004106:	f7fc f89b 	bl	8000240 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4b39      	ldr	r3, [pc, #228]	; (80041f4 <UART_SetConfig+0x4e4>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	; 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a34      	ldr	r2, [pc, #208]	; (80041f4 <UART_SetConfig+0x4e4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412e:	441c      	add	r4, r3
 8004130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004134:	2200      	movs	r2, #0
 8004136:	673b      	str	r3, [r7, #112]	; 0x70
 8004138:	677a      	str	r2, [r7, #116]	; 0x74
 800413a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800413e:	4642      	mov	r2, r8
 8004140:	464b      	mov	r3, r9
 8004142:	1891      	adds	r1, r2, r2
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	415b      	adcs	r3, r3
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800414e:	4641      	mov	r1, r8
 8004150:	1851      	adds	r1, r2, r1
 8004152:	6039      	str	r1, [r7, #0]
 8004154:	4649      	mov	r1, r9
 8004156:	414b      	adcs	r3, r1
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004166:	4659      	mov	r1, fp
 8004168:	00cb      	lsls	r3, r1, #3
 800416a:	4651      	mov	r1, sl
 800416c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004170:	4651      	mov	r1, sl
 8004172:	00ca      	lsls	r2, r1, #3
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	4603      	mov	r3, r0
 800417a:	4642      	mov	r2, r8
 800417c:	189b      	adds	r3, r3, r2
 800417e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004180:	464b      	mov	r3, r9
 8004182:	460a      	mov	r2, r1
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	663b      	str	r3, [r7, #96]	; 0x60
 8004194:	667a      	str	r2, [r7, #100]	; 0x64
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041a2:	4649      	mov	r1, r9
 80041a4:	008b      	lsls	r3, r1, #2
 80041a6:	4641      	mov	r1, r8
 80041a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ac:	4641      	mov	r1, r8
 80041ae:	008a      	lsls	r2, r1, #2
 80041b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041b4:	f7fc f844 	bl	8000240 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <UART_SetConfig+0x4e4>)
 80041be:	fba3 1302 	umull	r1, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2164      	movs	r1, #100	; 0x64
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	3332      	adds	r3, #50	; 0x32
 80041d0:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <UART_SetConfig+0x4e4>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	f003 020f 	and.w	r2, r3, #15
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4422      	add	r2, r4
 80041e4:	609a      	str	r2, [r3, #8]
}
 80041e6:	bf00      	nop
 80041e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	51eb851f 	.word	0x51eb851f

080041f8 <interface_tx_frame>:
 80041f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041fc:	b085      	sub	sp, #20
 80041fe:	4605      	mov	r5, r0
 8004200:	461c      	mov	r4, r3
 8004202:	6883      	ldr	r3, [r0, #8]
 8004204:	695e      	ldr	r6, [r3, #20]
 8004206:	b1e2      	cbz	r2, 8004242 <interface_tx_frame+0x4a>
 8004208:	9102      	str	r1, [sp, #8]
 800420a:	fa1f f882 	uxth.w	r8, r2
 800420e:	f8ad 800c 	strh.w	r8, [sp, #12]
 8004212:	f04f 0900 	mov.w	r9, #0
 8004216:	f8ad 900e 	strh.w	r9, [sp, #14]
 800421a:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800421c:	ab02      	add	r3, sp, #8
 800421e:	464a      	mov	r2, r9
 8004220:	2120      	movs	r1, #32
 8004222:	47b8      	blx	r7
 8004224:	f8ad 8000 	strh.w	r8, [sp]
 8004228:	f8ad 9002 	strh.w	r9, [sp, #2]
 800422c:	68e3      	ldr	r3, [r4, #12]
 800422e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004232:	f88d 3004 	strb.w	r3, [sp, #4]
 8004236:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004238:	466b      	mov	r3, sp
 800423a:	464a      	mov	r2, r9
 800423c:	2137      	movs	r1, #55	; 0x37
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	68e3      	ldr	r3, [r4, #12]
 8004244:	f013 0f1d 	tst.w	r3, #29
 8004248:	d005      	beq.n	8004256 <interface_tx_frame+0x5e>
 800424a:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800424c:	4623      	mov	r3, r4
 800424e:	2200      	movs	r2, #0
 8004250:	2105      	movs	r1, #5
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	db0c      	blt.n	8004276 <interface_tx_frame+0x7e>
 800425c:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800425e:	1d23      	adds	r3, r4, #4
 8004260:	2200      	movs	r2, #0
 8004262:	2110      	movs	r1, #16
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800426a:	f104 0308 	add.w	r3, r4, #8
 800426e:	2200      	movs	r2, #0
 8004270:	2151      	movs	r1, #81	; 0x51
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8004278:	f104 030c 	add.w	r3, r4, #12
 800427c:	2200      	movs	r2, #0
 800427e:	2104      	movs	r1, #4
 8004280:	4628      	mov	r0, r5
 8004282:	47b0      	blx	r6
 8004284:	b005      	add	sp, #20
 8004286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800428a <interface_get_timestamp>:
 800428a:	b530      	push	{r4, r5, lr}
 800428c:	b083      	sub	sp, #12
 800428e:	ab02      	add	r3, sp, #8
 8004290:	2400      	movs	r4, #0
 8004292:	2500      	movs	r5, #0
 8004294:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8004298:	6882      	ldr	r2, [r0, #8]
 800429a:	6952      	ldr	r2, [r2, #20]
 800429c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800429e:	2200      	movs	r2, #0
 80042a0:	215f      	movs	r1, #95	; 0x5f
 80042a2:	47a0      	blx	r4
 80042a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042a8:	b003      	add	sp, #12
 80042aa:	bd30      	pop	{r4, r5, pc}

080042ac <interface_rx_disable>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	6883      	ldr	r3, [r0, #8]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80042b4:	2300      	movs	r3, #0
 80042b6:	461a      	mov	r2, r3
 80042b8:	2103      	movs	r1, #3
 80042ba:	47a0      	blx	r4
 80042bc:	bd10      	pop	{r4, pc}
	...

080042c0 <interface_rx_enable>:
 80042c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	4604      	mov	r4, r0
 80042c8:	6883      	ldr	r3, [r0, #8]
 80042ca:	695d      	ldr	r5, [r3, #20]
 80042cc:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80042d0:	680b      	ldr	r3, [r1, #0]
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	684a      	ldr	r2, [r1, #4]
 80042d6:	ab04      	add	r3, sp, #16
 80042d8:	f843 2d08 	str.w	r2, [r3, #-8]!
 80042dc:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80042de:	2200      	movs	r2, #0
 80042e0:	214f      	movs	r1, #79	; 0x4f
 80042e2:	47b8      	blx	r7
 80042e4:	4607      	mov	r7, r0
 80042e6:	b118      	cbz	r0, 80042f0 <interface_rx_enable+0x30>
 80042e8:	4638      	mov	r0, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f0:	68a3      	ldr	r3, [r4, #8]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db3c      	blt.n	8004376 <interface_rx_enable+0xb6>
 80042fc:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80042fe:	ab01      	add	r3, sp, #4
 8004300:	2200      	movs	r2, #0
 8004302:	2157      	movs	r1, #87	; 0x57
 8004304:	4620      	mov	r0, r4
 8004306:	47b8      	blx	r7
 8004308:	bba8      	cbnz	r0, 8004376 <interface_rx_enable+0xb6>
 800430a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800430e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004318:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800431c:	4313      	orrs	r3, r2
 800431e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004322:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004326:	f1ba 0f00 	cmp.w	sl, #0
 800432a:	d131      	bne.n	8004390 <interface_rx_enable+0xd0>
 800432c:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 8004330:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004334:	9303      	str	r3, [sp, #12]
 8004336:	f04f 0a01 	mov.w	sl, #1
 800433a:	68a3      	ldr	r3, [r4, #8]
 800433c:	695f      	ldr	r7, [r3, #20]
 800433e:	f10d 0302 	add.w	r3, sp, #2
 8004342:	2200      	movs	r2, #0
 8004344:	217b      	movs	r1, #123	; 0x7b
 8004346:	4620      	mov	r0, r4
 8004348:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800434a:	47b0      	blx	r6
 800434c:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8004350:	2b01      	cmp	r3, #1
 8004352:	d04e      	beq.n	80043f2 <interface_rx_enable+0x132>
 8004354:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004358:	2201      	movs	r2, #1
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004362:	ea22 0203 	bic.w	r2, r2, r3
 8004366:	ab04      	add	r3, sp, #16
 8004368:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 800436c:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800436e:	2200      	movs	r2, #0
 8004370:	216b      	movs	r1, #107	; 0x6b
 8004372:	4620      	mov	r0, r4
 8004374:	47b8      	blx	r7
 8004376:	f1ba 0f00 	cmp.w	sl, #0
 800437a:	d14a      	bne.n	8004412 <interface_rx_enable+0x152>
 800437c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800437e:	2300      	movs	r3, #0
 8004380:	461a      	mov	r2, r3
 8004382:	211f      	movs	r1, #31
 8004384:	4620      	mov	r0, r4
 8004386:	47a8      	blx	r5
 8004388:	4607      	mov	r7, r0
 800438a:	2800      	cmp	r0, #0
 800438c:	d150      	bne.n	8004430 <interface_rx_enable+0x170>
 800438e:	e7ab      	b.n	80042e8 <interface_rx_enable+0x28>
 8004390:	9a03      	ldr	r2, [sp, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	4698      	mov	r8, r3
 8004396:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800439a:	ea4f 1249 	mov.w	r2, r9, lsl #5
 800439e:	0158      	lsls	r0, r3, #5
 80043a0:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 80043a4:	1ac0      	subs	r0, r0, r3
 80043a6:	eb61 0109 	sbc.w	r1, r1, r9
 80043aa:	024b      	lsls	r3, r1, #9
 80043ac:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80043b0:	0242      	lsls	r2, r0, #9
 80043b2:	eb12 0008 	adds.w	r0, r2, r8
 80043b6:	eb43 0109 	adc.w	r1, r3, r9
 80043ba:	018b      	lsls	r3, r1, #6
 80043bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043c0:	0182      	lsls	r2, r0, #6
 80043c2:	1a12      	subs	r2, r2, r0
 80043c4:	eb63 0301 	sbc.w	r3, r3, r1
 80043c8:	4616      	mov	r6, r2
 80043ca:	461f      	mov	r7, r3
 80043cc:	4a31      	ldr	r2, [pc, #196]	; (8004494 <interface_rx_enable+0x1d4>)
 80043ce:	2300      	movs	r3, #0
 80043d0:	eb16 0008 	adds.w	r0, r6, r8
 80043d4:	eb47 0109 	adc.w	r1, r7, r9
 80043d8:	f7fb ff32 	bl	8000240 <__aeabi_uldivmod>
 80043dc:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 80043e0:	ddab      	ble.n	800433a <interface_rx_enable+0x7a>
 80043e2:	68a3      	ldr	r3, [r4, #8]
 80043e4:	695f      	ldr	r7, [r3, #20]
 80043e6:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 80043ea:	d0a8      	beq.n	800433e <interface_rx_enable+0x7e>
 80043ec:	f7fc fa43 	bl	8000876 <deca_usleep>
 80043f0:	e7a5      	b.n	800433e <interface_rx_enable+0x7e>
 80043f2:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80043f6:	2201      	movs	r2, #1
 80043f8:	409a      	lsls	r2, r3
 80043fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80043fe:	431a      	orrs	r2, r3
 8004400:	ab04      	add	r3, sp, #16
 8004402:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8004406:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8004408:	2200      	movs	r2, #0
 800440a:	216b      	movs	r1, #107	; 0x6b
 800440c:	4620      	mov	r0, r4
 800440e:	47b8      	blx	r7
 8004410:	e7b1      	b.n	8004376 <interface_rx_enable+0xb6>
 8004412:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8004414:	ab03      	add	r3, sp, #12
 8004416:	2200      	movs	r2, #0
 8004418:	2105      	movs	r1, #5
 800441a:	4620      	mov	r0, r4
 800441c:	47b0      	blx	r6
 800441e:	4607      	mov	r7, r0
 8004420:	b930      	cbnz	r0, 8004430 <interface_rx_enable+0x170>
 8004422:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004424:	2300      	movs	r3, #0
 8004426:	2201      	movs	r2, #1
 8004428:	211f      	movs	r1, #31
 800442a:	4620      	mov	r0, r4
 800442c:	47a8      	blx	r5
 800442e:	4607      	mov	r7, r0
 8004430:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004434:	2b00      	cmp	r3, #0
 8004436:	f6ff af57 	blt.w	80042e8 <interface_rx_enable+0x28>
 800443a:	68a3      	ldr	r3, [r4, #8]
 800443c:	695d      	ldr	r5, [r3, #20]
 800443e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8004440:	ab01      	add	r3, sp, #4
 8004442:	2200      	movs	r2, #0
 8004444:	217b      	movs	r1, #123	; 0x7b
 8004446:	4620      	mov	r0, r4
 8004448:	47b0      	blx	r6
 800444a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800444e:	b18b      	cbz	r3, 8004474 <interface_rx_enable+0x1b4>
 8004450:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004454:	2201      	movs	r2, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800445e:	ea22 0203 	bic.w	r2, r2, r3
 8004462:	ab04      	add	r3, sp, #16
 8004464:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004468:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800446a:	2200      	movs	r2, #0
 800446c:	216b      	movs	r1, #107	; 0x6b
 800446e:	4620      	mov	r0, r4
 8004470:	47a8      	blx	r5
 8004472:	e739      	b.n	80042e8 <interface_rx_enable+0x28>
 8004474:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004478:	2201      	movs	r2, #1
 800447a:	409a      	lsls	r2, r3
 800447c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004480:	431a      	orrs	r2, r3
 8004482:	ab04      	add	r3, sp, #16
 8004484:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004488:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800448a:	2200      	movs	r2, #0
 800448c:	216b      	movs	r1, #107	; 0x6b
 800448e:	4620      	mov	r0, r4
 8004490:	47a8      	blx	r5
 8004492:	e729      	b.n	80042e8 <interface_rx_enable+0x28>
 8004494:	0ee09800 	.word	0x0ee09800

08004498 <interface_read_rx_frame>:
 8004498:	b510      	push	{r4, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	9100      	str	r1, [sp, #0]
 800449e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80044a8:	6883      	ldr	r3, [r0, #8]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80044ae:	466b      	mov	r3, sp
 80044b0:	2121      	movs	r1, #33	; 0x21
 80044b2:	47a0      	blx	r4
 80044b4:	b002      	add	sp, #8
 80044b6:	bd10      	pop	{r4, pc}

080044b8 <dwt_probe>:
 80044b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ba:	b083      	sub	sp, #12
 80044bc:	6803      	ldr	r3, [r0, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d037      	beq.n	8004532 <dwt_probe+0x7a>
 80044c2:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <dwt_probe+0x88>)
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <dwt_probe+0x88>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6842      	ldr	r2, [r0, #4]
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	6882      	ldr	r2, [r0, #8]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f88d 2003 	strb.w	r2, [sp, #3]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681c      	ldr	r4, [r3, #0]
 80044dc:	ab01      	add	r3, sp, #4
 80044de:	2204      	movs	r2, #4
 80044e0:	f10d 0103 	add.w	r1, sp, #3
 80044e4:	2001      	movs	r0, #1
 80044e6:	47a0      	blx	r4
 80044e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044ec:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80044f0:	0409      	lsls	r1, r1, #16
 80044f2:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80044f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80044fa:	4319      	orrs	r1, r3
 80044fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004500:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8004504:	4a0f      	ldr	r2, [pc, #60]	; (8004544 <dwt_probe+0x8c>)
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <dwt_probe+0x90>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d216      	bcs.n	800453a <dwt_probe+0x82>
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <dwt_probe+0x88>)
 800450e:	681f      	ldr	r7, [r3, #0]
 8004510:	4613      	mov	r3, r2
 8004512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004516:	2600      	movs	r6, #0
 8004518:	4d0b      	ldr	r5, [pc, #44]	; (8004548 <dwt_probe+0x90>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	404a      	eors	r2, r1
 800451e:	685c      	ldr	r4, [r3, #4]
 8004520:	4222      	tst	r2, r4
 8004522:	bf04      	itt	eq
 8004524:	60bb      	streq	r3, [r7, #8]
 8004526:	4630      	moveq	r0, r6
 8004528:	331c      	adds	r3, #28
 800452a:	42ab      	cmp	r3, r5
 800452c:	d3f5      	bcc.n	800451a <dwt_probe+0x62>
 800452e:	b003      	add	sp, #12
 8004530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004532:	4b03      	ldr	r3, [pc, #12]	; (8004540 <dwt_probe+0x88>)
 8004534:	4a05      	ldr	r2, [pc, #20]	; (800454c <dwt_probe+0x94>)
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e7c5      	b.n	80044c6 <dwt_probe+0xe>
 800453a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800453e:	e7f6      	b.n	800452e <dwt_probe+0x76>
 8004540:	20000200 	.word	0x20000200
 8004544:	08000198 	.word	0x08000198
 8004548:	080001ec 	.word	0x080001ec
 800454c:	20000204 	.word	0x20000204

08004550 <dwt_setlnapamode>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <dwt_setlnapamode+0x18>)
 8004554:	681c      	ldr	r4, [r3, #0]
 8004556:	68a3      	ldr	r3, [r4, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800455c:	2300      	movs	r3, #0
 800455e:	4602      	mov	r2, r0
 8004560:	2113      	movs	r1, #19
 8004562:	4620      	mov	r0, r4
 8004564:	47a8      	blx	r5
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000200 	.word	0x20000200

0800456c <dwt_initialise>:
 800456c:	b508      	push	{r3, lr}
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <dwt_initialise+0x14>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	6912      	ldr	r2, [r2, #16]
 8004576:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004578:	4601      	mov	r1, r0
 800457a:	4618      	mov	r0, r3
 800457c:	4790      	blx	r2
 800457e:	bd08      	pop	{r3, pc}
 8004580:	20000200 	.word	0x20000200

08004584 <dwt_configure>:
 8004584:	b508      	push	{r3, lr}
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <dwt_configure+0x14>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	6912      	ldr	r2, [r2, #16]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	4601      	mov	r1, r0
 8004592:	4618      	mov	r0, r3
 8004594:	4790      	blx	r2
 8004596:	bd08      	pop	{r3, pc}
 8004598:	20000200 	.word	0x20000200

0800459c <dwt_configuretxrf>:
 800459c:	b508      	push	{r3, lr}
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <dwt_configuretxrf+0x14>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	6912      	ldr	r2, [r2, #16]
 80045a6:	6992      	ldr	r2, [r2, #24]
 80045a8:	4601      	mov	r1, r0
 80045aa:	4618      	mov	r0, r3
 80045ac:	4790      	blx	r2
 80045ae:	bd08      	pop	{r3, pc}
 80045b0:	20000200 	.word	0x20000200

080045b4 <dwt_setrxantennadelay>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	ab02      	add	r3, sp, #8
 80045ba:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80045be:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <dwt_setrxantennadelay+0x20>)
 80045c0:	6810      	ldr	r0, [r2, #0]
 80045c2:	6882      	ldr	r2, [r0, #8]
 80045c4:	6912      	ldr	r2, [r2, #16]
 80045c6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80045c8:	2200      	movs	r2, #0
 80045ca:	211b      	movs	r1, #27
 80045cc:	47a0      	blx	r4
 80045ce:	b002      	add	sp, #8
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	bf00      	nop
 80045d4:	20000200 	.word	0x20000200

080045d8 <dwt_settxantennadelay>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	ab02      	add	r3, sp, #8
 80045de:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <dwt_settxantennadelay+0x20>)
 80045e4:	6810      	ldr	r0, [r2, #0]
 80045e6:	6882      	ldr	r2, [r0, #8]
 80045e8:	6912      	ldr	r2, [r2, #16]
 80045ea:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80045ec:	2200      	movs	r2, #0
 80045ee:	211d      	movs	r1, #29
 80045f0:	47a0      	blx	r4
 80045f2:	b002      	add	sp, #8
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	bf00      	nop
 80045f8:	20000200 	.word	0x20000200

080045fc <dwt_writetxdata>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <dwt_writetxdata+0x18>)
 8004600:	681c      	ldr	r4, [r3, #0]
 8004602:	68a3      	ldr	r3, [r4, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	685d      	ldr	r5, [r3, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	460a      	mov	r2, r1
 800460c:	4601      	mov	r1, r0
 800460e:	4620      	mov	r0, r4
 8004610:	47a8      	blx	r5
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20000200 	.word	0x20000200

08004618 <dwt_writetxfctrl>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <dwt_writetxfctrl+0x18>)
 800461c:	681c      	ldr	r4, [r3, #0]
 800461e:	68a3      	ldr	r3, [r4, #8]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	689d      	ldr	r5, [r3, #8]
 8004624:	4613      	mov	r3, r2
 8004626:	460a      	mov	r2, r1
 8004628:	4601      	mov	r1, r0
 800462a:	4620      	mov	r0, r4
 800462c:	47a8      	blx	r5
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	20000200 	.word	0x20000200

08004634 <dwt_starttx>:
 8004634:	b510      	push	{r4, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	ab02      	add	r3, sp, #8
 800463a:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800463e:	4a05      	ldr	r2, [pc, #20]	; (8004654 <dwt_starttx+0x20>)
 8004640:	6810      	ldr	r0, [r2, #0]
 8004642:	6882      	ldr	r2, [r0, #8]
 8004644:	6912      	ldr	r2, [r2, #16]
 8004646:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004648:	2200      	movs	r2, #0
 800464a:	2104      	movs	r1, #4
 800464c:	47a0      	blx	r4
 800464e:	b002      	add	sp, #8
 8004650:	bd10      	pop	{r4, pc}
 8004652:	bf00      	nop
 8004654:	20000200 	.word	0x20000200

08004658 <dwt_setdelayedtrxtime>:
 8004658:	b510      	push	{r4, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	ab02      	add	r3, sp, #8
 800465e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004662:	4a05      	ldr	r2, [pc, #20]	; (8004678 <dwt_setdelayedtrxtime+0x20>)
 8004664:	6810      	ldr	r0, [r2, #0]
 8004666:	6882      	ldr	r2, [r0, #8]
 8004668:	6912      	ldr	r2, [r2, #16]
 800466a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800466c:	2200      	movs	r2, #0
 800466e:	2105      	movs	r1, #5
 8004670:	47a0      	blx	r4
 8004672:	b002      	add	sp, #8
 8004674:	bd10      	pop	{r4, pc}
 8004676:	bf00      	nop
 8004678:	20000200 	.word	0x20000200

0800467c <dwt_readrxtimestamp>:
 800467c:	b508      	push	{r3, lr}
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <dwt_readrxtimestamp+0x14>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	6912      	ldr	r2, [r2, #16]
 8004686:	6952      	ldr	r2, [r2, #20]
 8004688:	4601      	mov	r1, r0
 800468a:	4618      	mov	r0, r3
 800468c:	4790      	blx	r2
 800468e:	bd08      	pop	{r3, pc}
 8004690:	20000200 	.word	0x20000200

08004694 <dwt_forcetrxoff>:
 8004694:	b510      	push	{r4, lr}
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <dwt_forcetrxoff+0x18>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	6883      	ldr	r3, [r0, #8]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80046a0:	2300      	movs	r3, #0
 80046a2:	461a      	mov	r2, r3
 80046a4:	2103      	movs	r1, #3
 80046a6:	47a0      	blx	r4
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	bf00      	nop
 80046ac:	20000200 	.word	0x20000200

080046b0 <dwt_rxenable>:
 80046b0:	b508      	push	{r3, lr}
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <dwt_rxenable+0x14>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	6912      	ldr	r2, [r2, #16]
 80046ba:	6a12      	ldr	r2, [r2, #32]
 80046bc:	4601      	mov	r1, r0
 80046be:	4618      	mov	r0, r3
 80046c0:	4790      	blx	r2
 80046c2:	bd08      	pop	{r3, pc}
 80046c4:	20000200 	.word	0x20000200

080046c8 <dwt_checkidlerc>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	2200      	movs	r2, #0
 80046ce:	ab02      	add	r3, sp, #8
 80046d0:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80046d4:	4905      	ldr	r1, [pc, #20]	; (80046ec <dwt_checkidlerc+0x24>)
 80046d6:	6808      	ldr	r0, [r1, #0]
 80046d8:	6881      	ldr	r1, [r0, #8]
 80046da:	6909      	ldr	r1, [r1, #16]
 80046dc:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80046de:	2158      	movs	r1, #88	; 0x58
 80046e0:	47a0      	blx	r4
 80046e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80046e6:	b002      	add	sp, #8
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	bf00      	nop
 80046ec:	20000200 	.word	0x20000200

080046f0 <dwt_generatecrc8>:
 80046f0:	2900      	cmp	r1, #0
 80046f2:	dd0d      	ble.n	8004710 <dwt_generatecrc8+0x20>
 80046f4:	b410      	push	{r4}
 80046f6:	1e43      	subs	r3, r0, #1
 80046f8:	4419      	add	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	4c05      	ldr	r4, [pc, #20]	; (8004714 <dwt_generatecrc8+0x24>)
 80046fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004702:	4050      	eors	r0, r2
 8004704:	5c20      	ldrb	r0, [r4, r0]
 8004706:	428b      	cmp	r3, r1
 8004708:	d1f9      	bne.n	80046fe <dwt_generatecrc8+0xe>
 800470a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	4610      	mov	r0, r2
 8004712:	4770      	bx	lr
 8004714:	08011dfc 	.word	0x08011dfc

08004718 <dwt_readrxdata>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <dwt_readrxdata+0x18>)
 800471c:	681c      	ldr	r4, [r3, #0]
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	68dd      	ldr	r5, [r3, #12]
 8004724:	4613      	mov	r3, r2
 8004726:	460a      	mov	r2, r1
 8004728:	4601      	mov	r1, r0
 800472a:	4620      	mov	r0, r4
 800472c:	47a8      	blx	r5
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	20000200 	.word	0x20000200

08004734 <dwt_setleds>:
 8004734:	b510      	push	{r4, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	ab02      	add	r3, sp, #8
 800473a:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <dwt_setleds+0x20>)
 8004740:	6810      	ldr	r0, [r2, #0]
 8004742:	6882      	ldr	r2, [r0, #8]
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004748:	2200      	movs	r2, #0
 800474a:	2155      	movs	r1, #85	; 0x55
 800474c:	47a0      	blx	r4
 800474e:	b002      	add	sp, #8
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	20000200 	.word	0x20000200

08004758 <dwt_writesysstatuslo>:
 8004758:	b510      	push	{r4, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	ab02      	add	r3, sp, #8
 800475e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004762:	4a05      	ldr	r2, [pc, #20]	; (8004778 <dwt_writesysstatuslo+0x20>)
 8004764:	6810      	ldr	r0, [r2, #0]
 8004766:	6882      	ldr	r2, [r0, #8]
 8004768:	6912      	ldr	r2, [r2, #16]
 800476a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800476c:	2200      	movs	r2, #0
 800476e:	2174      	movs	r1, #116	; 0x74
 8004770:	47a0      	blx	r4
 8004772:	b002      	add	sp, #8
 8004774:	bd10      	pop	{r4, pc}
 8004776:	bf00      	nop
 8004778:	20000200 	.word	0x20000200

0800477c <dwt_readsysstatuslo>:
 800477c:	b510      	push	{r4, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	2200      	movs	r2, #0
 8004782:	ab02      	add	r3, sp, #8
 8004784:	f843 2d04 	str.w	r2, [r3, #-4]!
 8004788:	4904      	ldr	r1, [pc, #16]	; (800479c <dwt_readsysstatuslo+0x20>)
 800478a:	6808      	ldr	r0, [r1, #0]
 800478c:	6881      	ldr	r1, [r0, #8]
 800478e:	6909      	ldr	r1, [r1, #16]
 8004790:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004792:	2176      	movs	r1, #118	; 0x76
 8004794:	47a0      	blx	r4
 8004796:	9801      	ldr	r0, [sp, #4]
 8004798:	b002      	add	sp, #8
 800479a:	bd10      	pop	{r4, pc}
 800479c:	20000200 	.word	0x20000200

080047a0 <dwt_readsysstatushi>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	2200      	movs	r2, #0
 80047a6:	ab02      	add	r3, sp, #8
 80047a8:	f843 2d04 	str.w	r2, [r3, #-4]!
 80047ac:	4904      	ldr	r1, [pc, #16]	; (80047c0 <dwt_readsysstatushi+0x20>)
 80047ae:	6808      	ldr	r0, [r1, #0]
 80047b0:	6881      	ldr	r1, [r0, #8]
 80047b2:	6909      	ldr	r1, [r1, #16]
 80047b4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80047b6:	2177      	movs	r1, #119	; 0x77
 80047b8:	47a0      	blx	r4
 80047ba:	9801      	ldr	r0, [sp, #4]
 80047bc:	b002      	add	sp, #8
 80047be:	bd10      	pop	{r4, pc}
 80047c0:	20000200 	.word	0x20000200

080047c4 <dwt_getframelength>:
 80047c4:	b510      	push	{r4, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	2200      	movs	r2, #0
 80047ca:	ab02      	add	r3, sp, #8
 80047cc:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80047d0:	4905      	ldr	r1, [pc, #20]	; (80047e8 <dwt_getframelength+0x24>)
 80047d2:	6808      	ldr	r0, [r1, #0]
 80047d4:	6881      	ldr	r1, [r0, #8]
 80047d6:	6909      	ldr	r1, [r1, #16]
 80047d8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80047da:	217a      	movs	r1, #122	; 0x7a
 80047dc:	47a0      	blx	r4
 80047de:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80047e2:	b002      	add	sp, #8
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	bf00      	nop
 80047e8:	20000200 	.word	0x20000200

080047ec <dwt_dbg_fn>:
 80047ec:	2998      	cmp	r1, #152	; 0x98
 80047ee:	4802      	ldr	r0, [pc, #8]	; (80047f8 <dwt_dbg_fn+0xc>)
 80047f0:	bf18      	it	ne
 80047f2:	2000      	movne	r0, #0
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	08011ff4 	.word	0x08011ff4

080047fc <_deinit>:
 80047fc:	4770      	bx	lr

080047fe <dwt_xfer3xxx>:
 80047fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	4605      	mov	r5, r0
 8004806:	460e      	mov	r6, r1
 8004808:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800480c:	1990      	adds	r0, r2, r6
 800480e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004812:	4432      	add	r2, r6
 8004814:	f3c2 4204 	ubfx	r2, r2, #16, #5
 8004818:	0084      	lsls	r4, r0, #2
 800481a:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 800481e:	ea41 0204 	orr.w	r2, r1, r4
 8004822:	0a12      	lsrs	r2, r2, #8
 8004824:	f88d 200c 	strb.w	r2, [sp, #12]
 8004828:	f001 0703 	and.w	r7, r1, #3
 800482c:	433c      	orrs	r4, r7
 800482e:	f88d 400d 	strb.w	r4, [sp, #13]
 8004832:	461f      	mov	r7, r3
 8004834:	b973      	cbnz	r3, 8004854 <dwt_xfer3xxx+0x56>
 8004836:	2900      	cmp	r1, #0
 8004838:	d05c      	beq.n	80048f4 <dwt_xfer3xxx+0xf6>
 800483a:	0073      	lsls	r3, r6, #1
 800483c:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8004840:	f88d 300c 	strb.w	r3, [sp, #12]
 8004844:	2401      	movs	r4, #1
 8004846:	2900      	cmp	r1, #0
 8004848:	d02f      	beq.n	80048aa <dwt_xfer3xxx+0xac>
 800484a:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800484e:	2903      	cmp	r1, #3
 8004850:	d90a      	bls.n	8004868 <dwt_xfer3xxx+0x6a>
 8004852:	e7fe      	b.n	8004852 <dwt_xfer3xxx+0x54>
 8004854:	2800      	cmp	r0, #0
 8004856:	d14f      	bne.n	80048f8 <dwt_xfer3xxx+0xfa>
 8004858:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800485c:	d003      	beq.n	8004866 <dwt_xfer3xxx+0x68>
 800485e:	2900      	cmp	r1, #0
 8004860:	d14a      	bne.n	80048f8 <dwt_xfer3xxx+0xfa>
 8004862:	2401      	movs	r4, #1
 8004864:	e021      	b.n	80048aa <dwt_xfer3xxx+0xac>
 8004866:	2401      	movs	r4, #1
 8004868:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800486a:	7d9b      	ldrb	r3, [r3, #22]
 800486c:	b94b      	cbnz	r3, 8004882 <dwt_xfer3xxx+0x84>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	685d      	ldr	r5, [r3, #4]
 8004872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004874:	463a      	mov	r2, r7
 8004876:	a903      	add	r1, sp, #12
 8004878:	4620      	mov	r0, r4
 800487a:	47a8      	blx	r5
 800487c:	b004      	add	sp, #16
 800487e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004882:	2200      	movs	r2, #0
 8004884:	4621      	mov	r1, r4
 8004886:	a803      	add	r0, sp, #12
 8004888:	f7ff ff32 	bl	80046f0 <dwt_generatecrc8>
 800488c:	4602      	mov	r2, r0
 800488e:	4639      	mov	r1, r7
 8004890:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004892:	f7ff ff2d 	bl	80046f0 <dwt_generatecrc8>
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	9000      	str	r0, [sp, #0]
 800489a:	689d      	ldr	r5, [r3, #8]
 800489c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489e:	463a      	mov	r2, r7
 80048a0:	a903      	add	r1, sp, #12
 80048a2:	4620      	mov	r0, r4
 80048a4:	47a8      	blx	r5
 80048a6:	e7e9      	b.n	800487c <dwt_xfer3xxx+0x7e>
 80048a8:	2401      	movs	r4, #1
 80048aa:	682b      	ldr	r3, [r5, #0]
 80048ac:	f8d3 8000 	ldr.w	r8, [r3]
 80048b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b2:	463a      	mov	r2, r7
 80048b4:	a903      	add	r1, sp, #12
 80048b6:	4620      	mov	r0, r4
 80048b8:	47c0      	blx	r8
 80048ba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80048bc:	7d9b      	ldrb	r3, [r3, #22]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d1dc      	bne.n	800487c <dwt_xfer3xxx+0x7e>
 80048c2:	2e18      	cmp	r6, #24
 80048c4:	d0da      	beq.n	800487c <dwt_xfer3xxx+0x7e>
 80048c6:	2200      	movs	r2, #0
 80048c8:	4621      	mov	r1, r4
 80048ca:	a803      	add	r0, sp, #12
 80048cc:	f7ff ff10 	bl	80046f0 <dwt_generatecrc8>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4639      	mov	r1, r7
 80048d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048d6:	f7ff ff0b 	bl	80046f0 <dwt_generatecrc8>
 80048da:	4604      	mov	r4, r0
 80048dc:	2200      	movs	r2, #0
 80048de:	2118      	movs	r1, #24
 80048e0:	4628      	mov	r0, r5
 80048e2:	f000 f841 	bl	8004968 <dwt_read8bitoffsetreg>
 80048e6:	4284      	cmp	r4, r0
 80048e8:	d0c8      	beq.n	800487c <dwt_xfer3xxx+0x7e>
 80048ea:	68eb      	ldr	r3, [r5, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0c5      	beq.n	800487c <dwt_xfer3xxx+0x7e>
 80048f0:	4798      	blx	r3
 80048f2:	e7c3      	b.n	800487c <dwt_xfer3xxx+0x7e>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d0d7      	beq.n	80048a8 <dwt_xfer3xxx+0xaa>
 80048f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fc:	f88d 200c 	strb.w	r2, [sp, #12]
 8004900:	2402      	movs	r4, #2
 8004902:	e7a0      	b.n	8004846 <dwt_xfer3xxx+0x48>

08004904 <dwt_readfromdevice>:
 8004904:	b510      	push	{r4, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	2400      	movs	r4, #0
 800490a:	9401      	str	r4, [sp, #4]
 800490c:	9c04      	ldr	r4, [sp, #16]
 800490e:	9400      	str	r4, [sp, #0]
 8004910:	f7ff ff75 	bl	80047fe <dwt_xfer3xxx>
 8004914:	b002      	add	sp, #8
 8004916:	bd10      	pop	{r4, pc}

08004918 <dwt_read32bitoffsetreg>:
 8004918:	b500      	push	{lr}
 800491a:	b085      	sub	sp, #20
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2304      	movs	r3, #4
 8004922:	b292      	uxth	r2, r2
 8004924:	f7ff ffee 	bl	8004904 <dwt_readfromdevice>
 8004928:	f10d 030f 	add.w	r3, sp, #15
 800492c:	f10d 010b 	add.w	r1, sp, #11
 8004930:	2000      	movs	r0, #0
 8004932:	f813 2901 	ldrb.w	r2, [r3], #-1
 8004936:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800493a:	428b      	cmp	r3, r1
 800493c:	d1f9      	bne.n	8004932 <dwt_read32bitoffsetreg+0x1a>
 800493e:	b005      	add	sp, #20
 8004940:	f85d fb04 	ldr.w	pc, [sp], #4

08004944 <dwt_read16bitoffsetreg>:
 8004944:	b500      	push	{lr}
 8004946:	b085      	sub	sp, #20
 8004948:	ab03      	add	r3, sp, #12
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2302      	movs	r3, #2
 800494e:	b292      	uxth	r2, r2
 8004950:	f7ff ffd8 	bl	8004904 <dwt_readfromdevice>
 8004954:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004958:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800495c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8004960:	b280      	uxth	r0, r0
 8004962:	b005      	add	sp, #20
 8004964:	f85d fb04 	ldr.w	pc, [sp], #4

08004968 <dwt_read8bitoffsetreg>:
 8004968:	b500      	push	{lr}
 800496a:	b085      	sub	sp, #20
 800496c:	f10d 030f 	add.w	r3, sp, #15
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2301      	movs	r3, #1
 8004974:	b292      	uxth	r2, r2
 8004976:	f7ff ffc5 	bl	8004904 <dwt_readfromdevice>
 800497a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800497e:	b005      	add	sp, #20
 8004980:	f85d fb04 	ldr.w	pc, [sp], #4

08004984 <ull_readdiagnostics>:
 8004984:	b530      	push	{r4, r5, lr}
 8004986:	b0bd      	sub	sp, #244	; 0xf4
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800498e:	7bda      	ldrb	r2, [r3, #15]
 8004990:	2a01      	cmp	r2, #1
 8004992:	d01c      	beq.n	80049ce <ull_readdiagnostics+0x4a>
 8004994:	2a03      	cmp	r2, #3
 8004996:	f040 81d4 	bne.w	8004d42 <ull_readdiagnostics+0x3be>
 800499a:	7e1b      	ldrb	r3, [r3, #24]
 800499c:	f013 0f08 	tst.w	r3, #8
 80049a0:	d10c      	bne.n	80049bc <ull_readdiagnostics+0x38>
 80049a2:	f013 0f04 	tst.w	r3, #4
 80049a6:	ab02      	add	r3, sp, #8
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	bf14      	ite	ne
 80049ac:	2338      	movne	r3, #56	; 0x38
 80049ae:	2320      	moveq	r3, #32
 80049b0:	2200      	movs	r2, #0
 80049b2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80049b6:	f7ff ffa5 	bl	8004904 <dwt_readfromdevice>
 80049ba:	e019      	b.n	80049f0 <ull_readdiagnostics+0x6c>
 80049bc:	ab02      	add	r3, sp, #8
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	23e8      	movs	r3, #232	; 0xe8
 80049c2:	2200      	movs	r2, #0
 80049c4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80049c8:	f7ff ff9c 	bl	8004904 <dwt_readfromdevice>
 80049cc:	e010      	b.n	80049f0 <ull_readdiagnostics+0x6c>
 80049ce:	7e1b      	ldrb	r3, [r3, #24]
 80049d0:	f013 0f08 	tst.w	r3, #8
 80049d4:	f040 81ac 	bne.w	8004d30 <ull_readdiagnostics+0x3ac>
 80049d8:	f013 0f04 	tst.w	r3, #4
 80049dc:	ab02      	add	r3, sp, #8
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	bf14      	ite	ne
 80049e2:	2338      	movne	r3, #56	; 0x38
 80049e4:	2320      	moveq	r3, #32
 80049e6:	2200      	movs	r2, #0
 80049e8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80049ec:	f7ff ff8a 	bl	8004904 <dwt_readfromdevice>
 80049f0:	f10d 0217 	add.w	r2, sp, #23
 80049f4:	f104 031a 	add.w	r3, r4, #26
 80049f8:	f104 0020 	add.w	r0, r4, #32
 80049fc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004a00:	f803 1b01 	strb.w	r1, [r3], #1
 8004a04:	4283      	cmp	r3, r0
 8004a06:	d1f9      	bne.n	80049fc <ull_readdiagnostics+0x78>
 8004a08:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004a0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a18:	8463      	strh	r3, [r4, #34]	; 0x22
 8004a1a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8004a1e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004a22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a26:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004a2a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004a2e:	bf1c      	itt	ne
 8004a30:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8004a34:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8004a38:	8423      	strh	r3, [r4, #32]
 8004a3a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8004a3e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8004a42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004a4c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004a4e:	7e1b      	ldrb	r3, [r3, #24]
 8004a50:	f013 0f02 	tst.w	r3, #2
 8004a54:	f040 816a 	bne.w	8004d2c <ull_readdiagnostics+0x3a8>
 8004a58:	aa0a      	add	r2, sp, #40	; 0x28
 8004a5a:	1e63      	subs	r3, r4, #1
 8004a5c:	1d20      	adds	r0, r4, #4
 8004a5e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004a62:	f803 1f01 	strb.w	r1, [r3, #1]!
 8004a66:	79d1      	ldrb	r1, [r2, #7]
 8004a68:	7219      	strb	r1, [r3, #8]
 8004a6a:	7bd1      	ldrb	r1, [r2, #15]
 8004a6c:	7459      	strb	r1, [r3, #17]
 8004a6e:	4283      	cmp	r3, r0
 8004a70:	d1f5      	bne.n	8004a5e <ull_readdiagnostics+0xda>
 8004a72:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8004a76:	7163      	strb	r3, [r4, #5]
 8004a78:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8004a7c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8004a80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a84:	80e3      	strh	r3, [r4, #6]
 8004a86:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004a8a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004a8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004a92:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004a96:	f8a4 300d 	strh.w	r3, [r4, #13]
 8004a9a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8004a9e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004aa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004aa6:	f8a4 300f 	strh.w	r3, [r4, #15]
 8004aaa:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8004aae:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8004ab2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ab6:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004aba:	82e3      	strh	r3, [r4, #22]
 8004abc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8004ac0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8004ac4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ac8:	8323      	strh	r3, [r4, #24]
 8004aca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004acc:	7e1b      	ldrb	r3, [r3, #24]
 8004ace:	f013 0f04 	tst.w	r3, #4
 8004ad2:	f040 812b 	bne.w	8004d2c <ull_readdiagnostics+0x3a8>
 8004ad6:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8004ada:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ae4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8004aee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004af2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004af6:	6263      	str	r3, [r4, #36]	; 0x24
 8004af8:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8004afc:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b06:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8004b10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b1a:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8004b1e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b28:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8004b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b36:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004b3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b3c:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8004b40:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b4a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8004b54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b5c:	6323      	str	r3, [r4, #48]	; 0x30
 8004b5e:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8004b62:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b6c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8004b76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b7e:	6363      	str	r3, [r4, #52]	; 0x34
 8004b80:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8004b84:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b8e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8004b98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ba0:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ba2:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8004ba6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8004baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bae:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004bb0:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8004bb4:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004bbe:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8004bc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bcc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004bd0:	6423      	str	r3, [r4, #64]	; 0x40
 8004bd2:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8004bd6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8004bda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bde:	6463      	str	r3, [r4, #68]	; 0x44
 8004be0:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8004be4:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004bee:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8004bf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c00:	64a3      	str	r3, [r4, #72]	; 0x48
 8004c02:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8004c06:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c10:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8004c1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c1e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c22:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004c24:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8004c28:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c32:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8004c3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c44:	6523      	str	r3, [r4, #80]	; 0x50
 8004c46:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8004c4a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8004c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004c56:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8004c5a:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8004c5e:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8004c62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004c6e:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8004c72:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c7c:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8004c86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c90:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8004c94:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8004c98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c9c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004c9e:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8004ca2:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004cac:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8004cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004cbe:	6623      	str	r3, [r4, #96]	; 0x60
 8004cc0:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8004cc4:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004cce:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8004cd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cdc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ce0:	6663      	str	r3, [r4, #100]	; 0x64
 8004ce2:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8004ce6:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004cf0:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8004cfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cfe:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004d02:	66a3      	str	r3, [r4, #104]	; 0x68
 8004d04:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8004d08:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8004d0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d14:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8004d18:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8004d1c:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8004d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8004d2c:	b03d      	add	sp, #244	; 0xf4
 8004d2e:	bd30      	pop	{r4, r5, pc}
 8004d30:	ab02      	add	r3, sp, #8
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	23e8      	movs	r3, #232	; 0xe8
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8004d3c:	f7ff fde2 	bl	8004904 <dwt_readfromdevice>
 8004d40:	e656      	b.n	80049f0 <ull_readdiagnostics+0x6c>
 8004d42:	7e1b      	ldrb	r3, [r3, #24]
 8004d44:	f013 0f01 	tst.w	r3, #1
 8004d48:	f000 819f 	beq.w	800508a <ull_readdiagnostics+0x706>
 8004d4c:	ab02      	add	r3, sp, #8
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	236c      	movs	r3, #108	; 0x6c
 8004d52:	2200      	movs	r2, #0
 8004d54:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8004d58:	f7ff fdd4 	bl	8004904 <dwt_readfromdevice>
 8004d5c:	ab1d      	add	r3, sp, #116	; 0x74
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	236c      	movs	r3, #108	; 0x6c
 8004d62:	2200      	movs	r2, #0
 8004d64:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff fdcb 	bl	8004904 <dwt_readfromdevice>
 8004d6e:	aa02      	add	r2, sp, #8
 8004d70:	1e63      	subs	r3, r4, #1
 8004d72:	1d20      	adds	r0, r4, #4
 8004d74:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004d78:	f803 1f01 	strb.w	r1, [r3, #1]!
 8004d7c:	79d1      	ldrb	r1, [r2, #7]
 8004d7e:	7219      	strb	r1, [r3, #8]
 8004d80:	7bd1      	ldrb	r1, [r2, #15]
 8004d82:	7459      	strb	r1, [r3, #17]
 8004d84:	7dd1      	ldrb	r1, [r2, #23]
 8004d86:	7699      	strb	r1, [r3, #26]
 8004d88:	4283      	cmp	r3, r0
 8004d8a:	d1f3      	bne.n	8004d74 <ull_readdiagnostics+0x3f0>
 8004d8c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8004d90:	77e3      	strb	r3, [r4, #31]
 8004d92:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004d96:	7163      	strb	r3, [r4, #5]
 8004d98:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004d9c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004da0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004da4:	80e3      	strh	r3, [r4, #6]
 8004da6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004daa:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8004dae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8004db2:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8004db6:	f8a4 200d 	strh.w	r2, [r4, #13]
 8004dba:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004dbe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004dc2:	f8a4 200f 	strh.w	r2, [r4, #15]
 8004dc6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8004dca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dce:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004dd2:	82e3      	strh	r3, [r4, #22]
 8004dd4:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8004dd8:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8004ddc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004de0:	8323      	strh	r3, [r4, #24]
 8004de2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8004de6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8004dea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004df2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004df6:	bf1c      	itt	ne
 8004df8:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8004dfc:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8004e00:	8423      	strh	r3, [r4, #32]
 8004e02:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8004e06:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004e0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e12:	8463      	strh	r3, [r4, #34]	; 0x22
 8004e14:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8004e18:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e22:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8004e2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e30:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004e34:	6263      	str	r3, [r4, #36]	; 0x24
 8004e36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004e38:	7e1b      	ldrb	r3, [r3, #24]
 8004e3a:	f013 0f01 	tst.w	r3, #1
 8004e3e:	f43f af75 	beq.w	8004d2c <ull_readdiagnostics+0x3a8>
 8004e42:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8004e46:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e50:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8004e5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e62:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e64:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004e68:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e72:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8004e7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e80:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e86:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8004e8a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e94:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8004e9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ea2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ea8:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8004eac:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004eb6:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8004ec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ec4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8004eca:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8004ece:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ed8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8004ee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ee6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004eea:	63a3      	str	r3, [r4, #56]	; 0x38
 8004eec:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8004ef0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8004ef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ef8:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004efa:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8004efe:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004f02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f0c:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8004f10:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f1a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8004f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f28:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f2c:	6423      	str	r3, [r4, #64]	; 0x40
 8004f2e:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8004f32:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8004f36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f3a:	6463      	str	r3, [r4, #68]	; 0x44
 8004f3c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8004f40:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f4a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8004f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f5c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f5e:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8004f62:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f6c:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8004f76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f7e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f80:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8004f84:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f8e:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8004f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8004fa2:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8004fa6:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8004faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004fb2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8004fb6:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8004fba:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8004fbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc6:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004fca:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8004fce:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004fd8:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8004fe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fe6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004fea:	65a3      	str	r3, [r4, #88]	; 0x58
 8004fec:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8004ff0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8004ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ff8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004ffa:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8004ffe:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005008:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800500c:	4313      	orrs	r3, r2
 800500e:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8005012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005016:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800501a:	6623      	str	r3, [r4, #96]	; 0x60
 800501c:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8005020:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800502a:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800502e:	4313      	orrs	r3, r2
 8005030:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8005034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005038:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800503c:	6663      	str	r3, [r4, #100]	; 0x64
 800503e:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8005042:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800504c:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005050:	4313      	orrs	r3, r2
 8005052:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005056:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800505a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800505e:	66a3      	str	r3, [r4, #104]	; 0x68
 8005060:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005064:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8005068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800506c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005070:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005074:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005078:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800507c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005084:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005088:	e650      	b.n	8004d2c <ull_readdiagnostics+0x3a8>
 800508a:	ab02      	add	r3, sp, #8
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2328      	movs	r3, #40	; 0x28
 8005090:	2200      	movs	r2, #0
 8005092:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005096:	f7ff fc35 	bl	8004904 <dwt_readfromdevice>
 800509a:	e668      	b.n	8004d6e <ull_readdiagnostics+0x3ea>

0800509c <ull_readrxtimestamp>:
 800509c:	b500      	push	{lr}
 800509e:	b083      	sub	sp, #12
 80050a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80050a2:	7bdb      	ldrb	r3, [r3, #15]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d00b      	beq.n	80050c0 <ull_readrxtimestamp+0x24>
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d110      	bne.n	80050ce <ull_readrxtimestamp+0x32>
 80050ac:	9100      	str	r1, [sp, #0]
 80050ae:	2305      	movs	r3, #5
 80050b0:	2204      	movs	r2, #4
 80050b2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80050b6:	f7ff fc25 	bl	8004904 <dwt_readfromdevice>
 80050ba:	b003      	add	sp, #12
 80050bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80050c0:	9100      	str	r1, [sp, #0]
 80050c2:	2305      	movs	r3, #5
 80050c4:	2200      	movs	r2, #0
 80050c6:	4905      	ldr	r1, [pc, #20]	; (80050dc <ull_readrxtimestamp+0x40>)
 80050c8:	f7ff fc1c 	bl	8004904 <dwt_readfromdevice>
 80050cc:	e7f5      	b.n	80050ba <ull_readrxtimestamp+0x1e>
 80050ce:	9100      	str	r1, [sp, #0]
 80050d0:	2305      	movs	r3, #5
 80050d2:	2200      	movs	r2, #0
 80050d4:	2164      	movs	r1, #100	; 0x64
 80050d6:	f7ff fc15 	bl	8004904 <dwt_readfromdevice>
 80050da:	e7ee      	b.n	80050ba <ull_readrxtimestamp+0x1e>
 80050dc:	00180004 	.word	0x00180004

080050e0 <dwt_writetodevice>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80050e8:	9401      	str	r4, [sp, #4]
 80050ea:	9c04      	ldr	r4, [sp, #16]
 80050ec:	9400      	str	r4, [sp, #0]
 80050ee:	f7ff fb86 	bl	80047fe <dwt_xfer3xxx>
 80050f2:	b002      	add	sp, #8
 80050f4:	bd10      	pop	{r4, pc}

080050f6 <dwt_write8bitoffsetreg>:
 80050f6:	b510      	push	{r4, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	ac04      	add	r4, sp, #16
 80050fc:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005100:	9400      	str	r4, [sp, #0]
 8005102:	2301      	movs	r3, #1
 8005104:	b292      	uxth	r2, r2
 8005106:	f7ff ffeb 	bl	80050e0 <dwt_writetodevice>
 800510a:	b004      	add	sp, #16
 800510c:	bd10      	pop	{r4, pc}
	...

08005110 <ull_getframelength>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4604      	mov	r4, r0
 8005114:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005116:	7bdb      	ldrb	r3, [r3, #15]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d013      	beq.n	8005144 <ull_getframelength+0x34>
 800511c:	2b03      	cmp	r3, #3
 800511e:	d11d      	bne.n	800515c <ull_getframelength+0x4c>
 8005120:	23f0      	movs	r3, #240	; 0xf0
 8005122:	2200      	movs	r2, #0
 8005124:	4912      	ldr	r1, [pc, #72]	; (8005170 <ull_getframelength+0x60>)
 8005126:	f7ff ffe6 	bl	80050f6 <dwt_write8bitoffsetreg>
 800512a:	2200      	movs	r2, #0
 800512c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff fc07 	bl	8004944 <dwt_read16bitoffsetreg>
 8005136:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005138:	7b1a      	ldrb	r2, [r3, #12]
 800513a:	b1a2      	cbz	r2, 8005166 <ull_getframelength+0x56>
 800513c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005140:	8458      	strh	r0, [r3, #34]	; 0x22
 8005142:	bd10      	pop	{r4, pc}
 8005144:	230f      	movs	r3, #15
 8005146:	2200      	movs	r2, #0
 8005148:	4909      	ldr	r1, [pc, #36]	; (8005170 <ull_getframelength+0x60>)
 800514a:	f7ff ffd4 	bl	80050f6 <dwt_write8bitoffsetreg>
 800514e:	2200      	movs	r2, #0
 8005150:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff fbf5 	bl	8004944 <dwt_read16bitoffsetreg>
 800515a:	e7ec      	b.n	8005136 <ull_getframelength+0x26>
 800515c:	2200      	movs	r2, #0
 800515e:	214c      	movs	r1, #76	; 0x4c
 8005160:	f7ff fbf0 	bl	8004944 <dwt_read16bitoffsetreg>
 8005164:	e7e7      	b.n	8005136 <ull_getframelength+0x26>
 8005166:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800516a:	8458      	strh	r0, [r3, #34]	; 0x22
 800516c:	e7e9      	b.n	8005142 <ull_getframelength+0x32>
 800516e:	bf00      	nop
 8005170:	00010024 	.word	0x00010024

08005174 <ull_configeventcounters>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4605      	mov	r5, r0
 8005178:	460c      	mov	r4, r1
 800517a:	2302      	movs	r3, #2
 800517c:	2200      	movs	r2, #0
 800517e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8005182:	f7ff ffb8 	bl	80050f6 <dwt_write8bitoffsetreg>
 8005186:	b904      	cbnz	r4, 800518a <ull_configeventcounters+0x16>
 8005188:	bd38      	pop	{r3, r4, r5, pc}
 800518a:	2301      	movs	r3, #1
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8005192:	4628      	mov	r0, r5
 8005194:	f7ff ffaf 	bl	80050f6 <dwt_write8bitoffsetreg>
 8005198:	e7f6      	b.n	8005188 <ull_configeventcounters+0x14>

0800519a <dwt_write16bitoffsetreg>:
 800519a:	b500      	push	{lr}
 800519c:	b085      	sub	sp, #20
 800519e:	f88d 300c 	strb.w	r3, [sp, #12]
 80051a2:	0a1b      	lsrs	r3, r3, #8
 80051a4:	f88d 300d 	strb.w	r3, [sp, #13]
 80051a8:	ab03      	add	r3, sp, #12
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2302      	movs	r3, #2
 80051ae:	b292      	uxth	r2, r2
 80051b0:	f7ff ff96 	bl	80050e0 <dwt_writetodevice>
 80051b4:	b005      	add	sp, #20
 80051b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080051bc <ull_clearaonconfig>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4604      	mov	r4, r0
 80051c0:	2300      	movs	r3, #0
 80051c2:	461a      	mov	r2, r3
 80051c4:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 80051c8:	f7ff ffe7 	bl	800519a <dwt_write16bitoffsetreg>
 80051cc:	2300      	movs	r3, #0
 80051ce:	461a      	mov	r2, r3
 80051d0:	4908      	ldr	r1, [pc, #32]	; (80051f4 <ull_clearaonconfig+0x38>)
 80051d2:	4620      	mov	r0, r4
 80051d4:	f7ff ff8f 	bl	80050f6 <dwt_write8bitoffsetreg>
 80051d8:	4d07      	ldr	r5, [pc, #28]	; (80051f8 <ull_clearaonconfig+0x3c>)
 80051da:	2300      	movs	r3, #0
 80051dc:	461a      	mov	r2, r3
 80051de:	4629      	mov	r1, r5
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff ff88 	bl	80050f6 <dwt_write8bitoffsetreg>
 80051e6:	2302      	movs	r3, #2
 80051e8:	2200      	movs	r2, #0
 80051ea:	4629      	mov	r1, r5
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7ff ff82 	bl	80050f6 <dwt_write8bitoffsetreg>
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	000a0014 	.word	0x000a0014
 80051f8:	000a0004 	.word	0x000a0004

080051fc <ull_force_clocks>:
 80051fc:	b508      	push	{r3, lr}
 80051fe:	2901      	cmp	r1, #1
 8005200:	d002      	beq.n	8005208 <ull_force_clocks+0xc>
 8005202:	2905      	cmp	r1, #5
 8005204:	d007      	beq.n	8005216 <ull_force_clocks+0x1a>
 8005206:	bd08      	pop	{r3, pc}
 8005208:	f641 0322 	movw	r3, #6178	; 0x1822
 800520c:	2200      	movs	r2, #0
 800520e:	4905      	ldr	r1, [pc, #20]	; (8005224 <ull_force_clocks+0x28>)
 8005210:	f7ff ffc3 	bl	800519a <dwt_write16bitoffsetreg>
 8005214:	e7f7      	b.n	8005206 <ull_force_clocks+0xa>
 8005216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800521a:	2200      	movs	r2, #0
 800521c:	4901      	ldr	r1, [pc, #4]	; (8005224 <ull_force_clocks+0x28>)
 800521e:	f7ff ffbc 	bl	800519a <dwt_write16bitoffsetreg>
 8005222:	e7f0      	b.n	8005206 <ull_force_clocks+0xa>
 8005224:	00110004 	.word	0x00110004

08005228 <__dwt_otp_write_wdata_id_reg>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4605      	mov	r5, r0
 800522c:	460c      	mov	r4, r1
 800522e:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8005232:	b29b      	uxth	r3, r3
 8005234:	2200      	movs	r2, #0
 8005236:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800523a:	f7ff ffae 	bl	800519a <dwt_write16bitoffsetreg>
 800523e:	b2a3      	uxth	r3, r4
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005246:	4628      	mov	r0, r5
 8005248:	f7ff ffa7 	bl	800519a <dwt_write16bitoffsetreg>
 800524c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005250 <_dwt_otpread>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4604      	mov	r4, r0
 8005254:	460e      	mov	r6, r1
 8005256:	4d0c      	ldr	r5, [pc, #48]	; (8005288 <_dwt_otpread+0x38>)
 8005258:	2301      	movs	r3, #1
 800525a:	2200      	movs	r2, #0
 800525c:	4629      	mov	r1, r5
 800525e:	f7ff ff9c 	bl	800519a <dwt_write16bitoffsetreg>
 8005262:	4633      	mov	r3, r6
 8005264:	2200      	movs	r2, #0
 8005266:	4909      	ldr	r1, [pc, #36]	; (800528c <_dwt_otpread+0x3c>)
 8005268:	4620      	mov	r0, r4
 800526a:	f7ff ff96 	bl	800519a <dwt_write16bitoffsetreg>
 800526e:	2302      	movs	r3, #2
 8005270:	2200      	movs	r2, #0
 8005272:	4629      	mov	r1, r5
 8005274:	4620      	mov	r0, r4
 8005276:	f7ff ff90 	bl	800519a <dwt_write16bitoffsetreg>
 800527a:	2200      	movs	r2, #0
 800527c:	4904      	ldr	r1, [pc, #16]	; (8005290 <_dwt_otpread+0x40>)
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff fb4a 	bl	8004918 <dwt_read32bitoffsetreg>
 8005284:	bd70      	pop	{r4, r5, r6, pc}
 8005286:	bf00      	nop
 8005288:	000b0008 	.word	0x000b0008
 800528c:	000b0004 	.word	0x000b0004
 8005290:	000b0010 	.word	0x000b0010

08005294 <ull_aon_read>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4604      	mov	r4, r0
 8005298:	460b      	mov	r3, r1
 800529a:	2200      	movs	r2, #0
 800529c:	490a      	ldr	r1, [pc, #40]	; (80052c8 <ull_aon_read+0x34>)
 800529e:	f7ff ff7c 	bl	800519a <dwt_write16bitoffsetreg>
 80052a2:	4d0a      	ldr	r5, [pc, #40]	; (80052cc <ull_aon_read+0x38>)
 80052a4:	2388      	movs	r3, #136	; 0x88
 80052a6:	2200      	movs	r2, #0
 80052a8:	4629      	mov	r1, r5
 80052aa:	4620      	mov	r0, r4
 80052ac:	f7ff ff23 	bl	80050f6 <dwt_write8bitoffsetreg>
 80052b0:	2300      	movs	r3, #0
 80052b2:	461a      	mov	r2, r3
 80052b4:	4629      	mov	r1, r5
 80052b6:	4620      	mov	r0, r4
 80052b8:	f7ff ff1d 	bl	80050f6 <dwt_write8bitoffsetreg>
 80052bc:	2200      	movs	r2, #0
 80052be:	4904      	ldr	r1, [pc, #16]	; (80052d0 <ull_aon_read+0x3c>)
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff fb51 	bl	8004968 <dwt_read8bitoffsetreg>
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	000a000c 	.word	0x000a000c
 80052cc:	000a0004 	.word	0x000a0004
 80052d0:	000a0008 	.word	0x000a0008

080052d4 <ull_aon_write>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4604      	mov	r4, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4615      	mov	r5, r2
 80052dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80052e0:	bf34      	ite	cc
 80052e2:	2600      	movcc	r6, #0
 80052e4:	2620      	movcs	r6, #32
 80052e6:	2200      	movs	r2, #0
 80052e8:	490b      	ldr	r1, [pc, #44]	; (8005318 <ull_aon_write+0x44>)
 80052ea:	f7ff ff56 	bl	800519a <dwt_write16bitoffsetreg>
 80052ee:	462b      	mov	r3, r5
 80052f0:	2200      	movs	r2, #0
 80052f2:	490a      	ldr	r1, [pc, #40]	; (800531c <ull_aon_write+0x48>)
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7ff fefe 	bl	80050f6 <dwt_write8bitoffsetreg>
 80052fa:	4d09      	ldr	r5, [pc, #36]	; (8005320 <ull_aon_write+0x4c>)
 80052fc:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8005300:	2200      	movs	r2, #0
 8005302:	4629      	mov	r1, r5
 8005304:	4620      	mov	r0, r4
 8005306:	f7ff fef6 	bl	80050f6 <dwt_write8bitoffsetreg>
 800530a:	2300      	movs	r3, #0
 800530c:	461a      	mov	r2, r3
 800530e:	4629      	mov	r1, r5
 8005310:	4620      	mov	r0, r4
 8005312:	f7ff fef0 	bl	80050f6 <dwt_write8bitoffsetreg>
 8005316:	bd70      	pop	{r4, r5, r6, pc}
 8005318:	000a000c 	.word	0x000a000c
 800531c:	000a0010 	.word	0x000a0010
 8005320:	000a0004 	.word	0x000a0004

08005324 <ull_configuresleep>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4604      	mov	r4, r0
 8005328:	460d      	mov	r5, r1
 800532a:	4616      	mov	r6, r2
 800532c:	2200      	movs	r2, #0
 800532e:	f240 110b 	movw	r1, #267	; 0x10b
 8005332:	f7ff ffcf 	bl	80052d4 <ull_aon_write>
 8005336:	f44f 7182 	mov.w	r1, #260	; 0x104
 800533a:	4620      	mov	r0, r4
 800533c:	f7ff ffaa 	bl	8005294 <ull_aon_read>
 8005340:	f000 021f 	and.w	r2, r0, #31
 8005344:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005348:	4620      	mov	r0, r4
 800534a:	f7ff ffc3 	bl	80052d4 <ull_aon_write>
 800534e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005350:	8a5a      	ldrh	r2, [r3, #18]
 8005352:	4315      	orrs	r5, r2
 8005354:	825d      	strh	r5, [r3, #18]
 8005356:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005358:	8a5b      	ldrh	r3, [r3, #18]
 800535a:	2200      	movs	r2, #0
 800535c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8005360:	4620      	mov	r0, r4
 8005362:	f7ff ff1a 	bl	800519a <dwt_write16bitoffsetreg>
 8005366:	4633      	mov	r3, r6
 8005368:	2200      	movs	r2, #0
 800536a:	4902      	ldr	r1, [pc, #8]	; (8005374 <ull_configuresleep+0x50>)
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff fec2 	bl	80050f6 <dwt_write8bitoffsetreg>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	000a0014 	.word	0x000a0014

08005378 <ull_signal_rx_buff_free>:
 8005378:	b510      	push	{r4, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	4604      	mov	r4, r0
 800537e:	2200      	movs	r2, #0
 8005380:	9200      	str	r2, [sp, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	2113      	movs	r1, #19
 8005386:	f7ff feab 	bl	80050e0 <dwt_writetodevice>
 800538a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800538c:	7bda      	ldrb	r2, [r3, #15]
 800538e:	2a03      	cmp	r2, #3
 8005390:	bf0c      	ite	eq
 8005392:	2201      	moveq	r2, #1
 8005394:	2203      	movne	r2, #3
 8005396:	73da      	strb	r2, [r3, #15]
 8005398:	b002      	add	sp, #8
 800539a:	bd10      	pop	{r4, pc}

0800539c <dwt_write32bitoffsetreg>:
 800539c:	b510      	push	{r4, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80053a4:	0a1c      	lsrs	r4, r3, #8
 80053a6:	f88d 400d 	strb.w	r4, [sp, #13]
 80053aa:	0c1c      	lsrs	r4, r3, #16
 80053ac:	f88d 400e 	strb.w	r4, [sp, #14]
 80053b0:	0e1b      	lsrs	r3, r3, #24
 80053b2:	f88d 300f 	strb.w	r3, [sp, #15]
 80053b6:	ab03      	add	r3, sp, #12
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	2304      	movs	r3, #4
 80053bc:	b292      	uxth	r2, r2
 80053be:	f7ff fe8f 	bl	80050e0 <dwt_writetodevice>
 80053c2:	b004      	add	sp, #16
 80053c4:	bd10      	pop	{r4, pc}
	...

080053c8 <ull_isr>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	4604      	mov	r4, r0
 80053cc:	2200      	movs	r2, #0
 80053ce:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 80053d2:	f7ff fac9 	bl	8004968 <dwt_read8bitoffsetreg>
 80053d6:	4605      	mov	r5, r0
 80053d8:	2200      	movs	r2, #0
 80053da:	2144      	movs	r1, #68	; 0x44
 80053dc:	4620      	mov	r0, r4
 80053de:	f7ff fa9b 	bl	8004918 <dwt_read32bitoffsetreg>
 80053e2:	4606      	mov	r6, r0
 80053e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053e6:	2200      	movs	r2, #0
 80053e8:	845a      	strh	r2, [r3, #34]	; 0x22
 80053ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053ee:	61da      	str	r2, [r3, #28]
 80053f0:	841a      	strh	r2, [r3, #32]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
 80053f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053f6:	629c      	str	r4, [r3, #40]	; 0x28
 80053f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053fa:	61d8      	str	r0, [r3, #28]
 80053fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80053fe:	7dd3      	ldrb	r3, [r2, #23]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d079      	beq.n	80054fc <ull_isr+0x134>
 8005408:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800540c:	d005      	beq.n	800541a <ull_isr+0x52>
 800540e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800541a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800541e:	d174      	bne.n	800550a <ull_isr+0x142>
 8005420:	f015 0f01 	tst.w	r5, #1
 8005424:	f040 80a3 	bne.w	800556e <ull_isr+0x1a6>
 8005428:	f015 0f40 	tst.w	r5, #64	; 0x40
 800542c:	d00b      	beq.n	8005446 <ull_isr+0x7e>
 800542e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005430:	b113      	cbz	r3, 8005438 <ull_isr+0x70>
 8005432:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005434:	301c      	adds	r0, #28
 8005436:	4798      	blx	r3
 8005438:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800543c:	2202      	movs	r2, #2
 800543e:	2144      	movs	r1, #68	; 0x44
 8005440:	4620      	mov	r0, r4
 8005442:	f7ff feaa 	bl	800519a <dwt_write16bitoffsetreg>
 8005446:	f015 0f08 	tst.w	r5, #8
 800544a:	f000 80ea 	beq.w	8005622 <ull_isr+0x25a>
 800544e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005456:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005458:	7bdb      	ldrb	r3, [r3, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 8095 	bne.w	800558a <ull_isr+0x1c2>
 8005460:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005462:	61de      	str	r6, [r3, #28]
 8005464:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8005468:	f000 80a9 	beq.w	80055be <ull_isr+0x1f6>
 800546c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800546e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005472:	f043 0308 	orr.w	r3, r3, #8
 8005476:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800547a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800547e:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8005482:	d008      	beq.n	8005496 <ull_isr+0xce>
 8005484:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005486:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800548a:	f043 0310 	orr.w	r3, r3, #16
 800548e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005492:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8005496:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800549a:	d006      	beq.n	80054aa <ull_isr+0xe2>
 800549c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800549e:	7dd3      	ldrb	r3, [r2, #23]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	f000 8096 	beq.w	80055d6 <ull_isr+0x20e>
 80054aa:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80054ae:	f040 809e 	bne.w	80055ee <ull_isr+0x226>
 80054b2:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 80054b6:	2200      	movs	r2, #0
 80054b8:	2144      	movs	r1, #68	; 0x44
 80054ba:	4620      	mov	r0, r4
 80054bc:	f7ff ff6e 	bl	800539c <dwt_write32bitoffsetreg>
 80054c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80054c2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 80a1 	bne.w	800560c <ull_isr+0x244>
 80054ca:	7dc3      	ldrb	r3, [r0, #23]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	f000 809b 	beq.w	800560c <ull_isr+0x244>
 80054d6:	69c3      	ldr	r3, [r0, #28]
 80054d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80054dc:	61c3      	str	r3, [r0, #28]
 80054de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80054e0:	69d3      	ldr	r3, [r2, #28]
 80054e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054e6:	61d3      	str	r3, [r2, #28]
 80054e8:	69e3      	ldr	r3, [r4, #28]
 80054ea:	b113      	cbz	r3, 80054f2 <ull_isr+0x12a>
 80054ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80054ee:	301c      	adds	r0, #28
 80054f0:	4798      	blx	r3
 80054f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054fa:	e08b      	b.n	8005614 <ull_isr+0x24c>
 80054fc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8005500:	bf1c      	itt	ne
 8005502:	f045 0508 	orrne.w	r5, r5, #8
 8005506:	b2ed      	uxtbne	r5, r5
 8005508:	e77e      	b.n	8005408 <ull_isr+0x40>
 800550a:	6d27      	ldr	r7, [r4, #80]	; 0x50
 800550c:	2200      	movs	r2, #0
 800550e:	2148      	movs	r1, #72	; 0x48
 8005510:	4620      	mov	r0, r4
 8005512:	f7ff fa17 	bl	8004944 <dwt_read16bitoffsetreg>
 8005516:	8438      	strh	r0, [r7, #32]
 8005518:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800551a:	7d9a      	ldrb	r2, [r3, #22]
 800551c:	b11a      	cbz	r2, 8005526 <ull_isr+0x15e>
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	f012 0f04 	tst.w	r2, #4
 8005524:	d103      	bne.n	800552e <ull_isr+0x166>
 8005526:	8c1b      	ldrh	r3, [r3, #32]
 8005528:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800552c:	b18b      	cbz	r3, 8005552 <ull_isr+0x18a>
 800552e:	2304      	movs	r3, #4
 8005530:	2200      	movs	r2, #0
 8005532:	2144      	movs	r1, #68	; 0x44
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff fdde 	bl	80050f6 <dwt_write8bitoffsetreg>
 800553a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800553e:	2200      	movs	r2, #0
 8005540:	2148      	movs	r1, #72	; 0x48
 8005542:	4620      	mov	r0, r4
 8005544:	f7ff fe29 	bl	800519a <dwt_write16bitoffsetreg>
 8005548:	6a23      	ldr	r3, [r4, #32]
 800554a:	b113      	cbz	r3, 8005552 <ull_isr+0x18a>
 800554c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800554e:	301c      	adds	r0, #28
 8005550:	4798      	blx	r3
 8005552:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005554:	8c1b      	ldrh	r3, [r3, #32]
 8005556:	f413 7f80 	tst.w	r3, #256	; 0x100
 800555a:	f43f af61 	beq.w	8005420 <ull_isr+0x58>
 800555e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005562:	2200      	movs	r2, #0
 8005564:	2148      	movs	r1, #72	; 0x48
 8005566:	4620      	mov	r0, r4
 8005568:	f7ff fe17 	bl	800519a <dwt_write16bitoffsetreg>
 800556c:	e758      	b.n	8005420 <ull_isr+0x58>
 800556e:	23f8      	movs	r3, #248	; 0xf8
 8005570:	2200      	movs	r2, #0
 8005572:	2144      	movs	r1, #68	; 0x44
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff fdbe 	bl	80050f6 <dwt_write8bitoffsetreg>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f43f af53 	beq.w	8005428 <ull_isr+0x60>
 8005582:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005584:	301c      	adds	r0, #28
 8005586:	4798      	blx	r3
 8005588:	e74e      	b.n	8005428 <ull_isr+0x60>
 800558a:	493b      	ldr	r1, [pc, #236]	; (8005678 <ull_isr+0x2b0>)
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff f9eb 	bl	8004968 <dwt_read8bitoffsetreg>
 8005592:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005594:	7bdb      	ldrb	r3, [r3, #15]
 8005596:	2b03      	cmp	r3, #3
 8005598:	bf08      	it	eq
 800559a:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 800559e:	f010 0f01 	tst.w	r0, #1
 80055a2:	bf18      	it	ne
 80055a4:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 80055a8:	f010 0f02 	tst.w	r0, #2
 80055ac:	bf18      	it	ne
 80055ae:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 80055b2:	f010 0f04 	tst.w	r0, #4
 80055b6:	bf18      	it	ne
 80055b8:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 80055bc:	e750      	b.n	8005460 <ull_isr+0x98>
 80055be:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80055c2:	bf1f      	itttt	ne
 80055c4:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 80055c6:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 80055ca:	f043 0304 	orrne.w	r3, r3, #4
 80055ce:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 80055d2:	2700      	movs	r7, #0
 80055d4:	e753      	b.n	800547e <ull_isr+0xb6>
 80055d6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80055da:	f043 0302 	orr.w	r3, r3, #2
 80055de:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80055e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80055e4:	2200      	movs	r2, #0
 80055e6:	845a      	strh	r2, [r3, #34]	; 0x22
 80055e8:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80055ec:	e761      	b.n	80054b2 <ull_isr+0xea>
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7ff fd8e 	bl	8005110 <ull_getframelength>
 80055f4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80055f8:	f43f af5b 	beq.w	80054b2 <ull_isr+0xea>
 80055fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80055fe:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800560a:	e752      	b.n	80054b2 <ull_isr+0xea>
 800560c:	6963      	ldr	r3, [r4, #20]
 800560e:	b10b      	cbz	r3, 8005614 <ull_isr+0x24c>
 8005610:	301c      	adds	r0, #28
 8005612:	4798      	blx	r3
 8005614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005616:	7bdb      	ldrb	r3, [r3, #15]
 8005618:	b953      	cbnz	r3, 8005630 <ull_isr+0x268>
 800561a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005622:	f015 0f10 	tst.w	r5, #16
 8005626:	d107      	bne.n	8005638 <ull_isr+0x270>
 8005628:	f015 0f20 	tst.w	r5, #32
 800562c:	d114      	bne.n	8005658 <ull_isr+0x290>
 800562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005630:	4620      	mov	r0, r4
 8005632:	f7ff fea1 	bl	8005378 <ull_signal_rx_buff_free>
 8005636:	e7f0      	b.n	800561a <ull_isr+0x252>
 8005638:	4b10      	ldr	r3, [pc, #64]	; (800567c <ull_isr+0x2b4>)
 800563a:	2200      	movs	r2, #0
 800563c:	2144      	movs	r1, #68	; 0x44
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff feac 	bl	800539c <dwt_write32bitoffsetreg>
 8005644:	69e3      	ldr	r3, [r4, #28]
 8005646:	b113      	cbz	r3, 800564e <ull_isr+0x286>
 8005648:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800564a:	301c      	adds	r0, #28
 800564c:	4798      	blx	r3
 800564e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005656:	e7e7      	b.n	8005628 <ull_isr+0x260>
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <ull_isr+0x2b8>)
 800565a:	2200      	movs	r2, #0
 800565c:	2144      	movs	r1, #68	; 0x44
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff fe9c 	bl	800539c <dwt_write32bitoffsetreg>
 8005664:	69a3      	ldr	r3, [r4, #24]
 8005666:	b113      	cbz	r3, 800566e <ull_isr+0x2a6>
 8005668:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800566a:	301c      	adds	r0, #28
 800566c:	4798      	blx	r3
 800566e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005676:	e7da      	b.n	800562e <ull_isr+0x266>
 8005678:	00010024 	.word	0x00010024
 800567c:	34059400 	.word	0x34059400
 8005680:	10220400 	.word	0x10220400

08005684 <_dwt_adjust_delaytime>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4604      	mov	r4, r0
 8005688:	b989      	cbnz	r1, 80056ae <_dwt_adjust_delaytime+0x2a>
 800568a:	2200      	movs	r2, #0
 800568c:	212c      	movs	r1, #44	; 0x2c
 800568e:	f7ff f943 	bl	8004918 <dwt_read32bitoffsetreg>
 8005692:	4605      	mov	r5, r0
 8005694:	2201      	movs	r2, #1
 8005696:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800569a:	4620      	mov	r0, r4
 800569c:	f7ff f964 	bl	8004968 <dwt_read8bitoffsetreg>
 80056a0:	1a2b      	subs	r3, r5, r0
 80056a2:	2200      	movs	r2, #0
 80056a4:	212c      	movs	r1, #44	; 0x2c
 80056a6:	4620      	mov	r0, r4
 80056a8:	f7ff fe78 	bl	800539c <dwt_write32bitoffsetreg>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	2200      	movs	r2, #0
 80056b0:	212c      	movs	r1, #44	; 0x2c
 80056b2:	f7ff f931 	bl	8004918 <dwt_read32bitoffsetreg>
 80056b6:	4605      	mov	r5, r0
 80056b8:	2201      	movs	r2, #1
 80056ba:	4905      	ldr	r1, [pc, #20]	; (80056d0 <_dwt_adjust_delaytime+0x4c>)
 80056bc:	4620      	mov	r0, r4
 80056be:	f7ff f953 	bl	8004968 <dwt_read8bitoffsetreg>
 80056c2:	1a2b      	subs	r3, r5, r0
 80056c4:	2200      	movs	r2, #0
 80056c6:	212c      	movs	r1, #44	; 0x2c
 80056c8:	4620      	mov	r0, r4
 80056ca:	f7ff fe67 	bl	800539c <dwt_write32bitoffsetreg>
 80056ce:	e7ed      	b.n	80056ac <_dwt_adjust_delaytime+0x28>
 80056d0:	00010004 	.word	0x00010004

080056d4 <ull_setrxaftertxdelay>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	4606      	mov	r6, r0
 80056d8:	460c      	mov	r4, r1
 80056da:	4d08      	ldr	r5, [pc, #32]	; (80056fc <ull_setrxaftertxdelay+0x28>)
 80056dc:	2200      	movs	r2, #0
 80056de:	4629      	mov	r1, r5
 80056e0:	f7ff f91a 	bl	8004918 <dwt_read32bitoffsetreg>
 80056e4:	0d00      	lsrs	r0, r0, #20
 80056e6:	0500      	lsls	r0, r0, #20
 80056e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80056ec:	4303      	orrs	r3, r0
 80056ee:	2200      	movs	r2, #0
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff fe52 	bl	800539c <dwt_write32bitoffsetreg>
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	bf00      	nop
 80056fc:	00010008 	.word	0x00010008

08005700 <ull_setlnapamode>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4605      	mov	r5, r0
 8005704:	460c      	mov	r4, r1
 8005706:	2200      	movs	r2, #0
 8005708:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800570c:	f7ff f904 	bl	8004918 <dwt_read32bitoffsetreg>
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <ull_setlnapamode+0x40>)
 8005712:	4003      	ands	r3, r0
 8005714:	f014 0f01 	tst.w	r4, #1
 8005718:	bf18      	it	ne
 800571a:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 800571e:	f014 0f02 	tst.w	r4, #2
 8005722:	bf18      	it	ne
 8005724:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 8005728:	f014 0f04 	tst.w	r4, #4
 800572c:	bf18      	it	ne
 800572e:	f043 0312 	orrne.w	r3, r3, #18
 8005732:	2200      	movs	r2, #0
 8005734:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8005738:	4628      	mov	r0, r5
 800573a:	f7ff fe2f 	bl	800539c <dwt_write32bitoffsetreg>
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	ffe00fc0 	.word	0xffe00fc0

08005744 <ull_configurestskey>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4605      	mov	r5, r0
 8005748:	460c      	mov	r4, r1
 800574a:	680b      	ldr	r3, [r1, #0]
 800574c:	2200      	movs	r2, #0
 800574e:	490b      	ldr	r1, [pc, #44]	; (800577c <ull_configurestskey+0x38>)
 8005750:	f7ff fe24 	bl	800539c <dwt_write32bitoffsetreg>
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	4909      	ldr	r1, [pc, #36]	; (8005780 <ull_configurestskey+0x3c>)
 800575a:	4628      	mov	r0, r5
 800575c:	f7ff fe1e 	bl	800539c <dwt_write32bitoffsetreg>
 8005760:	68a3      	ldr	r3, [r4, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	4907      	ldr	r1, [pc, #28]	; (8005784 <ull_configurestskey+0x40>)
 8005766:	4628      	mov	r0, r5
 8005768:	f7ff fe18 	bl	800539c <dwt_write32bitoffsetreg>
 800576c:	68e3      	ldr	r3, [r4, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	4905      	ldr	r1, [pc, #20]	; (8005788 <ull_configurestskey+0x44>)
 8005772:	4628      	mov	r0, r5
 8005774:	f7ff fe12 	bl	800539c <dwt_write32bitoffsetreg>
 8005778:	bd38      	pop	{r3, r4, r5, pc}
 800577a:	bf00      	nop
 800577c:	0002000c 	.word	0x0002000c
 8005780:	00020010 	.word	0x00020010
 8005784:	00020014 	.word	0x00020014
 8005788:	00020018 	.word	0x00020018

0800578c <ull_configurestsiv>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4605      	mov	r5, r0
 8005790:	460c      	mov	r4, r1
 8005792:	680b      	ldr	r3, [r1, #0]
 8005794:	2200      	movs	r2, #0
 8005796:	490b      	ldr	r1, [pc, #44]	; (80057c4 <ull_configurestsiv+0x38>)
 8005798:	f7ff fe00 	bl	800539c <dwt_write32bitoffsetreg>
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	4909      	ldr	r1, [pc, #36]	; (80057c8 <ull_configurestsiv+0x3c>)
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7ff fdfa 	bl	800539c <dwt_write32bitoffsetreg>
 80057a8:	68a3      	ldr	r3, [r4, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	4907      	ldr	r1, [pc, #28]	; (80057cc <ull_configurestsiv+0x40>)
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7ff fdf4 	bl	800539c <dwt_write32bitoffsetreg>
 80057b4:	68e3      	ldr	r3, [r4, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	4905      	ldr	r1, [pc, #20]	; (80057d0 <ull_configurestsiv+0x44>)
 80057ba:	4628      	mov	r0, r5
 80057bc:	f7ff fdee 	bl	800539c <dwt_write32bitoffsetreg>
 80057c0:	bd38      	pop	{r3, r4, r5, pc}
 80057c2:	bf00      	nop
 80057c4:	0002001c 	.word	0x0002001c
 80057c8:	00020020 	.word	0x00020020
 80057cc:	00020024 	.word	0x00020024
 80057d0:	00020028 	.word	0x00020028

080057d4 <ull_configmrxlut>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	2905      	cmp	r1, #5
 80057dc:	d040      	beq.n	8005860 <ull_configmrxlut+0x8c>
 80057de:	4d26      	ldr	r5, [pc, #152]	; (8005878 <ull_configmrxlut+0xa4>)
 80057e0:	462e      	mov	r6, r5
 80057e2:	4f26      	ldr	r7, [pc, #152]	; (800587c <ull_configmrxlut+0xa8>)
 80057e4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80058c0 <ull_configmrxlut+0xec>
 80057e8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80058c4 <ull_configmrxlut+0xf0>
 80057ec:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80058c8 <ull_configmrxlut+0xf4>
 80057f0:	4b23      	ldr	r3, [pc, #140]	; (8005880 <ull_configmrxlut+0xac>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	4923      	ldr	r1, [pc, #140]	; (8005884 <ull_configmrxlut+0xb0>)
 80057f6:	4620      	mov	r0, r4
 80057f8:	f7ff fdd0 	bl	800539c <dwt_write32bitoffsetreg>
 80057fc:	4653      	mov	r3, sl
 80057fe:	2200      	movs	r2, #0
 8005800:	4921      	ldr	r1, [pc, #132]	; (8005888 <ull_configmrxlut+0xb4>)
 8005802:	4620      	mov	r0, r4
 8005804:	f7ff fdca 	bl	800539c <dwt_write32bitoffsetreg>
 8005808:	464b      	mov	r3, r9
 800580a:	2200      	movs	r2, #0
 800580c:	491f      	ldr	r1, [pc, #124]	; (800588c <ull_configmrxlut+0xb8>)
 800580e:	4620      	mov	r0, r4
 8005810:	f7ff fdc4 	bl	800539c <dwt_write32bitoffsetreg>
 8005814:	4643      	mov	r3, r8
 8005816:	2200      	movs	r2, #0
 8005818:	491d      	ldr	r1, [pc, #116]	; (8005890 <ull_configmrxlut+0xbc>)
 800581a:	4620      	mov	r0, r4
 800581c:	f7ff fdbe 	bl	800539c <dwt_write32bitoffsetreg>
 8005820:	463b      	mov	r3, r7
 8005822:	2200      	movs	r2, #0
 8005824:	491b      	ldr	r1, [pc, #108]	; (8005894 <ull_configmrxlut+0xc0>)
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff fdb8 	bl	800539c <dwt_write32bitoffsetreg>
 800582c:	4633      	mov	r3, r6
 800582e:	2200      	movs	r2, #0
 8005830:	4919      	ldr	r1, [pc, #100]	; (8005898 <ull_configmrxlut+0xc4>)
 8005832:	4620      	mov	r0, r4
 8005834:	f7ff fdb2 	bl	800539c <dwt_write32bitoffsetreg>
 8005838:	462b      	mov	r3, r5
 800583a:	2200      	movs	r2, #0
 800583c:	4917      	ldr	r1, [pc, #92]	; (800589c <ull_configmrxlut+0xc8>)
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff fdac 	bl	800539c <dwt_write32bitoffsetreg>
 8005844:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <ull_configmrxlut+0xcc>)
 8005846:	2200      	movs	r2, #0
 8005848:	4916      	ldr	r1, [pc, #88]	; (80058a4 <ull_configmrxlut+0xd0>)
 800584a:	4620      	mov	r0, r4
 800584c:	f7ff fda6 	bl	800539c <dwt_write32bitoffsetreg>
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <ull_configmrxlut+0xd4>)
 8005852:	2200      	movs	r2, #0
 8005854:	4915      	ldr	r1, [pc, #84]	; (80058ac <ull_configmrxlut+0xd8>)
 8005856:	4620      	mov	r0, r4
 8005858:	f7ff fda0 	bl	800539c <dwt_write32bitoffsetreg>
 800585c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005860:	4d13      	ldr	r5, [pc, #76]	; (80058b0 <ull_configmrxlut+0xdc>)
 8005862:	4e14      	ldr	r6, [pc, #80]	; (80058b4 <ull_configmrxlut+0xe0>)
 8005864:	4f14      	ldr	r7, [pc, #80]	; (80058b8 <ull_configmrxlut+0xe4>)
 8005866:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80058cc <ull_configmrxlut+0xf8>
 800586a:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80058d0 <ull_configmrxlut+0xfc>
 800586e:	f8df a064 	ldr.w	sl, [pc, #100]	; 80058d4 <ull_configmrxlut+0x100>
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <ull_configmrxlut+0xe8>)
 8005874:	e7bd      	b.n	80057f2 <ull_configmrxlut+0x1e>
 8005876:	bf00      	nop
 8005878:	0002afb5 	.word	0x0002afb5
 800587c:	0002af7d 	.word	0x0002af7d
 8005880:	0002a8fe 	.word	0x0002a8fe
 8005884:	00030038 	.word	0x00030038
 8005888:	0003003c 	.word	0x0003003c
 800588c:	00030040 	.word	0x00030040
 8005890:	00030044 	.word	0x00030044
 8005894:	00030048 	.word	0x00030048
 8005898:	0003004c 	.word	0x0003004c
 800589c:	00030050 	.word	0x00030050
 80058a0:	10000240 	.word	0x10000240
 80058a4:	0003001c 	.word	0x0003001c
 80058a8:	1b6da489 	.word	0x1b6da489
 80058ac:	00030020 	.word	0x00030020
 80058b0:	0001cff5 	.word	0x0001cff5
 80058b4:	0001cfb5 	.word	0x0001cfb5
 80058b8:	0001cf36 	.word	0x0001cf36
 80058bc:	0001c0fd 	.word	0x0001c0fd
 80058c0:	0002af3e 	.word	0x0002af3e
 80058c4:	0002a5fe 	.word	0x0002a5fe
 80058c8:	0002ac36 	.word	0x0002ac36
 80058cc:	0001c77e 	.word	0x0001c77e
 80058d0:	0001c6be 	.word	0x0001c6be
 80058d4:	0001c43e 	.word	0x0001c43e

080058d8 <ull_disable_rftx_blocks>:
 80058d8:	b508      	push	{r3, lr}
 80058da:	2300      	movs	r3, #0
 80058dc:	461a      	mov	r2, r3
 80058de:	4902      	ldr	r1, [pc, #8]	; (80058e8 <ull_disable_rftx_blocks+0x10>)
 80058e0:	f7ff fd5c 	bl	800539c <dwt_write32bitoffsetreg>
 80058e4:	bd08      	pop	{r3, pc}
 80058e6:	bf00      	nop
 80058e8:	00070004 	.word	0x00070004

080058ec <ull_disable_rf_tx>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4604      	mov	r4, r0
 80058f0:	460d      	mov	r5, r1
 80058f2:	2300      	movs	r3, #0
 80058f4:	461a      	mov	r2, r3
 80058f6:	490a      	ldr	r1, [pc, #40]	; (8005920 <ull_disable_rf_tx+0x34>)
 80058f8:	f7ff fd50 	bl	800539c <dwt_write32bitoffsetreg>
 80058fc:	2300      	movs	r3, #0
 80058fe:	461a      	mov	r2, r3
 8005900:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff fd49 	bl	800539c <dwt_write32bitoffsetreg>
 800590a:	b905      	cbnz	r5, 800590e <ull_disable_rf_tx+0x22>
 800590c:	bd38      	pop	{r3, r4, r5, pc}
 800590e:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8005912:	2200      	movs	r2, #0
 8005914:	4903      	ldr	r1, [pc, #12]	; (8005924 <ull_disable_rf_tx+0x38>)
 8005916:	4620      	mov	r0, r4
 8005918:	f7ff fd40 	bl	800539c <dwt_write32bitoffsetreg>
 800591c:	e7f6      	b.n	800590c <ull_disable_rf_tx+0x20>
 800591e:	bf00      	nop
 8005920:	00070048 	.word	0x00070048
 8005924:	00070014 	.word	0x00070014

08005928 <ull_readrxdata>:
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	b083      	sub	sp, #12
 800592c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800592e:	7be4      	ldrb	r4, [r4, #15]
 8005930:	2c03      	cmp	r4, #3
 8005932:	bf0c      	ite	eq
 8005934:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8005938:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800593c:	189c      	adds	r4, r3, r2
 800593e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005942:	da19      	bge.n	8005978 <ull_readrxdata+0x50>
 8005944:	461d      	mov	r5, r3
 8005946:	4616      	mov	r6, r2
 8005948:	460f      	mov	r7, r1
 800594a:	4604      	mov	r4, r0
 800594c:	2b7f      	cmp	r3, #127	; 0x7f
 800594e:	d915      	bls.n	800597c <ull_readrxdata+0x54>
 8005950:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8005954:	2200      	movs	r2, #0
 8005956:	490d      	ldr	r1, [pc, #52]	; (800598c <ull_readrxdata+0x64>)
 8005958:	f7ff fd20 	bl	800539c <dwt_write32bitoffsetreg>
 800595c:	462b      	mov	r3, r5
 800595e:	2200      	movs	r2, #0
 8005960:	490b      	ldr	r1, [pc, #44]	; (8005990 <ull_readrxdata+0x68>)
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff fd1a 	bl	800539c <dwt_write32bitoffsetreg>
 8005968:	9700      	str	r7, [sp, #0]
 800596a:	4633      	mov	r3, r6
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8005972:	4620      	mov	r0, r4
 8005974:	f7fe ffc6 	bl	8004904 <dwt_readfromdevice>
 8005978:	b003      	add	sp, #12
 800597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597c:	9100      	str	r1, [sp, #0]
 800597e:	4613      	mov	r3, r2
 8005980:	462a      	mov	r2, r5
 8005982:	4661      	mov	r1, ip
 8005984:	f7fe ffbe 	bl	8004904 <dwt_readfromdevice>
 8005988:	e7f6      	b.n	8005978 <ull_readrxdata+0x50>
 800598a:	bf00      	nop
 800598c:	001f0004 	.word	0x001f0004
 8005990:	001f0008 	.word	0x001f0008

08005994 <ull_rxenable>:
 8005994:	b530      	push	{r4, r5, lr}
 8005996:	b083      	sub	sp, #12
 8005998:	4605      	mov	r5, r0
 800599a:	460c      	mov	r4, r1
 800599c:	b171      	cbz	r1, 80059bc <ull_rxenable+0x28>
 800599e:	f021 0302 	bic.w	r3, r1, #2
 80059a2:	3b01      	subs	r3, #1
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	d856      	bhi.n	8005a56 <ull_rxenable+0xc2>
 80059a8:	e8df f003 	tbb	[pc, r3]
 80059ac:	21555510 	.word	0x21555510
 80059b0:	28555555 	.word	0x28555555
 80059b4:	55555555 	.word	0x55555555
 80059b8:	33555555 	.word	0x33555555
 80059bc:	2200      	movs	r2, #0
 80059be:	9200      	str	r2, [sp, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	2102      	movs	r1, #2
 80059c4:	f7ff fb8c 	bl	80050e0 <dwt_writetodevice>
 80059c8:	4620      	mov	r0, r4
 80059ca:	e00e      	b.n	80059ea <ull_rxenable+0x56>
 80059cc:	2200      	movs	r2, #0
 80059ce:	9200      	str	r2, [sp, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	2104      	movs	r1, #4
 80059d4:	f7ff fb84 	bl	80050e0 <dwt_writetodevice>
 80059d8:	2203      	movs	r2, #3
 80059da:	2144      	movs	r1, #68	; 0x44
 80059dc:	4628      	mov	r0, r5
 80059de:	f7fe ffc3 	bl	8004968 <dwt_read8bitoffsetreg>
 80059e2:	f010 0f08 	tst.w	r0, #8
 80059e6:	d11f      	bne.n	8005a28 <ull_rxenable+0x94>
 80059e8:	2000      	movs	r0, #0
 80059ea:	b003      	add	sp, #12
 80059ec:	bd30      	pop	{r4, r5, pc}
 80059ee:	2200      	movs	r2, #0
 80059f0:	9200      	str	r2, [sp, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	210a      	movs	r1, #10
 80059f6:	f7ff fb73 	bl	80050e0 <dwt_writetodevice>
 80059fa:	e7ed      	b.n	80059d8 <ull_rxenable+0x44>
 80059fc:	2100      	movs	r1, #0
 80059fe:	f7ff fe41 	bl	8005684 <_dwt_adjust_delaytime>
 8005a02:	2200      	movs	r2, #0
 8005a04:	9200      	str	r2, [sp, #0]
 8005a06:	4613      	mov	r3, r2
 8005a08:	2108      	movs	r1, #8
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f7ff fb68 	bl	80050e0 <dwt_writetodevice>
 8005a10:	e7e2      	b.n	80059d8 <ull_rxenable+0x44>
 8005a12:	2101      	movs	r1, #1
 8005a14:	f7ff fe36 	bl	8005684 <_dwt_adjust_delaytime>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	9200      	str	r2, [sp, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	2106      	movs	r1, #6
 8005a20:	4628      	mov	r0, r5
 8005a22:	f7ff fb5d 	bl	80050e0 <dwt_writetodevice>
 8005a26:	e7d7      	b.n	80059d8 <ull_rxenable+0x44>
 8005a28:	2100      	movs	r1, #0
 8005a2a:	9100      	str	r1, [sp, #0]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	460a      	mov	r2, r1
 8005a30:	4628      	mov	r0, r5
 8005a32:	f7ff fb55 	bl	80050e0 <dwt_writetodevice>
 8005a36:	f014 0f02 	tst.w	r4, #2
 8005a3a:	d002      	beq.n	8005a42 <ull_rxenable+0xae>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a40:	e7d3      	b.n	80059ea <ull_rxenable+0x56>
 8005a42:	2200      	movs	r2, #0
 8005a44:	9200      	str	r2, [sp, #0]
 8005a46:	4613      	mov	r3, r2
 8005a48:	2102      	movs	r1, #2
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f7ff fb48 	bl	80050e0 <dwt_writetodevice>
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a54:	e7c9      	b.n	80059ea <ull_rxenable+0x56>
 8005a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a5a:	e7c6      	b.n	80059ea <ull_rxenable+0x56>

08005a5c <ull_writetxdata>:
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	185c      	adds	r4, r3, r1
 8005a62:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005a66:	da24      	bge.n	8005ab2 <ull_writetxdata+0x56>
 8005a68:	461c      	mov	r4, r3
 8005a6a:	4617      	mov	r7, r2
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	4605      	mov	r5, r0
 8005a70:	2b7f      	cmp	r3, #127	; 0x7f
 8005a72:	d915      	bls.n	8005aa0 <ull_writetxdata+0x44>
 8005a74:	2314      	movs	r3, #20
 8005a76:	2200      	movs	r2, #0
 8005a78:	490f      	ldr	r1, [pc, #60]	; (8005ab8 <ull_writetxdata+0x5c>)
 8005a7a:	f7ff fc8f 	bl	800539c <dwt_write32bitoffsetreg>
 8005a7e:	4623      	mov	r3, r4
 8005a80:	2200      	movs	r2, #0
 8005a82:	490e      	ldr	r1, [pc, #56]	; (8005abc <ull_writetxdata+0x60>)
 8005a84:	4628      	mov	r0, r5
 8005a86:	f7ff fc89 	bl	800539c <dwt_write32bitoffsetreg>
 8005a8a:	9700      	str	r7, [sp, #0]
 8005a8c:	4633      	mov	r3, r6
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8005a94:	4628      	mov	r0, r5
 8005a96:	f7ff fb23 	bl	80050e0 <dwt_writetodevice>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	b003      	add	sp, #12
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa0:	9200      	str	r2, [sp, #0]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8005aaa:	f7ff fb19 	bl	80050e0 <dwt_writetodevice>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e7f4      	b.n	8005a9c <ull_writetxdata+0x40>
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab6:	e7f1      	b.n	8005a9c <ull_writetxdata+0x40>
 8005ab8:	001f0004 	.word	0x001f0004
 8005abc:	001f0008 	.word	0x001f0008

08005ac0 <dwt_modify32bitoffsetreg>:
 8005ac0:	b530      	push	{r4, r5, lr}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	9c08      	ldr	r4, [sp, #32]
 8005ac6:	f88d 3008 	strb.w	r3, [sp, #8]
 8005aca:	0a1d      	lsrs	r5, r3, #8
 8005acc:	f88d 5009 	strb.w	r5, [sp, #9]
 8005ad0:	0c1d      	lsrs	r5, r3, #16
 8005ad2:	f88d 500a 	strb.w	r5, [sp, #10]
 8005ad6:	0e1b      	lsrs	r3, r3, #24
 8005ad8:	f88d 300b 	strb.w	r3, [sp, #11]
 8005adc:	f88d 400c 	strb.w	r4, [sp, #12]
 8005ae0:	0a23      	lsrs	r3, r4, #8
 8005ae2:	f88d 300d 	strb.w	r3, [sp, #13]
 8005ae6:	0c23      	lsrs	r3, r4, #16
 8005ae8:	f88d 300e 	strb.w	r3, [sp, #14]
 8005aec:	0e24      	lsrs	r4, r4, #24
 8005aee:	f88d 400f 	strb.w	r4, [sp, #15]
 8005af2:	f248 0303 	movw	r3, #32771	; 0x8003
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	ab02      	add	r3, sp, #8
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	2308      	movs	r3, #8
 8005afe:	b292      	uxth	r2, r2
 8005b00:	f7fe fe7d 	bl	80047fe <dwt_xfer3xxx>
 8005b04:	b005      	add	sp, #20
 8005b06:	bd30      	pop	{r4, r5, pc}

08005b08 <_dwt_kick_dgc_on_wakeup>:
 8005b08:	b500      	push	{lr}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	2905      	cmp	r1, #5
 8005b0e:	d004      	beq.n	8005b1a <_dwt_kick_dgc_on_wakeup+0x12>
 8005b10:	2909      	cmp	r1, #9
 8005b12:	d00b      	beq.n	8005b2c <_dwt_kick_dgc_on_wakeup+0x24>
 8005b14:	b003      	add	sp, #12
 8005b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b1a:	2340      	movs	r3, #64	; 0x40
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005b22:	2200      	movs	r2, #0
 8005b24:	4906      	ldr	r1, [pc, #24]	; (8005b40 <_dwt_kick_dgc_on_wakeup+0x38>)
 8005b26:	f7ff ffcb 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005b2a:	e7f3      	b.n	8005b14 <_dwt_kick_dgc_on_wakeup+0xc>
 8005b2c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005b36:	2200      	movs	r2, #0
 8005b38:	4901      	ldr	r1, [pc, #4]	; (8005b40 <_dwt_kick_dgc_on_wakeup+0x38>)
 8005b3a:	f7ff ffc1 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005b3e:	e7e9      	b.n	8005b14 <_dwt_kick_dgc_on_wakeup+0xc>
 8005b40:	000b0008 	.word	0x000b0008

08005b44 <ull_enable_rf_tx>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460e      	mov	r6, r1
 8005b4c:	4d13      	ldr	r5, [pc, #76]	; (8005b9c <ull_enable_rf_tx+0x58>)
 8005b4e:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	f7ff ffb0 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005b60:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff ffa6 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <ull_enable_rf_tx+0x5c>)
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7ff ff9c 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005b88:	b90e      	cbnz	r6, 8005b8e <ull_enable_rf_tx+0x4a>
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <ull_enable_rf_tx+0x60>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	4905      	ldr	r1, [pc, #20]	; (8005ba8 <ull_enable_rf_tx+0x64>)
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7ff fc01 	bl	800539c <dwt_write32bitoffsetreg>
 8005b9a:	e7f6      	b.n	8005b8a <ull_enable_rf_tx+0x46>
 8005b9c:	00070048 	.word	0x00070048
 8005ba0:	02003c00 	.word	0x02003c00
 8005ba4:	01011100 	.word	0x01011100
 8005ba8:	00070014 	.word	0x00070014

08005bac <ull_enable_rftx_blocks>:
 8005bac:	b500      	push	{lr}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <ull_enable_rftx_blocks+0x1c>)
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4904      	ldr	r1, [pc, #16]	; (8005bcc <ull_enable_rftx_blocks+0x20>)
 8005bbc:	f7ff ff80 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005bc0:	b003      	add	sp, #12
 8005bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bc6:	bf00      	nop
 8005bc8:	02003c00 	.word	0x02003c00
 8005bcc:	00070004 	.word	0x00070004

08005bd0 <_dwt_otpprogword32>:
 8005bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	460d      	mov	r5, r1
 8005bda:	4617      	mov	r7, r2
 8005bdc:	4e56      	ldr	r6, [pc, #344]	; (8005d38 <_dwt_otpprogword32+0x168>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	4631      	mov	r1, r6
 8005be2:	f7fe fe99 	bl	8004918 <dwt_read32bitoffsetreg>
 8005be6:	4681      	mov	r9, r0
 8005be8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7ff ff62 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005bfc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8005d3c <_dwt_otpprogword32+0x16c>
 8005c00:	2318      	movs	r3, #24
 8005c02:	2200      	movs	r2, #0
 8005c04:	4641      	mov	r1, r8
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7ff fac7 	bl	800519a <dwt_write16bitoffsetreg>
 8005c0c:	2125      	movs	r1, #37	; 0x25
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f7ff fb0a 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c14:	2102      	movs	r1, #2
 8005c16:	4620      	mov	r0, r4
 8005c18:	f7ff fb06 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c1c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7ff fb01 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c26:	b2f9      	uxtb	r1, r7
 8005c28:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff fafb 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c36:	4620      	mov	r0, r4
 8005c38:	f7ff faf6 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f7ff faf2 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c44:	2102      	movs	r1, #2
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7ff faee 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c4c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7ff fae9 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c56:	b2e9      	uxtb	r1, r5
 8005c58:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f7ff fae3 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c62:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8005c66:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7ff fadc 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c70:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8005c74:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f7ff fad5 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c7e:	0e29      	lsrs	r1, r5, #24
 8005c80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005c84:	4620      	mov	r0, r4
 8005c86:	f7ff facf 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f7ff facb 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c92:	213a      	movs	r1, #58	; 0x3a
 8005c94:	4620      	mov	r0, r4
 8005c96:	f7ff fac7 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005c9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f7ff fac2 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005ca4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7ff fabd 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f7ff fab9 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005cb6:	213a      	movs	r1, #58	; 0x3a
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f7ff fab5 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005cbe:	f240 1101 	movw	r1, #257	; 0x101
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7ff fab0 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7ff fa62 	bl	800519a <dwt_write16bitoffsetreg>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7ff fa5b 	bl	800519a <dwt_write16bitoffsetreg>
 8005ce4:	2002      	movs	r0, #2
 8005ce6:	f7fa fdbb 	bl	8000860 <deca_sleep>
 8005cea:	213a      	movs	r1, #58	; 0x3a
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7ff fa9b 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005cf2:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f7ff fa96 	bl	8005228 <__dwt_otp_write_wdata_id_reg>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005d04:	4620      	mov	r0, r4
 8005d06:	f7ff fa48 	bl	800519a <dwt_write16bitoffsetreg>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005d12:	4620      	mov	r0, r4
 8005d14:	f7ff fa41 	bl	800519a <dwt_write16bitoffsetreg>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f7ff fa3b 	bl	800519a <dwt_write16bitoffsetreg>
 8005d24:	464b      	mov	r3, r9
 8005d26:	2200      	movs	r2, #0
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fb36 	bl	800539c <dwt_write32bitoffsetreg>
 8005d30:	b003      	add	sp, #12
 8005d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d36:	bf00      	nop
 8005d38:	00070044 	.word	0x00070044
 8005d3c:	000b0008 	.word	0x000b0008

08005d40 <ull_setgpiomode>:
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	b083      	sub	sp, #12
 8005d44:	2400      	movs	r4, #0
 8005d46:	4623      	mov	r3, r4
 8005d48:	2601      	movs	r6, #1
 8005d4a:	2707      	movs	r7, #7
 8005d4c:	e002      	b.n	8005d54 <ull_setgpiomode+0x14>
 8005d4e:	3401      	adds	r4, #1
 8005d50:	2c09      	cmp	r4, #9
 8005d52:	d009      	beq.n	8005d68 <ull_setgpiomode+0x28>
 8005d54:	fa06 f504 	lsl.w	r5, r6, r4
 8005d58:	420d      	tst	r5, r1
 8005d5a:	d0f8      	beq.n	8005d4e <ull_setgpiomode+0xe>
 8005d5c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005d60:	fa07 f505 	lsl.w	r5, r7, r5
 8005d64:	432b      	orrs	r3, r5
 8005d66:	e7f2      	b.n	8005d4e <ull_setgpiomode+0xe>
 8005d68:	401a      	ands	r2, r3
 8005d6a:	9200      	str	r2, [sp, #0]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8005d74:	f7ff fea4 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005d78:	b003      	add	sp, #12
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d7c <ull_setinterrupt>:
 8005d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	4604      	mov	r4, r0
 8005d84:	4688      	mov	r8, r1
 8005d86:	4617      	mov	r7, r2
 8005d88:	461d      	mov	r5, r3
 8005d8a:	f7fa fd4b 	bl	8000824 <decamutexon>
 8005d8e:	4606      	mov	r6, r0
 8005d90:	2d02      	cmp	r5, #2
 8005d92:	d02d      	beq.n	8005df0 <ull_setinterrupt+0x74>
 8005d94:	2d01      	cmp	r5, #1
 8005d96:	d038      	beq.n	8005e0a <ull_setinterrupt+0x8e>
 8005d98:	2500      	movs	r5, #0
 8005d9a:	9500      	str	r5, [sp, #0]
 8005d9c:	ea6f 0308 	mvn.w	r3, r8
 8005da0:	462a      	mov	r2, r5
 8005da2:	213c      	movs	r1, #60	; 0x3c
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fe8b 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005daa:	9500      	str	r5, [sp, #0]
 8005dac:	43fb      	mvns	r3, r7
 8005dae:	462a      	mov	r2, r5
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff fe84 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005db8:	2200      	movs	r2, #0
 8005dba:	213c      	movs	r1, #60	; 0x3c
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7fe fdab 	bl	8004918 <dwt_read32bitoffsetreg>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2144      	movs	r1, #68	; 0x44
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7ff fae7 	bl	800539c <dwt_write32bitoffsetreg>
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f7fe fda0 	bl	8004918 <dwt_read32bitoffsetreg>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2148      	movs	r1, #72	; 0x48
 8005dde:	4620      	mov	r0, r4
 8005de0:	f7ff fadc 	bl	800539c <dwt_write32bitoffsetreg>
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7fa fd2e 	bl	8000846 <decamutexoff>
 8005dea:	b002      	add	sp, #8
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df0:	4643      	mov	r3, r8
 8005df2:	2200      	movs	r2, #0
 8005df4:	213c      	movs	r1, #60	; 0x3c
 8005df6:	4620      	mov	r0, r4
 8005df8:	f7ff fad0 	bl	800539c <dwt_write32bitoffsetreg>
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2140      	movs	r1, #64	; 0x40
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff faca 	bl	800539c <dwt_write32bitoffsetreg>
 8005e08:	e7d6      	b.n	8005db8 <ull_setinterrupt+0x3c>
 8005e0a:	f8cd 8000 	str.w	r8, [sp]
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e12:	2200      	movs	r2, #0
 8005e14:	213c      	movs	r1, #60	; 0x3c
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff fe52 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005e1c:	9700      	str	r7, [sp, #0]
 8005e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e22:	2200      	movs	r2, #0
 8005e24:	2140      	movs	r1, #64	; 0x40
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7ff fe4a 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005e2c:	e7c4      	b.n	8005db8 <ull_setinterrupt+0x3c>
	...

08005e30 <ull_writetxfctrl>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	4604      	mov	r4, r0
 8005e36:	2a7f      	cmp	r2, #127	; 0x7f
 8005e38:	d912      	bls.n	8005e60 <ull_writetxfctrl+0x30>
 8005e3a:	3280      	adds	r2, #128	; 0x80
 8005e3c:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8005e40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e44:	9100      	str	r1, [sp, #0]
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <ull_writetxfctrl+0x48>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2124      	movs	r1, #36	; 0x24
 8005e4c:	f7ff fe38 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005e50:	2200      	movs	r2, #0
 8005e52:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005e56:	4620      	mov	r0, r4
 8005e58:	f7fe fd86 	bl	8004968 <dwt_read8bitoffsetreg>
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd10      	pop	{r4, pc}
 8005e60:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8005e64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e68:	9100      	str	r1, [sp, #0]
 8005e6a:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <ull_writetxfctrl+0x48>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2124      	movs	r1, #36	; 0x24
 8005e70:	f7ff fe26 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005e74:	e7f2      	b.n	8005e5c <ull_writetxfctrl+0x2c>
 8005e76:	bf00      	nop
 8005e78:	fc00f400 	.word	0xfc00f400

08005e7c <prs_sys_status_and_or>:
 8005e7c:	b500      	push	{lr}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	9200      	str	r2, [sp, #0]
 8005e82:	460b      	mov	r3, r1
 8005e84:	2200      	movs	r2, #0
 8005e86:	2144      	movs	r1, #68	; 0x44
 8005e88:	f7ff fe1a 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	b003      	add	sp, #12
 8005e90:	f85d fb04 	ldr.w	pc, [sp], #4

08005e94 <dwt_modify8bitoffsetreg>:
 8005e94:	b500      	push	{lr}
 8005e96:	b085      	sub	sp, #20
 8005e98:	f88d 300c 	strb.w	r3, [sp, #12]
 8005e9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005ea0:	f88d 300d 	strb.w	r3, [sp, #13]
 8005ea4:	f248 0301 	movw	r3, #32769	; 0x8001
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	ab03      	add	r3, sp, #12
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	2302      	movs	r3, #2
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	f7fe fca4 	bl	80047fe <dwt_xfer3xxx>
 8005eb6:	b005      	add	sp, #20
 8005eb8:	f85d fb04 	ldr.w	pc, [sp], #4

08005ebc <ull_configciadiag>:
 8005ebc:	b530      	push	{r4, r5, lr}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	f011 0f01 	tst.w	r1, #1
 8005ec8:	d015      	beq.n	8005ef6 <ull_configciadiag+0x3a>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	23ef      	movs	r3, #239	; 0xef
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005ed6:	f7ff ffdd 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8005eda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005edc:	761d      	strb	r5, [r3, #24]
 8005ede:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ee0:	7e1b      	ldrb	r3, [r3, #24]
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	d010      	beq.n	8005f08 <ull_configciadiag+0x4c>
 8005ee6:	086b      	lsrs	r3, r5, #1
 8005ee8:	2200      	movs	r2, #0
 8005eea:	490e      	ldr	r1, [pc, #56]	; (8005f24 <ull_configciadiag+0x68>)
 8005eec:	4620      	mov	r0, r4
 8005eee:	f7ff f902 	bl	80050f6 <dwt_write8bitoffsetreg>
 8005ef2:	b003      	add	sp, #12
 8005ef4:	bd30      	pop	{r4, r5, pc}
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	23ff      	movs	r3, #255	; 0xff
 8005efc:	2202      	movs	r2, #2
 8005efe:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005f02:	f7ff ffc7 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8005f06:	e7e8      	b.n	8005eda <ull_configciadiag+0x1e>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	23ff      	movs	r3, #255	; 0xff
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4904      	ldr	r1, [pc, #16]	; (8005f24 <ull_configciadiag+0x68>)
 8005f12:	4620      	mov	r0, r4
 8005f14:	f7ff ffbe 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8005f18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005f1a:	7e13      	ldrb	r3, [r2, #24]
 8005f1c:	f043 0302 	orr.w	r3, r3, #2
 8005f20:	7613      	strb	r3, [r2, #24]
 8005f22:	e7e6      	b.n	8005ef2 <ull_configciadiag+0x36>
 8005f24:	00010028 	.word	0x00010028

08005f28 <ull_calcbandwidthadj>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	460d      	mov	r5, r1
 8005f30:	2101      	movs	r1, #1
 8005f32:	f7ff f963 	bl	80051fc <ull_force_clocks>
 8005f36:	2100      	movs	r1, #0
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f7ff fe03 	bl	8005b44 <ull_enable_rf_tx>
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff fe34 	bl	8005bac <ull_enable_rftx_blocks>
 8005f44:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4915      	ldr	r1, [pc, #84]	; (8005fa0 <ull_calcbandwidthadj+0x78>)
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff f924 	bl	800519a <dwt_write16bitoffsetreg>
 8005f52:	2303      	movs	r3, #3
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	23ff      	movs	r3, #255	; 0xff
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4912      	ldr	r1, [pc, #72]	; (8005fa4 <ull_calcbandwidthadj+0x7c>)
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7ff ff99 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8005f62:	4e10      	ldr	r6, [pc, #64]	; (8005fa4 <ull_calcbandwidthadj+0x7c>)
 8005f64:	2500      	movs	r5, #0
 8005f66:	462a      	mov	r2, r5
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7fe fcfc 	bl	8004968 <dwt_read8bitoffsetreg>
 8005f70:	f010 0f01 	tst.w	r0, #1
 8005f74:	d1f7      	bne.n	8005f66 <ull_calcbandwidthadj+0x3e>
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff fcae 	bl	80058d8 <ull_disable_rftx_blocks>
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f7ff fcb4 	bl	80058ec <ull_disable_rf_tx>
 8005f84:	2105      	movs	r1, #5
 8005f86:	4620      	mov	r0, r4
 8005f88:	f7ff f938 	bl	80051fc <ull_force_clocks>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4906      	ldr	r1, [pc, #24]	; (8005fa8 <ull_calcbandwidthadj+0x80>)
 8005f90:	4620      	mov	r0, r4
 8005f92:	f7fe fce9 	bl	8004968 <dwt_read8bitoffsetreg>
 8005f96:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005f9a:	b002      	add	sp, #8
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	bf00      	nop
 8005fa0:	0008001c 	.word	0x0008001c
 8005fa4:	00080010 	.word	0x00080010
 8005fa8:	0007001c 	.word	0x0007001c

08005fac <ull_configuretxrf>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4605      	mov	r5, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8005fb6:	b149      	cbz	r1, 8005fcc <ull_configuretxrf+0x20>
 8005fb8:	f7ff ffb6 	bl	8005f28 <ull_calcbandwidthadj>
 8005fbc:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4905      	ldr	r1, [pc, #20]	; (8005fd8 <ull_configuretxrf+0x2c>)
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff f9e9 	bl	800539c <dwt_write32bitoffsetreg>
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	7823      	ldrb	r3, [r4, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4902      	ldr	r1, [pc, #8]	; (8005fdc <ull_configuretxrf+0x30>)
 8005fd2:	f7ff f890 	bl	80050f6 <dwt_write8bitoffsetreg>
 8005fd6:	e7f1      	b.n	8005fbc <ull_configuretxrf+0x10>
 8005fd8:	0001000c 	.word	0x0001000c
 8005fdc:	0007001c 	.word	0x0007001c

08005fe0 <ull_repeated_frames>:
 8005fe0:	b530      	push	{r4, r5, lr}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	2310      	movs	r3, #16
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	23ff      	movs	r3, #255	; 0xff
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4906      	ldr	r1, [pc, #24]	; (800600c <ull_repeated_frames+0x2c>)
 8005ff2:	f7ff ff4f 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	2d02      	cmp	r5, #2
 8005ffa:	bf38      	it	cc
 8005ffc:	2302      	movcc	r3, #2
 8005ffe:	2200      	movs	r2, #0
 8006000:	212c      	movs	r1, #44	; 0x2c
 8006002:	4620      	mov	r0, r4
 8006004:	f7ff f9ca 	bl	800539c <dwt_write32bitoffsetreg>
 8006008:	b003      	add	sp, #12
 800600a:	bd30      	pop	{r4, r5, pc}
 800600c:	000f0024 	.word	0x000f0024

08006010 <ull_setdwstate>:
 8006010:	b530      	push	{r4, r5, lr}
 8006012:	b083      	sub	sp, #12
 8006014:	4604      	mov	r4, r0
 8006016:	2901      	cmp	r1, #1
 8006018:	d01d      	beq.n	8006056 <ull_setdwstate+0x46>
 800601a:	2902      	cmp	r1, #2
 800601c:	d030      	beq.n	8006080 <ull_setdwstate+0x70>
 800601e:	2301      	movs	r3, #1
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	23ff      	movs	r3, #255	; 0xff
 8006024:	2200      	movs	r2, #0
 8006026:	4926      	ldr	r1, [pc, #152]	; (80060c0 <ull_setdwstate+0xb0>)
 8006028:	f7ff ff34 	bl	8005e94 <dwt_modify8bitoffsetreg>
 800602c:	4d25      	ldr	r5, [pc, #148]	; (80060c4 <ull_setdwstate+0xb4>)
 800602e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006038:	2200      	movs	r2, #0
 800603a:	4629      	mov	r1, r5
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff fd3f 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006042:	2300      	movs	r3, #0
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	237f      	movs	r3, #127	; 0x7f
 8006048:	2202      	movs	r2, #2
 800604a:	4629      	mov	r1, r5
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff ff21 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8006052:	b003      	add	sp, #12
 8006054:	bd30      	pop	{r4, r5, pc}
 8006056:	2105      	movs	r1, #5
 8006058:	f7ff f8d0 	bl	80051fc <ull_force_clocks>
 800605c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006066:	2200      	movs	r2, #0
 8006068:	4917      	ldr	r1, [pc, #92]	; (80060c8 <ull_setdwstate+0xb8>)
 800606a:	4620      	mov	r0, r4
 800606c:	f7ff fd28 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006070:	2201      	movs	r2, #1
 8006072:	9200      	str	r2, [sp, #0]
 8006074:	23ff      	movs	r3, #255	; 0xff
 8006076:	4913      	ldr	r1, [pc, #76]	; (80060c4 <ull_setdwstate+0xb4>)
 8006078:	4620      	mov	r0, r4
 800607a:	f7ff ff0b 	bl	8005e94 <dwt_modify8bitoffsetreg>
 800607e:	e7e8      	b.n	8006052 <ull_setdwstate+0x42>
 8006080:	2303      	movs	r3, #3
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	23ff      	movs	r3, #255	; 0xff
 8006086:	2200      	movs	r2, #0
 8006088:	490d      	ldr	r1, [pc, #52]	; (80060c0 <ull_setdwstate+0xb0>)
 800608a:	f7ff ff03 	bl	8005e94 <dwt_modify8bitoffsetreg>
 800608e:	4d0d      	ldr	r5, [pc, #52]	; (80060c4 <ull_setdwstate+0xb4>)
 8006090:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800609a:	2200      	movs	r2, #0
 800609c:	4629      	mov	r1, r5
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff fd0e 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 80060a4:	2300      	movs	r3, #0
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	237f      	movs	r3, #127	; 0x7f
 80060aa:	2202      	movs	r2, #2
 80060ac:	4629      	mov	r1, r5
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff fef0 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80060b4:	2105      	movs	r1, #5
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff f8a0 	bl	80051fc <ull_force_clocks>
 80060bc:	e7c9      	b.n	8006052 <ull_setdwstate+0x42>
 80060be:	bf00      	nop
 80060c0:	00110004 	.word	0x00110004
 80060c4:	00110008 	.word	0x00110008
 80060c8:	00090008 	.word	0x00090008

080060cc <ull_configureframefilter>:
 80060cc:	b530      	push	{r4, r5, lr}
 80060ce:	b083      	sub	sp, #12
 80060d0:	4605      	mov	r5, r0
 80060d2:	2902      	cmp	r1, #2
 80060d4:	d00e      	beq.n	80060f4 <ull_configureframefilter+0x28>
 80060d6:	2400      	movs	r4, #0
 80060d8:	9400      	str	r4, [sp, #0]
 80060da:	23fe      	movs	r3, #254	; 0xfe
 80060dc:	4622      	mov	r2, r4
 80060de:	2110      	movs	r1, #16
 80060e0:	f7ff fed8 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80060e4:	4623      	mov	r3, r4
 80060e6:	4622      	mov	r2, r4
 80060e8:	2114      	movs	r1, #20
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7ff f855 	bl	800519a <dwt_write16bitoffsetreg>
 80060f0:	b003      	add	sp, #12
 80060f2:	bd30      	pop	{r4, r5, pc}
 80060f4:	4614      	mov	r4, r2
 80060f6:	2301      	movs	r3, #1
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	23ff      	movs	r3, #255	; 0xff
 80060fc:	2200      	movs	r2, #0
 80060fe:	2110      	movs	r1, #16
 8006100:	f7ff fec8 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8006104:	4623      	mov	r3, r4
 8006106:	2200      	movs	r2, #0
 8006108:	2114      	movs	r1, #20
 800610a:	4628      	mov	r0, r5
 800610c:	f7ff f845 	bl	800519a <dwt_write16bitoffsetreg>
 8006110:	e7ee      	b.n	80060f0 <ull_configureframefilter+0x24>
	...

08006114 <ull_run_pgfcal>:
 8006114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	4605      	mov	r5, r0
 800611c:	4c29      	ldr	r4, [pc, #164]	; (80061c4 <ull_run_pgfcal+0xb0>)
 800611e:	4b2a      	ldr	r3, [pc, #168]	; (80061c8 <ull_run_pgfcal+0xb4>)
 8006120:	2200      	movs	r2, #0
 8006122:	4621      	mov	r1, r4
 8006124:	f7ff f93a 	bl	800539c <dwt_write32bitoffsetreg>
 8006128:	2310      	movs	r3, #16
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	23ff      	movs	r3, #255	; 0xff
 800612e:	2200      	movs	r2, #0
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff feae 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8006138:	2403      	movs	r4, #3
 800613a:	f04f 0814 	mov.w	r8, #20
 800613e:	4f23      	ldr	r7, [pc, #140]	; (80061cc <ull_run_pgfcal+0xb8>)
 8006140:	2600      	movs	r6, #0
 8006142:	4640      	mov	r0, r8
 8006144:	f7fa fb97 	bl	8000876 <deca_usleep>
 8006148:	4632      	mov	r2, r6
 800614a:	4639      	mov	r1, r7
 800614c:	4628      	mov	r0, r5
 800614e:	f7fe fc0b 	bl	8004968 <dwt_read8bitoffsetreg>
 8006152:	2801      	cmp	r0, #1
 8006154:	d034      	beq.n	80061c0 <ull_run_pgfcal+0xac>
 8006156:	1e63      	subs	r3, r4, #1
 8006158:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800615c:	d1f1      	bne.n	8006142 <ull_run_pgfcal+0x2e>
 800615e:	f06f 0402 	mvn.w	r4, #2
 8006162:	4e18      	ldr	r6, [pc, #96]	; (80061c4 <ull_run_pgfcal+0xb0>)
 8006164:	2300      	movs	r3, #0
 8006166:	461a      	mov	r2, r3
 8006168:	4631      	mov	r1, r6
 800616a:	4628      	mov	r0, r5
 800616c:	f7fe ffc3 	bl	80050f6 <dwt_write8bitoffsetreg>
 8006170:	2301      	movs	r3, #1
 8006172:	2200      	movs	r2, #0
 8006174:	4915      	ldr	r1, [pc, #84]	; (80061cc <ull_run_pgfcal+0xb8>)
 8006176:	4628      	mov	r0, r5
 8006178:	f7fe ffbd 	bl	80050f6 <dwt_write8bitoffsetreg>
 800617c:	2301      	movs	r3, #1
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	23ff      	movs	r3, #255	; 0xff
 8006182:	2202      	movs	r2, #2
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff fe84 	bl	8005e94 <dwt_modify8bitoffsetreg>
 800618c:	2200      	movs	r2, #0
 800618e:	4910      	ldr	r1, [pc, #64]	; (80061d0 <ull_run_pgfcal+0xbc>)
 8006190:	4628      	mov	r0, r5
 8006192:	f7fe fbc1 	bl	8004918 <dwt_read32bitoffsetreg>
 8006196:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800619a:	4298      	cmp	r0, r3
 800619c:	bf08      	it	eq
 800619e:	f06f 0403 	mvneq.w	r4, #3
 80061a2:	2200      	movs	r2, #0
 80061a4:	490b      	ldr	r1, [pc, #44]	; (80061d4 <ull_run_pgfcal+0xc0>)
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7fe fbb6 	bl	8004918 <dwt_read32bitoffsetreg>
 80061ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80061b0:	4298      	cmp	r0, r3
 80061b2:	bf14      	ite	ne
 80061b4:	4620      	movne	r0, r4
 80061b6:	f06f 0004 	mvneq.w	r0, #4
 80061ba:	b002      	add	sp, #8
 80061bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c0:	2400      	movs	r4, #0
 80061c2:	e7ce      	b.n	8006162 <ull_run_pgfcal+0x4e>
 80061c4:	0004000c 	.word	0x0004000c
 80061c8:	00020001 	.word	0x00020001
 80061cc:	00040020 	.word	0x00040020
 80061d0:	00040014 	.word	0x00040014
 80061d4:	0004001c 	.word	0x0004001c

080061d8 <prs_ack_enable>:
 80061d8:	b500      	push	{lr}
 80061da:	b083      	sub	sp, #12
 80061dc:	2900      	cmp	r1, #0
 80061de:	bf0b      	itete	eq
 80061e0:	23ff      	moveq	r3, #255	; 0xff
 80061e2:	23f7      	movne	r3, #247	; 0xf7
 80061e4:	2200      	moveq	r2, #0
 80061e6:	2208      	movne	r2, #8
 80061e8:	9200      	str	r2, [sp, #0]
 80061ea:	2201      	movs	r2, #1
 80061ec:	2110      	movs	r1, #16
 80061ee:	f7ff fe51 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80061f2:	b003      	add	sp, #12
 80061f4:	f85d fb04 	ldr.w	pc, [sp], #4

080061f8 <dwt_modify16bitoffsetreg>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8006200:	f88d 300c 	strb.w	r3, [sp, #12]
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	f88d 300d 	strb.w	r3, [sp, #13]
 800620a:	f88d 400e 	strb.w	r4, [sp, #14]
 800620e:	0a24      	lsrs	r4, r4, #8
 8006210:	f88d 400f 	strb.w	r4, [sp, #15]
 8006214:	f248 0302 	movw	r3, #32770	; 0x8002
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	ab03      	add	r3, sp, #12
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	2304      	movs	r3, #4
 8006220:	b292      	uxth	r2, r2
 8006222:	f7fe faec 	bl	80047fe <dwt_xfer3xxx>
 8006226:	b004      	add	sp, #16
 8006228:	bd10      	pop	{r4, pc}
	...

0800622c <_dwt_prog_ldo_and_bias_tune>:
 800622c:	b510      	push	{r4, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	4604      	mov	r4, r0
 8006232:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800623c:	2200      	movs	r2, #0
 800623e:	4907      	ldr	r1, [pc, #28]	; (800625c <_dwt_prog_ldo_and_bias_tune+0x30>)
 8006240:	f7ff ffda 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006244:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006246:	7a1b      	ldrb	r3, [r3, #8]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800624e:	2200      	movs	r2, #0
 8006250:	4903      	ldr	r1, [pc, #12]	; (8006260 <_dwt_prog_ldo_and_bias_tune+0x34>)
 8006252:	4620      	mov	r0, r4
 8006254:	f7ff ffd0 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006258:	b002      	add	sp, #8
 800625a:	bd10      	pop	{r4, pc}
 800625c:	000b0008 	.word	0x000b0008
 8006260:	0011001f 	.word	0x0011001f

08006264 <ull_setleds>:
 8006264:	b530      	push	{r4, r5, lr}
 8006266:	b083      	sub	sp, #12
 8006268:	4604      	mov	r4, r0
 800626a:	f011 0f01 	tst.w	r1, #1
 800626e:	d01f      	beq.n	80062b0 <ull_setleds+0x4c>
 8006270:	460d      	mov	r5, r1
 8006272:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800627c:	2200      	movs	r2, #0
 800627e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006282:	f7ff fc1d 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006286:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006290:	2200      	movs	r2, #0
 8006292:	4918      	ldr	r1, [pc, #96]	; (80062f4 <ull_setleds+0x90>)
 8006294:	4620      	mov	r0, r4
 8006296:	f7ff fc13 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 800629a:	f015 0f02 	tst.w	r5, #2
 800629e:	d11a      	bne.n	80062d6 <ull_setleds+0x72>
 80062a0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062a4:	2200      	movs	r2, #0
 80062a6:	4914      	ldr	r1, [pc, #80]	; (80062f8 <ull_setleds+0x94>)
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7ff f877 	bl	800539c <dwt_write32bitoffsetreg>
 80062ae:	e010      	b.n	80062d2 <ull_setleds+0x6e>
 80062b0:	2500      	movs	r5, #0
 80062b2:	9500      	str	r5, [sp, #0]
 80062b4:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80062b8:	462a      	mov	r2, r5
 80062ba:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80062be:	f7ff fbff 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 80062c2:	9500      	str	r5, [sp, #0]
 80062c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80062c8:	462a      	mov	r2, r5
 80062ca:	490b      	ldr	r1, [pc, #44]	; (80062f8 <ull_setleds+0x94>)
 80062cc:	4620      	mov	r0, r4
 80062ce:	f7ff ff93 	bl	80061f8 <dwt_modify16bitoffsetreg>
 80062d2:	b003      	add	sp, #12
 80062d4:	bd30      	pop	{r4, r5, pc}
 80062d6:	4d08      	ldr	r5, [pc, #32]	; (80062f8 <ull_setleds+0x94>)
 80062d8:	4b08      	ldr	r3, [pc, #32]	; (80062fc <ull_setleds+0x98>)
 80062da:	2200      	movs	r2, #0
 80062dc:	4629      	mov	r1, r5
 80062de:	4620      	mov	r0, r4
 80062e0:	f7ff f85c 	bl	800539c <dwt_write32bitoffsetreg>
 80062e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062e8:	2200      	movs	r2, #0
 80062ea:	4629      	mov	r1, r5
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7ff f855 	bl	800539c <dwt_write32bitoffsetreg>
 80062f2:	e7ee      	b.n	80062d2 <ull_setleds+0x6e>
 80062f4:	00110004 	.word	0x00110004
 80062f8:	00110016 	.word	0x00110016
 80062fc:	000f0110 	.word	0x000f0110

08006300 <ull_pgf_cal>:
 8006300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006302:	b083      	sub	sp, #12
 8006304:	4604      	mov	r4, r0
 8006306:	2901      	cmp	r1, #1
 8006308:	d009      	beq.n	800631e <ull_pgf_cal+0x1e>
 800630a:	2014      	movs	r0, #20
 800630c:	f7fa fab3 	bl	8000876 <deca_usleep>
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff feff 	bl	8006114 <ull_run_pgfcal>
 8006316:	4605      	mov	r5, r0
 8006318:	4628      	mov	r0, r5
 800631a:	b003      	add	sp, #12
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631e:	4e0f      	ldr	r6, [pc, #60]	; (800635c <ull_pgf_cal+0x5c>)
 8006320:	2200      	movs	r2, #0
 8006322:	4631      	mov	r1, r6
 8006324:	f7fe fb0e 	bl	8004944 <dwt_read16bitoffsetreg>
 8006328:	4607      	mov	r7, r0
 800632a:	f240 1305 	movw	r3, #261	; 0x105
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006334:	2200      	movs	r2, #0
 8006336:	4631      	mov	r1, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f7ff ff5d 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800633e:	2014      	movs	r0, #20
 8006340:	f7fa fa99 	bl	8000876 <deca_usleep>
 8006344:	4620      	mov	r0, r4
 8006346:	f7ff fee5 	bl	8006114 <ull_run_pgfcal>
 800634a:	4605      	mov	r5, r0
 800634c:	2200      	movs	r2, #0
 800634e:	9200      	str	r2, [sp, #0]
 8006350:	463b      	mov	r3, r7
 8006352:	4631      	mov	r1, r6
 8006354:	4620      	mov	r0, r4
 8006356:	f7ff ff4f 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800635a:	e7dd      	b.n	8006318 <ull_pgf_cal+0x18>
 800635c:	00070048 	.word	0x00070048

08006360 <ull_setgpiovalue>:
 8006360:	b500      	push	{lr}
 8006362:	b083      	sub	sp, #12
 8006364:	2a01      	cmp	r2, #1
 8006366:	d009      	beq.n	800637c <ull_setgpiovalue+0x1c>
 8006368:	43cb      	mvns	r3, r1
 800636a:	2200      	movs	r2, #0
 800636c:	9200      	str	r2, [sp, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	4906      	ldr	r1, [pc, #24]	; (800638c <ull_setgpiovalue+0x2c>)
 8006372:	f7ff ff41 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006376:	b003      	add	sp, #12
 8006378:	f85d fb04 	ldr.w	pc, [sp], #4
 800637c:	9100      	str	r1, [sp, #0]
 800637e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006382:	2200      	movs	r2, #0
 8006384:	4901      	ldr	r1, [pc, #4]	; (800638c <ull_setgpiovalue+0x2c>)
 8006386:	f7ff ff37 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800638a:	e7f4      	b.n	8006376 <ull_setgpiovalue+0x16>
 800638c:	0005000c 	.word	0x0005000c

08006390 <ull_readaccdata>:
 8006390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006392:	b083      	sub	sp, #12
 8006394:	4604      	mov	r4, r0
 8006396:	460f      	mov	r7, r1
 8006398:	4616      	mov	r6, r2
 800639a:	461d      	mov	r5, r3
 800639c:	f248 0340 	movw	r3, #32832	; 0x8040
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063a6:	2200      	movs	r2, #0
 80063a8:	4918      	ldr	r1, [pc, #96]	; (800640c <ull_readaccdata+0x7c>)
 80063aa:	f7ff ff25 	bl	80061f8 <dwt_modify16bitoffsetreg>
 80063ae:	19aa      	adds	r2, r5, r6
 80063b0:	f243 0301 	movw	r3, #12289	; 0x3001
 80063b4:	429a      	cmp	r2, r3
 80063b6:	dc15      	bgt.n	80063e4 <ull_readaccdata+0x54>
 80063b8:	2d7f      	cmp	r5, #127	; 0x7f
 80063ba:	d91d      	bls.n	80063f8 <ull_readaccdata+0x68>
 80063bc:	2315      	movs	r3, #21
 80063be:	2200      	movs	r2, #0
 80063c0:	4913      	ldr	r1, [pc, #76]	; (8006410 <ull_readaccdata+0x80>)
 80063c2:	4620      	mov	r0, r4
 80063c4:	f7fe ffea 	bl	800539c <dwt_write32bitoffsetreg>
 80063c8:	462b      	mov	r3, r5
 80063ca:	2200      	movs	r2, #0
 80063cc:	4911      	ldr	r1, [pc, #68]	; (8006414 <ull_readaccdata+0x84>)
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7fe ffe4 	bl	800539c <dwt_write32bitoffsetreg>
 80063d4:	9700      	str	r7, [sp, #0]
 80063d6:	4633      	mov	r3, r6
 80063d8:	2200      	movs	r2, #0
 80063da:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80063de:	4620      	mov	r0, r4
 80063e0:	f7fe fa90 	bl	8004904 <dwt_readfromdevice>
 80063e4:	2200      	movs	r2, #0
 80063e6:	9200      	str	r2, [sp, #0]
 80063e8:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80063ec:	4907      	ldr	r1, [pc, #28]	; (800640c <ull_readaccdata+0x7c>)
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff ff02 	bl	80061f8 <dwt_modify16bitoffsetreg>
 80063f4:	b003      	add	sp, #12
 80063f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f8:	9700      	str	r7, [sp, #0]
 80063fa:	4633      	mov	r3, r6
 80063fc:	462a      	mov	r2, r5
 80063fe:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 8006402:	4620      	mov	r0, r4
 8006404:	f7fe fa7e 	bl	8004904 <dwt_readfromdevice>
 8006408:	e7ec      	b.n	80063e4 <ull_readaccdata+0x54>
 800640a:	bf00      	nop
 800640c:	00110004 	.word	0x00110004
 8006410:	001f0004 	.word	0x001f0004
 8006414:	001f0008 	.word	0x001f0008

08006418 <ull_repeated_cw>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4606      	mov	r6, r0
 800641c:	460c      	mov	r4, r1
 800641e:	4615      	mov	r5, r2
 8006420:	4b0e      	ldr	r3, [pc, #56]	; (800645c <ull_repeated_cw+0x44>)
 8006422:	2202      	movs	r2, #2
 8006424:	490e      	ldr	r1, [pc, #56]	; (8006460 <ull_repeated_cw+0x48>)
 8006426:	f7fe ffb9 	bl	800539c <dwt_write32bitoffsetreg>
 800642a:	2d0f      	cmp	r5, #15
 800642c:	bfa8      	it	ge
 800642e:	250f      	movge	r5, #15
 8006430:	1e63      	subs	r3, r4, #1
 8006432:	2b03      	cmp	r3, #3
 8006434:	bf28      	it	cs
 8006436:	2404      	movcs	r4, #4
 8006438:	2310      	movs	r3, #16
 800643a:	4123      	asrs	r3, r4
 800643c:	2200      	movs	r2, #0
 800643e:	4909      	ldr	r1, [pc, #36]	; (8006464 <ull_repeated_cw+0x4c>)
 8006440:	4630      	mov	r0, r6
 8006442:	f7fe ffab 	bl	800539c <dwt_write32bitoffsetreg>
 8006446:	1e63      	subs	r3, r4, #1
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	fa05 f303 	lsl.w	r3, r5, r3
 800644e:	2200      	movs	r2, #0
 8006450:	4905      	ldr	r1, [pc, #20]	; (8006468 <ull_repeated_cw+0x50>)
 8006452:	4630      	mov	r0, r6
 8006454:	f7fe ffa2 	bl	800539c <dwt_write32bitoffsetreg>
 8006458:	bd70      	pop	{r4, r5, r6, pc}
 800645a:	bf00      	nop
 800645c:	00d20874 	.word	0x00d20874
 8006460:	00110010 	.word	0x00110010
 8006464:	00070028 	.word	0x00070028
 8006468:	00080018 	.word	0x00080018

0800646c <ull_configure>:
 800646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	b083      	sub	sp, #12
 8006472:	4604      	mov	r4, r0
 8006474:	460d      	mov	r5, r1
 8006476:	f891 9000 	ldrb.w	r9, [r1]
 800647a:	790b      	ldrb	r3, [r1, #4]
 800647c:	2b18      	cmp	r3, #24
 800647e:	d814      	bhi.n	80064aa <ull_configure+0x3e>
 8006480:	78cf      	ldrb	r7, [r1, #3]
 8006482:	2f18      	cmp	r7, #24
 8006484:	bf94      	ite	ls
 8006486:	2700      	movls	r7, #0
 8006488:	2701      	movhi	r7, #1
 800648a:	b2ff      	uxtb	r7, r7
 800648c:	79eb      	ldrb	r3, [r5, #7]
 800648e:	2b01      	cmp	r3, #1
 8006490:	bf0c      	ite	eq
 8006492:	2110      	moveq	r1, #16
 8006494:	2100      	movne	r1, #0
 8006496:	786b      	ldrb	r3, [r5, #1]
 8006498:	3b01      	subs	r3, #1
 800649a:	2b06      	cmp	r3, #6
 800649c:	d810      	bhi.n	80064c0 <ull_configure+0x54>
 800649e:	e8df f003 	tbb	[pc, r3]
 80064a2:	0f06      	.short	0x0f06
 80064a4:	0f0c120f 	.word	0x0f0c120f
 80064a8:	09          	.byte	0x09
 80064a9:	00          	.byte	0x00
 80064aa:	2701      	movs	r7, #1
 80064ac:	e7ed      	b.n	800648a <ull_configure+0x1e>
 80064ae:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80064b2:	e00a      	b.n	80064ca <ull_configure+0x5e>
 80064b4:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80064b8:	e007      	b.n	80064ca <ull_configure+0x5e>
 80064ba:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80064be:	e004      	b.n	80064ca <ull_configure+0x5e>
 80064c0:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80064c4:	e001      	b.n	80064ca <ull_configure+0x5e>
 80064c6:	f04f 0a20 	mov.w	sl, #32
 80064ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064cc:	8a53      	ldrh	r3, [r2, #18]
 80064ce:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80064d2:	8253      	strh	r3, [r2, #18]
 80064d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064d6:	79ea      	ldrb	r2, [r5, #7]
 80064d8:	731a      	strb	r2, [r3, #12]
 80064da:	7b2e      	ldrb	r6, [r5, #12]
 80064dc:	1cb3      	adds	r3, r6, #2
 80064de:	2601      	movs	r6, #1
 80064e0:	409e      	lsls	r6, r3
 80064e2:	fa1f f886 	uxth.w	r8, r6
 80064e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064e8:	4bc7      	ldr	r3, [pc, #796]	; (8006808 <ull_configure+0x39c>)
 80064ea:	fb03 f308 	mul.w	r3, r3, r8
 80064ee:	0bdb      	lsrs	r3, r3, #15
 80064f0:	8293      	strh	r3, [r2, #20]
 80064f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064f4:	7aea      	ldrb	r2, [r5, #11]
 80064f6:	75da      	strb	r2, [r3, #23]
 80064f8:	7a2b      	ldrb	r3, [r5, #8]
 80064fa:	015b      	lsls	r3, r3, #5
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	7b6a      	ldrb	r2, [r5, #13]
 8006502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006506:	7aea      	ldrb	r2, [r5, #11]
 8006508:	0312      	lsls	r2, r2, #12
 800650a:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800650e:	4313      	orrs	r3, r2
 8006510:	430b      	orrs	r3, r1
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	4bbd      	ldr	r3, [pc, #756]	; (800680c <ull_configure+0x3a0>)
 8006516:	2200      	movs	r2, #0
 8006518:	2110      	movs	r1, #16
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff fad0 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006520:	2f00      	cmp	r7, #0
 8006522:	f040 80f6 	bne.w	8006712 <ull_configure+0x2a6>
 8006526:	7aeb      	ldrb	r3, [r5, #11]
 8006528:	b1f3      	cbz	r3, 8006568 <ull_configure+0xfc>
 800652a:	7b6b      	ldrb	r3, [r5, #13]
 800652c:	2b01      	cmp	r3, #1
 800652e:	f240 811c 	bls.w	800676a <ull_configure+0x2fe>
 8006532:	7b2a      	ldrb	r2, [r5, #12]
 8006534:	4bb6      	ldr	r3, [pc, #728]	; (8006810 <ull_configure+0x3a4>)
 8006536:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800653a:	0112      	lsls	r2, r2, #4
 800653c:	0ad3      	lsrs	r3, r2, #11
 800653e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006546:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800654a:	bf28      	it	cs
 800654c:	3301      	addcs	r3, #1
 800654e:	b29b      	uxth	r3, r3
 8006550:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8006554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800655e:	2202      	movs	r2, #2
 8006560:	49ac      	ldr	r1, [pc, #688]	; (8006814 <ull_configure+0x3a8>)
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff fe48 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006568:	2394      	movs	r3, #148	; 0x94
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	4baa      	ldr	r3, [pc, #680]	; (8006818 <ull_configure+0x3ac>)
 800656e:	2200      	movs	r2, #0
 8006570:	49aa      	ldr	r1, [pc, #680]	; (800681c <ull_configure+0x3b0>)
 8006572:	4620      	mov	r0, r4
 8006574:	f7ff faa4 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006578:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800657c:	f340 8108 	ble.w	8006790 <ull_configure+0x324>
 8006580:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006582:	8a53      	ldrh	r3, [r2, #18]
 8006584:	f043 0320 	orr.w	r3, r3, #32
 8006588:	8253      	strh	r3, [r2, #18]
 800658a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8006594:	2200      	movs	r2, #0
 8006596:	49a2      	ldr	r1, [pc, #648]	; (8006820 <ull_configure+0x3b4>)
 8006598:	4620      	mov	r0, r4
 800659a:	f7ff fe2d 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800659e:	7b6b      	ldrb	r3, [r5, #13]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f000 8100 	beq.w	80067a6 <ull_configure+0x33a>
 80065a6:	78ab      	ldrb	r3, [r5, #2]
 80065a8:	f043 0310 	orr.w	r3, r3, #16
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	23fc      	movs	r3, #252	; 0xfc
 80065b0:	2200      	movs	r2, #0
 80065b2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff fc6c 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80065bc:	1e73      	subs	r3, r6, #1
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80065c6:	4620      	mov	r0, r4
 80065c8:	f7fe fd95 	bl	80050f6 <dwt_write8bitoffsetreg>
 80065cc:	786b      	ldrb	r3, [r5, #1]
 80065ce:	2b07      	cmp	r3, #7
 80065d0:	bf0c      	ite	eq
 80065d2:	2308      	moveq	r3, #8
 80065d4:	2300      	movne	r3, #0
 80065d6:	2201      	movs	r2, #1
 80065d8:	2128      	movs	r1, #40	; 0x28
 80065da:	4620      	mov	r0, r4
 80065dc:	f7fe fd8b 	bl	80050f6 <dwt_write8bitoffsetreg>
 80065e0:	4b90      	ldr	r3, [pc, #576]	; (8006824 <ull_configure+0x3b8>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	4990      	ldr	r1, [pc, #576]	; (8006828 <ull_configure+0x3bc>)
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7fe fed8 	bl	800539c <dwt_write32bitoffsetreg>
 80065ec:	2200      	movs	r2, #0
 80065ee:	498f      	ldr	r1, [pc, #572]	; (800682c <ull_configure+0x3c0>)
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7fe f991 	bl	8004918 <dwt_read32bitoffsetreg>
 80065f6:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80065fa:	f020 001f 	bic.w	r0, r0, #31
 80065fe:	f1b9 0f09 	cmp.w	r9, #9
 8006602:	bf08      	it	eq
 8006604:	f040 0001 	orreq.w	r0, r0, #1
 8006608:	792a      	ldrb	r2, [r5, #4]
 800660a:	0212      	lsls	r2, r2, #8
 800660c:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8006610:	78eb      	ldrb	r3, [r5, #3]
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	b2db      	uxtb	r3, r3
 8006616:	431a      	orrs	r2, r3
 8006618:	796b      	ldrb	r3, [r5, #5]
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	f003 0306 	and.w	r3, r3, #6
 8006620:	4313      	orrs	r3, r2
 8006622:	4303      	orrs	r3, r0
 8006624:	2200      	movs	r2, #0
 8006626:	4981      	ldr	r1, [pc, #516]	; (800682c <ull_configure+0x3c0>)
 8006628:	4620      	mov	r0, r4
 800662a:	f7fe feb7 	bl	800539c <dwt_write32bitoffsetreg>
 800662e:	79aa      	ldrb	r2, [r5, #6]
 8006630:	786b      	ldrb	r3, [r5, #1]
 8006632:	031b      	lsls	r3, r3, #12
 8006634:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800663e:	2200      	movs	r2, #0
 8006640:	2124      	movs	r1, #36	; 0x24
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff fa3c 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006648:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800664c:	b923      	cbnz	r3, 8006658 <ull_configure+0x1ec>
 800664e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8006652:	726b      	strb	r3, [r5, #9]
 8006654:	2300      	movs	r3, #0
 8006656:	72ab      	strb	r3, [r5, #10]
 8006658:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800665c:	2202      	movs	r2, #2
 800665e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8006662:	4620      	mov	r0, r4
 8006664:	f7fe fd99 	bl	800519a <dwt_write16bitoffsetreg>
 8006668:	2202      	movs	r2, #2
 800666a:	4971      	ldr	r1, [pc, #452]	; (8006830 <ull_configure+0x3c4>)
 800666c:	4620      	mov	r0, r4
 800666e:	f7fe f97b 	bl	8004968 <dwt_read8bitoffsetreg>
 8006672:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006674:	7c1b      	ldrb	r3, [r3, #16]
 8006676:	454b      	cmp	r3, r9
 8006678:	f000 809f 	beq.w	80067ba <ull_configure+0x34e>
 800667c:	2803      	cmp	r0, #3
 800667e:	f000 80a0 	beq.w	80067c2 <ull_configure+0x356>
 8006682:	f1b9 0f09 	cmp.w	r9, #9
 8006686:	f000 80a1 	beq.w	80067cc <ull_configure+0x360>
 800668a:	4b6a      	ldr	r3, [pc, #424]	; (8006834 <ull_configure+0x3c8>)
 800668c:	2200      	movs	r2, #0
 800668e:	496a      	ldr	r1, [pc, #424]	; (8006838 <ull_configure+0x3cc>)
 8006690:	4620      	mov	r0, r4
 8006692:	f7fe fe83 	bl	800539c <dwt_write32bitoffsetreg>
 8006696:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800669a:	2200      	movs	r2, #0
 800669c:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7fe fd7a 	bl	800519a <dwt_write16bitoffsetreg>
 80066a6:	2314      	movs	r3, #20
 80066a8:	2201      	movs	r2, #1
 80066aa:	4964      	ldr	r1, [pc, #400]	; (800683c <ull_configure+0x3d0>)
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7fe fd22 	bl	80050f6 <dwt_write8bitoffsetreg>
 80066b2:	230e      	movs	r3, #14
 80066b4:	2202      	movs	r2, #2
 80066b6:	4962      	ldr	r1, [pc, #392]	; (8006840 <ull_configure+0x3d4>)
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7fe fd1c 	bl	80050f6 <dwt_write8bitoffsetreg>
 80066be:	2381      	movs	r3, #129	; 0x81
 80066c0:	2200      	movs	r2, #0
 80066c2:	4960      	ldr	r1, [pc, #384]	; (8006844 <ull_configure+0x3d8>)
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7fe fd16 	bl	80050f6 <dwt_write8bitoffsetreg>
 80066ca:	2302      	movs	r3, #2
 80066cc:	2200      	movs	r2, #0
 80066ce:	2144      	movs	r1, #68	; 0x44
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7fe fd10 	bl	80050f6 <dwt_write8bitoffsetreg>
 80066d6:	2101      	movs	r1, #1
 80066d8:	4620      	mov	r0, r4
 80066da:	f7ff fc99 	bl	8006010 <ull_setdwstate>
 80066de:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80066e2:	f04f 0814 	mov.w	r8, #20
 80066e6:	2700      	movs	r7, #0
 80066e8:	2644      	movs	r6, #68	; 0x44
 80066ea:	4640      	mov	r0, r8
 80066ec:	f7fa f8c3 	bl	8000876 <deca_usleep>
 80066f0:	463a      	mov	r2, r7
 80066f2:	4631      	mov	r1, r6
 80066f4:	4620      	mov	r0, r4
 80066f6:	f7fe f937 	bl	8004968 <dwt_read8bitoffsetreg>
 80066fa:	f010 0f02 	tst.w	r0, #2
 80066fe:	f040 80ab 	bne.w	8006858 <ull_configure+0x3ec>
 8006702:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006706:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800670a:	d1ee      	bne.n	80066ea <ull_configure+0x27e>
 800670c:	f06f 0001 	mvn.w	r0, #1
 8006710:	e0cf      	b.n	80068b2 <ull_configure+0x446>
 8006712:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006714:	8a53      	ldrh	r3, [r2, #18]
 8006716:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800671a:	8253      	strh	r3, [r2, #18]
 800671c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006726:	2200      	movs	r2, #0
 8006728:	493d      	ldr	r1, [pc, #244]	; (8006820 <ull_configure+0x3b4>)
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff f9c8 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006730:	f240 3306 	movw	r3, #774	; 0x306
 8006734:	2200      	movs	r2, #0
 8006736:	4944      	ldr	r1, [pc, #272]	; (8006848 <ull_configure+0x3dc>)
 8006738:	4620      	mov	r0, r4
 800673a:	f7fe fe2f 	bl	800539c <dwt_write32bitoffsetreg>
 800673e:	2300      	movs	r3, #0
 8006740:	461a      	mov	r2, r3
 8006742:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 8006746:	4620      	mov	r0, r4
 8006748:	f7fe fe28 	bl	800539c <dwt_write32bitoffsetreg>
 800674c:	4b3f      	ldr	r3, [pc, #252]	; (800684c <ull_configure+0x3e0>)
 800674e:	2200      	movs	r2, #0
 8006750:	4930      	ldr	r1, [pc, #192]	; (8006814 <ull_configure+0x3a8>)
 8006752:	4620      	mov	r0, r4
 8006754:	f7fe fe22 	bl	800539c <dwt_write32bitoffsetreg>
 8006758:	239d      	movs	r3, #157	; 0x9d
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4b2e      	ldr	r3, [pc, #184]	; (8006818 <ull_configure+0x3ac>)
 800675e:	2200      	movs	r2, #0
 8006760:	492e      	ldr	r1, [pc, #184]	; (800681c <ull_configure+0x3b0>)
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff f9ac 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006768:	e719      	b.n	800659e <ull_configure+0x132>
 800676a:	7b2a      	ldrb	r2, [r5, #12]
 800676c:	4b28      	ldr	r3, [pc, #160]	; (8006810 <ull_configure+0x3a4>)
 800676e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006772:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8006776:	fb02 f203 	mul.w	r2, r2, r3
 800677a:	0c93      	lsrs	r3, r2, #18
 800677c:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8006780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006784:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006788:	bf28      	it	cs
 800678a:	3301      	addcs	r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	e6df      	b.n	8006550 <ull_configure+0xe4>
 8006790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800679a:	2200      	movs	r2, #0
 800679c:	4920      	ldr	r1, [pc, #128]	; (8006820 <ull_configure+0x3b4>)
 800679e:	4620      	mov	r0, r4
 80067a0:	f7ff fd2a 	bl	80061f8 <dwt_modify16bitoffsetreg>
 80067a4:	e6fb      	b.n	800659e <ull_configure+0x132>
 80067a6:	78ab      	ldrb	r3, [r5, #2]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	23ec      	movs	r3, #236	; 0xec
 80067ac:	2200      	movs	r2, #0
 80067ae:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80067b2:	4620      	mov	r0, r4
 80067b4:	f7ff fb6e 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80067b8:	e700      	b.n	80065bc <ull_configure+0x150>
 80067ba:	2803      	cmp	r0, #3
 80067bc:	f47f af61 	bne.w	8006682 <ull_configure+0x216>
 80067c0:	e04d      	b.n	800685e <ull_configure+0x3f2>
 80067c2:	2102      	movs	r1, #2
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7ff fc23 	bl	8006010 <ull_setdwstate>
 80067ca:	e75a      	b.n	8006682 <ull_configure+0x216>
 80067cc:	4b20      	ldr	r3, [pc, #128]	; (8006850 <ull_configure+0x3e4>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	4919      	ldr	r1, [pc, #100]	; (8006838 <ull_configure+0x3cc>)
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7fe fde2 	bl	800539c <dwt_write32bitoffsetreg>
 80067d8:	f640 733c 	movw	r3, #3900	; 0xf3c
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7fe fcd9 	bl	800519a <dwt_write16bitoffsetreg>
 80067e8:	e75d      	b.n	80066a6 <ull_configure+0x23a>
 80067ea:	fa4f f189 	sxtb.w	r1, r9
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7ff f98a 	bl	8005b08 <_dwt_kick_dgc_on_wakeup>
 80067f4:	e040      	b.n	8006878 <ull_configure+0x40c>
 80067f6:	2200      	movs	r2, #0
 80067f8:	9200      	str	r2, [sp, #0]
 80067fa:	23fe      	movs	r3, #254	; 0xfe
 80067fc:	4915      	ldr	r1, [pc, #84]	; (8006854 <ull_configure+0x3e8>)
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff fb48 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8006804:	e042      	b.n	800688c <ull_configure+0x420>
 8006806:	bf00      	nop
 8006808:	00026668 	.word	0x00026668
 800680c:	fffc4fcf 	.word	0xfffc4fcf
 8006810:	0801202c 	.word	0x0801202c
 8006814:	000e0012 	.word	0x000e0012
 8006818:	bfffff00 	.word	0xbfffff00
 800681c:	000e0016 	.word	0x000e0016
 8006820:	000b0008 	.word	0x000b0008
 8006824:	af5f35cc 	.word	0xaf5f35cc
 8006828:	0006000c 	.word	0x0006000c
 800682c:	00010014 	.word	0x00010014
 8006830:	000f0030 	.word	0x000f0030
 8006834:	1c071134 	.word	0x1c071134
 8006838:	0007001c 	.word	0x0007001c
 800683c:	00070050 	.word	0x00070050
 8006840:	00070018 	.word	0x00070018
 8006844:	00090008 	.word	0x00090008
 8006848:	000e000c 	.word	0x000e000c
 800684c:	000c5a0a 	.word	0x000c5a0a
 8006850:	1c010034 	.word	0x1c010034
 8006854:	00030018 	.word	0x00030018
 8006858:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800685a:	f883 9010 	strb.w	r9, [r3, #16]
 800685e:	792b      	ldrb	r3, [r5, #4]
 8006860:	3b09      	subs	r3, #9
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b0f      	cmp	r3, #15
 8006866:	d8c6      	bhi.n	80067f6 <ull_configure+0x38a>
 8006868:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800686a:	7a5b      	ldrb	r3, [r3, #9]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d0bc      	beq.n	80067ea <ull_configure+0x37e>
 8006870:	4649      	mov	r1, r9
 8006872:	4620      	mov	r0, r4
 8006874:	f7fe ffae 	bl	80057d4 <ull_configmrxlut>
 8006878:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8006882:	2200      	movs	r2, #0
 8006884:	490c      	ldr	r1, [pc, #48]	; (80068b8 <ull_configure+0x44c>)
 8006886:	4620      	mov	r0, r4
 8006888:	f7ff fcb6 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800688c:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8006890:	bfcc      	ite	gt
 8006892:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8006896:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80068a0:	2200      	movs	r2, #0
 80068a2:	4906      	ldr	r1, [pc, #24]	; (80068bc <ull_configure+0x450>)
 80068a4:	4620      	mov	r0, r4
 80068a6:	f7ff f90b 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 80068aa:	2101      	movs	r1, #1
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7ff fd27 	bl	8006300 <ull_pgf_cal>
 80068b2:	b003      	add	sp, #12
 80068b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b8:	00030018 	.word	0x00030018
 80068bc:	00060010 	.word	0x00060010

080068c0 <dwt_ioctl>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	b091      	sub	sp, #68	; 0x44
 80068c6:	4606      	mov	r6, r0
 80068c8:	4615      	mov	r5, r2
 80068ca:	461c      	mov	r4, r3
 80068cc:	299c      	cmp	r1, #156	; 0x9c
 80068ce:	f200 809f 	bhi.w	8006a10 <dwt_ioctl+0x150>
 80068d2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80068d6:	0a6d      	.short	0x0a6d
 80068d8:	00a30a78 	.word	0x00a30a78
 80068dc:	00be00a7 	.word	0x00be00a7
 80068e0:	018e0148 	.word	0x018e0148
 80068e4:	0152016b 	.word	0x0152016b
 80068e8:	01a9019e 	.word	0x01a9019e
 80068ec:	01b901b1 	.word	0x01b901b1
 80068f0:	01c901c1 	.word	0x01c901c1
 80068f4:	01d501d1 	.word	0x01d501d1
 80068f8:	026e01dd 	.word	0x026e01dd
 80068fc:	0281027c 	.word	0x0281027c
 8006900:	0290028b 	.word	0x0290028b
 8006904:	029e0295 	.word	0x029e0295
 8006908:	030902a3 	.word	0x030902a3
 800690c:	0326031b 	.word	0x0326031b
 8006910:	033b0331 	.word	0x033b0331
 8006914:	03690373 	.word	0x03690373
 8006918:	0345035f 	.word	0x0345035f
 800691c:	03c10352 	.word	0x03c10352
 8006920:	022b01f8 	.word	0x022b01f8
 8006924:	02410239 	.word	0x02410239
 8006928:	09960255 	.word	0x09960255
 800692c:	0382099b 	.word	0x0382099b
 8006930:	03e303df 	.word	0x03e303df
 8006934:	03f103ec 	.word	0x03f103ec
 8006938:	040503fb 	.word	0x040503fb
 800693c:	0437040d 	.word	0x0437040d
 8006940:	044e0443 	.word	0x044e0443
 8006944:	04590378 	.word	0x04590378
 8006948:	04740462 	.word	0x04740462
 800694c:	049e048d 	.word	0x049e048d
 8006950:	04ea04e0 	.word	0x04ea04e0
 8006954:	051a050b 	.word	0x051a050b
 8006958:	05230535 	.word	0x05230535
 800695c:	05970551 	.word	0x05970551
 8006960:	05cf05af 	.word	0x05cf05af
 8006964:	05f805e4 	.word	0x05f805e4
 8006968:	061d0601 	.word	0x061d0601
 800696c:	0773060a 	.word	0x0773060a
 8006970:	07ed079f 	.word	0x07ed079f
 8006974:	07fe07f3 	.word	0x07fe07f3
 8006978:	08370817 	.word	0x08370817
 800697c:	084b0841 	.word	0x084b0841
 8006980:	08820879 	.word	0x08820879
 8006984:	08910888 	.word	0x08910888
 8006988:	08ab089e 	.word	0x08ab089e
 800698c:	08be08b5 	.word	0x08be08b5
 8006990:	08d208c7 	.word	0x08d208c7
 8006994:	08e308dd 	.word	0x08e308dd
 8006998:	09110906 	.word	0x09110906
 800699c:	0945091c 	.word	0x0945091c
 80069a0:	09720967 	.word	0x09720967
 80069a4:	09a1098b 	.word	0x09a1098b
 80069a8:	0a200a16 	.word	0x0a200a16
 80069ac:	0a800a2b 	.word	0x0a800a2b
 80069b0:	0a620a35 	.word	0x0a620a35
 80069b4:	09df0791 	.word	0x09df0791
 80069b8:	0aee0a00 	.word	0x0aee0a00
 80069bc:	0a8d0ae3 	.word	0x0a8d0ae3
 80069c0:	0aa30a98 	.word	0x0aa30a98
 80069c4:	0ab90aae 	.word	0x0ab90aae
 80069c8:	0acf0ac4 	.word	0x0acf0ac4
 80069cc:	0bd80ad8 	.word	0x0bd80ad8
 80069d0:	0c4d0c12 	.word	0x0c4d0c12
 80069d4:	0d290c70 	.word	0x0d290c70
 80069d8:	0b190d3e 	.word	0x0b190d3e
 80069dc:	009d009d 	.word	0x009d009d
 80069e0:	009d009d 	.word	0x009d009d
 80069e4:	009d009d 	.word	0x009d009d
 80069e8:	009d009d 	.word	0x009d009d
 80069ec:	009d009d 	.word	0x009d009d
 80069f0:	009d009d 	.word	0x009d009d
 80069f4:	009d009d 	.word	0x009d009d
 80069f8:	009d009d 	.word	0x009d009d
 80069fc:	009d009d 	.word	0x009d009d
 8006a00:	0c87009d 	.word	0x0c87009d
 8006a04:	0dce0ca5 	.word	0x0dce0ca5
 8006a08:	0ce40cef 	.word	0x0ce40cef
 8006a0c:	0cfa0d03 	.word	0x0cfa0d03
 8006a10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a14:	4628      	mov	r0, r5
 8006a16:	b011      	add	sp, #68	; 0x44
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	6843      	ldr	r3, [r0, #4]
 8006a1e:	4798      	blx	r3
 8006a20:	2500      	movs	r5, #0
 8006a22:	e7f7      	b.n	8006a14 <dwt_ioctl+0x154>
 8006a24:	2202      	movs	r2, #2
 8006a26:	49b7      	ldr	r1, [pc, #732]	; (8006d04 <dwt_ioctl+0x444>)
 8006a28:	f7fd ff9e 	bl	8004968 <dwt_read8bitoffsetreg>
 8006a2c:	2803      	cmp	r0, #3
 8006a2e:	d801      	bhi.n	8006a34 <dwt_ioctl+0x174>
 8006a30:	2500      	movs	r5, #0
 8006a32:	e7ef      	b.n	8006a14 <dwt_ioctl+0x154>
 8006a34:	f7f9 fef6 	bl	8000824 <decamutexon>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	2500      	movs	r5, #0
 8006a3c:	9500      	str	r5, [sp, #0]
 8006a3e:	462b      	mov	r3, r5
 8006a40:	462a      	mov	r2, r5
 8006a42:	4629      	mov	r1, r5
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7fe fb4b 	bl	80050e0 <dwt_writetodevice>
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7f9 fefb 	bl	8000846 <decamutexoff>
 8006a50:	e7e0      	b.n	8006a14 <dwt_ioctl+0x154>
 8006a52:	2c00      	cmp	r4, #0
 8006a54:	f001 8510 	beq.w	8008478 <dwt_ioctl+0x1bb8>
 8006a58:	7824      	ldrb	r4, [r4, #0]
 8006a5a:	f014 0f1d 	tst.w	r4, #29
 8006a5e:	d065      	beq.n	8006b2c <dwt_ioctl+0x26c>
 8006a60:	f014 0f01 	tst.w	r4, #1
 8006a64:	d026      	beq.n	8006ab4 <dwt_ioctl+0x1f4>
 8006a66:	f014 0f02 	tst.w	r4, #2
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	9200      	str	r2, [sp, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	bf14      	ite	ne
 8006a74:	210d      	movne	r1, #13
 8006a76:	2103      	moveq	r1, #3
 8006a78:	f7fe fb32 	bl	80050e0 <dwt_writetodevice>
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	2144      	movs	r1, #68	; 0x44
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7fd ff71 	bl	8004968 <dwt_read8bitoffsetreg>
 8006a86:	f010 0f08 	tst.w	r0, #8
 8006a8a:	d145      	bne.n	8006b18 <dwt_ioctl+0x258>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	499d      	ldr	r1, [pc, #628]	; (8006d04 <dwt_ioctl+0x444>)
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7fd ff41 	bl	8004918 <dwt_read32bitoffsetreg>
 8006a96:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8006a9a:	bf18      	it	ne
 8006a9c:	2500      	movne	r5, #0
 8006a9e:	d1b9      	bne.n	8006a14 <dwt_ioctl+0x154>
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	9100      	str	r1, [sp, #0]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	460a      	mov	r2, r1
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7fe fb19 	bl	80050e0 <dwt_writetodevice>
 8006aae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ab2:	e7af      	b.n	8006a14 <dwt_ioctl+0x154>
 8006ab4:	f014 0f08 	tst.w	r4, #8
 8006ab8:	d10e      	bne.n	8006ad8 <dwt_ioctl+0x218>
 8006aba:	f014 0f10 	tst.w	r4, #16
 8006abe:	d11b      	bne.n	8006af8 <dwt_ioctl+0x238>
 8006ac0:	f014 0f02 	tst.w	r4, #2
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	9200      	str	r2, [sp, #0]
 8006aca:	4613      	mov	r3, r2
 8006acc:	bf14      	ite	ne
 8006ace:	2110      	movne	r1, #16
 8006ad0:	2109      	moveq	r1, #9
 8006ad2:	f7fe fb05 	bl	80050e0 <dwt_writetodevice>
 8006ad6:	e7d1      	b.n	8006a7c <dwt_ioctl+0x1bc>
 8006ad8:	2100      	movs	r1, #0
 8006ada:	f7fe fdd3 	bl	8005684 <_dwt_adjust_delaytime>
 8006ade:	f014 0f02 	tst.w	r4, #2
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	9200      	str	r2, [sp, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	bf14      	ite	ne
 8006aec:	210f      	movne	r1, #15
 8006aee:	2107      	moveq	r1, #7
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7fe faf5 	bl	80050e0 <dwt_writetodevice>
 8006af6:	e7c1      	b.n	8006a7c <dwt_ioctl+0x1bc>
 8006af8:	2101      	movs	r1, #1
 8006afa:	f7fe fdc3 	bl	8005684 <_dwt_adjust_delaytime>
 8006afe:	f014 0f02 	tst.w	r4, #2
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	bf14      	ite	ne
 8006b0c:	210e      	movne	r1, #14
 8006b0e:	2105      	moveq	r1, #5
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7fe fae5 	bl	80050e0 <dwt_writetodevice>
 8006b16:	e7b1      	b.n	8006a7c <dwt_ioctl+0x1bc>
 8006b18:	2100      	movs	r1, #0
 8006b1a:	9100      	str	r1, [sp, #0]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	460a      	mov	r2, r1
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7fe fadd 	bl	80050e0 <dwt_writetodevice>
 8006b26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b2a:	e773      	b.n	8006a14 <dwt_ioctl+0x154>
 8006b2c:	f014 0f20 	tst.w	r4, #32
 8006b30:	d00c      	beq.n	8006b4c <dwt_ioctl+0x28c>
 8006b32:	f014 0f02 	tst.w	r4, #2
 8006b36:	f04f 0500 	mov.w	r5, #0
 8006b3a:	9500      	str	r5, [sp, #0]
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	462a      	mov	r2, r5
 8006b40:	bf14      	ite	ne
 8006b42:	2111      	movne	r1, #17
 8006b44:	210b      	moveq	r1, #11
 8006b46:	f7fe facb 	bl	80050e0 <dwt_writetodevice>
 8006b4a:	e763      	b.n	8006a14 <dwt_ioctl+0x154>
 8006b4c:	f014 0f02 	tst.w	r4, #2
 8006b50:	f04f 0500 	mov.w	r5, #0
 8006b54:	9500      	str	r5, [sp, #0]
 8006b56:	462b      	mov	r3, r5
 8006b58:	462a      	mov	r2, r5
 8006b5a:	bf14      	ite	ne
 8006b5c:	210c      	movne	r1, #12
 8006b5e:	2101      	moveq	r1, #1
 8006b60:	f7fe fabe 	bl	80050e0 <dwt_writetodevice>
 8006b64:	e756      	b.n	8006a14 <dwt_ioctl+0x154>
 8006b66:	2c00      	cmp	r4, #0
 8006b68:	f001 8489 	beq.w	800847e <dwt_ioctl+0x1bbe>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	212c      	movs	r1, #44	; 0x2c
 8006b72:	f7fe fc13 	bl	800539c <dwt_write32bitoffsetreg>
 8006b76:	2500      	movs	r5, #0
 8006b78:	e74c      	b.n	8006a14 <dwt_ioctl+0x154>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4962      	ldr	r1, [pc, #392]	; (8006d08 <dwt_ioctl+0x448>)
 8006b80:	f7fe fc0c 	bl	800539c <dwt_write32bitoffsetreg>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	4960      	ldr	r1, [pc, #384]	; (8006d0c <dwt_ioctl+0x44c>)
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7fe fc06 	bl	800539c <dwt_write32bitoffsetreg>
 8006b90:	68a3      	ldr	r3, [r4, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	495e      	ldr	r1, [pc, #376]	; (8006d10 <dwt_ioctl+0x450>)
 8006b96:	4630      	mov	r0, r6
 8006b98:	f7fe fc00 	bl	800539c <dwt_write32bitoffsetreg>
 8006b9c:	68e3      	ldr	r3, [r4, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	495c      	ldr	r1, [pc, #368]	; (8006d14 <dwt_ioctl+0x454>)
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f7fe fbfa 	bl	800539c <dwt_write32bitoffsetreg>
 8006ba8:	2500      	movs	r5, #0
 8006baa:	e733      	b.n	8006a14 <dwt_ioctl+0x154>
 8006bac:	2c00      	cmp	r4, #0
 8006bae:	f001 8469 	beq.w	8008484 <dwt_ioctl+0x1bc4>
 8006bb2:	8823      	ldrh	r3, [r4, #0]
 8006bb4:	6865      	ldr	r5, [r4, #4]
 8006bb6:	2d03      	cmp	r5, #3
 8006bb8:	f201 8467 	bhi.w	800848a <dwt_ioctl+0x1bca>
 8006bbc:	e8df f005 	tbb	[pc, r5]
 8006bc0:	130d0702 	.word	0x130d0702
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4954      	ldr	r1, [pc, #336]	; (8006d18 <dwt_ioctl+0x458>)
 8006bc8:	f7fe fae7 	bl	800519a <dwt_write16bitoffsetreg>
 8006bcc:	e722      	b.n	8006a14 <dwt_ioctl+0x154>
 8006bce:	2202      	movs	r2, #2
 8006bd0:	4951      	ldr	r1, [pc, #324]	; (8006d18 <dwt_ioctl+0x458>)
 8006bd2:	f7fe fae2 	bl	800519a <dwt_write16bitoffsetreg>
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	e71c      	b.n	8006a14 <dwt_ioctl+0x154>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	494f      	ldr	r1, [pc, #316]	; (8006d1c <dwt_ioctl+0x45c>)
 8006bde:	f7fe fadc 	bl	800519a <dwt_write16bitoffsetreg>
 8006be2:	2500      	movs	r5, #0
 8006be4:	e716      	b.n	8006a14 <dwt_ioctl+0x154>
 8006be6:	2202      	movs	r2, #2
 8006be8:	494c      	ldr	r1, [pc, #304]	; (8006d1c <dwt_ioctl+0x45c>)
 8006bea:	f7fe fad6 	bl	800519a <dwt_write16bitoffsetreg>
 8006bee:	2500      	movs	r5, #0
 8006bf0:	e710      	b.n	8006a14 <dwt_ioctl+0x154>
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	f001 844c 	beq.w	8008490 <dwt_ioctl+0x1bd0>
 8006bf8:	7823      	ldrb	r3, [r4, #0]
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	f003 0306 	and.w	r3, r3, #6
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	f06f 0306 	mvn.w	r3, #6
 8006c06:	2200      	movs	r2, #0
 8006c08:	4945      	ldr	r1, [pc, #276]	; (8006d20 <dwt_ioctl+0x460>)
 8006c0a:	f7fe ff59 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	e700      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4941      	ldr	r1, [pc, #260]	; (8006d24 <dwt_ioctl+0x464>)
 8006c20:	f7fe ff4e 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006c24:	2500      	movs	r5, #0
 8006c26:	e6f5      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c28:	2c00      	cmp	r4, #0
 8006c2a:	f001 8434 	beq.w	8008496 <dwt_ioctl+0x1bd6>
 8006c2e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c30:	7b5b      	ldrb	r3, [r3, #13]
 8006c32:	7023      	strb	r3, [r4, #0]
 8006c34:	2500      	movs	r5, #0
 8006c36:	e6ed      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c38:	2c00      	cmp	r4, #0
 8006c3a:	f001 842f 	beq.w	800849c <dwt_ioctl+0x1bdc>
 8006c3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c40:	7a9b      	ldrb	r3, [r3, #10]
 8006c42:	7023      	strb	r3, [r4, #0]
 8006c44:	2500      	movs	r5, #0
 8006c46:	e6e5      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c48:	2c00      	cmp	r4, #0
 8006c4a:	f001 842a 	beq.w	80084a2 <dwt_ioctl+0x1be2>
 8006c4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c50:	7adb      	ldrb	r3, [r3, #11]
 8006c52:	7023      	strb	r3, [r4, #0]
 8006c54:	2500      	movs	r5, #0
 8006c56:	e6dd      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c58:	2c00      	cmp	r4, #0
 8006c5a:	f001 8425 	beq.w	80084a8 <dwt_ioctl+0x1be8>
 8006c5e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	2500      	movs	r5, #0
 8006c66:	e6d5      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c68:	2c00      	cmp	r4, #0
 8006c6a:	f001 8420 	beq.w	80084ae <dwt_ioctl+0x1bee>
 8006c6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	2500      	movs	r5, #0
 8006c76:	e6cd      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c78:	f7fe fb7e 	bl	8005378 <ull_signal_rx_buff_free>
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	e6c9      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c80:	2c00      	cmp	r4, #0
 8006c82:	f001 8417 	beq.w	80084b4 <dwt_ioctl+0x1bf4>
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	f7fe fd24 	bl	80056d4 <ull_setrxaftertxdelay>
 8006c8c:	2500      	movs	r5, #0
 8006c8e:	e6c1      	b.n	8006a14 <dwt_ioctl+0x154>
 8006c90:	2c00      	cmp	r4, #0
 8006c92:	f001 8412 	beq.w	80084ba <dwt_ioctl+0x1bfa>
 8006c96:	7825      	ldrb	r5, [r4, #0]
 8006c98:	b15d      	cbz	r5, 8006cb2 <dwt_ioctl+0x3f2>
 8006c9a:	6864      	ldr	r4, [r4, #4]
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	23ff      	movs	r3, #255	; 0xff
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2110      	movs	r1, #16
 8006ca6:	f7ff f8f5 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8006caa:	2d02      	cmp	r5, #2
 8006cac:	d107      	bne.n	8006cbe <dwt_ioctl+0x3fe>
 8006cae:	60f4      	str	r4, [r6, #12]
 8006cb0:	e005      	b.n	8006cbe <dwt_ioctl+0x3fe>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	9200      	str	r2, [sp, #0]
 8006cb6:	23bf      	movs	r3, #191	; 0xbf
 8006cb8:	2110      	movs	r1, #16
 8006cba:	f7ff f8eb 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8006cbe:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006cc0:	759d      	strb	r5, [r3, #22]
 8006cc2:	2500      	movs	r5, #0
 8006cc4:	e6a6      	b.n	8006a14 <dwt_ioctl+0x154>
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	f001 83fa 	beq.w	80084c0 <dwt_ioctl+0x1c00>
 8006ccc:	6865      	ldr	r5, [r4, #4]
 8006cce:	7823      	ldrb	r3, [r4, #0]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	4915      	ldr	r1, [pc, #84]	; (8006d28 <dwt_ioctl+0x468>)
 8006cd4:	f7fe fa0f 	bl	80050f6 <dwt_write8bitoffsetreg>
 8006cd8:	b945      	cbnz	r5, 8006cec <dwt_ioctl+0x42c>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	9200      	str	r2, [sp, #0]
 8006cde:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8006ce2:	2110      	movs	r1, #16
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff fa87 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006cea:	e693      	b.n	8006a14 <dwt_ioctl+0x154>
 8006cec:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2110      	movs	r1, #16
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7fe fee0 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006d00:	2500      	movs	r5, #0
 8006d02:	e687      	b.n	8006a14 <dwt_ioctl+0x154>
 8006d04:	000f0030 	.word	0x000f0030
 8006d08:	00010054 	.word	0x00010054
 8006d0c:	00010058 	.word	0x00010058
 8006d10:	0001005c 	.word	0x0001005c
 8006d14:	00010060 	.word	0x00010060
 8006d18:	00010018 	.word	0x00010018
 8006d1c:	0001001c 	.word	0x0001001c
 8006d20:	00010014 	.word	0x00010014
 8006d24:	00110004 	.word	0x00110004
 8006d28:	00010008 	.word	0x00010008
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4611      	mov	r1, r2
 8006d30:	f7fd fdf2 	bl	8004918 <dwt_read32bitoffsetreg>
 8006d34:	68b2      	ldr	r2, [r6, #8]
 8006d36:	6813      	ldr	r3, [r2, #0]
 8006d38:	4043      	eors	r3, r0
 8006d3a:	6852      	ldr	r2, [r2, #4]
 8006d3c:	4213      	tst	r3, r2
 8006d3e:	bf14      	ite	ne
 8006d40:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8006d44:	2500      	moveq	r5, #0
 8006d46:	e665      	b.n	8006a14 <dwt_ioctl+0x154>
 8006d48:	2c00      	cmp	r4, #0
 8006d4a:	f001 83bc 	beq.w	80084c6 <dwt_ioctl+0x1c06>
 8006d4e:	7821      	ldrb	r1, [r4, #0]
 8006d50:	f7ff f8b4 	bl	8005ebc <ull_configciadiag>
 8006d54:	2500      	movs	r5, #0
 8006d56:	e65d      	b.n	8006a14 <dwt_ioctl+0x154>
 8006d58:	b93a      	cbnz	r2, 8006d6a <dwt_ioctl+0x4aa>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	9200      	str	r2, [sp, #0]
 8006d5e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8006d62:	49ae      	ldr	r1, [pc, #696]	; (800701c <dwt_ioctl+0x75c>)
 8006d64:	f7ff fa48 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006d68:	e654      	b.n	8006a14 <dwt_ioctl+0x154>
 8006d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d74:	2200      	movs	r2, #0
 8006d76:	49a9      	ldr	r1, [pc, #676]	; (800701c <dwt_ioctl+0x75c>)
 8006d78:	f7ff fa3e 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	e649      	b.n	8006a14 <dwt_ioctl+0x154>
 8006d80:	f002 0201 	and.w	r2, r2, #1
 8006d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d88:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	bf08      	it	eq
 8006d90:	460b      	moveq	r3, r1
 8006d92:	02d2      	lsls	r2, r2, #11
 8006d94:	f015 0f02 	tst.w	r5, #2
 8006d98:	bf12      	itee	ne
 8006d9a:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006da2:	b29b      	uxtheq	r3, r3
 8006da4:	9200      	str	r2, [sp, #0]
 8006da6:	2200      	movs	r2, #0
 8006da8:	499c      	ldr	r1, [pc, #624]	; (800701c <dwt_ioctl+0x75c>)
 8006daa:	f7ff fa25 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006dae:	2500      	movs	r5, #0
 8006db0:	e630      	b.n	8006a14 <dwt_ioctl+0x154>
 8006db2:	b92a      	cbnz	r2, 8006dc0 <dwt_ioctl+0x500>
 8006db4:	4b9a      	ldr	r3, [pc, #616]	; (8007020 <dwt_ioctl+0x760>)
 8006db6:	2202      	movs	r2, #2
 8006db8:	499a      	ldr	r1, [pc, #616]	; (8007024 <dwt_ioctl+0x764>)
 8006dba:	f7fe faef 	bl	800539c <dwt_write32bitoffsetreg>
 8006dbe:	e629      	b.n	8006a14 <dwt_ioctl+0x154>
 8006dc0:	4b99      	ldr	r3, [pc, #612]	; (8007028 <dwt_ioctl+0x768>)
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	4997      	ldr	r1, [pc, #604]	; (8007024 <dwt_ioctl+0x764>)
 8006dc6:	f7fe fae9 	bl	800539c <dwt_write32bitoffsetreg>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	e622      	b.n	8006a14 <dwt_ioctl+0x154>
 8006dce:	4611      	mov	r1, r2
 8006dd0:	f7fe fc96 	bl	8005700 <ull_setlnapamode>
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	e61d      	b.n	8006a14 <dwt_ioctl+0x154>
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	f001 8377 	beq.w	80084cc <dwt_ioctl+0x1c0c>
 8006dde:	2200      	movs	r2, #0
 8006de0:	4992      	ldr	r1, [pc, #584]	; (800702c <dwt_ioctl+0x76c>)
 8006de2:	f7fd fdc1 	bl	8004968 <dwt_read8bitoffsetreg>
 8006de6:	7020      	strb	r0, [r4, #0]
 8006de8:	2500      	movs	r5, #0
 8006dea:	e613      	b.n	8006a14 <dwt_ioctl+0x154>
 8006dec:	4621      	mov	r1, r4
 8006dee:	f7fe fca9 	bl	8005744 <ull_configurestskey>
 8006df2:	2500      	movs	r5, #0
 8006df4:	e60e      	b.n	8006a14 <dwt_ioctl+0x154>
 8006df6:	4621      	mov	r1, r4
 8006df8:	f7fe fcc8 	bl	800578c <ull_configurestsiv>
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	e609      	b.n	8006a14 <dwt_ioctl+0x154>
 8006e00:	2301      	movs	r3, #1
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	23ff      	movs	r3, #255	; 0xff
 8006e06:	2200      	movs	r2, #0
 8006e08:	4989      	ldr	r1, [pc, #548]	; (8007030 <dwt_ioctl+0x770>)
 8006e0a:	f7ff f843 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8006e0e:	2500      	movs	r5, #0
 8006e10:	e600      	b.n	8006a14 <dwt_ioctl+0x154>
 8006e12:	4611      	mov	r1, r2
 8006e14:	f7fe fcde 	bl	80057d4 <ull_configmrxlut>
 8006e18:	2500      	movs	r5, #0
 8006e1a:	e5fb      	b.n	8006a14 <dwt_ioctl+0x154>
 8006e1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e1e:	7a1b      	ldrb	r3, [r3, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d137      	bne.n	8006e94 <dwt_ioctl+0x5d4>
 8006e24:	2314      	movs	r3, #20
 8006e26:	2201      	movs	r2, #1
 8006e28:	4982      	ldr	r1, [pc, #520]	; (8007034 <dwt_ioctl+0x774>)
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7fe f963 	bl	80050f6 <dwt_write8bitoffsetreg>
 8006e30:	2318      	movs	r3, #24
 8006e32:	2200      	movs	r2, #0
 8006e34:	4980      	ldr	r1, [pc, #512]	; (8007038 <dwt_ioctl+0x778>)
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7fe fab0 	bl	800539c <dwt_write32bitoffsetreg>
 8006e3c:	23e8      	movs	r3, #232	; 0xe8
 8006e3e:	2200      	movs	r2, #0
 8006e40:	497e      	ldr	r1, [pc, #504]	; (800703c <dwt_ioctl+0x77c>)
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7fe faaa 	bl	800539c <dwt_write32bitoffsetreg>
 8006e48:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006e4a:	8a5b      	ldrh	r3, [r3, #18]
 8006e4c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d022      	beq.n	8006e9a <dwt_ioctl+0x5da>
 8006e54:	2b60      	cmp	r3, #96	; 0x60
 8006e56:	d02b      	beq.n	8006eb0 <dwt_ioctl+0x5f0>
 8006e58:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006e5a:	7e1b      	ldrb	r3, [r3, #24]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	d032      	beq.n	8006ec6 <dwt_ioctl+0x606>
 8006e60:	2200      	movs	r2, #0
 8006e62:	4977      	ldr	r1, [pc, #476]	; (8007040 <dwt_ioctl+0x780>)
 8006e64:	4630      	mov	r0, r6
 8006e66:	f7fd fd6d 	bl	8004944 <dwt_read16bitoffsetreg>
 8006e6a:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8006e6e:	3b09      	subs	r3, #9
 8006e70:	2b0f      	cmp	r3, #15
 8006e72:	f201 832e 	bhi.w	80084d2 <dwt_ioctl+0x1c12>
 8006e76:	f000 0001 	and.w	r0, r0, #1
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	bf0c      	ite	eq
 8006e7e:	2105      	moveq	r1, #5
 8006e80:	2109      	movne	r1, #9
 8006e82:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006e84:	7a5b      	ldrb	r3, [r3, #9]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d029      	beq.n	8006ede <dwt_ioctl+0x61e>
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7fe fca2 	bl	80057d4 <ull_configmrxlut>
 8006e90:	2500      	movs	r5, #0
 8006e92:	e5bf      	b.n	8006a14 <dwt_ioctl+0x154>
 8006e94:	f7ff f9ca 	bl	800622c <_dwt_prog_ldo_and_bias_tune>
 8006e98:	e7c4      	b.n	8006e24 <dwt_ioctl+0x564>
 8006e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4967      	ldr	r1, [pc, #412]	; (8007044 <dwt_ioctl+0x784>)
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f7fe fe09 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006eae:	e7d3      	b.n	8006e58 <dwt_ioctl+0x598>
 8006eb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4961      	ldr	r1, [pc, #388]	; (8007044 <dwt_ioctl+0x784>)
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f7fe fdfe 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8006ec4:	e7c8      	b.n	8006e58 <dwt_ioctl+0x598>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	2200      	movs	r2, #0
 8006eca:	495f      	ldr	r1, [pc, #380]	; (8007048 <dwt_ioctl+0x788>)
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7fe f912 	bl	80050f6 <dwt_write8bitoffsetreg>
 8006ed2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8006ed4:	7e13      	ldrb	r3, [r2, #24]
 8006ed6:	f043 0302 	orr.w	r3, r3, #2
 8006eda:	7613      	strb	r3, [r2, #24]
 8006edc:	e7c0      	b.n	8006e60 <dwt_ioctl+0x5a0>
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7fe fe12 	bl	8005b08 <_dwt_kick_dgc_on_wakeup>
 8006ee4:	2500      	movs	r5, #0
 8006ee6:	e595      	b.n	8006a14 <dwt_ioctl+0x154>
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	f001 82f5 	beq.w	80084d8 <dwt_ioctl+0x1c18>
 8006eee:	7823      	ldrb	r3, [r4, #0]
 8006ef0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006ef2:	75d3      	strb	r3, [r2, #23]
 8006ef4:	031b      	lsls	r3, r3, #12
 8006ef6:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8006f00:	2200      	movs	r2, #0
 8006f02:	2110      	movs	r1, #16
 8006f04:	f7ff f978 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8006f08:	2500      	movs	r5, #0
 8006f0a:	e583      	b.n	8006a14 <dwt_ioctl+0x154>
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	f001 82e6 	beq.w	80084de <dwt_ioctl+0x1c1e>
 8006f12:	8823      	ldrh	r3, [r4, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006f1a:	f7fe f93e 	bl	800519a <dwt_write16bitoffsetreg>
 8006f1e:	2500      	movs	r5, #0
 8006f20:	e578      	b.n	8006a14 <dwt_ioctl+0x154>
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	f001 82de 	beq.w	80084e4 <dwt_ioctl+0x1c24>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006f2e:	f7fd fd09 	bl	8004944 <dwt_read16bitoffsetreg>
 8006f32:	8020      	strh	r0, [r4, #0]
 8006f34:	2500      	movs	r5, #0
 8006f36:	e56d      	b.n	8006a14 <dwt_ioctl+0x154>
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	f001 82d6 	beq.w	80084ea <dwt_ioctl+0x1c2a>
 8006f3e:	8823      	ldrh	r3, [r4, #0]
 8006f40:	2200      	movs	r2, #0
 8006f42:	4942      	ldr	r1, [pc, #264]	; (800704c <dwt_ioctl+0x78c>)
 8006f44:	f7fe f929 	bl	800519a <dwt_write16bitoffsetreg>
 8006f48:	2500      	movs	r5, #0
 8006f4a:	e563      	b.n	8006a14 <dwt_ioctl+0x154>
 8006f4c:	2c00      	cmp	r4, #0
 8006f4e:	f001 82cf 	beq.w	80084f0 <dwt_ioctl+0x1c30>
 8006f52:	2200      	movs	r2, #0
 8006f54:	493d      	ldr	r1, [pc, #244]	; (800704c <dwt_ioctl+0x78c>)
 8006f56:	f7fd fcf5 	bl	8004944 <dwt_read16bitoffsetreg>
 8006f5a:	8020      	strh	r0, [r4, #0]
 8006f5c:	2500      	movs	r5, #0
 8006f5e:	e559      	b.n	8006a14 <dwt_ioctl+0x154>
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	f001 82c8 	beq.w	80084f6 <dwt_ioctl+0x1c36>
 8006f66:	88a3      	ldrh	r3, [r4, #4]
 8006f68:	88e2      	ldrh	r2, [r4, #6]
 8006f6a:	6821      	ldr	r1, [r4, #0]
 8006f6c:	9100      	str	r1, [sp, #0]
 8006f6e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8006f72:	f7fe f8b5 	bl	80050e0 <dwt_writetodevice>
 8006f76:	2500      	movs	r5, #0
 8006f78:	e54c      	b.n	8006a14 <dwt_ioctl+0x154>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	f001 82be 	beq.w	80084fc <dwt_ioctl+0x1c3c>
 8006f80:	88a3      	ldrh	r3, [r4, #4]
 8006f82:	88e2      	ldrh	r2, [r4, #6]
 8006f84:	6821      	ldr	r1, [r4, #0]
 8006f86:	9100      	str	r1, [sp, #0]
 8006f88:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8006f8c:	f7fd fcba 	bl	8004904 <dwt_readfromdevice>
 8006f90:	2500      	movs	r5, #0
 8006f92:	e53f      	b.n	8006a14 <dwt_ioctl+0x154>
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	f001 82b4 	beq.w	8008502 <dwt_ioctl+0x1c42>
 8006f9a:	88e3      	ldrh	r3, [r4, #6]
 8006f9c:	88a2      	ldrh	r2, [r4, #4]
 8006f9e:	6821      	ldr	r1, [r4, #0]
 8006fa0:	f7fe fcc2 	bl	8005928 <ull_readrxdata>
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	e535      	b.n	8006a14 <dwt_ioctl+0x154>
 8006fa8:	2c00      	cmp	r4, #0
 8006faa:	f001 82ad 	beq.w	8008508 <dwt_ioctl+0x1c48>
 8006fae:	88e3      	ldrh	r3, [r4, #6]
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	88a1      	ldrh	r1, [r4, #4]
 8006fb4:	f7fe fd52 	bl	8005a5c <ull_writetxdata>
 8006fb8:	2500      	movs	r5, #0
 8006fba:	e52b      	b.n	8006a14 <dwt_ioctl+0x154>
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	f7fe fce9 	bl	8005994 <ull_rxenable>
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	e526      	b.n	8006a14 <dwt_ioctl+0x154>
 8006fc6:	2c00      	cmp	r4, #0
 8006fc8:	f001 82a1 	beq.w	800850e <dwt_ioctl+0x1c4e>
 8006fcc:	7923      	ldrb	r3, [r4, #4]
 8006fce:	8862      	ldrh	r2, [r4, #2]
 8006fd0:	8821      	ldrh	r1, [r4, #0]
 8006fd2:	f7fe ff2d 	bl	8005e30 <ull_writetxfctrl>
 8006fd6:	2500      	movs	r5, #0
 8006fd8:	e51c      	b.n	8006a14 <dwt_ioctl+0x154>
 8006fda:	2c00      	cmp	r4, #0
 8006fdc:	f001 829a 	beq.w	8008514 <dwt_ioctl+0x1c54>
 8006fe0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006fe2:	7bdb      	ldrb	r3, [r3, #15]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d00c      	beq.n	8007002 <dwt_ioctl+0x742>
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d110      	bne.n	800700e <dwt_ioctl+0x74e>
 8006fec:	220c      	movs	r2, #12
 8006fee:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8006ff2:	f7fd fca7 	bl	8004944 <dwt_read16bitoffsetreg>
 8006ff6:	b200      	sxth	r0, r0
 8006ff8:	f340 030c 	sbfx	r3, r0, #0, #13
 8006ffc:	8023      	strh	r3, [r4, #0]
 8006ffe:	2500      	movs	r5, #0
 8007000:	e508      	b.n	8006a14 <dwt_ioctl+0x154>
 8007002:	2200      	movs	r2, #0
 8007004:	4912      	ldr	r1, [pc, #72]	; (8007050 <dwt_ioctl+0x790>)
 8007006:	f7fd fc9d 	bl	8004944 <dwt_read16bitoffsetreg>
 800700a:	b200      	sxth	r0, r0
 800700c:	e7f4      	b.n	8006ff8 <dwt_ioctl+0x738>
 800700e:	2200      	movs	r2, #0
 8007010:	4910      	ldr	r1, [pc, #64]	; (8007054 <dwt_ioctl+0x794>)
 8007012:	f7fd fc97 	bl	8004944 <dwt_read16bitoffsetreg>
 8007016:	b200      	sxth	r0, r0
 8007018:	e7ee      	b.n	8006ff8 <dwt_ioctl+0x738>
 800701a:	bf00      	nop
 800701c:	00110008 	.word	0x00110008
 8007020:	00d20874 	.word	0x00d20874
 8007024:	00110010 	.word	0x00110010
 8007028:	04d28874 	.word	0x04d28874
 800702c:	0007001c 	.word	0x0007001c
 8007030:	00020004 	.word	0x00020004
 8007034:	00070050 	.word	0x00070050
 8007038:	001f000c 	.word	0x001f000c
 800703c:	001f0010 	.word	0x001f0010
 8007040:	00010014 	.word	0x00010014
 8007044:	000b0008 	.word	0x000b0008
 8007048:	00010028 	.word	0x00010028
 800704c:	00010004 	.word	0x00010004
 8007050:	0018000c 	.word	0x0018000c
 8007054:	000c0020 	.word	0x000c0020
 8007058:	2c00      	cmp	r4, #0
 800705a:	f001 825e 	beq.w	800851a <dwt_ioctl+0x1c5a>
 800705e:	ab0c      	add	r3, sp, #48	; 0x30
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	2303      	movs	r3, #3
 8007064:	2200      	movs	r2, #0
 8007066:	49bb      	ldr	r1, [pc, #748]	; (8007354 <dwt_ioctl+0xa94>)
 8007068:	f7fd fc4c 	bl	8004904 <dwt_readfromdevice>
 800706c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8007070:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8007074:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8007078:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800707c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007080:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007084:	bf1c      	itt	ne
 8007086:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800708a:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	2500      	movs	r5, #0
 8007092:	e4bf      	b.n	8006a14 <dwt_ioctl+0x154>
 8007094:	f7fe f892 	bl	80051bc <ull_clearaonconfig>
 8007098:	2500      	movs	r5, #0
 800709a:	e4bb      	b.n	8006a14 <dwt_ioctl+0x154>
 800709c:	2c00      	cmp	r4, #0
 800709e:	f001 823f 	beq.w	8008520 <dwt_ioctl+0x1c60>
 80070a2:	8861      	ldrh	r1, [r4, #2]
 80070a4:	f7fe ff40 	bl	8005f28 <ull_calcbandwidthadj>
 80070a8:	7020      	strb	r0, [r4, #0]
 80070aa:	2500      	movs	r5, #0
 80070ac:	e4b2      	b.n	8006a14 <dwt_ioctl+0x154>
 80070ae:	4621      	mov	r1, r4
 80070b0:	f7fd fc68 	bl	8004984 <ull_readdiagnostics>
 80070b4:	2500      	movs	r5, #0
 80070b6:	e4ad      	b.n	8006a14 <dwt_ioctl+0x154>
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	f001 8234 	beq.w	8008526 <dwt_ioctl+0x1c66>
 80070be:	2201      	movs	r2, #1
 80070c0:	2174      	movs	r1, #116	; 0x74
 80070c2:	f7fd fc29 	bl	8004918 <dwt_read32bitoffsetreg>
 80070c6:	6020      	str	r0, [r4, #0]
 80070c8:	2500      	movs	r5, #0
 80070ca:	e4a3      	b.n	8006a14 <dwt_ioctl+0x154>
 80070cc:	2c00      	cmp	r4, #0
 80070ce:	f001 822d 	beq.w	800852c <dwt_ioctl+0x1c6c>
 80070d2:	2200      	movs	r2, #0
 80070d4:	2174      	movs	r1, #116	; 0x74
 80070d6:	f7fd fc1f 	bl	8004918 <dwt_read32bitoffsetreg>
 80070da:	6020      	str	r0, [r4, #0]
 80070dc:	2500      	movs	r5, #0
 80070de:	e499      	b.n	8006a14 <dwt_ioctl+0x154>
 80070e0:	9400      	str	r4, [sp, #0]
 80070e2:	2305      	movs	r3, #5
 80070e4:	2200      	movs	r2, #0
 80070e6:	2174      	movs	r1, #116	; 0x74
 80070e8:	f7fd fc0c 	bl	8004904 <dwt_readfromdevice>
 80070ec:	2500      	movs	r5, #0
 80070ee:	e491      	b.n	8006a14 <dwt_ioctl+0x154>
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	f001 821e 	beq.w	8008532 <dwt_ioctl+0x1c72>
 80070f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80070f8:	7bdb      	ldrb	r3, [r3, #15]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d014      	beq.n	8007128 <dwt_ioctl+0x868>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d119      	bne.n	8007136 <dwt_ioctl+0x876>
 8007102:	2216      	movs	r2, #22
 8007104:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007108:	f7fd fc1c 	bl	8004944 <dwt_read16bitoffsetreg>
 800710c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007110:	b283      	uxth	r3, r0
 8007112:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007116:	d004      	beq.n	8007122 <dwt_ioctl+0x862>
 8007118:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800711c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8007120:	b218      	sxth	r0, r3
 8007122:	8020      	strh	r0, [r4, #0]
 8007124:	2500      	movs	r5, #0
 8007126:	e475      	b.n	8006a14 <dwt_ioctl+0x154>
 8007128:	2202      	movs	r2, #2
 800712a:	498b      	ldr	r1, [pc, #556]	; (8007358 <dwt_ioctl+0xa98>)
 800712c:	f7fd fc0a 	bl	8004944 <dwt_read16bitoffsetreg>
 8007130:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007134:	e7ec      	b.n	8007110 <dwt_ioctl+0x850>
 8007136:	2202      	movs	r2, #2
 8007138:	4988      	ldr	r1, [pc, #544]	; (800735c <dwt_ioctl+0xa9c>)
 800713a:	f7fd fc03 	bl	8004944 <dwt_read16bitoffsetreg>
 800713e:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007142:	e7e5      	b.n	8007110 <dwt_ioctl+0x850>
 8007144:	9400      	str	r4, [sp, #0]
 8007146:	2306      	movs	r3, #6
 8007148:	2200      	movs	r2, #0
 800714a:	4985      	ldr	r1, [pc, #532]	; (8007360 <dwt_ioctl+0xaa0>)
 800714c:	f7fd fbda 	bl	8004904 <dwt_readfromdevice>
 8007150:	7963      	ldrb	r3, [r4, #5]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	7163      	strb	r3, [r4, #5]
 8007158:	2500      	movs	r5, #0
 800715a:	e45b      	b.n	8006a14 <dwt_ioctl+0x154>
 800715c:	2c00      	cmp	r4, #0
 800715e:	f001 81eb 	beq.w	8008538 <dwt_ioctl+0x1c78>
 8007162:	2201      	movs	r2, #1
 8007164:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8007168:	f7fd fbfe 	bl	8004968 <dwt_read8bitoffsetreg>
 800716c:	7020      	strb	r0, [r4, #0]
 800716e:	2500      	movs	r5, #0
 8007170:	e450      	b.n	8006a14 <dwt_ioctl+0x154>
 8007172:	2c00      	cmp	r4, #0
 8007174:	f001 81e3 	beq.w	800853e <dwt_ioctl+0x1c7e>
 8007178:	2200      	movs	r2, #0
 800717a:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800717e:	f7fd fbf3 	bl	8004968 <dwt_read8bitoffsetreg>
 8007182:	7020      	strb	r0, [r4, #0]
 8007184:	2500      	movs	r5, #0
 8007186:	e445      	b.n	8006a14 <dwt_ioctl+0x154>
 8007188:	2c00      	cmp	r4, #0
 800718a:	f001 81db 	beq.w	8008544 <dwt_ioctl+0x1c84>
 800718e:	88a2      	ldrh	r2, [r4, #4]
 8007190:	6821      	ldr	r1, [r4, #0]
 8007192:	f7fe fd1d 	bl	8005bd0 <_dwt_otpprogword32>
 8007196:	2500      	movs	r5, #0
 8007198:	e43c      	b.n	8006a14 <dwt_ioctl+0x154>
 800719a:	2c00      	cmp	r4, #0
 800719c:	f001 81d5 	beq.w	800854a <dwt_ioctl+0x1c8a>
 80071a0:	6825      	ldr	r5, [r4, #0]
 80071a2:	88a4      	ldrh	r4, [r4, #4]
 80071a4:	4622      	mov	r2, r4
 80071a6:	4629      	mov	r1, r5
 80071a8:	f7fe fd12 	bl	8005bd0 <_dwt_otpprogword32>
 80071ac:	4621      	mov	r1, r4
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7fe f84e 	bl	8005250 <_dwt_otpread>
 80071b4:	1a2d      	subs	r5, r5, r0
 80071b6:	bf18      	it	ne
 80071b8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80071bc:	e42a      	b.n	8006a14 <dwt_ioctl+0x154>
 80071be:	2a02      	cmp	r2, #2
 80071c0:	d00e      	beq.n	80071e0 <dwt_ioctl+0x920>
 80071c2:	4c68      	ldr	r4, [pc, #416]	; (8007364 <dwt_ioctl+0xaa4>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	461a      	mov	r2, r3
 80071c8:	4621      	mov	r1, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7fd ff93 	bl	80050f6 <dwt_write8bitoffsetreg>
 80071d0:	2302      	movs	r3, #2
 80071d2:	2200      	movs	r2, #0
 80071d4:	4621      	mov	r1, r4
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7fd ff8d 	bl	80050f6 <dwt_write8bitoffsetreg>
 80071dc:	2500      	movs	r5, #0
 80071de:	e419      	b.n	8006a14 <dwt_ioctl+0x154>
 80071e0:	2300      	movs	r3, #0
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	23fe      	movs	r3, #254	; 0xfe
 80071e6:	2201      	movs	r2, #1
 80071e8:	495f      	ldr	r1, [pc, #380]	; (8007368 <dwt_ioctl+0xaa8>)
 80071ea:	f7fe fe53 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80071ee:	e7e8      	b.n	80071c2 <dwt_ioctl+0x902>
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	f001 81ad 	beq.w	8008550 <dwt_ioctl+0x1c90>
 80071f6:	8824      	ldrh	r4, [r4, #0]
 80071f8:	b2e2      	uxtb	r2, r4
 80071fa:	f44f 7181 	mov.w	r1, #258	; 0x102
 80071fe:	f7fe f869 	bl	80052d4 <ull_aon_write>
 8007202:	0a22      	lsrs	r2, r4, #8
 8007204:	f240 1103 	movw	r1, #259	; 0x103
 8007208:	4630      	mov	r0, r6
 800720a:	f7fe f863 	bl	80052d4 <ull_aon_write>
 800720e:	2500      	movs	r5, #0
 8007210:	e400      	b.n	8006a14 <dwt_ioctl+0x154>
 8007212:	2c00      	cmp	r4, #0
 8007214:	f001 819f 	beq.w	8008556 <dwt_ioctl+0x1c96>
 8007218:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8007374 <dwt_ioctl+0xab4>
 800721c:	2310      	movs	r3, #16
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	23ff      	movs	r3, #255	; 0xff
 8007222:	2200      	movs	r2, #0
 8007224:	4641      	mov	r1, r8
 8007226:	f7fe fe35 	bl	8005e94 <dwt_modify8bitoffsetreg>
 800722a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800722e:	4630      	mov	r0, r6
 8007230:	f7fe f830 	bl	8005294 <ull_aon_read>
 8007234:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8007238:	462a      	mov	r2, r5
 800723a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800723e:	4630      	mov	r0, r6
 8007240:	f7fe f848 	bl	80052d4 <ull_aon_write>
 8007244:	f045 0204 	orr.w	r2, r5, #4
 8007248:	f44f 7182 	mov.w	r1, #260	; 0x104
 800724c:	4630      	mov	r0, r6
 800724e:	f7fe f841 	bl	80052d4 <ull_aon_write>
 8007252:	2002      	movs	r0, #2
 8007254:	f7f9 fb04 	bl	8000860 <deca_sleep>
 8007258:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800725c:	4630      	mov	r0, r6
 800725e:	f7fe f819 	bl	8005294 <ull_aon_read>
 8007262:	4607      	mov	r7, r0
 8007264:	f240 110f 	movw	r1, #271	; 0x10f
 8007268:	4630      	mov	r0, r6
 800726a:	f7fe f813 	bl	8005294 <ull_aon_read>
 800726e:	4681      	mov	r9, r0
 8007270:	462a      	mov	r2, r5
 8007272:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007276:	4630      	mov	r0, r6
 8007278:	f7fe f82c 	bl	80052d4 <ull_aon_write>
 800727c:	2500      	movs	r5, #0
 800727e:	9500      	str	r5, [sp, #0]
 8007280:	23ef      	movs	r3, #239	; 0xef
 8007282:	462a      	mov	r2, r5
 8007284:	4641      	mov	r1, r8
 8007286:	4630      	mov	r0, r6
 8007288:	f7fe fe04 	bl	8005e94 <dwt_modify8bitoffsetreg>
 800728c:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8007290:	8027      	strh	r7, [r4, #0]
 8007292:	f7ff bbbf 	b.w	8006a14 <dwt_ioctl+0x154>
 8007296:	2c00      	cmp	r4, #0
 8007298:	f001 8160 	beq.w	800855c <dwt_ioctl+0x1c9c>
 800729c:	78a2      	ldrb	r2, [r4, #2]
 800729e:	8821      	ldrh	r1, [r4, #0]
 80072a0:	f7fe f840 	bl	8005324 <ull_configuresleep>
 80072a4:	2500      	movs	r5, #0
 80072a6:	f7ff bbb5 	b.w	8006a14 <dwt_ioctl+0x154>
 80072aa:	f7fd ff87 	bl	80051bc <ull_clearaonconfig>
 80072ae:	2001      	movs	r0, #1
 80072b0:	f7f9 fad6 	bl	8000860 <deca_sleep>
 80072b4:	2303      	movs	r3, #3
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	23ff      	movs	r3, #255	; 0xff
 80072ba:	2200      	movs	r2, #0
 80072bc:	492b      	ldr	r1, [pc, #172]	; (800736c <dwt_ioctl+0xaac>)
 80072be:	4630      	mov	r0, r6
 80072c0:	f7fe fde8 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80072c4:	2300      	movs	r3, #0
 80072c6:	461a      	mov	r2, r3
 80072c8:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7fd ff12 	bl	80050f6 <dwt_write8bitoffsetreg>
 80072d2:	2001      	movs	r0, #1
 80072d4:	f7f9 fac4 	bl	8000860 <deca_sleep>
 80072d8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80072da:	2500      	movs	r5, #0
 80072dc:	73dd      	strb	r5, [r3, #15]
 80072de:	2202      	movs	r2, #2
 80072e0:	825a      	strh	r2, [r3, #18]
 80072e2:	759d      	strb	r5, [r3, #22]
 80072e4:	75dd      	strb	r5, [r3, #23]
 80072e6:	741d      	strb	r5, [r3, #16]
 80072e8:	f7ff bb94 	b.w	8006a14 <dwt_ioctl+0x154>
 80072ec:	2c00      	cmp	r4, #0
 80072ee:	f001 8138 	beq.w	8008562 <dwt_ioctl+0x1ca2>
 80072f2:	7823      	ldrb	r3, [r4, #0]
 80072f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80072fa:	7393      	strb	r3, [r2, #14]
 80072fc:	2200      	movs	r2, #0
 80072fe:	491c      	ldr	r1, [pc, #112]	; (8007370 <dwt_ioctl+0xab0>)
 8007300:	f7fd fef9 	bl	80050f6 <dwt_write8bitoffsetreg>
 8007304:	2500      	movs	r5, #0
 8007306:	f7ff bb85 	b.w	8006a14 <dwt_ioctl+0x154>
 800730a:	2c00      	cmp	r4, #0
 800730c:	f001 812c 	beq.w	8008568 <dwt_ioctl+0x1ca8>
 8007310:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007312:	7b9b      	ldrb	r3, [r3, #14]
 8007314:	7023      	strb	r3, [r4, #0]
 8007316:	2500      	movs	r5, #0
 8007318:	f7ff bb7c 	b.w	8006a14 <dwt_ioctl+0x154>
 800731c:	2101      	movs	r1, #1
 800731e:	f7fe fc11 	bl	8005b44 <ull_enable_rf_tx>
 8007322:	4630      	mov	r0, r6
 8007324:	f7fe fc42 	bl	8005bac <ull_enable_rftx_blocks>
 8007328:	2101      	movs	r1, #1
 800732a:	4630      	mov	r0, r6
 800732c:	f7fd ff66 	bl	80051fc <ull_force_clocks>
 8007330:	220f      	movs	r2, #15
 8007332:	2101      	movs	r1, #1
 8007334:	4630      	mov	r0, r6
 8007336:	f7ff f86f 	bl	8006418 <ull_repeated_cw>
 800733a:	2500      	movs	r5, #0
 800733c:	f7ff bb6a 	b.w	8006a14 <dwt_ioctl+0x154>
 8007340:	2c00      	cmp	r4, #0
 8007342:	f001 8114 	beq.w	800856e <dwt_ioctl+0x1cae>
 8007346:	6862      	ldr	r2, [r4, #4]
 8007348:	6821      	ldr	r1, [r4, #0]
 800734a:	f7ff f865 	bl	8006418 <ull_repeated_cw>
 800734e:	2500      	movs	r5, #0
 8007350:	f7ff bb60 	b.w	8006a14 <dwt_ioctl+0x154>
 8007354:	00060029 	.word	0x00060029
 8007358:	00180014 	.word	0x00180014
 800735c:	000c001c 	.word	0x000c001c
 8007360:	000c0018 	.word	0x000c0018
 8007364:	000a0004 	.word	0x000a0004
 8007368:	00110008 	.word	0x00110008
 800736c:	00110004 	.word	0x00110004
 8007370:	00090014 	.word	0x00090014
 8007374:	00070048 	.word	0x00070048
 8007378:	2c00      	cmp	r4, #0
 800737a:	f001 80fb 	beq.w	8008574 <dwt_ioctl+0x1cb4>
 800737e:	4dd6      	ldr	r5, [pc, #856]	; (80076d8 <dwt_ioctl+0xe18>)
 8007380:	2200      	movs	r2, #0
 8007382:	4629      	mov	r1, r5
 8007384:	f7fd faf0 	bl	8004968 <dwt_read8bitoffsetreg>
 8007388:	4680      	mov	r8, r0
 800738a:	2302      	movs	r3, #2
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	23ff      	movs	r3, #255	; 0xff
 8007390:	2200      	movs	r2, #0
 8007392:	4629      	mov	r1, r5
 8007394:	4630      	mov	r0, r6
 8007396:	f7fe fd7d 	bl	8005e94 <dwt_modify8bitoffsetreg>
 800739a:	2304      	movs	r3, #4
 800739c:	2200      	movs	r2, #0
 800739e:	49cf      	ldr	r1, [pc, #828]	; (80076dc <dwt_ioctl+0xe1c>)
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7fd fea8 	bl	80050f6 <dwt_write8bitoffsetreg>
 80073a6:	2301      	movs	r3, #1
 80073a8:	2200      	movs	r2, #0
 80073aa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80073ae:	4630      	mov	r0, r6
 80073b0:	f7fd fea1 	bl	80050f6 <dwt_write8bitoffsetreg>
 80073b4:	4fca      	ldr	r7, [pc, #808]	; (80076e0 <dwt_ioctl+0xe20>)
 80073b6:	2500      	movs	r5, #0
 80073b8:	462a      	mov	r2, r5
 80073ba:	4639      	mov	r1, r7
 80073bc:	4630      	mov	r0, r6
 80073be:	f7fd fad3 	bl	8004968 <dwt_read8bitoffsetreg>
 80073c2:	f010 0f01 	tst.w	r0, #1
 80073c6:	d0f7      	beq.n	80073b8 <dwt_ioctl+0xaf8>
 80073c8:	2200      	movs	r2, #0
 80073ca:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7fd fab8 	bl	8004944 <dwt_read16bitoffsetreg>
 80073d4:	4605      	mov	r5, r0
 80073d6:	2300      	movs	r3, #0
 80073d8:	461a      	mov	r2, r3
 80073da:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80073de:	4630      	mov	r0, r6
 80073e0:	f7fd fe89 	bl	80050f6 <dwt_write8bitoffsetreg>
 80073e4:	2300      	movs	r3, #0
 80073e6:	461a      	mov	r2, r3
 80073e8:	49bc      	ldr	r1, [pc, #752]	; (80076dc <dwt_ioctl+0xe1c>)
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7fd fe83 	bl	80050f6 <dwt_write8bitoffsetreg>
 80073f0:	4643      	mov	r3, r8
 80073f2:	2200      	movs	r2, #0
 80073f4:	49b8      	ldr	r1, [pc, #736]	; (80076d8 <dwt_ioctl+0xe18>)
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7fd fe7d 	bl	80050f6 <dwt_write8bitoffsetreg>
 80073fc:	8025      	strh	r5, [r4, #0]
 80073fe:	2500      	movs	r5, #0
 8007400:	f7ff bb08 	b.w	8006a14 <dwt_ioctl+0x154>
 8007404:	2c00      	cmp	r4, #0
 8007406:	f001 80b8 	beq.w	800857a <dwt_ioctl+0x1cba>
 800740a:	7923      	ldrb	r3, [r4, #4]
 800740c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800740e:	7ad2      	ldrb	r2, [r2, #11]
 8007410:	1a9b      	subs	r3, r3, r2
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800741a:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80076e4 <dwt_ioctl+0xe24>
 800741e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007422:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8007426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800742a:	edc4 7a00 	vstr	s15, [r4]
 800742e:	2500      	movs	r5, #0
 8007430:	f7ff baf0 	b.w	8006a14 <dwt_ioctl+0x154>
 8007434:	2c00      	cmp	r4, #0
 8007436:	f001 80a3 	beq.w	8008580 <dwt_ioctl+0x1cc0>
 800743a:	7923      	ldrb	r3, [r4, #4]
 800743c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800743e:	7a92      	ldrb	r2, [r2, #10]
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800744a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80076e8 <dwt_ioctl+0xe28>
 800744e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007452:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800745a:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80076ec <dwt_ioctl+0xe2c>
 800745e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007462:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8007466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800746a:	edc4 7a00 	vstr	s15, [r4]
 800746e:	2500      	movs	r5, #0
 8007470:	f7ff bad0 	b.w	8006a14 <dwt_ioctl+0x154>
 8007474:	2c00      	cmp	r4, #0
 8007476:	f001 8086 	beq.w	8008586 <dwt_ioctl+0x1cc6>
 800747a:	6824      	ldr	r4, [r4, #0]
 800747c:	2101      	movs	r1, #1
 800747e:	f7fe fb61 	bl	8005b44 <ull_enable_rf_tx>
 8007482:	4630      	mov	r0, r6
 8007484:	f7fe fb92 	bl	8005bac <ull_enable_rftx_blocks>
 8007488:	2101      	movs	r1, #1
 800748a:	4630      	mov	r0, r6
 800748c:	f7fd feb6 	bl	80051fc <ull_force_clocks>
 8007490:	4621      	mov	r1, r4
 8007492:	4630      	mov	r0, r6
 8007494:	f7fe fda4 	bl	8005fe0 <ull_repeated_frames>
 8007498:	2500      	movs	r5, #0
 800749a:	f7ff babb 	b.w	8006a14 <dwt_ioctl+0x154>
 800749e:	2500      	movs	r5, #0
 80074a0:	9500      	str	r5, [sp, #0]
 80074a2:	23ef      	movs	r3, #239	; 0xef
 80074a4:	462a      	mov	r2, r5
 80074a6:	4992      	ldr	r1, [pc, #584]	; (80076f0 <dwt_ioctl+0xe30>)
 80074a8:	f7fe fcf4 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80074ac:	2105      	movs	r1, #5
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7fd fea4 	bl	80051fc <ull_force_clocks>
 80074b4:	2101      	movs	r1, #1
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7fe fa18 	bl	80058ec <ull_disable_rf_tx>
 80074bc:	4630      	mov	r0, r6
 80074be:	f7fe fa0b 	bl	80058d8 <ull_disable_rftx_blocks>
 80074c2:	f7ff baa7 	b.w	8006a14 <dwt_ioctl+0x154>
 80074c6:	2500      	movs	r5, #0
 80074c8:	9500      	str	r5, [sp, #0]
 80074ca:	23ef      	movs	r3, #239	; 0xef
 80074cc:	462a      	mov	r2, r5
 80074ce:	4988      	ldr	r1, [pc, #544]	; (80076f0 <dwt_ioctl+0xe30>)
 80074d0:	f7fe fce0 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80074d4:	f7ff ba9e 	b.w	8006a14 <dwt_ioctl+0x154>
 80074d8:	2c00      	cmp	r4, #0
 80074da:	f001 8057 	beq.w	800858c <dwt_ioctl+0x1ccc>
 80074de:	6821      	ldr	r1, [r4, #0]
 80074e0:	f7fe fd7e 	bl	8005fe0 <ull_repeated_frames>
 80074e4:	2500      	movs	r5, #0
 80074e6:	f7ff ba95 	b.w	8006a14 <dwt_ioctl+0x154>
 80074ea:	2200      	movs	r2, #0
 80074ec:	4981      	ldr	r1, [pc, #516]	; (80076f4 <dwt_ioctl+0xe34>)
 80074ee:	f7fd fa29 	bl	8004944 <dwt_read16bitoffsetreg>
 80074f2:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80074f6:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80074fa:	bf18      	it	ne
 80074fc:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8007500:	b22d      	sxth	r5, r5
 8007502:	8025      	strh	r5, [r4, #0]
 8007504:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007506:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800750a:	1aed      	subs	r5, r5, r3
 800750c:	f7ff ba82 	b.w	8006a14 <dwt_ioctl+0x154>
 8007510:	2c00      	cmp	r4, #0
 8007512:	f001 806d 	beq.w	80085f0 <dwt_ioctl+0x1d30>
 8007516:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800751a:	7a23      	ldrb	r3, [r4, #8]
 800751c:	f899 2013 	ldrb.w	r2, [r9, #19]
 8007520:	2aff      	cmp	r2, #255	; 0xff
 8007522:	f000 813f 	beq.w	80077a4 <dwt_ioctl+0xee4>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d136      	bne.n	8007598 <dwt_ioctl+0xcd8>
 800752a:	f8d9 3000 	ldr.w	r3, [r9]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	230c      	movs	r3, #12
 8007532:	2200      	movs	r2, #0
 8007534:	4970      	ldr	r1, [pc, #448]	; (80076f8 <dwt_ioctl+0xe38>)
 8007536:	f7fd fdd3 	bl	80050e0 <dwt_writetodevice>
 800753a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800753e:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8007542:	18d1      	adds	r1, r2, r3
 8007544:	f899 2012 	ldrb.w	r2, [r9, #18]
 8007548:	2a00      	cmp	r2, #0
 800754a:	d15f      	bne.n	800760c <dwt_ioctl+0xd4c>
 800754c:	f899 0010 	ldrb.w	r0, [r9, #16]
 8007550:	2800      	cmp	r0, #0
 8007552:	bf0b      	itete	eq
 8007554:	227f      	moveq	r2, #127	; 0x7f
 8007556:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800755a:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800755e:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8007562:	f899 0013 	ldrb.w	r0, [r9, #19]
 8007566:	1a12      	subs	r2, r2, r0
 8007568:	3a02      	subs	r2, #2
 800756a:	4291      	cmp	r1, r2
 800756c:	f200 8120 	bhi.w	80077b0 <dwt_ioctl+0xef0>
 8007570:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007574:	9200      	str	r2, [sp, #0]
 8007576:	2200      	movs	r2, #0
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f7fd fdb0 	bl	80050e0 <dwt_writetodevice>
 8007580:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007584:	f899 200c 	ldrb.w	r2, [r9, #12]
 8007588:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800758c:	9100      	str	r1, [sp, #0]
 800758e:	4629      	mov	r1, r5
 8007590:	4630      	mov	r0, r6
 8007592:	f7fd fda5 	bl	80050e0 <dwt_writetodevice>
 8007596:	e04a      	b.n	800762e <dwt_ioctl+0xd6e>
 8007598:	f8d9 3000 	ldr.w	r3, [r9]
 800759c:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80075a0:	7a9a      	ldrb	r2, [r3, #10]
 80075a2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80075a6:	7a5a      	ldrb	r2, [r3, #9]
 80075a8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 80075ac:	7a1a      	ldrb	r2, [r3, #8]
 80075ae:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 80075b2:	79da      	ldrb	r2, [r3, #7]
 80075b4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80075b8:	799a      	ldrb	r2, [r3, #6]
 80075ba:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80075be:	795a      	ldrb	r2, [r3, #5]
 80075c0:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 80075c4:	791a      	ldrb	r2, [r3, #4]
 80075c6:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80075ca:	78da      	ldrb	r2, [r3, #3]
 80075cc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 80075d0:	789a      	ldrb	r2, [r3, #2]
 80075d2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80075d6:	785a      	ldrb	r2, [r3, #1]
 80075d8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80075e2:	2200      	movs	r2, #0
 80075e4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80075e8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80075ec:	0a09      	lsrs	r1, r1, #8
 80075ee:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80075f2:	7b19      	ldrb	r1, [r3, #12]
 80075f4:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80075f8:	7adb      	ldrb	r3, [r3, #11]
 80075fa:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80075fe:	ab0c      	add	r3, sp, #48	; 0x30
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	2310      	movs	r3, #16
 8007604:	493c      	ldr	r1, [pc, #240]	; (80076f8 <dwt_ioctl+0xe38>)
 8007606:	f7fd fd6b 	bl	80050e0 <dwt_writetodevice>
 800760a:	e796      	b.n	800753a <dwt_ioctl+0xc7a>
 800760c:	2a01      	cmp	r2, #1
 800760e:	f040 80cc 	bne.w	80077aa <dwt_ioctl+0xeea>
 8007612:	f899 3011 	ldrb.w	r3, [r9, #17]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800761c:	bf08      	it	eq
 800761e:	237f      	moveq	r3, #127	; 0x7f
 8007620:	f899 2013 	ldrb.w	r2, [r9, #19]
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	3b02      	subs	r3, #2
 8007628:	4299      	cmp	r1, r3
 800762a:	f200 80c4 	bhi.w	80077b6 <dwt_ioctl+0xef6>
 800762e:	f899 2010 	ldrb.w	r2, [r9, #16]
 8007632:	1e53      	subs	r3, r2, #1
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b01      	cmp	r3, #1
 8007638:	d940      	bls.n	80076bc <dwt_ioctl+0xdfc>
 800763a:	f899 3011 	ldrb.w	r3, [r9, #17]
 800763e:	1e59      	subs	r1, r3, #1
 8007640:	b2c9      	uxtb	r1, r1
 8007642:	2901      	cmp	r1, #1
 8007644:	d964      	bls.n	8007710 <dwt_ioctl+0xe50>
 8007646:	2b04      	cmp	r3, #4
 8007648:	d069      	beq.n	800771e <dwt_ioctl+0xe5e>
 800764a:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800764e:	2200      	movs	r2, #0
 8007650:	492a      	ldr	r1, [pc, #168]	; (80076fc <dwt_ioctl+0xe3c>)
 8007652:	4630      	mov	r0, r6
 8007654:	f7fd fea2 	bl	800539c <dwt_write32bitoffsetreg>
 8007658:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800765c:	4a28      	ldr	r2, [pc, #160]	; (8007700 <dwt_ioctl+0xe40>)
 800765e:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8007662:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766a:	4313      	orrs	r3, r2
 800766c:	2200      	movs	r2, #0
 800766e:	4925      	ldr	r1, [pc, #148]	; (8007704 <dwt_ioctl+0xe44>)
 8007670:	4630      	mov	r0, r6
 8007672:	f7fd fe93 	bl	800539c <dwt_write32bitoffsetreg>
 8007676:	2301      	movs	r3, #1
 8007678:	2200      	movs	r2, #0
 800767a:	4923      	ldr	r1, [pc, #140]	; (8007708 <dwt_ioctl+0xe48>)
 800767c:	4630      	mov	r0, r6
 800767e:	f7fd fd3a 	bl	80050f6 <dwt_write8bitoffsetreg>
 8007682:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800770c <dwt_ioctl+0xe4c>
 8007686:	2700      	movs	r7, #0
 8007688:	463a      	mov	r2, r7
 800768a:	4641      	mov	r1, r8
 800768c:	4630      	mov	r0, r6
 800768e:	f7fd f96b 	bl	8004968 <dwt_read8bitoffsetreg>
 8007692:	f010 0f05 	tst.w	r0, #5
 8007696:	d0f7      	beq.n	8007688 <dwt_ioctl+0xdc8>
 8007698:	4605      	mov	r5, r0
 800769a:	4603      	mov	r3, r0
 800769c:	2200      	movs	r2, #0
 800769e:	491b      	ldr	r1, [pc, #108]	; (800770c <dwt_ioctl+0xe4c>)
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7fd fd28 	bl	80050f6 <dwt_write8bitoffsetreg>
 80076a6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80076aa:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d042      	beq.n	8007738 <dwt_ioctl+0xe78>
 80076b2:	b26b      	sxtb	r3, r5
 80076b4:	7023      	strb	r3, [r4, #0]
 80076b6:	2500      	movs	r5, #0
 80076b8:	f7ff b9ac 	b.w	8006a14 <dwt_ioctl+0x154>
 80076bc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80076be:	7bdb      	ldrb	r3, [r3, #15]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	f001 802e 	beq.w	8008722 <dwt_ioctl+0x1e62>
 80076c6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80076ca:	1e5a      	subs	r2, r3, #1
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	2a01      	cmp	r2, #1
 80076d0:	d92c      	bls.n	800772c <dwt_ioctl+0xe6c>
 80076d2:	2201      	movs	r2, #1
 80076d4:	e7b7      	b.n	8007646 <dwt_ioctl+0xd86>
 80076d6:	bf00      	nop
 80076d8:	00070048 	.word	0x00070048
 80076dc:	00070034 	.word	0x00070034
 80076e0:	00080004 	.word	0x00080004
 80076e4:	3f866666 	.word	0x3f866666
 80076e8:	3ecccccd 	.word	0x3ecccccd
 80076ec:	437f0000 	.word	0x437f0000
 80076f0:	000f0024 	.word	0x000f0024
 80076f4:	00020008 	.word	0x00020008
 80076f8:	00010034 	.word	0x00010034
 80076fc:	00010044 	.word	0x00010044
 8007700:	0001ff80 	.word	0x0001ff80
 8007704:	00010048 	.word	0x00010048
 8007708:	0001004c 	.word	0x0001004c
 800770c:	00010050 	.word	0x00010050
 8007710:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007712:	7bdb      	ldrb	r3, [r3, #15]
 8007714:	2b03      	cmp	r3, #3
 8007716:	bf0c      	ite	eq
 8007718:	2302      	moveq	r3, #2
 800771a:	2301      	movne	r3, #1
 800771c:	e795      	b.n	800764a <dwt_ioctl+0xd8a>
 800771e:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8007722:	2910      	cmp	r1, #16
 8007724:	d991      	bls.n	800764a <dwt_ioctl+0xd8a>
 8007726:	f06f 0303 	mvn.w	r3, #3
 800772a:	e7c3      	b.n	80076b4 <dwt_ioctl+0xdf4>
 800772c:	2201      	movs	r2, #1
 800772e:	4613      	mov	r3, r2
 8007730:	e78b      	b.n	800764a <dwt_ioctl+0xd8a>
 8007732:	2202      	movs	r2, #2
 8007734:	4613      	mov	r3, r2
 8007736:	e788      	b.n	800764a <dwt_ioctl+0xd8a>
 8007738:	f899 3012 	ldrb.w	r3, [r9, #18]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d1b8      	bne.n	80076b2 <dwt_ioctl+0xdf2>
 8007740:	f899 2011 	ldrb.w	r2, [r9, #17]
 8007744:	1e53      	subs	r3, r2, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d91b      	bls.n	8007784 <dwt_ioctl+0xec4>
 800774c:	2a03      	cmp	r2, #3
 800774e:	bf0c      	ite	eq
 8007750:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8007754:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8007758:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800775c:	b112      	cbz	r2, 8007764 <dwt_ioctl+0xea4>
 800775e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007762:	b9c3      	cbnz	r3, 8007796 <dwt_ioctl+0xed6>
 8007764:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007768:	2900      	cmp	r1, #0
 800776a:	d0a2      	beq.n	80076b2 <dwt_ioctl+0xdf2>
 800776c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d09e      	beq.n	80076b2 <dwt_ioctl+0xdf2>
 8007774:	f899 200c 	ldrb.w	r2, [r9, #12]
 8007778:	9100      	str	r1, [sp, #0]
 800777a:	4639      	mov	r1, r7
 800777c:	4630      	mov	r0, r6
 800777e:	f7fd f8c1 	bl	8004904 <dwt_readfromdevice>
 8007782:	e796      	b.n	80076b2 <dwt_ioctl+0xdf2>
 8007784:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007786:	7bdb      	ldrb	r3, [r3, #15]
 8007788:	2b03      	cmp	r3, #3
 800778a:	bf0c      	ite	eq
 800778c:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8007790:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8007794:	e7e0      	b.n	8007758 <dwt_ioctl+0xe98>
 8007796:	9200      	str	r2, [sp, #0]
 8007798:	2200      	movs	r2, #0
 800779a:	4639      	mov	r1, r7
 800779c:	4630      	mov	r0, r6
 800779e:	f7fd f8b1 	bl	8004904 <dwt_readfromdevice>
 80077a2:	e7df      	b.n	8007764 <dwt_ioctl+0xea4>
 80077a4:	f06f 0302 	mvn.w	r3, #2
 80077a8:	e784      	b.n	80076b4 <dwt_ioctl+0xdf4>
 80077aa:	f06f 0301 	mvn.w	r3, #1
 80077ae:	e781      	b.n	80076b4 <dwt_ioctl+0xdf4>
 80077b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077b4:	e77e      	b.n	80076b4 <dwt_ioctl+0xdf4>
 80077b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077ba:	e77b      	b.n	80076b4 <dwt_ioctl+0xdf4>
 80077bc:	7a23      	ldrb	r3, [r4, #8]
 80077be:	79e1      	ldrb	r1, [r4, #7]
 80077c0:	79a2      	ldrb	r2, [r4, #6]
 80077c2:	00d2      	lsls	r2, r2, #3
 80077c4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	7962      	ldrb	r2, [r4, #5]
 80077cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80077d0:	7922      	ldrb	r2, [r4, #4]
 80077d2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80077d6:	78e2      	ldrb	r2, [r4, #3]
 80077d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077dc:	78a2      	ldrb	r2, [r4, #2]
 80077de:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80077e2:	7862      	ldrb	r2, [r4, #1]
 80077e4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2200      	movs	r2, #0
 80077ec:	49cd      	ldr	r1, [pc, #820]	; (8007b24 <dwt_ioctl+0x1264>)
 80077ee:	f7fd fcd4 	bl	800519a <dwt_write16bitoffsetreg>
 80077f2:	2500      	movs	r5, #0
 80077f4:	f7ff b90e 	b.w	8006a14 <dwt_ioctl+0x154>
 80077f8:	2c00      	cmp	r4, #0
 80077fa:	f000 86fc 	beq.w	80085f6 <dwt_ioctl+0x1d36>
 80077fe:	7863      	ldrb	r3, [r4, #1]
 8007800:	b133      	cbz	r3, 8007810 <dwt_ioctl+0xf50>
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	3b01      	subs	r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	7023      	strb	r3, [r4, #0]
 800780a:	2500      	movs	r5, #0
 800780c:	f7ff b902 	b.w	8006a14 <dwt_ioctl+0x154>
 8007810:	2300      	movs	r3, #0
 8007812:	e7f9      	b.n	8007808 <dwt_ioctl+0xf48>
 8007814:	2200      	movs	r2, #0
 8007816:	49c4      	ldr	r1, [pc, #784]	; (8007b28 <dwt_ioctl+0x1268>)
 8007818:	f7fd f87e 	bl	8004918 <dwt_read32bitoffsetreg>
 800781c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007820:	8023      	strh	r3, [r4, #0]
 8007822:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007826:	8060      	strh	r0, [r4, #2]
 8007828:	2200      	movs	r2, #0
 800782a:	49c0      	ldr	r1, [pc, #768]	; (8007b2c <dwt_ioctl+0x126c>)
 800782c:	4630      	mov	r0, r6
 800782e:	f7fd f873 	bl	8004918 <dwt_read32bitoffsetreg>
 8007832:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007836:	80a3      	strh	r3, [r4, #4]
 8007838:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800783c:	80e0      	strh	r0, [r4, #6]
 800783e:	2200      	movs	r2, #0
 8007840:	49bb      	ldr	r1, [pc, #748]	; (8007b30 <dwt_ioctl+0x1270>)
 8007842:	4630      	mov	r0, r6
 8007844:	f7fd f868 	bl	8004918 <dwt_read32bitoffsetreg>
 8007848:	7220      	strb	r0, [r4, #8]
 800784a:	0c00      	lsrs	r0, r0, #16
 800784c:	7260      	strb	r0, [r4, #9]
 800784e:	2200      	movs	r2, #0
 8007850:	49b8      	ldr	r1, [pc, #736]	; (8007b34 <dwt_ioctl+0x1274>)
 8007852:	4630      	mov	r0, r6
 8007854:	f7fd f860 	bl	8004918 <dwt_read32bitoffsetreg>
 8007858:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007862:	8160      	strh	r0, [r4, #10]
 8007864:	2200      	movs	r2, #0
 8007866:	49b4      	ldr	r1, [pc, #720]	; (8007b38 <dwt_ioctl+0x1278>)
 8007868:	4630      	mov	r0, r6
 800786a:	f7fd f855 	bl	8004918 <dwt_read32bitoffsetreg>
 800786e:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8007872:	f8a4 300f 	strh.w	r3, [r4, #15]
 8007876:	73a0      	strb	r0, [r4, #14]
 8007878:	2200      	movs	r2, #0
 800787a:	49b0      	ldr	r1, [pc, #704]	; (8007b3c <dwt_ioctl+0x127c>)
 800787c:	4630      	mov	r0, r6
 800787e:	f7fd f84b 	bl	8004918 <dwt_read32bitoffsetreg>
 8007882:	7460      	strb	r0, [r4, #17]
 8007884:	0c00      	lsrs	r0, r0, #16
 8007886:	74a0      	strb	r0, [r4, #18]
 8007888:	2200      	movs	r2, #0
 800788a:	49ad      	ldr	r1, [pc, #692]	; (8007b40 <dwt_ioctl+0x1280>)
 800788c:	4630      	mov	r0, r6
 800788e:	f7fd f843 	bl	8004918 <dwt_read32bitoffsetreg>
 8007892:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007896:	f8a4 0013 	strh.w	r0, [r4, #19]
 800789a:	2500      	movs	r5, #0
 800789c:	7565      	strb	r5, [r4, #21]
 800789e:	75a5      	strb	r5, [r4, #22]
 80078a0:	462a      	mov	r2, r5
 80078a2:	49a8      	ldr	r1, [pc, #672]	; (8007b44 <dwt_ioctl+0x1284>)
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7fd f85f 	bl	8004968 <dwt_read8bitoffsetreg>
 80078aa:	75e0      	strb	r0, [r4, #23]
 80078ac:	f7ff b8b2 	b.w	8006a14 <dwt_ioctl+0x154>
 80078b0:	4611      	mov	r1, r2
 80078b2:	f7fd fc5f 	bl	8005174 <ull_configeventcounters>
 80078b6:	2500      	movs	r5, #0
 80078b8:	f7ff b8ac 	b.w	8006a14 <dwt_ioctl+0x154>
 80078bc:	2c00      	cmp	r4, #0
 80078be:	f000 869d 	beq.w	80085fc <dwt_ioctl+0x1d3c>
 80078c2:	8823      	ldrh	r3, [r4, #0]
 80078c4:	2200      	movs	r2, #0
 80078c6:	49a0      	ldr	r1, [pc, #640]	; (8007b48 <dwt_ioctl+0x1288>)
 80078c8:	f7fd fc67 	bl	800519a <dwt_write16bitoffsetreg>
 80078cc:	2500      	movs	r5, #0
 80078ce:	f7ff b8a1 	b.w	8006a14 <dwt_ioctl+0x154>
 80078d2:	2c00      	cmp	r4, #0
 80078d4:	f000 8695 	beq.w	8008602 <dwt_ioctl+0x1d42>
 80078d8:	6825      	ldr	r5, [r4, #0]
 80078da:	b935      	cbnz	r5, 80078ea <dwt_ioctl+0x102a>
 80078dc:	2300      	movs	r3, #0
 80078de:	461a      	mov	r2, r3
 80078e0:	499a      	ldr	r1, [pc, #616]	; (8007b4c <dwt_ioctl+0x128c>)
 80078e2:	f7fd fc5a 	bl	800519a <dwt_write16bitoffsetreg>
 80078e6:	f7ff b895 	b.w	8006a14 <dwt_ioctl+0x154>
 80078ea:	7962      	ldrb	r2, [r4, #5]
 80078ec:	7923      	ldrb	r3, [r4, #4]
 80078ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80078f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078f6:	2200      	movs	r2, #0
 80078f8:	4994      	ldr	r1, [pc, #592]	; (8007b4c <dwt_ioctl+0x128c>)
 80078fa:	f7fd fc4e 	bl	800519a <dwt_write16bitoffsetreg>
 80078fe:	2500      	movs	r5, #0
 8007900:	f7ff b888 	b.w	8006a14 <dwt_ioctl+0x154>
 8007904:	2c00      	cmp	r4, #0
 8007906:	f000 867f 	beq.w	8008608 <dwt_ioctl+0x1d48>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	b94b      	cbnz	r3, 8007922 <dwt_ioctl+0x1062>
 800790e:	2500      	movs	r5, #0
 8007910:	9500      	str	r5, [sp, #0]
 8007912:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8007916:	462a      	mov	r2, r5
 8007918:	2110      	movs	r1, #16
 800791a:	f7fe fc6d 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800791e:	f7ff b879 	b.w	8006a14 <dwt_ioctl+0x154>
 8007922:	2200      	movs	r2, #0
 8007924:	2134      	movs	r1, #52	; 0x34
 8007926:	f7fd fd39 	bl	800539c <dwt_write32bitoffsetreg>
 800792a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007934:	2200      	movs	r2, #0
 8007936:	2110      	movs	r1, #16
 8007938:	4630      	mov	r0, r6
 800793a:	f7fe fc5d 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800793e:	2500      	movs	r5, #0
 8007940:	f7ff b868 	b.w	8006a14 <dwt_ioctl+0x154>
 8007944:	2c00      	cmp	r4, #0
 8007946:	f000 8662 	beq.w	800860e <dwt_ioctl+0x1d4e>
 800794a:	8861      	ldrh	r1, [r4, #2]
 800794c:	f7fd fca2 	bl	8005294 <ull_aon_read>
 8007950:	7020      	strb	r0, [r4, #0]
 8007952:	2500      	movs	r5, #0
 8007954:	f7ff b85e 	b.w	8006a14 <dwt_ioctl+0x154>
 8007958:	2c00      	cmp	r4, #0
 800795a:	f000 865b 	beq.w	8008614 <dwt_ioctl+0x1d54>
 800795e:	78a2      	ldrb	r2, [r4, #2]
 8007960:	8821      	ldrh	r1, [r4, #0]
 8007962:	f7fd fcb7 	bl	80052d4 <ull_aon_write>
 8007966:	2500      	movs	r5, #0
 8007968:	f7ff b854 	b.w	8006a14 <dwt_ioctl+0x154>
 800796c:	4b78      	ldr	r3, [pc, #480]	; (8007b50 <dwt_ioctl+0x1290>)
 800796e:	4a79      	ldr	r2, [pc, #484]	; (8007b54 <dwt_ioctl+0x1294>)
 8007970:	2d01      	cmp	r5, #1
 8007972:	bf18      	it	ne
 8007974:	4613      	movne	r3, r2
 8007976:	2d01      	cmp	r5, #1
 8007978:	4977      	ldr	r1, [pc, #476]	; (8007b58 <dwt_ioctl+0x1298>)
 800797a:	bf18      	it	ne
 800797c:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8007980:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007982:	7bd2      	ldrb	r2, [r2, #15]
 8007984:	2a01      	cmp	r2, #1
 8007986:	d012      	beq.n	80079ae <dwt_ioctl+0x10ee>
 8007988:	2a03      	cmp	r2, #3
 800798a:	d117      	bne.n	80079bc <dwt_ioctl+0x10fc>
 800798c:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8007990:	3a01      	subs	r2, #1
 8007992:	441a      	add	r2, r3
 8007994:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007998:	f7fc ffd4 	bl	8004944 <dwt_read16bitoffsetreg>
 800799c:	09c0      	lsrs	r0, r0, #7
 800799e:	8020      	strh	r0, [r4, #0]
 80079a0:	8825      	ldrh	r5, [r4, #0]
 80079a2:	3500      	adds	r5, #0
 80079a4:	bf18      	it	ne
 80079a6:	2501      	movne	r5, #1
 80079a8:	426d      	negs	r5, r5
 80079aa:	f7ff b833 	b.w	8006a14 <dwt_ioctl+0x154>
 80079ae:	2202      	movs	r2, #2
 80079b0:	4619      	mov	r1, r3
 80079b2:	f7fc ffc7 	bl	8004944 <dwt_read16bitoffsetreg>
 80079b6:	09c0      	lsrs	r0, r0, #7
 80079b8:	8020      	strh	r0, [r4, #0]
 80079ba:	e7f1      	b.n	80079a0 <dwt_ioctl+0x10e0>
 80079bc:	2202      	movs	r2, #2
 80079be:	f7fc ffc1 	bl	8004944 <dwt_read16bitoffsetreg>
 80079c2:	09c0      	lsrs	r0, r0, #7
 80079c4:	8020      	strh	r0, [r4, #0]
 80079c6:	e7eb      	b.n	80079a0 <dwt_ioctl+0x10e0>
 80079c8:	2c00      	cmp	r4, #0
 80079ca:	f000 8626 	beq.w	800861a <dwt_ioctl+0x1d5a>
 80079ce:	7821      	ldrb	r1, [r4, #0]
 80079d0:	f7fe fc48 	bl	8006264 <ull_setleds>
 80079d4:	2500      	movs	r5, #0
 80079d6:	f7ff b81d 	b.w	8006a14 <dwt_ioctl+0x154>
 80079da:	4611      	mov	r1, r2
 80079dc:	f7fe fb18 	bl	8006010 <ull_setdwstate>
 80079e0:	2500      	movs	r5, #0
 80079e2:	f7ff b817 	b.w	8006a14 <dwt_ioctl+0x154>
 80079e6:	9400      	str	r4, [sp, #0]
 80079e8:	2304      	movs	r3, #4
 80079ea:	2200      	movs	r2, #0
 80079ec:	211c      	movs	r1, #28
 80079ee:	f7fc ff89 	bl	8004904 <dwt_readfromdevice>
 80079f2:	2500      	movs	r5, #0
 80079f4:	f7ff b80e 	b.w	8006a14 <dwt_ioctl+0x154>
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	f000 8611 	beq.w	8008620 <dwt_ioctl+0x1d60>
 80079fe:	2202      	movs	r2, #2
 8007a00:	2144      	movs	r1, #68	; 0x44
 8007a02:	f7fc ff9f 	bl	8004944 <dwt_read16bitoffsetreg>
 8007a06:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8007a0a:	7020      	strb	r0, [r4, #0]
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	f7ff b801 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a12:	2c00      	cmp	r4, #0
 8007a14:	f000 8607 	beq.w	8008626 <dwt_ioctl+0x1d66>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2144      	movs	r1, #68	; 0x44
 8007a1c:	f7fc ffa4 	bl	8004968 <dwt_read8bitoffsetreg>
 8007a20:	f000 0001 	and.w	r0, r0, #1
 8007a24:	7020      	strb	r0, [r4, #0]
 8007a26:	2500      	movs	r5, #0
 8007a28:	f7fe bff4 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a2c:	2c00      	cmp	r4, #0
 8007a2e:	f000 85fd 	beq.w	800862c <dwt_ioctl+0x1d6c>
 8007a32:	8862      	ldrh	r2, [r4, #2]
 8007a34:	8821      	ldrh	r1, [r4, #0]
 8007a36:	f7fe fb49 	bl	80060cc <ull_configureframefilter>
 8007a3a:	2500      	movs	r5, #0
 8007a3c:	f7fe bfea 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a40:	9400      	str	r4, [sp, #0]
 8007a42:	2308      	movs	r3, #8
 8007a44:	2200      	movs	r2, #0
 8007a46:	2104      	movs	r1, #4
 8007a48:	f7fd fb4a 	bl	80050e0 <dwt_writetodevice>
 8007a4c:	2500      	movs	r5, #0
 8007a4e:	f7fe bfe1 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a52:	9400      	str	r4, [sp, #0]
 8007a54:	2308      	movs	r3, #8
 8007a56:	2200      	movs	r2, #0
 8007a58:	2104      	movs	r1, #4
 8007a5a:	f7fc ff53 	bl	8004904 <dwt_readfromdevice>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	f7fe bfd8 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	f000 85e4 	beq.w	8008632 <dwt_ioctl+0x1d72>
 8007a6a:	8823      	ldrh	r3, [r4, #0]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	210c      	movs	r1, #12
 8007a70:	f7fd fb93 	bl	800519a <dwt_write16bitoffsetreg>
 8007a74:	2500      	movs	r5, #0
 8007a76:	f7fe bfcd 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a7a:	2c00      	cmp	r4, #0
 8007a7c:	f000 85dc 	beq.w	8008638 <dwt_ioctl+0x1d78>
 8007a80:	8823      	ldrh	r3, [r4, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	210c      	movs	r1, #12
 8007a86:	f7fd fb88 	bl	800519a <dwt_write16bitoffsetreg>
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	f7fe bfc2 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a90:	4621      	mov	r1, r4
 8007a92:	f7fd fb03 	bl	800509c <ull_readrxtimestamp>
 8007a96:	2500      	movs	r5, #0
 8007a98:	f7fe bfbc 	b.w	8006a14 <dwt_ioctl+0x154>
 8007a9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007a9e:	7bdb      	ldrb	r3, [r3, #15]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d00b      	beq.n	8007abc <dwt_ioctl+0x11fc>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d112      	bne.n	8007ace <dwt_ioctl+0x120e>
 8007aa8:	9400      	str	r4, [sp, #0]
 8007aaa:	2305      	movs	r3, #5
 8007aac:	2220      	movs	r2, #32
 8007aae:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007ab2:	f7fc ff27 	bl	8004904 <dwt_readfromdevice>
 8007ab6:	2500      	movs	r5, #0
 8007ab8:	f7fe bfac 	b.w	8006a14 <dwt_ioctl+0x154>
 8007abc:	9400      	str	r4, [sp, #0]
 8007abe:	2305      	movs	r3, #5
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4926      	ldr	r1, [pc, #152]	; (8007b5c <dwt_ioctl+0x129c>)
 8007ac4:	f7fc ff1e 	bl	8004904 <dwt_readfromdevice>
 8007ac8:	2500      	movs	r5, #0
 8007aca:	f7fe bfa3 	b.w	8006a14 <dwt_ioctl+0x154>
 8007ace:	9400      	str	r4, [sp, #0]
 8007ad0:	2305      	movs	r3, #5
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8007ad8:	f7fc ff14 	bl	8004904 <dwt_readfromdevice>
 8007adc:	2500      	movs	r5, #0
 8007ade:	f7fe bf99 	b.w	8006a14 <dwt_ioctl+0x154>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	f804 5b01 	strb.w	r5, [r4], #1
 8007ae8:	9400      	str	r4, [sp, #0]
 8007aea:	2304      	movs	r3, #4
 8007aec:	462a      	mov	r2, r5
 8007aee:	2170      	movs	r1, #112	; 0x70
 8007af0:	f7fc ff08 	bl	8004904 <dwt_readfromdevice>
 8007af4:	f7fe bf8e 	b.w	8006a14 <dwt_ioctl+0x154>
 8007af8:	2c00      	cmp	r4, #0
 8007afa:	f000 85a0 	beq.w	800863e <dwt_ioctl+0x1d7e>
 8007afe:	2201      	movs	r2, #1
 8007b00:	2164      	movs	r1, #100	; 0x64
 8007b02:	f7fc ff09 	bl	8004918 <dwt_read32bitoffsetreg>
 8007b06:	6020      	str	r0, [r4, #0]
 8007b08:	2500      	movs	r5, #0
 8007b0a:	f7fe bf83 	b.w	8006a14 <dwt_ioctl+0x154>
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	f000 8598 	beq.w	8008644 <dwt_ioctl+0x1d84>
 8007b14:	2200      	movs	r2, #0
 8007b16:	2164      	movs	r1, #100	; 0x64
 8007b18:	f7fc fefe 	bl	8004918 <dwt_read32bitoffsetreg>
 8007b1c:	6020      	str	r0, [r4, #0]
 8007b1e:	2500      	movs	r5, #0
 8007b20:	f7fe bf78 	b.w	8006a14 <dwt_ioctl+0x154>
 8007b24:	00010030 	.word	0x00010030
 8007b28:	000f0004 	.word	0x000f0004
 8007b2c:	000f0008 	.word	0x000f0008
 8007b30:	000f000c 	.word	0x000f000c
 8007b34:	000f0010 	.word	0x000f0010
 8007b38:	000f0014 	.word	0x000f0014
 8007b3c:	000f0018 	.word	0x000f0018
 8007b40:	000f001c 	.word	0x000f001c
 8007b44:	000f0028 	.word	0x000f0028
 8007b48:	00060004 	.word	0x00060004
 8007b4c:	0011001a 	.word	0x0011001a
 8007b50:	00180034 	.word	0x00180034
 8007b54:	0018002c 	.word	0x0018002c
 8007b58:	000c0014 	.word	0x000c0014
 8007b5c:	00180020 	.word	0x00180020
 8007b60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b62:	7bdb      	ldrb	r3, [r3, #15]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d00b      	beq.n	8007b80 <dwt_ioctl+0x12c0>
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d112      	bne.n	8007b92 <dwt_ioctl+0x12d2>
 8007b6c:	9400      	str	r4, [sp, #0]
 8007b6e:	2305      	movs	r3, #5
 8007b70:	2228      	movs	r2, #40	; 0x28
 8007b72:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007b76:	f7fc fec5 	bl	8004904 <dwt_readfromdevice>
 8007b7a:	2500      	movs	r5, #0
 8007b7c:	f7fe bf4a 	b.w	8006a14 <dwt_ioctl+0x154>
 8007b80:	9400      	str	r4, [sp, #0]
 8007b82:	2305      	movs	r3, #5
 8007b84:	2200      	movs	r2, #0
 8007b86:	49d3      	ldr	r1, [pc, #844]	; (8007ed4 <dwt_ioctl+0x1614>)
 8007b88:	f7fc febc 	bl	8004904 <dwt_readfromdevice>
 8007b8c:	2500      	movs	r5, #0
 8007b8e:	f7fe bf41 	b.w	8006a14 <dwt_ioctl+0x154>
 8007b92:	9400      	str	r4, [sp, #0]
 8007b94:	2305      	movs	r3, #5
 8007b96:	2200      	movs	r2, #0
 8007b98:	49cf      	ldr	r1, [pc, #828]	; (8007ed8 <dwt_ioctl+0x1618>)
 8007b9a:	f7fc feb3 	bl	8004904 <dwt_readfromdevice>
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	f7fe bf38 	b.w	8006a14 <dwt_ioctl+0x154>
 8007ba4:	2c00      	cmp	r4, #0
 8007ba6:	f000 8550 	beq.w	800864a <dwt_ioctl+0x1d8a>
 8007baa:	2200      	movs	r2, #0
 8007bac:	211c      	movs	r1, #28
 8007bae:	f7fc feb3 	bl	8004918 <dwt_read32bitoffsetreg>
 8007bb2:	6020      	str	r0, [r4, #0]
 8007bb4:	2500      	movs	r5, #0
 8007bb6:	f7fe bf2d 	b.w	8006a14 <dwt_ioctl+0x154>
 8007bba:	2c00      	cmp	r4, #0
 8007bbc:	f000 8548 	beq.w	8008650 <dwt_ioctl+0x1d90>
 8007bc0:	8825      	ldrh	r5, [r4, #0]
 8007bc2:	6867      	ldr	r7, [r4, #4]
 8007bc4:	7a23      	ldrb	r3, [r4, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8545 	beq.w	8008656 <dwt_ioctl+0x1d96>
 8007bcc:	463c      	mov	r4, r7
 8007bce:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7fd fb3b 	bl	8005250 <_dwt_otpread>
 8007bda:	f844 0b04 	str.w	r0, [r4], #4
 8007bde:	3501      	adds	r5, #1
 8007be0:	b2ad      	uxth	r5, r5
 8007be2:	42bc      	cmp	r4, r7
 8007be4:	d1f5      	bne.n	8007bd2 <dwt_ioctl+0x1312>
 8007be6:	2500      	movs	r5, #0
 8007be8:	f7fe bf14 	b.w	8006a14 <dwt_ioctl+0x154>
 8007bec:	2c00      	cmp	r4, #0
 8007bee:	f000 8535 	beq.w	800865c <dwt_ioctl+0x1d9c>
 8007bf2:	7823      	ldrb	r3, [r4, #0]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	2128      	movs	r1, #40	; 0x28
 8007bf8:	f7fd fa7d 	bl	80050f6 <dwt_write8bitoffsetreg>
 8007bfc:	2500      	movs	r5, #0
 8007bfe:	f7fe bf09 	b.w	8006a14 <dwt_ioctl+0x154>
 8007c02:	f7fe fa87 	bl	8006114 <ull_run_pgfcal>
 8007c06:	4605      	mov	r5, r0
 8007c08:	f7fe bf04 	b.w	8006a14 <dwt_ioctl+0x154>
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	f7fe fb77 	bl	8006300 <ull_pgf_cal>
 8007c12:	4605      	mov	r5, r0
 8007c14:	f7fe befe 	b.w	8006a14 <dwt_ioctl+0x154>
 8007c18:	2c00      	cmp	r4, #0
 8007c1a:	f000 8522 	beq.w	8008662 <dwt_ioctl+0x1da2>
 8007c1e:	78a5      	ldrb	r5, [r4, #2]
 8007c20:	2101      	movs	r1, #1
 8007c22:	f7fd faeb 	bl	80051fc <ull_force_clocks>
 8007c26:	2100      	movs	r1, #0
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7fd ff8b 	bl	8005b44 <ull_enable_rf_tx>
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7fd ffbc 	bl	8005bac <ull_enable_rftx_blocks>
 8007c34:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8007c38:	2200      	movs	r2, #0
 8007c3a:	49a8      	ldr	r1, [pc, #672]	; (8007edc <dwt_ioctl+0x161c>)
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7fd fa5a 	bl	80050f6 <dwt_write8bitoffsetreg>
 8007c42:	2301      	movs	r3, #1
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	23ff      	movs	r3, #255	; 0xff
 8007c48:	2200      	movs	r2, #0
 8007c4a:	49a5      	ldr	r1, [pc, #660]	; (8007ee0 <dwt_ioctl+0x1620>)
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7fe f921 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8007c52:	4fa3      	ldr	r7, [pc, #652]	; (8007ee0 <dwt_ioctl+0x1620>)
 8007c54:	2500      	movs	r5, #0
 8007c56:	462a      	mov	r2, r5
 8007c58:	4639      	mov	r1, r7
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7fc fe84 	bl	8004968 <dwt_read8bitoffsetreg>
 8007c60:	f010 0f01 	tst.w	r0, #1
 8007c64:	d1f7      	bne.n	8007c56 <dwt_ioctl+0x1396>
 8007c66:	2200      	movs	r2, #0
 8007c68:	499e      	ldr	r1, [pc, #632]	; (8007ee4 <dwt_ioctl+0x1624>)
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7fc fe6a 	bl	8004944 <dwt_read16bitoffsetreg>
 8007c70:	4605      	mov	r5, r0
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7fd fe30 	bl	80058d8 <ull_disable_rftx_blocks>
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7fd fe36 	bl	80058ec <ull_disable_rf_tx>
 8007c80:	2105      	movs	r1, #5
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7fd faba 	bl	80051fc <ull_force_clocks>
 8007c88:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8007c8c:	8025      	strh	r5, [r4, #0]
 8007c8e:	2500      	movs	r5, #0
 8007c90:	f7fe bec0 	b.w	8006a14 <dwt_ioctl+0x154>
 8007c94:	2102      	movs	r1, #2
 8007c96:	f7fe f9bb 	bl	8006010 <ull_setdwstate>
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7fe f9b7 	bl	8006010 <ull_setdwstate>
 8007ca2:	2432      	movs	r4, #50	; 0x32
 8007ca4:	f04f 0814 	mov.w	r8, #20
 8007ca8:	2700      	movs	r7, #0
 8007caa:	2544      	movs	r5, #68	; 0x44
 8007cac:	4640      	mov	r0, r8
 8007cae:	f7f8 fde2 	bl	8000876 <deca_usleep>
 8007cb2:	463a      	mov	r2, r7
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f7fc fe56 	bl	8004968 <dwt_read8bitoffsetreg>
 8007cbc:	f010 0f02 	tst.w	r0, #2
 8007cc0:	d105      	bne.n	8007cce <dwt_ioctl+0x140e>
 8007cc2:	1e63      	subs	r3, r4, #1
 8007cc4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007cc8:	d1f0      	bne.n	8007cac <dwt_ioctl+0x13ec>
 8007cca:	2501      	movs	r5, #1
 8007ccc:	e000      	b.n	8007cd0 <dwt_ioctl+0x1410>
 8007cce:	2500      	movs	r5, #0
 8007cd0:	426d      	negs	r5, r5
 8007cd2:	f7fe be9f 	b.w	8006a14 <dwt_ioctl+0x154>
 8007cd6:	2c00      	cmp	r4, #0
 8007cd8:	f000 84c6 	beq.w	8008668 <dwt_ioctl+0x1da8>
 8007cdc:	7823      	ldrb	r3, [r4, #0]
 8007cde:	031b      	lsls	r3, r3, #12
 8007ce0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ce4:	7862      	ldrb	r2, [r4, #1]
 8007ce6:	2a01      	cmp	r2, #1
 8007ce8:	bf08      	it	eq
 8007cea:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	497c      	ldr	r1, [pc, #496]	; (8007ee8 <dwt_ioctl+0x1628>)
 8007cf8:	f7fd fee2 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	f7fe be89 	b.w	8006a14 <dwt_ioctl+0x154>
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	f000 84b3 	beq.w	800866e <dwt_ioctl+0x1dae>
 8007d08:	6862      	ldr	r2, [r4, #4]
 8007d0a:	6821      	ldr	r1, [r4, #0]
 8007d0c:	f7fe f818 	bl	8005d40 <ull_setgpiomode>
 8007d10:	2500      	movs	r5, #0
 8007d12:	f7fe be7f 	b.w	8006a14 <dwt_ioctl+0x154>
 8007d16:	2c00      	cmp	r4, #0
 8007d18:	f000 84ac 	beq.w	8008674 <dwt_ioctl+0x1db4>
 8007d1c:	8823      	ldrh	r3, [r4, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4972      	ldr	r1, [pc, #456]	; (8007eec <dwt_ioctl+0x162c>)
 8007d22:	f7fd fa3a 	bl	800519a <dwt_write16bitoffsetreg>
 8007d26:	2500      	movs	r5, #0
 8007d28:	f7fe be74 	b.w	8006a14 <dwt_ioctl+0x154>
 8007d2c:	2c00      	cmp	r4, #0
 8007d2e:	f000 84a4 	beq.w	800867a <dwt_ioctl+0x1dba>
 8007d32:	6862      	ldr	r2, [r4, #4]
 8007d34:	8821      	ldrh	r1, [r4, #0]
 8007d36:	f7fe fb13 	bl	8006360 <ull_setgpiovalue>
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	f7fe be6a 	b.w	8006a14 <dwt_ioctl+0x154>
 8007d40:	2c00      	cmp	r4, #0
 8007d42:	f000 849d 	beq.w	8008680 <dwt_ioctl+0x1dc0>
 8007d46:	7865      	ldrb	r5, [r4, #1]
 8007d48:	7823      	ldrb	r3, [r4, #0]
 8007d4a:	b18b      	cbz	r3, 8007d70 <dwt_ioctl+0x14b0>
 8007d4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d4e:	2200      	movs	r2, #0
 8007d50:	73da      	strb	r2, [r3, #15]
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d56:	2208      	movs	r2, #8
 8007d58:	b1e5      	cbz	r5, 8007d94 <dwt_ioctl+0x14d4>
 8007d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d5e:	9200      	str	r2, [sp, #0]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2110      	movs	r1, #16
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7fd feab 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 8007d6a:	2500      	movs	r5, #0
 8007d6c:	f7fe be52 	b.w	8006a14 <dwt_ioctl+0x154>
 8007d70:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d72:	2201      	movs	r2, #1
 8007d74:	73da      	strb	r2, [r3, #15]
 8007d76:	2318      	movs	r3, #24
 8007d78:	2200      	movs	r2, #0
 8007d7a:	495d      	ldr	r1, [pc, #372]	; (8007ef0 <dwt_ioctl+0x1630>)
 8007d7c:	f7fd fb0e 	bl	800539c <dwt_write32bitoffsetreg>
 8007d80:	23e8      	movs	r3, #232	; 0xe8
 8007d82:	2200      	movs	r2, #0
 8007d84:	495b      	ldr	r1, [pc, #364]	; (8007ef4 <dwt_ioctl+0x1634>)
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7fd fb08 	bl	800539c <dwt_write32bitoffsetreg>
 8007d8c:	f06f 0308 	mvn.w	r3, #8
 8007d90:	2200      	movs	r2, #0
 8007d92:	e7e1      	b.n	8007d58 <dwt_ioctl+0x1498>
 8007d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d98:	e7e1      	b.n	8007d5e <dwt_ioctl+0x149e>
 8007d9a:	2c00      	cmp	r4, #0
 8007d9c:	f000 8473 	beq.w	8008686 <dwt_ioctl+0x1dc6>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	2130      	movs	r1, #48	; 0x30
 8007da6:	f7fd faf9 	bl	800539c <dwt_write32bitoffsetreg>
 8007daa:	2500      	movs	r5, #0
 8007dac:	f7fe be32 	b.w	8006a14 <dwt_ioctl+0x154>
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	f000 846b 	beq.w	800868c <dwt_ioctl+0x1dcc>
 8007db6:	2200      	movs	r2, #0
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7fc fdad 	bl	8004918 <dwt_read32bitoffsetreg>
 8007dbe:	6020      	str	r0, [r4, #0]
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	f7fe be27 	b.w	8006a14 <dwt_ioctl+0x154>
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7fd fae6 	bl	800539c <dwt_write32bitoffsetreg>
 8007dd0:	2500      	movs	r5, #0
 8007dd2:	f7fe be1f 	b.w	8006a14 <dwt_ioctl+0x154>
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	f000 845b 	beq.w	8008692 <dwt_ioctl+0x1dd2>
 8007ddc:	2203      	movs	r2, #3
 8007dde:	4946      	ldr	r1, [pc, #280]	; (8007ef8 <dwt_ioctl+0x1638>)
 8007de0:	f7fc fdc2 	bl	8004968 <dwt_read8bitoffsetreg>
 8007de4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8007de8:	7020      	strb	r0, [r4, #0]
 8007dea:	2500      	movs	r5, #0
 8007dec:	f7fe be12 	b.w	8006a14 <dwt_ioctl+0x154>
 8007df0:	2c00      	cmp	r4, #0
 8007df2:	f000 8451 	beq.w	8008698 <dwt_ioctl+0x1dd8>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2144      	movs	r1, #68	; 0x44
 8007dfc:	f7fd face 	bl	800539c <dwt_write32bitoffsetreg>
 8007e00:	2500      	movs	r5, #0
 8007e02:	f7fe be07 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	f000 8449 	beq.w	800869e <dwt_ioctl+0x1dde>
 8007e0c:	8823      	ldrh	r3, [r4, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2148      	movs	r1, #72	; 0x48
 8007e12:	f7fd f9c2 	bl	800519a <dwt_write16bitoffsetreg>
 8007e16:	2500      	movs	r5, #0
 8007e18:	f7fe bdfc 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	f000 8441 	beq.w	80086a4 <dwt_ioctl+0x1de4>
 8007e22:	2200      	movs	r2, #0
 8007e24:	2144      	movs	r1, #68	; 0x44
 8007e26:	f7fc fd77 	bl	8004918 <dwt_read32bitoffsetreg>
 8007e2a:	6020      	str	r0, [r4, #0]
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	f7fe bdf1 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	f000 8439 	beq.w	80086aa <dwt_ioctl+0x1dea>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2148      	movs	r1, #72	; 0x48
 8007e3c:	f7fc fd82 	bl	8004944 <dwt_read16bitoffsetreg>
 8007e40:	6020      	str	r0, [r4, #0]
 8007e42:	2500      	movs	r5, #0
 8007e44:	f7fe bde6 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e48:	2c00      	cmp	r4, #0
 8007e4a:	f000 8431 	beq.w	80086b0 <dwt_ioctl+0x1df0>
 8007e4e:	7823      	ldrb	r3, [r4, #0]
 8007e50:	2200      	movs	r2, #0
 8007e52:	492a      	ldr	r1, [pc, #168]	; (8007efc <dwt_ioctl+0x163c>)
 8007e54:	f7fd f94f 	bl	80050f6 <dwt_write8bitoffsetreg>
 8007e58:	2500      	movs	r5, #0
 8007e5a:	f7fe bddb 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	f000 8429 	beq.w	80086b6 <dwt_ioctl+0x1df6>
 8007e64:	2200      	movs	r2, #0
 8007e66:	2144      	movs	r1, #68	; 0x44
 8007e68:	f7fc fd7e 	bl	8004968 <dwt_read8bitoffsetreg>
 8007e6c:	7020      	strb	r0, [r4, #0]
 8007e6e:	2500      	movs	r5, #0
 8007e70:	f7fe bdd0 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	f000 8421 	beq.w	80086bc <dwt_ioctl+0x1dfc>
 8007e7a:	f7fd f949 	bl	8005110 <ull_getframelength>
 8007e7e:	6020      	str	r0, [r4, #0]
 8007e80:	2500      	movs	r5, #0
 8007e82:	f7fe bdc7 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	f000 841b 	beq.w	80086c2 <dwt_ioctl+0x1e02>
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	491c      	ldr	r1, [pc, #112]	; (8007f00 <dwt_ioctl+0x1640>)
 8007e90:	f7fc fd58 	bl	8004944 <dwt_read16bitoffsetreg>
 8007e94:	8020      	strh	r0, [r4, #0]
 8007e96:	2500      	movs	r5, #0
 8007e98:	f7fe bdbc 	b.w	8006a14 <dwt_ioctl+0x154>
 8007e9c:	2c00      	cmp	r4, #0
 8007e9e:	f000 8413 	beq.w	80086c8 <dwt_ioctl+0x1e08>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4917      	ldr	r1, [pc, #92]	; (8007f04 <dwt_ioctl+0x1644>)
 8007ea6:	f7fc fd37 	bl	8004918 <dwt_read32bitoffsetreg>
 8007eaa:	6020      	str	r0, [r4, #0]
 8007eac:	2500      	movs	r5, #0
 8007eae:	f7fe bdb1 	b.w	8006a14 <dwt_ioctl+0x154>
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	f000 840b 	beq.w	80086ce <dwt_ioctl+0x1e0e>
 8007eb8:	8823      	ldrh	r3, [r4, #0]
 8007eba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	490f      	ldr	r1, [pc, #60]	; (8007f04 <dwt_ioctl+0x1644>)
 8007ec8:	f7fe f996 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8007ecc:	2500      	movs	r5, #0
 8007ece:	f7fe bda1 	b.w	8006a14 <dwt_ioctl+0x154>
 8007ed2:	bf00      	nop
 8007ed4:	00180028 	.word	0x00180028
 8007ed8:	000c0008 	.word	0x000c0008
 8007edc:	0007001c 	.word	0x0007001c
 8007ee0:	00080010 	.word	0x00080010
 8007ee4:	00080014 	.word	0x00080014
 8007ee8:	00070014 	.word	0x00070014
 8007eec:	00050008 	.word	0x00050008
 8007ef0:	001f000c 	.word	0x001f000c
 8007ef4:	001f0010 	.word	0x001f0010
 8007ef8:	00030060 	.word	0x00030060
 8007efc:	00010024 	.word	0x00010024
 8007f00:	0005002c 	.word	0x0005002c
 8007f04:	000e001a 	.word	0x000e001a
 8007f08:	2c00      	cmp	r4, #0
 8007f0a:	f000 83e3 	beq.w	80086d4 <dwt_ioctl+0x1e14>
 8007f0e:	88a7      	ldrh	r7, [r4, #4]
 8007f10:	68a3      	ldr	r3, [r4, #8]
 8007f12:	9309      	str	r3, [sp, #36]	; 0x24
 8007f14:	7b21      	ldrb	r1, [r4, #12]
 8007f16:	9106      	str	r1, [sp, #24]
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	9204      	str	r2, [sp, #16]
 8007f1c:	6962      	ldr	r2, [r4, #20]
 8007f1e:	9205      	str	r2, [sp, #20]
 8007f20:	f003 0203 	and.w	r2, r3, #3
 8007f24:	f3c3 0085 	ubfx	r0, r3, #2, #6
 8007f28:	2905      	cmp	r1, #5
 8007f2a:	d142      	bne.n	8007fb2 <dwt_ioctl+0x16f2>
 8007f2c:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8007f30:	bf28      	it	cs
 8007f32:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8007f36:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8008218 <dwt_ioctl+0x1958>
 8007f3a:	2f04      	cmp	r7, #4
 8007f3c:	d805      	bhi.n	8007f4a <dwt_ioctl+0x168a>
 8007f3e:	eb09 0300 	add.w	r3, r9, r0
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	3b05      	subs	r3, #5
 8007f46:	429f      	cmp	r7, r3
 8007f48:	db3b      	blt.n	8007fc2 <dwt_ioctl+0x1702>
 8007f4a:	2a01      	cmp	r2, #1
 8007f4c:	d877      	bhi.n	800803e <dwt_ioctl+0x177e>
 8007f4e:	4bae      	ldr	r3, [pc, #696]	; (8008208 <dwt_ioctl+0x1948>)
 8007f50:	5c99      	ldrb	r1, [r3, r2]
 8007f52:	463e      	mov	r6, r7
 8007f54:	42b9      	cmp	r1, r7
 8007f56:	da74      	bge.n	8008042 <dwt_ioctl+0x1782>
 8007f58:	1c55      	adds	r5, r2, #1
 8007f5a:	fa53 f585 	uxtab	r5, r3, r5
 8007f5e:	2300      	movs	r3, #0
 8007f60:	440b      	add	r3, r1
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3201      	adds	r2, #1
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	2a02      	cmp	r2, #2
 8007f6a:	d005      	beq.n	8007f78 <dwt_ioctl+0x16b8>
 8007f6c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007f70:	eba6 0c03 	sub.w	ip, r6, r3
 8007f74:	4561      	cmp	r1, ip
 8007f76:	dbf3      	blt.n	8007f60 <dwt_ioctl+0x16a0>
 8007f78:	429f      	cmp	r7, r3
 8007f7a:	bf08      	it	eq
 8007f7c:	9003      	streq	r0, [sp, #12]
 8007f7e:	d064      	beq.n	800804a <dwt_ioctl+0x178a>
 8007f80:	f107 0805 	add.w	r8, r7, #5
 8007f84:	fa1f f888 	uxth.w	r8, r8
 8007f88:	2580      	movs	r5, #128	; 0x80
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	9107      	str	r1, [sp, #28]
 8007f8e:	9103      	str	r1, [sp, #12]
 8007f90:	9108      	str	r1, [sp, #32]
 8007f92:	460e      	mov	r6, r1
 8007f94:	f04f 0b05 	mov.w	fp, #5
 8007f98:	46be      	mov	lr, r7
 8007f9a:	455f      	cmp	r7, fp
 8007f9c:	bf38      	it	cc
 8007f9e:	46de      	movcc	lr, fp
 8007fa0:	f1ae 0e05 	sub.w	lr, lr, #5
 8007fa4:	fa1f fe8e 	uxth.w	lr, lr
 8007fa8:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8008208 <dwt_ioctl+0x1948>
 8007fac:	46bc      	mov	ip, r7
 8007fae:	460f      	mov	r7, r1
 8007fb0:	e3dd      	b.n	800876e <dwt_ioctl+0x1eae>
 8007fb2:	f240 1331 	movw	r3, #305	; 0x131
 8007fb6:	429f      	cmp	r7, r3
 8007fb8:	bf28      	it	cs
 8007fba:	461f      	movcs	r7, r3
 8007fbc:	f8df 925c 	ldr.w	r9, [pc, #604]	; 800821c <dwt_ioctl+0x195c>
 8007fc0:	e7bb      	b.n	8007f3a <dwt_ioctl+0x167a>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9a05      	ldr	r2, [sp, #20]
 8007fc6:	8013      	strh	r3, [r2, #0]
 8007fc8:	9a04      	ldr	r2, [sp, #16]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fce:	600a      	str	r2, [r1, #0]
 8007fd0:	e04a      	b.n	8008068 <dwt_ioctl+0x17a8>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9a05      	ldr	r2, [sp, #20]
 8007fd6:	8013      	strh	r3, [r2, #0]
 8007fd8:	9b04      	ldr	r3, [sp, #16]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fe4:	e040      	b.n	8008068 <dwt_ioctl+0x17a8>
 8007fe6:	fa1f fb81 	uxth.w	fp, r1
 8007fea:	9207      	str	r2, [sp, #28]
 8007fec:	9003      	str	r0, [sp, #12]
 8007fee:	9308      	str	r3, [sp, #32]
 8007ff0:	2701      	movs	r7, #1
 8007ff2:	e3cd      	b.n	8008790 <dwt_ioctl+0x1ed0>
 8007ff4:	2f00      	cmp	r7, #0
 8007ff6:	f040 83a1 	bne.w	800873c <dwt_ioctl+0x1e7c>
 8007ffa:	4598      	cmp	r8, r3
 8007ffc:	f200 83a3 	bhi.w	8008746 <dwt_ioctl+0x1e86>
 8008000:	2e00      	cmp	r6, #0
 8008002:	d038      	beq.n	8008076 <dwt_ioctl+0x17b6>
 8008004:	283f      	cmp	r0, #63	; 0x3f
 8008006:	f000 83c8 	beq.w	800879a <dwt_ioctl+0x1eda>
 800800a:	2700      	movs	r7, #0
 800800c:	f819 1000 	ldrb.w	r1, [r9, r0]
 8008010:	1a5b      	subs	r3, r3, r1
 8008012:	b29b      	uxth	r3, r3
 8008014:	1e46      	subs	r6, r0, #1
 8008016:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800801a:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800801e:	bf18      	it	ne
 8008020:	2601      	movne	r6, #1
 8008022:	e39c      	b.n	800875e <dwt_ioctl+0x1e9e>
 8008024:	9906      	ldr	r1, [sp, #24]
 8008026:	2909      	cmp	r1, #9
 8008028:	f040 83bd 	bne.w	80087a6 <dwt_ioctl+0x1ee6>
 800802c:	213f      	movs	r1, #63	; 0x3f
 800802e:	9103      	str	r1, [sp, #12]
 8008030:	e00b      	b.n	800804a <dwt_ioctl+0x178a>
 8008032:	b2b3      	uxth	r3, r6
 8008034:	3201      	adds	r2, #1
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	213f      	movs	r1, #63	; 0x3f
 800803a:	9103      	str	r1, [sp, #12]
 800803c:	e005      	b.n	800804a <dwt_ioctl+0x178a>
 800803e:	2300      	movs	r3, #0
 8008040:	e79a      	b.n	8007f78 <dwt_ioctl+0x16b8>
 8008042:	2300      	movs	r3, #0
 8008044:	e798      	b.n	8007f78 <dwt_ioctl+0x16b8>
 8008046:	9003      	str	r0, [sp, #12]
 8008048:	4663      	mov	r3, ip
 800804a:	9905      	ldr	r1, [sp, #20]
 800804c:	800b      	strh	r3, [r1, #0]
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	0413      	lsls	r3, r2, #16
 8008058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800805c:	4313      	orrs	r3, r2
 800805e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008062:	9a04      	ldr	r2, [sp, #16]
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	2300      	movs	r3, #0
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	2500      	movs	r5, #0
 800806c:	f7fe bcd2 	b.w	8006a14 <dwt_ioctl+0x154>
 8008070:	9a07      	ldr	r2, [sp, #28]
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	e7e9      	b.n	800804a <dwt_ioctl+0x178a>
 8008076:	9003      	str	r0, [sp, #12]
 8008078:	e7e7      	b.n	800804a <dwt_ioctl+0x178a>
 800807a:	9a07      	ldr	r2, [sp, #28]
 800807c:	9b08      	ldr	r3, [sp, #32]
 800807e:	e7e4      	b.n	800804a <dwt_ioctl+0x178a>
 8008080:	213f      	movs	r1, #63	; 0x3f
 8008082:	9103      	str	r1, [sp, #12]
 8008084:	e7e1      	b.n	800804a <dwt_ioctl+0x178a>
 8008086:	2c00      	cmp	r4, #0
 8008088:	f000 8327 	beq.w	80086da <dwt_ioctl+0x1e1a>
 800808c:	7825      	ldrb	r5, [r4, #0]
 800808e:	6862      	ldr	r2, [r4, #4]
 8008090:	2a01      	cmp	r2, #1
 8008092:	bf15      	itete	ne
 8008094:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8008098:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800809c:	27df      	movne	r7, #223	; 0xdf
 800809e:	27ef      	moveq	r7, #239	; 0xef
 80080a0:	bf14      	ite	ne
 80080a2:	f04f 0820 	movne.w	r8, #32
 80080a6:	f04f 0810 	moveq.w	r8, #16
 80080aa:	2400      	movs	r4, #0
 80080ac:	9400      	str	r4, [sp, #0]
 80080ae:	4622      	mov	r2, r4
 80080b0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80080b4:	f7fd fd04 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 80080b8:	9400      	str	r4, [sp, #0]
 80080ba:	463b      	mov	r3, r7
 80080bc:	4622      	mov	r2, r4
 80080be:	4953      	ldr	r1, [pc, #332]	; (800820c <dwt_ioctl+0x194c>)
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7fd fee7 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80080c6:	2d01      	cmp	r5, #1
 80080c8:	d003      	beq.n	80080d2 <dwt_ioctl+0x1812>
 80080ca:	b165      	cbz	r5, 80080e6 <dwt_ioctl+0x1826>
 80080cc:	2500      	movs	r5, #0
 80080ce:	f7fe bca1 	b.w	8006a14 <dwt_ioctl+0x154>
 80080d2:	4625      	mov	r5, r4
 80080d4:	9400      	str	r4, [sp, #0]
 80080d6:	463b      	mov	r3, r7
 80080d8:	4622      	mov	r2, r4
 80080da:	494d      	ldr	r1, [pc, #308]	; (8008210 <dwt_ioctl+0x1950>)
 80080dc:	4630      	mov	r0, r6
 80080de:	f7fd fed9 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80080e2:	f7fe bc97 	b.w	8006a14 <dwt_ioctl+0x154>
 80080e6:	f8cd 8000 	str.w	r8, [sp]
 80080ea:	23ff      	movs	r3, #255	; 0xff
 80080ec:	2200      	movs	r2, #0
 80080ee:	4948      	ldr	r1, [pc, #288]	; (8008210 <dwt_ioctl+0x1950>)
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7fd fecf 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80080f6:	f7fe bc8d 	b.w	8006a14 <dwt_ioctl+0x154>
 80080fa:	2c00      	cmp	r4, #0
 80080fc:	f000 82f0 	beq.w	80086e0 <dwt_ioctl+0x1e20>
 8008100:	7822      	ldrb	r2, [r4, #0]
 8008102:	f012 0f01 	tst.w	r2, #1
 8008106:	d02d      	beq.n	8008164 <dwt_ioctl+0x18a4>
 8008108:	0157      	lsls	r7, r2, #5
 800810a:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800810e:	2440      	movs	r4, #64	; 0x40
 8008110:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008114:	f012 0f04 	tst.w	r2, #4
 8008118:	d028      	beq.n	800816c <dwt_ioctl+0x18ac>
 800811a:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800811e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008122:	0112      	lsls	r2, r2, #4
 8008124:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008128:	4317      	orrs	r7, r2
 800812a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800812e:	9200      	str	r2, [sp, #0]
 8008130:	43db      	mvns	r3, r3
 8008132:	2200      	movs	r2, #0
 8008134:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008138:	4630      	mov	r0, r6
 800813a:	f7fd fcc1 	bl	8005ac0 <dwt_modify32bitoffsetreg>
 800813e:	43e4      	mvns	r4, r4
 8008140:	b2a4      	uxth	r4, r4
 8008142:	2500      	movs	r5, #0
 8008144:	9500      	str	r5, [sp, #0]
 8008146:	4623      	mov	r3, r4
 8008148:	462a      	mov	r2, r5
 800814a:	4930      	ldr	r1, [pc, #192]	; (800820c <dwt_ioctl+0x194c>)
 800814c:	4630      	mov	r0, r6
 800814e:	f7fe f853 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8008152:	9700      	str	r7, [sp, #0]
 8008154:	4623      	mov	r3, r4
 8008156:	462a      	mov	r2, r5
 8008158:	492d      	ldr	r1, [pc, #180]	; (8008210 <dwt_ioctl+0x1950>)
 800815a:	4630      	mov	r0, r6
 800815c:	f7fe f84c 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8008160:	f7fe bc58 	b.w	8006a14 <dwt_ioctl+0x154>
 8008164:	2700      	movs	r7, #0
 8008166:	463c      	mov	r4, r7
 8008168:	463b      	mov	r3, r7
 800816a:	e7d3      	b.n	8008114 <dwt_ioctl+0x1854>
 800816c:	2200      	movs	r2, #0
 800816e:	e7de      	b.n	800812e <dwt_ioctl+0x186e>
 8008170:	2308      	movs	r3, #8
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	23ff      	movs	r3, #255	; 0xff
 8008176:	2201      	movs	r2, #1
 8008178:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800817c:	f7fd fe8a 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8008180:	4c24      	ldr	r4, [pc, #144]	; (8008214 <dwt_ioctl+0x1954>)
 8008182:	2302      	movs	r3, #2
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	23ff      	movs	r3, #255	; 0xff
 8008188:	2203      	movs	r2, #3
 800818a:	4621      	mov	r1, r4
 800818c:	4630      	mov	r0, r6
 800818e:	f7fd fe81 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8008192:	2500      	movs	r5, #0
 8008194:	9500      	str	r5, [sp, #0]
 8008196:	23f7      	movs	r3, #247	; 0xf7
 8008198:	2201      	movs	r2, #1
 800819a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800819e:	4630      	mov	r0, r6
 80081a0:	f7fd fe78 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80081a4:	9500      	str	r5, [sp, #0]
 80081a6:	23fd      	movs	r3, #253	; 0xfd
 80081a8:	2203      	movs	r2, #3
 80081aa:	4621      	mov	r1, r4
 80081ac:	4630      	mov	r0, r6
 80081ae:	f7fd fe71 	bl	8005e94 <dwt_modify8bitoffsetreg>
 80081b2:	f7fe bc2f 	b.w	8006a14 <dwt_ioctl+0x154>
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	f000 8295 	beq.w	80086e6 <dwt_ioctl+0x1e26>
 80081bc:	8863      	ldrh	r3, [r4, #2]
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80081c4:	7822      	ldrb	r2, [r4, #0]
 80081c6:	b10a      	cbz	r2, 80081cc <dwt_ioctl+0x190c>
 80081c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	f24f 0307 	movw	r3, #61447	; 0xf007
 80081d2:	2200      	movs	r2, #0
 80081d4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80081d8:	4630      	mov	r0, r6
 80081da:	f7fe f80d 	bl	80061f8 <dwt_modify16bitoffsetreg>
 80081de:	2500      	movs	r5, #0
 80081e0:	f7fe bc18 	b.w	8006a14 <dwt_ioctl+0x154>
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	f000 8281 	beq.w	80086ec <dwt_ioctl+0x1e2c>
 80081ea:	b2e3      	uxtb	r3, r4
 80081ec:	1c9a      	adds	r2, r3, #2
 80081ee:	2301      	movs	r3, #1
 80081f0:	4093      	lsls	r3, r2
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2200      	movs	r2, #0
 80081f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80081fc:	f7fc ff7b 	bl	80050f6 <dwt_write8bitoffsetreg>
 8008200:	2500      	movs	r5, #0
 8008202:	f7fe bc07 	b.w	8006a14 <dwt_ioctl+0x154>
 8008206:	bf00      	nop
 8008208:	08011ff0 	.word	0x08011ff0
 800820c:	00050008 	.word	0x00050008
 8008210:	0005000c 	.word	0x0005000c
 8008214:	00110008 	.word	0x00110008
 8008218:	08011f70 	.word	0x08011f70
 800821c:	08011fb0 	.word	0x08011fb0
 8008220:	2c00      	cmp	r4, #0
 8008222:	f000 8266 	beq.w	80086f2 <dwt_ioctl+0x1e32>
 8008226:	7ae3      	ldrb	r3, [r4, #11]
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8265 	beq.w	80086f8 <dwt_ioctl+0x1e38>
 800822e:	7b63      	ldrb	r3, [r4, #13]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d921      	bls.n	8008278 <dwt_ioctl+0x19b8>
 8008234:	7b22      	ldrb	r2, [r4, #12]
 8008236:	4bd7      	ldr	r3, [pc, #860]	; (8008594 <dwt_ioctl+0x1cd4>)
 8008238:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800823c:	0112      	lsls	r2, r2, #4
 800823e:	0ad3      	lsrs	r3, r2, #11
 8008240:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008248:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800824c:	bf28      	it	cs
 800824e:	3301      	addcs	r3, #1
 8008250:	b29b      	uxth	r3, r3
 8008252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	f64f 7380 	movw	r3, #65408	; 0xff80
 800825c:	2202      	movs	r2, #2
 800825e:	49ce      	ldr	r1, [pc, #824]	; (8008598 <dwt_ioctl+0x1cd8>)
 8008260:	4630      	mov	r0, r6
 8008262:	f7fd ffc9 	bl	80061f8 <dwt_modify16bitoffsetreg>
 8008266:	2394      	movs	r3, #148	; 0x94
 8008268:	2200      	movs	r2, #0
 800826a:	49cc      	ldr	r1, [pc, #816]	; (800859c <dwt_ioctl+0x1cdc>)
 800826c:	4630      	mov	r0, r6
 800826e:	f7fc ff42 	bl	80050f6 <dwt_write8bitoffsetreg>
 8008272:	2500      	movs	r5, #0
 8008274:	f7fe bbce 	b.w	8006a14 <dwt_ioctl+0x154>
 8008278:	7b22      	ldrb	r2, [r4, #12]
 800827a:	4bc6      	ldr	r3, [pc, #792]	; (8008594 <dwt_ioctl+0x1cd4>)
 800827c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008280:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8008284:	fb02 f203 	mul.w	r2, r2, r3
 8008288:	0c93      	lsrs	r3, r2, #18
 800828a:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800828e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008292:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008296:	bf28      	it	cs
 8008298:	3301      	addcs	r3, #1
 800829a:	b29b      	uxth	r3, r3
 800829c:	e7d9      	b.n	8008252 <dwt_ioctl+0x1992>
 800829e:	2c00      	cmp	r4, #0
 80082a0:	f000 822d 	beq.w	80086fe <dwt_ioctl+0x1e3e>
 80082a4:	2200      	movs	r2, #0
 80082a6:	49be      	ldr	r1, [pc, #760]	; (80085a0 <dwt_ioctl+0x1ce0>)
 80082a8:	f7fc fb36 	bl	8004918 <dwt_read32bitoffsetreg>
 80082ac:	6020      	str	r0, [r4, #0]
 80082ae:	2500      	movs	r5, #0
 80082b0:	f7fe bbb0 	b.w	8006a14 <dwt_ioctl+0x154>
 80082b4:	2c00      	cmp	r4, #0
 80082b6:	f000 8225 	beq.w	8008704 <dwt_ioctl+0x1e44>
 80082ba:	2200      	movs	r2, #0
 80082bc:	49b9      	ldr	r1, [pc, #740]	; (80085a4 <dwt_ioctl+0x1ce4>)
 80082be:	f7fc fb2b 	bl	8004918 <dwt_read32bitoffsetreg>
 80082c2:	6020      	str	r0, [r4, #0]
 80082c4:	2500      	movs	r5, #0
 80082c6:	f7fe bba5 	b.w	8006a14 <dwt_ioctl+0x154>
 80082ca:	2c00      	cmp	r4, #0
 80082cc:	f000 821d 	beq.w	800870a <dwt_ioctl+0x1e4a>
 80082d0:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	2500      	movs	r5, #0
 80082d8:	f7fe bb9c 	b.w	8006a14 <dwt_ioctl+0x154>
 80082dc:	2c00      	cmp	r4, #0
 80082de:	f000 8217 	beq.w	8008710 <dwt_ioctl+0x1e50>
 80082e2:	2500      	movs	r5, #0
 80082e4:	950b      	str	r5, [sp, #44]	; 0x2c
 80082e6:	af10      	add	r7, sp, #64	; 0x40
 80082e8:	2319      	movs	r3, #25
 80082ea:	f847 3d10 	str.w	r3, [r7, #-16]!
 80082ee:	9700      	str	r7, [sp, #0]
 80082f0:	2304      	movs	r3, #4
 80082f2:	462a      	mov	r2, r5
 80082f4:	49ac      	ldr	r1, [pc, #688]	; (80085a8 <dwt_ioctl+0x1ce8>)
 80082f6:	f7fc fef3 	bl	80050e0 <dwt_writetodevice>
 80082fa:	f641 7348 	movw	r3, #8008	; 0x1f48
 80082fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008300:	9700      	str	r7, [sp, #0]
 8008302:	2304      	movs	r3, #4
 8008304:	462a      	mov	r2, r5
 8008306:	49a9      	ldr	r1, [pc, #676]	; (80085ac <dwt_ioctl+0x1cec>)
 8008308:	4630      	mov	r0, r6
 800830a:	f7fc fee9 	bl	80050e0 <dwt_writetodevice>
 800830e:	ab0b      	add	r3, sp, #44	; 0x2c
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2304      	movs	r3, #4
 8008314:	462a      	mov	r2, r5
 8008316:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800831a:	4630      	mov	r0, r6
 800831c:	f7fc faf2 	bl	8004904 <dwt_readfromdevice>
 8008320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	f7fe bb76 	b.w	8006a14 <dwt_ioctl+0x154>
 8008328:	2c00      	cmp	r4, #0
 800832a:	f000 81f4 	beq.w	8008716 <dwt_ioctl+0x1e56>
 800832e:	2200      	movs	r2, #0
 8008330:	499f      	ldr	r1, [pc, #636]	; (80085b0 <dwt_ioctl+0x1cf0>)
 8008332:	f7fc faf1 	bl	8004918 <dwt_read32bitoffsetreg>
 8008336:	b280      	uxth	r0, r0
 8008338:	6020      	str	r0, [r4, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	499d      	ldr	r1, [pc, #628]	; (80085b4 <dwt_ioctl+0x1cf4>)
 800833e:	4630      	mov	r0, r6
 8008340:	f7fc faea 	bl	8004918 <dwt_read32bitoffsetreg>
 8008344:	0d43      	lsrs	r3, r0, #21
 8008346:	019b      	lsls	r3, r3, #6
 8008348:	b29b      	uxth	r3, r3
 800834a:	6063      	str	r3, [r4, #4]
 800834c:	2500      	movs	r5, #0
 800834e:	f7fe bb61 	b.w	8006a14 <dwt_ioctl+0x154>
 8008352:	2c00      	cmp	r4, #0
 8008354:	f000 81e2 	beq.w	800871c <dwt_ioctl+0x1e5c>
 8008358:	7d63      	ldrb	r3, [r4, #21]
 800835a:	b12b      	cbz	r3, 8008368 <dwt_ioctl+0x1aa8>
 800835c:	2b01      	cmp	r3, #1
 800835e:	d037      	beq.n	80083d0 <dwt_ioctl+0x1b10>
 8008360:	2b02      	cmp	r3, #2
 8008362:	d05e      	beq.n	8008422 <dwt_ioctl+0x1b62>
 8008364:	23ff      	movs	r3, #255	; 0xff
 8008366:	e02f      	b.n	80083c8 <dwt_ioctl+0x1b08>
 8008368:	2200      	movs	r2, #0
 800836a:	4993      	ldr	r1, [pc, #588]	; (80085b8 <dwt_ioctl+0x1cf8>)
 800836c:	f7fc fad4 	bl	8004918 <dwt_read32bitoffsetreg>
 8008370:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008374:	6020      	str	r0, [r4, #0]
 8008376:	2200      	movs	r2, #0
 8008378:	4990      	ldr	r1, [pc, #576]	; (80085bc <dwt_ioctl+0x1cfc>)
 800837a:	4630      	mov	r0, r6
 800837c:	f7fc facc 	bl	8004918 <dwt_read32bitoffsetreg>
 8008380:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008384:	6060      	str	r0, [r4, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	498d      	ldr	r1, [pc, #564]	; (80085c0 <dwt_ioctl+0x1d00>)
 800838a:	4630      	mov	r0, r6
 800838c:	f7fc fac4 	bl	8004918 <dwt_read32bitoffsetreg>
 8008390:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008394:	60a0      	str	r0, [r4, #8]
 8008396:	2200      	movs	r2, #0
 8008398:	498a      	ldr	r1, [pc, #552]	; (80085c4 <dwt_ioctl+0x1d04>)
 800839a:	4630      	mov	r0, r6
 800839c:	f7fc fabc 	bl	8004918 <dwt_read32bitoffsetreg>
 80083a0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80083a4:	60e0      	str	r0, [r4, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	4987      	ldr	r1, [pc, #540]	; (80085c8 <dwt_ioctl+0x1d08>)
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7fc fab4 	bl	8004918 <dwt_read32bitoffsetreg>
 80083b0:	f3c0 0010 	ubfx	r0, r0, #0, #17
 80083b4:	6120      	str	r0, [r4, #16]
 80083b6:	2203      	movs	r2, #3
 80083b8:	4979      	ldr	r1, [pc, #484]	; (80085a0 <dwt_ioctl+0x1ce0>)
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7fc fad4 	bl	8004968 <dwt_read8bitoffsetreg>
 80083c0:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80083c4:	7520      	strb	r0, [r4, #20]
 80083c6:	2300      	movs	r3, #0
 80083c8:	75a3      	strb	r3, [r4, #22]
 80083ca:	2500      	movs	r5, #0
 80083cc:	f7fe bb22 	b.w	8006a14 <dwt_ioctl+0x154>
 80083d0:	2200      	movs	r2, #0
 80083d2:	497e      	ldr	r1, [pc, #504]	; (80085cc <dwt_ioctl+0x1d0c>)
 80083d4:	f7fc faa0 	bl	8004918 <dwt_read32bitoffsetreg>
 80083d8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80083dc:	6020      	str	r0, [r4, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	497b      	ldr	r1, [pc, #492]	; (80085d0 <dwt_ioctl+0x1d10>)
 80083e2:	4630      	mov	r0, r6
 80083e4:	f7fc fa98 	bl	8004918 <dwt_read32bitoffsetreg>
 80083e8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80083ec:	6060      	str	r0, [r4, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	4978      	ldr	r1, [pc, #480]	; (80085d4 <dwt_ioctl+0x1d14>)
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7fc fa90 	bl	8004918 <dwt_read32bitoffsetreg>
 80083f8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80083fc:	60a0      	str	r0, [r4, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8008404:	4630      	mov	r0, r6
 8008406:	f7fc fa87 	bl	8004918 <dwt_read32bitoffsetreg>
 800840a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800840e:	60e0      	str	r0, [r4, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	4971      	ldr	r1, [pc, #452]	; (80085d8 <dwt_ioctl+0x1d18>)
 8008414:	4630      	mov	r0, r6
 8008416:	f7fc fa7f 	bl	8004918 <dwt_read32bitoffsetreg>
 800841a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800841e:	6120      	str	r0, [r4, #16]
 8008420:	e7c9      	b.n	80083b6 <dwt_ioctl+0x1af6>
 8008422:	2200      	movs	r2, #0
 8008424:	496d      	ldr	r1, [pc, #436]	; (80085dc <dwt_ioctl+0x1d1c>)
 8008426:	f7fc fa77 	bl	8004918 <dwt_read32bitoffsetreg>
 800842a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800842e:	6020      	str	r0, [r4, #0]
 8008430:	2200      	movs	r2, #0
 8008432:	496b      	ldr	r1, [pc, #428]	; (80085e0 <dwt_ioctl+0x1d20>)
 8008434:	4630      	mov	r0, r6
 8008436:	f7fc fa6f 	bl	8004918 <dwt_read32bitoffsetreg>
 800843a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800843e:	6060      	str	r0, [r4, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	4968      	ldr	r1, [pc, #416]	; (80085e4 <dwt_ioctl+0x1d24>)
 8008444:	4630      	mov	r0, r6
 8008446:	f7fc fa67 	bl	8004918 <dwt_read32bitoffsetreg>
 800844a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800844e:	60a0      	str	r0, [r4, #8]
 8008450:	2200      	movs	r2, #0
 8008452:	4965      	ldr	r1, [pc, #404]	; (80085e8 <dwt_ioctl+0x1d28>)
 8008454:	4630      	mov	r0, r6
 8008456:	f7fc fa5f 	bl	8004918 <dwt_read32bitoffsetreg>
 800845a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800845e:	60e0      	str	r0, [r4, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	4962      	ldr	r1, [pc, #392]	; (80085ec <dwt_ioctl+0x1d2c>)
 8008464:	4630      	mov	r0, r6
 8008466:	f7fc fa57 	bl	8004918 <dwt_read32bitoffsetreg>
 800846a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800846e:	6120      	str	r0, [r4, #16]
 8008470:	e7a1      	b.n	80083b6 <dwt_ioctl+0x1af6>
 8008472:	2500      	movs	r5, #0
 8008474:	f7fe bace 	b.w	8006a14 <dwt_ioctl+0x154>
 8008478:	2500      	movs	r5, #0
 800847a:	f7fe bacb 	b.w	8006a14 <dwt_ioctl+0x154>
 800847e:	2500      	movs	r5, #0
 8008480:	f7fe bac8 	b.w	8006a14 <dwt_ioctl+0x154>
 8008484:	2500      	movs	r5, #0
 8008486:	f7fe bac5 	b.w	8006a14 <dwt_ioctl+0x154>
 800848a:	2500      	movs	r5, #0
 800848c:	f7fe bac2 	b.w	8006a14 <dwt_ioctl+0x154>
 8008490:	2500      	movs	r5, #0
 8008492:	f7fe babf 	b.w	8006a14 <dwt_ioctl+0x154>
 8008496:	2500      	movs	r5, #0
 8008498:	f7fe babc 	b.w	8006a14 <dwt_ioctl+0x154>
 800849c:	2500      	movs	r5, #0
 800849e:	f7fe bab9 	b.w	8006a14 <dwt_ioctl+0x154>
 80084a2:	2500      	movs	r5, #0
 80084a4:	f7fe bab6 	b.w	8006a14 <dwt_ioctl+0x154>
 80084a8:	2500      	movs	r5, #0
 80084aa:	f7fe bab3 	b.w	8006a14 <dwt_ioctl+0x154>
 80084ae:	2500      	movs	r5, #0
 80084b0:	f7fe bab0 	b.w	8006a14 <dwt_ioctl+0x154>
 80084b4:	2500      	movs	r5, #0
 80084b6:	f7fe baad 	b.w	8006a14 <dwt_ioctl+0x154>
 80084ba:	2500      	movs	r5, #0
 80084bc:	f7fe baaa 	b.w	8006a14 <dwt_ioctl+0x154>
 80084c0:	2500      	movs	r5, #0
 80084c2:	f7fe baa7 	b.w	8006a14 <dwt_ioctl+0x154>
 80084c6:	2500      	movs	r5, #0
 80084c8:	f7fe baa4 	b.w	8006a14 <dwt_ioctl+0x154>
 80084cc:	2500      	movs	r5, #0
 80084ce:	f7fe baa1 	b.w	8006a14 <dwt_ioctl+0x154>
 80084d2:	2500      	movs	r5, #0
 80084d4:	f7fe ba9e 	b.w	8006a14 <dwt_ioctl+0x154>
 80084d8:	2500      	movs	r5, #0
 80084da:	f7fe ba9b 	b.w	8006a14 <dwt_ioctl+0x154>
 80084de:	2500      	movs	r5, #0
 80084e0:	f7fe ba98 	b.w	8006a14 <dwt_ioctl+0x154>
 80084e4:	2500      	movs	r5, #0
 80084e6:	f7fe ba95 	b.w	8006a14 <dwt_ioctl+0x154>
 80084ea:	2500      	movs	r5, #0
 80084ec:	f7fe ba92 	b.w	8006a14 <dwt_ioctl+0x154>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f7fe ba8f 	b.w	8006a14 <dwt_ioctl+0x154>
 80084f6:	2500      	movs	r5, #0
 80084f8:	f7fe ba8c 	b.w	8006a14 <dwt_ioctl+0x154>
 80084fc:	2500      	movs	r5, #0
 80084fe:	f7fe ba89 	b.w	8006a14 <dwt_ioctl+0x154>
 8008502:	2500      	movs	r5, #0
 8008504:	f7fe ba86 	b.w	8006a14 <dwt_ioctl+0x154>
 8008508:	2500      	movs	r5, #0
 800850a:	f7fe ba83 	b.w	8006a14 <dwt_ioctl+0x154>
 800850e:	2500      	movs	r5, #0
 8008510:	f7fe ba80 	b.w	8006a14 <dwt_ioctl+0x154>
 8008514:	2500      	movs	r5, #0
 8008516:	f7fe ba7d 	b.w	8006a14 <dwt_ioctl+0x154>
 800851a:	2500      	movs	r5, #0
 800851c:	f7fe ba7a 	b.w	8006a14 <dwt_ioctl+0x154>
 8008520:	2500      	movs	r5, #0
 8008522:	f7fe ba77 	b.w	8006a14 <dwt_ioctl+0x154>
 8008526:	2500      	movs	r5, #0
 8008528:	f7fe ba74 	b.w	8006a14 <dwt_ioctl+0x154>
 800852c:	2500      	movs	r5, #0
 800852e:	f7fe ba71 	b.w	8006a14 <dwt_ioctl+0x154>
 8008532:	2500      	movs	r5, #0
 8008534:	f7fe ba6e 	b.w	8006a14 <dwt_ioctl+0x154>
 8008538:	2500      	movs	r5, #0
 800853a:	f7fe ba6b 	b.w	8006a14 <dwt_ioctl+0x154>
 800853e:	2500      	movs	r5, #0
 8008540:	f7fe ba68 	b.w	8006a14 <dwt_ioctl+0x154>
 8008544:	2500      	movs	r5, #0
 8008546:	f7fe ba65 	b.w	8006a14 <dwt_ioctl+0x154>
 800854a:	2500      	movs	r5, #0
 800854c:	f7fe ba62 	b.w	8006a14 <dwt_ioctl+0x154>
 8008550:	2500      	movs	r5, #0
 8008552:	f7fe ba5f 	b.w	8006a14 <dwt_ioctl+0x154>
 8008556:	2500      	movs	r5, #0
 8008558:	f7fe ba5c 	b.w	8006a14 <dwt_ioctl+0x154>
 800855c:	2500      	movs	r5, #0
 800855e:	f7fe ba59 	b.w	8006a14 <dwt_ioctl+0x154>
 8008562:	2500      	movs	r5, #0
 8008564:	f7fe ba56 	b.w	8006a14 <dwt_ioctl+0x154>
 8008568:	2500      	movs	r5, #0
 800856a:	f7fe ba53 	b.w	8006a14 <dwt_ioctl+0x154>
 800856e:	2500      	movs	r5, #0
 8008570:	f7fe ba50 	b.w	8006a14 <dwt_ioctl+0x154>
 8008574:	2500      	movs	r5, #0
 8008576:	f7fe ba4d 	b.w	8006a14 <dwt_ioctl+0x154>
 800857a:	2500      	movs	r5, #0
 800857c:	f7fe ba4a 	b.w	8006a14 <dwt_ioctl+0x154>
 8008580:	2500      	movs	r5, #0
 8008582:	f7fe ba47 	b.w	8006a14 <dwt_ioctl+0x154>
 8008586:	2500      	movs	r5, #0
 8008588:	f7fe ba44 	b.w	8006a14 <dwt_ioctl+0x154>
 800858c:	2500      	movs	r5, #0
 800858e:	f7fe ba41 	b.w	8006a14 <dwt_ioctl+0x154>
 8008592:	bf00      	nop
 8008594:	0801202c 	.word	0x0801202c
 8008598:	000e0012 	.word	0x000e0012
 800859c:	000e0016 	.word	0x000e0016
 80085a0:	00030060 	.word	0x00030060
 80085a4:	000f0048 	.word	0x000f0048
 80085a8:	001f0004 	.word	0x001f0004
 80085ac:	001f0008 	.word	0x001f0008
 80085b0:	000c0048 	.word	0x000c0048
 80085b4:	000c0028 	.word	0x000c0028
 80085b8:	000c0058 	.word	0x000c0058
 80085bc:	000c0030 	.word	0x000c0030
 80085c0:	000c0034 	.word	0x000c0034
 80085c4:	000c0038 	.word	0x000c0038
 80085c8:	000c002c 	.word	0x000c002c
 80085cc:	000d0020 	.word	0x000d0020
 80085d0:	000c0064 	.word	0x000c0064
 80085d4:	000c0068 	.word	0x000c0068
 80085d8:	000c0060 	.word	0x000c0060
 80085dc:	000d0068 	.word	0x000d0068
 80085e0:	000d0040 	.word	0x000d0040
 80085e4:	000d0044 	.word	0x000d0044
 80085e8:	000d0048 	.word	0x000d0048
 80085ec:	000d003c 	.word	0x000d003c
 80085f0:	2500      	movs	r5, #0
 80085f2:	f7fe ba0f 	b.w	8006a14 <dwt_ioctl+0x154>
 80085f6:	2500      	movs	r5, #0
 80085f8:	f7fe ba0c 	b.w	8006a14 <dwt_ioctl+0x154>
 80085fc:	2500      	movs	r5, #0
 80085fe:	f7fe ba09 	b.w	8006a14 <dwt_ioctl+0x154>
 8008602:	2500      	movs	r5, #0
 8008604:	f7fe ba06 	b.w	8006a14 <dwt_ioctl+0x154>
 8008608:	2500      	movs	r5, #0
 800860a:	f7fe ba03 	b.w	8006a14 <dwt_ioctl+0x154>
 800860e:	2500      	movs	r5, #0
 8008610:	f7fe ba00 	b.w	8006a14 <dwt_ioctl+0x154>
 8008614:	2500      	movs	r5, #0
 8008616:	f7fe b9fd 	b.w	8006a14 <dwt_ioctl+0x154>
 800861a:	2500      	movs	r5, #0
 800861c:	f7fe b9fa 	b.w	8006a14 <dwt_ioctl+0x154>
 8008620:	2500      	movs	r5, #0
 8008622:	f7fe b9f7 	b.w	8006a14 <dwt_ioctl+0x154>
 8008626:	2500      	movs	r5, #0
 8008628:	f7fe b9f4 	b.w	8006a14 <dwt_ioctl+0x154>
 800862c:	2500      	movs	r5, #0
 800862e:	f7fe b9f1 	b.w	8006a14 <dwt_ioctl+0x154>
 8008632:	2500      	movs	r5, #0
 8008634:	f7fe b9ee 	b.w	8006a14 <dwt_ioctl+0x154>
 8008638:	2500      	movs	r5, #0
 800863a:	f7fe b9eb 	b.w	8006a14 <dwt_ioctl+0x154>
 800863e:	2500      	movs	r5, #0
 8008640:	f7fe b9e8 	b.w	8006a14 <dwt_ioctl+0x154>
 8008644:	2500      	movs	r5, #0
 8008646:	f7fe b9e5 	b.w	8006a14 <dwt_ioctl+0x154>
 800864a:	2500      	movs	r5, #0
 800864c:	f7fe b9e2 	b.w	8006a14 <dwt_ioctl+0x154>
 8008650:	2500      	movs	r5, #0
 8008652:	f7fe b9df 	b.w	8006a14 <dwt_ioctl+0x154>
 8008656:	2500      	movs	r5, #0
 8008658:	f7fe b9dc 	b.w	8006a14 <dwt_ioctl+0x154>
 800865c:	2500      	movs	r5, #0
 800865e:	f7fe b9d9 	b.w	8006a14 <dwt_ioctl+0x154>
 8008662:	2500      	movs	r5, #0
 8008664:	f7fe b9d6 	b.w	8006a14 <dwt_ioctl+0x154>
 8008668:	2500      	movs	r5, #0
 800866a:	f7fe b9d3 	b.w	8006a14 <dwt_ioctl+0x154>
 800866e:	2500      	movs	r5, #0
 8008670:	f7fe b9d0 	b.w	8006a14 <dwt_ioctl+0x154>
 8008674:	2500      	movs	r5, #0
 8008676:	f7fe b9cd 	b.w	8006a14 <dwt_ioctl+0x154>
 800867a:	2500      	movs	r5, #0
 800867c:	f7fe b9ca 	b.w	8006a14 <dwt_ioctl+0x154>
 8008680:	2500      	movs	r5, #0
 8008682:	f7fe b9c7 	b.w	8006a14 <dwt_ioctl+0x154>
 8008686:	2500      	movs	r5, #0
 8008688:	f7fe b9c4 	b.w	8006a14 <dwt_ioctl+0x154>
 800868c:	2500      	movs	r5, #0
 800868e:	f7fe b9c1 	b.w	8006a14 <dwt_ioctl+0x154>
 8008692:	2500      	movs	r5, #0
 8008694:	f7fe b9be 	b.w	8006a14 <dwt_ioctl+0x154>
 8008698:	2500      	movs	r5, #0
 800869a:	f7fe b9bb 	b.w	8006a14 <dwt_ioctl+0x154>
 800869e:	2500      	movs	r5, #0
 80086a0:	f7fe b9b8 	b.w	8006a14 <dwt_ioctl+0x154>
 80086a4:	2500      	movs	r5, #0
 80086a6:	f7fe b9b5 	b.w	8006a14 <dwt_ioctl+0x154>
 80086aa:	2500      	movs	r5, #0
 80086ac:	f7fe b9b2 	b.w	8006a14 <dwt_ioctl+0x154>
 80086b0:	2500      	movs	r5, #0
 80086b2:	f7fe b9af 	b.w	8006a14 <dwt_ioctl+0x154>
 80086b6:	2500      	movs	r5, #0
 80086b8:	f7fe b9ac 	b.w	8006a14 <dwt_ioctl+0x154>
 80086bc:	2500      	movs	r5, #0
 80086be:	f7fe b9a9 	b.w	8006a14 <dwt_ioctl+0x154>
 80086c2:	2500      	movs	r5, #0
 80086c4:	f7fe b9a6 	b.w	8006a14 <dwt_ioctl+0x154>
 80086c8:	2500      	movs	r5, #0
 80086ca:	f7fe b9a3 	b.w	8006a14 <dwt_ioctl+0x154>
 80086ce:	2500      	movs	r5, #0
 80086d0:	f7fe b9a0 	b.w	8006a14 <dwt_ioctl+0x154>
 80086d4:	2500      	movs	r5, #0
 80086d6:	f7fe b99d 	b.w	8006a14 <dwt_ioctl+0x154>
 80086da:	2500      	movs	r5, #0
 80086dc:	f7fe b99a 	b.w	8006a14 <dwt_ioctl+0x154>
 80086e0:	2500      	movs	r5, #0
 80086e2:	f7fe b997 	b.w	8006a14 <dwt_ioctl+0x154>
 80086e6:	2500      	movs	r5, #0
 80086e8:	f7fe b994 	b.w	8006a14 <dwt_ioctl+0x154>
 80086ec:	2500      	movs	r5, #0
 80086ee:	f7fe b991 	b.w	8006a14 <dwt_ioctl+0x154>
 80086f2:	2500      	movs	r5, #0
 80086f4:	f7fe b98e 	b.w	8006a14 <dwt_ioctl+0x154>
 80086f8:	2500      	movs	r5, #0
 80086fa:	f7fe b98b 	b.w	8006a14 <dwt_ioctl+0x154>
 80086fe:	2500      	movs	r5, #0
 8008700:	f7fe b988 	b.w	8006a14 <dwt_ioctl+0x154>
 8008704:	2500      	movs	r5, #0
 8008706:	f7fe b985 	b.w	8006a14 <dwt_ioctl+0x154>
 800870a:	2500      	movs	r5, #0
 800870c:	f7fe b982 	b.w	8006a14 <dwt_ioctl+0x154>
 8008710:	2500      	movs	r5, #0
 8008712:	f7fe b97f 	b.w	8006a14 <dwt_ioctl+0x154>
 8008716:	2500      	movs	r5, #0
 8008718:	f7fe b97c 	b.w	8006a14 <dwt_ioctl+0x154>
 800871c:	2500      	movs	r5, #0
 800871e:	f7fe b979 	b.w	8006a14 <dwt_ioctl+0x154>
 8008722:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008726:	1e5a      	subs	r2, r3, #1
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	2a01      	cmp	r2, #1
 800872c:	f67f a801 	bls.w	8007732 <dwt_ioctl+0xe72>
 8008730:	2202      	movs	r2, #2
 8008732:	f7fe bf88 	b.w	8007646 <dwt_ioctl+0xd86>
 8008736:	2f00      	cmp	r7, #0
 8008738:	f43f ac62 	beq.w	8008000 <dwt_ioctl+0x1740>
 800873c:	f819 1000 	ldrb.w	r1, [r9, r0]
 8008740:	1a5b      	subs	r3, r3, r1
 8008742:	b29b      	uxth	r3, r3
 8008744:	e481      	b.n	800804a <dwt_ioctl+0x178a>
 8008746:	283f      	cmp	r0, #63	; 0x3f
 8008748:	d027      	beq.n	800879a <dwt_ioctl+0x1eda>
 800874a:	2e00      	cmp	r6, #0
 800874c:	f47f ac5e 	bne.w	800800c <dwt_ioctl+0x174c>
 8008750:	3001      	adds	r0, #1
 8008752:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008756:	f819 1000 	ldrb.w	r1, [r9, r0]
 800875a:	440b      	add	r3, r1
 800875c:	b29b      	uxth	r3, r3
 800875e:	459c      	cmp	ip, r3
 8008760:	f43f ac71 	beq.w	8008046 <dwt_ioctl+0x1786>
 8008764:	3d01      	subs	r5, #1
 8008766:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800876a:	f43f ac32 	beq.w	8007fd2 <dwt_ioctl+0x1712>
 800876e:	459e      	cmp	lr, r3
 8008770:	f4bf ac40 	bcs.w	8007ff4 <dwt_ioctl+0x1734>
 8008774:	4598      	cmp	r8, r3
 8008776:	d9de      	bls.n	8008736 <dwt_ioctl+0x1e76>
 8008778:	ebac 0103 	sub.w	r1, ip, r3
 800877c:	b209      	sxth	r1, r1
 800877e:	2900      	cmp	r1, #0
 8008780:	bfb8      	it	lt
 8008782:	4249      	neglt	r1, r1
 8008784:	4559      	cmp	r1, fp
 8008786:	f77f ac2e 	ble.w	8007fe6 <dwt_ioctl+0x1726>
 800878a:	2f00      	cmp	r7, #0
 800878c:	f47f ac70 	bne.w	8008070 <dwt_ioctl+0x17b0>
 8008790:	283f      	cmp	r0, #63	; 0x3f
 8008792:	d1da      	bne.n	800874a <dwt_ioctl+0x1e8a>
 8008794:	2f00      	cmp	r7, #0
 8008796:	f47f ac70 	bne.w	800807a <dwt_ioctl+0x17ba>
 800879a:	2a03      	cmp	r2, #3
 800879c:	f43f ac70 	beq.w	8008080 <dwt_ioctl+0x17c0>
 80087a0:	2a02      	cmp	r2, #2
 80087a2:	f43f ac3f 	beq.w	8008024 <dwt_ioctl+0x1764>
 80087a6:	f81a 1002 	ldrb.w	r1, [sl, r2]
 80087aa:	185e      	adds	r6, r3, r1
 80087ac:	4566      	cmp	r6, ip
 80087ae:	f77f ac40 	ble.w	8008032 <dwt_ioctl+0x1772>
 80087b2:	440b      	add	r3, r1
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3201      	adds	r2, #1
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	2700      	movs	r7, #0
 80087bc:	e426      	b.n	800800c <dwt_ioctl+0x174c>
 80087be:	bf00      	nop

080087c0 <ull_initialise>:
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	4605      	mov	r5, r0
 80087c6:	460e      	mov	r6, r1
 80087c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d05c      	beq.n	8008888 <ull_initialise+0xc8>
 80087ce:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80087d0:	2300      	movs	r3, #0
 80087d2:	73e3      	strb	r3, [r4, #15]
 80087d4:	2202      	movs	r2, #2
 80087d6:	8262      	strh	r2, [r4, #18]
 80087d8:	75a3      	strb	r3, [r4, #22]
 80087da:	75e3      	strb	r3, [r4, #23]
 80087dc:	7423      	strb	r3, [r4, #16]
 80087de:	72a3      	strb	r3, [r4, #10]
 80087e0:	72e3      	strb	r3, [r4, #11]
 80087e2:	2104      	movs	r1, #4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7fc fd33 	bl	8005250 <_dwt_otpread>
 80087ea:	4607      	mov	r7, r0
 80087ec:	2105      	movs	r1, #5
 80087ee:	4628      	mov	r0, r5
 80087f0:	f7fc fd2e 	bl	8005250 <_dwt_otpread>
 80087f4:	4680      	mov	r8, r0
 80087f6:	210a      	movs	r1, #10
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7fc fd29 	bl	8005250 <_dwt_otpread>
 80087fe:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8008802:	7220      	strb	r0, [r4, #8]
 8008804:	b127      	cbz	r7, 8008810 <ull_initialise+0x50>
 8008806:	f1b8 0f00 	cmp.w	r8, #0
 800880a:	d001      	beq.n	8008810 <ull_initialise+0x50>
 800880c:	2800      	cmp	r0, #0
 800880e:	d140      	bne.n	8008892 <ull_initialise+0xd2>
 8008810:	2120      	movs	r1, #32
 8008812:	4628      	mov	r0, r5
 8008814:	f7fc fd1c 	bl	8005250 <_dwt_otpread>
 8008818:	4b2f      	ldr	r3, [pc, #188]	; (80088d8 <ull_initialise+0x118>)
 800881a:	4298      	cmp	r0, r3
 800881c:	bf0c      	ite	eq
 800881e:	2301      	moveq	r3, #1
 8008820:	2300      	movne	r3, #0
 8008822:	7263      	strb	r3, [r4, #9]
 8008824:	f016 0f10 	tst.w	r6, #16
 8008828:	d137      	bne.n	800889a <ull_initialise+0xda>
 800882a:	f016 0f20 	tst.w	r6, #32
 800882e:	d13a      	bne.n	80088a6 <ull_initialise+0xe6>
 8008830:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008834:	d13d      	bne.n	80088b2 <ull_initialise+0xf2>
 8008836:	f016 0f80 	tst.w	r6, #128	; 0x80
 800883a:	d141      	bne.n	80088c0 <ull_initialise+0x100>
 800883c:	7ae3      	ldrb	r3, [r4, #11]
 800883e:	b90b      	cbnz	r3, 8008844 <ull_initialise+0x84>
 8008840:	2385      	movs	r3, #133	; 0x85
 8008842:	72e3      	strb	r3, [r4, #11]
 8008844:	7aa3      	ldrb	r3, [r4, #10]
 8008846:	b90b      	cbnz	r3, 800884c <ull_initialise+0x8c>
 8008848:	2374      	movs	r3, #116	; 0x74
 800884a:	72a3      	strb	r3, [r4, #10]
 800884c:	211f      	movs	r1, #31
 800884e:	4628      	mov	r0, r5
 8008850:	f7fc fcfe 	bl	8005250 <_dwt_otpread>
 8008854:	7360      	strb	r0, [r4, #13]
 8008856:	211e      	movs	r1, #30
 8008858:	4628      	mov	r0, r5
 800885a:	f7fc fcf9 	bl	8005250 <_dwt_otpread>
 800885e:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8008862:	bf12      	itee	ne
 8008864:	73a0      	strbne	r0, [r4, #14]
 8008866:	232e      	moveq	r3, #46	; 0x2e
 8008868:	73a3      	strbeq	r3, [r4, #14]
 800886a:	7ba3      	ldrb	r3, [r4, #14]
 800886c:	2200      	movs	r2, #0
 800886e:	491b      	ldr	r1, [pc, #108]	; (80088dc <ull_initialise+0x11c>)
 8008870:	4628      	mov	r0, r5
 8008872:	f7fc fc40 	bl	80050f6 <dwt_write8bitoffsetreg>
 8008876:	2135      	movs	r1, #53	; 0x35
 8008878:	4628      	mov	r0, r5
 800887a:	f7fc fce9 	bl	8005250 <_dwt_otpread>
 800887e:	4603      	mov	r3, r0
 8008880:	bb20      	cbnz	r0, 80088cc <ull_initialise+0x10c>
 8008882:	2000      	movs	r0, #0
 8008884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008888:	202c      	movs	r0, #44	; 0x2c
 800888a:	f009 f983 	bl	8011b94 <malloc>
 800888e:	6528      	str	r0, [r5, #80]	; 0x50
 8008890:	e79d      	b.n	80087ce <ull_initialise+0xe>
 8008892:	4628      	mov	r0, r5
 8008894:	f7fd fcca 	bl	800622c <_dwt_prog_ldo_and_bias_tune>
 8008898:	e7ba      	b.n	8008810 <ull_initialise+0x50>
 800889a:	2106      	movs	r1, #6
 800889c:	4628      	mov	r0, r5
 800889e:	f7fc fcd7 	bl	8005250 <_dwt_otpread>
 80088a2:	6020      	str	r0, [r4, #0]
 80088a4:	e7c1      	b.n	800882a <ull_initialise+0x6a>
 80088a6:	2107      	movs	r1, #7
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7fc fcd1 	bl	8005250 <_dwt_otpread>
 80088ae:	6060      	str	r0, [r4, #4]
 80088b0:	e7be      	b.n	8008830 <ull_initialise+0x70>
 80088b2:	2108      	movs	r1, #8
 80088b4:	4628      	mov	r0, r5
 80088b6:	f7fc fccb 	bl	8005250 <_dwt_otpread>
 80088ba:	0c00      	lsrs	r0, r0, #16
 80088bc:	72a0      	strb	r0, [r4, #10]
 80088be:	e7ba      	b.n	8008836 <ull_initialise+0x76>
 80088c0:	2109      	movs	r1, #9
 80088c2:	4628      	mov	r0, r5
 80088c4:	f7fc fcc4 	bl	8005250 <_dwt_otpread>
 80088c8:	72e0      	strb	r0, [r4, #11]
 80088ca:	e7b7      	b.n	800883c <ull_initialise+0x7c>
 80088cc:	2200      	movs	r2, #0
 80088ce:	4904      	ldr	r1, [pc, #16]	; (80088e0 <ull_initialise+0x120>)
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7fc fd63 	bl	800539c <dwt_write32bitoffsetreg>
 80088d6:	e7d4      	b.n	8008882 <ull_initialise+0xc2>
 80088d8:	10000240 	.word	0x10000240
 80088dc:	00090014 	.word	0x00090014
 80088e0:	00090004 	.word	0x00090004

080088e4 <_init>:
 80088e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e6:	b085      	sub	sp, #20
 80088e8:	4604      	mov	r4, r0
 80088ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80088ec:	6819      	ldr	r1, [r3, #0]
 80088ee:	f7ff ff67 	bl	80087c0 <ull_initialise>
 80088f2:	4606      	mov	r6, r0
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	4798      	blx	r3
 80088fa:	ab03      	add	r3, sp, #12
 80088fc:	2200      	movs	r2, #0
 80088fe:	4611      	mov	r1, r2
 8008900:	4620      	mov	r0, r4
 8008902:	f7fd ffdd 	bl	80068c0 <dwt_ioctl>
 8008906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	6819      	ldr	r1, [r3, #0]
 800890c:	4620      	mov	r0, r4
 800890e:	f7fd fdad 	bl	800646c <ull_configure>
 8008912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008916:	6859      	ldr	r1, [r3, #4]
 8008918:	4620      	mov	r0, r4
 800891a:	f7fd fb47 	bl	8005fac <ull_configuretxrf>
 800891e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008922:	89db      	ldrh	r3, [r3, #14]
 8008924:	2200      	movs	r2, #0
 8008926:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800892a:	4620      	mov	r0, r4
 800892c:	f7fc fc35 	bl	800519a <dwt_write16bitoffsetreg>
 8008930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	899b      	ldrh	r3, [r3, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	4952      	ldr	r1, [pc, #328]	; (8008a84 <_init+0x1a0>)
 800893a:	4620      	mov	r0, r4
 800893c:	f7fc fc2d 	bl	800519a <dwt_write16bitoffsetreg>
 8008940:	2100      	movs	r1, #0
 8008942:	4620      	mov	r0, r4
 8008944:	f7fc fec6 	bl	80056d4 <ull_setrxaftertxdelay>
 8008948:	2500      	movs	r5, #0
 800894a:	9500      	str	r5, [sp, #0]
 800894c:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8008950:	462a      	mov	r2, r5
 8008952:	2110      	movs	r1, #16
 8008954:	4620      	mov	r0, r4
 8008956:	f7fd fc4f 	bl	80061f8 <dwt_modify16bitoffsetreg>
 800895a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	895a      	ldrh	r2, [r3, #10]
 8008960:	8919      	ldrh	r1, [r3, #8]
 8008962:	4620      	mov	r0, r4
 8008964:	f7fd fbb2 	bl	80060cc <ull_configureframefilter>
 8008968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	8a1b      	ldrh	r3, [r3, #16]
 800896e:	2202      	movs	r2, #2
 8008970:	210c      	movs	r1, #12
 8008972:	4620      	mov	r0, r4
 8008974:	f7fc fc11 	bl	800519a <dwt_write16bitoffsetreg>
 8008978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800897a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897c:	8a5b      	ldrh	r3, [r3, #18]
 800897e:	462a      	mov	r2, r5
 8008980:	210c      	movs	r1, #12
 8008982:	4620      	mov	r0, r4
 8008984:	f7fc fc09 	bl	800519a <dwt_write16bitoffsetreg>
 8008988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800898a:	7a19      	ldrb	r1, [r3, #8]
 800898c:	4620      	mov	r0, r4
 800898e:	f7fd fc69 	bl	8006264 <ull_setleds>
 8008992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008994:	68d9      	ldr	r1, [r3, #12]
 8008996:	4620      	mov	r0, r4
 8008998:	f7fc feb2 	bl	8005700 <ull_setlnapamode>
 800899c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800899e:	7e0b      	ldrb	r3, [r1, #24]
 80089a0:	694a      	ldr	r2, [r1, #20]
 80089a2:	6909      	ldr	r1, [r1, #16]
 80089a4:	4620      	mov	r0, r4
 80089a6:	f7fd f9e9 	bl	8005d7c <ull_setinterrupt>
 80089aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ac:	7f9a      	ldrb	r2, [r3, #30]
 80089ae:	8b99      	ldrh	r1, [r3, #28]
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7fc fcb7 	bl	8005324 <ull_configuresleep>
 80089b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80089b8:	7b93      	ldrb	r3, [r2, #14]
 80089ba:	2b2e      	cmp	r3, #46	; 0x2e
 80089bc:	d005      	beq.n	80089ca <_init+0xe6>
 80089be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089c4:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 80089c8:	d00a      	beq.n	80089e0 <_init+0xfc>
 80089ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089d4:	7393      	strb	r3, [r2, #14]
 80089d6:	2200      	movs	r2, #0
 80089d8:	492b      	ldr	r1, [pc, #172]	; (8008a88 <_init+0x1a4>)
 80089da:	4620      	mov	r0, r4
 80089dc:	f7fc fb8b 	bl	80050f6 <dwt_write8bitoffsetreg>
 80089e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089e2:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7fd fa68 	bl	8005ebc <ull_configciadiag>
 80089ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ee:	6a19      	ldr	r1, [r3, #32]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7fc fea7 	bl	8005744 <ull_configurestskey>
 80089f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80089fa:	4620      	mov	r0, r4
 80089fc:	f7fc fec6 	bl	800578c <ull_configurestsiv>
 8008a00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a02:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008a06:	bba3      	cbnz	r3, 8008a72 <_init+0x18e>
 8008a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a0a:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7fc fbb0 	bl	8005174 <ull_configeventcounters>
 8008a14:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8008a18:	2d00      	cmp	r5, #0
 8008a1a:	db27      	blt.n	8008a6c <_init+0x188>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	fa03 f505 	lsl.w	r5, r3, r5
 8008a22:	b2af      	uxth	r7, r5
 8008a24:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8008a28:	4639      	mov	r1, r7
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7fd f988 	bl	8005d40 <ull_setgpiomode>
 8008a30:	f10d 030a 	add.w	r3, sp, #10
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	2302      	movs	r3, #2
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f7fb ff60 	bl	8004904 <dwt_readfromdevice>
 8008a44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008a48:	ea23 0305 	bic.w	r3, r3, r5
 8008a4c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008a50:	2200      	movs	r2, #0
 8008a52:	490e      	ldr	r1, [pc, #56]	; (8008a8c <_init+0x1a8>)
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7fc fba0 	bl	800519a <dwt_write16bitoffsetreg>
 8008a5a:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8008a5e:	fab2 f282 	clz	r2, r2
 8008a62:	0952      	lsrs	r2, r2, #5
 8008a64:	4639      	mov	r1, r7
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7fd fc7a 	bl	8006360 <ull_setgpiovalue>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	b005      	add	sp, #20
 8008a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a72:	2301      	movs	r3, #1
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	23ff      	movs	r3, #255	; 0xff
 8008a78:	2200      	movs	r2, #0
 8008a7a:	4905      	ldr	r1, [pc, #20]	; (8008a90 <_init+0x1ac>)
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7fd fa09 	bl	8005e94 <dwt_modify8bitoffsetreg>
 8008a82:	e7c1      	b.n	8008a08 <_init+0x124>
 8008a84:	00010004 	.word	0x00010004
 8008a88:	00090014 	.word	0x00090014
 8008a8c:	00050008 	.word	0x00050008
 8008a90:	00020004 	.word	0x00020004

08008a94 <dwt_dbg_fn>:
 8008a94:	2998      	cmp	r1, #152	; 0x98
 8008a96:	4802      	ldr	r0, [pc, #8]	; (8008aa0 <dwt_dbg_fn+0xc>)
 8008a98:	bf18      	it	ne
 8008a9a:	2000      	movne	r0, #0
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	08012134 	.word	0x08012134

08008aa4 <_deinit>:
 8008aa4:	4770      	bx	lr

08008aa6 <dwt_xfer3xxx>:
 8008aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	4605      	mov	r5, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	461e      	mov	r6, r3
 8008ab2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8008ab6:	1e59      	subs	r1, r3, #1
 8008ab8:	b289      	uxth	r1, r1
 8008aba:	2901      	cmp	r1, #1
 8008abc:	d91c      	bls.n	8008af8 <dwt_xfer3xxx+0x52>
 8008abe:	19d0      	adds	r0, r2, r7
 8008ac0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008ac4:	443a      	add	r2, r7
 8008ac6:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8008aca:	0082      	lsls	r2, r0, #2
 8008acc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8008ad0:	ea43 0102 	orr.w	r1, r3, r2
 8008ad4:	0a09      	lsrs	r1, r1, #8
 8008ad6:	f88d 100c 	strb.w	r1, [sp, #12]
 8008ada:	b920      	cbnz	r0, 8008ae6 <dwt_xfer3xxx+0x40>
 8008adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae0:	d018      	beq.n	8008b14 <dwt_xfer3xxx+0x6e>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d037      	beq.n	8008b56 <dwt_xfer3xxx+0xb0>
 8008ae6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008aea:	f88d 100c 	strb.w	r1, [sp, #12]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	f88d 200d 	strb.w	r2, [sp, #13]
 8008af4:	2402      	movs	r4, #2
 8008af6:	e005      	b.n	8008b04 <dwt_xfer3xxx+0x5e>
 8008af8:	007a      	lsls	r2, r7, #1
 8008afa:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8008afe:	f88d 200c 	strb.w	r2, [sp, #12]
 8008b02:	2401      	movs	r4, #1
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d006      	beq.n	8008b16 <dwt_xfer3xxx+0x70>
 8008b08:	d326      	bcc.n	8008b58 <dwt_xfer3xxx+0xb2>
 8008b0a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d901      	bls.n	8008b16 <dwt_xfer3xxx+0x70>
 8008b12:	e7fe      	b.n	8008b12 <dwt_xfer3xxx+0x6c>
 8008b14:	2401      	movs	r4, #1
 8008b16:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008b18:	7d1b      	ldrb	r3, [r3, #20]
 8008b1a:	b94b      	cbnz	r3, 8008b30 <dwt_xfer3xxx+0x8a>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	685d      	ldr	r5, [r3, #4]
 8008b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b22:	4632      	mov	r2, r6
 8008b24:	a903      	add	r1, sp, #12
 8008b26:	4620      	mov	r0, r4
 8008b28:	47a8      	blx	r5
 8008b2a:	b004      	add	sp, #16
 8008b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b30:	2200      	movs	r2, #0
 8008b32:	4621      	mov	r1, r4
 8008b34:	a803      	add	r0, sp, #12
 8008b36:	f7fb fddb 	bl	80046f0 <dwt_generatecrc8>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b40:	f7fb fdd6 	bl	80046f0 <dwt_generatecrc8>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	9000      	str	r0, [sp, #0]
 8008b48:	689d      	ldr	r5, [r3, #8]
 8008b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	a903      	add	r1, sp, #12
 8008b50:	4620      	mov	r0, r4
 8008b52:	47a8      	blx	r5
 8008b54:	e7e9      	b.n	8008b2a <dwt_xfer3xxx+0x84>
 8008b56:	2401      	movs	r4, #1
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	f8d3 8000 	ldr.w	r8, [r3]
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	4632      	mov	r2, r6
 8008b62:	a903      	add	r1, sp, #12
 8008b64:	4620      	mov	r0, r4
 8008b66:	47c0      	blx	r8
 8008b68:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008b6a:	7d1b      	ldrb	r3, [r3, #20]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d1dc      	bne.n	8008b2a <dwt_xfer3xxx+0x84>
 8008b70:	2f18      	cmp	r7, #24
 8008b72:	d0da      	beq.n	8008b2a <dwt_xfer3xxx+0x84>
 8008b74:	2200      	movs	r2, #0
 8008b76:	4621      	mov	r1, r4
 8008b78:	a803      	add	r0, sp, #12
 8008b7a:	f7fb fdb9 	bl	80046f0 <dwt_generatecrc8>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4631      	mov	r1, r6
 8008b82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b84:	f7fb fdb4 	bl	80046f0 <dwt_generatecrc8>
 8008b88:	4604      	mov	r4, r0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2118      	movs	r1, #24
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 f839 	bl	8008c06 <dwt_read8bitoffsetreg>
 8008b94:	4284      	cmp	r4, r0
 8008b96:	d0c8      	beq.n	8008b2a <dwt_xfer3xxx+0x84>
 8008b98:	68eb      	ldr	r3, [r5, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0c5      	beq.n	8008b2a <dwt_xfer3xxx+0x84>
 8008b9e:	4798      	blx	r3
 8008ba0:	e7c3      	b.n	8008b2a <dwt_xfer3xxx+0x84>

08008ba2 <dwt_readfromdevice>:
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	2400      	movs	r4, #0
 8008ba8:	9401      	str	r4, [sp, #4]
 8008baa:	9c04      	ldr	r4, [sp, #16]
 8008bac:	9400      	str	r4, [sp, #0]
 8008bae:	f7ff ff7a 	bl	8008aa6 <dwt_xfer3xxx>
 8008bb2:	b002      	add	sp, #8
 8008bb4:	bd10      	pop	{r4, pc}

08008bb6 <dwt_read32bitoffsetreg>:
 8008bb6:	b500      	push	{lr}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	ab03      	add	r3, sp, #12
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	2304      	movs	r3, #4
 8008bc0:	b292      	uxth	r2, r2
 8008bc2:	f7ff ffee 	bl	8008ba2 <dwt_readfromdevice>
 8008bc6:	f10d 030f 	add.w	r3, sp, #15
 8008bca:	f10d 010b 	add.w	r1, sp, #11
 8008bce:	2000      	movs	r0, #0
 8008bd0:	f813 2901 	ldrb.w	r2, [r3], #-1
 8008bd4:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8008bd8:	428b      	cmp	r3, r1
 8008bda:	d1f9      	bne.n	8008bd0 <dwt_read32bitoffsetreg+0x1a>
 8008bdc:	b005      	add	sp, #20
 8008bde:	f85d fb04 	ldr.w	pc, [sp], #4

08008be2 <dwt_read16bitoffsetreg>:
 8008be2:	b500      	push	{lr}
 8008be4:	b085      	sub	sp, #20
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	2302      	movs	r3, #2
 8008bec:	b292      	uxth	r2, r2
 8008bee:	f7ff ffd8 	bl	8008ba2 <dwt_readfromdevice>
 8008bf2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008bf6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8008bfa:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8008bfe:	b280      	uxth	r0, r0
 8008c00:	b005      	add	sp, #20
 8008c02:	f85d fb04 	ldr.w	pc, [sp], #4

08008c06 <dwt_read8bitoffsetreg>:
 8008c06:	b500      	push	{lr}
 8008c08:	b085      	sub	sp, #20
 8008c0a:	f10d 030f 	add.w	r3, sp, #15
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	2301      	movs	r3, #1
 8008c12:	b292      	uxth	r2, r2
 8008c14:	f7ff ffc5 	bl	8008ba2 <dwt_readfromdevice>
 8008c18:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8008c1c:	b005      	add	sp, #20
 8008c1e:	f85d fb04 	ldr.w	pc, [sp], #4

08008c22 <ull_readdiagnostics>:
 8008c22:	b530      	push	{r4, r5, lr}
 8008c24:	b0bd      	sub	sp, #244	; 0xf4
 8008c26:	4605      	mov	r5, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008c2c:	7b9a      	ldrb	r2, [r3, #14]
 8008c2e:	2a01      	cmp	r2, #1
 8008c30:	d01c      	beq.n	8008c6c <ull_readdiagnostics+0x4a>
 8008c32:	2a03      	cmp	r2, #3
 8008c34:	f040 81e8 	bne.w	8009008 <ull_readdiagnostics+0x3e6>
 8008c38:	7d9b      	ldrb	r3, [r3, #22]
 8008c3a:	f013 0f08 	tst.w	r3, #8
 8008c3e:	d10c      	bne.n	8008c5a <ull_readdiagnostics+0x38>
 8008c40:	f013 0f04 	tst.w	r3, #4
 8008c44:	ab02      	add	r3, sp, #8
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	bf14      	ite	ne
 8008c4a:	2338      	movne	r3, #56	; 0x38
 8008c4c:	2320      	moveq	r3, #32
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008c54:	f7ff ffa5 	bl	8008ba2 <dwt_readfromdevice>
 8008c58:	e019      	b.n	8008c8e <ull_readdiagnostics+0x6c>
 8008c5a:	ab02      	add	r3, sp, #8
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	23e8      	movs	r3, #232	; 0xe8
 8008c60:	2200      	movs	r2, #0
 8008c62:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008c66:	f7ff ff9c 	bl	8008ba2 <dwt_readfromdevice>
 8008c6a:	e010      	b.n	8008c8e <ull_readdiagnostics+0x6c>
 8008c6c:	7d9b      	ldrb	r3, [r3, #22]
 8008c6e:	f013 0f08 	tst.w	r3, #8
 8008c72:	f040 81c0 	bne.w	8008ff6 <ull_readdiagnostics+0x3d4>
 8008c76:	f013 0f04 	tst.w	r3, #4
 8008c7a:	ab02      	add	r3, sp, #8
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	bf14      	ite	ne
 8008c80:	2338      	movne	r3, #56	; 0x38
 8008c82:	2320      	moveq	r3, #32
 8008c84:	2200      	movs	r2, #0
 8008c86:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8008c8a:	f7ff ff8a 	bl	8008ba2 <dwt_readfromdevice>
 8008c8e:	f10d 0217 	add.w	r2, sp, #23
 8008c92:	f104 031a 	add.w	r3, r4, #26
 8008c96:	f104 0020 	add.w	r0, r4, #32
 8008c9a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ca2:	4283      	cmp	r3, r0
 8008ca4:	d1f9      	bne.n	8008c9a <ull_readdiagnostics+0x78>
 8008ca6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8008caa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008cae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cb6:	8463      	strh	r3, [r4, #34]	; 0x22
 8008cb8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008cbc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8008cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008cc8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008ccc:	bf1c      	itt	ne
 8008cce:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8008cd2:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8008cd6:	8423      	strh	r3, [r4, #32]
 8008cd8:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8008cdc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008ce0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ce8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008cea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008cec:	7d9b      	ldrb	r3, [r3, #22]
 8008cee:	f013 0f02 	tst.w	r3, #2
 8008cf2:	f040 817e 	bne.w	8008ff2 <ull_readdiagnostics+0x3d0>
 8008cf6:	aa0a      	add	r2, sp, #40	; 0x28
 8008cf8:	1e63      	subs	r3, r4, #1
 8008cfa:	1d20      	adds	r0, r4, #4
 8008cfc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008d00:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008d04:	79d1      	ldrb	r1, [r2, #7]
 8008d06:	7219      	strb	r1, [r3, #8]
 8008d08:	7bd1      	ldrb	r1, [r2, #15]
 8008d0a:	7459      	strb	r1, [r3, #17]
 8008d0c:	4283      	cmp	r3, r0
 8008d0e:	d1f5      	bne.n	8008cfc <ull_readdiagnostics+0xda>
 8008d10:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008d14:	7163      	strb	r3, [r4, #5]
 8008d16:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8008d1a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8008d1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d22:	80e3      	strh	r3, [r4, #6]
 8008d24:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8008d28:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8008d2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008d30:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008d34:	f8a4 300d 	strh.w	r3, [r4, #13]
 8008d38:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8008d3c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8008d40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d44:	f8a4 300f 	strh.w	r3, [r4, #15]
 8008d48:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8008d4c:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8008d50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008d54:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008d58:	82e3      	strh	r3, [r4, #22]
 8008d5a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8008d5e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8008d62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d66:	8323      	strh	r3, [r4, #24]
 8008d68:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008d6a:	7d9b      	ldrb	r3, [r3, #22]
 8008d6c:	f013 0f04 	tst.w	r3, #4
 8008d70:	f040 813f 	bne.w	8008ff2 <ull_readdiagnostics+0x3d0>
 8008d74:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8008d78:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8008d7c:	041b      	lsls	r3, r3, #16
 8008d7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d82:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8008d86:	4313      	orrs	r3, r2
 8008d88:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8008d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d90:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008d94:	6263      	str	r3, [r4, #36]	; 0x24
 8008d96:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8008d9a:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8008d9e:	041b      	lsls	r3, r3, #16
 8008da0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008da4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008da8:	4313      	orrs	r3, r2
 8008daa:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8008dae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008db2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008db6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008db8:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8008dbc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8008dc0:	041b      	lsls	r3, r3, #16
 8008dc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008dc6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8008dd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dda:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8008dde:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8008de2:	041b      	lsls	r3, r3, #16
 8008de4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008de8:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8008dec:	4313      	orrs	r3, r2
 8008dee:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8008df2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008df6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8008dfc:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8008e00:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e0a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8008e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e1e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8008e22:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8008e26:	041b      	lsls	r3, r3, #16
 8008e28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e2c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8008e30:	4313      	orrs	r3, r2
 8008e32:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8008e36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e3a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e40:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8008e44:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e4c:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8008e4e:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8008e52:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8008e56:	041b      	lsls	r3, r3, #16
 8008e58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e5c:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8008e60:	4313      	orrs	r3, r2
 8008e62:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8008e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e6e:	6423      	str	r3, [r4, #64]	; 0x40
 8008e70:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8008e74:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8008e78:	041b      	lsls	r3, r3, #16
 8008e7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e7e:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8008e82:	4313      	orrs	r3, r2
 8008e84:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8008e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e90:	6463      	str	r3, [r4, #68]	; 0x44
 8008e92:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8008e96:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8008e9a:	041b      	lsls	r3, r3, #16
 8008e9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ea0:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8008eaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008eae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008eb2:	64a3      	str	r3, [r4, #72]	; 0x48
 8008eb4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8008eb8:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8008ebc:	041b      	lsls	r3, r3, #16
 8008ebe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ec2:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8008ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ed0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ed4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008ed6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8008eda:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ee4:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8008eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ef2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ef6:	6523      	str	r3, [r4, #80]	; 0x50
 8008ef8:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8008efc:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8008f00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008f08:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8008f0c:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8008f10:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8008f14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f1c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8008f20:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8008f24:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f2e:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8008f32:	4313      	orrs	r3, r2
 8008f34:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8008f38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f3c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008f40:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f42:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8008f46:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f50:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8008f54:	4313      	orrs	r3, r2
 8008f56:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8008f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f62:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008f64:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8008f68:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f72:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8008f76:	4313      	orrs	r3, r2
 8008f78:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8008f7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f84:	6623      	str	r3, [r4, #96]	; 0x60
 8008f86:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8008f8a:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8008f8e:	041b      	lsls	r3, r3, #16
 8008f90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f94:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8008f9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fa2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008fa6:	6663      	str	r3, [r4, #100]	; 0x64
 8008fa8:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8008fac:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8008fb0:	041b      	lsls	r3, r3, #16
 8008fb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008fb6:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8008fc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fc4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008fc8:	66a3      	str	r3, [r4, #104]	; 0x68
 8008fca:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8008fce:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8008fd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fd6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008fda:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8008fde:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8008fe2:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8008fe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fee:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8008ff2:	b03d      	add	sp, #244	; 0xf4
 8008ff4:	bd30      	pop	{r4, r5, pc}
 8008ff6:	ab02      	add	r3, sp, #8
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	23e8      	movs	r3, #232	; 0xe8
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009002:	f7ff fdce 	bl	8008ba2 <dwt_readfromdevice>
 8009006:	e642      	b.n	8008c8e <ull_readdiagnostics+0x6c>
 8009008:	7d9b      	ldrb	r3, [r3, #22]
 800900a:	f013 0f01 	tst.w	r3, #1
 800900e:	f000 81b3 	beq.w	8009378 <ull_readdiagnostics+0x756>
 8009012:	ab02      	add	r3, sp, #8
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	236c      	movs	r3, #108	; 0x6c
 8009018:	2200      	movs	r2, #0
 800901a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800901e:	f7ff fdc0 	bl	8008ba2 <dwt_readfromdevice>
 8009022:	ab1d      	add	r3, sp, #116	; 0x74
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	236c      	movs	r3, #108	; 0x6c
 8009028:	2200      	movs	r2, #0
 800902a:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800902e:	4628      	mov	r0, r5
 8009030:	f7ff fdb7 	bl	8008ba2 <dwt_readfromdevice>
 8009034:	aa02      	add	r2, sp, #8
 8009036:	1e63      	subs	r3, r4, #1
 8009038:	1d20      	adds	r0, r4, #4
 800903a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800903e:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009042:	79d1      	ldrb	r1, [r2, #7]
 8009044:	7219      	strb	r1, [r3, #8]
 8009046:	7bd1      	ldrb	r1, [r2, #15]
 8009048:	7459      	strb	r1, [r3, #17]
 800904a:	7dd1      	ldrb	r1, [r2, #23]
 800904c:	7699      	strb	r1, [r3, #26]
 800904e:	4283      	cmp	r3, r0
 8009050:	d1f3      	bne.n	800903a <ull_readdiagnostics+0x418>
 8009052:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009056:	77e3      	strb	r3, [r4, #31]
 8009058:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800905c:	7163      	strb	r3, [r4, #5]
 800905e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8009062:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800906a:	80e3      	strh	r3, [r4, #6]
 800906c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009070:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8009074:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8009078:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800907c:	f8a4 200d 	strh.w	r2, [r4, #13]
 8009080:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009084:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009088:	f8a4 200f 	strh.w	r2, [r4, #15]
 800908c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009094:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009098:	82e3      	strh	r3, [r4, #22]
 800909a:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800909e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80090a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090a6:	8323      	strh	r3, [r4, #24]
 80090a8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80090ac:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80090b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80090b8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80090bc:	bf1c      	itt	ne
 80090be:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80090c2:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80090c6:	8423      	strh	r3, [r4, #32]
 80090c8:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80090cc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80090d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d8:	8463      	strh	r3, [r4, #34]	; 0x22
 80090da:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80090de:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090e8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80090ec:	4313      	orrs	r3, r2
 80090ee:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80090f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090f6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80090fa:	6263      	str	r3, [r4, #36]	; 0x24
 80090fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80090fe:	7d9b      	ldrb	r3, [r3, #22]
 8009100:	f013 0f01 	tst.w	r3, #1
 8009104:	f43f af75 	beq.w	8008ff2 <ull_readdiagnostics+0x3d0>
 8009108:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800910c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8009110:	041b      	lsls	r3, r3, #16
 8009112:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009116:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800911a:	4313      	orrs	r3, r2
 800911c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8009120:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009128:	62a3      	str	r3, [r4, #40]	; 0x28
 800912a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800912e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009132:	041b      	lsls	r3, r3, #16
 8009134:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009138:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800913c:	4313      	orrs	r3, r2
 800913e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8009142:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800914a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800914c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8009150:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800915a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800915e:	4313      	orrs	r3, r2
 8009160:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8009164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009168:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800916c:	6323      	str	r3, [r4, #48]	; 0x30
 800916e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8009172:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8009176:	041b      	lsls	r3, r3, #16
 8009178:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800917c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8009180:	4313      	orrs	r3, r2
 8009182:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8009186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800918a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800918e:	6363      	str	r3, [r4, #52]	; 0x34
 8009190:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8009194:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800919e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80091a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80091b2:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80091b6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80091ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091be:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80091c0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80091c4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80091c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80091d2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80091d6:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80091da:	041b      	lsls	r3, r3, #16
 80091dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091e0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80091e4:	4313      	orrs	r3, r2
 80091e6:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80091ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091f2:	6423      	str	r3, [r4, #64]	; 0x40
 80091f4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80091f8:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 80091fc:	041b      	lsls	r3, r3, #16
 80091fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009202:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8009206:	4313      	orrs	r3, r2
 8009208:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800920c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009214:	6463      	str	r3, [r4, #68]	; 0x44
 8009216:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800921a:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009224:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8009228:	4313      	orrs	r3, r2
 800922a:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800922e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009232:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009236:	64a3      	str	r3, [r4, #72]	; 0x48
 8009238:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800923c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009246:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800924a:	4313      	orrs	r3, r2
 800924c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8009250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009258:	64e3      	str	r3, [r4, #76]	; 0x4c
 800925a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800925e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009268:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800926c:	4313      	orrs	r3, r2
 800926e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8009272:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009276:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800927a:	6523      	str	r3, [r4, #80]	; 0x50
 800927c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8009280:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8009284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009288:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800928c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8009290:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8009294:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8009298:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800929c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092a0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80092a4:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 80092a8:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 80092ac:	041b      	lsls	r3, r3, #16
 80092ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80092b2:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 80092b6:	4313      	orrs	r3, r2
 80092b8:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 80092bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80092c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80092c6:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 80092ca:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80092d4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80092d8:	4313      	orrs	r3, r2
 80092da:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80092de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092e6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80092e8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80092ec:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80092f6:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80092fa:	4313      	orrs	r3, r2
 80092fc:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8009300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009304:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009308:	6623      	str	r3, [r4, #96]	; 0x60
 800930a:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800930e:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009318:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800931c:	4313      	orrs	r3, r2
 800931e:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8009322:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009326:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800932a:	6663      	str	r3, [r4, #100]	; 0x64
 800932c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8009330:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8009334:	041b      	lsls	r3, r3, #16
 8009336:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800933a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800933e:	4313      	orrs	r3, r2
 8009340:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8009344:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009348:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800934c:	66a3      	str	r3, [r4, #104]	; 0x68
 800934e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8009352:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8009356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800935a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800935e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8009362:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8009366:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800936a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800936e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009372:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8009376:	e63c      	b.n	8008ff2 <ull_readdiagnostics+0x3d0>
 8009378:	ab02      	add	r3, sp, #8
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	2328      	movs	r3, #40	; 0x28
 800937e:	2200      	movs	r2, #0
 8009380:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8009384:	f7ff fc0d 	bl	8008ba2 <dwt_readfromdevice>
 8009388:	e654      	b.n	8009034 <ull_readdiagnostics+0x412>
	...

0800938c <ull_readrxtimestamp>:
 800938c:	b500      	push	{lr}
 800938e:	b083      	sub	sp, #12
 8009390:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009392:	7b9b      	ldrb	r3, [r3, #14]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d00b      	beq.n	80093b0 <ull_readrxtimestamp+0x24>
 8009398:	2b03      	cmp	r3, #3
 800939a:	d110      	bne.n	80093be <ull_readrxtimestamp+0x32>
 800939c:	9100      	str	r1, [sp, #0]
 800939e:	2305      	movs	r3, #5
 80093a0:	2204      	movs	r2, #4
 80093a2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80093a6:	f7ff fbfc 	bl	8008ba2 <dwt_readfromdevice>
 80093aa:	b003      	add	sp, #12
 80093ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80093b0:	9100      	str	r1, [sp, #0]
 80093b2:	2305      	movs	r3, #5
 80093b4:	2200      	movs	r2, #0
 80093b6:	4905      	ldr	r1, [pc, #20]	; (80093cc <ull_readrxtimestamp+0x40>)
 80093b8:	f7ff fbf3 	bl	8008ba2 <dwt_readfromdevice>
 80093bc:	e7f5      	b.n	80093aa <ull_readrxtimestamp+0x1e>
 80093be:	9100      	str	r1, [sp, #0]
 80093c0:	2305      	movs	r3, #5
 80093c2:	2200      	movs	r2, #0
 80093c4:	2160      	movs	r1, #96	; 0x60
 80093c6:	f7ff fbec 	bl	8008ba2 <dwt_readfromdevice>
 80093ca:	e7ee      	b.n	80093aa <ull_readrxtimestamp+0x1e>
 80093cc:	00180004 	.word	0x00180004

080093d0 <dwt_writetodevice>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80093d8:	9401      	str	r4, [sp, #4]
 80093da:	9c04      	ldr	r4, [sp, #16]
 80093dc:	9400      	str	r4, [sp, #0]
 80093de:	f7ff fb62 	bl	8008aa6 <dwt_xfer3xxx>
 80093e2:	b002      	add	sp, #8
 80093e4:	bd10      	pop	{r4, pc}

080093e6 <dwt_write16bitoffsetreg>:
 80093e6:	b500      	push	{lr}
 80093e8:	b085      	sub	sp, #20
 80093ea:	f88d 300c 	strb.w	r3, [sp, #12]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	f88d 300d 	strb.w	r3, [sp, #13]
 80093f4:	ab03      	add	r3, sp, #12
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	2302      	movs	r3, #2
 80093fa:	b292      	uxth	r2, r2
 80093fc:	f7ff ffe8 	bl	80093d0 <dwt_writetodevice>
 8009400:	b005      	add	sp, #20
 8009402:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009408 <ull_force_clocks>:
 8009408:	b508      	push	{r3, lr}
 800940a:	2901      	cmp	r1, #1
 800940c:	d002      	beq.n	8009414 <ull_force_clocks+0xc>
 800940e:	2905      	cmp	r1, #5
 8009410:	d007      	beq.n	8009422 <ull_force_clocks+0x1a>
 8009412:	bd08      	pop	{r3, pc}
 8009414:	f641 0322 	movw	r3, #6178	; 0x1822
 8009418:	2200      	movs	r2, #0
 800941a:	4905      	ldr	r1, [pc, #20]	; (8009430 <ull_force_clocks+0x28>)
 800941c:	f7ff ffe3 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009420:	e7f7      	b.n	8009412 <ull_force_clocks+0xa>
 8009422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009426:	2200      	movs	r2, #0
 8009428:	4901      	ldr	r1, [pc, #4]	; (8009430 <ull_force_clocks+0x28>)
 800942a:	f7ff ffdc 	bl	80093e6 <dwt_write16bitoffsetreg>
 800942e:	e7f0      	b.n	8009412 <ull_force_clocks+0xa>
 8009430:	00110004 	.word	0x00110004

08009434 <__dwt_otp_write_wdata_id_reg>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4605      	mov	r5, r0
 8009438:	460c      	mov	r4, r1
 800943a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800943e:	b29b      	uxth	r3, r3
 8009440:	2200      	movs	r2, #0
 8009442:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009446:	f7ff ffce 	bl	80093e6 <dwt_write16bitoffsetreg>
 800944a:	b2a3      	uxth	r3, r4
 800944c:	2200      	movs	r2, #0
 800944e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009452:	4628      	mov	r0, r5
 8009454:	f7ff ffc7 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009458:	bd38      	pop	{r3, r4, r5, pc}
	...

0800945c <_dwt_otpread>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4604      	mov	r4, r0
 8009460:	460e      	mov	r6, r1
 8009462:	4d0c      	ldr	r5, [pc, #48]	; (8009494 <_dwt_otpread+0x38>)
 8009464:	2301      	movs	r3, #1
 8009466:	2200      	movs	r2, #0
 8009468:	4629      	mov	r1, r5
 800946a:	f7ff ffbc 	bl	80093e6 <dwt_write16bitoffsetreg>
 800946e:	4633      	mov	r3, r6
 8009470:	2200      	movs	r2, #0
 8009472:	4909      	ldr	r1, [pc, #36]	; (8009498 <_dwt_otpread+0x3c>)
 8009474:	4620      	mov	r0, r4
 8009476:	f7ff ffb6 	bl	80093e6 <dwt_write16bitoffsetreg>
 800947a:	2302      	movs	r3, #2
 800947c:	2200      	movs	r2, #0
 800947e:	4629      	mov	r1, r5
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff ffb0 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009486:	2200      	movs	r2, #0
 8009488:	4904      	ldr	r1, [pc, #16]	; (800949c <_dwt_otpread+0x40>)
 800948a:	4620      	mov	r0, r4
 800948c:	f7ff fb93 	bl	8008bb6 <dwt_read32bitoffsetreg>
 8009490:	bd70      	pop	{r4, r5, r6, pc}
 8009492:	bf00      	nop
 8009494:	000b0008 	.word	0x000b0008
 8009498:	000b0004 	.word	0x000b0004
 800949c:	000b0010 	.word	0x000b0010

080094a0 <dwt_write32bitoffsetreg>:
 80094a0:	b510      	push	{r4, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	f88d 300c 	strb.w	r3, [sp, #12]
 80094a8:	0a1c      	lsrs	r4, r3, #8
 80094aa:	f88d 400d 	strb.w	r4, [sp, #13]
 80094ae:	0c1c      	lsrs	r4, r3, #16
 80094b0:	f88d 400e 	strb.w	r4, [sp, #14]
 80094b4:	0e1b      	lsrs	r3, r3, #24
 80094b6:	f88d 300f 	strb.w	r3, [sp, #15]
 80094ba:	ab03      	add	r3, sp, #12
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	2304      	movs	r3, #4
 80094c0:	b292      	uxth	r2, r2
 80094c2:	f7ff ff85 	bl	80093d0 <dwt_writetodevice>
 80094c6:	b004      	add	sp, #16
 80094c8:	bd10      	pop	{r4, pc}

080094ca <_dwt_adjust_delaytime>:
 80094ca:	b538      	push	{r3, r4, r5, lr}
 80094cc:	4604      	mov	r4, r0
 80094ce:	b989      	cbnz	r1, 80094f4 <_dwt_adjust_delaytime+0x2a>
 80094d0:	2200      	movs	r2, #0
 80094d2:	2128      	movs	r1, #40	; 0x28
 80094d4:	f7ff fb6f 	bl	8008bb6 <dwt_read32bitoffsetreg>
 80094d8:	4605      	mov	r5, r0
 80094da:	2201      	movs	r2, #1
 80094dc:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80094e0:	4620      	mov	r0, r4
 80094e2:	f7ff fb90 	bl	8008c06 <dwt_read8bitoffsetreg>
 80094e6:	1a2b      	subs	r3, r5, r0
 80094e8:	2200      	movs	r2, #0
 80094ea:	2128      	movs	r1, #40	; 0x28
 80094ec:	4620      	mov	r0, r4
 80094ee:	f7ff ffd7 	bl	80094a0 <dwt_write32bitoffsetreg>
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	2200      	movs	r2, #0
 80094f6:	2128      	movs	r1, #40	; 0x28
 80094f8:	f7ff fb5d 	bl	8008bb6 <dwt_read32bitoffsetreg>
 80094fc:	4605      	mov	r5, r0
 80094fe:	2201      	movs	r2, #1
 8009500:	217c      	movs	r1, #124	; 0x7c
 8009502:	4620      	mov	r0, r4
 8009504:	f7ff fb7f 	bl	8008c06 <dwt_read8bitoffsetreg>
 8009508:	1a2b      	subs	r3, r5, r0
 800950a:	2200      	movs	r2, #0
 800950c:	2128      	movs	r1, #40	; 0x28
 800950e:	4620      	mov	r0, r4
 8009510:	f7ff ffc6 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009514:	e7ed      	b.n	80094f2 <_dwt_adjust_delaytime+0x28>

08009516 <ull_setrxaftertxdelay>:
 8009516:	b538      	push	{r3, r4, r5, lr}
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	2200      	movs	r2, #0
 800951e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009522:	f7ff fb48 	bl	8008bb6 <dwt_read32bitoffsetreg>
 8009526:	0d00      	lsrs	r0, r0, #20
 8009528:	0500      	lsls	r0, r0, #20
 800952a:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800952e:	4303      	orrs	r3, r0
 8009530:	2200      	movs	r2, #0
 8009532:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009536:	4628      	mov	r0, r5
 8009538:	f7ff ffb2 	bl	80094a0 <dwt_write32bitoffsetreg>
 800953c:	bd38      	pop	{r3, r4, r5, pc}

0800953e <ull_setlnapamode>:
 800953e:	b538      	push	{r3, r4, r5, lr}
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	2200      	movs	r2, #0
 8009546:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800954a:	f7ff fb34 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800954e:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 8009552:	f014 0f01 	tst.w	r4, #1
 8009556:	bf18      	it	ne
 8009558:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800955c:	f014 0f02 	tst.w	r4, #2
 8009560:	bf18      	it	ne
 8009562:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 8009566:	f014 0f04 	tst.w	r4, #4
 800956a:	bf18      	it	ne
 800956c:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 8009570:	2200      	movs	r2, #0
 8009572:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009576:	4628      	mov	r0, r5
 8009578:	f7ff ff92 	bl	80094a0 <dwt_write32bitoffsetreg>
 800957c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009580 <ull_configurestskey>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4605      	mov	r5, r0
 8009584:	460c      	mov	r4, r1
 8009586:	680b      	ldr	r3, [r1, #0]
 8009588:	2200      	movs	r2, #0
 800958a:	490b      	ldr	r1, [pc, #44]	; (80095b8 <ull_configurestskey+0x38>)
 800958c:	f7ff ff88 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009590:	6863      	ldr	r3, [r4, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	4909      	ldr	r1, [pc, #36]	; (80095bc <ull_configurestskey+0x3c>)
 8009596:	4628      	mov	r0, r5
 8009598:	f7ff ff82 	bl	80094a0 <dwt_write32bitoffsetreg>
 800959c:	68a3      	ldr	r3, [r4, #8]
 800959e:	2200      	movs	r2, #0
 80095a0:	4907      	ldr	r1, [pc, #28]	; (80095c0 <ull_configurestskey+0x40>)
 80095a2:	4628      	mov	r0, r5
 80095a4:	f7ff ff7c 	bl	80094a0 <dwt_write32bitoffsetreg>
 80095a8:	68e3      	ldr	r3, [r4, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	4905      	ldr	r1, [pc, #20]	; (80095c4 <ull_configurestskey+0x44>)
 80095ae:	4628      	mov	r0, r5
 80095b0:	f7ff ff76 	bl	80094a0 <dwt_write32bitoffsetreg>
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	0002000c 	.word	0x0002000c
 80095bc:	00020010 	.word	0x00020010
 80095c0:	00020014 	.word	0x00020014
 80095c4:	00020018 	.word	0x00020018

080095c8 <ull_configurestsiv>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4605      	mov	r5, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	680b      	ldr	r3, [r1, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	490b      	ldr	r1, [pc, #44]	; (8009600 <ull_configurestsiv+0x38>)
 80095d4:	f7ff ff64 	bl	80094a0 <dwt_write32bitoffsetreg>
 80095d8:	6863      	ldr	r3, [r4, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	4909      	ldr	r1, [pc, #36]	; (8009604 <ull_configurestsiv+0x3c>)
 80095de:	4628      	mov	r0, r5
 80095e0:	f7ff ff5e 	bl	80094a0 <dwt_write32bitoffsetreg>
 80095e4:	68a3      	ldr	r3, [r4, #8]
 80095e6:	2200      	movs	r2, #0
 80095e8:	4907      	ldr	r1, [pc, #28]	; (8009608 <ull_configurestsiv+0x40>)
 80095ea:	4628      	mov	r0, r5
 80095ec:	f7ff ff58 	bl	80094a0 <dwt_write32bitoffsetreg>
 80095f0:	68e3      	ldr	r3, [r4, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	4905      	ldr	r1, [pc, #20]	; (800960c <ull_configurestsiv+0x44>)
 80095f6:	4628      	mov	r0, r5
 80095f8:	f7ff ff52 	bl	80094a0 <dwt_write32bitoffsetreg>
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	0002001c 	.word	0x0002001c
 8009604:	00020020 	.word	0x00020020
 8009608:	00020024 	.word	0x00020024
 800960c:	00020028 	.word	0x00020028

08009610 <ull_configmrxlut>:
 8009610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	2905      	cmp	r1, #5
 8009618:	d03a      	beq.n	8009690 <ull_configmrxlut+0x80>
 800961a:	4d23      	ldr	r5, [pc, #140]	; (80096a8 <ull_configmrxlut+0x98>)
 800961c:	462e      	mov	r6, r5
 800961e:	4f23      	ldr	r7, [pc, #140]	; (80096ac <ull_configmrxlut+0x9c>)
 8009620:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80096e8 <ull_configmrxlut+0xd8>
 8009624:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80096ec <ull_configmrxlut+0xdc>
 8009628:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80096f0 <ull_configmrxlut+0xe0>
 800962c:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <ull_configmrxlut+0xa0>)
 800962e:	2200      	movs	r2, #0
 8009630:	4920      	ldr	r1, [pc, #128]	; (80096b4 <ull_configmrxlut+0xa4>)
 8009632:	4620      	mov	r0, r4
 8009634:	f7ff ff34 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009638:	4653      	mov	r3, sl
 800963a:	2200      	movs	r2, #0
 800963c:	491e      	ldr	r1, [pc, #120]	; (80096b8 <ull_configmrxlut+0xa8>)
 800963e:	4620      	mov	r0, r4
 8009640:	f7ff ff2e 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009644:	464b      	mov	r3, r9
 8009646:	2200      	movs	r2, #0
 8009648:	491c      	ldr	r1, [pc, #112]	; (80096bc <ull_configmrxlut+0xac>)
 800964a:	4620      	mov	r0, r4
 800964c:	f7ff ff28 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009650:	4643      	mov	r3, r8
 8009652:	2200      	movs	r2, #0
 8009654:	491a      	ldr	r1, [pc, #104]	; (80096c0 <ull_configmrxlut+0xb0>)
 8009656:	4620      	mov	r0, r4
 8009658:	f7ff ff22 	bl	80094a0 <dwt_write32bitoffsetreg>
 800965c:	463b      	mov	r3, r7
 800965e:	2200      	movs	r2, #0
 8009660:	4918      	ldr	r1, [pc, #96]	; (80096c4 <ull_configmrxlut+0xb4>)
 8009662:	4620      	mov	r0, r4
 8009664:	f7ff ff1c 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009668:	4633      	mov	r3, r6
 800966a:	2200      	movs	r2, #0
 800966c:	4916      	ldr	r1, [pc, #88]	; (80096c8 <ull_configmrxlut+0xb8>)
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff ff16 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009674:	462b      	mov	r3, r5
 8009676:	2200      	movs	r2, #0
 8009678:	4914      	ldr	r1, [pc, #80]	; (80096cc <ull_configmrxlut+0xbc>)
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff ff10 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009680:	4b13      	ldr	r3, [pc, #76]	; (80096d0 <ull_configmrxlut+0xc0>)
 8009682:	2200      	movs	r2, #0
 8009684:	4913      	ldr	r1, [pc, #76]	; (80096d4 <ull_configmrxlut+0xc4>)
 8009686:	4620      	mov	r0, r4
 8009688:	f7ff ff0a 	bl	80094a0 <dwt_write32bitoffsetreg>
 800968c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009690:	4d11      	ldr	r5, [pc, #68]	; (80096d8 <ull_configmrxlut+0xc8>)
 8009692:	4e12      	ldr	r6, [pc, #72]	; (80096dc <ull_configmrxlut+0xcc>)
 8009694:	4f12      	ldr	r7, [pc, #72]	; (80096e0 <ull_configmrxlut+0xd0>)
 8009696:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80096f4 <ull_configmrxlut+0xe4>
 800969a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80096f8 <ull_configmrxlut+0xe8>
 800969e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80096fc <ull_configmrxlut+0xec>
 80096a2:	4b10      	ldr	r3, [pc, #64]	; (80096e4 <ull_configmrxlut+0xd4>)
 80096a4:	e7c3      	b.n	800962e <ull_configmrxlut+0x1e>
 80096a6:	bf00      	nop
 80096a8:	0002afb5 	.word	0x0002afb5
 80096ac:	0002af7d 	.word	0x0002af7d
 80096b0:	0002a8fe 	.word	0x0002a8fe
 80096b4:	00030038 	.word	0x00030038
 80096b8:	0003003c 	.word	0x0003003c
 80096bc:	00030040 	.word	0x00030040
 80096c0:	00030044 	.word	0x00030044
 80096c4:	00030048 	.word	0x00030048
 80096c8:	0003004c 	.word	0x0003004c
 80096cc:	00030050 	.word	0x00030050
 80096d0:	10000240 	.word	0x10000240
 80096d4:	0003001c 	.word	0x0003001c
 80096d8:	0001cff5 	.word	0x0001cff5
 80096dc:	0001cfb5 	.word	0x0001cfb5
 80096e0:	0001cf36 	.word	0x0001cf36
 80096e4:	0001c0fd 	.word	0x0001c0fd
 80096e8:	0002af3e 	.word	0x0002af3e
 80096ec:	0002a5fe 	.word	0x0002a5fe
 80096f0:	0002ac36 	.word	0x0002ac36
 80096f4:	0001c77e 	.word	0x0001c77e
 80096f8:	0001c6be 	.word	0x0001c6be
 80096fc:	0001c43e 	.word	0x0001c43e

08009700 <ull_disable_rftx_blocks>:
 8009700:	b508      	push	{r3, lr}
 8009702:	2300      	movs	r3, #0
 8009704:	461a      	mov	r2, r3
 8009706:	4902      	ldr	r1, [pc, #8]	; (8009710 <ull_disable_rftx_blocks+0x10>)
 8009708:	f7ff feca 	bl	80094a0 <dwt_write32bitoffsetreg>
 800970c:	bd08      	pop	{r3, pc}
 800970e:	bf00      	nop
 8009710:	00070004 	.word	0x00070004

08009714 <ull_disable_rf_tx>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4604      	mov	r4, r0
 8009718:	460d      	mov	r5, r1
 800971a:	2300      	movs	r3, #0
 800971c:	461a      	mov	r2, r3
 800971e:	490a      	ldr	r1, [pc, #40]	; (8009748 <ull_disable_rf_tx+0x34>)
 8009720:	f7ff febe 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009724:	2300      	movs	r3, #0
 8009726:	461a      	mov	r2, r3
 8009728:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff feb7 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009732:	b905      	cbnz	r5, 8009736 <ull_disable_rf_tx+0x22>
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800973a:	2200      	movs	r2, #0
 800973c:	4903      	ldr	r1, [pc, #12]	; (800974c <ull_disable_rf_tx+0x38>)
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff feae 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009744:	e7f6      	b.n	8009734 <ull_disable_rf_tx+0x20>
 8009746:	bf00      	nop
 8009748:	00070048 	.word	0x00070048
 800974c:	00070014 	.word	0x00070014

08009750 <ull_readrxdata>:
 8009750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009752:	b083      	sub	sp, #12
 8009754:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8009756:	7ba4      	ldrb	r4, [r4, #14]
 8009758:	2c03      	cmp	r4, #3
 800975a:	bf0c      	ite	eq
 800975c:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8009760:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8009764:	189c      	adds	r4, r3, r2
 8009766:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800976a:	da19      	bge.n	80097a0 <ull_readrxdata+0x50>
 800976c:	461d      	mov	r5, r3
 800976e:	4616      	mov	r6, r2
 8009770:	460f      	mov	r7, r1
 8009772:	4604      	mov	r4, r0
 8009774:	2b7f      	cmp	r3, #127	; 0x7f
 8009776:	d915      	bls.n	80097a4 <ull_readrxdata+0x54>
 8009778:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800977c:	2200      	movs	r2, #0
 800977e:	490d      	ldr	r1, [pc, #52]	; (80097b4 <ull_readrxdata+0x64>)
 8009780:	f7ff fe8e 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009784:	462b      	mov	r3, r5
 8009786:	2200      	movs	r2, #0
 8009788:	490b      	ldr	r1, [pc, #44]	; (80097b8 <ull_readrxdata+0x68>)
 800978a:	4620      	mov	r0, r4
 800978c:	f7ff fe88 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009790:	9700      	str	r7, [sp, #0]
 8009792:	4633      	mov	r3, r6
 8009794:	2200      	movs	r2, #0
 8009796:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800979a:	4620      	mov	r0, r4
 800979c:	f7ff fa01 	bl	8008ba2 <dwt_readfromdevice>
 80097a0:	b003      	add	sp, #12
 80097a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a4:	9100      	str	r1, [sp, #0]
 80097a6:	4613      	mov	r3, r2
 80097a8:	462a      	mov	r2, r5
 80097aa:	4661      	mov	r1, ip
 80097ac:	f7ff f9f9 	bl	8008ba2 <dwt_readfromdevice>
 80097b0:	e7f6      	b.n	80097a0 <ull_readrxdata+0x50>
 80097b2:	bf00      	nop
 80097b4:	001f0004 	.word	0x001f0004
 80097b8:	001f0008 	.word	0x001f0008

080097bc <dwt_write8bitoffsetreg>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	ac04      	add	r4, sp, #16
 80097c2:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80097c6:	9400      	str	r4, [sp, #0]
 80097c8:	2301      	movs	r3, #1
 80097ca:	b292      	uxth	r2, r2
 80097cc:	f7ff fe00 	bl	80093d0 <dwt_writetodevice>
 80097d0:	b004      	add	sp, #16
 80097d2:	bd10      	pop	{r4, pc}

080097d4 <ull_getframelength>:
 80097d4:	b510      	push	{r4, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80097da:	7b9b      	ldrb	r3, [r3, #14]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d013      	beq.n	8009808 <ull_getframelength+0x34>
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d11d      	bne.n	8009820 <ull_getframelength+0x4c>
 80097e4:	23f0      	movs	r3, #240	; 0xf0
 80097e6:	2200      	movs	r2, #0
 80097e8:	4912      	ldr	r1, [pc, #72]	; (8009834 <ull_getframelength+0x60>)
 80097ea:	f7ff ffe7 	bl	80097bc <dwt_write8bitoffsetreg>
 80097ee:	2200      	movs	r2, #0
 80097f0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80097f4:	4620      	mov	r0, r4
 80097f6:	f7ff f9f4 	bl	8008be2 <dwt_read16bitoffsetreg>
 80097fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80097fc:	7ada      	ldrb	r2, [r3, #11]
 80097fe:	b1a2      	cbz	r2, 800982a <ull_getframelength+0x56>
 8009800:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009804:	83d8      	strh	r0, [r3, #30]
 8009806:	bd10      	pop	{r4, pc}
 8009808:	230f      	movs	r3, #15
 800980a:	2200      	movs	r2, #0
 800980c:	4909      	ldr	r1, [pc, #36]	; (8009834 <ull_getframelength+0x60>)
 800980e:	f7ff ffd5 	bl	80097bc <dwt_write8bitoffsetreg>
 8009812:	2200      	movs	r2, #0
 8009814:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009818:	4620      	mov	r0, r4
 800981a:	f7ff f9e2 	bl	8008be2 <dwt_read16bitoffsetreg>
 800981e:	e7ec      	b.n	80097fa <ull_getframelength+0x26>
 8009820:	2200      	movs	r2, #0
 8009822:	214c      	movs	r1, #76	; 0x4c
 8009824:	f7ff f9dd 	bl	8008be2 <dwt_read16bitoffsetreg>
 8009828:	e7e7      	b.n	80097fa <ull_getframelength+0x26>
 800982a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800982e:	83d8      	strh	r0, [r3, #30]
 8009830:	e7e9      	b.n	8009806 <ull_getframelength+0x32>
 8009832:	bf00      	nop
 8009834:	00010018 	.word	0x00010018

08009838 <_dwt_clear_db_events>:
 8009838:	b510      	push	{r4, lr}
 800983a:	4604      	mov	r4, r0
 800983c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800983e:	7b9b      	ldrb	r3, [r3, #14]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d004      	beq.n	800984e <_dwt_clear_db_events+0x16>
 8009844:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009846:	7b9b      	ldrb	r3, [r3, #14]
 8009848:	2b03      	cmp	r3, #3
 800984a:	d006      	beq.n	800985a <_dwt_clear_db_events+0x22>
 800984c:	bd10      	pop	{r4, pc}
 800984e:	230f      	movs	r3, #15
 8009850:	2200      	movs	r2, #0
 8009852:	4905      	ldr	r1, [pc, #20]	; (8009868 <_dwt_clear_db_events+0x30>)
 8009854:	f7ff ffb2 	bl	80097bc <dwt_write8bitoffsetreg>
 8009858:	e7f4      	b.n	8009844 <_dwt_clear_db_events+0xc>
 800985a:	23f0      	movs	r3, #240	; 0xf0
 800985c:	2200      	movs	r2, #0
 800985e:	4902      	ldr	r1, [pc, #8]	; (8009868 <_dwt_clear_db_events+0x30>)
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff ffab 	bl	80097bc <dwt_write8bitoffsetreg>
 8009866:	e7f1      	b.n	800984c <_dwt_clear_db_events+0x14>
 8009868:	00010018 	.word	0x00010018

0800986c <ull_clearaonconfig>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4604      	mov	r4, r0
 8009870:	2300      	movs	r3, #0
 8009872:	461a      	mov	r2, r3
 8009874:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8009878:	f7ff fdb5 	bl	80093e6 <dwt_write16bitoffsetreg>
 800987c:	2300      	movs	r3, #0
 800987e:	461a      	mov	r2, r3
 8009880:	4908      	ldr	r1, [pc, #32]	; (80098a4 <ull_clearaonconfig+0x38>)
 8009882:	4620      	mov	r0, r4
 8009884:	f7ff ff9a 	bl	80097bc <dwt_write8bitoffsetreg>
 8009888:	4d07      	ldr	r5, [pc, #28]	; (80098a8 <ull_clearaonconfig+0x3c>)
 800988a:	2300      	movs	r3, #0
 800988c:	461a      	mov	r2, r3
 800988e:	4629      	mov	r1, r5
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff ff93 	bl	80097bc <dwt_write8bitoffsetreg>
 8009896:	2302      	movs	r3, #2
 8009898:	2200      	movs	r2, #0
 800989a:	4629      	mov	r1, r5
 800989c:	4620      	mov	r0, r4
 800989e:	f7ff ff8d 	bl	80097bc <dwt_write8bitoffsetreg>
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	000a0014 	.word	0x000a0014
 80098a8:	000a0004 	.word	0x000a0004

080098ac <ull_configeventcounters>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4605      	mov	r5, r0
 80098b0:	460c      	mov	r4, r1
 80098b2:	2302      	movs	r3, #2
 80098b4:	2200      	movs	r2, #0
 80098b6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80098ba:	f7ff ff7f 	bl	80097bc <dwt_write8bitoffsetreg>
 80098be:	b904      	cbnz	r4, 80098c2 <ull_configeventcounters+0x16>
 80098c0:	bd38      	pop	{r3, r4, r5, pc}
 80098c2:	2301      	movs	r3, #1
 80098c4:	2200      	movs	r2, #0
 80098c6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80098ca:	4628      	mov	r0, r5
 80098cc:	f7ff ff76 	bl	80097bc <dwt_write8bitoffsetreg>
 80098d0:	e7f6      	b.n	80098c0 <ull_configeventcounters+0x14>
	...

080098d4 <ull_aon_read>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	2200      	movs	r2, #0
 80098dc:	490a      	ldr	r1, [pc, #40]	; (8009908 <ull_aon_read+0x34>)
 80098de:	f7ff fd82 	bl	80093e6 <dwt_write16bitoffsetreg>
 80098e2:	4d0a      	ldr	r5, [pc, #40]	; (800990c <ull_aon_read+0x38>)
 80098e4:	2388      	movs	r3, #136	; 0x88
 80098e6:	2200      	movs	r2, #0
 80098e8:	4629      	mov	r1, r5
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff ff66 	bl	80097bc <dwt_write8bitoffsetreg>
 80098f0:	2300      	movs	r3, #0
 80098f2:	461a      	mov	r2, r3
 80098f4:	4629      	mov	r1, r5
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7ff ff60 	bl	80097bc <dwt_write8bitoffsetreg>
 80098fc:	2200      	movs	r2, #0
 80098fe:	4904      	ldr	r1, [pc, #16]	; (8009910 <ull_aon_read+0x3c>)
 8009900:	4620      	mov	r0, r4
 8009902:	f7ff f980 	bl	8008c06 <dwt_read8bitoffsetreg>
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	000a000c 	.word	0x000a000c
 800990c:	000a0004 	.word	0x000a0004
 8009910:	000a0008 	.word	0x000a0008

08009914 <ull_aon_write>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	4604      	mov	r4, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4615      	mov	r5, r2
 800991c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009920:	bf34      	ite	cc
 8009922:	2600      	movcc	r6, #0
 8009924:	2620      	movcs	r6, #32
 8009926:	2200      	movs	r2, #0
 8009928:	490b      	ldr	r1, [pc, #44]	; (8009958 <ull_aon_write+0x44>)
 800992a:	f7ff fd5c 	bl	80093e6 <dwt_write16bitoffsetreg>
 800992e:	462b      	mov	r3, r5
 8009930:	2200      	movs	r2, #0
 8009932:	490a      	ldr	r1, [pc, #40]	; (800995c <ull_aon_write+0x48>)
 8009934:	4620      	mov	r0, r4
 8009936:	f7ff ff41 	bl	80097bc <dwt_write8bitoffsetreg>
 800993a:	4d09      	ldr	r5, [pc, #36]	; (8009960 <ull_aon_write+0x4c>)
 800993c:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8009940:	2200      	movs	r2, #0
 8009942:	4629      	mov	r1, r5
 8009944:	4620      	mov	r0, r4
 8009946:	f7ff ff39 	bl	80097bc <dwt_write8bitoffsetreg>
 800994a:	2300      	movs	r3, #0
 800994c:	461a      	mov	r2, r3
 800994e:	4629      	mov	r1, r5
 8009950:	4620      	mov	r0, r4
 8009952:	f7ff ff33 	bl	80097bc <dwt_write8bitoffsetreg>
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	000a000c 	.word	0x000a000c
 800995c:	000a0010 	.word	0x000a0010
 8009960:	000a0004 	.word	0x000a0004

08009964 <ull_configuresleep>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	4616      	mov	r6, r2
 800996c:	2200      	movs	r2, #0
 800996e:	f240 110b 	movw	r1, #267	; 0x10b
 8009972:	f7ff ffcf 	bl	8009914 <ull_aon_write>
 8009976:	f44f 7182 	mov.w	r1, #260	; 0x104
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff ffaa 	bl	80098d4 <ull_aon_read>
 8009980:	f000 021f 	and.w	r2, r0, #31
 8009984:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009988:	4620      	mov	r0, r4
 800998a:	f7ff ffc3 	bl	8009914 <ull_aon_write>
 800998e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009990:	8a1a      	ldrh	r2, [r3, #16]
 8009992:	4315      	orrs	r5, r2
 8009994:	821d      	strh	r5, [r3, #16]
 8009996:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009998:	8a1b      	ldrh	r3, [r3, #16]
 800999a:	2200      	movs	r2, #0
 800999c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 80099a0:	4620      	mov	r0, r4
 80099a2:	f7ff fd20 	bl	80093e6 <dwt_write16bitoffsetreg>
 80099a6:	4633      	mov	r3, r6
 80099a8:	2200      	movs	r2, #0
 80099aa:	4902      	ldr	r1, [pc, #8]	; (80099b4 <ull_configuresleep+0x50>)
 80099ac:	4620      	mov	r0, r4
 80099ae:	f7ff ff05 	bl	80097bc <dwt_write8bitoffsetreg>
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	000a0014 	.word	0x000a0014

080099b8 <ull_writetxdata>:
 80099b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ba:	b083      	sub	sp, #12
 80099bc:	185c      	adds	r4, r3, r1
 80099be:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80099c2:	da24      	bge.n	8009a0e <ull_writetxdata+0x56>
 80099c4:	461c      	mov	r4, r3
 80099c6:	4617      	mov	r7, r2
 80099c8:	460e      	mov	r6, r1
 80099ca:	4605      	mov	r5, r0
 80099cc:	2b7f      	cmp	r3, #127	; 0x7f
 80099ce:	d915      	bls.n	80099fc <ull_writetxdata+0x44>
 80099d0:	2314      	movs	r3, #20
 80099d2:	2200      	movs	r2, #0
 80099d4:	490f      	ldr	r1, [pc, #60]	; (8009a14 <ull_writetxdata+0x5c>)
 80099d6:	f7ff fd63 	bl	80094a0 <dwt_write32bitoffsetreg>
 80099da:	4623      	mov	r3, r4
 80099dc:	2200      	movs	r2, #0
 80099de:	490e      	ldr	r1, [pc, #56]	; (8009a18 <ull_writetxdata+0x60>)
 80099e0:	4628      	mov	r0, r5
 80099e2:	f7ff fd5d 	bl	80094a0 <dwt_write32bitoffsetreg>
 80099e6:	9700      	str	r7, [sp, #0]
 80099e8:	4633      	mov	r3, r6
 80099ea:	2200      	movs	r2, #0
 80099ec:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7ff fced 	bl	80093d0 <dwt_writetodevice>
 80099f6:	2000      	movs	r0, #0
 80099f8:	b003      	add	sp, #12
 80099fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fc:	9200      	str	r2, [sp, #0]
 80099fe:	460b      	mov	r3, r1
 8009a00:	4622      	mov	r2, r4
 8009a02:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8009a06:	f7ff fce3 	bl	80093d0 <dwt_writetodevice>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e7f4      	b.n	80099f8 <ull_writetxdata+0x40>
 8009a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a12:	e7f1      	b.n	80099f8 <ull_writetxdata+0x40>
 8009a14:	001f0004 	.word	0x001f0004
 8009a18:	001f0008 	.word	0x001f0008

08009a1c <ull_signal_rx_buff_free>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	4604      	mov	r4, r0
 8009a22:	2302      	movs	r3, #2
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	9200      	str	r2, [sp, #0]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	2113      	movs	r1, #19
 8009a2e:	f7ff f83a 	bl	8008aa6 <dwt_xfer3xxx>
 8009a32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a34:	7b9a      	ldrb	r2, [r3, #14]
 8009a36:	2a03      	cmp	r2, #3
 8009a38:	bf0c      	ite	eq
 8009a3a:	2201      	moveq	r2, #1
 8009a3c:	2203      	movne	r2, #3
 8009a3e:	739a      	strb	r2, [r3, #14]
 8009a40:	b002      	add	sp, #8
 8009a42:	bd10      	pop	{r4, pc}

08009a44 <ull_isr>:
 8009a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a48:	4604      	mov	r4, r0
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8009a50:	f7ff f8d9 	bl	8008c06 <dwt_read8bitoffsetreg>
 8009a54:	4605      	mov	r5, r0
 8009a56:	2200      	movs	r2, #0
 8009a58:	2144      	movs	r1, #68	; 0x44
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff f8ab 	bl	8008bb6 <dwt_read32bitoffsetreg>
 8009a60:	4606      	mov	r6, r0
 8009a62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a64:	2200      	movs	r2, #0
 8009a66:	83da      	strh	r2, [r3, #30]
 8009a68:	f883 2020 	strb.w	r2, [r3, #32]
 8009a6c:	619a      	str	r2, [r3, #24]
 8009a6e:	839a      	strh	r2, [r3, #28]
 8009a70:	625a      	str	r2, [r3, #36]	; 0x24
 8009a72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a74:	625c      	str	r4, [r3, #36]	; 0x24
 8009a76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a78:	7b9f      	ldrb	r7, [r3, #14]
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	d17f      	bne.n	8009b7e <ull_isr+0x13a>
 8009a7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a80:	619e      	str	r6, [r3, #24]
 8009a82:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 8009a86:	f898 3015 	ldrb.w	r3, [r8, #21]
 8009a8a:	f003 0303 	and.w	r3, r3, #3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	f000 8090 	beq.w	8009bb4 <ull_isr+0x170>
 8009a94:	f015 0f80 	tst.w	r5, #128	; 0x80
 8009a98:	f040 8093 	bne.w	8009bc2 <ull_isr+0x17e>
 8009a9c:	f015 0f01 	tst.w	r5, #1
 8009aa0:	f040 80c1 	bne.w	8009c26 <ull_isr+0x1e2>
 8009aa4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009aa8:	d00b      	beq.n	8009ac2 <ull_isr+0x7e>
 8009aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aac:	b113      	cbz	r3, 8009ab4 <ull_isr+0x70>
 8009aae:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009ab0:	3018      	adds	r0, #24
 8009ab2:	4798      	blx	r3
 8009ab4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009ab8:	2202      	movs	r2, #2
 8009aba:	2144      	movs	r1, #68	; 0x44
 8009abc:	4620      	mov	r0, r4
 8009abe:	f7ff fc92 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009ac2:	f015 0f08 	tst.w	r5, #8
 8009ac6:	d107      	bne.n	8009ad8 <ull_isr+0x94>
 8009ac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009aca:	7b9b      	ldrb	r3, [r3, #14]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 80ea 	beq.w	8009ca6 <ull_isr+0x262>
 8009ad2:	2f00      	cmp	r7, #0
 8009ad4:	f000 80e7 	beq.w	8009ca6 <ull_isr+0x262>
 8009ad8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2020 	strb.w	r2, [r3, #32]
 8009ae0:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8009ae4:	f000 80ad 	beq.w	8009c42 <ull_isr+0x1fe>
 8009ae8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009aea:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009aee:	f043 0308 	orr.w	r3, r3, #8
 8009af2:	f882 3020 	strb.w	r3, [r2, #32]
 8009af6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8009afa:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8009afe:	d008      	beq.n	8009b12 <ull_isr+0xce>
 8009b00:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b02:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009b06:	f043 0310 	orr.w	r3, r3, #16
 8009b0a:	f882 3020 	strb.w	r3, [r2, #32]
 8009b0e:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8009b12:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009b16:	d006      	beq.n	8009b26 <ull_isr+0xe2>
 8009b18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b1a:	7d53      	ldrb	r3, [r2, #21]
 8009b1c:	f003 0303 	and.w	r3, r3, #3
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	f000 809a 	beq.w	8009c5a <ull_isr+0x216>
 8009b26:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8009b2a:	f040 80a2 	bne.w	8009c72 <ull_isr+0x22e>
 8009b2e:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8009b32:	2200      	movs	r2, #0
 8009b34:	2144      	movs	r1, #68	; 0x44
 8009b36:	4620      	mov	r0, r4
 8009b38:	f7ff fcb2 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7ff fe7b 	bl	8009838 <_dwt_clear_db_events>
 8009b42:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009b44:	8bc3      	ldrh	r3, [r0, #30]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f040 80a2 	bne.w	8009c90 <ull_isr+0x24c>
 8009b4c:	7d43      	ldrb	r3, [r0, #21]
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	f000 809c 	beq.w	8009c90 <ull_isr+0x24c>
 8009b58:	6983      	ldr	r3, [r0, #24]
 8009b5a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009b5e:	6183      	str	r3, [r0, #24]
 8009b60:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b62:	6993      	ldr	r3, [r2, #24]
 8009b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b68:	6193      	str	r3, [r2, #24]
 8009b6a:	69e3      	ldr	r3, [r4, #28]
 8009b6c:	b113      	cbz	r3, 8009b74 <ull_isr+0x130>
 8009b6e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009b70:	3018      	adds	r0, #24
 8009b72:	4798      	blx	r3
 8009b74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2020 	strb.w	r2, [r3, #32]
 8009b7c:	e08c      	b.n	8009c98 <ull_isr+0x254>
 8009b7e:	496d      	ldr	r1, [pc, #436]	; (8009d34 <ull_isr+0x2f0>)
 8009b80:	4620      	mov	r0, r4
 8009b82:	f7ff f840 	bl	8008c06 <dwt_read8bitoffsetreg>
 8009b86:	4607      	mov	r7, r0
 8009b88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b8a:	7b9b      	ldrb	r3, [r3, #14]
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	bf08      	it	eq
 8009b90:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 8009b94:	f017 0f01 	tst.w	r7, #1
 8009b98:	bf18      	it	ne
 8009b9a:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8009b9e:	f017 0f02 	tst.w	r7, #2
 8009ba2:	bf18      	it	ne
 8009ba4:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8009ba8:	f017 0f04 	tst.w	r7, #4
 8009bac:	bf18      	it	ne
 8009bae:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8009bb2:	e764      	b.n	8009a7e <ull_isr+0x3a>
 8009bb4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009bb8:	bf1c      	itt	ne
 8009bba:	f045 0508 	orrne.w	r5, r5, #8
 8009bbe:	b2ed      	uxtbne	r5, r5
 8009bc0:	e768      	b.n	8009a94 <ull_isr+0x50>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2148      	movs	r1, #72	; 0x48
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7ff f80b 	bl	8008be2 <dwt_read16bitoffsetreg>
 8009bcc:	f8a8 001c 	strh.w	r0, [r8, #28]
 8009bd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009bd2:	7d1a      	ldrb	r2, [r3, #20]
 8009bd4:	b11a      	cbz	r2, 8009bde <ull_isr+0x19a>
 8009bd6:	699a      	ldr	r2, [r3, #24]
 8009bd8:	f012 0f04 	tst.w	r2, #4
 8009bdc:	d103      	bne.n	8009be6 <ull_isr+0x1a2>
 8009bde:	8b9b      	ldrh	r3, [r3, #28]
 8009be0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009be4:	b18b      	cbz	r3, 8009c0a <ull_isr+0x1c6>
 8009be6:	2304      	movs	r3, #4
 8009be8:	2200      	movs	r2, #0
 8009bea:	2144      	movs	r1, #68	; 0x44
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7ff fde5 	bl	80097bc <dwt_write8bitoffsetreg>
 8009bf2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2148      	movs	r1, #72	; 0x48
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7ff fbf3 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009c00:	6a23      	ldr	r3, [r4, #32]
 8009c02:	b113      	cbz	r3, 8009c0a <ull_isr+0x1c6>
 8009c04:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009c06:	3018      	adds	r0, #24
 8009c08:	4798      	blx	r3
 8009c0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c0c:	8b9b      	ldrh	r3, [r3, #28]
 8009c0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009c12:	f43f af43 	beq.w	8009a9c <ull_isr+0x58>
 8009c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2148      	movs	r1, #72	; 0x48
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f7ff fbe1 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009c24:	e73a      	b.n	8009a9c <ull_isr+0x58>
 8009c26:	23f8      	movs	r3, #248	; 0xf8
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2144      	movs	r1, #68	; 0x44
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f7ff fdc5 	bl	80097bc <dwt_write8bitoffsetreg>
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f43f af35 	beq.w	8009aa4 <ull_isr+0x60>
 8009c3a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009c3c:	3018      	adds	r0, #24
 8009c3e:	4798      	blx	r3
 8009c40:	e730      	b.n	8009aa4 <ull_isr+0x60>
 8009c42:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8009c46:	bf1f      	itttt	ne
 8009c48:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8009c4a:	f892 3020 	ldrbne.w	r3, [r2, #32]
 8009c4e:	f043 0304 	orrne.w	r3, r3, #4
 8009c52:	f882 3020 	strbne.w	r3, [r2, #32]
 8009c56:	2700      	movs	r7, #0
 8009c58:	e74f      	b.n	8009afa <ull_isr+0xb6>
 8009c5a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009c5e:	f043 0302 	orr.w	r3, r3, #2
 8009c62:	f882 3020 	strb.w	r3, [r2, #32]
 8009c66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c68:	2200      	movs	r2, #0
 8009c6a:	83da      	strh	r2, [r3, #30]
 8009c6c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8009c70:	e75d      	b.n	8009b2e <ull_isr+0xea>
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff fdae 	bl	80097d4 <ull_getframelength>
 8009c78:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009c7c:	f43f af57 	beq.w	8009b2e <ull_isr+0xea>
 8009c80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009c82:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	f882 3020 	strb.w	r3, [r2, #32]
 8009c8e:	e74e      	b.n	8009b2e <ull_isr+0xea>
 8009c90:	6963      	ldr	r3, [r4, #20]
 8009c92:	b10b      	cbz	r3, 8009c98 <ull_isr+0x254>
 8009c94:	3018      	adds	r0, #24
 8009c96:	4798      	blx	r3
 8009c98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c9a:	7b9b      	ldrb	r3, [r3, #14]
 8009c9c:	bb03      	cbnz	r3, 8009ce0 <ull_isr+0x29c>
 8009c9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2020 	strb.w	r2, [r3, #32]
 8009ca6:	f015 0f10 	tst.w	r5, #16
 8009caa:	d11d      	bne.n	8009ce8 <ull_isr+0x2a4>
 8009cac:	f015 0f20 	tst.w	r5, #32
 8009cb0:	d12d      	bne.n	8009d0e <ull_isr+0x2ca>
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4920      	ldr	r1, [pc, #128]	; (8009d38 <ull_isr+0x2f4>)
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7fe ffa5 	bl	8008c06 <dwt_read8bitoffsetreg>
 8009cbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009cbe:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8009cc2:	f010 0303 	ands.w	r3, r0, #3
 8009cc6:	d009      	beq.n	8009cdc <ull_isr+0x298>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	491b      	ldr	r1, [pc, #108]	; (8009d38 <ull_isr+0x2f4>)
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff fd75 	bl	80097bc <dwt_write8bitoffsetreg>
 8009cd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cd4:	b113      	cbz	r3, 8009cdc <ull_isr+0x298>
 8009cd6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009cd8:	3018      	adds	r0, #24
 8009cda:	4798      	blx	r3
 8009cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7ff fe9b 	bl	8009a1c <ull_signal_rx_buff_free>
 8009ce6:	e7da      	b.n	8009c9e <ull_isr+0x25a>
 8009ce8:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <ull_isr+0x2f8>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	2144      	movs	r1, #68	; 0x44
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7ff fbd6 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f7ff fd9f 	bl	8009838 <_dwt_clear_db_events>
 8009cfa:	69e3      	ldr	r3, [r4, #28]
 8009cfc:	b113      	cbz	r3, 8009d04 <ull_isr+0x2c0>
 8009cfe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009d00:	3018      	adds	r0, #24
 8009d02:	4798      	blx	r3
 8009d04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2020 	strb.w	r2, [r3, #32]
 8009d0c:	e7ce      	b.n	8009cac <ull_isr+0x268>
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <ull_isr+0x2fc>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	2144      	movs	r1, #68	; 0x44
 8009d14:	4620      	mov	r0, r4
 8009d16:	f7ff fbc3 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff fd8c 	bl	8009838 <_dwt_clear_db_events>
 8009d20:	69a3      	ldr	r3, [r4, #24]
 8009d22:	b113      	cbz	r3, 8009d2a <ull_isr+0x2e6>
 8009d24:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009d26:	3018      	adds	r0, #24
 8009d28:	4798      	blx	r3
 8009d2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2020 	strb.w	r2, [r3, #32]
 8009d32:	e7be      	b.n	8009cb2 <ull_isr+0x26e>
 8009d34:	00010018 	.word	0x00010018
 8009d38:	00110038 	.word	0x00110038
 8009d3c:	34059400 	.word	0x34059400
 8009d40:	10220400 	.word	0x10220400

08009d44 <dwt_modify32bitoffsetreg>:
 8009d44:	b530      	push	{r4, r5, lr}
 8009d46:	b085      	sub	sp, #20
 8009d48:	9c08      	ldr	r4, [sp, #32]
 8009d4a:	f88d 3008 	strb.w	r3, [sp, #8]
 8009d4e:	0a1d      	lsrs	r5, r3, #8
 8009d50:	f88d 5009 	strb.w	r5, [sp, #9]
 8009d54:	0c1d      	lsrs	r5, r3, #16
 8009d56:	f88d 500a 	strb.w	r5, [sp, #10]
 8009d5a:	0e1b      	lsrs	r3, r3, #24
 8009d5c:	f88d 300b 	strb.w	r3, [sp, #11]
 8009d60:	f88d 400c 	strb.w	r4, [sp, #12]
 8009d64:	0a23      	lsrs	r3, r4, #8
 8009d66:	f88d 300d 	strb.w	r3, [sp, #13]
 8009d6a:	0c23      	lsrs	r3, r4, #16
 8009d6c:	f88d 300e 	strb.w	r3, [sp, #14]
 8009d70:	0e24      	lsrs	r4, r4, #24
 8009d72:	f88d 400f 	strb.w	r4, [sp, #15]
 8009d76:	f248 0303 	movw	r3, #32771	; 0x8003
 8009d7a:	9301      	str	r3, [sp, #4]
 8009d7c:	ab02      	add	r3, sp, #8
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	2308      	movs	r3, #8
 8009d82:	b292      	uxth	r2, r2
 8009d84:	f7fe fe8f 	bl	8008aa6 <dwt_xfer3xxx>
 8009d88:	b005      	add	sp, #20
 8009d8a:	bd30      	pop	{r4, r5, pc}

08009d8c <ull_enable_rf_tx>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	4604      	mov	r4, r0
 8009d92:	460e      	mov	r6, r1
 8009d94:	4d13      	ldr	r5, [pc, #76]	; (8009de4 <ull_enable_rf_tx+0x58>)
 8009d96:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da0:	2200      	movs	r2, #0
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7ff ffce 	bl	8009d44 <dwt_modify32bitoffsetreg>
 8009da8:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009db2:	2200      	movs	r2, #0
 8009db4:	4629      	mov	r1, r5
 8009db6:	4620      	mov	r0, r4
 8009db8:	f7ff ffc4 	bl	8009d44 <dwt_modify32bitoffsetreg>
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <ull_enable_rf_tx+0x5c>)
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f7ff ffba 	bl	8009d44 <dwt_modify32bitoffsetreg>
 8009dd0:	b90e      	cbnz	r6, 8009dd6 <ull_enable_rf_tx+0x4a>
 8009dd2:	b002      	add	sp, #8
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
 8009dd6:	4b05      	ldr	r3, [pc, #20]	; (8009dec <ull_enable_rf_tx+0x60>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4905      	ldr	r1, [pc, #20]	; (8009df0 <ull_enable_rf_tx+0x64>)
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f7ff fb5f 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009de2:	e7f6      	b.n	8009dd2 <ull_enable_rf_tx+0x46>
 8009de4:	00070048 	.word	0x00070048
 8009de8:	02003c00 	.word	0x02003c00
 8009dec:	01011100 	.word	0x01011100
 8009df0:	00070014 	.word	0x00070014

08009df4 <ull_enable_rftx_blocks>:
 8009df4:	b500      	push	{lr}
 8009df6:	b083      	sub	sp, #12
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <ull_enable_rftx_blocks+0x1c>)
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e00:	2200      	movs	r2, #0
 8009e02:	4904      	ldr	r1, [pc, #16]	; (8009e14 <ull_enable_rftx_blocks+0x20>)
 8009e04:	f7ff ff9e 	bl	8009d44 <dwt_modify32bitoffsetreg>
 8009e08:	b003      	add	sp, #12
 8009e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e0e:	bf00      	nop
 8009e10:	02003c00 	.word	0x02003c00
 8009e14:	00070004 	.word	0x00070004

08009e18 <_dwt_otpprogword32>:
 8009e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	4604      	mov	r4, r0
 8009e20:	460d      	mov	r5, r1
 8009e22:	4617      	mov	r7, r2
 8009e24:	4e56      	ldr	r6, [pc, #344]	; (8009f80 <_dwt_otpprogword32+0x168>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	4631      	mov	r1, r6
 8009e2a:	f7fe fec4 	bl	8008bb6 <dwt_read32bitoffsetreg>
 8009e2e:	4681      	mov	r9, r0
 8009e30:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7ff ff80 	bl	8009d44 <dwt_modify32bitoffsetreg>
 8009e44:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8009f84 <_dwt_otpprogword32+0x16c>
 8009e48:	2318      	movs	r3, #24
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f7ff fac9 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009e54:	2125      	movs	r1, #37	; 0x25
 8009e56:	4620      	mov	r0, r4
 8009e58:	f7ff faec 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7ff fae8 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e64:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f7ff fae3 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e6e:	b2f9      	uxtb	r1, r7
 8009e70:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7ff fadd 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff fad8 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e84:	2100      	movs	r1, #0
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7ff fad4 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e8c:	2102      	movs	r1, #2
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff fad0 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e94:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7ff facb 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009e9e:	b2e9      	uxtb	r1, r5
 8009ea0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f7ff fac5 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009eaa:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8009eae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f7ff fabe 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009eb8:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8009ebc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7ff fab7 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009ec6:	0e29      	lsrs	r1, r5, #24
 8009ec8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f7ff fab1 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f7ff faad 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009eda:	213a      	movs	r1, #58	; 0x3a
 8009edc:	4620      	mov	r0, r4
 8009ede:	f7ff faa9 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009ee2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7ff faa4 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009eec:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f7ff fa9f 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7ff fa9b 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009efe:	213a      	movs	r1, #58	; 0x3a
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7ff fa97 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009f06:	f240 1101 	movw	r1, #257	; 0x101
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f7ff fa92 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009f10:	2302      	movs	r3, #2
 8009f12:	2200      	movs	r2, #0
 8009f14:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f7ff fa64 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	461a      	mov	r2, r3
 8009f22:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f26:	4620      	mov	r0, r4
 8009f28:	f7ff fa5d 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009f2c:	2002      	movs	r0, #2
 8009f2e:	f7f6 fc97 	bl	8000860 <deca_sleep>
 8009f32:	213a      	movs	r1, #58	; 0x3a
 8009f34:	4620      	mov	r0, r4
 8009f36:	f7ff fa7d 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009f3a:	f44f 7181 	mov.w	r1, #258	; 0x102
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7ff fa78 	bl	8009434 <__dwt_otp_write_wdata_id_reg>
 8009f44:	2302      	movs	r3, #2
 8009f46:	2200      	movs	r2, #0
 8009f48:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f7ff fa4a 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009f52:	2300      	movs	r3, #0
 8009f54:	461a      	mov	r2, r3
 8009f56:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f7ff fa43 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009f60:	2300      	movs	r3, #0
 8009f62:	461a      	mov	r2, r3
 8009f64:	4641      	mov	r1, r8
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7ff fa3d 	bl	80093e6 <dwt_write16bitoffsetreg>
 8009f6c:	464b      	mov	r3, r9
 8009f6e:	2200      	movs	r2, #0
 8009f70:	4631      	mov	r1, r6
 8009f72:	4620      	mov	r0, r4
 8009f74:	f7ff fa94 	bl	80094a0 <dwt_write32bitoffsetreg>
 8009f78:	b003      	add	sp, #12
 8009f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f7e:	bf00      	nop
 8009f80:	00070044 	.word	0x00070044
 8009f84:	000b0008 	.word	0x000b0008

08009f88 <ull_setgpiomode>:
 8009f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	2400      	movs	r4, #0
 8009f8e:	4623      	mov	r3, r4
 8009f90:	2601      	movs	r6, #1
 8009f92:	2707      	movs	r7, #7
 8009f94:	e002      	b.n	8009f9c <ull_setgpiomode+0x14>
 8009f96:	3401      	adds	r4, #1
 8009f98:	2c09      	cmp	r4, #9
 8009f9a:	d009      	beq.n	8009fb0 <ull_setgpiomode+0x28>
 8009f9c:	fa06 f504 	lsl.w	r5, r6, r4
 8009fa0:	420d      	tst	r5, r1
 8009fa2:	d0f8      	beq.n	8009f96 <ull_setgpiomode+0xe>
 8009fa4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8009fa8:	fa07 f505 	lsl.w	r5, r7, r5
 8009fac:	432b      	orrs	r3, r5
 8009fae:	e7f2      	b.n	8009f96 <ull_setgpiomode+0xe>
 8009fb0:	401a      	ands	r2, r3
 8009fb2:	9200      	str	r2, [sp, #0]
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009fbc:	f7ff fec2 	bl	8009d44 <dwt_modify32bitoffsetreg>
 8009fc0:	b003      	add	sp, #12
 8009fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fc4 <ull_writetxfctrl>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	4604      	mov	r4, r0
 8009fca:	2a7f      	cmp	r2, #127	; 0x7f
 8009fcc:	d912      	bls.n	8009ff4 <ull_writetxfctrl+0x30>
 8009fce:	3280      	adds	r2, #128	; 0x80
 8009fd0:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8009fd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fd8:	9100      	str	r1, [sp, #0]
 8009fda:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <ull_writetxfctrl+0x48>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2120      	movs	r1, #32
 8009fe0:	f7ff feb0 	bl	8009d44 <dwt_modify32bitoffsetreg>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7fe fe0b 	bl	8008c06 <dwt_read8bitoffsetreg>
 8009ff0:	b002      	add	sp, #8
 8009ff2:	bd10      	pop	{r4, pc}
 8009ff4:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8009ff8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ffc:	9100      	str	r1, [sp, #0]
 8009ffe:	4b03      	ldr	r3, [pc, #12]	; (800a00c <ull_writetxfctrl+0x48>)
 800a000:	2200      	movs	r2, #0
 800a002:	2120      	movs	r1, #32
 800a004:	f7ff fe9e 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a008:	e7f2      	b.n	8009ff0 <ull_writetxfctrl+0x2c>
 800a00a:	bf00      	nop
 800a00c:	fc00f400 	.word	0xfc00f400

0800a010 <prs_sys_status_and_or>:
 800a010:	b500      	push	{lr}
 800a012:	b083      	sub	sp, #12
 800a014:	9200      	str	r2, [sp, #0]
 800a016:	460b      	mov	r3, r1
 800a018:	2200      	movs	r2, #0
 800a01a:	2144      	movs	r1, #68	; 0x44
 800a01c:	f7ff fe92 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a020:	2000      	movs	r0, #0
 800a022:	b003      	add	sp, #12
 800a024:	f85d fb04 	ldr.w	pc, [sp], #4

0800a028 <dwt_modify8bitoffsetreg>:
 800a028:	b500      	push	{lr}
 800a02a:	b085      	sub	sp, #20
 800a02c:	f88d 300c 	strb.w	r3, [sp, #12]
 800a030:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a034:	f88d 300d 	strb.w	r3, [sp, #13]
 800a038:	f248 0301 	movw	r3, #32769	; 0x8001
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	ab03      	add	r3, sp, #12
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	2302      	movs	r3, #2
 800a044:	b292      	uxth	r2, r2
 800a046:	f7fe fd2e 	bl	8008aa6 <dwt_xfer3xxx>
 800a04a:	b005      	add	sp, #20
 800a04c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a050 <ull_configciadiag>:
 800a050:	b530      	push	{r4, r5, lr}
 800a052:	b083      	sub	sp, #12
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	f011 0f01 	tst.w	r1, #1
 800a05c:	d015      	beq.n	800a08a <ull_configciadiag+0x3a>
 800a05e:	2300      	movs	r3, #0
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	23ef      	movs	r3, #239	; 0xef
 800a064:	2202      	movs	r2, #2
 800a066:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a06a:	f7ff ffdd 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a06e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a070:	759d      	strb	r5, [r3, #22]
 800a072:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a074:	7d9b      	ldrb	r3, [r3, #22]
 800a076:	085b      	lsrs	r3, r3, #1
 800a078:	d010      	beq.n	800a09c <ull_configciadiag+0x4c>
 800a07a:	086b      	lsrs	r3, r5, #1
 800a07c:	2200      	movs	r2, #0
 800a07e:	490e      	ldr	r1, [pc, #56]	; (800a0b8 <ull_configciadiag+0x68>)
 800a080:	4620      	mov	r0, r4
 800a082:	f7ff fb9b 	bl	80097bc <dwt_write8bitoffsetreg>
 800a086:	b003      	add	sp, #12
 800a088:	bd30      	pop	{r4, r5, pc}
 800a08a:	2310      	movs	r3, #16
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	23ff      	movs	r3, #255	; 0xff
 800a090:	2202      	movs	r2, #2
 800a092:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a096:	f7ff ffc7 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a09a:	e7e8      	b.n	800a06e <ull_configciadiag+0x1e>
 800a09c:	2301      	movs	r3, #1
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	23ff      	movs	r3, #255	; 0xff
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4904      	ldr	r1, [pc, #16]	; (800a0b8 <ull_configciadiag+0x68>)
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff ffbe 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a0ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a0ae:	7d93      	ldrb	r3, [r2, #22]
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	7593      	strb	r3, [r2, #22]
 800a0b6:	e7e6      	b.n	800a086 <ull_configciadiag+0x36>
 800a0b8:	00010020 	.word	0x00010020

0800a0bc <ull_calcbandwidthadj>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	f7ff f99f 	bl	8009408 <ull_force_clocks>
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f7ff fe5d 	bl	8009d8c <ull_enable_rf_tx>
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f7ff fe8e 	bl	8009df4 <ull_enable_rftx_blocks>
 800a0d8:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4915      	ldr	r1, [pc, #84]	; (800a134 <ull_calcbandwidthadj+0x78>)
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f7ff f980 	bl	80093e6 <dwt_write16bitoffsetreg>
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	23ff      	movs	r3, #255	; 0xff
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4912      	ldr	r1, [pc, #72]	; (800a138 <ull_calcbandwidthadj+0x7c>)
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7ff ff99 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a0f6:	4e10      	ldr	r6, [pc, #64]	; (800a138 <ull_calcbandwidthadj+0x7c>)
 800a0f8:	2500      	movs	r5, #0
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7fe fd81 	bl	8008c06 <dwt_read8bitoffsetreg>
 800a104:	f010 0f01 	tst.w	r0, #1
 800a108:	d1f7      	bne.n	800a0fa <ull_calcbandwidthadj+0x3e>
 800a10a:	4620      	mov	r0, r4
 800a10c:	f7ff faf8 	bl	8009700 <ull_disable_rftx_blocks>
 800a110:	2100      	movs	r1, #0
 800a112:	4620      	mov	r0, r4
 800a114:	f7ff fafe 	bl	8009714 <ull_disable_rf_tx>
 800a118:	2105      	movs	r1, #5
 800a11a:	4620      	mov	r0, r4
 800a11c:	f7ff f974 	bl	8009408 <ull_force_clocks>
 800a120:	2200      	movs	r2, #0
 800a122:	4906      	ldr	r1, [pc, #24]	; (800a13c <ull_calcbandwidthadj+0x80>)
 800a124:	4620      	mov	r0, r4
 800a126:	f7fe fd6e 	bl	8008c06 <dwt_read8bitoffsetreg>
 800a12a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a12e:	b002      	add	sp, #8
 800a130:	bd70      	pop	{r4, r5, r6, pc}
 800a132:	bf00      	nop
 800a134:	0008001c 	.word	0x0008001c
 800a138:	00080010 	.word	0x00080010
 800a13c:	0007001c 	.word	0x0007001c

0800a140 <ull_configuretxrf>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4605      	mov	r5, r0
 800a144:	460c      	mov	r4, r1
 800a146:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800a14a:	b149      	cbz	r1, 800a160 <ull_configuretxrf+0x20>
 800a14c:	f7ff ffb6 	bl	800a0bc <ull_calcbandwidthadj>
 800a150:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800a154:	2200      	movs	r2, #0
 800a156:	4905      	ldr	r1, [pc, #20]	; (800a16c <ull_configuretxrf+0x2c>)
 800a158:	4628      	mov	r0, r5
 800a15a:	f7ff f9a1 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	7823      	ldrb	r3, [r4, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	4902      	ldr	r1, [pc, #8]	; (800a170 <ull_configuretxrf+0x30>)
 800a166:	f7ff fb29 	bl	80097bc <dwt_write8bitoffsetreg>
 800a16a:	e7f1      	b.n	800a150 <ull_configuretxrf+0x10>
 800a16c:	00010004 	.word	0x00010004
 800a170:	0007001c 	.word	0x0007001c

0800a174 <ull_repeated_frames>:
 800a174:	b530      	push	{r4, r5, lr}
 800a176:	b083      	sub	sp, #12
 800a178:	4604      	mov	r4, r0
 800a17a:	460d      	mov	r5, r1
 800a17c:	2310      	movs	r3, #16
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	23ff      	movs	r3, #255	; 0xff
 800a182:	2200      	movs	r2, #0
 800a184:	4906      	ldr	r1, [pc, #24]	; (800a1a0 <ull_repeated_frames+0x2c>)
 800a186:	f7ff ff4f 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a18a:	462b      	mov	r3, r5
 800a18c:	2d02      	cmp	r5, #2
 800a18e:	bf38      	it	cc
 800a190:	2302      	movcc	r3, #2
 800a192:	2200      	movs	r2, #0
 800a194:	2128      	movs	r1, #40	; 0x28
 800a196:	4620      	mov	r0, r4
 800a198:	f7ff f982 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a19c:	b003      	add	sp, #12
 800a19e:	bd30      	pop	{r4, r5, pc}
 800a1a0:	000f0028 	.word	0x000f0028

0800a1a4 <ull_setdwstate>:
 800a1a4:	b530      	push	{r4, r5, lr}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	2901      	cmp	r1, #1
 800a1ac:	d01d      	beq.n	800a1ea <ull_setdwstate+0x46>
 800a1ae:	2902      	cmp	r1, #2
 800a1b0:	d02f      	beq.n	800a212 <ull_setdwstate+0x6e>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	23ff      	movs	r3, #255	; 0xff
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	4925      	ldr	r1, [pc, #148]	; (800a250 <ull_setdwstate+0xac>)
 800a1bc:	f7ff ff34 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a1c0:	4d24      	ldr	r5, [pc, #144]	; (800a254 <ull_setdwstate+0xb0>)
 800a1c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7ff fdb7 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	237f      	movs	r3, #127	; 0x7f
 800a1dc:	2202      	movs	r2, #2
 800a1de:	4629      	mov	r1, r5
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f7ff ff21 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a1e6:	b003      	add	sp, #12
 800a1e8:	bd30      	pop	{r4, r5, pc}
 800a1ea:	2105      	movs	r1, #5
 800a1ec:	f7ff f90c 	bl	8009408 <ull_force_clocks>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	4917      	ldr	r1, [pc, #92]	; (800a258 <ull_setdwstate+0xb4>)
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7ff fda1 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a202:	2201      	movs	r2, #1
 800a204:	9200      	str	r2, [sp, #0]
 800a206:	23ff      	movs	r3, #255	; 0xff
 800a208:	4912      	ldr	r1, [pc, #72]	; (800a254 <ull_setdwstate+0xb0>)
 800a20a:	4620      	mov	r0, r4
 800a20c:	f7ff ff0c 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a210:	e7e9      	b.n	800a1e6 <ull_setdwstate+0x42>
 800a212:	2303      	movs	r3, #3
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	23ff      	movs	r3, #255	; 0xff
 800a218:	2200      	movs	r2, #0
 800a21a:	490d      	ldr	r1, [pc, #52]	; (800a250 <ull_setdwstate+0xac>)
 800a21c:	f7ff ff04 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a220:	4d0c      	ldr	r5, [pc, #48]	; (800a254 <ull_setdwstate+0xb0>)
 800a222:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a22c:	2200      	movs	r2, #0
 800a22e:	4629      	mov	r1, r5
 800a230:	4620      	mov	r0, r4
 800a232:	f7ff fd87 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a236:	2300      	movs	r3, #0
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	237f      	movs	r3, #127	; 0x7f
 800a23c:	2202      	movs	r2, #2
 800a23e:	4629      	mov	r1, r5
 800a240:	4620      	mov	r0, r4
 800a242:	f7ff fef1 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a246:	2105      	movs	r1, #5
 800a248:	4620      	mov	r0, r4
 800a24a:	f7ff f8dd 	bl	8009408 <ull_force_clocks>
 800a24e:	e7ca      	b.n	800a1e6 <ull_setdwstate+0x42>
 800a250:	00110004 	.word	0x00110004
 800a254:	00110008 	.word	0x00110008
 800a258:	00090008 	.word	0x00090008

0800a25c <ull_configureframefilter>:
 800a25c:	b530      	push	{r4, r5, lr}
 800a25e:	b083      	sub	sp, #12
 800a260:	4605      	mov	r5, r0
 800a262:	2902      	cmp	r1, #2
 800a264:	d00e      	beq.n	800a284 <ull_configureframefilter+0x28>
 800a266:	2400      	movs	r4, #0
 800a268:	9400      	str	r4, [sp, #0]
 800a26a:	23fe      	movs	r3, #254	; 0xfe
 800a26c:	4622      	mov	r2, r4
 800a26e:	2110      	movs	r1, #16
 800a270:	f7ff feda 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a274:	4623      	mov	r3, r4
 800a276:	4622      	mov	r2, r4
 800a278:	2114      	movs	r1, #20
 800a27a:	4628      	mov	r0, r5
 800a27c:	f7ff f8b3 	bl	80093e6 <dwt_write16bitoffsetreg>
 800a280:	b003      	add	sp, #12
 800a282:	bd30      	pop	{r4, r5, pc}
 800a284:	4614      	mov	r4, r2
 800a286:	2301      	movs	r3, #1
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	23ff      	movs	r3, #255	; 0xff
 800a28c:	2200      	movs	r2, #0
 800a28e:	2110      	movs	r1, #16
 800a290:	f7ff feca 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a294:	4623      	mov	r3, r4
 800a296:	2200      	movs	r2, #0
 800a298:	2114      	movs	r1, #20
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7ff f8a3 	bl	80093e6 <dwt_write16bitoffsetreg>
 800a2a0:	e7ee      	b.n	800a280 <ull_configureframefilter+0x24>
	...

0800a2a4 <ull_run_pgfcal>:
 800a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	4c29      	ldr	r4, [pc, #164]	; (800a354 <ull_run_pgfcal+0xb0>)
 800a2ae:	4b2a      	ldr	r3, [pc, #168]	; (800a358 <ull_run_pgfcal+0xb4>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	f7ff f8f4 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	23ff      	movs	r3, #255	; 0xff
 800a2be:	2200      	movs	r2, #0
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f7ff feb0 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a2c8:	2403      	movs	r4, #3
 800a2ca:	f04f 0814 	mov.w	r8, #20
 800a2ce:	4f23      	ldr	r7, [pc, #140]	; (800a35c <ull_run_pgfcal+0xb8>)
 800a2d0:	2600      	movs	r6, #0
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f7f6 facf 	bl	8000876 <deca_usleep>
 800a2d8:	4632      	mov	r2, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f7fe fc92 	bl	8008c06 <dwt_read8bitoffsetreg>
 800a2e2:	2801      	cmp	r0, #1
 800a2e4:	d034      	beq.n	800a350 <ull_run_pgfcal+0xac>
 800a2e6:	1e63      	subs	r3, r4, #1
 800a2e8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a2ec:	d1f1      	bne.n	800a2d2 <ull_run_pgfcal+0x2e>
 800a2ee:	f06f 0402 	mvn.w	r4, #2
 800a2f2:	4e18      	ldr	r6, [pc, #96]	; (800a354 <ull_run_pgfcal+0xb0>)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f7ff fa5e 	bl	80097bc <dwt_write8bitoffsetreg>
 800a300:	2301      	movs	r3, #1
 800a302:	2200      	movs	r2, #0
 800a304:	4915      	ldr	r1, [pc, #84]	; (800a35c <ull_run_pgfcal+0xb8>)
 800a306:	4628      	mov	r0, r5
 800a308:	f7ff fa58 	bl	80097bc <dwt_write8bitoffsetreg>
 800a30c:	2301      	movs	r3, #1
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	23ff      	movs	r3, #255	; 0xff
 800a312:	2202      	movs	r2, #2
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	f7ff fe86 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a31c:	2200      	movs	r2, #0
 800a31e:	4910      	ldr	r1, [pc, #64]	; (800a360 <ull_run_pgfcal+0xbc>)
 800a320:	4628      	mov	r0, r5
 800a322:	f7fe fc48 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800a326:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a32a:	4298      	cmp	r0, r3
 800a32c:	bf08      	it	eq
 800a32e:	f06f 0403 	mvneq.w	r4, #3
 800a332:	2200      	movs	r2, #0
 800a334:	490b      	ldr	r1, [pc, #44]	; (800a364 <ull_run_pgfcal+0xc0>)
 800a336:	4628      	mov	r0, r5
 800a338:	f7fe fc3d 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800a33c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a340:	4298      	cmp	r0, r3
 800a342:	bf14      	ite	ne
 800a344:	4620      	movne	r0, r4
 800a346:	f06f 0004 	mvneq.w	r0, #4
 800a34a:	b002      	add	sp, #8
 800a34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a350:	2400      	movs	r4, #0
 800a352:	e7ce      	b.n	800a2f2 <ull_run_pgfcal+0x4e>
 800a354:	0004000c 	.word	0x0004000c
 800a358:	00020001 	.word	0x00020001
 800a35c:	00040020 	.word	0x00040020
 800a360:	00040014 	.word	0x00040014
 800a364:	0004001c 	.word	0x0004001c

0800a368 <ull_setinterrupt>:
 800a368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a36c:	b083      	sub	sp, #12
 800a36e:	4605      	mov	r5, r0
 800a370:	4688      	mov	r8, r1
 800a372:	4617      	mov	r7, r2
 800a374:	461c      	mov	r4, r3
 800a376:	f7f6 fa55 	bl	8000824 <decamutexon>
 800a37a:	4606      	mov	r6, r0
 800a37c:	2c02      	cmp	r4, #2
 800a37e:	d019      	beq.n	800a3b4 <ull_setinterrupt+0x4c>
 800a380:	2c04      	cmp	r4, #4
 800a382:	d017      	beq.n	800a3b4 <ull_setinterrupt+0x4c>
 800a384:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d03f      	beq.n	800a40c <ull_setinterrupt+0xa4>
 800a38c:	f04f 0900 	mov.w	r9, #0
 800a390:	f8cd 9000 	str.w	r9, [sp]
 800a394:	ea6f 0308 	mvn.w	r3, r8
 800a398:	464a      	mov	r2, r9
 800a39a:	213c      	movs	r1, #60	; 0x3c
 800a39c:	4628      	mov	r0, r5
 800a39e:	f7ff fcd1 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a3a2:	f8cd 9000 	str.w	r9, [sp]
 800a3a6:	43fb      	mvns	r3, r7
 800a3a8:	464a      	mov	r2, r9
 800a3aa:	2140      	movs	r1, #64	; 0x40
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f7ff fcc9 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a3b2:	e00b      	b.n	800a3cc <ull_setinterrupt+0x64>
 800a3b4:	4643      	mov	r3, r8
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	213c      	movs	r1, #60	; 0x3c
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f7ff f870 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a3c0:	463b      	mov	r3, r7
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2140      	movs	r1, #64	; 0x40
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f7ff f86a 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a3cc:	3c03      	subs	r4, #3
 800a3ce:	b2e4      	uxtb	r4, r4
 800a3d0:	2c01      	cmp	r4, #1
 800a3d2:	d92d      	bls.n	800a430 <ull_setinterrupt+0xc8>
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	213c      	movs	r1, #60	; 0x3c
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7fe fbec 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2144      	movs	r1, #68	; 0x44
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f7ff f85b 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2140      	movs	r1, #64	; 0x40
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f7fe fbe1 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2148      	movs	r1, #72	; 0x48
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f7ff f850 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a400:	4630      	mov	r0, r6
 800a402:	f7f6 fa20 	bl	8000846 <decamutexoff>
 800a406:	b003      	add	sp, #12
 800a408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a40c:	f8cd 8000 	str.w	r8, [sp]
 800a410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a414:	2200      	movs	r2, #0
 800a416:	213c      	movs	r1, #60	; 0x3c
 800a418:	4628      	mov	r0, r5
 800a41a:	f7ff fc93 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a41e:	9700      	str	r7, [sp, #0]
 800a420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a424:	2200      	movs	r2, #0
 800a426:	2140      	movs	r1, #64	; 0x40
 800a428:	4628      	mov	r0, r5
 800a42a:	f7ff fc8b 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a42e:	e7cd      	b.n	800a3cc <ull_setinterrupt+0x64>
 800a430:	2110      	movs	r1, #16
 800a432:	9100      	str	r1, [sp, #0]
 800a434:	23ff      	movs	r3, #255	; 0xff
 800a436:	2202      	movs	r2, #2
 800a438:	4628      	mov	r0, r5
 800a43a:	f7ff fdf5 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a43e:	e7c9      	b.n	800a3d4 <ull_setinterrupt+0x6c>

0800a440 <prs_ack_enable>:
 800a440:	b500      	push	{lr}
 800a442:	b083      	sub	sp, #12
 800a444:	2900      	cmp	r1, #0
 800a446:	bf0b      	itete	eq
 800a448:	23ff      	moveq	r3, #255	; 0xff
 800a44a:	23f7      	movne	r3, #247	; 0xf7
 800a44c:	2200      	moveq	r2, #0
 800a44e:	2208      	movne	r2, #8
 800a450:	9200      	str	r2, [sp, #0]
 800a452:	2201      	movs	r2, #1
 800a454:	2110      	movs	r1, #16
 800a456:	f7ff fde7 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a45a:	b003      	add	sp, #12
 800a45c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a460 <dwt_modify16bitoffsetreg>:
 800a460:	b510      	push	{r4, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800a468:	f88d 300c 	strb.w	r3, [sp, #12]
 800a46c:	0a1b      	lsrs	r3, r3, #8
 800a46e:	f88d 300d 	strb.w	r3, [sp, #13]
 800a472:	f88d 400e 	strb.w	r4, [sp, #14]
 800a476:	0a24      	lsrs	r4, r4, #8
 800a478:	f88d 400f 	strb.w	r4, [sp, #15]
 800a47c:	f248 0302 	movw	r3, #32770	; 0x8002
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	ab03      	add	r3, sp, #12
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2304      	movs	r3, #4
 800a488:	b292      	uxth	r2, r2
 800a48a:	f7fe fb0c 	bl	8008aa6 <dwt_xfer3xxx>
 800a48e:	b004      	add	sp, #16
 800a490:	bd10      	pop	{r4, pc}
	...

0800a494 <ull_setleds>:
 800a494:	b530      	push	{r4, r5, lr}
 800a496:	b083      	sub	sp, #12
 800a498:	4604      	mov	r4, r0
 800a49a:	f011 0f01 	tst.w	r1, #1
 800a49e:	d01f      	beq.n	800a4e0 <ull_setleds+0x4c>
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a4b2:	f7ff fc47 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a4b6:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4918      	ldr	r1, [pc, #96]	; (800a524 <ull_setleds+0x90>)
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff fc3d 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a4ca:	f015 0f02 	tst.w	r5, #2
 800a4ce:	d11a      	bne.n	800a506 <ull_setleds+0x72>
 800a4d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4914      	ldr	r1, [pc, #80]	; (800a528 <ull_setleds+0x94>)
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f7fe ffe1 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a4de:	e010      	b.n	800a502 <ull_setleds+0x6e>
 800a4e0:	2500      	movs	r5, #0
 800a4e2:	9500      	str	r5, [sp, #0]
 800a4e4:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a4e8:	462a      	mov	r2, r5
 800a4ea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a4ee:	f7ff fc29 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a4f2:	9500      	str	r5, [sp, #0]
 800a4f4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	490b      	ldr	r1, [pc, #44]	; (800a528 <ull_setleds+0x94>)
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f7ff ffaf 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a502:	b003      	add	sp, #12
 800a504:	bd30      	pop	{r4, r5, pc}
 800a506:	4d08      	ldr	r5, [pc, #32]	; (800a528 <ull_setleds+0x94>)
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <ull_setleds+0x98>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	4629      	mov	r1, r5
 800a50e:	4620      	mov	r0, r4
 800a510:	f7fe ffc6 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a514:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a518:	2200      	movs	r2, #0
 800a51a:	4629      	mov	r1, r5
 800a51c:	4620      	mov	r0, r4
 800a51e:	f7fe ffbf 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a522:	e7ee      	b.n	800a502 <ull_setleds+0x6e>
 800a524:	00110004 	.word	0x00110004
 800a528:	00110018 	.word	0x00110018
 800a52c:	000f0110 	.word	0x000f0110

0800a530 <ull_pgf_cal>:
 800a530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a532:	b083      	sub	sp, #12
 800a534:	4604      	mov	r4, r0
 800a536:	2901      	cmp	r1, #1
 800a538:	d009      	beq.n	800a54e <ull_pgf_cal+0x1e>
 800a53a:	2014      	movs	r0, #20
 800a53c:	f7f6 f99b 	bl	8000876 <deca_usleep>
 800a540:	4620      	mov	r0, r4
 800a542:	f7ff feaf 	bl	800a2a4 <ull_run_pgfcal>
 800a546:	4605      	mov	r5, r0
 800a548:	4628      	mov	r0, r5
 800a54a:	b003      	add	sp, #12
 800a54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a54e:	4e0f      	ldr	r6, [pc, #60]	; (800a58c <ull_pgf_cal+0x5c>)
 800a550:	2200      	movs	r2, #0
 800a552:	4631      	mov	r1, r6
 800a554:	f7fe fb45 	bl	8008be2 <dwt_read16bitoffsetreg>
 800a558:	4607      	mov	r7, r0
 800a55a:	f240 1307 	movw	r3, #263	; 0x107
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a564:	2200      	movs	r2, #0
 800a566:	4631      	mov	r1, r6
 800a568:	4620      	mov	r0, r4
 800a56a:	f7ff ff79 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a56e:	2014      	movs	r0, #20
 800a570:	f7f6 f981 	bl	8000876 <deca_usleep>
 800a574:	4620      	mov	r0, r4
 800a576:	f7ff fe95 	bl	800a2a4 <ull_run_pgfcal>
 800a57a:	4605      	mov	r5, r0
 800a57c:	2200      	movs	r2, #0
 800a57e:	9200      	str	r2, [sp, #0]
 800a580:	463b      	mov	r3, r7
 800a582:	4631      	mov	r1, r6
 800a584:	4620      	mov	r0, r4
 800a586:	f7ff ff6b 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a58a:	e7dd      	b.n	800a548 <ull_pgf_cal+0x18>
 800a58c:	00070048 	.word	0x00070048

0800a590 <ull_setgpiovalue>:
 800a590:	b500      	push	{lr}
 800a592:	b083      	sub	sp, #12
 800a594:	2a01      	cmp	r2, #1
 800a596:	d009      	beq.n	800a5ac <ull_setgpiovalue+0x1c>
 800a598:	43cb      	mvns	r3, r1
 800a59a:	2200      	movs	r2, #0
 800a59c:	9200      	str	r2, [sp, #0]
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	4906      	ldr	r1, [pc, #24]	; (800a5bc <ull_setgpiovalue+0x2c>)
 800a5a2:	f7ff ff5d 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a5a6:	b003      	add	sp, #12
 800a5a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5ac:	9100      	str	r1, [sp, #0]
 800a5ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4901      	ldr	r1, [pc, #4]	; (800a5bc <ull_setgpiovalue+0x2c>)
 800a5b6:	f7ff ff53 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a5ba:	e7f4      	b.n	800a5a6 <ull_setgpiovalue+0x16>
 800a5bc:	0005000c 	.word	0x0005000c

0800a5c0 <ull_readaccdata>:
 800a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	461d      	mov	r5, r3
 800a5cc:	f248 0340 	movw	r3, #32832	; 0x8040
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4918      	ldr	r1, [pc, #96]	; (800a63c <ull_readaccdata+0x7c>)
 800a5da:	f7ff ff41 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a5de:	19aa      	adds	r2, r5, r6
 800a5e0:	f243 0301 	movw	r3, #12289	; 0x3001
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	dc15      	bgt.n	800a614 <ull_readaccdata+0x54>
 800a5e8:	2d7f      	cmp	r5, #127	; 0x7f
 800a5ea:	d91d      	bls.n	800a628 <ull_readaccdata+0x68>
 800a5ec:	2315      	movs	r3, #21
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	4913      	ldr	r1, [pc, #76]	; (800a640 <ull_readaccdata+0x80>)
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7fe ff54 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a5f8:	462b      	mov	r3, r5
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4911      	ldr	r1, [pc, #68]	; (800a644 <ull_readaccdata+0x84>)
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7fe ff4e 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a604:	9700      	str	r7, [sp, #0]
 800a606:	4633      	mov	r3, r6
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a60e:	4620      	mov	r0, r4
 800a610:	f7fe fac7 	bl	8008ba2 <dwt_readfromdevice>
 800a614:	2200      	movs	r2, #0
 800a616:	9200      	str	r2, [sp, #0]
 800a618:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800a61c:	4907      	ldr	r1, [pc, #28]	; (800a63c <ull_readaccdata+0x7c>)
 800a61e:	4620      	mov	r0, r4
 800a620:	f7ff ff1e 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a624:	b003      	add	sp, #12
 800a626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a628:	9700      	str	r7, [sp, #0]
 800a62a:	4633      	mov	r3, r6
 800a62c:	462a      	mov	r2, r5
 800a62e:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800a632:	4620      	mov	r0, r4
 800a634:	f7fe fab5 	bl	8008ba2 <dwt_readfromdevice>
 800a638:	e7ec      	b.n	800a614 <ull_readaccdata+0x54>
 800a63a:	bf00      	nop
 800a63c:	00110004 	.word	0x00110004
 800a640:	001f0004 	.word	0x001f0004
 800a644:	001f0008 	.word	0x001f0008

0800a648 <ull_repeated_cw>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	4615      	mov	r5, r2
 800a650:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <ull_repeated_cw+0x44>)
 800a652:	2202      	movs	r2, #2
 800a654:	490e      	ldr	r1, [pc, #56]	; (800a690 <ull_repeated_cw+0x48>)
 800a656:	f7fe ff23 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a65a:	2d0f      	cmp	r5, #15
 800a65c:	bfa8      	it	ge
 800a65e:	250f      	movge	r5, #15
 800a660:	1e63      	subs	r3, r4, #1
 800a662:	2b03      	cmp	r3, #3
 800a664:	bf28      	it	cs
 800a666:	2404      	movcs	r4, #4
 800a668:	2310      	movs	r3, #16
 800a66a:	4123      	asrs	r3, r4
 800a66c:	2200      	movs	r2, #0
 800a66e:	4909      	ldr	r1, [pc, #36]	; (800a694 <ull_repeated_cw+0x4c>)
 800a670:	4630      	mov	r0, r6
 800a672:	f7fe ff15 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a676:	1e63      	subs	r3, r4, #1
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	fa05 f303 	lsl.w	r3, r5, r3
 800a67e:	2200      	movs	r2, #0
 800a680:	4905      	ldr	r1, [pc, #20]	; (800a698 <ull_repeated_cw+0x50>)
 800a682:	4630      	mov	r0, r6
 800a684:	f7fe ff0c 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a688:	bd70      	pop	{r4, r5, r6, pc}
 800a68a:	bf00      	nop
 800a68c:	00d20874 	.word	0x00d20874
 800a690:	00110010 	.word	0x00110010
 800a694:	00070028 	.word	0x00070028
 800a698:	00080018 	.word	0x00080018

0800a69c <ull_configure>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	460d      	mov	r5, r1
 800a6a6:	f891 9000 	ldrb.w	r9, [r1]
 800a6aa:	790b      	ldrb	r3, [r1, #4]
 800a6ac:	2b18      	cmp	r3, #24
 800a6ae:	d814      	bhi.n	800a6da <ull_configure+0x3e>
 800a6b0:	78cf      	ldrb	r7, [r1, #3]
 800a6b2:	2f18      	cmp	r7, #24
 800a6b4:	bf94      	ite	ls
 800a6b6:	2700      	movls	r7, #0
 800a6b8:	2701      	movhi	r7, #1
 800a6ba:	b2ff      	uxtb	r7, r7
 800a6bc:	79eb      	ldrb	r3, [r5, #7]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	bf0c      	ite	eq
 800a6c2:	2110      	moveq	r1, #16
 800a6c4:	2100      	movne	r1, #0
 800a6c6:	786b      	ldrb	r3, [r5, #1]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	2b06      	cmp	r3, #6
 800a6cc:	d810      	bhi.n	800a6f0 <ull_configure+0x54>
 800a6ce:	e8df f003 	tbb	[pc, r3]
 800a6d2:	0f06      	.short	0x0f06
 800a6d4:	0f0c120f 	.word	0x0f0c120f
 800a6d8:	09          	.byte	0x09
 800a6d9:	00          	.byte	0x00
 800a6da:	2701      	movs	r7, #1
 800a6dc:	e7ed      	b.n	800a6ba <ull_configure+0x1e>
 800a6de:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800a6e2:	e00a      	b.n	800a6fa <ull_configure+0x5e>
 800a6e4:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800a6e8:	e007      	b.n	800a6fa <ull_configure+0x5e>
 800a6ea:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800a6ee:	e004      	b.n	800a6fa <ull_configure+0x5e>
 800a6f0:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800a6f4:	e001      	b.n	800a6fa <ull_configure+0x5e>
 800a6f6:	f04f 0a20 	mov.w	sl, #32
 800a6fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a6fc:	8a13      	ldrh	r3, [r2, #16]
 800a6fe:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a702:	8213      	strh	r3, [r2, #16]
 800a704:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a706:	79ea      	ldrb	r2, [r5, #7]
 800a708:	72da      	strb	r2, [r3, #11]
 800a70a:	7b2e      	ldrb	r6, [r5, #12]
 800a70c:	1cb3      	adds	r3, r6, #2
 800a70e:	2601      	movs	r6, #1
 800a710:	409e      	lsls	r6, r3
 800a712:	fa1f f886 	uxth.w	r8, r6
 800a716:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a718:	4bca      	ldr	r3, [pc, #808]	; (800aa44 <ull_configure+0x3a8>)
 800a71a:	fb03 f308 	mul.w	r3, r3, r8
 800a71e:	0bdb      	lsrs	r3, r3, #15
 800a720:	8253      	strh	r3, [r2, #18]
 800a722:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a724:	7aea      	ldrb	r2, [r5, #11]
 800a726:	755a      	strb	r2, [r3, #21]
 800a728:	7a2b      	ldrb	r3, [r5, #8]
 800a72a:	015b      	lsls	r3, r3, #5
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	7b6a      	ldrb	r2, [r5, #13]
 800a732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a736:	7aea      	ldrb	r2, [r5, #11]
 800a738:	0312      	lsls	r2, r2, #12
 800a73a:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800a73e:	4313      	orrs	r3, r2
 800a740:	430b      	orrs	r3, r1
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	4bc0      	ldr	r3, [pc, #768]	; (800aa48 <ull_configure+0x3ac>)
 800a746:	2200      	movs	r2, #0
 800a748:	2110      	movs	r1, #16
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7ff fafa 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a750:	2f00      	cmp	r7, #0
 800a752:	f040 80fc 	bne.w	800a94e <ull_configure+0x2b2>
 800a756:	7aeb      	ldrb	r3, [r5, #11]
 800a758:	b1f3      	cbz	r3, 800a798 <ull_configure+0xfc>
 800a75a:	7b6b      	ldrb	r3, [r5, #13]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	f240 8121 	bls.w	800a9a4 <ull_configure+0x308>
 800a762:	7b2a      	ldrb	r2, [r5, #12]
 800a764:	4bb9      	ldr	r3, [pc, #740]	; (800aa4c <ull_configure+0x3b0>)
 800a766:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a76a:	0112      	lsls	r2, r2, #4
 800a76c:	0ad3      	lsrs	r3, r2, #11
 800a76e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800a772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a776:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a77a:	bf28      	it	cs
 800a77c:	3301      	addcs	r3, #1
 800a77e:	b29b      	uxth	r3, r3
 800a780:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800a784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a78e:	2202      	movs	r2, #2
 800a790:	49af      	ldr	r1, [pc, #700]	; (800aa50 <ull_configure+0x3b4>)
 800a792:	4620      	mov	r0, r4
 800a794:	f7ff fe64 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a798:	2394      	movs	r3, #148	; 0x94
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	4bad      	ldr	r3, [pc, #692]	; (800aa54 <ull_configure+0x3b8>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	49ad      	ldr	r1, [pc, #692]	; (800aa58 <ull_configure+0x3bc>)
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f7ff face 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a7a8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800a7ac:	f340 810d 	ble.w	800a9ca <ull_configure+0x32e>
 800a7b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a7b2:	8a13      	ldrh	r3, [r2, #16]
 800a7b4:	f043 0320 	orr.w	r3, r3, #32
 800a7b8:	8213      	strh	r3, [r2, #16]
 800a7ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	49a5      	ldr	r1, [pc, #660]	; (800aa5c <ull_configure+0x3c0>)
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f7ff fe49 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a7ce:	7b6b      	ldrb	r3, [r5, #13]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	f000 8105 	beq.w	800a9e0 <ull_configure+0x344>
 800a7d6:	78ab      	ldrb	r3, [r5, #2]
 800a7d8:	f043 0310 	orr.w	r3, r3, #16
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	23fc      	movs	r3, #252	; 0xfc
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7ff fc1e 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a7ec:	1e73      	subs	r3, r6, #1
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f7fe ffe0 	bl	80097bc <dwt_write8bitoffsetreg>
 800a7fc:	786b      	ldrb	r3, [r5, #1]
 800a7fe:	2b07      	cmp	r3, #7
 800a800:	bf0c      	ite	eq
 800a802:	2308      	moveq	r3, #8
 800a804:	2300      	movne	r3, #0
 800a806:	2201      	movs	r2, #1
 800a808:	2124      	movs	r1, #36	; 0x24
 800a80a:	4620      	mov	r0, r4
 800a80c:	f7fe ffd6 	bl	80097bc <dwt_write8bitoffsetreg>
 800a810:	7aeb      	ldrb	r3, [r5, #11]
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	2b03      	cmp	r3, #3
 800a818:	bf0c      	ite	eq
 800a81a:	4b91      	ldreq	r3, [pc, #580]	; (800aa60 <ull_configure+0x3c4>)
 800a81c:	4b91      	ldrne	r3, [pc, #580]	; (800aa64 <ull_configure+0x3c8>)
 800a81e:	2200      	movs	r2, #0
 800a820:	4991      	ldr	r1, [pc, #580]	; (800aa68 <ull_configure+0x3cc>)
 800a822:	4620      	mov	r0, r4
 800a824:	f7fe fe3c 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a828:	2200      	movs	r2, #0
 800a82a:	4990      	ldr	r1, [pc, #576]	; (800aa6c <ull_configure+0x3d0>)
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7fe f9c2 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800a832:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800a836:	f020 001f 	bic.w	r0, r0, #31
 800a83a:	f1b9 0f09 	cmp.w	r9, #9
 800a83e:	bf08      	it	eq
 800a840:	f040 0001 	orreq.w	r0, r0, #1
 800a844:	792a      	ldrb	r2, [r5, #4]
 800a846:	0212      	lsls	r2, r2, #8
 800a848:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800a84c:	78eb      	ldrb	r3, [r5, #3]
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	b2db      	uxtb	r3, r3
 800a852:	431a      	orrs	r2, r3
 800a854:	796b      	ldrb	r3, [r5, #5]
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	f003 0306 	and.w	r3, r3, #6
 800a85c:	4313      	orrs	r3, r2
 800a85e:	4303      	orrs	r3, r0
 800a860:	2200      	movs	r2, #0
 800a862:	4982      	ldr	r1, [pc, #520]	; (800aa6c <ull_configure+0x3d0>)
 800a864:	4620      	mov	r0, r4
 800a866:	f7fe fe1b 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a86a:	79aa      	ldrb	r2, [r5, #6]
 800a86c:	786b      	ldrb	r3, [r5, #1]
 800a86e:	031b      	lsls	r3, r3, #12
 800a870:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800a87a:	2200      	movs	r2, #0
 800a87c:	2120      	movs	r1, #32
 800a87e:	4620      	mov	r0, r4
 800a880:	f7ff fa60 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a884:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800a888:	b923      	cbnz	r3, 800a894 <ull_configure+0x1f8>
 800a88a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800a88e:	726b      	strb	r3, [r5, #9]
 800a890:	2300      	movs	r3, #0
 800a892:	72ab      	strb	r3, [r5, #10]
 800a894:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800a898:	2202      	movs	r2, #2
 800a89a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7fe fda1 	bl	80093e6 <dwt_write16bitoffsetreg>
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	4972      	ldr	r1, [pc, #456]	; (800aa70 <ull_configure+0x3d4>)
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f7fe f9ac 	bl	8008c06 <dwt_read8bitoffsetreg>
 800a8ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a8b0:	7bdb      	ldrb	r3, [r3, #15]
 800a8b2:	454b      	cmp	r3, r9
 800a8b4:	f000 809e 	beq.w	800a9f4 <ull_configure+0x358>
 800a8b8:	2803      	cmp	r0, #3
 800a8ba:	f000 809f 	beq.w	800a9fc <ull_configure+0x360>
 800a8be:	f1b9 0f09 	cmp.w	r9, #9
 800a8c2:	f000 80a0 	beq.w	800aa06 <ull_configure+0x36a>
 800a8c6:	4b6b      	ldr	r3, [pc, #428]	; (800aa74 <ull_configure+0x3d8>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	496b      	ldr	r1, [pc, #428]	; (800aa78 <ull_configure+0x3dc>)
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f7fe fde7 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a8d2:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f7fe fd82 	bl	80093e6 <dwt_write16bitoffsetreg>
 800a8e2:	2314      	movs	r3, #20
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	4965      	ldr	r1, [pc, #404]	; (800aa7c <ull_configure+0x3e0>)
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f7fe ff67 	bl	80097bc <dwt_write8bitoffsetreg>
 800a8ee:	230e      	movs	r3, #14
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	4963      	ldr	r1, [pc, #396]	; (800aa80 <ull_configure+0x3e4>)
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7fe ff61 	bl	80097bc <dwt_write8bitoffsetreg>
 800a8fa:	2381      	movs	r3, #129	; 0x81
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	4961      	ldr	r1, [pc, #388]	; (800aa84 <ull_configure+0x3e8>)
 800a900:	4620      	mov	r0, r4
 800a902:	f7fe ff5b 	bl	80097bc <dwt_write8bitoffsetreg>
 800a906:	2302      	movs	r3, #2
 800a908:	2200      	movs	r2, #0
 800a90a:	2144      	movs	r1, #68	; 0x44
 800a90c:	4620      	mov	r0, r4
 800a90e:	f7fe ff55 	bl	80097bc <dwt_write8bitoffsetreg>
 800a912:	2101      	movs	r1, #1
 800a914:	4620      	mov	r0, r4
 800a916:	f7ff fc45 	bl	800a1a4 <ull_setdwstate>
 800a91a:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800a91e:	f04f 0814 	mov.w	r8, #20
 800a922:	2700      	movs	r7, #0
 800a924:	2644      	movs	r6, #68	; 0x44
 800a926:	4640      	mov	r0, r8
 800a928:	f7f5 ffa5 	bl	8000876 <deca_usleep>
 800a92c:	463a      	mov	r2, r7
 800a92e:	4631      	mov	r1, r6
 800a930:	4620      	mov	r0, r4
 800a932:	f7fe f968 	bl	8008c06 <dwt_read8bitoffsetreg>
 800a936:	f010 0f02 	tst.w	r0, #2
 800a93a:	f040 80b5 	bne.w	800aaa8 <ull_configure+0x40c>
 800a93e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a942:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800a946:	d1ee      	bne.n	800a926 <ull_configure+0x28a>
 800a948:	f06f 0001 	mvn.w	r0, #1
 800a94c:	e0de      	b.n	800ab0c <ull_configure+0x470>
 800a94e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a950:	8a13      	ldrh	r3, [r2, #16]
 800a952:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a956:	8213      	strh	r3, [r2, #16]
 800a958:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800a962:	2200      	movs	r2, #0
 800a964:	493d      	ldr	r1, [pc, #244]	; (800aa5c <ull_configure+0x3c0>)
 800a966:	4620      	mov	r0, r4
 800a968:	f7ff f9ec 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a96c:	f240 3306 	movw	r3, #774	; 0x306
 800a970:	2200      	movs	r2, #0
 800a972:	4945      	ldr	r1, [pc, #276]	; (800aa88 <ull_configure+0x3ec>)
 800a974:	4620      	mov	r0, r4
 800a976:	f7fe fd93 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a97a:	2300      	movs	r3, #0
 800a97c:	461a      	mov	r2, r3
 800a97e:	4943      	ldr	r1, [pc, #268]	; (800aa8c <ull_configure+0x3f0>)
 800a980:	4620      	mov	r0, r4
 800a982:	f7fe fd8d 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a986:	4b42      	ldr	r3, [pc, #264]	; (800aa90 <ull_configure+0x3f4>)
 800a988:	2200      	movs	r2, #0
 800a98a:	4931      	ldr	r1, [pc, #196]	; (800aa50 <ull_configure+0x3b4>)
 800a98c:	4620      	mov	r0, r4
 800a98e:	f7fe fd87 	bl	80094a0 <dwt_write32bitoffsetreg>
 800a992:	239d      	movs	r3, #157	; 0x9d
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	4b2f      	ldr	r3, [pc, #188]	; (800aa54 <ull_configure+0x3b8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	492f      	ldr	r1, [pc, #188]	; (800aa58 <ull_configure+0x3bc>)
 800a99c:	4620      	mov	r0, r4
 800a99e:	f7ff f9d1 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800a9a2:	e714      	b.n	800a7ce <ull_configure+0x132>
 800a9a4:	7b2a      	ldrb	r2, [r5, #12]
 800a9a6:	4b29      	ldr	r3, [pc, #164]	; (800aa4c <ull_configure+0x3b0>)
 800a9a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a9ac:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800a9b0:	fb02 f203 	mul.w	r2, r2, r3
 800a9b4:	0c93      	lsrs	r3, r2, #18
 800a9b6:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800a9ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a9c2:	bf28      	it	cs
 800a9c4:	3301      	addcs	r3, #1
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	e6da      	b.n	800a780 <ull_configure+0xe4>
 800a9ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4921      	ldr	r1, [pc, #132]	; (800aa5c <ull_configure+0x3c0>)
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f7ff fd41 	bl	800a460 <dwt_modify16bitoffsetreg>
 800a9de:	e6f6      	b.n	800a7ce <ull_configure+0x132>
 800a9e0:	78ab      	ldrb	r3, [r5, #2]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	23ec      	movs	r3, #236	; 0xec
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7ff fb1b 	bl	800a028 <dwt_modify8bitoffsetreg>
 800a9f2:	e6fb      	b.n	800a7ec <ull_configure+0x150>
 800a9f4:	2803      	cmp	r0, #3
 800a9f6:	f47f af62 	bne.w	800a8be <ull_configure+0x222>
 800a9fa:	e058      	b.n	800aaae <ull_configure+0x412>
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7ff fbd0 	bl	800a1a4 <ull_setdwstate>
 800aa04:	e75b      	b.n	800a8be <ull_configure+0x222>
 800aa06:	4b23      	ldr	r3, [pc, #140]	; (800aa94 <ull_configure+0x3f8>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	491b      	ldr	r1, [pc, #108]	; (800aa78 <ull_configure+0x3dc>)
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7fe fd47 	bl	80094a0 <dwt_write32bitoffsetreg>
 800aa12:	f640 733c 	movw	r3, #3900	; 0xf3c
 800aa16:	2200      	movs	r2, #0
 800aa18:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7fe fce2 	bl	80093e6 <dwt_write16bitoffsetreg>
 800aa22:	e75e      	b.n	800a8e2 <ull_configure+0x246>
 800aa24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa2e:	2200      	movs	r2, #0
 800aa30:	490a      	ldr	r1, [pc, #40]	; (800aa5c <ull_configure+0x3c0>)
 800aa32:	4620      	mov	r0, r4
 800aa34:	f7ff fd14 	bl	800a460 <dwt_modify16bitoffsetreg>
 800aa38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aa3a:	8a13      	ldrh	r3, [r2, #16]
 800aa3c:	f043 0308 	orr.w	r3, r3, #8
 800aa40:	8213      	strh	r3, [r2, #16]
 800aa42:	e046      	b.n	800aad2 <ull_configure+0x436>
 800aa44:	00026668 	.word	0x00026668
 800aa48:	fffc4fcf 	.word	0xfffc4fcf
 800aa4c:	0801213c 	.word	0x0801213c
 800aa50:	000e0014 	.word	0x000e0014
 800aa54:	bfffff00 	.word	0xbfffff00
 800aa58:	000e0018 	.word	0x000e0018
 800aa5c:	000b0008 	.word	0x000b0008
 800aa60:	af5f35cc 	.word	0xaf5f35cc
 800aa64:	af5f584c 	.word	0xaf5f584c
 800aa68:	0006000c 	.word	0x0006000c
 800aa6c:	00010008 	.word	0x00010008
 800aa70:	000f0030 	.word	0x000f0030
 800aa74:	1c071134 	.word	0x1c071134
 800aa78:	0007001c 	.word	0x0007001c
 800aa7c:	00070050 	.word	0x00070050
 800aa80:	00070018 	.word	0x00070018
 800aa84:	00090008 	.word	0x00090008
 800aa88:	000e000c 	.word	0x000e000c
 800aa8c:	000e0010 	.word	0x000e0010
 800aa90:	000c5a0a 	.word	0x000c5a0a
 800aa94:	1c010034 	.word	0x1c010034
 800aa98:	2200      	movs	r2, #0
 800aa9a:	9200      	str	r2, [sp, #0]
 800aa9c:	23fe      	movs	r3, #254	; 0xfe
 800aa9e:	491d      	ldr	r1, [pc, #116]	; (800ab14 <ull_configure+0x478>)
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f7ff fac1 	bl	800a028 <dwt_modify8bitoffsetreg>
 800aaa6:	e01e      	b.n	800aae6 <ull_configure+0x44a>
 800aaa8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aaaa:	f883 900f 	strb.w	r9, [r3, #15]
 800aaae:	792b      	ldrb	r3, [r5, #4]
 800aab0:	3b09      	subs	r3, #9
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b0f      	cmp	r3, #15
 800aab6:	d8ef      	bhi.n	800aa98 <ull_configure+0x3fc>
 800aab8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aaba:	7a1b      	ldrb	r3, [r3, #8]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d0b1      	beq.n	800aa24 <ull_configure+0x388>
 800aac0:	4649      	mov	r1, r9
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7fe fda4 	bl	8009610 <ull_configmrxlut>
 800aac8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aaca:	8a13      	ldrh	r3, [r2, #16]
 800aacc:	f023 0308 	bic.w	r3, r3, #8
 800aad0:	8213      	strh	r3, [r2, #16]
 800aad2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800aadc:	2200      	movs	r2, #0
 800aade:	490d      	ldr	r1, [pc, #52]	; (800ab14 <ull_configure+0x478>)
 800aae0:	4620      	mov	r0, r4
 800aae2:	f7ff fcbd 	bl	800a460 <dwt_modify16bitoffsetreg>
 800aae6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800aaea:	bfcc      	ite	gt
 800aaec:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800aaf0:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800aafa:	2200      	movs	r2, #0
 800aafc:	4906      	ldr	r1, [pc, #24]	; (800ab18 <ull_configure+0x47c>)
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7ff f920 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800ab04:	2101      	movs	r1, #1
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff fd12 	bl	800a530 <ull_pgf_cal>
 800ab0c:	b003      	add	sp, #12
 800ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab12:	bf00      	nop
 800ab14:	00030018 	.word	0x00030018
 800ab18:	00060010 	.word	0x00060010

0800ab1c <ull_initialise>:
 800ab1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	4605      	mov	r5, r0
 800ab22:	460e      	mov	r6, r1
 800ab24:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d051      	beq.n	800abce <ull_initialise+0xb2>
 800ab2a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	73a3      	strb	r3, [r4, #14]
 800ab30:	2202      	movs	r2, #2
 800ab32:	8222      	strh	r2, [r4, #16]
 800ab34:	7523      	strb	r3, [r4, #20]
 800ab36:	7563      	strb	r3, [r4, #21]
 800ab38:	73e3      	strb	r3, [r4, #15]
 800ab3a:	7263      	strb	r3, [r4, #9]
 800ab3c:	72a3      	strb	r3, [r4, #10]
 800ab3e:	2104      	movs	r1, #4
 800ab40:	4628      	mov	r0, r5
 800ab42:	f7fe fc8b 	bl	800945c <_dwt_otpread>
 800ab46:	4607      	mov	r7, r0
 800ab48:	2105      	movs	r1, #5
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f7fe fc86 	bl	800945c <_dwt_otpread>
 800ab50:	b10f      	cbz	r7, 800ab56 <ull_initialise+0x3a>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d140      	bne.n	800abd8 <ull_initialise+0xbc>
 800ab56:	2120      	movs	r1, #32
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f7fe fc7f 	bl	800945c <_dwt_otpread>
 800ab5e:	4b35      	ldr	r3, [pc, #212]	; (800ac34 <ull_initialise+0x118>)
 800ab60:	4298      	cmp	r0, r3
 800ab62:	bf0c      	ite	eq
 800ab64:	2301      	moveq	r3, #1
 800ab66:	2300      	movne	r3, #0
 800ab68:	7223      	strb	r3, [r4, #8]
 800ab6a:	f016 0f10 	tst.w	r6, #16
 800ab6e:	d142      	bne.n	800abf6 <ull_initialise+0xda>
 800ab70:	f016 0f20 	tst.w	r6, #32
 800ab74:	d145      	bne.n	800ac02 <ull_initialise+0xe6>
 800ab76:	f016 0f40 	tst.w	r6, #64	; 0x40
 800ab7a:	d148      	bne.n	800ac0e <ull_initialise+0xf2>
 800ab7c:	f016 0f80 	tst.w	r6, #128	; 0x80
 800ab80:	d14c      	bne.n	800ac1c <ull_initialise+0x100>
 800ab82:	7aa3      	ldrb	r3, [r4, #10]
 800ab84:	b90b      	cbnz	r3, 800ab8a <ull_initialise+0x6e>
 800ab86:	2385      	movs	r3, #133	; 0x85
 800ab88:	72a3      	strb	r3, [r4, #10]
 800ab8a:	7a63      	ldrb	r3, [r4, #9]
 800ab8c:	b90b      	cbnz	r3, 800ab92 <ull_initialise+0x76>
 800ab8e:	2374      	movs	r3, #116	; 0x74
 800ab90:	7263      	strb	r3, [r4, #9]
 800ab92:	211f      	movs	r1, #31
 800ab94:	4628      	mov	r0, r5
 800ab96:	f7fe fc61 	bl	800945c <_dwt_otpread>
 800ab9a:	7320      	strb	r0, [r4, #12]
 800ab9c:	211e      	movs	r1, #30
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f7fe fc5c 	bl	800945c <_dwt_otpread>
 800aba4:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800aba8:	bf12      	itee	ne
 800abaa:	7360      	strbne	r0, [r4, #13]
 800abac:	232e      	moveq	r3, #46	; 0x2e
 800abae:	7363      	strbeq	r3, [r4, #13]
 800abb0:	7b63      	ldrb	r3, [r4, #13]
 800abb2:	2200      	movs	r2, #0
 800abb4:	4920      	ldr	r1, [pc, #128]	; (800ac38 <ull_initialise+0x11c>)
 800abb6:	4628      	mov	r0, r5
 800abb8:	f7fe fe00 	bl	80097bc <dwt_write8bitoffsetreg>
 800abbc:	2135      	movs	r1, #53	; 0x35
 800abbe:	4628      	mov	r0, r5
 800abc0:	f7fe fc4c 	bl	800945c <_dwt_otpread>
 800abc4:	4603      	mov	r3, r0
 800abc6:	bb78      	cbnz	r0, 800ac28 <ull_initialise+0x10c>
 800abc8:	2000      	movs	r0, #0
 800abca:	b003      	add	sp, #12
 800abcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abce:	2028      	movs	r0, #40	; 0x28
 800abd0:	f006 ffe0 	bl	8011b94 <malloc>
 800abd4:	6528      	str	r0, [r5, #80]	; 0x50
 800abd6:	e7a8      	b.n	800ab2a <ull_initialise+0xe>
 800abd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abe2:	2200      	movs	r2, #0
 800abe4:	4915      	ldr	r1, [pc, #84]	; (800ac3c <ull_initialise+0x120>)
 800abe6:	4628      	mov	r0, r5
 800abe8:	f7ff fc3a 	bl	800a460 <dwt_modify16bitoffsetreg>
 800abec:	8a23      	ldrh	r3, [r4, #16]
 800abee:	f043 0310 	orr.w	r3, r3, #16
 800abf2:	8223      	strh	r3, [r4, #16]
 800abf4:	e7af      	b.n	800ab56 <ull_initialise+0x3a>
 800abf6:	2106      	movs	r1, #6
 800abf8:	4628      	mov	r0, r5
 800abfa:	f7fe fc2f 	bl	800945c <_dwt_otpread>
 800abfe:	6020      	str	r0, [r4, #0]
 800ac00:	e7b6      	b.n	800ab70 <ull_initialise+0x54>
 800ac02:	2107      	movs	r1, #7
 800ac04:	4628      	mov	r0, r5
 800ac06:	f7fe fc29 	bl	800945c <_dwt_otpread>
 800ac0a:	6060      	str	r0, [r4, #4]
 800ac0c:	e7b3      	b.n	800ab76 <ull_initialise+0x5a>
 800ac0e:	2108      	movs	r1, #8
 800ac10:	4628      	mov	r0, r5
 800ac12:	f7fe fc23 	bl	800945c <_dwt_otpread>
 800ac16:	0c00      	lsrs	r0, r0, #16
 800ac18:	7260      	strb	r0, [r4, #9]
 800ac1a:	e7af      	b.n	800ab7c <ull_initialise+0x60>
 800ac1c:	2109      	movs	r1, #9
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f7fe fc1c 	bl	800945c <_dwt_otpread>
 800ac24:	72a0      	strb	r0, [r4, #10]
 800ac26:	e7ac      	b.n	800ab82 <ull_initialise+0x66>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4905      	ldr	r1, [pc, #20]	; (800ac40 <ull_initialise+0x124>)
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f7fe fc37 	bl	80094a0 <dwt_write32bitoffsetreg>
 800ac32:	e7c9      	b.n	800abc8 <ull_initialise+0xac>
 800ac34:	10000240 	.word	0x10000240
 800ac38:	00090014 	.word	0x00090014
 800ac3c:	000b0008 	.word	0x000b0008
 800ac40:	00090004 	.word	0x00090004

0800ac44 <ull_rxenable>:
 800ac44:	b530      	push	{r4, r5, lr}
 800ac46:	b083      	sub	sp, #12
 800ac48:	4605      	mov	r5, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	b171      	cbz	r1, 800ac6c <ull_rxenable+0x28>
 800ac4e:	f021 0302 	bic.w	r3, r1, #2
 800ac52:	3b01      	subs	r3, #1
 800ac54:	2b0f      	cmp	r3, #15
 800ac56:	d862      	bhi.n	800ad1e <ull_rxenable+0xda>
 800ac58:	e8df f003 	tbb	[pc, r3]
 800ac5c:	24616111 	.word	0x24616111
 800ac60:	2d616161 	.word	0x2d616161
 800ac64:	61616161 	.word	0x61616161
 800ac68:	3a616161 	.word	0x3a616161
 800ac6c:	2102      	movs	r1, #2
 800ac6e:	9101      	str	r1, [sp, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	9200      	str	r2, [sp, #0]
 800ac74:	4613      	mov	r3, r2
 800ac76:	f7fd ff16 	bl	8008aa6 <dwt_xfer3xxx>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	e010      	b.n	800aca0 <ull_rxenable+0x5c>
 800ac7e:	2302      	movs	r3, #2
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	9200      	str	r2, [sp, #0]
 800ac86:	4613      	mov	r3, r2
 800ac88:	2104      	movs	r1, #4
 800ac8a:	f7fd ff0c 	bl	8008aa6 <dwt_xfer3xxx>
 800ac8e:	2203      	movs	r2, #3
 800ac90:	2144      	movs	r1, #68	; 0x44
 800ac92:	4628      	mov	r0, r5
 800ac94:	f7fd ffb7 	bl	8008c06 <dwt_read8bitoffsetreg>
 800ac98:	f010 0f08 	tst.w	r0, #8
 800ac9c:	d125      	bne.n	800acea <ull_rxenable+0xa6>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	b003      	add	sp, #12
 800aca2:	bd30      	pop	{r4, r5, pc}
 800aca4:	2302      	movs	r3, #2
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	9200      	str	r2, [sp, #0]
 800acac:	4613      	mov	r3, r2
 800acae:	210a      	movs	r1, #10
 800acb0:	f7fd fef9 	bl	8008aa6 <dwt_xfer3xxx>
 800acb4:	e7eb      	b.n	800ac8e <ull_rxenable+0x4a>
 800acb6:	2100      	movs	r1, #0
 800acb8:	f7fe fc07 	bl	80094ca <_dwt_adjust_delaytime>
 800acbc:	2302      	movs	r3, #2
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	9200      	str	r2, [sp, #0]
 800acc4:	4613      	mov	r3, r2
 800acc6:	2108      	movs	r1, #8
 800acc8:	4628      	mov	r0, r5
 800acca:	f7fd feec 	bl	8008aa6 <dwt_xfer3xxx>
 800acce:	e7de      	b.n	800ac8e <ull_rxenable+0x4a>
 800acd0:	2101      	movs	r1, #1
 800acd2:	f7fe fbfa 	bl	80094ca <_dwt_adjust_delaytime>
 800acd6:	2302      	movs	r3, #2
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	9200      	str	r2, [sp, #0]
 800acde:	4613      	mov	r3, r2
 800ace0:	2106      	movs	r1, #6
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7fd fedf 	bl	8008aa6 <dwt_xfer3xxx>
 800ace8:	e7d1      	b.n	800ac8e <ull_rxenable+0x4a>
 800acea:	2302      	movs	r3, #2
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	2100      	movs	r1, #0
 800acf0:	9100      	str	r1, [sp, #0]
 800acf2:	460b      	mov	r3, r1
 800acf4:	460a      	mov	r2, r1
 800acf6:	4628      	mov	r0, r5
 800acf8:	f7fd fed5 	bl	8008aa6 <dwt_xfer3xxx>
 800acfc:	f014 0f02 	tst.w	r4, #2
 800ad00:	d002      	beq.n	800ad08 <ull_rxenable+0xc4>
 800ad02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad06:	e7cb      	b.n	800aca0 <ull_rxenable+0x5c>
 800ad08:	2102      	movs	r1, #2
 800ad0a:	9101      	str	r1, [sp, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	9200      	str	r2, [sp, #0]
 800ad10:	4613      	mov	r3, r2
 800ad12:	4628      	mov	r0, r5
 800ad14:	f7fd fec7 	bl	8008aa6 <dwt_xfer3xxx>
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad1c:	e7c0      	b.n	800aca0 <ull_rxenable+0x5c>
 800ad1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad22:	e7bd      	b.n	800aca0 <ull_rxenable+0x5c>

0800ad24 <ull_softreset_no_sema_fcmd>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	4606      	mov	r6, r0
 800ad2a:	2502      	movs	r5, #2
 800ad2c:	9501      	str	r5, [sp, #4]
 800ad2e:	2400      	movs	r4, #0
 800ad30:	9400      	str	r4, [sp, #0]
 800ad32:	4623      	mov	r3, r4
 800ad34:	4622      	mov	r2, r4
 800ad36:	2119      	movs	r1, #25
 800ad38:	f7fd feb5 	bl	8008aa6 <dwt_xfer3xxx>
 800ad3c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ad3e:	739c      	strb	r4, [r3, #14]
 800ad40:	821d      	strh	r5, [r3, #16]
 800ad42:	751c      	strb	r4, [r3, #20]
 800ad44:	755c      	strb	r4, [r3, #21]
 800ad46:	73dc      	strb	r4, [r3, #15]
 800ad48:	b002      	add	sp, #8
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}

0800ad4c <ull_softreset_fcmd>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	4606      	mov	r6, r0
 800ad52:	2502      	movs	r5, #2
 800ad54:	9501      	str	r5, [sp, #4]
 800ad56:	2400      	movs	r4, #0
 800ad58:	9400      	str	r4, [sp, #0]
 800ad5a:	4623      	mov	r3, r4
 800ad5c:	4622      	mov	r2, r4
 800ad5e:	2118      	movs	r1, #24
 800ad60:	f7fd fea1 	bl	8008aa6 <dwt_xfer3xxx>
 800ad64:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ad66:	739c      	strb	r4, [r3, #14]
 800ad68:	821d      	strh	r5, [r3, #16]
 800ad6a:	751c      	strb	r4, [r3, #20]
 800ad6c:	755c      	strb	r4, [r3, #21]
 800ad6e:	73dc      	strb	r4, [r3, #15]
 800ad70:	b002      	add	sp, #8
 800ad72:	bd70      	pop	{r4, r5, r6, pc}

0800ad74 <dwt_ioctl>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	b091      	sub	sp, #68	; 0x44
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	4615      	mov	r5, r2
 800ad7e:	461c      	mov	r4, r3
 800ad80:	299c      	cmp	r1, #156	; 0x9c
 800ad82:	f200 809f 	bhi.w	800aec4 <dwt_ioctl+0x150>
 800ad86:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ad8a:	0a54      	.short	0x0a54
 800ad8c:	00a30a5f 	.word	0x00a30a5f
 800ad90:	00c000a7 	.word	0x00c000a7
 800ad94:	0192014c 	.word	0x0192014c
 800ad98:	0156016f 	.word	0x0156016f
 800ad9c:	01ad01a2 	.word	0x01ad01a2
 800ada0:	01bd01b5 	.word	0x01bd01b5
 800ada4:	01cd01c5 	.word	0x01cd01c5
 800ada8:	01d901d5 	.word	0x01d901d5
 800adac:	027201e1 	.word	0x027201e1
 800adb0:	02850280 	.word	0x02850280
 800adb4:	0294028f 	.word	0x0294028f
 800adb8:	02a20299 	.word	0x02a20299
 800adbc:	02dd02a7 	.word	0x02dd02a7
 800adc0:	030502fa 	.word	0x030502fa
 800adc4:	031a0310 	.word	0x031a0310
 800adc8:	03480352 	.word	0x03480352
 800adcc:	0324033e 	.word	0x0324033e
 800add0:	03810331 	.word	0x03810331
 800add4:	022f01fc 	.word	0x022f01fc
 800add8:	0245023d 	.word	0x0245023d
 800addc:	097d0259 	.word	0x097d0259
 800ade0:	03610982 	.word	0x03610982
 800ade4:	03a3039f 	.word	0x03a3039f
 800ade8:	03b103ac 	.word	0x03b103ac
 800adec:	03e503db 	.word	0x03e503db
 800adf0:	041703ed 	.word	0x041703ed
 800adf4:	042e0423 	.word	0x042e0423
 800adf8:	04390357 	.word	0x04390357
 800adfc:	04540442 	.word	0x04540442
 800ae00:	047e046d 	.word	0x047e046d
 800ae04:	04ca04c0 	.word	0x04ca04c0
 800ae08:	04ff04f0 	.word	0x04ff04f0
 800ae0c:	0508051a 	.word	0x0508051a
 800ae10:	056a0524 	.word	0x056a0524
 800ae14:	05a20582 	.word	0x05a20582
 800ae18:	05e505d1 	.word	0x05e505d1
 800ae1c:	060a05ee 	.word	0x060a05ee
 800ae20:	074305f7 	.word	0x074305f7
 800ae24:	07d30785 	.word	0x07d30785
 800ae28:	07e407d9 	.word	0x07e407d9
 800ae2c:	081d07fd 	.word	0x081d07fd
 800ae30:	08310827 	.word	0x08310827
 800ae34:	0868085f 	.word	0x0868085f
 800ae38:	0877086e 	.word	0x0877086e
 800ae3c:	08910884 	.word	0x08910884
 800ae40:	08a4089b 	.word	0x08a4089b
 800ae44:	08b808ad 	.word	0x08b808ad
 800ae48:	08c908c3 	.word	0x08c908c3
 800ae4c:	08f708ec 	.word	0x08f708ec
 800ae50:	090d0902 	.word	0x090d0902
 800ae54:	0959094e 	.word	0x0959094e
 800ae58:	09880972 	.word	0x09880972
 800ae5c:	0a0709fd 	.word	0x0a0709fd
 800ae60:	0a670a12 	.word	0x0a670a12
 800ae64:	0a490a1c 	.word	0x0a490a1c
 800ae68:	09c60777 	.word	0x09c60777
 800ae6c:	0ad509e7 	.word	0x0ad509e7
 800ae70:	0a740aca 	.word	0x0a740aca
 800ae74:	0a8a0a7f 	.word	0x0a8a0a7f
 800ae78:	0aa00a95 	.word	0x0aa00a95
 800ae7c:	0ab60aab 	.word	0x0ab60aab
 800ae80:	0cb50abf 	.word	0x0cb50abf
 800ae84:	0d2a0cef 	.word	0x0d2a0cef
 800ae88:	0df90d4d 	.word	0x0df90d4d
 800ae8c:	0afd0e0e 	.word	0x0afd0e0e
 800ae90:	0bf40bc1 	.word	0x0bf40bc1
 800ae94:	0c040bff 	.word	0x0c040bff
 800ae98:	0c140c09 	.word	0x0c140c09
 800ae9c:	0c320c27 	.word	0x0c320c27
 800aea0:	0c5c0c47 	.word	0x0c5c0c47
 800aea4:	009d0c98 	.word	0x009d0c98
 800aea8:	009d009d 	.word	0x009d009d
 800aeac:	009d009d 	.word	0x009d009d
 800aeb0:	009d009d 	.word	0x009d009d
 800aeb4:	0d64009d 	.word	0x0d64009d
 800aeb8:	0ec20d75 	.word	0x0ec20d75
 800aebc:	0db40dbf 	.word	0x0db40dbf
 800aec0:	0dca0dd3 	.word	0x0dca0dd3
 800aec4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aec8:	4628      	mov	r0, r5
 800aeca:	b011      	add	sp, #68	; 0x44
 800aecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed0:	6843      	ldr	r3, [r0, #4]
 800aed2:	4798      	blx	r3
 800aed4:	2500      	movs	r5, #0
 800aed6:	e7f7      	b.n	800aec8 <dwt_ioctl+0x154>
 800aed8:	2202      	movs	r2, #2
 800aeda:	49b4      	ldr	r1, [pc, #720]	; (800b1ac <dwt_ioctl+0x438>)
 800aedc:	f7fd fe93 	bl	8008c06 <dwt_read8bitoffsetreg>
 800aee0:	2803      	cmp	r0, #3
 800aee2:	d801      	bhi.n	800aee8 <dwt_ioctl+0x174>
 800aee4:	2500      	movs	r5, #0
 800aee6:	e7ef      	b.n	800aec8 <dwt_ioctl+0x154>
 800aee8:	f7f5 fc9c 	bl	8000824 <decamutexon>
 800aeec:	4604      	mov	r4, r0
 800aeee:	2302      	movs	r3, #2
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	2500      	movs	r5, #0
 800aef4:	9500      	str	r5, [sp, #0]
 800aef6:	462b      	mov	r3, r5
 800aef8:	462a      	mov	r2, r5
 800aefa:	4629      	mov	r1, r5
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7fd fdd2 	bl	8008aa6 <dwt_xfer3xxx>
 800af02:	4620      	mov	r0, r4
 800af04:	f7f5 fc9f 	bl	8000846 <decamutexoff>
 800af08:	e7de      	b.n	800aec8 <dwt_ioctl+0x154>
 800af0a:	2c00      	cmp	r4, #0
 800af0c:	f001 8602 	beq.w	800cb14 <dwt_ioctl+0x1da0>
 800af10:	7824      	ldrb	r4, [r4, #0]
 800af12:	f014 0f1d 	tst.w	r4, #29
 800af16:	d061      	beq.n	800afdc <dwt_ioctl+0x268>
 800af18:	f014 0f01 	tst.w	r4, #1
 800af1c:	d023      	beq.n	800af66 <dwt_ioctl+0x1f2>
 800af1e:	f014 0f02 	tst.w	r4, #2
 800af22:	f04f 0302 	mov.w	r3, #2
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	f04f 0200 	mov.w	r2, #0
 800af2c:	9200      	str	r2, [sp, #0]
 800af2e:	4613      	mov	r3, r2
 800af30:	bf14      	ite	ne
 800af32:	210d      	movne	r1, #13
 800af34:	2103      	moveq	r1, #3
 800af36:	f7fd fdb6 	bl	8008aa6 <dwt_xfer3xxx>
 800af3a:	2203      	movs	r2, #3
 800af3c:	2144      	movs	r1, #68	; 0x44
 800af3e:	4630      	mov	r0, r6
 800af40:	f7fd fe61 	bl	8008c06 <dwt_read8bitoffsetreg>
 800af44:	f010 0f08 	tst.w	r0, #8
 800af48:	bf08      	it	eq
 800af4a:	2500      	moveq	r5, #0
 800af4c:	d0bc      	beq.n	800aec8 <dwt_ioctl+0x154>
 800af4e:	2302      	movs	r3, #2
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	2100      	movs	r1, #0
 800af54:	9100      	str	r1, [sp, #0]
 800af56:	460b      	mov	r3, r1
 800af58:	460a      	mov	r2, r1
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7fd fda3 	bl	8008aa6 <dwt_xfer3xxx>
 800af60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800af64:	e7b0      	b.n	800aec8 <dwt_ioctl+0x154>
 800af66:	f014 0f08 	tst.w	r4, #8
 800af6a:	d111      	bne.n	800af90 <dwt_ioctl+0x21c>
 800af6c:	f014 0f10 	tst.w	r4, #16
 800af70:	d121      	bne.n	800afb6 <dwt_ioctl+0x242>
 800af72:	f014 0f02 	tst.w	r4, #2
 800af76:	f04f 0302 	mov.w	r3, #2
 800af7a:	9301      	str	r3, [sp, #4]
 800af7c:	f04f 0200 	mov.w	r2, #0
 800af80:	9200      	str	r2, [sp, #0]
 800af82:	4613      	mov	r3, r2
 800af84:	bf14      	ite	ne
 800af86:	2110      	movne	r1, #16
 800af88:	2109      	moveq	r1, #9
 800af8a:	f7fd fd8c 	bl	8008aa6 <dwt_xfer3xxx>
 800af8e:	e7d4      	b.n	800af3a <dwt_ioctl+0x1c6>
 800af90:	2100      	movs	r1, #0
 800af92:	f7fe fa9a 	bl	80094ca <_dwt_adjust_delaytime>
 800af96:	f014 0f02 	tst.w	r4, #2
 800af9a:	f04f 0302 	mov.w	r3, #2
 800af9e:	9301      	str	r3, [sp, #4]
 800afa0:	f04f 0200 	mov.w	r2, #0
 800afa4:	9200      	str	r2, [sp, #0]
 800afa6:	4613      	mov	r3, r2
 800afa8:	bf14      	ite	ne
 800afaa:	210f      	movne	r1, #15
 800afac:	2107      	moveq	r1, #7
 800afae:	4630      	mov	r0, r6
 800afb0:	f7fd fd79 	bl	8008aa6 <dwt_xfer3xxx>
 800afb4:	e7c1      	b.n	800af3a <dwt_ioctl+0x1c6>
 800afb6:	2101      	movs	r1, #1
 800afb8:	f7fe fa87 	bl	80094ca <_dwt_adjust_delaytime>
 800afbc:	f014 0f02 	tst.w	r4, #2
 800afc0:	f04f 0302 	mov.w	r3, #2
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	f04f 0200 	mov.w	r2, #0
 800afca:	9200      	str	r2, [sp, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	bf14      	ite	ne
 800afd0:	210e      	movne	r1, #14
 800afd2:	2105      	moveq	r1, #5
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7fd fd66 	bl	8008aa6 <dwt_xfer3xxx>
 800afda:	e7ae      	b.n	800af3a <dwt_ioctl+0x1c6>
 800afdc:	f014 0f20 	tst.w	r4, #32
 800afe0:	d00f      	beq.n	800b002 <dwt_ioctl+0x28e>
 800afe2:	f014 0f02 	tst.w	r4, #2
 800afe6:	f04f 0302 	mov.w	r3, #2
 800afea:	9301      	str	r3, [sp, #4]
 800afec:	f04f 0500 	mov.w	r5, #0
 800aff0:	9500      	str	r5, [sp, #0]
 800aff2:	462b      	mov	r3, r5
 800aff4:	462a      	mov	r2, r5
 800aff6:	bf14      	ite	ne
 800aff8:	2111      	movne	r1, #17
 800affa:	210b      	moveq	r1, #11
 800affc:	f7fd fd53 	bl	8008aa6 <dwt_xfer3xxx>
 800b000:	e762      	b.n	800aec8 <dwt_ioctl+0x154>
 800b002:	f014 0f02 	tst.w	r4, #2
 800b006:	f04f 0302 	mov.w	r3, #2
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	f04f 0500 	mov.w	r5, #0
 800b010:	9500      	str	r5, [sp, #0]
 800b012:	462b      	mov	r3, r5
 800b014:	462a      	mov	r2, r5
 800b016:	bf14      	ite	ne
 800b018:	210c      	movne	r1, #12
 800b01a:	2101      	moveq	r1, #1
 800b01c:	f7fd fd43 	bl	8008aa6 <dwt_xfer3xxx>
 800b020:	e752      	b.n	800aec8 <dwt_ioctl+0x154>
 800b022:	2c00      	cmp	r4, #0
 800b024:	f001 8579 	beq.w	800cb1a <dwt_ioctl+0x1da6>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	2200      	movs	r2, #0
 800b02c:	2128      	movs	r1, #40	; 0x28
 800b02e:	f7fe fa37 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b032:	2500      	movs	r5, #0
 800b034:	e748      	b.n	800aec8 <dwt_ioctl+0x154>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	2200      	movs	r2, #0
 800b03a:	495d      	ldr	r1, [pc, #372]	; (800b1b0 <dwt_ioctl+0x43c>)
 800b03c:	f7fe fa30 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b040:	6863      	ldr	r3, [r4, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	495b      	ldr	r1, [pc, #364]	; (800b1b4 <dwt_ioctl+0x440>)
 800b046:	4630      	mov	r0, r6
 800b048:	f7fe fa2a 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	2200      	movs	r2, #0
 800b050:	4959      	ldr	r1, [pc, #356]	; (800b1b8 <dwt_ioctl+0x444>)
 800b052:	4630      	mov	r0, r6
 800b054:	f7fe fa24 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b058:	68e3      	ldr	r3, [r4, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	4957      	ldr	r1, [pc, #348]	; (800b1bc <dwt_ioctl+0x448>)
 800b05e:	4630      	mov	r0, r6
 800b060:	f7fe fa1e 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b064:	2500      	movs	r5, #0
 800b066:	e72f      	b.n	800aec8 <dwt_ioctl+0x154>
 800b068:	2c00      	cmp	r4, #0
 800b06a:	f001 8559 	beq.w	800cb20 <dwt_ioctl+0x1dac>
 800b06e:	8823      	ldrh	r3, [r4, #0]
 800b070:	6865      	ldr	r5, [r4, #4]
 800b072:	2d03      	cmp	r5, #3
 800b074:	f201 8557 	bhi.w	800cb26 <dwt_ioctl+0x1db2>
 800b078:	e8df f005 	tbb	[pc, r5]
 800b07c:	130d0702 	.word	0x130d0702
 800b080:	2200      	movs	r2, #0
 800b082:	494f      	ldr	r1, [pc, #316]	; (800b1c0 <dwt_ioctl+0x44c>)
 800b084:	f7fe f9af 	bl	80093e6 <dwt_write16bitoffsetreg>
 800b088:	e71e      	b.n	800aec8 <dwt_ioctl+0x154>
 800b08a:	2202      	movs	r2, #2
 800b08c:	494c      	ldr	r1, [pc, #304]	; (800b1c0 <dwt_ioctl+0x44c>)
 800b08e:	f7fe f9aa 	bl	80093e6 <dwt_write16bitoffsetreg>
 800b092:	2500      	movs	r5, #0
 800b094:	e718      	b.n	800aec8 <dwt_ioctl+0x154>
 800b096:	2200      	movs	r2, #0
 800b098:	494a      	ldr	r1, [pc, #296]	; (800b1c4 <dwt_ioctl+0x450>)
 800b09a:	f7fe f9a4 	bl	80093e6 <dwt_write16bitoffsetreg>
 800b09e:	2500      	movs	r5, #0
 800b0a0:	e712      	b.n	800aec8 <dwt_ioctl+0x154>
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	4947      	ldr	r1, [pc, #284]	; (800b1c4 <dwt_ioctl+0x450>)
 800b0a6:	f7fe f99e 	bl	80093e6 <dwt_write16bitoffsetreg>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	e70c      	b.n	800aec8 <dwt_ioctl+0x154>
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	f001 853c 	beq.w	800cb2c <dwt_ioctl+0x1db8>
 800b0b4:	7823      	ldrb	r3, [r4, #0]
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	f003 0306 	and.w	r3, r3, #6
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	f06f 0306 	mvn.w	r3, #6
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4940      	ldr	r1, [pc, #256]	; (800b1c8 <dwt_ioctl+0x454>)
 800b0c6:	f7fe fe3d 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800b0ca:	2500      	movs	r5, #0
 800b0cc:	e6fc      	b.n	800aec8 <dwt_ioctl+0x154>
 800b0ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0d8:	2200      	movs	r2, #0
 800b0da:	493c      	ldr	r1, [pc, #240]	; (800b1cc <dwt_ioctl+0x458>)
 800b0dc:	f7fe fe32 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800b0e0:	2500      	movs	r5, #0
 800b0e2:	e6f1      	b.n	800aec8 <dwt_ioctl+0x154>
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	f001 8524 	beq.w	800cb32 <dwt_ioctl+0x1dbe>
 800b0ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b0ec:	7b1b      	ldrb	r3, [r3, #12]
 800b0ee:	7023      	strb	r3, [r4, #0]
 800b0f0:	2500      	movs	r5, #0
 800b0f2:	e6e9      	b.n	800aec8 <dwt_ioctl+0x154>
 800b0f4:	2c00      	cmp	r4, #0
 800b0f6:	f001 851f 	beq.w	800cb38 <dwt_ioctl+0x1dc4>
 800b0fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b0fc:	7a5b      	ldrb	r3, [r3, #9]
 800b0fe:	7023      	strb	r3, [r4, #0]
 800b100:	2500      	movs	r5, #0
 800b102:	e6e1      	b.n	800aec8 <dwt_ioctl+0x154>
 800b104:	2c00      	cmp	r4, #0
 800b106:	f001 851a 	beq.w	800cb3e <dwt_ioctl+0x1dca>
 800b10a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b10c:	7a9b      	ldrb	r3, [r3, #10]
 800b10e:	7023      	strb	r3, [r4, #0]
 800b110:	2500      	movs	r5, #0
 800b112:	e6d9      	b.n	800aec8 <dwt_ioctl+0x154>
 800b114:	2c00      	cmp	r4, #0
 800b116:	f001 8515 	beq.w	800cb44 <dwt_ioctl+0x1dd0>
 800b11a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6023      	str	r3, [r4, #0]
 800b120:	2500      	movs	r5, #0
 800b122:	e6d1      	b.n	800aec8 <dwt_ioctl+0x154>
 800b124:	2c00      	cmp	r4, #0
 800b126:	f001 8510 	beq.w	800cb4a <dwt_ioctl+0x1dd6>
 800b12a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	6023      	str	r3, [r4, #0]
 800b130:	2500      	movs	r5, #0
 800b132:	e6c9      	b.n	800aec8 <dwt_ioctl+0x154>
 800b134:	f7fe fc72 	bl	8009a1c <ull_signal_rx_buff_free>
 800b138:	2500      	movs	r5, #0
 800b13a:	e6c5      	b.n	800aec8 <dwt_ioctl+0x154>
 800b13c:	2c00      	cmp	r4, #0
 800b13e:	f001 8507 	beq.w	800cb50 <dwt_ioctl+0x1ddc>
 800b142:	6821      	ldr	r1, [r4, #0]
 800b144:	f7fe f9e7 	bl	8009516 <ull_setrxaftertxdelay>
 800b148:	2500      	movs	r5, #0
 800b14a:	e6bd      	b.n	800aec8 <dwt_ioctl+0x154>
 800b14c:	2c00      	cmp	r4, #0
 800b14e:	f001 8502 	beq.w	800cb56 <dwt_ioctl+0x1de2>
 800b152:	7825      	ldrb	r5, [r4, #0]
 800b154:	b15d      	cbz	r5, 800b16e <dwt_ioctl+0x3fa>
 800b156:	6864      	ldr	r4, [r4, #4]
 800b158:	2340      	movs	r3, #64	; 0x40
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	23ff      	movs	r3, #255	; 0xff
 800b15e:	2200      	movs	r2, #0
 800b160:	2110      	movs	r1, #16
 800b162:	f7fe ff61 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b166:	2d02      	cmp	r5, #2
 800b168:	d107      	bne.n	800b17a <dwt_ioctl+0x406>
 800b16a:	60f4      	str	r4, [r6, #12]
 800b16c:	e005      	b.n	800b17a <dwt_ioctl+0x406>
 800b16e:	2200      	movs	r2, #0
 800b170:	9200      	str	r2, [sp, #0]
 800b172:	23bf      	movs	r3, #191	; 0xbf
 800b174:	2110      	movs	r1, #16
 800b176:	f7fe ff57 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b17a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b17c:	751d      	strb	r5, [r3, #20]
 800b17e:	2500      	movs	r5, #0
 800b180:	e6a2      	b.n	800aec8 <dwt_ioctl+0x154>
 800b182:	2c00      	cmp	r4, #0
 800b184:	f001 84ea 	beq.w	800cb5c <dwt_ioctl+0x1de8>
 800b188:	6865      	ldr	r5, [r4, #4]
 800b18a:	7823      	ldrb	r3, [r4, #0]
 800b18c:	2203      	movs	r2, #3
 800b18e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b192:	f7fe fb13 	bl	80097bc <dwt_write8bitoffsetreg>
 800b196:	b9dd      	cbnz	r5, 800b1d0 <dwt_ioctl+0x45c>
 800b198:	2200      	movs	r2, #0
 800b19a:	9200      	str	r2, [sp, #0]
 800b19c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b1a0:	2110      	movs	r1, #16
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f7ff f95c 	bl	800a460 <dwt_modify16bitoffsetreg>
 800b1a8:	e68e      	b.n	800aec8 <dwt_ioctl+0x154>
 800b1aa:	bf00      	nop
 800b1ac:	000f0030 	.word	0x000f0030
 800b1b0:	00010054 	.word	0x00010054
 800b1b4:	00010058 	.word	0x00010058
 800b1b8:	0001005c 	.word	0x0001005c
 800b1bc:	00010060 	.word	0x00010060
 800b1c0:	0001000c 	.word	0x0001000c
 800b1c4:	00010010 	.word	0x00010010
 800b1c8:	00010008 	.word	0x00010008
 800b1cc:	00110004 	.word	0x00110004
 800b1d0:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2110      	movs	r1, #16
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7fe fdb0 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800b1e4:	2500      	movs	r5, #0
 800b1e6:	e66f      	b.n	800aec8 <dwt_ioctl+0x154>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	f7fd fce3 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800b1f0:	68b2      	ldr	r2, [r6, #8]
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	4043      	eors	r3, r0
 800b1f6:	6852      	ldr	r2, [r2, #4]
 800b1f8:	4213      	tst	r3, r2
 800b1fa:	bf14      	ite	ne
 800b1fc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b200:	2500      	moveq	r5, #0
 800b202:	e661      	b.n	800aec8 <dwt_ioctl+0x154>
 800b204:	2c00      	cmp	r4, #0
 800b206:	f001 84ac 	beq.w	800cb62 <dwt_ioctl+0x1dee>
 800b20a:	7821      	ldrb	r1, [r4, #0]
 800b20c:	f7fe ff20 	bl	800a050 <ull_configciadiag>
 800b210:	2500      	movs	r5, #0
 800b212:	e659      	b.n	800aec8 <dwt_ioctl+0x154>
 800b214:	b93a      	cbnz	r2, 800b226 <dwt_ioctl+0x4b2>
 800b216:	2200      	movs	r2, #0
 800b218:	9200      	str	r2, [sp, #0]
 800b21a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b21e:	49b8      	ldr	r1, [pc, #736]	; (800b500 <dwt_ioctl+0x78c>)
 800b220:	f7ff f91e 	bl	800a460 <dwt_modify16bitoffsetreg>
 800b224:	e650      	b.n	800aec8 <dwt_ioctl+0x154>
 800b226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b230:	2200      	movs	r2, #0
 800b232:	49b3      	ldr	r1, [pc, #716]	; (800b500 <dwt_ioctl+0x78c>)
 800b234:	f7ff f914 	bl	800a460 <dwt_modify16bitoffsetreg>
 800b238:	2500      	movs	r5, #0
 800b23a:	e645      	b.n	800aec8 <dwt_ioctl+0x154>
 800b23c:	f002 0201 	and.w	r2, r2, #1
 800b240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b244:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800b248:	2a00      	cmp	r2, #0
 800b24a:	bf08      	it	eq
 800b24c:	460b      	moveq	r3, r1
 800b24e:	02d2      	lsls	r2, r2, #11
 800b250:	f015 0f02 	tst.w	r5, #2
 800b254:	bf12      	itee	ne
 800b256:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800b25a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b25e:	b29b      	uxtheq	r3, r3
 800b260:	9200      	str	r2, [sp, #0]
 800b262:	2200      	movs	r2, #0
 800b264:	49a6      	ldr	r1, [pc, #664]	; (800b500 <dwt_ioctl+0x78c>)
 800b266:	f7ff f8fb 	bl	800a460 <dwt_modify16bitoffsetreg>
 800b26a:	2500      	movs	r5, #0
 800b26c:	e62c      	b.n	800aec8 <dwt_ioctl+0x154>
 800b26e:	b92a      	cbnz	r2, 800b27c <dwt_ioctl+0x508>
 800b270:	4ba4      	ldr	r3, [pc, #656]	; (800b504 <dwt_ioctl+0x790>)
 800b272:	2202      	movs	r2, #2
 800b274:	49a4      	ldr	r1, [pc, #656]	; (800b508 <dwt_ioctl+0x794>)
 800b276:	f7fe f913 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b27a:	e625      	b.n	800aec8 <dwt_ioctl+0x154>
 800b27c:	4ba3      	ldr	r3, [pc, #652]	; (800b50c <dwt_ioctl+0x798>)
 800b27e:	2202      	movs	r2, #2
 800b280:	49a1      	ldr	r1, [pc, #644]	; (800b508 <dwt_ioctl+0x794>)
 800b282:	f7fe f90d 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b286:	2500      	movs	r5, #0
 800b288:	e61e      	b.n	800aec8 <dwt_ioctl+0x154>
 800b28a:	4611      	mov	r1, r2
 800b28c:	f7fe f957 	bl	800953e <ull_setlnapamode>
 800b290:	2500      	movs	r5, #0
 800b292:	e619      	b.n	800aec8 <dwt_ioctl+0x154>
 800b294:	2c00      	cmp	r4, #0
 800b296:	f001 8467 	beq.w	800cb68 <dwt_ioctl+0x1df4>
 800b29a:	2200      	movs	r2, #0
 800b29c:	499c      	ldr	r1, [pc, #624]	; (800b510 <dwt_ioctl+0x79c>)
 800b29e:	f7fd fcb2 	bl	8008c06 <dwt_read8bitoffsetreg>
 800b2a2:	7020      	strb	r0, [r4, #0]
 800b2a4:	2500      	movs	r5, #0
 800b2a6:	e60f      	b.n	800aec8 <dwt_ioctl+0x154>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	f7fe f969 	bl	8009580 <ull_configurestskey>
 800b2ae:	2500      	movs	r5, #0
 800b2b0:	e60a      	b.n	800aec8 <dwt_ioctl+0x154>
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	f7fe f988 	bl	80095c8 <ull_configurestsiv>
 800b2b8:	2500      	movs	r5, #0
 800b2ba:	e605      	b.n	800aec8 <dwt_ioctl+0x154>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	23ff      	movs	r3, #255	; 0xff
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	4993      	ldr	r1, [pc, #588]	; (800b514 <dwt_ioctl+0x7a0>)
 800b2c6:	f7fe feaf 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b2ca:	2500      	movs	r5, #0
 800b2cc:	e5fc      	b.n	800aec8 <dwt_ioctl+0x154>
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	f7fe f99e 	bl	8009610 <ull_configmrxlut>
 800b2d4:	2500      	movs	r5, #0
 800b2d6:	e5f7      	b.n	800aec8 <dwt_ioctl+0x154>
 800b2d8:	2318      	movs	r3, #24
 800b2da:	2200      	movs	r2, #0
 800b2dc:	498e      	ldr	r1, [pc, #568]	; (800b518 <dwt_ioctl+0x7a4>)
 800b2de:	f7fe f8df 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b2e2:	23e8      	movs	r3, #232	; 0xe8
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	498d      	ldr	r1, [pc, #564]	; (800b51c <dwt_ioctl+0x7a8>)
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7fe f8d9 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b2ee:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b2f0:	7d9b      	ldrb	r3, [r3, #22]
 800b2f2:	085b      	lsrs	r3, r3, #1
 800b2f4:	d01a      	beq.n	800b32c <dwt_ioctl+0x5b8>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4989      	ldr	r1, [pc, #548]	; (800b520 <dwt_ioctl+0x7ac>)
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7fd fc71 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b300:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800b304:	3b09      	subs	r3, #9
 800b306:	2b0f      	cmp	r3, #15
 800b308:	f201 8431 	bhi.w	800cb6e <dwt_ioctl+0x1dfa>
 800b30c:	f000 0001 	and.w	r0, r0, #1
 800b310:	2800      	cmp	r0, #0
 800b312:	bf0c      	ite	eq
 800b314:	2105      	moveq	r1, #5
 800b316:	2109      	movne	r1, #9
 800b318:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b31a:	7a1b      	ldrb	r3, [r3, #8]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	f001 8429 	beq.w	800cb74 <dwt_ioctl+0x1e00>
 800b322:	4630      	mov	r0, r6
 800b324:	f7fe f974 	bl	8009610 <ull_configmrxlut>
 800b328:	2500      	movs	r5, #0
 800b32a:	e5cd      	b.n	800aec8 <dwt_ioctl+0x154>
 800b32c:	2301      	movs	r3, #1
 800b32e:	2200      	movs	r2, #0
 800b330:	497c      	ldr	r1, [pc, #496]	; (800b524 <dwt_ioctl+0x7b0>)
 800b332:	4630      	mov	r0, r6
 800b334:	f7fe fa42 	bl	80097bc <dwt_write8bitoffsetreg>
 800b338:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800b33a:	7d93      	ldrb	r3, [r2, #22]
 800b33c:	f043 0302 	orr.w	r3, r3, #2
 800b340:	7593      	strb	r3, [r2, #22]
 800b342:	e7d8      	b.n	800b2f6 <dwt_ioctl+0x582>
 800b344:	2c00      	cmp	r4, #0
 800b346:	f001 8418 	beq.w	800cb7a <dwt_ioctl+0x1e06>
 800b34a:	7824      	ldrb	r4, [r4, #0]
 800b34c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b34e:	755c      	strb	r4, [r3, #21]
 800b350:	0323      	lsls	r3, r4, #12
 800b352:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800b35c:	2200      	movs	r2, #0
 800b35e:	2110      	movs	r1, #16
 800b360:	f7ff f87e 	bl	800a460 <dwt_modify16bitoffsetreg>
 800b364:	f004 0403 	and.w	r4, r4, #3
 800b368:	2c03      	cmp	r4, #3
 800b36a:	bf0c      	ite	eq
 800b36c:	4b6e      	ldreq	r3, [pc, #440]	; (800b528 <dwt_ioctl+0x7b4>)
 800b36e:	4b6f      	ldrne	r3, [pc, #444]	; (800b52c <dwt_ioctl+0x7b8>)
 800b370:	2200      	movs	r2, #0
 800b372:	496f      	ldr	r1, [pc, #444]	; (800b530 <dwt_ioctl+0x7bc>)
 800b374:	4630      	mov	r0, r6
 800b376:	f7fe f893 	bl	80094a0 <dwt_write32bitoffsetreg>
 800b37a:	2500      	movs	r5, #0
 800b37c:	e5a4      	b.n	800aec8 <dwt_ioctl+0x154>
 800b37e:	2c00      	cmp	r4, #0
 800b380:	f001 83fe 	beq.w	800cb80 <dwt_ioctl+0x1e0c>
 800b384:	8823      	ldrh	r3, [r4, #0]
 800b386:	2200      	movs	r2, #0
 800b388:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b38c:	f7fe f82b 	bl	80093e6 <dwt_write16bitoffsetreg>
 800b390:	2500      	movs	r5, #0
 800b392:	e599      	b.n	800aec8 <dwt_ioctl+0x154>
 800b394:	2c00      	cmp	r4, #0
 800b396:	f001 83f6 	beq.w	800cb86 <dwt_ioctl+0x1e12>
 800b39a:	2200      	movs	r2, #0
 800b39c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b3a0:	f7fd fc1f 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b3a4:	8020      	strh	r0, [r4, #0]
 800b3a6:	2500      	movs	r5, #0
 800b3a8:	e58e      	b.n	800aec8 <dwt_ioctl+0x154>
 800b3aa:	2c00      	cmp	r4, #0
 800b3ac:	f001 83ee 	beq.w	800cb8c <dwt_ioctl+0x1e18>
 800b3b0:	8823      	ldrh	r3, [r4, #0]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	217c      	movs	r1, #124	; 0x7c
 800b3b6:	f7fe f816 	bl	80093e6 <dwt_write16bitoffsetreg>
 800b3ba:	2500      	movs	r5, #0
 800b3bc:	e584      	b.n	800aec8 <dwt_ioctl+0x154>
 800b3be:	2c00      	cmp	r4, #0
 800b3c0:	f001 83e7 	beq.w	800cb92 <dwt_ioctl+0x1e1e>
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	217c      	movs	r1, #124	; 0x7c
 800b3c8:	f7fd fc0b 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b3cc:	8020      	strh	r0, [r4, #0]
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	e57a      	b.n	800aec8 <dwt_ioctl+0x154>
 800b3d2:	2c00      	cmp	r4, #0
 800b3d4:	f001 83e0 	beq.w	800cb98 <dwt_ioctl+0x1e24>
 800b3d8:	88a3      	ldrh	r3, [r4, #4]
 800b3da:	88e2      	ldrh	r2, [r4, #6]
 800b3dc:	6821      	ldr	r1, [r4, #0]
 800b3de:	9100      	str	r1, [sp, #0]
 800b3e0:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b3e4:	f7fd fff4 	bl	80093d0 <dwt_writetodevice>
 800b3e8:	2500      	movs	r5, #0
 800b3ea:	e56d      	b.n	800aec8 <dwt_ioctl+0x154>
 800b3ec:	2c00      	cmp	r4, #0
 800b3ee:	f001 83d6 	beq.w	800cb9e <dwt_ioctl+0x1e2a>
 800b3f2:	88a3      	ldrh	r3, [r4, #4]
 800b3f4:	88e2      	ldrh	r2, [r4, #6]
 800b3f6:	6821      	ldr	r1, [r4, #0]
 800b3f8:	9100      	str	r1, [sp, #0]
 800b3fa:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b3fe:	f7fd fbd0 	bl	8008ba2 <dwt_readfromdevice>
 800b402:	2500      	movs	r5, #0
 800b404:	e560      	b.n	800aec8 <dwt_ioctl+0x154>
 800b406:	2c00      	cmp	r4, #0
 800b408:	f001 83cc 	beq.w	800cba4 <dwt_ioctl+0x1e30>
 800b40c:	88e3      	ldrh	r3, [r4, #6]
 800b40e:	88a2      	ldrh	r2, [r4, #4]
 800b410:	6821      	ldr	r1, [r4, #0]
 800b412:	f7fe f99d 	bl	8009750 <ull_readrxdata>
 800b416:	2500      	movs	r5, #0
 800b418:	e556      	b.n	800aec8 <dwt_ioctl+0x154>
 800b41a:	2c00      	cmp	r4, #0
 800b41c:	f001 83c5 	beq.w	800cbaa <dwt_ioctl+0x1e36>
 800b420:	88e3      	ldrh	r3, [r4, #6]
 800b422:	6822      	ldr	r2, [r4, #0]
 800b424:	88a1      	ldrh	r1, [r4, #4]
 800b426:	f7fe fac7 	bl	80099b8 <ull_writetxdata>
 800b42a:	2500      	movs	r5, #0
 800b42c:	e54c      	b.n	800aec8 <dwt_ioctl+0x154>
 800b42e:	4611      	mov	r1, r2
 800b430:	f7ff fc08 	bl	800ac44 <ull_rxenable>
 800b434:	2500      	movs	r5, #0
 800b436:	e547      	b.n	800aec8 <dwt_ioctl+0x154>
 800b438:	2c00      	cmp	r4, #0
 800b43a:	f001 83b9 	beq.w	800cbb0 <dwt_ioctl+0x1e3c>
 800b43e:	7923      	ldrb	r3, [r4, #4]
 800b440:	8862      	ldrh	r2, [r4, #2]
 800b442:	8821      	ldrh	r1, [r4, #0]
 800b444:	f7fe fdbe 	bl	8009fc4 <ull_writetxfctrl>
 800b448:	2500      	movs	r5, #0
 800b44a:	e53d      	b.n	800aec8 <dwt_ioctl+0x154>
 800b44c:	2c00      	cmp	r4, #0
 800b44e:	f001 83b2 	beq.w	800cbb6 <dwt_ioctl+0x1e42>
 800b452:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b454:	7b9b      	ldrb	r3, [r3, #14]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d00c      	beq.n	800b474 <dwt_ioctl+0x700>
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d110      	bne.n	800b480 <dwt_ioctl+0x70c>
 800b45e:	220c      	movs	r2, #12
 800b460:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b464:	f7fd fbbd 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b468:	b200      	sxth	r0, r0
 800b46a:	f340 030c 	sbfx	r3, r0, #0, #13
 800b46e:	8023      	strh	r3, [r4, #0]
 800b470:	2500      	movs	r5, #0
 800b472:	e529      	b.n	800aec8 <dwt_ioctl+0x154>
 800b474:	2200      	movs	r2, #0
 800b476:	492f      	ldr	r1, [pc, #188]	; (800b534 <dwt_ioctl+0x7c0>)
 800b478:	f7fd fbb3 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b47c:	b200      	sxth	r0, r0
 800b47e:	e7f4      	b.n	800b46a <dwt_ioctl+0x6f6>
 800b480:	2200      	movs	r2, #0
 800b482:	492d      	ldr	r1, [pc, #180]	; (800b538 <dwt_ioctl+0x7c4>)
 800b484:	f7fd fbad 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b488:	b200      	sxth	r0, r0
 800b48a:	e7ee      	b.n	800b46a <dwt_ioctl+0x6f6>
 800b48c:	2c00      	cmp	r4, #0
 800b48e:	f001 8395 	beq.w	800cbbc <dwt_ioctl+0x1e48>
 800b492:	ab0c      	add	r3, sp, #48	; 0x30
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	2303      	movs	r3, #3
 800b498:	2200      	movs	r2, #0
 800b49a:	4928      	ldr	r1, [pc, #160]	; (800b53c <dwt_ioctl+0x7c8>)
 800b49c:	f7fd fb81 	bl	8008ba2 <dwt_readfromdevice>
 800b4a0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800b4a4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800b4a8:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800b4ac:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b4b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b4b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b4b8:	bf1c      	itt	ne
 800b4ba:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800b4be:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800b4c2:	6023      	str	r3, [r4, #0]
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	e4ff      	b.n	800aec8 <dwt_ioctl+0x154>
 800b4c8:	f7fe f9d0 	bl	800986c <ull_clearaonconfig>
 800b4cc:	2500      	movs	r5, #0
 800b4ce:	e4fb      	b.n	800aec8 <dwt_ioctl+0x154>
 800b4d0:	2c00      	cmp	r4, #0
 800b4d2:	f001 8376 	beq.w	800cbc2 <dwt_ioctl+0x1e4e>
 800b4d6:	8861      	ldrh	r1, [r4, #2]
 800b4d8:	f7fe fdf0 	bl	800a0bc <ull_calcbandwidthadj>
 800b4dc:	7020      	strb	r0, [r4, #0]
 800b4de:	2500      	movs	r5, #0
 800b4e0:	e4f2      	b.n	800aec8 <dwt_ioctl+0x154>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	f7fd fb9d 	bl	8008c22 <ull_readdiagnostics>
 800b4e8:	2500      	movs	r5, #0
 800b4ea:	e4ed      	b.n	800aec8 <dwt_ioctl+0x154>
 800b4ec:	2c00      	cmp	r4, #0
 800b4ee:	f001 836b 	beq.w	800cbc8 <dwt_ioctl+0x1e54>
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	2170      	movs	r1, #112	; 0x70
 800b4f6:	f7fd fb5e 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800b4fa:	6020      	str	r0, [r4, #0]
 800b4fc:	2500      	movs	r5, #0
 800b4fe:	e4e3      	b.n	800aec8 <dwt_ioctl+0x154>
 800b500:	00110008 	.word	0x00110008
 800b504:	00d20874 	.word	0x00d20874
 800b508:	00110010 	.word	0x00110010
 800b50c:	04d28874 	.word	0x04d28874
 800b510:	0007001c 	.word	0x0007001c
 800b514:	00020004 	.word	0x00020004
 800b518:	001f000c 	.word	0x001f000c
 800b51c:	001f0010 	.word	0x001f0010
 800b520:	00010008 	.word	0x00010008
 800b524:	00010020 	.word	0x00010020
 800b528:	af5f35cc 	.word	0xaf5f35cc
 800b52c:	af5f584c 	.word	0xaf5f584c
 800b530:	0006000c 	.word	0x0006000c
 800b534:	0018000c 	.word	0x0018000c
 800b538:	000c0020 	.word	0x000c0020
 800b53c:	00060029 	.word	0x00060029
 800b540:	2c00      	cmp	r4, #0
 800b542:	f001 8344 	beq.w	800cbce <dwt_ioctl+0x1e5a>
 800b546:	2200      	movs	r2, #0
 800b548:	2170      	movs	r1, #112	; 0x70
 800b54a:	f7fd fb34 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800b54e:	6020      	str	r0, [r4, #0]
 800b550:	2500      	movs	r5, #0
 800b552:	e4b9      	b.n	800aec8 <dwt_ioctl+0x154>
 800b554:	9400      	str	r4, [sp, #0]
 800b556:	2305      	movs	r3, #5
 800b558:	2200      	movs	r2, #0
 800b55a:	2170      	movs	r1, #112	; 0x70
 800b55c:	f7fd fb21 	bl	8008ba2 <dwt_readfromdevice>
 800b560:	2500      	movs	r5, #0
 800b562:	e4b1      	b.n	800aec8 <dwt_ioctl+0x154>
 800b564:	2c00      	cmp	r4, #0
 800b566:	f001 8335 	beq.w	800cbd4 <dwt_ioctl+0x1e60>
 800b56a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b56c:	7b9b      	ldrb	r3, [r3, #14]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d014      	beq.n	800b59c <dwt_ioctl+0x828>
 800b572:	2b03      	cmp	r3, #3
 800b574:	d119      	bne.n	800b5aa <dwt_ioctl+0x836>
 800b576:	2216      	movs	r2, #22
 800b578:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b57c:	f7fd fb31 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b580:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b584:	b283      	uxth	r3, r0
 800b586:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b58a:	d004      	beq.n	800b596 <dwt_ioctl+0x822>
 800b58c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800b590:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800b594:	b218      	sxth	r0, r3
 800b596:	8020      	strh	r0, [r4, #0]
 800b598:	2500      	movs	r5, #0
 800b59a:	e495      	b.n	800aec8 <dwt_ioctl+0x154>
 800b59c:	2202      	movs	r2, #2
 800b59e:	49d6      	ldr	r1, [pc, #856]	; (800b8f8 <dwt_ioctl+0xb84>)
 800b5a0:	f7fd fb1f 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b5a4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b5a8:	e7ec      	b.n	800b584 <dwt_ioctl+0x810>
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	49d3      	ldr	r1, [pc, #844]	; (800b8fc <dwt_ioctl+0xb88>)
 800b5ae:	f7fd fb18 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b5b2:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b5b6:	e7e5      	b.n	800b584 <dwt_ioctl+0x810>
 800b5b8:	9400      	str	r4, [sp, #0]
 800b5ba:	2306      	movs	r3, #6
 800b5bc:	2200      	movs	r2, #0
 800b5be:	49d0      	ldr	r1, [pc, #832]	; (800b900 <dwt_ioctl+0xb8c>)
 800b5c0:	f7fd faef 	bl	8008ba2 <dwt_readfromdevice>
 800b5c4:	7963      	ldrb	r3, [r4, #5]
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	7163      	strb	r3, [r4, #5]
 800b5cc:	2500      	movs	r5, #0
 800b5ce:	e47b      	b.n	800aec8 <dwt_ioctl+0x154>
 800b5d0:	2c00      	cmp	r4, #0
 800b5d2:	f001 8302 	beq.w	800cbda <dwt_ioctl+0x1e66>
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b5dc:	f7fd fb13 	bl	8008c06 <dwt_read8bitoffsetreg>
 800b5e0:	7020      	strb	r0, [r4, #0]
 800b5e2:	2500      	movs	r5, #0
 800b5e4:	e470      	b.n	800aec8 <dwt_ioctl+0x154>
 800b5e6:	2c00      	cmp	r4, #0
 800b5e8:	f001 82fa 	beq.w	800cbe0 <dwt_ioctl+0x1e6c>
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b5f2:	f7fd fb08 	bl	8008c06 <dwt_read8bitoffsetreg>
 800b5f6:	7020      	strb	r0, [r4, #0]
 800b5f8:	2500      	movs	r5, #0
 800b5fa:	e465      	b.n	800aec8 <dwt_ioctl+0x154>
 800b5fc:	2c00      	cmp	r4, #0
 800b5fe:	f001 82f2 	beq.w	800cbe6 <dwt_ioctl+0x1e72>
 800b602:	88a2      	ldrh	r2, [r4, #4]
 800b604:	6821      	ldr	r1, [r4, #0]
 800b606:	f7fe fc07 	bl	8009e18 <_dwt_otpprogword32>
 800b60a:	2500      	movs	r5, #0
 800b60c:	e45c      	b.n	800aec8 <dwt_ioctl+0x154>
 800b60e:	2c00      	cmp	r4, #0
 800b610:	f001 82ec 	beq.w	800cbec <dwt_ioctl+0x1e78>
 800b614:	6825      	ldr	r5, [r4, #0]
 800b616:	88a4      	ldrh	r4, [r4, #4]
 800b618:	4622      	mov	r2, r4
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7fe fbfc 	bl	8009e18 <_dwt_otpprogword32>
 800b620:	4621      	mov	r1, r4
 800b622:	4630      	mov	r0, r6
 800b624:	f7fd ff1a 	bl	800945c <_dwt_otpread>
 800b628:	1a2d      	subs	r5, r5, r0
 800b62a:	bf18      	it	ne
 800b62c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b630:	e44a      	b.n	800aec8 <dwt_ioctl+0x154>
 800b632:	2a02      	cmp	r2, #2
 800b634:	d00e      	beq.n	800b654 <dwt_ioctl+0x8e0>
 800b636:	4cb3      	ldr	r4, [pc, #716]	; (800b904 <dwt_ioctl+0xb90>)
 800b638:	2300      	movs	r3, #0
 800b63a:	461a      	mov	r2, r3
 800b63c:	4621      	mov	r1, r4
 800b63e:	4630      	mov	r0, r6
 800b640:	f7fe f8bc 	bl	80097bc <dwt_write8bitoffsetreg>
 800b644:	2302      	movs	r3, #2
 800b646:	2200      	movs	r2, #0
 800b648:	4621      	mov	r1, r4
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7fe f8b6 	bl	80097bc <dwt_write8bitoffsetreg>
 800b650:	2500      	movs	r5, #0
 800b652:	e439      	b.n	800aec8 <dwt_ioctl+0x154>
 800b654:	2300      	movs	r3, #0
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	23fe      	movs	r3, #254	; 0xfe
 800b65a:	2201      	movs	r2, #1
 800b65c:	49aa      	ldr	r1, [pc, #680]	; (800b908 <dwt_ioctl+0xb94>)
 800b65e:	f7fe fce3 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b662:	e7e8      	b.n	800b636 <dwt_ioctl+0x8c2>
 800b664:	2c00      	cmp	r4, #0
 800b666:	f001 82c4 	beq.w	800cbf2 <dwt_ioctl+0x1e7e>
 800b66a:	8824      	ldrh	r4, [r4, #0]
 800b66c:	b2e2      	uxtb	r2, r4
 800b66e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b672:	f7fe f94f 	bl	8009914 <ull_aon_write>
 800b676:	0a22      	lsrs	r2, r4, #8
 800b678:	f240 1103 	movw	r1, #259	; 0x103
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7fe f949 	bl	8009914 <ull_aon_write>
 800b682:	2500      	movs	r5, #0
 800b684:	e420      	b.n	800aec8 <dwt_ioctl+0x154>
 800b686:	2c00      	cmp	r4, #0
 800b688:	f001 82b6 	beq.w	800cbf8 <dwt_ioctl+0x1e84>
 800b68c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800b914 <dwt_ioctl+0xba0>
 800b690:	2310      	movs	r3, #16
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	23ff      	movs	r3, #255	; 0xff
 800b696:	2200      	movs	r2, #0
 800b698:	4641      	mov	r1, r8
 800b69a:	f7fe fcc5 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b69e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f7fe f916 	bl	80098d4 <ull_aon_read>
 800b6a8:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7fe f92e 	bl	8009914 <ull_aon_write>
 800b6b8:	f045 0204 	orr.w	r2, r5, #4
 800b6bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7fe f927 	bl	8009914 <ull_aon_write>
 800b6c6:	2002      	movs	r0, #2
 800b6c8:	f7f5 f8ca 	bl	8000860 <deca_sleep>
 800b6cc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7fe f8ff 	bl	80098d4 <ull_aon_read>
 800b6d6:	4607      	mov	r7, r0
 800b6d8:	f240 110f 	movw	r1, #271	; 0x10f
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7fe f8f9 	bl	80098d4 <ull_aon_read>
 800b6e2:	4681      	mov	r9, r0
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7fe f912 	bl	8009914 <ull_aon_write>
 800b6f0:	2500      	movs	r5, #0
 800b6f2:	9500      	str	r5, [sp, #0]
 800b6f4:	23ef      	movs	r3, #239	; 0xef
 800b6f6:	462a      	mov	r2, r5
 800b6f8:	4641      	mov	r1, r8
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f7fe fc94 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b700:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800b704:	8027      	strh	r7, [r4, #0]
 800b706:	f7ff bbdf 	b.w	800aec8 <dwt_ioctl+0x154>
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	f001 8277 	beq.w	800cbfe <dwt_ioctl+0x1e8a>
 800b710:	78a2      	ldrb	r2, [r4, #2]
 800b712:	8821      	ldrh	r1, [r4, #0]
 800b714:	f7fe f926 	bl	8009964 <ull_configuresleep>
 800b718:	2500      	movs	r5, #0
 800b71a:	f7ff bbd5 	b.w	800aec8 <dwt_ioctl+0x154>
 800b71e:	2c00      	cmp	r4, #0
 800b720:	f001 8270 	beq.w	800cc04 <dwt_ioctl+0x1e90>
 800b724:	6824      	ldr	r4, [r4, #0]
 800b726:	f7fe f8a1 	bl	800986c <ull_clearaonconfig>
 800b72a:	2001      	movs	r0, #1
 800b72c:	f7f5 f898 	bl	8000860 <deca_sleep>
 800b730:	2303      	movs	r3, #3
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	23ff      	movs	r3, #255	; 0xff
 800b736:	2200      	movs	r2, #0
 800b738:	4974      	ldr	r1, [pc, #464]	; (800b90c <dwt_ioctl+0xb98>)
 800b73a:	4630      	mov	r0, r6
 800b73c:	f7fe fc74 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b740:	b97c      	cbnz	r4, 800b762 <dwt_ioctl+0x9ee>
 800b742:	4630      	mov	r0, r6
 800b744:	f7ff faee 	bl	800ad24 <ull_softreset_no_sema_fcmd>
 800b748:	2001      	movs	r0, #1
 800b74a:	f7f5 f889 	bl	8000860 <deca_sleep>
 800b74e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b750:	2500      	movs	r5, #0
 800b752:	739d      	strb	r5, [r3, #14]
 800b754:	2202      	movs	r2, #2
 800b756:	821a      	strh	r2, [r3, #16]
 800b758:	751d      	strb	r5, [r3, #20]
 800b75a:	755d      	strb	r5, [r3, #21]
 800b75c:	73dd      	strb	r5, [r3, #15]
 800b75e:	f7ff bbb3 	b.w	800aec8 <dwt_ioctl+0x154>
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff faf2 	bl	800ad4c <ull_softreset_fcmd>
 800b768:	e7ee      	b.n	800b748 <dwt_ioctl+0x9d4>
 800b76a:	2c00      	cmp	r4, #0
 800b76c:	f001 824d 	beq.w	800cc0a <dwt_ioctl+0x1e96>
 800b770:	7823      	ldrb	r3, [r4, #0]
 800b772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b776:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b778:	7353      	strb	r3, [r2, #13]
 800b77a:	2200      	movs	r2, #0
 800b77c:	4964      	ldr	r1, [pc, #400]	; (800b910 <dwt_ioctl+0xb9c>)
 800b77e:	f7fe f81d 	bl	80097bc <dwt_write8bitoffsetreg>
 800b782:	2500      	movs	r5, #0
 800b784:	f7ff bba0 	b.w	800aec8 <dwt_ioctl+0x154>
 800b788:	2c00      	cmp	r4, #0
 800b78a:	f001 8241 	beq.w	800cc10 <dwt_ioctl+0x1e9c>
 800b78e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b790:	7b5b      	ldrb	r3, [r3, #13]
 800b792:	7023      	strb	r3, [r4, #0]
 800b794:	2500      	movs	r5, #0
 800b796:	f7ff bb97 	b.w	800aec8 <dwt_ioctl+0x154>
 800b79a:	2101      	movs	r1, #1
 800b79c:	f7fe faf6 	bl	8009d8c <ull_enable_rf_tx>
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7fe fb27 	bl	8009df4 <ull_enable_rftx_blocks>
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f7fd fe2d 	bl	8009408 <ull_force_clocks>
 800b7ae:	220f      	movs	r2, #15
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f7fe ff48 	bl	800a648 <ull_repeated_cw>
 800b7b8:	2500      	movs	r5, #0
 800b7ba:	f7ff bb85 	b.w	800aec8 <dwt_ioctl+0x154>
 800b7be:	2c00      	cmp	r4, #0
 800b7c0:	f001 8229 	beq.w	800cc16 <dwt_ioctl+0x1ea2>
 800b7c4:	6862      	ldr	r2, [r4, #4]
 800b7c6:	6821      	ldr	r1, [r4, #0]
 800b7c8:	f7fe ff3e 	bl	800a648 <ull_repeated_cw>
 800b7cc:	2500      	movs	r5, #0
 800b7ce:	f7ff bb7b 	b.w	800aec8 <dwt_ioctl+0x154>
 800b7d2:	2c00      	cmp	r4, #0
 800b7d4:	f001 8222 	beq.w	800cc1c <dwt_ioctl+0x1ea8>
 800b7d8:	4d4e      	ldr	r5, [pc, #312]	; (800b914 <dwt_ioctl+0xba0>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f7fd fa12 	bl	8008c06 <dwt_read8bitoffsetreg>
 800b7e2:	4680      	mov	r8, r0
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	23ff      	movs	r3, #255	; 0xff
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f7fe fc1a 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b7f4:	2304      	movs	r3, #4
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4947      	ldr	r1, [pc, #284]	; (800b918 <dwt_ioctl+0xba4>)
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7fd ffde 	bl	80097bc <dwt_write8bitoffsetreg>
 800b800:	2301      	movs	r3, #1
 800b802:	2200      	movs	r2, #0
 800b804:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b808:	4630      	mov	r0, r6
 800b80a:	f7fd ffd7 	bl	80097bc <dwt_write8bitoffsetreg>
 800b80e:	4f43      	ldr	r7, [pc, #268]	; (800b91c <dwt_ioctl+0xba8>)
 800b810:	2500      	movs	r5, #0
 800b812:	462a      	mov	r2, r5
 800b814:	4639      	mov	r1, r7
 800b816:	4630      	mov	r0, r6
 800b818:	f7fd f9f5 	bl	8008c06 <dwt_read8bitoffsetreg>
 800b81c:	f010 0f01 	tst.w	r0, #1
 800b820:	d0f7      	beq.n	800b812 <dwt_ioctl+0xa9e>
 800b822:	2200      	movs	r2, #0
 800b824:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b828:	4630      	mov	r0, r6
 800b82a:	f7fd f9da 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b82e:	4605      	mov	r5, r0
 800b830:	2300      	movs	r3, #0
 800b832:	461a      	mov	r2, r3
 800b834:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b838:	4630      	mov	r0, r6
 800b83a:	f7fd ffbf 	bl	80097bc <dwt_write8bitoffsetreg>
 800b83e:	2300      	movs	r3, #0
 800b840:	461a      	mov	r2, r3
 800b842:	4935      	ldr	r1, [pc, #212]	; (800b918 <dwt_ioctl+0xba4>)
 800b844:	4630      	mov	r0, r6
 800b846:	f7fd ffb9 	bl	80097bc <dwt_write8bitoffsetreg>
 800b84a:	4643      	mov	r3, r8
 800b84c:	2200      	movs	r2, #0
 800b84e:	4931      	ldr	r1, [pc, #196]	; (800b914 <dwt_ioctl+0xba0>)
 800b850:	4630      	mov	r0, r6
 800b852:	f7fd ffb3 	bl	80097bc <dwt_write8bitoffsetreg>
 800b856:	8025      	strh	r5, [r4, #0]
 800b858:	2500      	movs	r5, #0
 800b85a:	f7ff bb35 	b.w	800aec8 <dwt_ioctl+0x154>
 800b85e:	2c00      	cmp	r4, #0
 800b860:	f001 81df 	beq.w	800cc22 <dwt_ioctl+0x1eae>
 800b864:	7923      	ldrb	r3, [r4, #4]
 800b866:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b868:	7a92      	ldrb	r2, [r2, #10]
 800b86a:	1a9b      	subs	r3, r3, r2
 800b86c:	ee07 3a90 	vmov	s15, r3
 800b870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b874:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b920 <dwt_ioctl+0xbac>
 800b878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b87c:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800b880:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b884:	edc4 7a00 	vstr	s15, [r4]
 800b888:	2500      	movs	r5, #0
 800b88a:	f7ff bb1d 	b.w	800aec8 <dwt_ioctl+0x154>
 800b88e:	2c00      	cmp	r4, #0
 800b890:	f001 81ca 	beq.w	800cc28 <dwt_ioctl+0x1eb4>
 800b894:	7923      	ldrb	r3, [r4, #4]
 800b896:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b898:	7a52      	ldrb	r2, [r2, #9]
 800b89a:	1a9b      	subs	r3, r3, r2
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b924 <dwt_ioctl+0xbb0>
 800b8a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8ac:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800b8b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8b4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800b928 <dwt_ioctl+0xbb4>
 800b8b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b8bc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800b8c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8c4:	edc4 7a00 	vstr	s15, [r4]
 800b8c8:	2500      	movs	r5, #0
 800b8ca:	f7ff bafd 	b.w	800aec8 <dwt_ioctl+0x154>
 800b8ce:	2c00      	cmp	r4, #0
 800b8d0:	f001 81ad 	beq.w	800cc2e <dwt_ioctl+0x1eba>
 800b8d4:	6824      	ldr	r4, [r4, #0]
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	f7fe fa58 	bl	8009d8c <ull_enable_rf_tx>
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f7fe fa89 	bl	8009df4 <ull_enable_rftx_blocks>
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	f7fd fd8f 	bl	8009408 <ull_force_clocks>
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	f7fe fc41 	bl	800a174 <ull_repeated_frames>
 800b8f2:	2500      	movs	r5, #0
 800b8f4:	f7ff bae8 	b.w	800aec8 <dwt_ioctl+0x154>
 800b8f8:	00180014 	.word	0x00180014
 800b8fc:	000c001c 	.word	0x000c001c
 800b900:	000c0018 	.word	0x000c0018
 800b904:	000a0004 	.word	0x000a0004
 800b908:	00110008 	.word	0x00110008
 800b90c:	00110004 	.word	0x00110004
 800b910:	00090014 	.word	0x00090014
 800b914:	00070048 	.word	0x00070048
 800b918:	00070034 	.word	0x00070034
 800b91c:	00080004 	.word	0x00080004
 800b920:	3f866666 	.word	0x3f866666
 800b924:	3ecccccd 	.word	0x3ecccccd
 800b928:	437f0000 	.word	0x437f0000
 800b92c:	2500      	movs	r5, #0
 800b92e:	9500      	str	r5, [sp, #0]
 800b930:	23ef      	movs	r3, #239	; 0xef
 800b932:	462a      	mov	r2, r5
 800b934:	49c7      	ldr	r1, [pc, #796]	; (800bc54 <dwt_ioctl+0xee0>)
 800b936:	f7fe fb77 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b93a:	2105      	movs	r1, #5
 800b93c:	4630      	mov	r0, r6
 800b93e:	f7fd fd63 	bl	8009408 <ull_force_clocks>
 800b942:	2101      	movs	r1, #1
 800b944:	4630      	mov	r0, r6
 800b946:	f7fd fee5 	bl	8009714 <ull_disable_rf_tx>
 800b94a:	4630      	mov	r0, r6
 800b94c:	f7fd fed8 	bl	8009700 <ull_disable_rftx_blocks>
 800b950:	f7ff baba 	b.w	800aec8 <dwt_ioctl+0x154>
 800b954:	2500      	movs	r5, #0
 800b956:	9500      	str	r5, [sp, #0]
 800b958:	23ef      	movs	r3, #239	; 0xef
 800b95a:	462a      	mov	r2, r5
 800b95c:	49bd      	ldr	r1, [pc, #756]	; (800bc54 <dwt_ioctl+0xee0>)
 800b95e:	f7fe fb63 	bl	800a028 <dwt_modify8bitoffsetreg>
 800b962:	f7ff bab1 	b.w	800aec8 <dwt_ioctl+0x154>
 800b966:	2c00      	cmp	r4, #0
 800b968:	f001 8164 	beq.w	800cc34 <dwt_ioctl+0x1ec0>
 800b96c:	6821      	ldr	r1, [r4, #0]
 800b96e:	f7fe fc01 	bl	800a174 <ull_repeated_frames>
 800b972:	2500      	movs	r5, #0
 800b974:	f7ff baa8 	b.w	800aec8 <dwt_ioctl+0x154>
 800b978:	2200      	movs	r2, #0
 800b97a:	49b7      	ldr	r1, [pc, #732]	; (800bc58 <dwt_ioctl+0xee4>)
 800b97c:	f7fd f931 	bl	8008be2 <dwt_read16bitoffsetreg>
 800b980:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800b984:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800b988:	bf18      	it	ne
 800b98a:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800b98e:	b22d      	sxth	r5, r5
 800b990:	8025      	strh	r5, [r4, #0]
 800b992:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b994:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b998:	1aed      	subs	r5, r5, r3
 800b99a:	f7ff ba95 	b.w	800aec8 <dwt_ioctl+0x154>
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	f001 814b 	beq.w	800cc3a <dwt_ioctl+0x1ec6>
 800b9a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b9a8:	7a23      	ldrb	r3, [r4, #8]
 800b9aa:	f899 2013 	ldrb.w	r2, [r9, #19]
 800b9ae:	2aff      	cmp	r2, #255	; 0xff
 800b9b0:	f000 8122 	beq.w	800bbf8 <dwt_ioctl+0xe84>
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d136      	bne.n	800ba26 <dwt_ioctl+0xcb2>
 800b9b8:	f8d9 3000 	ldr.w	r3, [r9]
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	230c      	movs	r3, #12
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	49a6      	ldr	r1, [pc, #664]	; (800bc5c <dwt_ioctl+0xee8>)
 800b9c4:	f7fd fd04 	bl	80093d0 <dwt_writetodevice>
 800b9c8:	f899 300c 	ldrb.w	r3, [r9, #12]
 800b9cc:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800b9d0:	18d1      	adds	r1, r2, r3
 800b9d2:	f899 2012 	ldrb.w	r2, [r9, #18]
 800b9d6:	2a00      	cmp	r2, #0
 800b9d8:	d15f      	bne.n	800ba9a <dwt_ioctl+0xd26>
 800b9da:	f899 0010 	ldrb.w	r0, [r9, #16]
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	bf0b      	itete	eq
 800b9e2:	227f      	moveq	r2, #127	; 0x7f
 800b9e4:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800b9e8:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800b9ec:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800b9f0:	f899 0013 	ldrb.w	r0, [r9, #19]
 800b9f4:	1a12      	subs	r2, r2, r0
 800b9f6:	3a02      	subs	r2, #2
 800b9f8:	4291      	cmp	r1, r2
 800b9fa:	f200 8103 	bhi.w	800bc04 <dwt_ioctl+0xe90>
 800b9fe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ba02:	9200      	str	r2, [sp, #0]
 800ba04:	2200      	movs	r2, #0
 800ba06:	4629      	mov	r1, r5
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f7fd fce1 	bl	80093d0 <dwt_writetodevice>
 800ba0e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800ba12:	f899 200c 	ldrb.w	r2, [r9, #12]
 800ba16:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ba1a:	9100      	str	r1, [sp, #0]
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7fd fcd6 	bl	80093d0 <dwt_writetodevice>
 800ba24:	e04a      	b.n	800babc <dwt_ioctl+0xd48>
 800ba26:	f8d9 3000 	ldr.w	r3, [r9]
 800ba2a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800ba2e:	7a9a      	ldrb	r2, [r3, #10]
 800ba30:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800ba34:	7a5a      	ldrb	r2, [r3, #9]
 800ba36:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800ba3a:	7a1a      	ldrb	r2, [r3, #8]
 800ba3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800ba40:	79da      	ldrb	r2, [r3, #7]
 800ba42:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800ba46:	799a      	ldrb	r2, [r3, #6]
 800ba48:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800ba4c:	795a      	ldrb	r2, [r3, #5]
 800ba4e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800ba52:	791a      	ldrb	r2, [r3, #4]
 800ba54:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800ba58:	78da      	ldrb	r2, [r3, #3]
 800ba5a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800ba5e:	789a      	ldrb	r2, [r3, #2]
 800ba60:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800ba64:	785a      	ldrb	r2, [r3, #1]
 800ba66:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800ba6a:	781a      	ldrb	r2, [r3, #0]
 800ba6c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800ba70:	2200      	movs	r2, #0
 800ba72:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800ba76:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800ba7a:	0a09      	lsrs	r1, r1, #8
 800ba7c:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800ba80:	7b19      	ldrb	r1, [r3, #12]
 800ba82:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800ba86:	7adb      	ldrb	r3, [r3, #11]
 800ba88:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800ba8c:	ab0c      	add	r3, sp, #48	; 0x30
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	2310      	movs	r3, #16
 800ba92:	4972      	ldr	r1, [pc, #456]	; (800bc5c <dwt_ioctl+0xee8>)
 800ba94:	f7fd fc9c 	bl	80093d0 <dwt_writetodevice>
 800ba98:	e796      	b.n	800b9c8 <dwt_ioctl+0xc54>
 800ba9a:	2a01      	cmp	r2, #1
 800ba9c:	f040 80af 	bne.w	800bbfe <dwt_ioctl+0xe8a>
 800baa0:	f899 3011 	ldrb.w	r3, [r9, #17]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800baaa:	bf08      	it	eq
 800baac:	237f      	moveq	r3, #127	; 0x7f
 800baae:	f899 2013 	ldrb.w	r2, [r9, #19]
 800bab2:	1a9b      	subs	r3, r3, r2
 800bab4:	3b02      	subs	r3, #2
 800bab6:	4299      	cmp	r1, r3
 800bab8:	f200 80a7 	bhi.w	800bc0a <dwt_ioctl+0xe96>
 800babc:	f899 2010 	ldrb.w	r2, [r9, #16]
 800bac0:	1e53      	subs	r3, r2, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d940      	bls.n	800bb4a <dwt_ioctl+0xdd6>
 800bac8:	f899 3011 	ldrb.w	r3, [r9, #17]
 800bacc:	1e59      	subs	r1, r3, #1
 800bace:	b2c9      	uxtb	r1, r1
 800bad0:	2901      	cmp	r1, #1
 800bad2:	d947      	bls.n	800bb64 <dwt_ioctl+0xdf0>
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d04c      	beq.n	800bb72 <dwt_ioctl+0xdfe>
 800bad8:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800badc:	2200      	movs	r2, #0
 800bade:	4960      	ldr	r1, [pc, #384]	; (800bc60 <dwt_ioctl+0xeec>)
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7fd fcdd 	bl	80094a0 <dwt_write32bitoffsetreg>
 800bae6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800baea:	4a5e      	ldr	r2, [pc, #376]	; (800bc64 <dwt_ioctl+0xef0>)
 800baec:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800baf0:	f899 300c 	ldrb.w	r3, [r9, #12]
 800baf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf8:	4313      	orrs	r3, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	495a      	ldr	r1, [pc, #360]	; (800bc68 <dwt_ioctl+0xef4>)
 800bafe:	4630      	mov	r0, r6
 800bb00:	f7fd fcce 	bl	80094a0 <dwt_write32bitoffsetreg>
 800bb04:	2301      	movs	r3, #1
 800bb06:	2200      	movs	r2, #0
 800bb08:	4958      	ldr	r1, [pc, #352]	; (800bc6c <dwt_ioctl+0xef8>)
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7fd fe56 	bl	80097bc <dwt_write8bitoffsetreg>
 800bb10:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800bc70 <dwt_ioctl+0xefc>
 800bb14:	2700      	movs	r7, #0
 800bb16:	463a      	mov	r2, r7
 800bb18:	4641      	mov	r1, r8
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7fd f873 	bl	8008c06 <dwt_read8bitoffsetreg>
 800bb20:	f010 0f05 	tst.w	r0, #5
 800bb24:	d0f7      	beq.n	800bb16 <dwt_ioctl+0xda2>
 800bb26:	4605      	mov	r5, r0
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	4950      	ldr	r1, [pc, #320]	; (800bc70 <dwt_ioctl+0xefc>)
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f7fd fe44 	bl	80097bc <dwt_write8bitoffsetreg>
 800bb34:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800bb38:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d025      	beq.n	800bb8c <dwt_ioctl+0xe18>
 800bb40:	b26b      	sxtb	r3, r5
 800bb42:	7023      	strb	r3, [r4, #0]
 800bb44:	2500      	movs	r5, #0
 800bb46:	f7ff b9bf 	b.w	800aec8 <dwt_ioctl+0x154>
 800bb4a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bb4c:	7b9b      	ldrb	r3, [r3, #14]
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	f001 8123 	beq.w	800cd9a <dwt_ioctl+0x2026>
 800bb54:	f899 3011 	ldrb.w	r3, [r9, #17]
 800bb58:	1e5a      	subs	r2, r3, #1
 800bb5a:	b2d2      	uxtb	r2, r2
 800bb5c:	2a01      	cmp	r2, #1
 800bb5e:	d912      	bls.n	800bb86 <dwt_ioctl+0xe12>
 800bb60:	2201      	movs	r2, #1
 800bb62:	e7b7      	b.n	800bad4 <dwt_ioctl+0xd60>
 800bb64:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bb66:	7b9b      	ldrb	r3, [r3, #14]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	bf0c      	ite	eq
 800bb6c:	2302      	moveq	r3, #2
 800bb6e:	2301      	movne	r3, #1
 800bb70:	e7b2      	b.n	800bad8 <dwt_ioctl+0xd64>
 800bb72:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800bb76:	2910      	cmp	r1, #16
 800bb78:	d9ae      	bls.n	800bad8 <dwt_ioctl+0xd64>
 800bb7a:	f06f 0303 	mvn.w	r3, #3
 800bb7e:	e7e0      	b.n	800bb42 <dwt_ioctl+0xdce>
 800bb80:	2202      	movs	r2, #2
 800bb82:	4613      	mov	r3, r2
 800bb84:	e7a8      	b.n	800bad8 <dwt_ioctl+0xd64>
 800bb86:	2201      	movs	r2, #1
 800bb88:	4613      	mov	r3, r2
 800bb8a:	e7a5      	b.n	800bad8 <dwt_ioctl+0xd64>
 800bb8c:	f899 3012 	ldrb.w	r3, [r9, #18]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d1d5      	bne.n	800bb40 <dwt_ioctl+0xdcc>
 800bb94:	f899 2011 	ldrb.w	r2, [r9, #17]
 800bb98:	1e53      	subs	r3, r2, #1
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d91b      	bls.n	800bbd8 <dwt_ioctl+0xe64>
 800bba0:	2a03      	cmp	r2, #3
 800bba2:	bf0c      	ite	eq
 800bba4:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800bba8:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800bbac:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bbb0:	b112      	cbz	r2, 800bbb8 <dwt_ioctl+0xe44>
 800bbb2:	f899 300c 	ldrb.w	r3, [r9, #12]
 800bbb6:	b9c3      	cbnz	r3, 800bbea <dwt_ioctl+0xe76>
 800bbb8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	d0bf      	beq.n	800bb40 <dwt_ioctl+0xdcc>
 800bbc0:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0bb      	beq.n	800bb40 <dwt_ioctl+0xdcc>
 800bbc8:	f899 200c 	ldrb.w	r2, [r9, #12]
 800bbcc:	9100      	str	r1, [sp, #0]
 800bbce:	4639      	mov	r1, r7
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f7fc ffe6 	bl	8008ba2 <dwt_readfromdevice>
 800bbd6:	e7b3      	b.n	800bb40 <dwt_ioctl+0xdcc>
 800bbd8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bbda:	7b9b      	ldrb	r3, [r3, #14]
 800bbdc:	2b03      	cmp	r3, #3
 800bbde:	bf0c      	ite	eq
 800bbe0:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800bbe4:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800bbe8:	e7e0      	b.n	800bbac <dwt_ioctl+0xe38>
 800bbea:	9200      	str	r2, [sp, #0]
 800bbec:	2200      	movs	r2, #0
 800bbee:	4639      	mov	r1, r7
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7fc ffd6 	bl	8008ba2 <dwt_readfromdevice>
 800bbf6:	e7df      	b.n	800bbb8 <dwt_ioctl+0xe44>
 800bbf8:	f06f 0302 	mvn.w	r3, #2
 800bbfc:	e7a1      	b.n	800bb42 <dwt_ioctl+0xdce>
 800bbfe:	f06f 0301 	mvn.w	r3, #1
 800bc02:	e79e      	b.n	800bb42 <dwt_ioctl+0xdce>
 800bc04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc08:	e79b      	b.n	800bb42 <dwt_ioctl+0xdce>
 800bc0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc0e:	e798      	b.n	800bb42 <dwt_ioctl+0xdce>
 800bc10:	7a23      	ldrb	r3, [r4, #8]
 800bc12:	79e1      	ldrb	r1, [r4, #7]
 800bc14:	79a2      	ldrb	r2, [r4, #6]
 800bc16:	00d2      	lsls	r2, r2, #3
 800bc18:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	7962      	ldrb	r2, [r4, #5]
 800bc20:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800bc24:	7922      	ldrb	r2, [r4, #4]
 800bc26:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bc2a:	78e2      	ldrb	r2, [r4, #3]
 800bc2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc30:	78a2      	ldrb	r2, [r4, #2]
 800bc32:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800bc36:	7862      	ldrb	r2, [r4, #1]
 800bc38:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800bc3c:	7822      	ldrb	r2, [r4, #0]
 800bc3e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	2200      	movs	r2, #0
 800bc46:	490b      	ldr	r1, [pc, #44]	; (800bc74 <dwt_ioctl+0xf00>)
 800bc48:	f7fd fbcd 	bl	80093e6 <dwt_write16bitoffsetreg>
 800bc4c:	2500      	movs	r5, #0
 800bc4e:	f7ff b93b 	b.w	800aec8 <dwt_ioctl+0x154>
 800bc52:	bf00      	nop
 800bc54:	000f0028 	.word	0x000f0028
 800bc58:	00020008 	.word	0x00020008
 800bc5c:	00010034 	.word	0x00010034
 800bc60:	00010044 	.word	0x00010044
 800bc64:	0001ff80 	.word	0x0001ff80
 800bc68:	00010048 	.word	0x00010048
 800bc6c:	0001004c 	.word	0x0001004c
 800bc70:	00010050 	.word	0x00010050
 800bc74:	00010030 	.word	0x00010030
 800bc78:	2c00      	cmp	r4, #0
 800bc7a:	f000 87e1 	beq.w	800cc40 <dwt_ioctl+0x1ecc>
 800bc7e:	7863      	ldrb	r3, [r4, #1]
 800bc80:	b133      	cbz	r3, 800bc90 <dwt_ioctl+0xf1c>
 800bc82:	085b      	lsrs	r3, r3, #1
 800bc84:	3b01      	subs	r3, #1
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	7023      	strb	r3, [r4, #0]
 800bc8a:	2500      	movs	r5, #0
 800bc8c:	f7ff b91c 	b.w	800aec8 <dwt_ioctl+0x154>
 800bc90:	2300      	movs	r3, #0
 800bc92:	e7f9      	b.n	800bc88 <dwt_ioctl+0xf14>
 800bc94:	2200      	movs	r2, #0
 800bc96:	49d0      	ldr	r1, [pc, #832]	; (800bfd8 <dwt_ioctl+0x1264>)
 800bc98:	f7fc ff8d 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bc9c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bca0:	8023      	strh	r3, [r4, #0]
 800bca2:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bca6:	8060      	strh	r0, [r4, #2]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	49cc      	ldr	r1, [pc, #816]	; (800bfdc <dwt_ioctl+0x1268>)
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7fc ff82 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bcb2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bcb6:	80a3      	strh	r3, [r4, #4]
 800bcb8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bcbc:	80e0      	strh	r0, [r4, #6]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	49c7      	ldr	r1, [pc, #796]	; (800bfe0 <dwt_ioctl+0x126c>)
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7fc ff77 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bcc8:	7220      	strb	r0, [r4, #8]
 800bcca:	0c00      	lsrs	r0, r0, #16
 800bccc:	7260      	strb	r0, [r4, #9]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	49c4      	ldr	r1, [pc, #784]	; (800bfe4 <dwt_ioctl+0x1270>)
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7fc ff6f 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bcd8:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bcdc:	81a3      	strh	r3, [r4, #12]
 800bcde:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bce2:	8160      	strh	r0, [r4, #10]
 800bce4:	2200      	movs	r2, #0
 800bce6:	49c0      	ldr	r1, [pc, #768]	; (800bfe8 <dwt_ioctl+0x1274>)
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7fc ff64 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bcee:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bcf2:	f8a4 300f 	strh.w	r3, [r4, #15]
 800bcf6:	73a0      	strb	r0, [r4, #14]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	49bc      	ldr	r1, [pc, #752]	; (800bfec <dwt_ioctl+0x1278>)
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f7fc ff5a 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bd02:	7460      	strb	r0, [r4, #17]
 800bd04:	0c00      	lsrs	r0, r0, #16
 800bd06:	74a0      	strb	r0, [r4, #18]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	49b9      	ldr	r1, [pc, #740]	; (800bff0 <dwt_ioctl+0x127c>)
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7fc ff52 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bd12:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bd16:	f8a4 0013 	strh.w	r0, [r4, #19]
 800bd1a:	2500      	movs	r5, #0
 800bd1c:	7565      	strb	r5, [r4, #21]
 800bd1e:	75a5      	strb	r5, [r4, #22]
 800bd20:	462a      	mov	r2, r5
 800bd22:	49b4      	ldr	r1, [pc, #720]	; (800bff4 <dwt_ioctl+0x1280>)
 800bd24:	4630      	mov	r0, r6
 800bd26:	f7fc ff6e 	bl	8008c06 <dwt_read8bitoffsetreg>
 800bd2a:	75e0      	strb	r0, [r4, #23]
 800bd2c:	f7ff b8cc 	b.w	800aec8 <dwt_ioctl+0x154>
 800bd30:	4611      	mov	r1, r2
 800bd32:	f7fd fdbb 	bl	80098ac <ull_configeventcounters>
 800bd36:	2500      	movs	r5, #0
 800bd38:	f7ff b8c6 	b.w	800aec8 <dwt_ioctl+0x154>
 800bd3c:	2c00      	cmp	r4, #0
 800bd3e:	f000 8782 	beq.w	800cc46 <dwt_ioctl+0x1ed2>
 800bd42:	8823      	ldrh	r3, [r4, #0]
 800bd44:	2200      	movs	r2, #0
 800bd46:	49ac      	ldr	r1, [pc, #688]	; (800bff8 <dwt_ioctl+0x1284>)
 800bd48:	f7fd fb4d 	bl	80093e6 <dwt_write16bitoffsetreg>
 800bd4c:	2500      	movs	r5, #0
 800bd4e:	f7ff b8bb 	b.w	800aec8 <dwt_ioctl+0x154>
 800bd52:	2c00      	cmp	r4, #0
 800bd54:	f000 877a 	beq.w	800cc4c <dwt_ioctl+0x1ed8>
 800bd58:	6825      	ldr	r5, [r4, #0]
 800bd5a:	b935      	cbnz	r5, 800bd6a <dwt_ioctl+0xff6>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	461a      	mov	r2, r3
 800bd60:	49a6      	ldr	r1, [pc, #664]	; (800bffc <dwt_ioctl+0x1288>)
 800bd62:	f7fd fb40 	bl	80093e6 <dwt_write16bitoffsetreg>
 800bd66:	f7ff b8af 	b.w	800aec8 <dwt_ioctl+0x154>
 800bd6a:	7962      	ldrb	r2, [r4, #5]
 800bd6c:	7923      	ldrb	r3, [r4, #4]
 800bd6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd76:	2200      	movs	r2, #0
 800bd78:	49a0      	ldr	r1, [pc, #640]	; (800bffc <dwt_ioctl+0x1288>)
 800bd7a:	f7fd fb34 	bl	80093e6 <dwt_write16bitoffsetreg>
 800bd7e:	2500      	movs	r5, #0
 800bd80:	f7ff b8a2 	b.w	800aec8 <dwt_ioctl+0x154>
 800bd84:	2c00      	cmp	r4, #0
 800bd86:	f000 8764 	beq.w	800cc52 <dwt_ioctl+0x1ede>
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	b94b      	cbnz	r3, 800bda2 <dwt_ioctl+0x102e>
 800bd8e:	2500      	movs	r5, #0
 800bd90:	9500      	str	r5, [sp, #0]
 800bd92:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800bd96:	462a      	mov	r2, r5
 800bd98:	2110      	movs	r1, #16
 800bd9a:	f7fe fb61 	bl	800a460 <dwt_modify16bitoffsetreg>
 800bd9e:	f7ff b893 	b.w	800aec8 <dwt_ioctl+0x154>
 800bda2:	2200      	movs	r2, #0
 800bda4:	2134      	movs	r1, #52	; 0x34
 800bda6:	f7fd fb7b 	bl	80094a0 <dwt_write32bitoffsetreg>
 800bdaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2110      	movs	r1, #16
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f7fe fb51 	bl	800a460 <dwt_modify16bitoffsetreg>
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	f7ff b882 	b.w	800aec8 <dwt_ioctl+0x154>
 800bdc4:	2c00      	cmp	r4, #0
 800bdc6:	f000 8747 	beq.w	800cc58 <dwt_ioctl+0x1ee4>
 800bdca:	8861      	ldrh	r1, [r4, #2]
 800bdcc:	f7fd fd82 	bl	80098d4 <ull_aon_read>
 800bdd0:	7020      	strb	r0, [r4, #0]
 800bdd2:	2500      	movs	r5, #0
 800bdd4:	f7ff b878 	b.w	800aec8 <dwt_ioctl+0x154>
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	f000 8740 	beq.w	800cc5e <dwt_ioctl+0x1eea>
 800bdde:	78a2      	ldrb	r2, [r4, #2]
 800bde0:	8821      	ldrh	r1, [r4, #0]
 800bde2:	f7fd fd97 	bl	8009914 <ull_aon_write>
 800bde6:	2500      	movs	r5, #0
 800bde8:	f7ff b86e 	b.w	800aec8 <dwt_ioctl+0x154>
 800bdec:	4b84      	ldr	r3, [pc, #528]	; (800c000 <dwt_ioctl+0x128c>)
 800bdee:	4a85      	ldr	r2, [pc, #532]	; (800c004 <dwt_ioctl+0x1290>)
 800bdf0:	2d01      	cmp	r5, #1
 800bdf2:	bf18      	it	ne
 800bdf4:	4613      	movne	r3, r2
 800bdf6:	2d01      	cmp	r5, #1
 800bdf8:	4983      	ldr	r1, [pc, #524]	; (800c008 <dwt_ioctl+0x1294>)
 800bdfa:	bf18      	it	ne
 800bdfc:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800be00:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800be02:	7b92      	ldrb	r2, [r2, #14]
 800be04:	2a01      	cmp	r2, #1
 800be06:	d012      	beq.n	800be2e <dwt_ioctl+0x10ba>
 800be08:	2a03      	cmp	r2, #3
 800be0a:	d117      	bne.n	800be3c <dwt_ioctl+0x10c8>
 800be0c:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800be10:	3a01      	subs	r2, #1
 800be12:	441a      	add	r2, r3
 800be14:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800be18:	f7fc fee3 	bl	8008be2 <dwt_read16bitoffsetreg>
 800be1c:	09c0      	lsrs	r0, r0, #7
 800be1e:	8020      	strh	r0, [r4, #0]
 800be20:	8825      	ldrh	r5, [r4, #0]
 800be22:	3500      	adds	r5, #0
 800be24:	bf18      	it	ne
 800be26:	2501      	movne	r5, #1
 800be28:	426d      	negs	r5, r5
 800be2a:	f7ff b84d 	b.w	800aec8 <dwt_ioctl+0x154>
 800be2e:	2202      	movs	r2, #2
 800be30:	4619      	mov	r1, r3
 800be32:	f7fc fed6 	bl	8008be2 <dwt_read16bitoffsetreg>
 800be36:	09c0      	lsrs	r0, r0, #7
 800be38:	8020      	strh	r0, [r4, #0]
 800be3a:	e7f1      	b.n	800be20 <dwt_ioctl+0x10ac>
 800be3c:	2202      	movs	r2, #2
 800be3e:	f7fc fed0 	bl	8008be2 <dwt_read16bitoffsetreg>
 800be42:	09c0      	lsrs	r0, r0, #7
 800be44:	8020      	strh	r0, [r4, #0]
 800be46:	e7eb      	b.n	800be20 <dwt_ioctl+0x10ac>
 800be48:	2c00      	cmp	r4, #0
 800be4a:	f000 870b 	beq.w	800cc64 <dwt_ioctl+0x1ef0>
 800be4e:	7821      	ldrb	r1, [r4, #0]
 800be50:	f7fe fb20 	bl	800a494 <ull_setleds>
 800be54:	2500      	movs	r5, #0
 800be56:	f7ff b837 	b.w	800aec8 <dwt_ioctl+0x154>
 800be5a:	4611      	mov	r1, r2
 800be5c:	f7fe f9a2 	bl	800a1a4 <ull_setdwstate>
 800be60:	2500      	movs	r5, #0
 800be62:	f7ff b831 	b.w	800aec8 <dwt_ioctl+0x154>
 800be66:	9400      	str	r4, [sp, #0]
 800be68:	2304      	movs	r3, #4
 800be6a:	2200      	movs	r2, #0
 800be6c:	211c      	movs	r1, #28
 800be6e:	f7fc fe98 	bl	8008ba2 <dwt_readfromdevice>
 800be72:	2500      	movs	r5, #0
 800be74:	f7ff b828 	b.w	800aec8 <dwt_ioctl+0x154>
 800be78:	2c00      	cmp	r4, #0
 800be7a:	f000 86f6 	beq.w	800cc6a <dwt_ioctl+0x1ef6>
 800be7e:	2202      	movs	r2, #2
 800be80:	2144      	movs	r1, #68	; 0x44
 800be82:	f7fc feae 	bl	8008be2 <dwt_read16bitoffsetreg>
 800be86:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800be8a:	7020      	strb	r0, [r4, #0]
 800be8c:	2500      	movs	r5, #0
 800be8e:	f7ff b81b 	b.w	800aec8 <dwt_ioctl+0x154>
 800be92:	2c00      	cmp	r4, #0
 800be94:	f000 86ec 	beq.w	800cc70 <dwt_ioctl+0x1efc>
 800be98:	2200      	movs	r2, #0
 800be9a:	2144      	movs	r1, #68	; 0x44
 800be9c:	f7fc feb3 	bl	8008c06 <dwt_read8bitoffsetreg>
 800bea0:	f000 0001 	and.w	r0, r0, #1
 800bea4:	7020      	strb	r0, [r4, #0]
 800bea6:	2500      	movs	r5, #0
 800bea8:	f7ff b80e 	b.w	800aec8 <dwt_ioctl+0x154>
 800beac:	2c00      	cmp	r4, #0
 800beae:	f000 86e2 	beq.w	800cc76 <dwt_ioctl+0x1f02>
 800beb2:	8862      	ldrh	r2, [r4, #2]
 800beb4:	8821      	ldrh	r1, [r4, #0]
 800beb6:	f7fe f9d1 	bl	800a25c <ull_configureframefilter>
 800beba:	2500      	movs	r5, #0
 800bebc:	f7ff b804 	b.w	800aec8 <dwt_ioctl+0x154>
 800bec0:	9400      	str	r4, [sp, #0]
 800bec2:	2308      	movs	r3, #8
 800bec4:	2200      	movs	r2, #0
 800bec6:	2104      	movs	r1, #4
 800bec8:	f7fd fa82 	bl	80093d0 <dwt_writetodevice>
 800becc:	2500      	movs	r5, #0
 800bece:	f7fe bffb 	b.w	800aec8 <dwt_ioctl+0x154>
 800bed2:	9400      	str	r4, [sp, #0]
 800bed4:	2308      	movs	r3, #8
 800bed6:	2200      	movs	r2, #0
 800bed8:	2104      	movs	r1, #4
 800beda:	f7fc fe62 	bl	8008ba2 <dwt_readfromdevice>
 800bede:	2500      	movs	r5, #0
 800bee0:	f7fe bff2 	b.w	800aec8 <dwt_ioctl+0x154>
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	f000 86c9 	beq.w	800cc7c <dwt_ioctl+0x1f08>
 800beea:	8823      	ldrh	r3, [r4, #0]
 800beec:	2202      	movs	r2, #2
 800beee:	210c      	movs	r1, #12
 800bef0:	f7fd fa79 	bl	80093e6 <dwt_write16bitoffsetreg>
 800bef4:	2500      	movs	r5, #0
 800bef6:	f7fe bfe7 	b.w	800aec8 <dwt_ioctl+0x154>
 800befa:	2c00      	cmp	r4, #0
 800befc:	f000 86c1 	beq.w	800cc82 <dwt_ioctl+0x1f0e>
 800bf00:	8823      	ldrh	r3, [r4, #0]
 800bf02:	2200      	movs	r2, #0
 800bf04:	210c      	movs	r1, #12
 800bf06:	f7fd fa6e 	bl	80093e6 <dwt_write16bitoffsetreg>
 800bf0a:	2500      	movs	r5, #0
 800bf0c:	f7fe bfdc 	b.w	800aec8 <dwt_ioctl+0x154>
 800bf10:	4621      	mov	r1, r4
 800bf12:	f7fd fa3b 	bl	800938c <ull_readrxtimestamp>
 800bf16:	2500      	movs	r5, #0
 800bf18:	f7fe bfd6 	b.w	800aec8 <dwt_ioctl+0x154>
 800bf1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bf1e:	7b9b      	ldrb	r3, [r3, #14]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d00b      	beq.n	800bf3c <dwt_ioctl+0x11c8>
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d112      	bne.n	800bf4e <dwt_ioctl+0x11da>
 800bf28:	9400      	str	r4, [sp, #0]
 800bf2a:	2305      	movs	r3, #5
 800bf2c:	2220      	movs	r2, #32
 800bf2e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800bf32:	f7fc fe36 	bl	8008ba2 <dwt_readfromdevice>
 800bf36:	2500      	movs	r5, #0
 800bf38:	f7fe bfc6 	b.w	800aec8 <dwt_ioctl+0x154>
 800bf3c:	9400      	str	r4, [sp, #0]
 800bf3e:	2305      	movs	r3, #5
 800bf40:	2200      	movs	r2, #0
 800bf42:	4932      	ldr	r1, [pc, #200]	; (800c00c <dwt_ioctl+0x1298>)
 800bf44:	f7fc fe2d 	bl	8008ba2 <dwt_readfromdevice>
 800bf48:	2500      	movs	r5, #0
 800bf4a:	f7fe bfbd 	b.w	800aec8 <dwt_ioctl+0x154>
 800bf4e:	9400      	str	r4, [sp, #0]
 800bf50:	2305      	movs	r3, #5
 800bf52:	2200      	movs	r2, #0
 800bf54:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800bf58:	f7fc fe23 	bl	8008ba2 <dwt_readfromdevice>
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	f7fe bfb3 	b.w	800aec8 <dwt_ioctl+0x154>
 800bf62:	2500      	movs	r5, #0
 800bf64:	f804 5b01 	strb.w	r5, [r4], #1
 800bf68:	9400      	str	r4, [sp, #0]
 800bf6a:	2304      	movs	r3, #4
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	216c      	movs	r1, #108	; 0x6c
 800bf70:	f7fc fe17 	bl	8008ba2 <dwt_readfromdevice>
 800bf74:	f7fe bfa8 	b.w	800aec8 <dwt_ioctl+0x154>
 800bf78:	2c00      	cmp	r4, #0
 800bf7a:	f000 8685 	beq.w	800cc88 <dwt_ioctl+0x1f14>
 800bf7e:	2201      	movs	r2, #1
 800bf80:	2160      	movs	r1, #96	; 0x60
 800bf82:	f7fc fe18 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bf86:	6020      	str	r0, [r4, #0]
 800bf88:	2500      	movs	r5, #0
 800bf8a:	f7fe bf9d 	b.w	800aec8 <dwt_ioctl+0x154>
 800bf8e:	2c00      	cmp	r4, #0
 800bf90:	f000 867d 	beq.w	800cc8e <dwt_ioctl+0x1f1a>
 800bf94:	2200      	movs	r2, #0
 800bf96:	2160      	movs	r1, #96	; 0x60
 800bf98:	f7fc fe0d 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800bf9c:	6020      	str	r0, [r4, #0]
 800bf9e:	2500      	movs	r5, #0
 800bfa0:	f7fe bf92 	b.w	800aec8 <dwt_ioctl+0x154>
 800bfa4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bfa6:	7b9b      	ldrb	r3, [r3, #14]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d00b      	beq.n	800bfc4 <dwt_ioctl+0x1250>
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d131      	bne.n	800c014 <dwt_ioctl+0x12a0>
 800bfb0:	9400      	str	r4, [sp, #0]
 800bfb2:	2305      	movs	r3, #5
 800bfb4:	2228      	movs	r2, #40	; 0x28
 800bfb6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800bfba:	f7fc fdf2 	bl	8008ba2 <dwt_readfromdevice>
 800bfbe:	2500      	movs	r5, #0
 800bfc0:	f7fe bf82 	b.w	800aec8 <dwt_ioctl+0x154>
 800bfc4:	9400      	str	r4, [sp, #0]
 800bfc6:	2305      	movs	r3, #5
 800bfc8:	2200      	movs	r2, #0
 800bfca:	4911      	ldr	r1, [pc, #68]	; (800c010 <dwt_ioctl+0x129c>)
 800bfcc:	f7fc fde9 	bl	8008ba2 <dwt_readfromdevice>
 800bfd0:	2500      	movs	r5, #0
 800bfd2:	f7fe bf79 	b.w	800aec8 <dwt_ioctl+0x154>
 800bfd6:	bf00      	nop
 800bfd8:	000f0004 	.word	0x000f0004
 800bfdc:	000f0008 	.word	0x000f0008
 800bfe0:	000f000c 	.word	0x000f000c
 800bfe4:	000f0010 	.word	0x000f0010
 800bfe8:	000f0014 	.word	0x000f0014
 800bfec:	000f0018 	.word	0x000f0018
 800bff0:	000f001c 	.word	0x000f001c
 800bff4:	000f0020 	.word	0x000f0020
 800bff8:	00060004 	.word	0x00060004
 800bffc:	0011001c 	.word	0x0011001c
 800c000:	00180034 	.word	0x00180034
 800c004:	0018002c 	.word	0x0018002c
 800c008:	000c0014 	.word	0x000c0014
 800c00c:	00180020 	.word	0x00180020
 800c010:	00180028 	.word	0x00180028
 800c014:	9400      	str	r4, [sp, #0]
 800c016:	2305      	movs	r3, #5
 800c018:	2200      	movs	r2, #0
 800c01a:	49ce      	ldr	r1, [pc, #824]	; (800c354 <dwt_ioctl+0x15e0>)
 800c01c:	f7fc fdc1 	bl	8008ba2 <dwt_readfromdevice>
 800c020:	2500      	movs	r5, #0
 800c022:	f7fe bf51 	b.w	800aec8 <dwt_ioctl+0x154>
 800c026:	2c00      	cmp	r4, #0
 800c028:	f000 8634 	beq.w	800cc94 <dwt_ioctl+0x1f20>
 800c02c:	2200      	movs	r2, #0
 800c02e:	211c      	movs	r1, #28
 800c030:	f7fc fdc1 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c034:	6020      	str	r0, [r4, #0]
 800c036:	2500      	movs	r5, #0
 800c038:	f7fe bf46 	b.w	800aec8 <dwt_ioctl+0x154>
 800c03c:	2c00      	cmp	r4, #0
 800c03e:	f000 862c 	beq.w	800cc9a <dwt_ioctl+0x1f26>
 800c042:	8825      	ldrh	r5, [r4, #0]
 800c044:	6867      	ldr	r7, [r4, #4]
 800c046:	7a23      	ldrb	r3, [r4, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 8629 	beq.w	800cca0 <dwt_ioctl+0x1f2c>
 800c04e:	463c      	mov	r4, r7
 800c050:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800c054:	4629      	mov	r1, r5
 800c056:	4630      	mov	r0, r6
 800c058:	f7fd fa00 	bl	800945c <_dwt_otpread>
 800c05c:	f844 0b04 	str.w	r0, [r4], #4
 800c060:	3501      	adds	r5, #1
 800c062:	b2ad      	uxth	r5, r5
 800c064:	42bc      	cmp	r4, r7
 800c066:	d1f5      	bne.n	800c054 <dwt_ioctl+0x12e0>
 800c068:	2500      	movs	r5, #0
 800c06a:	f7fe bf2d 	b.w	800aec8 <dwt_ioctl+0x154>
 800c06e:	2c00      	cmp	r4, #0
 800c070:	f000 8619 	beq.w	800cca6 <dwt_ioctl+0x1f32>
 800c074:	7823      	ldrb	r3, [r4, #0]
 800c076:	2201      	movs	r2, #1
 800c078:	2124      	movs	r1, #36	; 0x24
 800c07a:	f7fd fb9f 	bl	80097bc <dwt_write8bitoffsetreg>
 800c07e:	2500      	movs	r5, #0
 800c080:	f7fe bf22 	b.w	800aec8 <dwt_ioctl+0x154>
 800c084:	f7fe f90e 	bl	800a2a4 <ull_run_pgfcal>
 800c088:	4605      	mov	r5, r0
 800c08a:	f7fe bf1d 	b.w	800aec8 <dwt_ioctl+0x154>
 800c08e:	4611      	mov	r1, r2
 800c090:	f7fe fa4e 	bl	800a530 <ull_pgf_cal>
 800c094:	4605      	mov	r5, r0
 800c096:	f7fe bf17 	b.w	800aec8 <dwt_ioctl+0x154>
 800c09a:	2c00      	cmp	r4, #0
 800c09c:	f000 8606 	beq.w	800ccac <dwt_ioctl+0x1f38>
 800c0a0:	78a5      	ldrb	r5, [r4, #2]
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	f7fd f9b0 	bl	8009408 <ull_force_clocks>
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7fd fe6e 	bl	8009d8c <ull_enable_rf_tx>
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f7fd fe9f 	bl	8009df4 <ull_enable_rftx_blocks>
 800c0b6:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	49a6      	ldr	r1, [pc, #664]	; (800c358 <dwt_ioctl+0x15e4>)
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7fd fb7c 	bl	80097bc <dwt_write8bitoffsetreg>
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	23ff      	movs	r3, #255	; 0xff
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	49a3      	ldr	r1, [pc, #652]	; (800c35c <dwt_ioctl+0x15e8>)
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f7fd ffaa 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c0d4:	4fa1      	ldr	r7, [pc, #644]	; (800c35c <dwt_ioctl+0x15e8>)
 800c0d6:	2500      	movs	r5, #0
 800c0d8:	462a      	mov	r2, r5
 800c0da:	4639      	mov	r1, r7
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f7fc fd92 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c0e2:	f010 0f01 	tst.w	r0, #1
 800c0e6:	d1f7      	bne.n	800c0d8 <dwt_ioctl+0x1364>
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	499d      	ldr	r1, [pc, #628]	; (800c360 <dwt_ioctl+0x15ec>)
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f7fc fd78 	bl	8008be2 <dwt_read16bitoffsetreg>
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f7fd fb03 	bl	8009700 <ull_disable_rftx_blocks>
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fd fb09 	bl	8009714 <ull_disable_rf_tx>
 800c102:	2105      	movs	r1, #5
 800c104:	4630      	mov	r0, r6
 800c106:	f7fd f97f 	bl	8009408 <ull_force_clocks>
 800c10a:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800c10e:	8025      	strh	r5, [r4, #0]
 800c110:	2500      	movs	r5, #0
 800c112:	f7fe bed9 	b.w	800aec8 <dwt_ioctl+0x154>
 800c116:	2102      	movs	r1, #2
 800c118:	f7fe f844 	bl	800a1a4 <ull_setdwstate>
 800c11c:	2101      	movs	r1, #1
 800c11e:	4630      	mov	r0, r6
 800c120:	f7fe f840 	bl	800a1a4 <ull_setdwstate>
 800c124:	2432      	movs	r4, #50	; 0x32
 800c126:	f04f 0814 	mov.w	r8, #20
 800c12a:	2700      	movs	r7, #0
 800c12c:	2544      	movs	r5, #68	; 0x44
 800c12e:	4640      	mov	r0, r8
 800c130:	f7f4 fba1 	bl	8000876 <deca_usleep>
 800c134:	463a      	mov	r2, r7
 800c136:	4629      	mov	r1, r5
 800c138:	4630      	mov	r0, r6
 800c13a:	f7fc fd64 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c13e:	f010 0f02 	tst.w	r0, #2
 800c142:	d105      	bne.n	800c150 <dwt_ioctl+0x13dc>
 800c144:	1e63      	subs	r3, r4, #1
 800c146:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800c14a:	d1f0      	bne.n	800c12e <dwt_ioctl+0x13ba>
 800c14c:	2501      	movs	r5, #1
 800c14e:	e000      	b.n	800c152 <dwt_ioctl+0x13de>
 800c150:	2500      	movs	r5, #0
 800c152:	426d      	negs	r5, r5
 800c154:	f7fe beb8 	b.w	800aec8 <dwt_ioctl+0x154>
 800c158:	2c00      	cmp	r4, #0
 800c15a:	f000 85aa 	beq.w	800ccb2 <dwt_ioctl+0x1f3e>
 800c15e:	7823      	ldrb	r3, [r4, #0]
 800c160:	031b      	lsls	r3, r3, #12
 800c162:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c166:	7862      	ldrb	r2, [r4, #1]
 800c168:	2a01      	cmp	r2, #1
 800c16a:	bf08      	it	eq
 800c16c:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800c176:	2200      	movs	r2, #0
 800c178:	497a      	ldr	r1, [pc, #488]	; (800c364 <dwt_ioctl+0x15f0>)
 800c17a:	f7fd fde3 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800c17e:	2500      	movs	r5, #0
 800c180:	f7fe bea2 	b.w	800aec8 <dwt_ioctl+0x154>
 800c184:	2c00      	cmp	r4, #0
 800c186:	f000 8597 	beq.w	800ccb8 <dwt_ioctl+0x1f44>
 800c18a:	6862      	ldr	r2, [r4, #4]
 800c18c:	6821      	ldr	r1, [r4, #0]
 800c18e:	f7fd fefb 	bl	8009f88 <ull_setgpiomode>
 800c192:	2500      	movs	r5, #0
 800c194:	f7fe be98 	b.w	800aec8 <dwt_ioctl+0x154>
 800c198:	2c00      	cmp	r4, #0
 800c19a:	f000 8590 	beq.w	800ccbe <dwt_ioctl+0x1f4a>
 800c19e:	8823      	ldrh	r3, [r4, #0]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	4971      	ldr	r1, [pc, #452]	; (800c368 <dwt_ioctl+0x15f4>)
 800c1a4:	f7fd f91f 	bl	80093e6 <dwt_write16bitoffsetreg>
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	f7fe be8d 	b.w	800aec8 <dwt_ioctl+0x154>
 800c1ae:	2c00      	cmp	r4, #0
 800c1b0:	f000 8588 	beq.w	800ccc4 <dwt_ioctl+0x1f50>
 800c1b4:	6862      	ldr	r2, [r4, #4]
 800c1b6:	8821      	ldrh	r1, [r4, #0]
 800c1b8:	f7fe f9ea 	bl	800a590 <ull_setgpiovalue>
 800c1bc:	2500      	movs	r5, #0
 800c1be:	f7fe be83 	b.w	800aec8 <dwt_ioctl+0x154>
 800c1c2:	2c00      	cmp	r4, #0
 800c1c4:	f000 8581 	beq.w	800ccca <dwt_ioctl+0x1f56>
 800c1c8:	7865      	ldrb	r5, [r4, #1]
 800c1ca:	7823      	ldrb	r3, [r4, #0]
 800c1cc:	b18b      	cbz	r3, 800c1f2 <dwt_ioctl+0x147e>
 800c1ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	739a      	strb	r2, [r3, #14]
 800c1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1d8:	2208      	movs	r2, #8
 800c1da:	b1e5      	cbz	r5, 800c216 <dwt_ioctl+0x14a2>
 800c1dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1e0:	9200      	str	r2, [sp, #0]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2110      	movs	r1, #16
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	f7fd fdac 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800c1ec:	2500      	movs	r5, #0
 800c1ee:	f7fe be6b 	b.w	800aec8 <dwt_ioctl+0x154>
 800c1f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	739a      	strb	r2, [r3, #14]
 800c1f8:	2318      	movs	r3, #24
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	495b      	ldr	r1, [pc, #364]	; (800c36c <dwt_ioctl+0x15f8>)
 800c1fe:	f7fd f94f 	bl	80094a0 <dwt_write32bitoffsetreg>
 800c202:	23e8      	movs	r3, #232	; 0xe8
 800c204:	2200      	movs	r2, #0
 800c206:	495a      	ldr	r1, [pc, #360]	; (800c370 <dwt_ioctl+0x15fc>)
 800c208:	4630      	mov	r0, r6
 800c20a:	f7fd f949 	bl	80094a0 <dwt_write32bitoffsetreg>
 800c20e:	f06f 0308 	mvn.w	r3, #8
 800c212:	2200      	movs	r2, #0
 800c214:	e7e1      	b.n	800c1da <dwt_ioctl+0x1466>
 800c216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c21a:	e7e1      	b.n	800c1e0 <dwt_ioctl+0x146c>
 800c21c:	2c00      	cmp	r4, #0
 800c21e:	f000 8557 	beq.w	800ccd0 <dwt_ioctl+0x1f5c>
 800c222:	6823      	ldr	r3, [r4, #0]
 800c224:	2200      	movs	r2, #0
 800c226:	2130      	movs	r1, #48	; 0x30
 800c228:	f7fd f93a 	bl	80094a0 <dwt_write32bitoffsetreg>
 800c22c:	2500      	movs	r5, #0
 800c22e:	f7fe be4b 	b.w	800aec8 <dwt_ioctl+0x154>
 800c232:	2c00      	cmp	r4, #0
 800c234:	f000 854f 	beq.w	800ccd6 <dwt_ioctl+0x1f62>
 800c238:	2200      	movs	r2, #0
 800c23a:	4629      	mov	r1, r5
 800c23c:	f7fc fcbb 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c240:	6020      	str	r0, [r4, #0]
 800c242:	2500      	movs	r5, #0
 800c244:	f7fe be40 	b.w	800aec8 <dwt_ioctl+0x154>
 800c248:	4623      	mov	r3, r4
 800c24a:	2200      	movs	r2, #0
 800c24c:	4629      	mov	r1, r5
 800c24e:	f7fd f927 	bl	80094a0 <dwt_write32bitoffsetreg>
 800c252:	2500      	movs	r5, #0
 800c254:	f7fe be38 	b.w	800aec8 <dwt_ioctl+0x154>
 800c258:	2c00      	cmp	r4, #0
 800c25a:	f000 853f 	beq.w	800ccdc <dwt_ioctl+0x1f68>
 800c25e:	2203      	movs	r2, #3
 800c260:	4944      	ldr	r1, [pc, #272]	; (800c374 <dwt_ioctl+0x1600>)
 800c262:	f7fc fcd0 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c266:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800c26a:	7020      	strb	r0, [r4, #0]
 800c26c:	2500      	movs	r5, #0
 800c26e:	f7fe be2b 	b.w	800aec8 <dwt_ioctl+0x154>
 800c272:	2c00      	cmp	r4, #0
 800c274:	f000 8535 	beq.w	800cce2 <dwt_ioctl+0x1f6e>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	2144      	movs	r1, #68	; 0x44
 800c27e:	f7fd f90f 	bl	80094a0 <dwt_write32bitoffsetreg>
 800c282:	2500      	movs	r5, #0
 800c284:	f7fe be20 	b.w	800aec8 <dwt_ioctl+0x154>
 800c288:	2c00      	cmp	r4, #0
 800c28a:	f000 852d 	beq.w	800cce8 <dwt_ioctl+0x1f74>
 800c28e:	8823      	ldrh	r3, [r4, #0]
 800c290:	2200      	movs	r2, #0
 800c292:	2148      	movs	r1, #72	; 0x48
 800c294:	f7fd f8a7 	bl	80093e6 <dwt_write16bitoffsetreg>
 800c298:	2500      	movs	r5, #0
 800c29a:	f7fe be15 	b.w	800aec8 <dwt_ioctl+0x154>
 800c29e:	2c00      	cmp	r4, #0
 800c2a0:	f000 8525 	beq.w	800ccee <dwt_ioctl+0x1f7a>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2144      	movs	r1, #68	; 0x44
 800c2a8:	f7fc fc85 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c2ac:	6020      	str	r0, [r4, #0]
 800c2ae:	2500      	movs	r5, #0
 800c2b0:	f7fe be0a 	b.w	800aec8 <dwt_ioctl+0x154>
 800c2b4:	2c00      	cmp	r4, #0
 800c2b6:	f000 851d 	beq.w	800ccf4 <dwt_ioctl+0x1f80>
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2148      	movs	r1, #72	; 0x48
 800c2be:	f7fc fc90 	bl	8008be2 <dwt_read16bitoffsetreg>
 800c2c2:	6020      	str	r0, [r4, #0]
 800c2c4:	2500      	movs	r5, #0
 800c2c6:	f7fe bdff 	b.w	800aec8 <dwt_ioctl+0x154>
 800c2ca:	2c00      	cmp	r4, #0
 800c2cc:	f000 8515 	beq.w	800ccfa <dwt_ioctl+0x1f86>
 800c2d0:	7823      	ldrb	r3, [r4, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	4928      	ldr	r1, [pc, #160]	; (800c378 <dwt_ioctl+0x1604>)
 800c2d6:	f7fd fa71 	bl	80097bc <dwt_write8bitoffsetreg>
 800c2da:	2500      	movs	r5, #0
 800c2dc:	f7fe bdf4 	b.w	800aec8 <dwt_ioctl+0x154>
 800c2e0:	2c00      	cmp	r4, #0
 800c2e2:	f000 850d 	beq.w	800cd00 <dwt_ioctl+0x1f8c>
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	2144      	movs	r1, #68	; 0x44
 800c2ea:	f7fc fc8c 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c2ee:	7020      	strb	r0, [r4, #0]
 800c2f0:	2500      	movs	r5, #0
 800c2f2:	f7fe bde9 	b.w	800aec8 <dwt_ioctl+0x154>
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	f000 8505 	beq.w	800cd06 <dwt_ioctl+0x1f92>
 800c2fc:	f7fd fa6a 	bl	80097d4 <ull_getframelength>
 800c300:	6020      	str	r0, [r4, #0]
 800c302:	2500      	movs	r5, #0
 800c304:	f7fe bde0 	b.w	800aec8 <dwt_ioctl+0x154>
 800c308:	2c00      	cmp	r4, #0
 800c30a:	f000 84ff 	beq.w	800cd0c <dwt_ioctl+0x1f98>
 800c30e:	2200      	movs	r2, #0
 800c310:	491a      	ldr	r1, [pc, #104]	; (800c37c <dwt_ioctl+0x1608>)
 800c312:	f7fc fc66 	bl	8008be2 <dwt_read16bitoffsetreg>
 800c316:	8020      	strh	r0, [r4, #0]
 800c318:	2500      	movs	r5, #0
 800c31a:	f7fe bdd5 	b.w	800aec8 <dwt_ioctl+0x154>
 800c31e:	2c00      	cmp	r4, #0
 800c320:	f000 84f7 	beq.w	800cd12 <dwt_ioctl+0x1f9e>
 800c324:	2200      	movs	r2, #0
 800c326:	4916      	ldr	r1, [pc, #88]	; (800c380 <dwt_ioctl+0x160c>)
 800c328:	f7fc fc45 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c32c:	6020      	str	r0, [r4, #0]
 800c32e:	2500      	movs	r5, #0
 800c330:	f7fe bdca 	b.w	800aec8 <dwt_ioctl+0x154>
 800c334:	2c00      	cmp	r4, #0
 800c336:	f000 84ef 	beq.w	800cd18 <dwt_ioctl+0x1fa4>
 800c33a:	8823      	ldrh	r3, [r4, #0]
 800c33c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c346:	2200      	movs	r2, #0
 800c348:	490d      	ldr	r1, [pc, #52]	; (800c380 <dwt_ioctl+0x160c>)
 800c34a:	f7fe f889 	bl	800a460 <dwt_modify16bitoffsetreg>
 800c34e:	2500      	movs	r5, #0
 800c350:	f7fe bdba 	b.w	800aec8 <dwt_ioctl+0x154>
 800c354:	000c0008 	.word	0x000c0008
 800c358:	0007001c 	.word	0x0007001c
 800c35c:	00080010 	.word	0x00080010
 800c360:	00080014 	.word	0x00080014
 800c364:	00070014 	.word	0x00070014
 800c368:	00050008 	.word	0x00050008
 800c36c:	001f000c 	.word	0x001f000c
 800c370:	001f0010 	.word	0x001f0010
 800c374:	00030060 	.word	0x00030060
 800c378:	00010018 	.word	0x00010018
 800c37c:	0005002c 	.word	0x0005002c
 800c380:	000e001c 	.word	0x000e001c
 800c384:	2c00      	cmp	r4, #0
 800c386:	f000 84ca 	beq.w	800cd1e <dwt_ioctl+0x1faa>
 800c38a:	88a7      	ldrh	r7, [r4, #4]
 800c38c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800c390:	7b23      	ldrb	r3, [r4, #12]
 800c392:	9306      	str	r3, [sp, #24]
 800c394:	6922      	ldr	r2, [r4, #16]
 800c396:	9204      	str	r2, [sp, #16]
 800c398:	6962      	ldr	r2, [r4, #20]
 800c39a:	9205      	str	r2, [sp, #20]
 800c39c:	f00b 0203 	and.w	r2, fp, #3
 800c3a0:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800c3a4:	2b05      	cmp	r3, #5
 800c3a6:	d145      	bne.n	800c434 <dwt_ioctl+0x16c0>
 800c3a8:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800c3ac:	bf28      	it	cs
 800c3ae:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800c3b2:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800c6ec <dwt_ioctl+0x1978>
 800c3b6:	2f04      	cmp	r7, #4
 800c3b8:	d805      	bhi.n	800c3c6 <dwt_ioctl+0x1652>
 800c3ba:	eb09 0300 	add.w	r3, r9, r0
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	3b05      	subs	r3, #5
 800c3c2:	429f      	cmp	r7, r3
 800c3c4:	db3e      	blt.n	800c444 <dwt_ioctl+0x16d0>
 800c3c6:	2a01      	cmp	r2, #1
 800c3c8:	d87c      	bhi.n	800c4c4 <dwt_ioctl+0x1750>
 800c3ca:	4bc4      	ldr	r3, [pc, #784]	; (800c6dc <dwt_ioctl+0x1968>)
 800c3cc:	5c99      	ldrb	r1, [r3, r2]
 800c3ce:	463e      	mov	r6, r7
 800c3d0:	42b9      	cmp	r1, r7
 800c3d2:	da79      	bge.n	800c4c8 <dwt_ioctl+0x1754>
 800c3d4:	1c55      	adds	r5, r2, #1
 800c3d6:	fa53 f585 	uxtab	r5, r3, r5
 800c3da:	2300      	movs	r3, #0
 800c3dc:	440b      	add	r3, r1
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	3201      	adds	r2, #1
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	2a02      	cmp	r2, #2
 800c3e6:	d005      	beq.n	800c3f4 <dwt_ioctl+0x1680>
 800c3e8:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c3ec:	eba6 0c03 	sub.w	ip, r6, r3
 800c3f0:	4561      	cmp	r1, ip
 800c3f2:	dbf3      	blt.n	800c3dc <dwt_ioctl+0x1668>
 800c3f4:	429f      	cmp	r7, r3
 800c3f6:	bf08      	it	eq
 800c3f8:	9003      	streq	r0, [sp, #12]
 800c3fa:	d069      	beq.n	800c4d0 <dwt_ioctl+0x175c>
 800c3fc:	f107 0805 	add.w	r8, r7, #5
 800c400:	fa1f f888 	uxth.w	r8, r8
 800c404:	2580      	movs	r5, #128	; 0x80
 800c406:	2100      	movs	r1, #0
 800c408:	9107      	str	r1, [sp, #28]
 800c40a:	9103      	str	r1, [sp, #12]
 800c40c:	9108      	str	r1, [sp, #32]
 800c40e:	460e      	mov	r6, r1
 800c410:	2105      	movs	r1, #5
 800c412:	46be      	mov	lr, r7
 800c414:	428f      	cmp	r7, r1
 800c416:	bf38      	it	cc
 800c418:	468e      	movcc	lr, r1
 800c41a:	f1ae 0e05 	sub.w	lr, lr, #5
 800c41e:	fa1f fe8e 	uxth.w	lr, lr
 800c422:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800c6dc <dwt_ioctl+0x1968>
 800c426:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c42a:	468b      	mov	fp, r1
 800c42c:	46bc      	mov	ip, r7
 800c42e:	4637      	mov	r7, r6
 800c430:	f000 bcec 	b.w	800ce0c <dwt_ioctl+0x2098>
 800c434:	f240 1331 	movw	r3, #305	; 0x131
 800c438:	429f      	cmp	r7, r3
 800c43a:	bf28      	it	cs
 800c43c:	461f      	movcs	r7, r3
 800c43e:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800c6f0 <dwt_ioctl+0x197c>
 800c442:	e7b8      	b.n	800c3b6 <dwt_ioctl+0x1642>
 800c444:	2300      	movs	r3, #0
 800c446:	9a05      	ldr	r2, [sp, #20]
 800c448:	8013      	strh	r3, [r2, #0]
 800c44a:	9a04      	ldr	r2, [sp, #16]
 800c44c:	f8c2 b000 	str.w	fp, [r2]
 800c450:	e04d      	b.n	800c4ee <dwt_ioctl+0x177a>
 800c452:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800c456:	2300      	movs	r3, #0
 800c458:	9a05      	ldr	r2, [sp, #20]
 800c45a:	8013      	strh	r3, [r2, #0]
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	f8c3 b000 	str.w	fp, [r3]
 800c462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c466:	e042      	b.n	800c4ee <dwt_ioctl+0x177a>
 800c468:	fa1f fb81 	uxth.w	fp, r1
 800c46c:	9207      	str	r2, [sp, #28]
 800c46e:	9003      	str	r0, [sp, #12]
 800c470:	9308      	str	r3, [sp, #32]
 800c472:	2701      	movs	r7, #1
 800c474:	f000 bcdb 	b.w	800ce2e <dwt_ioctl+0x20ba>
 800c478:	2f00      	cmp	r7, #0
 800c47a:	f040 849b 	bne.w	800cdb4 <dwt_ioctl+0x2040>
 800c47e:	4598      	cmp	r8, r3
 800c480:	f200 84b0 	bhi.w	800cde4 <dwt_ioctl+0x2070>
 800c484:	2e00      	cmp	r6, #0
 800c486:	d039      	beq.n	800c4fc <dwt_ioctl+0x1788>
 800c488:	283f      	cmp	r0, #63	; 0x3f
 800c48a:	f000 84d5 	beq.w	800ce38 <dwt_ioctl+0x20c4>
 800c48e:	2700      	movs	r7, #0
 800c490:	f819 1000 	ldrb.w	r1, [r9, r0]
 800c494:	1a5b      	subs	r3, r3, r1
 800c496:	b29b      	uxth	r3, r3
 800c498:	1e46      	subs	r6, r0, #1
 800c49a:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800c49e:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800c4a2:	bf18      	it	ne
 800c4a4:	2601      	movne	r6, #1
 800c4a6:	f000 bca9 	b.w	800cdfc <dwt_ioctl+0x2088>
 800c4aa:	9906      	ldr	r1, [sp, #24]
 800c4ac:	2909      	cmp	r1, #9
 800c4ae:	f040 84c9 	bne.w	800ce44 <dwt_ioctl+0x20d0>
 800c4b2:	213f      	movs	r1, #63	; 0x3f
 800c4b4:	9103      	str	r1, [sp, #12]
 800c4b6:	e00b      	b.n	800c4d0 <dwt_ioctl+0x175c>
 800c4b8:	b2b3      	uxth	r3, r6
 800c4ba:	3201      	adds	r2, #1
 800c4bc:	b2d2      	uxtb	r2, r2
 800c4be:	213f      	movs	r1, #63	; 0x3f
 800c4c0:	9103      	str	r1, [sp, #12]
 800c4c2:	e005      	b.n	800c4d0 <dwt_ioctl+0x175c>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	e795      	b.n	800c3f4 <dwt_ioctl+0x1680>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	e793      	b.n	800c3f4 <dwt_ioctl+0x1680>
 800c4cc:	9003      	str	r0, [sp, #12]
 800c4ce:	4663      	mov	r3, ip
 800c4d0:	9905      	ldr	r1, [sp, #20]
 800c4d2:	800b      	strh	r3, [r1, #0]
 800c4d4:	9b03      	ldr	r3, [sp, #12]
 800c4d6:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800c4da:	b2d2      	uxtb	r2, r2
 800c4dc:	0413      	lsls	r3, r2, #16
 800c4de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c4e8:	9a04      	ldr	r2, [sp, #16]
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	2500      	movs	r5, #0
 800c4f2:	f7fe bce9 	b.w	800aec8 <dwt_ioctl+0x154>
 800c4f6:	9a07      	ldr	r2, [sp, #28]
 800c4f8:	9b08      	ldr	r3, [sp, #32]
 800c4fa:	e7e9      	b.n	800c4d0 <dwt_ioctl+0x175c>
 800c4fc:	9003      	str	r0, [sp, #12]
 800c4fe:	e7e7      	b.n	800c4d0 <dwt_ioctl+0x175c>
 800c500:	9a07      	ldr	r2, [sp, #28]
 800c502:	9b08      	ldr	r3, [sp, #32]
 800c504:	e7e4      	b.n	800c4d0 <dwt_ioctl+0x175c>
 800c506:	213f      	movs	r1, #63	; 0x3f
 800c508:	9103      	str	r1, [sp, #12]
 800c50a:	e7e1      	b.n	800c4d0 <dwt_ioctl+0x175c>
 800c50c:	2c00      	cmp	r4, #0
 800c50e:	f000 8409 	beq.w	800cd24 <dwt_ioctl+0x1fb0>
 800c512:	7827      	ldrb	r7, [r4, #0]
 800c514:	7864      	ldrb	r4, [r4, #1]
 800c516:	f7f4 f985 	bl	8000824 <decamutexon>
 800c51a:	4605      	mov	r5, r0
 800c51c:	2c02      	cmp	r4, #2
 800c51e:	d00e      	beq.n	800c53e <dwt_ioctl+0x17ca>
 800c520:	2c04      	cmp	r4, #4
 800c522:	d00c      	beq.n	800c53e <dwt_ioctl+0x17ca>
 800c524:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800c528:	2c01      	cmp	r4, #1
 800c52a:	d01a      	beq.n	800c562 <dwt_ioctl+0x17ee>
 800c52c:	43fb      	mvns	r3, r7
 800c52e:	2200      	movs	r2, #0
 800c530:	9200      	str	r2, [sp, #0]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	496a      	ldr	r1, [pc, #424]	; (800c6e0 <dwt_ioctl+0x196c>)
 800c536:	4630      	mov	r0, r6
 800c538:	f7fd fd76 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c53c:	e005      	b.n	800c54a <dwt_ioctl+0x17d6>
 800c53e:	463b      	mov	r3, r7
 800c540:	2200      	movs	r2, #0
 800c542:	4967      	ldr	r1, [pc, #412]	; (800c6e0 <dwt_ioctl+0x196c>)
 800c544:	4630      	mov	r0, r6
 800c546:	f7fd f939 	bl	80097bc <dwt_write8bitoffsetreg>
 800c54a:	463b      	mov	r3, r7
 800c54c:	2200      	movs	r2, #0
 800c54e:	4965      	ldr	r1, [pc, #404]	; (800c6e4 <dwt_ioctl+0x1970>)
 800c550:	4630      	mov	r0, r6
 800c552:	f7fc ffa5 	bl	80094a0 <dwt_write32bitoffsetreg>
 800c556:	4628      	mov	r0, r5
 800c558:	f7f4 f975 	bl	8000846 <decamutexoff>
 800c55c:	2500      	movs	r5, #0
 800c55e:	f7fe bcb3 	b.w	800aec8 <dwt_ioctl+0x154>
 800c562:	9700      	str	r7, [sp, #0]
 800c564:	23ff      	movs	r3, #255	; 0xff
 800c566:	2200      	movs	r2, #0
 800c568:	495d      	ldr	r1, [pc, #372]	; (800c6e0 <dwt_ioctl+0x196c>)
 800c56a:	4630      	mov	r0, r6
 800c56c:	f7fd fd5c 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c570:	e7eb      	b.n	800c54a <dwt_ioctl+0x17d6>
 800c572:	2302      	movs	r3, #2
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	2500      	movs	r5, #0
 800c578:	9500      	str	r5, [sp, #0]
 800c57a:	462b      	mov	r3, r5
 800c57c:	462a      	mov	r2, r5
 800c57e:	211a      	movs	r1, #26
 800c580:	f7fc fa91 	bl	8008aa6 <dwt_xfer3xxx>
 800c584:	f7fe bca0 	b.w	800aec8 <dwt_ioctl+0x154>
 800c588:	f7fe fbe0 	bl	800ad4c <ull_softreset_fcmd>
 800c58c:	2500      	movs	r5, #0
 800c58e:	f7fe bc9b 	b.w	800aec8 <dwt_ioctl+0x154>
 800c592:	f7fe fbc7 	bl	800ad24 <ull_softreset_no_sema_fcmd>
 800c596:	2500      	movs	r5, #0
 800c598:	f7fe bc96 	b.w	800aec8 <dwt_ioctl+0x154>
 800c59c:	2302      	movs	r3, #2
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	2500      	movs	r5, #0
 800c5a2:	9500      	str	r5, [sp, #0]
 800c5a4:	462b      	mov	r3, r5
 800c5a6:	462a      	mov	r2, r5
 800c5a8:	2114      	movs	r1, #20
 800c5aa:	f7fc fa7c 	bl	8008aa6 <dwt_xfer3xxx>
 800c5ae:	f7fe bc8b 	b.w	800aec8 <dwt_ioctl+0x154>
 800c5b2:	2402      	movs	r4, #2
 800c5b4:	9401      	str	r4, [sp, #4]
 800c5b6:	2500      	movs	r5, #0
 800c5b8:	9500      	str	r5, [sp, #0]
 800c5ba:	462b      	mov	r3, r5
 800c5bc:	462a      	mov	r2, r5
 800c5be:	2115      	movs	r1, #21
 800c5c0:	f7fc fa71 	bl	8008aa6 <dwt_xfer3xxx>
 800c5c4:	9401      	str	r4, [sp, #4]
 800c5c6:	9500      	str	r5, [sp, #0]
 800c5c8:	462b      	mov	r3, r5
 800c5ca:	462a      	mov	r2, r5
 800c5cc:	2115      	movs	r1, #21
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7fc fa69 	bl	8008aa6 <dwt_xfer3xxx>
 800c5d4:	f7fe bc78 	b.w	800aec8 <dwt_ioctl+0x154>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	2500      	movs	r5, #0
 800c5de:	9500      	str	r5, [sp, #0]
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	462a      	mov	r2, r5
 800c5e4:	2116      	movs	r1, #22
 800c5e6:	f7fc fa5e 	bl	8008aa6 <dwt_xfer3xxx>
 800c5ea:	f7fe bc6d 	b.w	800aec8 <dwt_ioctl+0x154>
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	f000 839b 	beq.w	800cd2a <dwt_ioctl+0x1fb6>
 800c5f4:	b93a      	cbnz	r2, 800c606 <dwt_ioctl+0x1892>
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c5fc:	f7fc fb03 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c600:	7020      	strb	r0, [r4, #0]
 800c602:	f7fe bc61 	b.w	800aec8 <dwt_ioctl+0x154>
 800c606:	2201      	movs	r2, #1
 800c608:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c60c:	f7fc fafb 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c610:	7020      	strb	r0, [r4, #0]
 800c612:	2500      	movs	r5, #0
 800c614:	f7fe bc58 	b.w	800aec8 <dwt_ioctl+0x154>
 800c618:	2c00      	cmp	r4, #0
 800c61a:	f000 8389 	beq.w	800cd30 <dwt_ioctl+0x1fbc>
 800c61e:	7824      	ldrb	r4, [r4, #0]
 800c620:	2200      	movs	r2, #0
 800c622:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c626:	f7fc faee 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c62a:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800c62e:	4323      	orrs	r3, r4
 800c630:	2200      	movs	r2, #0
 800c632:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c636:	4630      	mov	r0, r6
 800c638:	f7fd f8c0 	bl	80097bc <dwt_write8bitoffsetreg>
 800c63c:	2500      	movs	r5, #0
 800c63e:	f7fe bc43 	b.w	800aec8 <dwt_ioctl+0x154>
 800c642:	2c00      	cmp	r4, #0
 800c644:	f000 8377 	beq.w	800cd36 <dwt_ioctl+0x1fc2>
 800c648:	7824      	ldrb	r4, [r4, #0]
 800c64a:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800c64e:	d01e      	beq.n	800c68e <dwt_ioctl+0x191a>
 800c650:	2d01      	cmp	r5, #1
 800c652:	f040 8373 	bne.w	800cd3c <dwt_ioctl+0x1fc8>
 800c656:	2502      	movs	r5, #2
 800c658:	2201      	movs	r2, #1
 800c65a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c65e:	4630      	mov	r0, r6
 800c660:	f7fc fad1 	bl	8008c06 <dwt_read8bitoffsetreg>
 800c664:	b9ac      	cbnz	r4, 800c692 <dwt_ioctl+0x191e>
 800c666:	ea20 0305 	bic.w	r3, r0, r5
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2201      	movs	r2, #1
 800c66e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c672:	4630      	mov	r0, r6
 800c674:	f7fd f8a2 	bl	80097bc <dwt_write8bitoffsetreg>
 800c678:	2200      	movs	r2, #0
 800c67a:	2110      	movs	r1, #16
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7fc fa9a 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c682:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800c686:	d00b      	beq.n	800c6a0 <dwt_ioctl+0x192c>
 800c688:	2500      	movs	r5, #0
 800c68a:	f7fe bc1d 	b.w	800aec8 <dwt_ioctl+0x154>
 800c68e:	2504      	movs	r5, #4
 800c690:	e7e2      	b.n	800c658 <dwt_ioctl+0x18e4>
 800c692:	2c01      	cmp	r4, #1
 800c694:	f040 8356 	bne.w	800cd44 <dwt_ioctl+0x1fd0>
 800c698:	ea40 0305 	orr.w	r3, r0, r5
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	e7e5      	b.n	800c66c <dwt_ioctl+0x18f8>
 800c6a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2110      	movs	r1, #16
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f7fd fb48 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800c6b4:	2500      	movs	r5, #0
 800c6b6:	f7fe bc07 	b.w	800aec8 <dwt_ioctl+0x154>
 800c6ba:	2c00      	cmp	r4, #0
 800c6bc:	f000 8346 	beq.w	800cd4c <dwt_ioctl+0x1fd8>
 800c6c0:	7823      	ldrb	r3, [r4, #0]
 800c6c2:	035b      	lsls	r3, r3, #13
 800c6c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	4905      	ldr	r1, [pc, #20]	; (800c6e8 <dwt_ioctl+0x1974>)
 800c6d2:	f7fd fec5 	bl	800a460 <dwt_modify16bitoffsetreg>
 800c6d6:	2500      	movs	r5, #0
 800c6d8:	f7fe bbf6 	b.w	800aec8 <dwt_ioctl+0x154>
 800c6dc:	08012130 	.word	0x08012130
 800c6e0:	0001001c 	.word	0x0001001c
 800c6e4:	00010018 	.word	0x00010018
 800c6e8:	000e000c 	.word	0x000e000c
 800c6ec:	080120b0 	.word	0x080120b0
 800c6f0:	080120f0 	.word	0x080120f0
 800c6f4:	2c00      	cmp	r4, #0
 800c6f6:	f000 832c 	beq.w	800cd52 <dwt_ioctl+0x1fde>
 800c6fa:	7825      	ldrb	r5, [r4, #0]
 800c6fc:	6862      	ldr	r2, [r4, #4]
 800c6fe:	2a01      	cmp	r2, #1
 800c700:	bf15      	itete	ne
 800c702:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800c706:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800c70a:	27df      	movne	r7, #223	; 0xdf
 800c70c:	27ef      	moveq	r7, #239	; 0xef
 800c70e:	bf14      	ite	ne
 800c710:	f04f 0820 	movne.w	r8, #32
 800c714:	f04f 0810 	moveq.w	r8, #16
 800c718:	2400      	movs	r4, #0
 800c71a:	9400      	str	r4, [sp, #0]
 800c71c:	4622      	mov	r2, r4
 800c71e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c722:	f7fd fb0f 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800c726:	9400      	str	r4, [sp, #0]
 800c728:	463b      	mov	r3, r7
 800c72a:	4622      	mov	r2, r4
 800c72c:	49be      	ldr	r1, [pc, #760]	; (800ca28 <dwt_ioctl+0x1cb4>)
 800c72e:	4630      	mov	r0, r6
 800c730:	f7fd fc7a 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c734:	2d01      	cmp	r5, #1
 800c736:	d003      	beq.n	800c740 <dwt_ioctl+0x19cc>
 800c738:	b165      	cbz	r5, 800c754 <dwt_ioctl+0x19e0>
 800c73a:	2500      	movs	r5, #0
 800c73c:	f7fe bbc4 	b.w	800aec8 <dwt_ioctl+0x154>
 800c740:	4625      	mov	r5, r4
 800c742:	9400      	str	r4, [sp, #0]
 800c744:	463b      	mov	r3, r7
 800c746:	4622      	mov	r2, r4
 800c748:	49b8      	ldr	r1, [pc, #736]	; (800ca2c <dwt_ioctl+0x1cb8>)
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7fd fc6c 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c750:	f7fe bbba 	b.w	800aec8 <dwt_ioctl+0x154>
 800c754:	f8cd 8000 	str.w	r8, [sp]
 800c758:	23ff      	movs	r3, #255	; 0xff
 800c75a:	2200      	movs	r2, #0
 800c75c:	49b3      	ldr	r1, [pc, #716]	; (800ca2c <dwt_ioctl+0x1cb8>)
 800c75e:	4630      	mov	r0, r6
 800c760:	f7fd fc62 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c764:	f7fe bbb0 	b.w	800aec8 <dwt_ioctl+0x154>
 800c768:	2c00      	cmp	r4, #0
 800c76a:	f000 82f5 	beq.w	800cd58 <dwt_ioctl+0x1fe4>
 800c76e:	7822      	ldrb	r2, [r4, #0]
 800c770:	f012 0f01 	tst.w	r2, #1
 800c774:	d02d      	beq.n	800c7d2 <dwt_ioctl+0x1a5e>
 800c776:	0157      	lsls	r7, r2, #5
 800c778:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800c77c:	2440      	movs	r4, #64	; 0x40
 800c77e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800c782:	f012 0f04 	tst.w	r2, #4
 800c786:	d028      	beq.n	800c7da <dwt_ioctl+0x1a66>
 800c788:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800c78c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800c790:	0112      	lsls	r2, r2, #4
 800c792:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c796:	4317      	orrs	r7, r2
 800c798:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c79c:	9200      	str	r2, [sp, #0]
 800c79e:	43db      	mvns	r3, r3
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7fd facc 	bl	8009d44 <dwt_modify32bitoffsetreg>
 800c7ac:	43e4      	mvns	r4, r4
 800c7ae:	b2a4      	uxth	r4, r4
 800c7b0:	2500      	movs	r5, #0
 800c7b2:	9500      	str	r5, [sp, #0]
 800c7b4:	4623      	mov	r3, r4
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	499b      	ldr	r1, [pc, #620]	; (800ca28 <dwt_ioctl+0x1cb4>)
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f7fd fe50 	bl	800a460 <dwt_modify16bitoffsetreg>
 800c7c0:	9700      	str	r7, [sp, #0]
 800c7c2:	4623      	mov	r3, r4
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	4999      	ldr	r1, [pc, #612]	; (800ca2c <dwt_ioctl+0x1cb8>)
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7fd fe49 	bl	800a460 <dwt_modify16bitoffsetreg>
 800c7ce:	f7fe bb7b 	b.w	800aec8 <dwt_ioctl+0x154>
 800c7d2:	2700      	movs	r7, #0
 800c7d4:	463c      	mov	r4, r7
 800c7d6:	463b      	mov	r3, r7
 800c7d8:	e7d3      	b.n	800c782 <dwt_ioctl+0x1a0e>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	e7de      	b.n	800c79c <dwt_ioctl+0x1a28>
 800c7de:	2308      	movs	r3, #8
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	23ff      	movs	r3, #255	; 0xff
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c7ea:	f7fd fc1d 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c7ee:	4c90      	ldr	r4, [pc, #576]	; (800ca30 <dwt_ioctl+0x1cbc>)
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	23ff      	movs	r3, #255	; 0xff
 800c7f6:	2203      	movs	r2, #3
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f7fd fc14 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c800:	2500      	movs	r5, #0
 800c802:	9500      	str	r5, [sp, #0]
 800c804:	23f7      	movs	r3, #247	; 0xf7
 800c806:	2201      	movs	r2, #1
 800c808:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7fd fc0b 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c812:	9500      	str	r5, [sp, #0]
 800c814:	23fd      	movs	r3, #253	; 0xfd
 800c816:	2203      	movs	r2, #3
 800c818:	4621      	mov	r1, r4
 800c81a:	4630      	mov	r0, r6
 800c81c:	f7fd fc04 	bl	800a028 <dwt_modify8bitoffsetreg>
 800c820:	f7fe bb52 	b.w	800aec8 <dwt_ioctl+0x154>
 800c824:	2c00      	cmp	r4, #0
 800c826:	f000 829a 	beq.w	800cd5e <dwt_ioctl+0x1fea>
 800c82a:	8863      	ldrh	r3, [r4, #2]
 800c82c:	00db      	lsls	r3, r3, #3
 800c82e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800c832:	7822      	ldrb	r2, [r4, #0]
 800c834:	b10a      	cbz	r2, 800c83a <dwt_ioctl+0x1ac6>
 800c836:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	f24f 0307 	movw	r3, #61447	; 0xf007
 800c840:	2200      	movs	r2, #0
 800c842:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c846:	4630      	mov	r0, r6
 800c848:	f7fd fe0a 	bl	800a460 <dwt_modify16bitoffsetreg>
 800c84c:	2500      	movs	r5, #0
 800c84e:	f7fe bb3b 	b.w	800aec8 <dwt_ioctl+0x154>
 800c852:	2c00      	cmp	r4, #0
 800c854:	f000 8286 	beq.w	800cd64 <dwt_ioctl+0x1ff0>
 800c858:	b2e3      	uxtb	r3, r4
 800c85a:	1c9a      	adds	r2, r3, #2
 800c85c:	2301      	movs	r3, #1
 800c85e:	4093      	lsls	r3, r2
 800c860:	3b01      	subs	r3, #1
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2200      	movs	r2, #0
 800c866:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800c86a:	f7fc ffa7 	bl	80097bc <dwt_write8bitoffsetreg>
 800c86e:	2500      	movs	r5, #0
 800c870:	f7fe bb2a 	b.w	800aec8 <dwt_ioctl+0x154>
 800c874:	2c00      	cmp	r4, #0
 800c876:	f000 8278 	beq.w	800cd6a <dwt_ioctl+0x1ff6>
 800c87a:	7ae3      	ldrb	r3, [r4, #11]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 8277 	beq.w	800cd70 <dwt_ioctl+0x1ffc>
 800c882:	7b63      	ldrb	r3, [r4, #13]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d921      	bls.n	800c8cc <dwt_ioctl+0x1b58>
 800c888:	7b22      	ldrb	r2, [r4, #12]
 800c88a:	4b6a      	ldr	r3, [pc, #424]	; (800ca34 <dwt_ioctl+0x1cc0>)
 800c88c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c890:	0112      	lsls	r2, r2, #4
 800c892:	0ad3      	lsrs	r3, r2, #11
 800c894:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800c898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c89c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c8a0:	bf28      	it	cs
 800c8a2:	3301      	addcs	r3, #1
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	f64f 7380 	movw	r3, #65408	; 0xff80
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	4961      	ldr	r1, [pc, #388]	; (800ca38 <dwt_ioctl+0x1cc4>)
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f7fd fdd3 	bl	800a460 <dwt_modify16bitoffsetreg>
 800c8ba:	2394      	movs	r3, #148	; 0x94
 800c8bc:	2200      	movs	r2, #0
 800c8be:	495f      	ldr	r1, [pc, #380]	; (800ca3c <dwt_ioctl+0x1cc8>)
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f7fc ff7b 	bl	80097bc <dwt_write8bitoffsetreg>
 800c8c6:	2500      	movs	r5, #0
 800c8c8:	f7fe bafe 	b.w	800aec8 <dwt_ioctl+0x154>
 800c8cc:	7b22      	ldrb	r2, [r4, #12]
 800c8ce:	4b59      	ldr	r3, [pc, #356]	; (800ca34 <dwt_ioctl+0x1cc0>)
 800c8d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c8d4:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800c8d8:	fb02 f203 	mul.w	r2, r2, r3
 800c8dc:	0c93      	lsrs	r3, r2, #18
 800c8de:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800c8e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c8e6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c8ea:	bf28      	it	cs
 800c8ec:	3301      	addcs	r3, #1
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	e7d9      	b.n	800c8a6 <dwt_ioctl+0x1b32>
 800c8f2:	2c00      	cmp	r4, #0
 800c8f4:	f000 823f 	beq.w	800cd76 <dwt_ioctl+0x2002>
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	4951      	ldr	r1, [pc, #324]	; (800ca40 <dwt_ioctl+0x1ccc>)
 800c8fc:	f7fc f95b 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c900:	6020      	str	r0, [r4, #0]
 800c902:	2500      	movs	r5, #0
 800c904:	f7fe bae0 	b.w	800aec8 <dwt_ioctl+0x154>
 800c908:	2c00      	cmp	r4, #0
 800c90a:	f000 8237 	beq.w	800cd7c <dwt_ioctl+0x2008>
 800c90e:	2200      	movs	r2, #0
 800c910:	494c      	ldr	r1, [pc, #304]	; (800ca44 <dwt_ioctl+0x1cd0>)
 800c912:	f7fc f950 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c916:	6020      	str	r0, [r4, #0]
 800c918:	2500      	movs	r5, #0
 800c91a:	f7fe bad5 	b.w	800aec8 <dwt_ioctl+0x154>
 800c91e:	2c00      	cmp	r4, #0
 800c920:	f000 822f 	beq.w	800cd82 <dwt_ioctl+0x200e>
 800c924:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	2500      	movs	r5, #0
 800c92c:	f7fe bacc 	b.w	800aec8 <dwt_ioctl+0x154>
 800c930:	2c00      	cmp	r4, #0
 800c932:	f000 8229 	beq.w	800cd88 <dwt_ioctl+0x2014>
 800c936:	2500      	movs	r5, #0
 800c938:	950b      	str	r5, [sp, #44]	; 0x2c
 800c93a:	af10      	add	r7, sp, #64	; 0x40
 800c93c:	2319      	movs	r3, #25
 800c93e:	f847 3d10 	str.w	r3, [r7, #-16]!
 800c942:	9700      	str	r7, [sp, #0]
 800c944:	2304      	movs	r3, #4
 800c946:	462a      	mov	r2, r5
 800c948:	493f      	ldr	r1, [pc, #252]	; (800ca48 <dwt_ioctl+0x1cd4>)
 800c94a:	f7fc fd41 	bl	80093d0 <dwt_writetodevice>
 800c94e:	f641 7348 	movw	r3, #8008	; 0x1f48
 800c952:	930c      	str	r3, [sp, #48]	; 0x30
 800c954:	9700      	str	r7, [sp, #0]
 800c956:	2304      	movs	r3, #4
 800c958:	462a      	mov	r2, r5
 800c95a:	493c      	ldr	r1, [pc, #240]	; (800ca4c <dwt_ioctl+0x1cd8>)
 800c95c:	4630      	mov	r0, r6
 800c95e:	f7fc fd37 	bl	80093d0 <dwt_writetodevice>
 800c962:	ab0b      	add	r3, sp, #44	; 0x2c
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	2304      	movs	r3, #4
 800c968:	462a      	mov	r2, r5
 800c96a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800c96e:	4630      	mov	r0, r6
 800c970:	f7fc f917 	bl	8008ba2 <dwt_readfromdevice>
 800c974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c976:	6023      	str	r3, [r4, #0]
 800c978:	f7fe baa6 	b.w	800aec8 <dwt_ioctl+0x154>
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	f000 8206 	beq.w	800cd8e <dwt_ioctl+0x201a>
 800c982:	2200      	movs	r2, #0
 800c984:	4932      	ldr	r1, [pc, #200]	; (800ca50 <dwt_ioctl+0x1cdc>)
 800c986:	f7fc f916 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c98a:	b280      	uxth	r0, r0
 800c98c:	6020      	str	r0, [r4, #0]
 800c98e:	2200      	movs	r2, #0
 800c990:	4930      	ldr	r1, [pc, #192]	; (800ca54 <dwt_ioctl+0x1ce0>)
 800c992:	4630      	mov	r0, r6
 800c994:	f7fc f90f 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c998:	0d43      	lsrs	r3, r0, #21
 800c99a:	019b      	lsls	r3, r3, #6
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	6063      	str	r3, [r4, #4]
 800c9a0:	2500      	movs	r5, #0
 800c9a2:	f7fe ba91 	b.w	800aec8 <dwt_ioctl+0x154>
 800c9a6:	2c00      	cmp	r4, #0
 800c9a8:	f000 81f4 	beq.w	800cd94 <dwt_ioctl+0x2020>
 800c9ac:	7d63      	ldrb	r3, [r4, #21]
 800c9ae:	b133      	cbz	r3, 800c9be <dwt_ioctl+0x1c4a>
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d05b      	beq.n	800ca6c <dwt_ioctl+0x1cf8>
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	f000 8082 	beq.w	800cabe <dwt_ioctl+0x1d4a>
 800c9ba:	23ff      	movs	r3, #255	; 0xff
 800c9bc:	e02f      	b.n	800ca1e <dwt_ioctl+0x1caa>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	4925      	ldr	r1, [pc, #148]	; (800ca58 <dwt_ioctl+0x1ce4>)
 800c9c2:	f7fc f8f8 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c9c6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c9ca:	6020      	str	r0, [r4, #0]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	4923      	ldr	r1, [pc, #140]	; (800ca5c <dwt_ioctl+0x1ce8>)
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f7fc f8f0 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c9d6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9da:	6060      	str	r0, [r4, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	4920      	ldr	r1, [pc, #128]	; (800ca60 <dwt_ioctl+0x1cec>)
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	f7fc f8e8 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c9e6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9ea:	60a0      	str	r0, [r4, #8]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	491d      	ldr	r1, [pc, #116]	; (800ca64 <dwt_ioctl+0x1cf0>)
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f7fc f8e0 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800c9f6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800c9fa:	60e0      	str	r0, [r4, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	491a      	ldr	r1, [pc, #104]	; (800ca68 <dwt_ioctl+0x1cf4>)
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7fc f8d8 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800ca06:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800ca0a:	6120      	str	r0, [r4, #16]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	490c      	ldr	r1, [pc, #48]	; (800ca40 <dwt_ioctl+0x1ccc>)
 800ca10:	4630      	mov	r0, r6
 800ca12:	f7fc f8f8 	bl	8008c06 <dwt_read8bitoffsetreg>
 800ca16:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800ca1a:	7520      	strb	r0, [r4, #20]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	75a3      	strb	r3, [r4, #22]
 800ca20:	2500      	movs	r5, #0
 800ca22:	f7fe ba51 	b.w	800aec8 <dwt_ioctl+0x154>
 800ca26:	bf00      	nop
 800ca28:	00050008 	.word	0x00050008
 800ca2c:	0005000c 	.word	0x0005000c
 800ca30:	00110008 	.word	0x00110008
 800ca34:	0801213c 	.word	0x0801213c
 800ca38:	000e0014 	.word	0x000e0014
 800ca3c:	000e0018 	.word	0x000e0018
 800ca40:	00030060 	.word	0x00030060
 800ca44:	000f004c 	.word	0x000f004c
 800ca48:	001f0004 	.word	0x001f0004
 800ca4c:	001f0008 	.word	0x001f0008
 800ca50:	000c0048 	.word	0x000c0048
 800ca54:	000c0028 	.word	0x000c0028
 800ca58:	000c0058 	.word	0x000c0058
 800ca5c:	000c0030 	.word	0x000c0030
 800ca60:	000c0034 	.word	0x000c0034
 800ca64:	000c0038 	.word	0x000c0038
 800ca68:	000c002c 	.word	0x000c002c
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	49d4      	ldr	r1, [pc, #848]	; (800cdc0 <dwt_ioctl+0x204c>)
 800ca70:	f7fc f8a1 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800ca74:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800ca78:	6020      	str	r0, [r4, #0]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	49d1      	ldr	r1, [pc, #836]	; (800cdc4 <dwt_ioctl+0x2050>)
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f7fc f899 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800ca84:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ca88:	6060      	str	r0, [r4, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	49ce      	ldr	r1, [pc, #824]	; (800cdc8 <dwt_ioctl+0x2054>)
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7fc f891 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800ca94:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ca98:	60a0      	str	r0, [r4, #8]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800caa0:	4630      	mov	r0, r6
 800caa2:	f7fc f888 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800caa6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800caaa:	60e0      	str	r0, [r4, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	49c7      	ldr	r1, [pc, #796]	; (800cdcc <dwt_ioctl+0x2058>)
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7fc f880 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800cab6:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800caba:	6120      	str	r0, [r4, #16]
 800cabc:	e7a6      	b.n	800ca0c <dwt_ioctl+0x1c98>
 800cabe:	2200      	movs	r2, #0
 800cac0:	49c3      	ldr	r1, [pc, #780]	; (800cdd0 <dwt_ioctl+0x205c>)
 800cac2:	f7fc f878 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800cac6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800caca:	6020      	str	r0, [r4, #0]
 800cacc:	2200      	movs	r2, #0
 800cace:	49c1      	ldr	r1, [pc, #772]	; (800cdd4 <dwt_ioctl+0x2060>)
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7fc f870 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800cad6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cada:	6060      	str	r0, [r4, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	49be      	ldr	r1, [pc, #760]	; (800cdd8 <dwt_ioctl+0x2064>)
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7fc f868 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800cae6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800caea:	60a0      	str	r0, [r4, #8]
 800caec:	2200      	movs	r2, #0
 800caee:	49bb      	ldr	r1, [pc, #748]	; (800cddc <dwt_ioctl+0x2068>)
 800caf0:	4630      	mov	r0, r6
 800caf2:	f7fc f860 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800caf6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cafa:	60e0      	str	r0, [r4, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	49b8      	ldr	r1, [pc, #736]	; (800cde0 <dwt_ioctl+0x206c>)
 800cb00:	4630      	mov	r0, r6
 800cb02:	f7fc f858 	bl	8008bb6 <dwt_read32bitoffsetreg>
 800cb06:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800cb0a:	6120      	str	r0, [r4, #16]
 800cb0c:	e77e      	b.n	800ca0c <dwt_ioctl+0x1c98>
 800cb0e:	2500      	movs	r5, #0
 800cb10:	f7fe b9da 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb14:	2500      	movs	r5, #0
 800cb16:	f7fe b9d7 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb1a:	2500      	movs	r5, #0
 800cb1c:	f7fe b9d4 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb20:	2500      	movs	r5, #0
 800cb22:	f7fe b9d1 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb26:	2500      	movs	r5, #0
 800cb28:	f7fe b9ce 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb2c:	2500      	movs	r5, #0
 800cb2e:	f7fe b9cb 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb32:	2500      	movs	r5, #0
 800cb34:	f7fe b9c8 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb38:	2500      	movs	r5, #0
 800cb3a:	f7fe b9c5 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb3e:	2500      	movs	r5, #0
 800cb40:	f7fe b9c2 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb44:	2500      	movs	r5, #0
 800cb46:	f7fe b9bf 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb4a:	2500      	movs	r5, #0
 800cb4c:	f7fe b9bc 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb50:	2500      	movs	r5, #0
 800cb52:	f7fe b9b9 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb56:	2500      	movs	r5, #0
 800cb58:	f7fe b9b6 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb5c:	2500      	movs	r5, #0
 800cb5e:	f7fe b9b3 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb62:	2500      	movs	r5, #0
 800cb64:	f7fe b9b0 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb68:	2500      	movs	r5, #0
 800cb6a:	f7fe b9ad 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb6e:	2500      	movs	r5, #0
 800cb70:	f7fe b9aa 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb74:	2500      	movs	r5, #0
 800cb76:	f7fe b9a7 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb7a:	2500      	movs	r5, #0
 800cb7c:	f7fe b9a4 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb80:	2500      	movs	r5, #0
 800cb82:	f7fe b9a1 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb86:	2500      	movs	r5, #0
 800cb88:	f7fe b99e 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb8c:	2500      	movs	r5, #0
 800cb8e:	f7fe b99b 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb92:	2500      	movs	r5, #0
 800cb94:	f7fe b998 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb98:	2500      	movs	r5, #0
 800cb9a:	f7fe b995 	b.w	800aec8 <dwt_ioctl+0x154>
 800cb9e:	2500      	movs	r5, #0
 800cba0:	f7fe b992 	b.w	800aec8 <dwt_ioctl+0x154>
 800cba4:	2500      	movs	r5, #0
 800cba6:	f7fe b98f 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbaa:	2500      	movs	r5, #0
 800cbac:	f7fe b98c 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbb0:	2500      	movs	r5, #0
 800cbb2:	f7fe b989 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbb6:	2500      	movs	r5, #0
 800cbb8:	f7fe b986 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbbc:	2500      	movs	r5, #0
 800cbbe:	f7fe b983 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbc2:	2500      	movs	r5, #0
 800cbc4:	f7fe b980 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbc8:	2500      	movs	r5, #0
 800cbca:	f7fe b97d 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbce:	2500      	movs	r5, #0
 800cbd0:	f7fe b97a 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbd4:	2500      	movs	r5, #0
 800cbd6:	f7fe b977 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbda:	2500      	movs	r5, #0
 800cbdc:	f7fe b974 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbe0:	2500      	movs	r5, #0
 800cbe2:	f7fe b971 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbe6:	2500      	movs	r5, #0
 800cbe8:	f7fe b96e 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbec:	2500      	movs	r5, #0
 800cbee:	f7fe b96b 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbf2:	2500      	movs	r5, #0
 800cbf4:	f7fe b968 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbf8:	2500      	movs	r5, #0
 800cbfa:	f7fe b965 	b.w	800aec8 <dwt_ioctl+0x154>
 800cbfe:	2500      	movs	r5, #0
 800cc00:	f7fe b962 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc04:	2500      	movs	r5, #0
 800cc06:	f7fe b95f 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc0a:	2500      	movs	r5, #0
 800cc0c:	f7fe b95c 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc10:	2500      	movs	r5, #0
 800cc12:	f7fe b959 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc16:	2500      	movs	r5, #0
 800cc18:	f7fe b956 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc1c:	2500      	movs	r5, #0
 800cc1e:	f7fe b953 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc22:	2500      	movs	r5, #0
 800cc24:	f7fe b950 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc28:	2500      	movs	r5, #0
 800cc2a:	f7fe b94d 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc2e:	2500      	movs	r5, #0
 800cc30:	f7fe b94a 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc34:	2500      	movs	r5, #0
 800cc36:	f7fe b947 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc3a:	2500      	movs	r5, #0
 800cc3c:	f7fe b944 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc40:	2500      	movs	r5, #0
 800cc42:	f7fe b941 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc46:	2500      	movs	r5, #0
 800cc48:	f7fe b93e 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc4c:	2500      	movs	r5, #0
 800cc4e:	f7fe b93b 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc52:	2500      	movs	r5, #0
 800cc54:	f7fe b938 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc58:	2500      	movs	r5, #0
 800cc5a:	f7fe b935 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc5e:	2500      	movs	r5, #0
 800cc60:	f7fe b932 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc64:	2500      	movs	r5, #0
 800cc66:	f7fe b92f 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	f7fe b92c 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc70:	2500      	movs	r5, #0
 800cc72:	f7fe b929 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc76:	2500      	movs	r5, #0
 800cc78:	f7fe b926 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc7c:	2500      	movs	r5, #0
 800cc7e:	f7fe b923 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc82:	2500      	movs	r5, #0
 800cc84:	f7fe b920 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc88:	2500      	movs	r5, #0
 800cc8a:	f7fe b91d 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc8e:	2500      	movs	r5, #0
 800cc90:	f7fe b91a 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc94:	2500      	movs	r5, #0
 800cc96:	f7fe b917 	b.w	800aec8 <dwt_ioctl+0x154>
 800cc9a:	2500      	movs	r5, #0
 800cc9c:	f7fe b914 	b.w	800aec8 <dwt_ioctl+0x154>
 800cca0:	2500      	movs	r5, #0
 800cca2:	f7fe b911 	b.w	800aec8 <dwt_ioctl+0x154>
 800cca6:	2500      	movs	r5, #0
 800cca8:	f7fe b90e 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccac:	2500      	movs	r5, #0
 800ccae:	f7fe b90b 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccb2:	2500      	movs	r5, #0
 800ccb4:	f7fe b908 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccb8:	2500      	movs	r5, #0
 800ccba:	f7fe b905 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccbe:	2500      	movs	r5, #0
 800ccc0:	f7fe b902 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccc4:	2500      	movs	r5, #0
 800ccc6:	f7fe b8ff 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccca:	2500      	movs	r5, #0
 800cccc:	f7fe b8fc 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccd0:	2500      	movs	r5, #0
 800ccd2:	f7fe b8f9 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccd6:	2500      	movs	r5, #0
 800ccd8:	f7fe b8f6 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccdc:	2500      	movs	r5, #0
 800ccde:	f7fe b8f3 	b.w	800aec8 <dwt_ioctl+0x154>
 800cce2:	2500      	movs	r5, #0
 800cce4:	f7fe b8f0 	b.w	800aec8 <dwt_ioctl+0x154>
 800cce8:	2500      	movs	r5, #0
 800ccea:	f7fe b8ed 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccee:	2500      	movs	r5, #0
 800ccf0:	f7fe b8ea 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccf4:	2500      	movs	r5, #0
 800ccf6:	f7fe b8e7 	b.w	800aec8 <dwt_ioctl+0x154>
 800ccfa:	2500      	movs	r5, #0
 800ccfc:	f7fe b8e4 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd00:	2500      	movs	r5, #0
 800cd02:	f7fe b8e1 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd06:	2500      	movs	r5, #0
 800cd08:	f7fe b8de 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd0c:	2500      	movs	r5, #0
 800cd0e:	f7fe b8db 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd12:	2500      	movs	r5, #0
 800cd14:	f7fe b8d8 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd18:	2500      	movs	r5, #0
 800cd1a:	f7fe b8d5 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd1e:	2500      	movs	r5, #0
 800cd20:	f7fe b8d2 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd24:	2500      	movs	r5, #0
 800cd26:	f7fe b8cf 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd2a:	2500      	movs	r5, #0
 800cd2c:	f7fe b8cc 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd30:	2500      	movs	r5, #0
 800cd32:	f7fe b8c9 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd36:	2500      	movs	r5, #0
 800cd38:	f7fe b8c6 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cd40:	f7fe b8c2 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cd48:	f7fe b8be 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd4c:	2500      	movs	r5, #0
 800cd4e:	f7fe b8bb 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd52:	2500      	movs	r5, #0
 800cd54:	f7fe b8b8 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd58:	2500      	movs	r5, #0
 800cd5a:	f7fe b8b5 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd5e:	2500      	movs	r5, #0
 800cd60:	f7fe b8b2 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd64:	2500      	movs	r5, #0
 800cd66:	f7fe b8af 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd6a:	2500      	movs	r5, #0
 800cd6c:	f7fe b8ac 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd70:	2500      	movs	r5, #0
 800cd72:	f7fe b8a9 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd76:	2500      	movs	r5, #0
 800cd78:	f7fe b8a6 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd7c:	2500      	movs	r5, #0
 800cd7e:	f7fe b8a3 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd82:	2500      	movs	r5, #0
 800cd84:	f7fe b8a0 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd88:	2500      	movs	r5, #0
 800cd8a:	f7fe b89d 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd8e:	2500      	movs	r5, #0
 800cd90:	f7fe b89a 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd94:	2500      	movs	r5, #0
 800cd96:	f7fe b897 	b.w	800aec8 <dwt_ioctl+0x154>
 800cd9a:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cd9e:	1e5a      	subs	r2, r3, #1
 800cda0:	b2d2      	uxtb	r2, r2
 800cda2:	2a01      	cmp	r2, #1
 800cda4:	f67e aeec 	bls.w	800bb80 <dwt_ioctl+0xe0c>
 800cda8:	2202      	movs	r2, #2
 800cdaa:	f7fe be93 	b.w	800bad4 <dwt_ioctl+0xd60>
 800cdae:	2f00      	cmp	r7, #0
 800cdb0:	f43f ab68 	beq.w	800c484 <dwt_ioctl+0x1710>
 800cdb4:	f819 1000 	ldrb.w	r1, [r9, r0]
 800cdb8:	1a5b      	subs	r3, r3, r1
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	f7ff bb88 	b.w	800c4d0 <dwt_ioctl+0x175c>
 800cdc0:	000d0020 	.word	0x000d0020
 800cdc4:	000c0064 	.word	0x000c0064
 800cdc8:	000c0068 	.word	0x000c0068
 800cdcc:	000c0060 	.word	0x000c0060
 800cdd0:	000d0068 	.word	0x000d0068
 800cdd4:	000d0040 	.word	0x000d0040
 800cdd8:	000d0044 	.word	0x000d0044
 800cddc:	000d0048 	.word	0x000d0048
 800cde0:	000d003c 	.word	0x000d003c
 800cde4:	283f      	cmp	r0, #63	; 0x3f
 800cde6:	d027      	beq.n	800ce38 <dwt_ioctl+0x20c4>
 800cde8:	2e00      	cmp	r6, #0
 800cdea:	f47f ab51 	bne.w	800c490 <dwt_ioctl+0x171c>
 800cdee:	3001      	adds	r0, #1
 800cdf0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cdf4:	f819 1000 	ldrb.w	r1, [r9, r0]
 800cdf8:	440b      	add	r3, r1
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	459c      	cmp	ip, r3
 800cdfe:	f43f ab65 	beq.w	800c4cc <dwt_ioctl+0x1758>
 800ce02:	3d01      	subs	r5, #1
 800ce04:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800ce08:	f43f ab23 	beq.w	800c452 <dwt_ioctl+0x16de>
 800ce0c:	459e      	cmp	lr, r3
 800ce0e:	f4bf ab33 	bcs.w	800c478 <dwt_ioctl+0x1704>
 800ce12:	4598      	cmp	r8, r3
 800ce14:	d9cb      	bls.n	800cdae <dwt_ioctl+0x203a>
 800ce16:	ebac 0103 	sub.w	r1, ip, r3
 800ce1a:	b209      	sxth	r1, r1
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	bfb8      	it	lt
 800ce20:	4249      	neglt	r1, r1
 800ce22:	4559      	cmp	r1, fp
 800ce24:	f77f ab20 	ble.w	800c468 <dwt_ioctl+0x16f4>
 800ce28:	2f00      	cmp	r7, #0
 800ce2a:	f47f ab64 	bne.w	800c4f6 <dwt_ioctl+0x1782>
 800ce2e:	283f      	cmp	r0, #63	; 0x3f
 800ce30:	d1da      	bne.n	800cde8 <dwt_ioctl+0x2074>
 800ce32:	2f00      	cmp	r7, #0
 800ce34:	f47f ab64 	bne.w	800c500 <dwt_ioctl+0x178c>
 800ce38:	2a03      	cmp	r2, #3
 800ce3a:	f43f ab64 	beq.w	800c506 <dwt_ioctl+0x1792>
 800ce3e:	2a02      	cmp	r2, #2
 800ce40:	f43f ab33 	beq.w	800c4aa <dwt_ioctl+0x1736>
 800ce44:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800ce48:	185e      	adds	r6, r3, r1
 800ce4a:	4566      	cmp	r6, ip
 800ce4c:	f77f ab34 	ble.w	800c4b8 <dwt_ioctl+0x1744>
 800ce50:	440b      	add	r3, r1
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	3201      	adds	r2, #1
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	2700      	movs	r7, #0
 800ce5a:	f7ff bb19 	b.w	800c490 <dwt_ioctl+0x171c>
 800ce5e:	bf00      	nop

0800ce60 <_init>:
 800ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce62:	b085      	sub	sp, #20
 800ce64:	4604      	mov	r4, r0
 800ce66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce68:	6819      	ldr	r1, [r3, #0]
 800ce6a:	f7fd fe57 	bl	800ab1c <ull_initialise>
 800ce6e:	4606      	mov	r6, r0
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	4798      	blx	r3
 800ce76:	ab03      	add	r3, sp, #12
 800ce78:	2200      	movs	r2, #0
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f7fd ff79 	bl	800ad74 <dwt_ioctl>
 800ce82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce86:	6819      	ldr	r1, [r3, #0]
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f7fd fc07 	bl	800a69c <ull_configure>
 800ce8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce92:	6859      	ldr	r1, [r3, #4]
 800ce94:	4620      	mov	r0, r4
 800ce96:	f7fd f953 	bl	800a140 <ull_configuretxrf>
 800ce9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	89db      	ldrh	r3, [r3, #14]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7fc fa9d 	bl	80093e6 <dwt_write16bitoffsetreg>
 800ceac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb0:	899b      	ldrh	r3, [r3, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	217c      	movs	r1, #124	; 0x7c
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f7fc fa95 	bl	80093e6 <dwt_write16bitoffsetreg>
 800cebc:	2100      	movs	r1, #0
 800cebe:	4620      	mov	r0, r4
 800cec0:	f7fc fb29 	bl	8009516 <ull_setrxaftertxdelay>
 800cec4:	2500      	movs	r5, #0
 800cec6:	9500      	str	r5, [sp, #0]
 800cec8:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800cecc:	462a      	mov	r2, r5
 800cece:	2110      	movs	r1, #16
 800ced0:	4620      	mov	r0, r4
 800ced2:	f7fd fac5 	bl	800a460 <dwt_modify16bitoffsetreg>
 800ced6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ced8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceda:	895a      	ldrh	r2, [r3, #10]
 800cedc:	8919      	ldrh	r1, [r3, #8]
 800cede:	4620      	mov	r0, r4
 800cee0:	f7fd f9bc 	bl	800a25c <ull_configureframefilter>
 800cee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee8:	8a1b      	ldrh	r3, [r3, #16]
 800ceea:	2202      	movs	r2, #2
 800ceec:	210c      	movs	r1, #12
 800ceee:	4620      	mov	r0, r4
 800cef0:	f7fc fa79 	bl	80093e6 <dwt_write16bitoffsetreg>
 800cef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef8:	8a5b      	ldrh	r3, [r3, #18]
 800cefa:	462a      	mov	r2, r5
 800cefc:	210c      	movs	r1, #12
 800cefe:	4620      	mov	r0, r4
 800cf00:	f7fc fa71 	bl	80093e6 <dwt_write16bitoffsetreg>
 800cf04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf06:	7a19      	ldrb	r1, [r3, #8]
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f7fd fac3 	bl	800a494 <ull_setleds>
 800cf0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf10:	68d9      	ldr	r1, [r3, #12]
 800cf12:	4620      	mov	r0, r4
 800cf14:	f7fc fb13 	bl	800953e <ull_setlnapamode>
 800cf18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1a:	7e0b      	ldrb	r3, [r1, #24]
 800cf1c:	694a      	ldr	r2, [r1, #20]
 800cf1e:	6909      	ldr	r1, [r1, #16]
 800cf20:	4620      	mov	r0, r4
 800cf22:	f7fd fa21 	bl	800a368 <ull_setinterrupt>
 800cf26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf28:	7f9a      	ldrb	r2, [r3, #30]
 800cf2a:	8b99      	ldrh	r1, [r3, #28]
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f7fc fd19 	bl	8009964 <ull_configuresleep>
 800cf32:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cf34:	7b53      	ldrb	r3, [r2, #13]
 800cf36:	2b2e      	cmp	r3, #46	; 0x2e
 800cf38:	d005      	beq.n	800cf46 <_init+0xe6>
 800cf3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf40:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800cf44:	d00a      	beq.n	800cf5c <_init+0xfc>
 800cf46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf50:	7353      	strb	r3, [r2, #13]
 800cf52:	2200      	movs	r2, #0
 800cf54:	492a      	ldr	r1, [pc, #168]	; (800d000 <_init+0x1a0>)
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7fc fc30 	bl	80097bc <dwt_write8bitoffsetreg>
 800cf5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf5e:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800cf62:	4620      	mov	r0, r4
 800cf64:	f7fd f874 	bl	800a050 <ull_configciadiag>
 800cf68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf6a:	6a19      	ldr	r1, [r3, #32]
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7fc fb07 	bl	8009580 <ull_configurestskey>
 800cf72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7fc fb26 	bl	80095c8 <ull_configurestsiv>
 800cf7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf7e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cf82:	bb9b      	cbnz	r3, 800cfec <_init+0x18c>
 800cf84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf86:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f7fc fc8e 	bl	80098ac <ull_configeventcounters>
 800cf90:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800cf94:	2d00      	cmp	r5, #0
 800cf96:	db26      	blt.n	800cfe6 <_init+0x186>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	fa03 f505 	lsl.w	r5, r3, r5
 800cf9e:	b2af      	uxth	r7, r5
 800cfa0:	4a18      	ldr	r2, [pc, #96]	; (800d004 <_init+0x1a4>)
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f7fc ffef 	bl	8009f88 <ull_setgpiomode>
 800cfaa:	f10d 030a 	add.w	r3, sp, #10
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f7fb fdf2 	bl	8008ba2 <dwt_readfromdevice>
 800cfbe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800cfc2:	ea23 0305 	bic.w	r3, r3, r5
 800cfc6:	f8ad 300a 	strh.w	r3, [sp, #10]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	490e      	ldr	r1, [pc, #56]	; (800d008 <_init+0x1a8>)
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f7fc fa09 	bl	80093e6 <dwt_write16bitoffsetreg>
 800cfd4:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800cfd8:	fab2 f282 	clz	r2, r2
 800cfdc:	0952      	lsrs	r2, r2, #5
 800cfde:	4639      	mov	r1, r7
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7fd fad5 	bl	800a590 <ull_setgpiovalue>
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	b005      	add	sp, #20
 800cfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfec:	2301      	movs	r3, #1
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	23ff      	movs	r3, #255	; 0xff
 800cff2:	2200      	movs	r2, #0
 800cff4:	4905      	ldr	r1, [pc, #20]	; (800d00c <_init+0x1ac>)
 800cff6:	4620      	mov	r0, r4
 800cff8:	f7fd f816 	bl	800a028 <dwt_modify8bitoffsetreg>
 800cffc:	e7c2      	b.n	800cf84 <_init+0x124>
 800cffe:	bf00      	nop
 800d000:	00090014 	.word	0x00090014
 800d004:	01200492 	.word	0x01200492
 800d008:	00050008 	.word	0x00050008
 800d00c:	00020004 	.word	0x00020004

0800d010 <ull_wakeup_ic>:
 800d010:	b508      	push	{r3, lr}
 800d012:	6843      	ldr	r3, [r0, #4]
 800d014:	4798      	blx	r3
 800d016:	bd08      	pop	{r3, pc}

0800d018 <get_sts_mnth>:
 800d018:	fb01 f100 	mul.w	r1, r1, r0
 800d01c:	2a03      	cmp	r2, #3
 800d01e:	d00a      	beq.n	800d036 <get_sts_mnth+0x1e>
 800d020:	0ac8      	lsrs	r0, r1, #11
 800d022:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800d026:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d02a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800d02e:	bf28      	it	cs
 800d030:	3001      	addcs	r0, #1
 800d032:	b280      	uxth	r0, r0
 800d034:	4770      	bx	lr
 800d036:	20b5      	movs	r0, #181	; 0xb5
 800d038:	fb00 f101 	mul.w	r1, r0, r1
 800d03c:	09c9      	lsrs	r1, r1, #7
 800d03e:	e7ef      	b.n	800d020 <get_sts_mnth+0x8>

0800d040 <dwt_dbg_fn>:
 800d040:	2998      	cmp	r1, #152	; 0x98
 800d042:	4802      	ldr	r0, [pc, #8]	; (800d04c <dwt_dbg_fn+0xc>)
 800d044:	bf18      	it	ne
 800d046:	2000      	movne	r0, #0
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	08012244 	.word	0x08012244

0800d050 <_deinit>:
 800d050:	4770      	bx	lr

0800d052 <dwt_xfer3xxx>:
 800d052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	4605      	mov	r5, r0
 800d05a:	460f      	mov	r7, r1
 800d05c:	461e      	mov	r6, r3
 800d05e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d062:	1e59      	subs	r1, r3, #1
 800d064:	b289      	uxth	r1, r1
 800d066:	2901      	cmp	r1, #1
 800d068:	d91c      	bls.n	800d0a4 <dwt_xfer3xxx+0x52>
 800d06a:	19d0      	adds	r0, r2, r7
 800d06c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d070:	443a      	add	r2, r7
 800d072:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800d076:	0082      	lsls	r2, r0, #2
 800d078:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800d07c:	ea43 0102 	orr.w	r1, r3, r2
 800d080:	0a09      	lsrs	r1, r1, #8
 800d082:	f88d 100c 	strb.w	r1, [sp, #12]
 800d086:	b920      	cbnz	r0, 800d092 <dwt_xfer3xxx+0x40>
 800d088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d08c:	d018      	beq.n	800d0c0 <dwt_xfer3xxx+0x6e>
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d037      	beq.n	800d102 <dwt_xfer3xxx+0xb0>
 800d092:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d096:	f88d 100c 	strb.w	r1, [sp, #12]
 800d09a:	431a      	orrs	r2, r3
 800d09c:	f88d 200d 	strb.w	r2, [sp, #13]
 800d0a0:	2402      	movs	r4, #2
 800d0a2:	e005      	b.n	800d0b0 <dwt_xfer3xxx+0x5e>
 800d0a4:	007a      	lsls	r2, r7, #1
 800d0a6:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800d0aa:	f88d 200c 	strb.w	r2, [sp, #12]
 800d0ae:	2401      	movs	r4, #1
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d006      	beq.n	800d0c2 <dwt_xfer3xxx+0x70>
 800d0b4:	d326      	bcc.n	800d104 <dwt_xfer3xxx+0xb2>
 800d0b6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	d901      	bls.n	800d0c2 <dwt_xfer3xxx+0x70>
 800d0be:	e7fe      	b.n	800d0be <dwt_xfer3xxx+0x6c>
 800d0c0:	2401      	movs	r4, #1
 800d0c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d0c4:	7d1b      	ldrb	r3, [r3, #20]
 800d0c6:	b94b      	cbnz	r3, 800d0dc <dwt_xfer3xxx+0x8a>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	685d      	ldr	r5, [r3, #4]
 800d0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ce:	4632      	mov	r2, r6
 800d0d0:	a903      	add	r1, sp, #12
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	47a8      	blx	r5
 800d0d6:	b004      	add	sp, #16
 800d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0dc:	2200      	movs	r2, #0
 800d0de:	4621      	mov	r1, r4
 800d0e0:	a803      	add	r0, sp, #12
 800d0e2:	f7f7 fb05 	bl	80046f0 <dwt_generatecrc8>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0ec:	f7f7 fb00 	bl	80046f0 <dwt_generatecrc8>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	9000      	str	r0, [sp, #0]
 800d0f4:	689d      	ldr	r5, [r3, #8]
 800d0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	a903      	add	r1, sp, #12
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	47a8      	blx	r5
 800d100:	e7e9      	b.n	800d0d6 <dwt_xfer3xxx+0x84>
 800d102:	2401      	movs	r4, #1
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	f8d3 8000 	ldr.w	r8, [r3]
 800d10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d10c:	4632      	mov	r2, r6
 800d10e:	a903      	add	r1, sp, #12
 800d110:	4620      	mov	r0, r4
 800d112:	47c0      	blx	r8
 800d114:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d116:	7d1b      	ldrb	r3, [r3, #20]
 800d118:	2b02      	cmp	r3, #2
 800d11a:	d1dc      	bne.n	800d0d6 <dwt_xfer3xxx+0x84>
 800d11c:	2f18      	cmp	r7, #24
 800d11e:	d0da      	beq.n	800d0d6 <dwt_xfer3xxx+0x84>
 800d120:	2200      	movs	r2, #0
 800d122:	4621      	mov	r1, r4
 800d124:	a803      	add	r0, sp, #12
 800d126:	f7f7 fae3 	bl	80046f0 <dwt_generatecrc8>
 800d12a:	4602      	mov	r2, r0
 800d12c:	4631      	mov	r1, r6
 800d12e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d130:	f7f7 fade 	bl	80046f0 <dwt_generatecrc8>
 800d134:	4604      	mov	r4, r0
 800d136:	2200      	movs	r2, #0
 800d138:	2118      	movs	r1, #24
 800d13a:	4628      	mov	r0, r5
 800d13c:	f000 f866 	bl	800d20c <dwt_read8bitoffsetreg>
 800d140:	4284      	cmp	r4, r0
 800d142:	d0c8      	beq.n	800d0d6 <dwt_xfer3xxx+0x84>
 800d144:	68eb      	ldr	r3, [r5, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0c5      	beq.n	800d0d6 <dwt_xfer3xxx+0x84>
 800d14a:	4798      	blx	r3
 800d14c:	e7c3      	b.n	800d0d6 <dwt_xfer3xxx+0x84>

0800d14e <dwt_readfromdevice>:
 800d14e:	b510      	push	{r4, lr}
 800d150:	b082      	sub	sp, #8
 800d152:	2400      	movs	r4, #0
 800d154:	9401      	str	r4, [sp, #4]
 800d156:	9c04      	ldr	r4, [sp, #16]
 800d158:	9400      	str	r4, [sp, #0]
 800d15a:	f7ff ff7a 	bl	800d052 <dwt_xfer3xxx>
 800d15e:	b002      	add	sp, #8
 800d160:	bd10      	pop	{r4, pc}

0800d162 <dwt_read32bitoffsetreg>:
 800d162:	b500      	push	{lr}
 800d164:	b085      	sub	sp, #20
 800d166:	ab03      	add	r3, sp, #12
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	2304      	movs	r3, #4
 800d16c:	b292      	uxth	r2, r2
 800d16e:	f7ff ffee 	bl	800d14e <dwt_readfromdevice>
 800d172:	f10d 030f 	add.w	r3, sp, #15
 800d176:	f10d 010b 	add.w	r1, sp, #11
 800d17a:	2000      	movs	r0, #0
 800d17c:	f813 2901 	ldrb.w	r2, [r3], #-1
 800d180:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800d184:	428b      	cmp	r3, r1
 800d186:	d1f9      	bne.n	800d17c <dwt_read32bitoffsetreg+0x1a>
 800d188:	b005      	add	sp, #20
 800d18a:	f85d fb04 	ldr.w	pc, [sp], #4

0800d18e <dwt_read16bitoffsetreg>:
 800d18e:	b500      	push	{lr}
 800d190:	b085      	sub	sp, #20
 800d192:	ab03      	add	r3, sp, #12
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	2302      	movs	r3, #2
 800d198:	b292      	uxth	r2, r2
 800d19a:	f7ff ffd8 	bl	800d14e <dwt_readfromdevice>
 800d19e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d1a2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d1a6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d1aa:	b280      	uxth	r0, r0
 800d1ac:	b005      	add	sp, #20
 800d1ae:	f85d fb04 	ldr.w	pc, [sp], #4

0800d1b2 <ull_getrxantennadelay>:
 800d1b2:	b508      	push	{r3, lr}
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800d1ba:	f7ff ffe8 	bl	800d18e <dwt_read16bitoffsetreg>
 800d1be:	bd08      	pop	{r3, pc}

0800d1c0 <ull_gettxantennadelay>:
 800d1c0:	b508      	push	{r3, lr}
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	217c      	movs	r1, #124	; 0x7c
 800d1c6:	f7ff ffe2 	bl	800d18e <dwt_read16bitoffsetreg>
 800d1ca:	bd08      	pop	{r3, pc}

0800d1cc <ull_readclockoffset>:
 800d1cc:	b508      	push	{r3, lr}
 800d1ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d1d0:	7b9b      	ldrb	r3, [r3, #14]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d00a      	beq.n	800d1ec <ull_readclockoffset+0x20>
 800d1d6:	2b03      	cmp	r3, #3
 800d1d8:	d10e      	bne.n	800d1f8 <ull_readclockoffset+0x2c>
 800d1da:	220c      	movs	r2, #12
 800d1dc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d1e0:	f7ff ffd5 	bl	800d18e <dwt_read16bitoffsetreg>
 800d1e4:	b200      	sxth	r0, r0
 800d1e6:	f340 000c 	sbfx	r0, r0, #0, #13
 800d1ea:	bd08      	pop	{r3, pc}
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4905      	ldr	r1, [pc, #20]	; (800d204 <ull_readclockoffset+0x38>)
 800d1f0:	f7ff ffcd 	bl	800d18e <dwt_read16bitoffsetreg>
 800d1f4:	b200      	sxth	r0, r0
 800d1f6:	e7f6      	b.n	800d1e6 <ull_readclockoffset+0x1a>
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	4903      	ldr	r1, [pc, #12]	; (800d208 <ull_readclockoffset+0x3c>)
 800d1fc:	f7ff ffc7 	bl	800d18e <dwt_read16bitoffsetreg>
 800d200:	b200      	sxth	r0, r0
 800d202:	e7f0      	b.n	800d1e6 <ull_readclockoffset+0x1a>
 800d204:	0018000c 	.word	0x0018000c
 800d208:	000c0020 	.word	0x000c0020

0800d20c <dwt_read8bitoffsetreg>:
 800d20c:	b500      	push	{lr}
 800d20e:	b085      	sub	sp, #20
 800d210:	f10d 030f 	add.w	r3, sp, #15
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	2301      	movs	r3, #1
 800d218:	b292      	uxth	r2, r2
 800d21a:	f7ff ff98 	bl	800d14e <dwt_readfromdevice>
 800d21e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800d222:	b005      	add	sp, #20
 800d224:	f85d fb04 	ldr.w	pc, [sp], #4

0800d228 <ull_readcarrierintegrator>:
 800d228:	b500      	push	{lr}
 800d22a:	b085      	sub	sp, #20
 800d22c:	ab03      	add	r3, sp, #12
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	2303      	movs	r3, #3
 800d232:	2200      	movs	r2, #0
 800d234:	490b      	ldr	r1, [pc, #44]	; (800d264 <ull_readcarrierintegrator+0x3c>)
 800d236:	f7ff ff8a 	bl	800d14e <dwt_readfromdevice>
 800d23a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d23e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800d242:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800d246:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d24a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d24e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d252:	bf1c      	itt	ne
 800d254:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800d258:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800d25c:	b005      	add	sp, #20
 800d25e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d262:	bf00      	nop
 800d264:	00060029 	.word	0x00060029

0800d268 <ull_readdiagnostics>:
 800d268:	b530      	push	{r4, r5, lr}
 800d26a:	b0bd      	sub	sp, #244	; 0xf4
 800d26c:	4605      	mov	r5, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d272:	7b9a      	ldrb	r2, [r3, #14]
 800d274:	2a01      	cmp	r2, #1
 800d276:	d01c      	beq.n	800d2b2 <ull_readdiagnostics+0x4a>
 800d278:	2a03      	cmp	r2, #3
 800d27a:	f040 81f1 	bne.w	800d660 <ull_readdiagnostics+0x3f8>
 800d27e:	7d9b      	ldrb	r3, [r3, #22]
 800d280:	f013 0f08 	tst.w	r3, #8
 800d284:	d10c      	bne.n	800d2a0 <ull_readdiagnostics+0x38>
 800d286:	f013 0f04 	tst.w	r3, #4
 800d28a:	ab02      	add	r3, sp, #8
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	bf14      	ite	ne
 800d290:	2338      	movne	r3, #56	; 0x38
 800d292:	2320      	moveq	r3, #32
 800d294:	2200      	movs	r2, #0
 800d296:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d29a:	f7ff ff58 	bl	800d14e <dwt_readfromdevice>
 800d29e:	e019      	b.n	800d2d4 <ull_readdiagnostics+0x6c>
 800d2a0:	ab02      	add	r3, sp, #8
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	23e8      	movs	r3, #232	; 0xe8
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d2ac:	f7ff ff4f 	bl	800d14e <dwt_readfromdevice>
 800d2b0:	e010      	b.n	800d2d4 <ull_readdiagnostics+0x6c>
 800d2b2:	7d9b      	ldrb	r3, [r3, #22]
 800d2b4:	f013 0f08 	tst.w	r3, #8
 800d2b8:	f040 81c9 	bne.w	800d64e <ull_readdiagnostics+0x3e6>
 800d2bc:	f013 0f04 	tst.w	r3, #4
 800d2c0:	ab02      	add	r3, sp, #8
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	bf14      	ite	ne
 800d2c6:	2338      	movne	r3, #56	; 0x38
 800d2c8:	2320      	moveq	r3, #32
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d2d0:	f7ff ff3d 	bl	800d14e <dwt_readfromdevice>
 800d2d4:	f10d 0217 	add.w	r2, sp, #23
 800d2d8:	f104 031a 	add.w	r3, r4, #26
 800d2dc:	f104 0020 	add.w	r0, r4, #32
 800d2e0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d2e4:	f803 1b01 	strb.w	r1, [r3], #1
 800d2e8:	4283      	cmp	r3, r0
 800d2ea:	d1f9      	bne.n	800d2e0 <ull_readdiagnostics+0x78>
 800d2ec:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d2f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d2f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2fc:	8463      	strh	r3, [r4, #34]	; 0x22
 800d2fe:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d302:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d306:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d30a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d30e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d312:	bf1c      	itt	ne
 800d314:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d318:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d31c:	8423      	strh	r3, [r4, #32]
 800d31e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800d322:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d326:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d32a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d32e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d330:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d332:	7d9b      	ldrb	r3, [r3, #22]
 800d334:	f013 0f02 	tst.w	r3, #2
 800d338:	f040 817e 	bne.w	800d638 <ull_readdiagnostics+0x3d0>
 800d33c:	aa0a      	add	r2, sp, #40	; 0x28
 800d33e:	1e63      	subs	r3, r4, #1
 800d340:	1d20      	adds	r0, r4, #4
 800d342:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d346:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d34a:	79d1      	ldrb	r1, [r2, #7]
 800d34c:	7219      	strb	r1, [r3, #8]
 800d34e:	7bd1      	ldrb	r1, [r2, #15]
 800d350:	7459      	strb	r1, [r3, #17]
 800d352:	4283      	cmp	r3, r0
 800d354:	d1f5      	bne.n	800d342 <ull_readdiagnostics+0xda>
 800d356:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800d35a:	7163      	strb	r3, [r4, #5]
 800d35c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800d360:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800d364:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d368:	80e3      	strh	r3, [r4, #6]
 800d36a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d36e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d372:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d376:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d37a:	f8a4 300d 	strh.w	r3, [r4, #13]
 800d37e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800d382:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800d386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d38a:	f8a4 300f 	strh.w	r3, [r4, #15]
 800d38e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800d392:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800d396:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d39a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d39e:	82e3      	strh	r3, [r4, #22]
 800d3a0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800d3a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800d3a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3ac:	8323      	strh	r3, [r4, #24]
 800d3ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d3b0:	7d9b      	ldrb	r3, [r3, #22]
 800d3b2:	f013 0f04 	tst.w	r3, #4
 800d3b6:	f040 813f 	bne.w	800d638 <ull_readdiagnostics+0x3d0>
 800d3ba:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800d3be:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d3c2:	041b      	lsls	r3, r3, #16
 800d3c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3c8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800d3d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3d6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d3da:	6263      	str	r3, [r4, #36]	; 0x24
 800d3dc:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800d3e0:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800d3e4:	041b      	lsls	r3, r3, #16
 800d3e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3ea:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800d3f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3fe:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800d402:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800d406:	041b      	lsls	r3, r3, #16
 800d408:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d40c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800d410:	4313      	orrs	r3, r2
 800d412:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800d416:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d41a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d41e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d420:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800d424:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800d428:	041b      	lsls	r3, r3, #16
 800d42a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d42e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800d432:	4313      	orrs	r3, r2
 800d434:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800d438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d43c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d440:	6323      	str	r3, [r4, #48]	; 0x30
 800d442:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800d446:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800d44a:	041b      	lsls	r3, r3, #16
 800d44c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d450:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800d454:	4313      	orrs	r3, r2
 800d456:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800d45a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d45e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d462:	6363      	str	r3, [r4, #52]	; 0x34
 800d464:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800d468:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800d46c:	041b      	lsls	r3, r3, #16
 800d46e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d472:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800d476:	4313      	orrs	r3, r2
 800d478:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800d47c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d480:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d484:	63a3      	str	r3, [r4, #56]	; 0x38
 800d486:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800d48a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d48e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d492:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800d494:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800d498:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d49c:	041b      	lsls	r3, r3, #16
 800d49e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4a2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d4ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d4b4:	6423      	str	r3, [r4, #64]	; 0x40
 800d4b6:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800d4ba:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800d4be:	041b      	lsls	r3, r3, #16
 800d4c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4c4:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800d4ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4d6:	6463      	str	r3, [r4, #68]	; 0x44
 800d4d8:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800d4dc:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800d4e0:	041b      	lsls	r3, r3, #16
 800d4e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4e6:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800d4f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d4f8:	64a3      	str	r3, [r4, #72]	; 0x48
 800d4fa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800d4fe:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800d502:	041b      	lsls	r3, r3, #16
 800d504:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d508:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800d50c:	4313      	orrs	r3, r2
 800d50e:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800d512:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d516:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d51a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d51c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800d520:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800d524:	041b      	lsls	r3, r3, #16
 800d526:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d52a:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800d52e:	4313      	orrs	r3, r2
 800d530:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d534:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d538:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d53c:	6523      	str	r3, [r4, #80]	; 0x50
 800d53e:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d542:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d546:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d54a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d54e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d552:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800d556:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800d55a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d55e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d562:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d566:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d56a:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d56e:	041b      	lsls	r3, r3, #16
 800d570:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d574:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d578:	4313      	orrs	r3, r2
 800d57a:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d57e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d582:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d586:	65a3      	str	r3, [r4, #88]	; 0x58
 800d588:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800d58c:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800d590:	041b      	lsls	r3, r3, #16
 800d592:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d596:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800d59a:	4313      	orrs	r3, r2
 800d59c:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800d5a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5a8:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d5aa:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800d5ae:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800d5b2:	041b      	lsls	r3, r3, #16
 800d5b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5b8:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800d5c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5c6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d5ca:	6623      	str	r3, [r4, #96]	; 0x60
 800d5cc:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800d5d0:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800d5d4:	041b      	lsls	r3, r3, #16
 800d5d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5da:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800d5e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d5ec:	6663      	str	r3, [r4, #100]	; 0x64
 800d5ee:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800d5f2:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800d5f6:	041b      	lsls	r3, r3, #16
 800d5f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5fc:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800d600:	4313      	orrs	r3, r2
 800d602:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d606:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d60a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d60e:	66a3      	str	r3, [r4, #104]	; 0x68
 800d610:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d614:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d61c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d620:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d624:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800d628:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800d62c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d634:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d638:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f2c0 81d0 	blt.w	800d9e2 <ull_readdiagnostics+0x77a>
 800d642:	7fe3      	ldrb	r3, [r4, #31]
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	77e3      	strb	r3, [r4, #31]
 800d64a:	b03d      	add	sp, #244	; 0xf4
 800d64c:	bd30      	pop	{r4, r5, pc}
 800d64e:	ab02      	add	r3, sp, #8
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	23e8      	movs	r3, #232	; 0xe8
 800d654:	2200      	movs	r2, #0
 800d656:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d65a:	f7ff fd78 	bl	800d14e <dwt_readfromdevice>
 800d65e:	e639      	b.n	800d2d4 <ull_readdiagnostics+0x6c>
 800d660:	7d9b      	ldrb	r3, [r3, #22]
 800d662:	f013 0f01 	tst.w	r3, #1
 800d666:	f000 81b3 	beq.w	800d9d0 <ull_readdiagnostics+0x768>
 800d66a:	ab02      	add	r3, sp, #8
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	236c      	movs	r3, #108	; 0x6c
 800d670:	2200      	movs	r2, #0
 800d672:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d676:	f7ff fd6a 	bl	800d14e <dwt_readfromdevice>
 800d67a:	ab1d      	add	r3, sp, #116	; 0x74
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	236c      	movs	r3, #108	; 0x6c
 800d680:	2200      	movs	r2, #0
 800d682:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800d686:	4628      	mov	r0, r5
 800d688:	f7ff fd61 	bl	800d14e <dwt_readfromdevice>
 800d68c:	aa02      	add	r2, sp, #8
 800d68e:	1e63      	subs	r3, r4, #1
 800d690:	1d20      	adds	r0, r4, #4
 800d692:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d696:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d69a:	79d1      	ldrb	r1, [r2, #7]
 800d69c:	7219      	strb	r1, [r3, #8]
 800d69e:	7bd1      	ldrb	r1, [r2, #15]
 800d6a0:	7459      	strb	r1, [r3, #17]
 800d6a2:	7dd1      	ldrb	r1, [r2, #23]
 800d6a4:	7699      	strb	r1, [r3, #26]
 800d6a6:	4283      	cmp	r3, r0
 800d6a8:	d1f3      	bne.n	800d692 <ull_readdiagnostics+0x42a>
 800d6aa:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d6ae:	77e3      	strb	r3, [r4, #31]
 800d6b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d6b4:	7163      	strb	r3, [r4, #5]
 800d6b6:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d6ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d6be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6c2:	80e3      	strh	r3, [r4, #6]
 800d6c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d6c8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d6cc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800d6d0:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800d6d4:	f8a4 200d 	strh.w	r2, [r4, #13]
 800d6d8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d6dc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800d6e0:	f8a4 200f 	strh.w	r2, [r4, #15]
 800d6e4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d6e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6ec:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d6f0:	82e3      	strh	r3, [r4, #22]
 800d6f2:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800d6f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d6fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6fe:	8323      	strh	r3, [r4, #24]
 800d700:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800d704:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800d708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d70c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d710:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d714:	bf1c      	itt	ne
 800d716:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d71a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d71e:	8423      	strh	r3, [r4, #32]
 800d720:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800d724:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d728:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d72c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d730:	8463      	strh	r3, [r4, #34]	; 0x22
 800d732:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800d736:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d73a:	041b      	lsls	r3, r3, #16
 800d73c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d740:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800d744:	4313      	orrs	r3, r2
 800d746:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800d74a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d74e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d752:	6263      	str	r3, [r4, #36]	; 0x24
 800d754:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d756:	7d9b      	ldrb	r3, [r3, #22]
 800d758:	f013 0f01 	tst.w	r3, #1
 800d75c:	f43f af6c 	beq.w	800d638 <ull_readdiagnostics+0x3d0>
 800d760:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800d764:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800d768:	041b      	lsls	r3, r3, #16
 800d76a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d76e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800d772:	4313      	orrs	r3, r2
 800d774:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800d778:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d77c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d780:	62a3      	str	r3, [r4, #40]	; 0x28
 800d782:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d786:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d78a:	041b      	lsls	r3, r3, #16
 800d78c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d790:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800d794:	4313      	orrs	r3, r2
 800d796:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800d79a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d79e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7a4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800d7a8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800d7ac:	041b      	lsls	r3, r3, #16
 800d7ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7b2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800d7bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7c4:	6323      	str	r3, [r4, #48]	; 0x30
 800d7c6:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800d7ca:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800d7ce:	041b      	lsls	r3, r3, #16
 800d7d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7d4:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800d7de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7e6:	6363      	str	r3, [r4, #52]	; 0x34
 800d7e8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800d7ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d7f0:	041b      	lsls	r3, r3, #16
 800d7f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7f6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800d800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d804:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d808:	63a3      	str	r3, [r4, #56]	; 0x38
 800d80a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800d80e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d816:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800d818:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800d81c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800d820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d828:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d82a:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800d82e:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800d832:	041b      	lsls	r3, r3, #16
 800d834:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d838:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800d83c:	4313      	orrs	r3, r2
 800d83e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800d842:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d846:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d84a:	6423      	str	r3, [r4, #64]	; 0x40
 800d84c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800d850:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800d854:	041b      	lsls	r3, r3, #16
 800d856:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d85a:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800d85e:	4313      	orrs	r3, r2
 800d860:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800d864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d86c:	6463      	str	r3, [r4, #68]	; 0x44
 800d86e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800d872:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800d876:	041b      	lsls	r3, r3, #16
 800d878:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d87c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800d880:	4313      	orrs	r3, r2
 800d882:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800d886:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d88a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d88e:	64a3      	str	r3, [r4, #72]	; 0x48
 800d890:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800d894:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800d898:	041b      	lsls	r3, r3, #16
 800d89a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d89e:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800d8a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d8b2:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800d8b6:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d8ba:	041b      	lsls	r3, r3, #16
 800d8bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d8c0:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d8ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8d2:	6523      	str	r3, [r4, #80]	; 0x50
 800d8d4:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d8d8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800d8dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d8e4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d8e8:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d8ec:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d8f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8f8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d8fc:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800d900:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800d904:	041b      	lsls	r3, r3, #16
 800d906:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d90a:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800d90e:	4313      	orrs	r3, r2
 800d910:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800d914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d918:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d91c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d91e:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800d922:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800d926:	041b      	lsls	r3, r3, #16
 800d928:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d92c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800d930:	4313      	orrs	r3, r2
 800d932:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800d936:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d93a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d93e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d940:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800d944:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800d948:	041b      	lsls	r3, r3, #16
 800d94a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d94e:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800d952:	4313      	orrs	r3, r2
 800d954:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800d958:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d95c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d960:	6623      	str	r3, [r4, #96]	; 0x60
 800d962:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800d966:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800d96a:	041b      	lsls	r3, r3, #16
 800d96c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d970:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800d974:	4313      	orrs	r3, r2
 800d976:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800d97a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d97e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d982:	6663      	str	r3, [r4, #100]	; 0x64
 800d984:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d988:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d98c:	041b      	lsls	r3, r3, #16
 800d98e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d992:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d996:	4313      	orrs	r3, r2
 800d998:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d99c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d9a4:	66a3      	str	r3, [r4, #104]	; 0x68
 800d9a6:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d9aa:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800d9ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d9b6:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d9ba:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d9be:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d9c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9ca:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d9ce:	e633      	b.n	800d638 <ull_readdiagnostics+0x3d0>
 800d9d0:	ab02      	add	r3, sp, #8
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2328      	movs	r3, #40	; 0x28
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d9dc:	f7ff fbb7 	bl	800d14e <dwt_readfromdevice>
 800d9e0:	e654      	b.n	800d68c <ull_readdiagnostics+0x424>
 800d9e2:	23ff      	movs	r3, #255	; 0xff
 800d9e4:	7723      	strb	r3, [r4, #28]
 800d9e6:	7763      	strb	r3, [r4, #29]
 800d9e8:	77a3      	strb	r3, [r4, #30]
 800d9ea:	77e3      	strb	r3, [r4, #31]
 800d9ec:	e629      	b.n	800d642 <ull_readdiagnostics+0x3da>
	...

0800d9f0 <ull_readrxtimestamp>:
 800d9f0:	b500      	push	{lr}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d9f6:	7b9b      	ldrb	r3, [r3, #14]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d00b      	beq.n	800da14 <ull_readrxtimestamp+0x24>
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	d110      	bne.n	800da22 <ull_readrxtimestamp+0x32>
 800da00:	9100      	str	r1, [sp, #0]
 800da02:	2305      	movs	r3, #5
 800da04:	2204      	movs	r2, #4
 800da06:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800da0a:	f7ff fba0 	bl	800d14e <dwt_readfromdevice>
 800da0e:	b003      	add	sp, #12
 800da10:	f85d fb04 	ldr.w	pc, [sp], #4
 800da14:	9100      	str	r1, [sp, #0]
 800da16:	2305      	movs	r3, #5
 800da18:	2200      	movs	r2, #0
 800da1a:	4905      	ldr	r1, [pc, #20]	; (800da30 <ull_readrxtimestamp+0x40>)
 800da1c:	f7ff fb97 	bl	800d14e <dwt_readfromdevice>
 800da20:	e7f5      	b.n	800da0e <ull_readrxtimestamp+0x1e>
 800da22:	9100      	str	r1, [sp, #0]
 800da24:	2305      	movs	r3, #5
 800da26:	2200      	movs	r2, #0
 800da28:	2160      	movs	r1, #96	; 0x60
 800da2a:	f7ff fb90 	bl	800d14e <dwt_readfromdevice>
 800da2e:	e7ee      	b.n	800da0e <ull_readrxtimestamp+0x1e>
 800da30:	00180004 	.word	0x00180004

0800da34 <dwt_writetodevice>:
 800da34:	b510      	push	{r4, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800da3c:	9401      	str	r4, [sp, #4]
 800da3e:	9c04      	ldr	r4, [sp, #16]
 800da40:	9400      	str	r4, [sp, #0]
 800da42:	f7ff fb06 	bl	800d052 <dwt_xfer3xxx>
 800da46:	b002      	add	sp, #8
 800da48:	bd10      	pop	{r4, pc}

0800da4a <dwt_write16bitoffsetreg>:
 800da4a:	b500      	push	{lr}
 800da4c:	b085      	sub	sp, #20
 800da4e:	f88d 300c 	strb.w	r3, [sp, #12]
 800da52:	0a1b      	lsrs	r3, r3, #8
 800da54:	f88d 300d 	strb.w	r3, [sp, #13]
 800da58:	ab03      	add	r3, sp, #12
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	2302      	movs	r3, #2
 800da5e:	b292      	uxth	r2, r2
 800da60:	f7ff ffe8 	bl	800da34 <dwt_writetodevice>
 800da64:	b005      	add	sp, #20
 800da66:	f85d fb04 	ldr.w	pc, [sp], #4

0800da6a <ull_setrxantennadelay>:
 800da6a:	b508      	push	{r3, lr}
 800da6c:	460b      	mov	r3, r1
 800da6e:	2200      	movs	r2, #0
 800da70:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800da74:	f7ff ffe9 	bl	800da4a <dwt_write16bitoffsetreg>
 800da78:	bd08      	pop	{r3, pc}

0800da7a <ull_settxantennadelay>:
 800da7a:	b508      	push	{r3, lr}
 800da7c:	460b      	mov	r3, r1
 800da7e:	2200      	movs	r2, #0
 800da80:	217c      	movs	r1, #124	; 0x7c
 800da82:	f7ff ffe2 	bl	800da4a <dwt_write16bitoffsetreg>
 800da86:	bd08      	pop	{r3, pc}

0800da88 <ull_force_clocks>:
 800da88:	b508      	push	{r3, lr}
 800da8a:	2901      	cmp	r1, #1
 800da8c:	d002      	beq.n	800da94 <ull_force_clocks+0xc>
 800da8e:	2905      	cmp	r1, #5
 800da90:	d007      	beq.n	800daa2 <ull_force_clocks+0x1a>
 800da92:	bd08      	pop	{r3, pc}
 800da94:	f641 0322 	movw	r3, #6178	; 0x1822
 800da98:	2200      	movs	r2, #0
 800da9a:	4905      	ldr	r1, [pc, #20]	; (800dab0 <ull_force_clocks+0x28>)
 800da9c:	f7ff ffd5 	bl	800da4a <dwt_write16bitoffsetreg>
 800daa0:	e7f7      	b.n	800da92 <ull_force_clocks+0xa>
 800daa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daa6:	2200      	movs	r2, #0
 800daa8:	4901      	ldr	r1, [pc, #4]	; (800dab0 <ull_force_clocks+0x28>)
 800daaa:	f7ff ffce 	bl	800da4a <dwt_write16bitoffsetreg>
 800daae:	e7f0      	b.n	800da92 <ull_force_clocks+0xa>
 800dab0:	00110004 	.word	0x00110004

0800dab4 <__dwt_otp_write_wdata_id_reg>:
 800dab4:	b538      	push	{r3, r4, r5, lr}
 800dab6:	4605      	mov	r5, r0
 800dab8:	460c      	mov	r4, r1
 800daba:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	2200      	movs	r2, #0
 800dac2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dac6:	f7ff ffc0 	bl	800da4a <dwt_write16bitoffsetreg>
 800daca:	b2a3      	uxth	r3, r4
 800dacc:	2200      	movs	r2, #0
 800dace:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dad2:	4628      	mov	r0, r5
 800dad4:	f7ff ffb9 	bl	800da4a <dwt_write16bitoffsetreg>
 800dad8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dadc <_dwt_otpread>:
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	4604      	mov	r4, r0
 800dae0:	460e      	mov	r6, r1
 800dae2:	4d0c      	ldr	r5, [pc, #48]	; (800db14 <_dwt_otpread+0x38>)
 800dae4:	2301      	movs	r3, #1
 800dae6:	2200      	movs	r2, #0
 800dae8:	4629      	mov	r1, r5
 800daea:	f7ff ffae 	bl	800da4a <dwt_write16bitoffsetreg>
 800daee:	4633      	mov	r3, r6
 800daf0:	2200      	movs	r2, #0
 800daf2:	4909      	ldr	r1, [pc, #36]	; (800db18 <_dwt_otpread+0x3c>)
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7ff ffa8 	bl	800da4a <dwt_write16bitoffsetreg>
 800dafa:	2302      	movs	r3, #2
 800dafc:	2200      	movs	r2, #0
 800dafe:	4629      	mov	r1, r5
 800db00:	4620      	mov	r0, r4
 800db02:	f7ff ffa2 	bl	800da4a <dwt_write16bitoffsetreg>
 800db06:	2200      	movs	r2, #0
 800db08:	4904      	ldr	r1, [pc, #16]	; (800db1c <_dwt_otpread+0x40>)
 800db0a:	4620      	mov	r0, r4
 800db0c:	f7ff fb29 	bl	800d162 <dwt_read32bitoffsetreg>
 800db10:	bd70      	pop	{r4, r5, r6, pc}
 800db12:	bf00      	nop
 800db14:	000b0008 	.word	0x000b0008
 800db18:	000b0004 	.word	0x000b0004
 800db1c:	000b0010 	.word	0x000b0010

0800db20 <dwt_write32bitoffsetreg>:
 800db20:	b510      	push	{r4, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	f88d 300c 	strb.w	r3, [sp, #12]
 800db28:	0a1c      	lsrs	r4, r3, #8
 800db2a:	f88d 400d 	strb.w	r4, [sp, #13]
 800db2e:	0c1c      	lsrs	r4, r3, #16
 800db30:	f88d 400e 	strb.w	r4, [sp, #14]
 800db34:	0e1b      	lsrs	r3, r3, #24
 800db36:	f88d 300f 	strb.w	r3, [sp, #15]
 800db3a:	ab03      	add	r3, sp, #12
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	2304      	movs	r3, #4
 800db40:	b292      	uxth	r2, r2
 800db42:	f7ff ff77 	bl	800da34 <dwt_writetodevice>
 800db46:	b004      	add	sp, #16
 800db48:	bd10      	pop	{r4, pc}

0800db4a <_dwt_adjust_delaytime>:
 800db4a:	b538      	push	{r3, r4, r5, lr}
 800db4c:	4604      	mov	r4, r0
 800db4e:	b989      	cbnz	r1, 800db74 <_dwt_adjust_delaytime+0x2a>
 800db50:	2200      	movs	r2, #0
 800db52:	2128      	movs	r1, #40	; 0x28
 800db54:	f7ff fb05 	bl	800d162 <dwt_read32bitoffsetreg>
 800db58:	4605      	mov	r5, r0
 800db5a:	2201      	movs	r2, #1
 800db5c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800db60:	4620      	mov	r0, r4
 800db62:	f7ff fb53 	bl	800d20c <dwt_read8bitoffsetreg>
 800db66:	1a2b      	subs	r3, r5, r0
 800db68:	2200      	movs	r2, #0
 800db6a:	2128      	movs	r1, #40	; 0x28
 800db6c:	4620      	mov	r0, r4
 800db6e:	f7ff ffd7 	bl	800db20 <dwt_write32bitoffsetreg>
 800db72:	bd38      	pop	{r3, r4, r5, pc}
 800db74:	2200      	movs	r2, #0
 800db76:	2128      	movs	r1, #40	; 0x28
 800db78:	f7ff faf3 	bl	800d162 <dwt_read32bitoffsetreg>
 800db7c:	4605      	mov	r5, r0
 800db7e:	2201      	movs	r2, #1
 800db80:	217c      	movs	r1, #124	; 0x7c
 800db82:	4620      	mov	r0, r4
 800db84:	f7ff fb42 	bl	800d20c <dwt_read8bitoffsetreg>
 800db88:	1a2b      	subs	r3, r5, r0
 800db8a:	2200      	movs	r2, #0
 800db8c:	2128      	movs	r1, #40	; 0x28
 800db8e:	4620      	mov	r0, r4
 800db90:	f7ff ffc6 	bl	800db20 <dwt_write32bitoffsetreg>
 800db94:	e7ed      	b.n	800db72 <_dwt_adjust_delaytime+0x28>

0800db96 <ull_setrxaftertxdelay>:
 800db96:	b538      	push	{r3, r4, r5, lr}
 800db98:	4605      	mov	r5, r0
 800db9a:	460c      	mov	r4, r1
 800db9c:	2200      	movs	r2, #0
 800db9e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800dba2:	f7ff fade 	bl	800d162 <dwt_read32bitoffsetreg>
 800dba6:	0d00      	lsrs	r0, r0, #20
 800dba8:	0500      	lsls	r0, r0, #20
 800dbaa:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dbae:	4303      	orrs	r3, r0
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	f7ff ffb2 	bl	800db20 <dwt_write32bitoffsetreg>
 800dbbc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dbc0 <ull_setfinegraintxseq>:
 800dbc0:	b508      	push	{r3, lr}
 800dbc2:	b929      	cbnz	r1, 800dbd0 <ull_setfinegraintxseq+0x10>
 800dbc4:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <ull_setfinegraintxseq+0x1c>)
 800dbc6:	2202      	movs	r2, #2
 800dbc8:	4905      	ldr	r1, [pc, #20]	; (800dbe0 <ull_setfinegraintxseq+0x20>)
 800dbca:	f7ff ffa9 	bl	800db20 <dwt_write32bitoffsetreg>
 800dbce:	bd08      	pop	{r3, pc}
 800dbd0:	4b04      	ldr	r3, [pc, #16]	; (800dbe4 <ull_setfinegraintxseq+0x24>)
 800dbd2:	2202      	movs	r2, #2
 800dbd4:	4902      	ldr	r1, [pc, #8]	; (800dbe0 <ull_setfinegraintxseq+0x20>)
 800dbd6:	f7ff ffa3 	bl	800db20 <dwt_write32bitoffsetreg>
 800dbda:	e7f8      	b.n	800dbce <ull_setfinegraintxseq+0xe>
 800dbdc:	00d20874 	.word	0x00d20874
 800dbe0:	00110010 	.word	0x00110010
 800dbe4:	04d28874 	.word	0x04d28874

0800dbe8 <ull_setlnapamode>:
 800dbe8:	b538      	push	{r3, r4, r5, lr}
 800dbea:	4605      	mov	r5, r0
 800dbec:	460c      	mov	r4, r1
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800dbf4:	f7ff fab5 	bl	800d162 <dwt_read32bitoffsetreg>
 800dbf8:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800dbfc:	f014 0f01 	tst.w	r4, #1
 800dc00:	bf18      	it	ne
 800dc02:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800dc06:	f014 0f02 	tst.w	r4, #2
 800dc0a:	bf18      	it	ne
 800dc0c:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800dc10:	f014 0f04 	tst.w	r4, #4
 800dc14:	bf18      	it	ne
 800dc16:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800dc20:	4628      	mov	r0, r5
 800dc22:	f7ff ff7d 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc26:	bd38      	pop	{r3, r4, r5, pc}

0800dc28 <ull_configurestskey>:
 800dc28:	b538      	push	{r3, r4, r5, lr}
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	680b      	ldr	r3, [r1, #0]
 800dc30:	2200      	movs	r2, #0
 800dc32:	490b      	ldr	r1, [pc, #44]	; (800dc60 <ull_configurestskey+0x38>)
 800dc34:	f7ff ff74 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	4909      	ldr	r1, [pc, #36]	; (800dc64 <ull_configurestskey+0x3c>)
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f7ff ff6e 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc44:	68a3      	ldr	r3, [r4, #8]
 800dc46:	2200      	movs	r2, #0
 800dc48:	4907      	ldr	r1, [pc, #28]	; (800dc68 <ull_configurestskey+0x40>)
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f7ff ff68 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc50:	68e3      	ldr	r3, [r4, #12]
 800dc52:	2200      	movs	r2, #0
 800dc54:	4905      	ldr	r1, [pc, #20]	; (800dc6c <ull_configurestskey+0x44>)
 800dc56:	4628      	mov	r0, r5
 800dc58:	f7ff ff62 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc5c:	bd38      	pop	{r3, r4, r5, pc}
 800dc5e:	bf00      	nop
 800dc60:	0002000c 	.word	0x0002000c
 800dc64:	00020010 	.word	0x00020010
 800dc68:	00020014 	.word	0x00020014
 800dc6c:	00020018 	.word	0x00020018

0800dc70 <ull_configurestsiv>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4605      	mov	r5, r0
 800dc74:	460c      	mov	r4, r1
 800dc76:	680b      	ldr	r3, [r1, #0]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	490b      	ldr	r1, [pc, #44]	; (800dca8 <ull_configurestsiv+0x38>)
 800dc7c:	f7ff ff50 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc80:	6863      	ldr	r3, [r4, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	4909      	ldr	r1, [pc, #36]	; (800dcac <ull_configurestsiv+0x3c>)
 800dc86:	4628      	mov	r0, r5
 800dc88:	f7ff ff4a 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc8c:	68a3      	ldr	r3, [r4, #8]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4907      	ldr	r1, [pc, #28]	; (800dcb0 <ull_configurestsiv+0x40>)
 800dc92:	4628      	mov	r0, r5
 800dc94:	f7ff ff44 	bl	800db20 <dwt_write32bitoffsetreg>
 800dc98:	68e3      	ldr	r3, [r4, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	4905      	ldr	r1, [pc, #20]	; (800dcb4 <ull_configurestsiv+0x44>)
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f7ff ff3e 	bl	800db20 <dwt_write32bitoffsetreg>
 800dca4:	bd38      	pop	{r3, r4, r5, pc}
 800dca6:	bf00      	nop
 800dca8:	0002001c 	.word	0x0002001c
 800dcac:	00020020 	.word	0x00020020
 800dcb0:	00020024 	.word	0x00020024
 800dcb4:	00020028 	.word	0x00020028

0800dcb8 <ull_configmrxlut>:
 800dcb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	4d35      	ldr	r5, [pc, #212]	; (800dd94 <ull_configmrxlut+0xdc>)
 800dcc0:	4b35      	ldr	r3, [pc, #212]	; (800dd98 <ull_configmrxlut+0xe0>)
 800dcc2:	2905      	cmp	r1, #5
 800dcc4:	bf18      	it	ne
 800dcc6:	461d      	movne	r5, r3
 800dcc8:	4e34      	ldr	r6, [pc, #208]	; (800dd9c <ull_configmrxlut+0xe4>)
 800dcca:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800dcce:	2905      	cmp	r1, #5
 800dcd0:	bf18      	it	ne
 800dcd2:	461e      	movne	r6, r3
 800dcd4:	4f32      	ldr	r7, [pc, #200]	; (800dda0 <ull_configmrxlut+0xe8>)
 800dcd6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dcda:	2905      	cmp	r1, #5
 800dcdc:	bf18      	it	ne
 800dcde:	461f      	movne	r7, r3
 800dce0:	4a30      	ldr	r2, [pc, #192]	; (800dda4 <ull_configmrxlut+0xec>)
 800dce2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dce6:	2905      	cmp	r1, #5
 800dce8:	bf0c      	ite	eq
 800dcea:	4690      	moveq	r8, r2
 800dcec:	4698      	movne	r8, r3
 800dcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf2:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800dcf6:	2905      	cmp	r1, #5
 800dcf8:	bf0c      	ite	eq
 800dcfa:	4691      	moveq	r9, r2
 800dcfc:	4699      	movne	r9, r3
 800dcfe:	4a2a      	ldr	r2, [pc, #168]	; (800dda8 <ull_configmrxlut+0xf0>)
 800dd00:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800dd04:	2905      	cmp	r1, #5
 800dd06:	bf0c      	ite	eq
 800dd08:	4692      	moveq	sl, r2
 800dd0a:	469a      	movne	sl, r3
 800dd0c:	4b27      	ldr	r3, [pc, #156]	; (800ddac <ull_configmrxlut+0xf4>)
 800dd0e:	4a28      	ldr	r2, [pc, #160]	; (800ddb0 <ull_configmrxlut+0xf8>)
 800dd10:	2905      	cmp	r1, #5
 800dd12:	bf0c      	ite	eq
 800dd14:	469b      	moveq	fp, r3
 800dd16:	4693      	movne	fp, r2
 800dd18:	f44f 7310 	mov.w	r3, #576	; 0x240
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	4925      	ldr	r1, [pc, #148]	; (800ddb4 <ull_configmrxlut+0xfc>)
 800dd20:	f7ff fefe 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd24:	4b24      	ldr	r3, [pc, #144]	; (800ddb8 <ull_configmrxlut+0x100>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	4924      	ldr	r1, [pc, #144]	; (800ddbc <ull_configmrxlut+0x104>)
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f7ff fef8 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd30:	4b23      	ldr	r3, [pc, #140]	; (800ddc0 <ull_configmrxlut+0x108>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	4923      	ldr	r1, [pc, #140]	; (800ddc4 <ull_configmrxlut+0x10c>)
 800dd36:	4620      	mov	r0, r4
 800dd38:	f7ff fef2 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd3c:	465b      	mov	r3, fp
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4921      	ldr	r1, [pc, #132]	; (800ddc8 <ull_configmrxlut+0x110>)
 800dd42:	4620      	mov	r0, r4
 800dd44:	f7ff feec 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd48:	4653      	mov	r3, sl
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	491f      	ldr	r1, [pc, #124]	; (800ddcc <ull_configmrxlut+0x114>)
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f7ff fee6 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd54:	464b      	mov	r3, r9
 800dd56:	2200      	movs	r2, #0
 800dd58:	491d      	ldr	r1, [pc, #116]	; (800ddd0 <ull_configmrxlut+0x118>)
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f7ff fee0 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd60:	4643      	mov	r3, r8
 800dd62:	2200      	movs	r2, #0
 800dd64:	491b      	ldr	r1, [pc, #108]	; (800ddd4 <ull_configmrxlut+0x11c>)
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7ff feda 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd6c:	463b      	mov	r3, r7
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4919      	ldr	r1, [pc, #100]	; (800ddd8 <ull_configmrxlut+0x120>)
 800dd72:	4620      	mov	r0, r4
 800dd74:	f7ff fed4 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd78:	4633      	mov	r3, r6
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	4917      	ldr	r1, [pc, #92]	; (800dddc <ull_configmrxlut+0x124>)
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f7ff fece 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd84:	462b      	mov	r3, r5
 800dd86:	2200      	movs	r2, #0
 800dd88:	4915      	ldr	r1, [pc, #84]	; (800dde0 <ull_configmrxlut+0x128>)
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7ff fec8 	bl	800db20 <dwt_write32bitoffsetreg>
 800dd90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd94:	00039ff6 	.word	0x00039ff6
 800dd98:	00055ffe 	.word	0x00055ffe
 800dd9c:	00039dfe 	.word	0x00039dfe
 800dda0:	00039c7e 	.word	0x00039c7e
 800dda4:	00038efe 	.word	0x00038efe
 800dda8:	0003876e 	.word	0x0003876e
 800ddac:	0003803e 	.word	0x0003803e
 800ddb0:	0005407e 	.word	0x0005407e
 800ddb4:	0003001c 	.word	0x0003001c
 800ddb8:	1a491248 	.word	0x1a491248
 800ddbc:	00030020 	.word	0x00030020
 800ddc0:	2db248db 	.word	0x2db248db
 800ddc4:	00030024 	.word	0x00030024
 800ddc8:	0003002c 	.word	0x0003002c
 800ddcc:	00030030 	.word	0x00030030
 800ddd0:	00030034 	.word	0x00030034
 800ddd4:	00030038 	.word	0x00030038
 800ddd8:	0003003c 	.word	0x0003003c
 800dddc:	00030040 	.word	0x00030040
 800dde0:	00030044 	.word	0x00030044

0800dde4 <ull_disable_rftx_blocks>:
 800dde4:	b508      	push	{r3, lr}
 800dde6:	2300      	movs	r3, #0
 800dde8:	461a      	mov	r2, r3
 800ddea:	4902      	ldr	r1, [pc, #8]	; (800ddf4 <ull_disable_rftx_blocks+0x10>)
 800ddec:	f7ff fe98 	bl	800db20 <dwt_write32bitoffsetreg>
 800ddf0:	bd08      	pop	{r3, pc}
 800ddf2:	bf00      	nop
 800ddf4:	00070004 	.word	0x00070004

0800ddf8 <ull_disable_rf_tx>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	460d      	mov	r5, r1
 800ddfe:	2300      	movs	r3, #0
 800de00:	461a      	mov	r2, r3
 800de02:	490a      	ldr	r1, [pc, #40]	; (800de2c <ull_disable_rf_tx+0x34>)
 800de04:	f7ff fe8c 	bl	800db20 <dwt_write32bitoffsetreg>
 800de08:	2300      	movs	r3, #0
 800de0a:	461a      	mov	r2, r3
 800de0c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800de10:	4620      	mov	r0, r4
 800de12:	f7ff fe85 	bl	800db20 <dwt_write32bitoffsetreg>
 800de16:	b905      	cbnz	r5, 800de1a <ull_disable_rf_tx+0x22>
 800de18:	bd38      	pop	{r3, r4, r5, pc}
 800de1a:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800de1e:	2200      	movs	r2, #0
 800de20:	4903      	ldr	r1, [pc, #12]	; (800de30 <ull_disable_rf_tx+0x38>)
 800de22:	4620      	mov	r0, r4
 800de24:	f7ff fe7c 	bl	800db20 <dwt_write32bitoffsetreg>
 800de28:	e7f6      	b.n	800de18 <ull_disable_rf_tx+0x20>
 800de2a:	bf00      	nop
 800de2c:	00070048 	.word	0x00070048
 800de30:	00070014 	.word	0x00070014

0800de34 <ull_repeated_cw>:
 800de34:	b570      	push	{r4, r5, r6, lr}
 800de36:	4606      	mov	r6, r0
 800de38:	460c      	mov	r4, r1
 800de3a:	4615      	mov	r5, r2
 800de3c:	2100      	movs	r1, #0
 800de3e:	f7ff febf 	bl	800dbc0 <ull_setfinegraintxseq>
 800de42:	2d0f      	cmp	r5, #15
 800de44:	bfa8      	it	ge
 800de46:	250f      	movge	r5, #15
 800de48:	1e63      	subs	r3, r4, #1
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	bf28      	it	cs
 800de4e:	2404      	movcs	r4, #4
 800de50:	2310      	movs	r3, #16
 800de52:	4123      	asrs	r3, r4
 800de54:	2200      	movs	r2, #0
 800de56:	4907      	ldr	r1, [pc, #28]	; (800de74 <ull_repeated_cw+0x40>)
 800de58:	4630      	mov	r0, r6
 800de5a:	f7ff fe61 	bl	800db20 <dwt_write32bitoffsetreg>
 800de5e:	1e63      	subs	r3, r4, #1
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	fa05 f303 	lsl.w	r3, r5, r3
 800de66:	2200      	movs	r2, #0
 800de68:	4903      	ldr	r1, [pc, #12]	; (800de78 <ull_repeated_cw+0x44>)
 800de6a:	4630      	mov	r0, r6
 800de6c:	f7ff fe58 	bl	800db20 <dwt_write32bitoffsetreg>
 800de70:	bd70      	pop	{r4, r5, r6, pc}
 800de72:	bf00      	nop
 800de74:	00070028 	.word	0x00070028
 800de78:	00080018 	.word	0x00080018

0800de7c <ull_readrxdata>:
 800de7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de7e:	b083      	sub	sp, #12
 800de80:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800de82:	7ba4      	ldrb	r4, [r4, #14]
 800de84:	2c03      	cmp	r4, #3
 800de86:	bf0c      	ite	eq
 800de88:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800de8c:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800de90:	189c      	adds	r4, r3, r2
 800de92:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800de96:	da19      	bge.n	800decc <ull_readrxdata+0x50>
 800de98:	461d      	mov	r5, r3
 800de9a:	4616      	mov	r6, r2
 800de9c:	460f      	mov	r7, r1
 800de9e:	4604      	mov	r4, r0
 800dea0:	2b7f      	cmp	r3, #127	; 0x7f
 800dea2:	d915      	bls.n	800ded0 <ull_readrxdata+0x54>
 800dea4:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800dea8:	2200      	movs	r2, #0
 800deaa:	490d      	ldr	r1, [pc, #52]	; (800dee0 <ull_readrxdata+0x64>)
 800deac:	f7ff fe38 	bl	800db20 <dwt_write32bitoffsetreg>
 800deb0:	462b      	mov	r3, r5
 800deb2:	2200      	movs	r2, #0
 800deb4:	490b      	ldr	r1, [pc, #44]	; (800dee4 <ull_readrxdata+0x68>)
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7ff fe32 	bl	800db20 <dwt_write32bitoffsetreg>
 800debc:	9700      	str	r7, [sp, #0]
 800debe:	4633      	mov	r3, r6
 800dec0:	2200      	movs	r2, #0
 800dec2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800dec6:	4620      	mov	r0, r4
 800dec8:	f7ff f941 	bl	800d14e <dwt_readfromdevice>
 800decc:	b003      	add	sp, #12
 800dece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ded0:	9100      	str	r1, [sp, #0]
 800ded2:	4613      	mov	r3, r2
 800ded4:	462a      	mov	r2, r5
 800ded6:	4661      	mov	r1, ip
 800ded8:	f7ff f939 	bl	800d14e <dwt_readfromdevice>
 800dedc:	e7f6      	b.n	800decc <ull_readrxdata+0x50>
 800dede:	bf00      	nop
 800dee0:	001f0004 	.word	0x001f0004
 800dee4:	001f0008 	.word	0x001f0008

0800dee8 <dwt_write8bitoffsetreg>:
 800dee8:	b510      	push	{r4, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	ac04      	add	r4, sp, #16
 800deee:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800def2:	9400      	str	r4, [sp, #0]
 800def4:	2301      	movs	r3, #1
 800def6:	b292      	uxth	r2, r2
 800def8:	f7ff fd9c 	bl	800da34 <dwt_writetodevice>
 800defc:	b004      	add	sp, #16
 800defe:	bd10      	pop	{r4, pc}

0800df00 <ull_getframelength>:
 800df00:	b510      	push	{r4, lr}
 800df02:	4604      	mov	r4, r0
 800df04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800df06:	7b9b      	ldrb	r3, [r3, #14]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d013      	beq.n	800df34 <ull_getframelength+0x34>
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d11d      	bne.n	800df4c <ull_getframelength+0x4c>
 800df10:	23f0      	movs	r3, #240	; 0xf0
 800df12:	2200      	movs	r2, #0
 800df14:	4912      	ldr	r1, [pc, #72]	; (800df60 <ull_getframelength+0x60>)
 800df16:	f7ff ffe7 	bl	800dee8 <dwt_write8bitoffsetreg>
 800df1a:	2200      	movs	r2, #0
 800df1c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff f934 	bl	800d18e <dwt_read16bitoffsetreg>
 800df26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df28:	7ada      	ldrb	r2, [r3, #11]
 800df2a:	b1a2      	cbz	r2, 800df56 <ull_getframelength+0x56>
 800df2c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800df30:	83d8      	strh	r0, [r3, #30]
 800df32:	bd10      	pop	{r4, pc}
 800df34:	230f      	movs	r3, #15
 800df36:	2200      	movs	r2, #0
 800df38:	4909      	ldr	r1, [pc, #36]	; (800df60 <ull_getframelength+0x60>)
 800df3a:	f7ff ffd5 	bl	800dee8 <dwt_write8bitoffsetreg>
 800df3e:	2200      	movs	r2, #0
 800df40:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800df44:	4620      	mov	r0, r4
 800df46:	f7ff f922 	bl	800d18e <dwt_read16bitoffsetreg>
 800df4a:	e7ec      	b.n	800df26 <ull_getframelength+0x26>
 800df4c:	2200      	movs	r2, #0
 800df4e:	214c      	movs	r1, #76	; 0x4c
 800df50:	f7ff f91d 	bl	800d18e <dwt_read16bitoffsetreg>
 800df54:	e7e7      	b.n	800df26 <ull_getframelength+0x26>
 800df56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800df5a:	83d8      	strh	r0, [r3, #30]
 800df5c:	e7e9      	b.n	800df32 <ull_getframelength+0x32>
 800df5e:	bf00      	nop
 800df60:	00010018 	.word	0x00010018

0800df64 <_dwt_clear_db_events>:
 800df64:	b510      	push	{r4, lr}
 800df66:	4604      	mov	r4, r0
 800df68:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800df6a:	7b9b      	ldrb	r3, [r3, #14]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d004      	beq.n	800df7a <_dwt_clear_db_events+0x16>
 800df70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df72:	7b9b      	ldrb	r3, [r3, #14]
 800df74:	2b03      	cmp	r3, #3
 800df76:	d006      	beq.n	800df86 <_dwt_clear_db_events+0x22>
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	230f      	movs	r3, #15
 800df7c:	2200      	movs	r2, #0
 800df7e:	4905      	ldr	r1, [pc, #20]	; (800df94 <_dwt_clear_db_events+0x30>)
 800df80:	f7ff ffb2 	bl	800dee8 <dwt_write8bitoffsetreg>
 800df84:	e7f4      	b.n	800df70 <_dwt_clear_db_events+0xc>
 800df86:	23f0      	movs	r3, #240	; 0xf0
 800df88:	2200      	movs	r2, #0
 800df8a:	4902      	ldr	r1, [pc, #8]	; (800df94 <_dwt_clear_db_events+0x30>)
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7ff ffab 	bl	800dee8 <dwt_write8bitoffsetreg>
 800df92:	e7f1      	b.n	800df78 <_dwt_clear_db_events+0x14>
 800df94:	00010018 	.word	0x00010018

0800df98 <ull_clearaonconfig>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	4604      	mov	r4, r0
 800df9c:	2300      	movs	r3, #0
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800dfa4:	f7ff fd51 	bl	800da4a <dwt_write16bitoffsetreg>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	461a      	mov	r2, r3
 800dfac:	4908      	ldr	r1, [pc, #32]	; (800dfd0 <ull_clearaonconfig+0x38>)
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7ff ff9a 	bl	800dee8 <dwt_write8bitoffsetreg>
 800dfb4:	4d07      	ldr	r5, [pc, #28]	; (800dfd4 <ull_clearaonconfig+0x3c>)
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	461a      	mov	r2, r3
 800dfba:	4629      	mov	r1, r5
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7ff ff93 	bl	800dee8 <dwt_write8bitoffsetreg>
 800dfc2:	2302      	movs	r3, #2
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f7ff ff8d 	bl	800dee8 <dwt_write8bitoffsetreg>
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	000a0014 	.word	0x000a0014
 800dfd4:	000a0004 	.word	0x000a0004

0800dfd8 <ull_configeventcounters>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4605      	mov	r5, r0
 800dfdc:	460c      	mov	r4, r1
 800dfde:	2302      	movs	r3, #2
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800dfe6:	f7ff ff7f 	bl	800dee8 <dwt_write8bitoffsetreg>
 800dfea:	b904      	cbnz	r4, 800dfee <ull_configeventcounters+0x16>
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	2301      	movs	r3, #1
 800dff0:	2200      	movs	r2, #0
 800dff2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800dff6:	4628      	mov	r0, r5
 800dff8:	f7ff ff76 	bl	800dee8 <dwt_write8bitoffsetreg>
 800dffc:	e7f6      	b.n	800dfec <ull_configeventcounters+0x14>
	...

0800e000 <ull_aon_read>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4604      	mov	r4, r0
 800e004:	460b      	mov	r3, r1
 800e006:	2200      	movs	r2, #0
 800e008:	490a      	ldr	r1, [pc, #40]	; (800e034 <ull_aon_read+0x34>)
 800e00a:	f7ff fd1e 	bl	800da4a <dwt_write16bitoffsetreg>
 800e00e:	4d0a      	ldr	r5, [pc, #40]	; (800e038 <ull_aon_read+0x38>)
 800e010:	2388      	movs	r3, #136	; 0x88
 800e012:	2200      	movs	r2, #0
 800e014:	4629      	mov	r1, r5
 800e016:	4620      	mov	r0, r4
 800e018:	f7ff ff66 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e01c:	2300      	movs	r3, #0
 800e01e:	461a      	mov	r2, r3
 800e020:	4629      	mov	r1, r5
 800e022:	4620      	mov	r0, r4
 800e024:	f7ff ff60 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e028:	2200      	movs	r2, #0
 800e02a:	4904      	ldr	r1, [pc, #16]	; (800e03c <ull_aon_read+0x3c>)
 800e02c:	4620      	mov	r0, r4
 800e02e:	f7ff f8ed 	bl	800d20c <dwt_read8bitoffsetreg>
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	000a000c 	.word	0x000a000c
 800e038:	000a0004 	.word	0x000a0004
 800e03c:	000a0008 	.word	0x000a0008

0800e040 <ull_aon_write>:
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	4604      	mov	r4, r0
 800e044:	460b      	mov	r3, r1
 800e046:	4615      	mov	r5, r2
 800e048:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e04c:	bf34      	ite	cc
 800e04e:	2600      	movcc	r6, #0
 800e050:	2620      	movcs	r6, #32
 800e052:	2200      	movs	r2, #0
 800e054:	490b      	ldr	r1, [pc, #44]	; (800e084 <ull_aon_write+0x44>)
 800e056:	f7ff fcf8 	bl	800da4a <dwt_write16bitoffsetreg>
 800e05a:	462b      	mov	r3, r5
 800e05c:	2200      	movs	r2, #0
 800e05e:	490a      	ldr	r1, [pc, #40]	; (800e088 <ull_aon_write+0x48>)
 800e060:	4620      	mov	r0, r4
 800e062:	f7ff ff41 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e066:	4d09      	ldr	r5, [pc, #36]	; (800e08c <ull_aon_write+0x4c>)
 800e068:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800e06c:	2200      	movs	r2, #0
 800e06e:	4629      	mov	r1, r5
 800e070:	4620      	mov	r0, r4
 800e072:	f7ff ff39 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e076:	2300      	movs	r3, #0
 800e078:	461a      	mov	r2, r3
 800e07a:	4629      	mov	r1, r5
 800e07c:	4620      	mov	r0, r4
 800e07e:	f7ff ff33 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e082:	bd70      	pop	{r4, r5, r6, pc}
 800e084:	000a000c 	.word	0x000a000c
 800e088:	000a0010 	.word	0x000a0010
 800e08c:	000a0004 	.word	0x000a0004

0800e090 <ull_configuresleep>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	4604      	mov	r4, r0
 800e094:	460d      	mov	r5, r1
 800e096:	4616      	mov	r6, r2
 800e098:	2200      	movs	r2, #0
 800e09a:	f240 110b 	movw	r1, #267	; 0x10b
 800e09e:	f7ff ffcf 	bl	800e040 <ull_aon_write>
 800e0a2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f7ff ffaa 	bl	800e000 <ull_aon_read>
 800e0ac:	f000 021f 	and.w	r2, r0, #31
 800e0b0:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f7ff ffc3 	bl	800e040 <ull_aon_write>
 800e0ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e0bc:	8a1a      	ldrh	r2, [r3, #16]
 800e0be:	4315      	orrs	r5, r2
 800e0c0:	821d      	strh	r5, [r3, #16]
 800e0c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e0c4:	8a13      	ldrh	r3, [r2, #16]
 800e0c6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800e0ca:	bf1c      	itt	ne
 800e0cc:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800e0d0:	8213      	strhne	r3, [r2, #16]
 800e0d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e0d4:	8a1b      	ldrh	r3, [r3, #16]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f7ff fcb4 	bl	800da4a <dwt_write16bitoffsetreg>
 800e0e2:	4633      	mov	r3, r6
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	4902      	ldr	r1, [pc, #8]	; (800e0f0 <ull_configuresleep+0x60>)
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f7ff fefd 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	000a0014 	.word	0x000a0014

0800e0f4 <ull_setplenfine>:
 800e0f4:	b508      	push	{r3, lr}
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	2124      	movs	r1, #36	; 0x24
 800e0fc:	f7ff fef4 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e100:	bd08      	pop	{r3, pc}
	...

0800e104 <ull_update_nonce_GCM>:
 800e104:	b500      	push	{lr}
 800e106:	b083      	sub	sp, #12
 800e108:	9100      	str	r1, [sp, #0]
 800e10a:	230c      	movs	r3, #12
 800e10c:	2200      	movs	r2, #0
 800e10e:	4903      	ldr	r1, [pc, #12]	; (800e11c <ull_update_nonce_GCM+0x18>)
 800e110:	f7ff fc90 	bl	800da34 <dwt_writetodevice>
 800e114:	b003      	add	sp, #12
 800e116:	f85d fb04 	ldr.w	pc, [sp], #4
 800e11a:	bf00      	nop
 800e11c:	00010034 	.word	0x00010034

0800e120 <ull_update_nonce_CCM>:
 800e120:	b500      	push	{lr}
 800e122:	b087      	sub	sp, #28
 800e124:	4613      	mov	r3, r2
 800e126:	7a8a      	ldrb	r2, [r1, #10]
 800e128:	f88d 2008 	strb.w	r2, [sp, #8]
 800e12c:	7a4a      	ldrb	r2, [r1, #9]
 800e12e:	f88d 2009 	strb.w	r2, [sp, #9]
 800e132:	7a0a      	ldrb	r2, [r1, #8]
 800e134:	f88d 200a 	strb.w	r2, [sp, #10]
 800e138:	79ca      	ldrb	r2, [r1, #7]
 800e13a:	f88d 200b 	strb.w	r2, [sp, #11]
 800e13e:	798a      	ldrb	r2, [r1, #6]
 800e140:	f88d 200c 	strb.w	r2, [sp, #12]
 800e144:	794a      	ldrb	r2, [r1, #5]
 800e146:	f88d 200d 	strb.w	r2, [sp, #13]
 800e14a:	790a      	ldrb	r2, [r1, #4]
 800e14c:	f88d 200e 	strb.w	r2, [sp, #14]
 800e150:	78ca      	ldrb	r2, [r1, #3]
 800e152:	f88d 200f 	strb.w	r2, [sp, #15]
 800e156:	788a      	ldrb	r2, [r1, #2]
 800e158:	f88d 2010 	strb.w	r2, [sp, #16]
 800e15c:	784a      	ldrb	r2, [r1, #1]
 800e15e:	f88d 2011 	strb.w	r2, [sp, #17]
 800e162:	780a      	ldrb	r2, [r1, #0]
 800e164:	f88d 2012 	strb.w	r2, [sp, #18]
 800e168:	2200      	movs	r2, #0
 800e16a:	f88d 2013 	strb.w	r2, [sp, #19]
 800e16e:	f88d 3014 	strb.w	r3, [sp, #20]
 800e172:	0a1b      	lsrs	r3, r3, #8
 800e174:	f88d 3015 	strb.w	r3, [sp, #21]
 800e178:	7b0b      	ldrb	r3, [r1, #12]
 800e17a:	f88d 3016 	strb.w	r3, [sp, #22]
 800e17e:	7acb      	ldrb	r3, [r1, #11]
 800e180:	f88d 3017 	strb.w	r3, [sp, #23]
 800e184:	ab02      	add	r3, sp, #8
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	2310      	movs	r3, #16
 800e18a:	4903      	ldr	r1, [pc, #12]	; (800e198 <ull_update_nonce_CCM+0x78>)
 800e18c:	f7ff fc52 	bl	800da34 <dwt_writetodevice>
 800e190:	b007      	add	sp, #28
 800e192:	f85d fb04 	ldr.w	pc, [sp], #4
 800e196:	bf00      	nop
 800e198:	00010034 	.word	0x00010034

0800e19c <ull_writetxdata>:
 800e19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	185c      	adds	r4, r3, r1
 800e1a2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e1a6:	da24      	bge.n	800e1f2 <ull_writetxdata+0x56>
 800e1a8:	461c      	mov	r4, r3
 800e1aa:	4617      	mov	r7, r2
 800e1ac:	460e      	mov	r6, r1
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	2b7f      	cmp	r3, #127	; 0x7f
 800e1b2:	d915      	bls.n	800e1e0 <ull_writetxdata+0x44>
 800e1b4:	2314      	movs	r3, #20
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	490f      	ldr	r1, [pc, #60]	; (800e1f8 <ull_writetxdata+0x5c>)
 800e1ba:	f7ff fcb1 	bl	800db20 <dwt_write32bitoffsetreg>
 800e1be:	4623      	mov	r3, r4
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	490e      	ldr	r1, [pc, #56]	; (800e1fc <ull_writetxdata+0x60>)
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7ff fcab 	bl	800db20 <dwt_write32bitoffsetreg>
 800e1ca:	9700      	str	r7, [sp, #0]
 800e1cc:	4633      	mov	r3, r6
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	f7ff fc2d 	bl	800da34 <dwt_writetodevice>
 800e1da:	2000      	movs	r0, #0
 800e1dc:	b003      	add	sp, #12
 800e1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1e0:	9200      	str	r2, [sp, #0]
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	4622      	mov	r2, r4
 800e1e6:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800e1ea:	f7ff fc23 	bl	800da34 <dwt_writetodevice>
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	e7f4      	b.n	800e1dc <ull_writetxdata+0x40>
 800e1f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1f6:	e7f1      	b.n	800e1dc <ull_writetxdata+0x40>
 800e1f8:	001f0004 	.word	0x001f0004
 800e1fc:	001f0008 	.word	0x001f0008

0800e200 <ull_signal_rx_buff_free>:
 800e200:	b510      	push	{r4, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	4604      	mov	r4, r0
 800e206:	2302      	movs	r3, #2
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	9200      	str	r2, [sp, #0]
 800e20e:	4613      	mov	r3, r2
 800e210:	2113      	movs	r1, #19
 800e212:	f7fe ff1e 	bl	800d052 <dwt_xfer3xxx>
 800e216:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e218:	7b9a      	ldrb	r2, [r3, #14]
 800e21a:	2a03      	cmp	r2, #3
 800e21c:	bf0c      	ite	eq
 800e21e:	2201      	moveq	r2, #1
 800e220:	2203      	movne	r2, #3
 800e222:	739a      	strb	r2, [r3, #14]
 800e224:	b002      	add	sp, #8
 800e226:	bd10      	pop	{r4, pc}

0800e228 <ull_isr>:
 800e228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22c:	4604      	mov	r4, r0
 800e22e:	2200      	movs	r2, #0
 800e230:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800e234:	f7fe ffea 	bl	800d20c <dwt_read8bitoffsetreg>
 800e238:	4605      	mov	r5, r0
 800e23a:	2200      	movs	r2, #0
 800e23c:	2144      	movs	r1, #68	; 0x44
 800e23e:	4620      	mov	r0, r4
 800e240:	f7fe ff8f 	bl	800d162 <dwt_read32bitoffsetreg>
 800e244:	4606      	mov	r6, r0
 800e246:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e248:	2200      	movs	r2, #0
 800e24a:	83da      	strh	r2, [r3, #30]
 800e24c:	f883 2020 	strb.w	r2, [r3, #32]
 800e250:	619a      	str	r2, [r3, #24]
 800e252:	839a      	strh	r2, [r3, #28]
 800e254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800e258:	625a      	str	r2, [r3, #36]	; 0x24
 800e25a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e25c:	625c      	str	r4, [r3, #36]	; 0x24
 800e25e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e260:	7b9f      	ldrb	r7, [r3, #14]
 800e262:	2f00      	cmp	r7, #0
 800e264:	d17f      	bne.n	800e366 <ull_isr+0x13e>
 800e266:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e268:	619e      	str	r6, [r3, #24]
 800e26a:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800e26e:	f898 3015 	ldrb.w	r3, [r8, #21]
 800e272:	f003 0303 	and.w	r3, r3, #3
 800e276:	2b03      	cmp	r3, #3
 800e278:	f000 8090 	beq.w	800e39c <ull_isr+0x174>
 800e27c:	f015 0f80 	tst.w	r5, #128	; 0x80
 800e280:	f040 8093 	bne.w	800e3aa <ull_isr+0x182>
 800e284:	f015 0f01 	tst.w	r5, #1
 800e288:	f040 80c1 	bne.w	800e40e <ull_isr+0x1e6>
 800e28c:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e290:	d00b      	beq.n	800e2aa <ull_isr+0x82>
 800e292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e294:	b113      	cbz	r3, 800e29c <ull_isr+0x74>
 800e296:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e298:	3018      	adds	r0, #24
 800e29a:	4798      	blx	r3
 800e29c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	2144      	movs	r1, #68	; 0x44
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f7ff fbd0 	bl	800da4a <dwt_write16bitoffsetreg>
 800e2aa:	f015 0f08 	tst.w	r5, #8
 800e2ae:	d107      	bne.n	800e2c0 <ull_isr+0x98>
 800e2b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e2b2:	7b9b      	ldrb	r3, [r3, #14]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 80ea 	beq.w	800e48e <ull_isr+0x266>
 800e2ba:	2f00      	cmp	r7, #0
 800e2bc:	f000 80e7 	beq.w	800e48e <ull_isr+0x266>
 800e2c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f883 2020 	strb.w	r2, [r3, #32]
 800e2c8:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800e2cc:	f000 80ad 	beq.w	800e42a <ull_isr+0x202>
 800e2d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e2d2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e2d6:	f043 0308 	orr.w	r3, r3, #8
 800e2da:	f882 3020 	strb.w	r3, [r2, #32]
 800e2de:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800e2e2:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800e2e6:	d008      	beq.n	800e2fa <ull_isr+0xd2>
 800e2e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e2ea:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e2ee:	f043 0310 	orr.w	r3, r3, #16
 800e2f2:	f882 3020 	strb.w	r3, [r2, #32]
 800e2f6:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800e2fa:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e2fe:	d006      	beq.n	800e30e <ull_isr+0xe6>
 800e300:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e302:	7d53      	ldrb	r3, [r2, #21]
 800e304:	f003 0303 	and.w	r3, r3, #3
 800e308:	2b03      	cmp	r3, #3
 800e30a:	f000 809a 	beq.w	800e442 <ull_isr+0x21a>
 800e30e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800e312:	f040 80a2 	bne.w	800e45a <ull_isr+0x232>
 800e316:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800e31a:	2200      	movs	r2, #0
 800e31c:	2144      	movs	r1, #68	; 0x44
 800e31e:	4620      	mov	r0, r4
 800e320:	f7ff fbfe 	bl	800db20 <dwt_write32bitoffsetreg>
 800e324:	4620      	mov	r0, r4
 800e326:	f7ff fe1d 	bl	800df64 <_dwt_clear_db_events>
 800e32a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e32c:	8bc3      	ldrh	r3, [r0, #30]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f040 80a2 	bne.w	800e478 <ull_isr+0x250>
 800e334:	7d43      	ldrb	r3, [r0, #21]
 800e336:	f003 0303 	and.w	r3, r3, #3
 800e33a:	2b03      	cmp	r3, #3
 800e33c:	f000 809c 	beq.w	800e478 <ull_isr+0x250>
 800e340:	6983      	ldr	r3, [r0, #24]
 800e342:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800e346:	6183      	str	r3, [r0, #24]
 800e348:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e34a:	6993      	ldr	r3, [r2, #24]
 800e34c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e350:	6193      	str	r3, [r2, #24]
 800e352:	69e3      	ldr	r3, [r4, #28]
 800e354:	b113      	cbz	r3, 800e35c <ull_isr+0x134>
 800e356:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e358:	3018      	adds	r0, #24
 800e35a:	4798      	blx	r3
 800e35c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e35e:	2200      	movs	r2, #0
 800e360:	f883 2020 	strb.w	r2, [r3, #32]
 800e364:	e08c      	b.n	800e480 <ull_isr+0x258>
 800e366:	496d      	ldr	r1, [pc, #436]	; (800e51c <ull_isr+0x2f4>)
 800e368:	4620      	mov	r0, r4
 800e36a:	f7fe ff4f 	bl	800d20c <dwt_read8bitoffsetreg>
 800e36e:	4607      	mov	r7, r0
 800e370:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e372:	7b9b      	ldrb	r3, [r3, #14]
 800e374:	2b03      	cmp	r3, #3
 800e376:	bf08      	it	eq
 800e378:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800e37c:	f017 0f01 	tst.w	r7, #1
 800e380:	bf18      	it	ne
 800e382:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800e386:	f017 0f02 	tst.w	r7, #2
 800e38a:	bf18      	it	ne
 800e38c:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800e390:	f017 0f04 	tst.w	r7, #4
 800e394:	bf18      	it	ne
 800e396:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800e39a:	e764      	b.n	800e266 <ull_isr+0x3e>
 800e39c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e3a0:	bf1c      	itt	ne
 800e3a2:	f045 0508 	orrne.w	r5, r5, #8
 800e3a6:	b2ed      	uxtbne	r5, r5
 800e3a8:	e768      	b.n	800e27c <ull_isr+0x54>
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2148      	movs	r1, #72	; 0x48
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f7fe feed 	bl	800d18e <dwt_read16bitoffsetreg>
 800e3b4:	f8a8 001c 	strh.w	r0, [r8, #28]
 800e3b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e3ba:	7d1a      	ldrb	r2, [r3, #20]
 800e3bc:	b11a      	cbz	r2, 800e3c6 <ull_isr+0x19e>
 800e3be:	699a      	ldr	r2, [r3, #24]
 800e3c0:	f012 0f04 	tst.w	r2, #4
 800e3c4:	d103      	bne.n	800e3ce <ull_isr+0x1a6>
 800e3c6:	8b9b      	ldrh	r3, [r3, #28]
 800e3c8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800e3cc:	b18b      	cbz	r3, 800e3f2 <ull_isr+0x1ca>
 800e3ce:	2304      	movs	r3, #4
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	2144      	movs	r1, #68	; 0x44
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f7ff fd87 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e3da:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2148      	movs	r1, #72	; 0x48
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f7ff fb31 	bl	800da4a <dwt_write16bitoffsetreg>
 800e3e8:	6a23      	ldr	r3, [r4, #32]
 800e3ea:	b113      	cbz	r3, 800e3f2 <ull_isr+0x1ca>
 800e3ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e3ee:	3018      	adds	r0, #24
 800e3f0:	4798      	blx	r3
 800e3f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e3f4:	8b9b      	ldrh	r3, [r3, #28]
 800e3f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e3fa:	f43f af43 	beq.w	800e284 <ull_isr+0x5c>
 800e3fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e402:	2200      	movs	r2, #0
 800e404:	2148      	movs	r1, #72	; 0x48
 800e406:	4620      	mov	r0, r4
 800e408:	f7ff fb1f 	bl	800da4a <dwt_write16bitoffsetreg>
 800e40c:	e73a      	b.n	800e284 <ull_isr+0x5c>
 800e40e:	23f8      	movs	r3, #248	; 0xf8
 800e410:	2200      	movs	r2, #0
 800e412:	2144      	movs	r1, #68	; 0x44
 800e414:	4620      	mov	r0, r4
 800e416:	f7ff fd67 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e41a:	6923      	ldr	r3, [r4, #16]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f43f af35 	beq.w	800e28c <ull_isr+0x64>
 800e422:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e424:	3018      	adds	r0, #24
 800e426:	4798      	blx	r3
 800e428:	e730      	b.n	800e28c <ull_isr+0x64>
 800e42a:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800e42e:	bf1f      	itttt	ne
 800e430:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800e432:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800e436:	f043 0304 	orrne.w	r3, r3, #4
 800e43a:	f882 3020 	strbne.w	r3, [r2, #32]
 800e43e:	2700      	movs	r7, #0
 800e440:	e74f      	b.n	800e2e2 <ull_isr+0xba>
 800e442:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e446:	f043 0302 	orr.w	r3, r3, #2
 800e44a:	f882 3020 	strb.w	r3, [r2, #32]
 800e44e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e450:	2200      	movs	r2, #0
 800e452:	83da      	strh	r2, [r3, #30]
 800e454:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800e458:	e75d      	b.n	800e316 <ull_isr+0xee>
 800e45a:	4620      	mov	r0, r4
 800e45c:	f7ff fd50 	bl	800df00 <ull_getframelength>
 800e460:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800e464:	f43f af57 	beq.w	800e316 <ull_isr+0xee>
 800e468:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e46a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e46e:	f043 0301 	orr.w	r3, r3, #1
 800e472:	f882 3020 	strb.w	r3, [r2, #32]
 800e476:	e74e      	b.n	800e316 <ull_isr+0xee>
 800e478:	6963      	ldr	r3, [r4, #20]
 800e47a:	b10b      	cbz	r3, 800e480 <ull_isr+0x258>
 800e47c:	3018      	adds	r0, #24
 800e47e:	4798      	blx	r3
 800e480:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e482:	7b9b      	ldrb	r3, [r3, #14]
 800e484:	bb03      	cbnz	r3, 800e4c8 <ull_isr+0x2a0>
 800e486:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e488:	2200      	movs	r2, #0
 800e48a:	f883 2020 	strb.w	r2, [r3, #32]
 800e48e:	f015 0f10 	tst.w	r5, #16
 800e492:	d11d      	bne.n	800e4d0 <ull_isr+0x2a8>
 800e494:	f015 0f20 	tst.w	r5, #32
 800e498:	d12d      	bne.n	800e4f6 <ull_isr+0x2ce>
 800e49a:	2200      	movs	r2, #0
 800e49c:	4920      	ldr	r1, [pc, #128]	; (800e520 <ull_isr+0x2f8>)
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f7fe feb4 	bl	800d20c <dwt_read8bitoffsetreg>
 800e4a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e4a6:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800e4aa:	f010 0303 	ands.w	r3, r0, #3
 800e4ae:	d009      	beq.n	800e4c4 <ull_isr+0x29c>
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	491b      	ldr	r1, [pc, #108]	; (800e520 <ull_isr+0x2f8>)
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f7ff fd17 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e4ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e4bc:	b113      	cbz	r3, 800e4c4 <ull_isr+0x29c>
 800e4be:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e4c0:	3018      	adds	r0, #24
 800e4c2:	4798      	blx	r3
 800e4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7ff fe99 	bl	800e200 <ull_signal_rx_buff_free>
 800e4ce:	e7da      	b.n	800e486 <ull_isr+0x25e>
 800e4d0:	4b14      	ldr	r3, [pc, #80]	; (800e524 <ull_isr+0x2fc>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	2144      	movs	r1, #68	; 0x44
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff fb22 	bl	800db20 <dwt_write32bitoffsetreg>
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f7ff fd41 	bl	800df64 <_dwt_clear_db_events>
 800e4e2:	69e3      	ldr	r3, [r4, #28]
 800e4e4:	b113      	cbz	r3, 800e4ec <ull_isr+0x2c4>
 800e4e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e4e8:	3018      	adds	r0, #24
 800e4ea:	4798      	blx	r3
 800e4ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 2020 	strb.w	r2, [r3, #32]
 800e4f4:	e7ce      	b.n	800e494 <ull_isr+0x26c>
 800e4f6:	4b0c      	ldr	r3, [pc, #48]	; (800e528 <ull_isr+0x300>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	2144      	movs	r1, #68	; 0x44
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7ff fb0f 	bl	800db20 <dwt_write32bitoffsetreg>
 800e502:	4620      	mov	r0, r4
 800e504:	f7ff fd2e 	bl	800df64 <_dwt_clear_db_events>
 800e508:	69a3      	ldr	r3, [r4, #24]
 800e50a:	b113      	cbz	r3, 800e512 <ull_isr+0x2ea>
 800e50c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e50e:	3018      	adds	r0, #24
 800e510:	4798      	blx	r3
 800e512:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e514:	2200      	movs	r2, #0
 800e516:	f883 2020 	strb.w	r2, [r3, #32]
 800e51a:	e7be      	b.n	800e49a <ull_isr+0x272>
 800e51c:	00010018 	.word	0x00010018
 800e520:	00110038 	.word	0x00110038
 800e524:	34059400 	.word	0x34059400
 800e528:	10220400 	.word	0x10220400

0800e52c <dwt_modify32bitoffsetreg>:
 800e52c:	b530      	push	{r4, r5, lr}
 800e52e:	b085      	sub	sp, #20
 800e530:	9c08      	ldr	r4, [sp, #32]
 800e532:	f88d 3008 	strb.w	r3, [sp, #8]
 800e536:	0a1d      	lsrs	r5, r3, #8
 800e538:	f88d 5009 	strb.w	r5, [sp, #9]
 800e53c:	0c1d      	lsrs	r5, r3, #16
 800e53e:	f88d 500a 	strb.w	r5, [sp, #10]
 800e542:	0e1b      	lsrs	r3, r3, #24
 800e544:	f88d 300b 	strb.w	r3, [sp, #11]
 800e548:	f88d 400c 	strb.w	r4, [sp, #12]
 800e54c:	0a23      	lsrs	r3, r4, #8
 800e54e:	f88d 300d 	strb.w	r3, [sp, #13]
 800e552:	0c23      	lsrs	r3, r4, #16
 800e554:	f88d 300e 	strb.w	r3, [sp, #14]
 800e558:	0e24      	lsrs	r4, r4, #24
 800e55a:	f88d 400f 	strb.w	r4, [sp, #15]
 800e55e:	f248 0303 	movw	r3, #32771	; 0x8003
 800e562:	9301      	str	r3, [sp, #4]
 800e564:	ab02      	add	r3, sp, #8
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	2308      	movs	r3, #8
 800e56a:	b292      	uxth	r2, r2
 800e56c:	f7fe fd71 	bl	800d052 <dwt_xfer3xxx>
 800e570:	b005      	add	sp, #20
 800e572:	bd30      	pop	{r4, r5, pc}

0800e574 <ull_enablegpioclocks>:
 800e574:	b500      	push	{lr}
 800e576:	b083      	sub	sp, #12
 800e578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e582:	2200      	movs	r2, #0
 800e584:	4902      	ldr	r1, [pc, #8]	; (800e590 <ull_enablegpioclocks+0x1c>)
 800e586:	f7ff ffd1 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e58a:	b003      	add	sp, #12
 800e58c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e590:	00110004 	.word	0x00110004

0800e594 <ull_enable_rf_tx>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	4604      	mov	r4, r0
 800e59a:	460e      	mov	r6, r1
 800e59c:	4d13      	ldr	r5, [pc, #76]	; (800e5ec <ull_enable_rf_tx+0x58>)
 800e59e:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	f7ff ffbe 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e5b0:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	4629      	mov	r1, r5
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7ff ffb4 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e5c4:	4b0a      	ldr	r3, [pc, #40]	; (800e5f0 <ull_enable_rf_tx+0x5c>)
 800e5c6:	9300      	str	r3, [sp, #0]
 800e5c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f7ff ffaa 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e5d8:	b90e      	cbnz	r6, 800e5de <ull_enable_rf_tx+0x4a>
 800e5da:	b002      	add	sp, #8
 800e5dc:	bd70      	pop	{r4, r5, r6, pc}
 800e5de:	4b05      	ldr	r3, [pc, #20]	; (800e5f4 <ull_enable_rf_tx+0x60>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	4905      	ldr	r1, [pc, #20]	; (800e5f8 <ull_enable_rf_tx+0x64>)
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f7ff fa9b 	bl	800db20 <dwt_write32bitoffsetreg>
 800e5ea:	e7f6      	b.n	800e5da <ull_enable_rf_tx+0x46>
 800e5ec:	00070048 	.word	0x00070048
 800e5f0:	02003c00 	.word	0x02003c00
 800e5f4:	01011100 	.word	0x01011100
 800e5f8:	00070014 	.word	0x00070014

0800e5fc <ull_enable_rftx_blocks>:
 800e5fc:	b500      	push	{lr}
 800e5fe:	b083      	sub	sp, #12
 800e600:	4b05      	ldr	r3, [pc, #20]	; (800e618 <ull_enable_rftx_blocks+0x1c>)
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e608:	2200      	movs	r2, #0
 800e60a:	4904      	ldr	r1, [pc, #16]	; (800e61c <ull_enable_rftx_blocks+0x20>)
 800e60c:	f7ff ff8e 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e610:	b003      	add	sp, #12
 800e612:	f85d fb04 	ldr.w	pc, [sp], #4
 800e616:	bf00      	nop
 800e618:	02003c00 	.word	0x02003c00
 800e61c:	00070004 	.word	0x00070004

0800e620 <_dwt_otpprogword32>:
 800e620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e624:	b083      	sub	sp, #12
 800e626:	4604      	mov	r4, r0
 800e628:	460d      	mov	r5, r1
 800e62a:	4617      	mov	r7, r2
 800e62c:	4e56      	ldr	r6, [pc, #344]	; (800e788 <_dwt_otpprogword32+0x168>)
 800e62e:	2200      	movs	r2, #0
 800e630:	4631      	mov	r1, r6
 800e632:	f7fe fd96 	bl	800d162 <dwt_read32bitoffsetreg>
 800e636:	4681      	mov	r9, r0
 800e638:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e642:	2200      	movs	r2, #0
 800e644:	4631      	mov	r1, r6
 800e646:	4620      	mov	r0, r4
 800e648:	f7ff ff70 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e64c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e78c <_dwt_otpprogword32+0x16c>
 800e650:	2318      	movs	r3, #24
 800e652:	2200      	movs	r2, #0
 800e654:	4641      	mov	r1, r8
 800e656:	4620      	mov	r0, r4
 800e658:	f7ff f9f7 	bl	800da4a <dwt_write16bitoffsetreg>
 800e65c:	2125      	movs	r1, #37	; 0x25
 800e65e:	4620      	mov	r0, r4
 800e660:	f7ff fa28 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e664:	2102      	movs	r1, #2
 800e666:	4620      	mov	r0, r4
 800e668:	f7ff fa24 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e66c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800e670:	4620      	mov	r0, r4
 800e672:	f7ff fa1f 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e676:	b2f9      	uxtb	r1, r7
 800e678:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e67c:	4620      	mov	r0, r4
 800e67e:	f7ff fa19 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e682:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e686:	4620      	mov	r0, r4
 800e688:	f7ff fa14 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e68c:	2100      	movs	r1, #0
 800e68e:	4620      	mov	r0, r4
 800e690:	f7ff fa10 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e694:	2102      	movs	r1, #2
 800e696:	4620      	mov	r0, r4
 800e698:	f7ff fa0c 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e69c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7ff fa07 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6a6:	b2e9      	uxtb	r1, r5
 800e6a8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f7ff fa01 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6b2:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800e6b6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f7ff f9fa 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6c0:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800e6c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7ff f9f3 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6ce:	0e29      	lsrs	r1, r5, #24
 800e6d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f7ff f9ed 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6da:	2100      	movs	r1, #0
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f7ff f9e9 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6e2:	213a      	movs	r1, #58	; 0x3a
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7ff f9e5 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f7ff f9e0 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6f4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f7ff f9db 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e6fe:	2100      	movs	r1, #0
 800e700:	4620      	mov	r0, r4
 800e702:	f7ff f9d7 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e706:	213a      	movs	r1, #58	; 0x3a
 800e708:	4620      	mov	r0, r4
 800e70a:	f7ff f9d3 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e70e:	f240 1101 	movw	r1, #257	; 0x101
 800e712:	4620      	mov	r0, r4
 800e714:	f7ff f9ce 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e718:	2302      	movs	r3, #2
 800e71a:	2200      	movs	r2, #0
 800e71c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e720:	4620      	mov	r0, r4
 800e722:	f7ff f992 	bl	800da4a <dwt_write16bitoffsetreg>
 800e726:	2300      	movs	r3, #0
 800e728:	461a      	mov	r2, r3
 800e72a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e72e:	4620      	mov	r0, r4
 800e730:	f7ff f98b 	bl	800da4a <dwt_write16bitoffsetreg>
 800e734:	2002      	movs	r0, #2
 800e736:	f7f2 f893 	bl	8000860 <deca_sleep>
 800e73a:	213a      	movs	r1, #58	; 0x3a
 800e73c:	4620      	mov	r0, r4
 800e73e:	f7ff f9b9 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e742:	f44f 7181 	mov.w	r1, #258	; 0x102
 800e746:	4620      	mov	r0, r4
 800e748:	f7ff f9b4 	bl	800dab4 <__dwt_otp_write_wdata_id_reg>
 800e74c:	2302      	movs	r3, #2
 800e74e:	2200      	movs	r2, #0
 800e750:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e754:	4620      	mov	r0, r4
 800e756:	f7ff f978 	bl	800da4a <dwt_write16bitoffsetreg>
 800e75a:	2300      	movs	r3, #0
 800e75c:	461a      	mov	r2, r3
 800e75e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e762:	4620      	mov	r0, r4
 800e764:	f7ff f971 	bl	800da4a <dwt_write16bitoffsetreg>
 800e768:	2300      	movs	r3, #0
 800e76a:	461a      	mov	r2, r3
 800e76c:	4641      	mov	r1, r8
 800e76e:	4620      	mov	r0, r4
 800e770:	f7ff f96b 	bl	800da4a <dwt_write16bitoffsetreg>
 800e774:	464b      	mov	r3, r9
 800e776:	2200      	movs	r2, #0
 800e778:	4631      	mov	r1, r6
 800e77a:	4620      	mov	r0, r4
 800e77c:	f7ff f9d0 	bl	800db20 <dwt_write32bitoffsetreg>
 800e780:	b003      	add	sp, #12
 800e782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e786:	bf00      	nop
 800e788:	00070044 	.word	0x00070044
 800e78c:	000b0008 	.word	0x000b0008

0800e790 <ull_setgpiomode>:
 800e790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e792:	b083      	sub	sp, #12
 800e794:	2400      	movs	r4, #0
 800e796:	4623      	mov	r3, r4
 800e798:	2601      	movs	r6, #1
 800e79a:	2707      	movs	r7, #7
 800e79c:	e002      	b.n	800e7a4 <ull_setgpiomode+0x14>
 800e79e:	3401      	adds	r4, #1
 800e7a0:	2c09      	cmp	r4, #9
 800e7a2:	d009      	beq.n	800e7b8 <ull_setgpiomode+0x28>
 800e7a4:	fa06 f504 	lsl.w	r5, r6, r4
 800e7a8:	420d      	tst	r5, r1
 800e7aa:	d0f8      	beq.n	800e79e <ull_setgpiomode+0xe>
 800e7ac:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e7b0:	fa07 f505 	lsl.w	r5, r7, r5
 800e7b4:	432b      	orrs	r3, r5
 800e7b6:	e7f2      	b.n	800e79e <ull_setgpiomode+0xe>
 800e7b8:	401a      	ands	r2, r3
 800e7ba:	9200      	str	r2, [sp, #0]
 800e7bc:	43db      	mvns	r3, r3
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e7c4:	f7ff feb2 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e7c8:	b003      	add	sp, #12
 800e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7cc <ull_writetxfctrl>:
 800e7cc:	b500      	push	{lr}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	2a7f      	cmp	r2, #127	; 0x7f
 800e7d2:	bf88      	it	hi
 800e7d4:	3280      	addhi	r2, #128	; 0x80
 800e7d6:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800e7da:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e7de:	9100      	str	r1, [sp, #0]
 800e7e0:	4b03      	ldr	r3, [pc, #12]	; (800e7f0 <ull_writetxfctrl+0x24>)
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	2120      	movs	r1, #32
 800e7e6:	f7ff fea1 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e7ea:	b003      	add	sp, #12
 800e7ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7f0:	fc00f400 	.word	0xfc00f400

0800e7f4 <prs_sys_status_and_or>:
 800e7f4:	b500      	push	{lr}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	9200      	str	r2, [sp, #0]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2144      	movs	r1, #68	; 0x44
 800e800:	f7ff fe94 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e804:	2000      	movs	r0, #0
 800e806:	b003      	add	sp, #12
 800e808:	f85d fb04 	ldr.w	pc, [sp], #4

0800e80c <dwt_modify8bitoffsetreg>:
 800e80c:	b500      	push	{lr}
 800e80e:	b085      	sub	sp, #20
 800e810:	f88d 300c 	strb.w	r3, [sp, #12]
 800e814:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e818:	f88d 300d 	strb.w	r3, [sp, #13]
 800e81c:	f248 0301 	movw	r3, #32769	; 0x8001
 800e820:	9301      	str	r3, [sp, #4]
 800e822:	ab03      	add	r3, sp, #12
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	2302      	movs	r3, #2
 800e828:	b292      	uxth	r2, r2
 800e82a:	f7fe fc12 	bl	800d052 <dwt_xfer3xxx>
 800e82e:	b005      	add	sp, #20
 800e830:	f85d fb04 	ldr.w	pc, [sp], #4

0800e834 <ull_enablespicrccheck>:
 800e834:	b570      	push	{r4, r5, r6, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	4604      	mov	r4, r0
 800e83a:	460d      	mov	r5, r1
 800e83c:	b159      	cbz	r1, 800e856 <ull_enablespicrccheck+0x22>
 800e83e:	4616      	mov	r6, r2
 800e840:	2340      	movs	r3, #64	; 0x40
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	23ff      	movs	r3, #255	; 0xff
 800e846:	2200      	movs	r2, #0
 800e848:	2110      	movs	r1, #16
 800e84a:	f7ff ffdf 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e84e:	2d02      	cmp	r5, #2
 800e850:	d107      	bne.n	800e862 <ull_enablespicrccheck+0x2e>
 800e852:	60e6      	str	r6, [r4, #12]
 800e854:	e005      	b.n	800e862 <ull_enablespicrccheck+0x2e>
 800e856:	2200      	movs	r2, #0
 800e858:	9200      	str	r2, [sp, #0]
 800e85a:	23bf      	movs	r3, #191	; 0xbf
 800e85c:	2110      	movs	r1, #16
 800e85e:	f7ff ffd5 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e862:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e864:	751d      	strb	r5, [r3, #20]
 800e866:	b002      	add	sp, #8
 800e868:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e86c <ull_configciadiag>:
 800e86c:	b530      	push	{r4, r5, lr}
 800e86e:	b083      	sub	sp, #12
 800e870:	4604      	mov	r4, r0
 800e872:	460d      	mov	r5, r1
 800e874:	f011 0f01 	tst.w	r1, #1
 800e878:	d015      	beq.n	800e8a6 <ull_configciadiag+0x3a>
 800e87a:	2300      	movs	r3, #0
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	23ef      	movs	r3, #239	; 0xef
 800e880:	2202      	movs	r2, #2
 800e882:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e886:	f7ff ffc1 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e88a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e88c:	759d      	strb	r5, [r3, #22]
 800e88e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e890:	7d9b      	ldrb	r3, [r3, #22]
 800e892:	085b      	lsrs	r3, r3, #1
 800e894:	d010      	beq.n	800e8b8 <ull_configciadiag+0x4c>
 800e896:	086b      	lsrs	r3, r5, #1
 800e898:	2200      	movs	r2, #0
 800e89a:	490e      	ldr	r1, [pc, #56]	; (800e8d4 <ull_configciadiag+0x68>)
 800e89c:	4620      	mov	r0, r4
 800e89e:	f7ff fb23 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e8a2:	b003      	add	sp, #12
 800e8a4:	bd30      	pop	{r4, r5, pc}
 800e8a6:	2310      	movs	r3, #16
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	23ff      	movs	r3, #255	; 0xff
 800e8ac:	2202      	movs	r2, #2
 800e8ae:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e8b2:	f7ff ffab 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e8b6:	e7e8      	b.n	800e88a <ull_configciadiag+0x1e>
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	23ff      	movs	r3, #255	; 0xff
 800e8be:	2200      	movs	r2, #0
 800e8c0:	4904      	ldr	r1, [pc, #16]	; (800e8d4 <ull_configciadiag+0x68>)
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f7ff ffa2 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e8c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e8ca:	7d93      	ldrb	r3, [r2, #22]
 800e8cc:	f043 0302 	orr.w	r3, r3, #2
 800e8d0:	7593      	strb	r3, [r2, #22]
 800e8d2:	e7e6      	b.n	800e8a2 <ull_configciadiag+0x36>
 800e8d4:	00010020 	.word	0x00010020

0800e8d8 <ull_configurestsloadiv>:
 800e8d8:	b500      	push	{lr}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	2301      	movs	r3, #1
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	23ff      	movs	r3, #255	; 0xff
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	4902      	ldr	r1, [pc, #8]	; (800e8f0 <ull_configurestsloadiv+0x18>)
 800e8e6:	f7ff ff91 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e8ea:	b003      	add	sp, #12
 800e8ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8f0:	00020004 	.word	0x00020004

0800e8f4 <ull_adcoffsetscalibration>:
 800e8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	b08b      	sub	sp, #44	; 0x2c
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800eb20 <ull_adcoffsetscalibration+0x22c>
 800e900:	2200      	movs	r2, #0
 800e902:	4641      	mov	r1, r8
 800e904:	f7fe fc2d 	bl	800d162 <dwt_read32bitoffsetreg>
 800e908:	9004      	str	r0, [sp, #16]
 800e90a:	4c7d      	ldr	r4, [pc, #500]	; (800eb00 <ull_adcoffsetscalibration+0x20c>)
 800e90c:	2200      	movs	r2, #0
 800e90e:	4621      	mov	r1, r4
 800e910:	4638      	mov	r0, r7
 800e912:	f7fe fc26 	bl	800d162 <dwt_read32bitoffsetreg>
 800e916:	9005      	str	r0, [sp, #20]
 800e918:	4d7a      	ldr	r5, [pc, #488]	; (800eb04 <ull_adcoffsetscalibration+0x210>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	4629      	mov	r1, r5
 800e91e:	4638      	mov	r0, r7
 800e920:	f7fe fc74 	bl	800d20c <dwt_read8bitoffsetreg>
 800e924:	9006      	str	r0, [sp, #24]
 800e926:	4e78      	ldr	r6, [pc, #480]	; (800eb08 <ull_adcoffsetscalibration+0x214>)
 800e928:	2200      	movs	r2, #0
 800e92a:	4631      	mov	r1, r6
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7fe fc18 	bl	800d162 <dwt_read32bitoffsetreg>
 800e932:	4682      	mov	sl, r0
 800e934:	9007      	str	r0, [sp, #28]
 800e936:	2200      	movs	r2, #0
 800e938:	4974      	ldr	r1, [pc, #464]	; (800eb0c <ull_adcoffsetscalibration+0x218>)
 800e93a:	4638      	mov	r0, r7
 800e93c:	f7fe fc11 	bl	800d162 <dwt_read32bitoffsetreg>
 800e940:	4681      	mov	r9, r0
 800e942:	4b73      	ldr	r3, [pc, #460]	; (800eb10 <ull_adcoffsetscalibration+0x21c>)
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800e94a:	2200      	movs	r2, #0
 800e94c:	4641      	mov	r1, r8
 800e94e:	4638      	mov	r0, r7
 800e950:	f7ff fdec 	bl	800e52c <dwt_modify32bitoffsetreg>
 800e954:	464b      	mov	r3, r9
 800e956:	2200      	movs	r2, #0
 800e958:	4631      	mov	r1, r6
 800e95a:	4638      	mov	r0, r7
 800e95c:	f7ff f8e0 	bl	800db20 <dwt_write32bitoffsetreg>
 800e960:	4653      	mov	r3, sl
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e96c:	9300      	str	r3, [sp, #0]
 800e96e:	2386      	movs	r3, #134	; 0x86
 800e970:	2200      	movs	r2, #0
 800e972:	4621      	mov	r1, r4
 800e974:	4638      	mov	r0, r7
 800e976:	f7ff ff49 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e97a:	2300      	movs	r3, #0
 800e97c:	2203      	movs	r2, #3
 800e97e:	4621      	mov	r1, r4
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff fab1 	bl	800dee8 <dwt_write8bitoffsetreg>
 800e986:	f04f 0900 	mov.w	r9, #0
 800e98a:	f8cd 9000 	str.w	r9, [sp]
 800e98e:	23fe      	movs	r3, #254	; 0xfe
 800e990:	464a      	mov	r2, r9
 800e992:	4629      	mov	r1, r5
 800e994:	4638      	mov	r0, r7
 800e996:	f7ff ff39 	bl	800e80c <dwt_modify8bitoffsetreg>
 800e99a:	464a      	mov	r2, r9
 800e99c:	213c      	movs	r1, #60	; 0x3c
 800e99e:	4638      	mov	r0, r7
 800e9a0:	f7fe fbdf 	bl	800d162 <dwt_read32bitoffsetreg>
 800e9a4:	9008      	str	r0, [sp, #32]
 800e9a6:	464a      	mov	r2, r9
 800e9a8:	2140      	movs	r1, #64	; 0x40
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	f7fe fbd9 	bl	800d162 <dwt_read32bitoffsetreg>
 800e9b0:	9009      	str	r0, [sp, #36]	; 0x24
 800e9b2:	464b      	mov	r3, r9
 800e9b4:	464a      	mov	r2, r9
 800e9b6:	213c      	movs	r1, #60	; 0x3c
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	f7ff f8b1 	bl	800db20 <dwt_write32bitoffsetreg>
 800e9be:	464b      	mov	r3, r9
 800e9c0:	464a      	mov	r2, r9
 800e9c2:	2140      	movs	r1, #64	; 0x40
 800e9c4:	4638      	mov	r0, r7
 800e9c6:	f7ff f8ab 	bl	800db20 <dwt_write32bitoffsetreg>
 800e9ca:	f7f5 fe63 	bl	8004694 <dwt_forcetrxoff>
 800e9ce:	f04f 0b02 	mov.w	fp, #2
 800e9d2:	464c      	mov	r4, r9
 800e9d4:	464d      	mov	r5, r9
 800e9d6:	464e      	mov	r6, r9
 800e9d8:	46c8      	mov	r8, r9
 800e9da:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9de:	46ca      	mov	sl, r9
 800e9e0:	e00e      	b.n	800ea00 <ull_adcoffsetscalibration+0x10c>
 800e9e2:	f7f5 fe57 	bl	8004694 <dwt_forcetrxoff>
 800e9e6:	9b03      	ldr	r3, [sp, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 8082 	beq.w	800eaf2 <ull_adcoffsetscalibration+0x1fe>
 800e9ee:	f1bb 0f01 	cmp.w	fp, #1
 800e9f2:	f000 8081 	beq.w	800eaf8 <ull_adcoffsetscalibration+0x204>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	9303      	str	r3, [sp, #12]
 800e9fa:	f1bb 0b01 	subs.w	fp, fp, #1
 800e9fe:	d043      	beq.n	800ea88 <ull_adcoffsetscalibration+0x194>
 800ea00:	4650      	mov	r0, sl
 800ea02:	f7f5 fe55 	bl	80046b0 <dwt_rxenable>
 800ea06:	2014      	movs	r0, #20
 800ea08:	f7f1 ff35 	bl	8000876 <deca_usleep>
 800ea0c:	f04f 0904 	mov.w	r9, #4
 800ea10:	f8cd a000 	str.w	sl, [sp]
 800ea14:	23fe      	movs	r3, #254	; 0xfe
 800ea16:	4652      	mov	r2, sl
 800ea18:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800ea1c:	4638      	mov	r0, r7
 800ea1e:	f7ff fef5 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ea22:	2301      	movs	r3, #1
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	23fe      	movs	r3, #254	; 0xfe
 800ea28:	4652      	mov	r2, sl
 800ea2a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800ea2e:	4638      	mov	r0, r7
 800ea30:	f7ff feec 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ea34:	4652      	mov	r2, sl
 800ea36:	4937      	ldr	r1, [pc, #220]	; (800eb14 <ull_adcoffsetscalibration+0x220>)
 800ea38:	4638      	mov	r0, r7
 800ea3a:	f7fe fb92 	bl	800d162 <dwt_read32bitoffsetreg>
 800ea3e:	fa58 f880 	uxtab	r8, r8, r0
 800ea42:	fa1f f888 	uxth.w	r8, r8
 800ea46:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ea4a:	441e      	add	r6, r3
 800ea4c:	b2b6      	uxth	r6, r6
 800ea4e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ea52:	441d      	add	r5, r3
 800ea54:	b2ad      	uxth	r5, r5
 800ea56:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800ea5a:	b2a4      	uxth	r4, r4
 800ea5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ea60:	d1d6      	bne.n	800ea10 <ull_adcoffsetscalibration+0x11c>
 800ea62:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800ea66:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800ea6a:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800ea6e:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800ea72:	4652      	mov	r2, sl
 800ea74:	2144      	movs	r1, #68	; 0x44
 800ea76:	4638      	mov	r0, r7
 800ea78:	f7fe fb73 	bl	800d162 <dwt_read32bitoffsetreg>
 800ea7c:	4b26      	ldr	r3, [pc, #152]	; (800eb18 <ull_adcoffsetscalibration+0x224>)
 800ea7e:	4218      	tst	r0, r3
 800ea80:	d0af      	beq.n	800e9e2 <ull_adcoffsetscalibration+0xee>
 800ea82:	f7f5 fe07 	bl	8004694 <dwt_forcetrxoff>
 800ea86:	e7b2      	b.n	800e9ee <ull_adcoffsetscalibration+0xfa>
 800ea88:	f04f 0900 	mov.w	r9, #0
 800ea8c:	9b08      	ldr	r3, [sp, #32]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	213c      	movs	r1, #60	; 0x3c
 800ea92:	4638      	mov	r0, r7
 800ea94:	f7ff f844 	bl	800db20 <dwt_write32bitoffsetreg>
 800ea98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	2140      	movs	r1, #64	; 0x40
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	f7ff f83e 	bl	800db20 <dwt_write32bitoffsetreg>
 800eaa4:	042b      	lsls	r3, r5, #16
 800eaa6:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800eaaa:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800eaae:	4443      	add	r3, r8
 800eab0:	2200      	movs	r2, #0
 800eab2:	491a      	ldr	r1, [pc, #104]	; (800eb1c <ull_adcoffsetscalibration+0x228>)
 800eab4:	4638      	mov	r0, r7
 800eab6:	f7ff f833 	bl	800db20 <dwt_write32bitoffsetreg>
 800eaba:	9b04      	ldr	r3, [sp, #16]
 800eabc:	2200      	movs	r2, #0
 800eabe:	4918      	ldr	r1, [pc, #96]	; (800eb20 <ull_adcoffsetscalibration+0x22c>)
 800eac0:	4638      	mov	r0, r7
 800eac2:	f7ff f82d 	bl	800db20 <dwt_write32bitoffsetreg>
 800eac6:	9b05      	ldr	r3, [sp, #20]
 800eac8:	2200      	movs	r2, #0
 800eaca:	490d      	ldr	r1, [pc, #52]	; (800eb00 <ull_adcoffsetscalibration+0x20c>)
 800eacc:	4638      	mov	r0, r7
 800eace:	f7ff f827 	bl	800db20 <dwt_write32bitoffsetreg>
 800ead2:	9b06      	ldr	r3, [sp, #24]
 800ead4:	2200      	movs	r2, #0
 800ead6:	490b      	ldr	r1, [pc, #44]	; (800eb04 <ull_adcoffsetscalibration+0x210>)
 800ead8:	4638      	mov	r0, r7
 800eada:	f7ff fa05 	bl	800dee8 <dwt_write8bitoffsetreg>
 800eade:	9b07      	ldr	r3, [sp, #28]
 800eae0:	2200      	movs	r2, #0
 800eae2:	4909      	ldr	r1, [pc, #36]	; (800eb08 <ull_adcoffsetscalibration+0x214>)
 800eae4:	4638      	mov	r0, r7
 800eae6:	f7ff f81b 	bl	800db20 <dwt_write32bitoffsetreg>
 800eaea:	4648      	mov	r0, r9
 800eaec:	b00b      	add	sp, #44	; 0x2c
 800eaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf2:	f04f 0900 	mov.w	r9, #0
 800eaf6:	e7c9      	b.n	800ea8c <ull_adcoffsetscalibration+0x198>
 800eaf8:	f06f 0905 	mvn.w	r9, #5
 800eafc:	e7c6      	b.n	800ea8c <ull_adcoffsetscalibration+0x198>
 800eafe:	bf00      	nop
 800eb00:	00030014 	.word	0x00030014
 800eb04:	00030018 	.word	0x00030018
 800eb08:	0003002c 	.word	0x0003002c
 800eb0c:	00030044 	.word	0x00030044
 800eb10:	38010000 	.word	0x38010000
 800eb14:	0003004c 	.word	0x0003004c
 800eb18:	3427ff00 	.word	0x3427ff00
 800eb1c:	00030010 	.word	0x00030010
 800eb20:	00070014 	.word	0x00070014

0800eb24 <ull_restoreconfig>:
 800eb24:	b510      	push	{r4, lr}
 800eb26:	4604      	mov	r4, r0
 800eb28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eb2a:	7d9b      	ldrb	r3, [r3, #22]
 800eb2c:	085b      	lsrs	r3, r3, #1
 800eb2e:	d01a      	beq.n	800eb66 <ull_restoreconfig+0x42>
 800eb30:	2200      	movs	r2, #0
 800eb32:	4912      	ldr	r1, [pc, #72]	; (800eb7c <ull_restoreconfig+0x58>)
 800eb34:	4620      	mov	r0, r4
 800eb36:	f7fe fb2a 	bl	800d18e <dwt_read16bitoffsetreg>
 800eb3a:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800eb3e:	3b09      	subs	r3, #9
 800eb40:	2b0f      	cmp	r3, #15
 800eb42:	d80c      	bhi.n	800eb5e <ull_restoreconfig+0x3a>
 800eb44:	f000 0001 	and.w	r0, r0, #1
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	bf0c      	ite	eq
 800eb4c:	2105      	moveq	r1, #5
 800eb4e:	2109      	movne	r1, #9
 800eb50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb52:	7a1b      	ldrb	r3, [r3, #8]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d002      	beq.n	800eb5e <ull_restoreconfig+0x3a>
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f7ff f8ad 	bl	800dcb8 <ull_configmrxlut>
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f7ff fec8 	bl	800e8f4 <ull_adcoffsetscalibration>
 800eb64:	bd10      	pop	{r4, pc}
 800eb66:	2301      	movs	r3, #1
 800eb68:	2200      	movs	r2, #0
 800eb6a:	4905      	ldr	r1, [pc, #20]	; (800eb80 <ull_restoreconfig+0x5c>)
 800eb6c:	f7ff f9bc 	bl	800dee8 <dwt_write8bitoffsetreg>
 800eb70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb72:	7d93      	ldrb	r3, [r2, #22]
 800eb74:	f043 0302 	orr.w	r3, r3, #2
 800eb78:	7593      	strb	r3, [r2, #22]
 800eb7a:	e7d9      	b.n	800eb30 <ull_restoreconfig+0xc>
 800eb7c:	00010008 	.word	0x00010008
 800eb80:	00010020 	.word	0x00010020

0800eb84 <ull_calcbandwidthadj>:
 800eb84:	b570      	push	{r4, r5, r6, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	4604      	mov	r4, r0
 800eb8a:	460d      	mov	r5, r1
 800eb8c:	2101      	movs	r1, #1
 800eb8e:	f7fe ff7b 	bl	800da88 <ull_force_clocks>
 800eb92:	2100      	movs	r1, #0
 800eb94:	4620      	mov	r0, r4
 800eb96:	f7ff fcfd 	bl	800e594 <ull_enable_rf_tx>
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7ff fd2e 	bl	800e5fc <ull_enable_rftx_blocks>
 800eba0:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800eba4:	2200      	movs	r2, #0
 800eba6:	4915      	ldr	r1, [pc, #84]	; (800ebfc <ull_calcbandwidthadj+0x78>)
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f7fe ff4e 	bl	800da4a <dwt_write16bitoffsetreg>
 800ebae:	2303      	movs	r3, #3
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	23ff      	movs	r3, #255	; 0xff
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	4912      	ldr	r1, [pc, #72]	; (800ec00 <ull_calcbandwidthadj+0x7c>)
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f7ff fe27 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ebbe:	4e10      	ldr	r6, [pc, #64]	; (800ec00 <ull_calcbandwidthadj+0x7c>)
 800ebc0:	2500      	movs	r5, #0
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f7fe fb20 	bl	800d20c <dwt_read8bitoffsetreg>
 800ebcc:	f010 0f01 	tst.w	r0, #1
 800ebd0:	d1f7      	bne.n	800ebc2 <ull_calcbandwidthadj+0x3e>
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f7ff f906 	bl	800dde4 <ull_disable_rftx_blocks>
 800ebd8:	2100      	movs	r1, #0
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f7ff f90c 	bl	800ddf8 <ull_disable_rf_tx>
 800ebe0:	2105      	movs	r1, #5
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f7fe ff50 	bl	800da88 <ull_force_clocks>
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4906      	ldr	r1, [pc, #24]	; (800ec04 <ull_calcbandwidthadj+0x80>)
 800ebec:	4620      	mov	r0, r4
 800ebee:	f7fe fb0d 	bl	800d20c <dwt_read8bitoffsetreg>
 800ebf2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ebf6:	b002      	add	sp, #8
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}
 800ebfa:	bf00      	nop
 800ebfc:	0008001c 	.word	0x0008001c
 800ec00:	00080010 	.word	0x00080010
 800ec04:	0007001c 	.word	0x0007001c

0800ec08 <ull_configuretxrf>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800ec12:	b149      	cbz	r1, 800ec28 <ull_configuretxrf+0x20>
 800ec14:	f7ff ffb6 	bl	800eb84 <ull_calcbandwidthadj>
 800ec18:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	4905      	ldr	r1, [pc, #20]	; (800ec34 <ull_configuretxrf+0x2c>)
 800ec20:	4628      	mov	r0, r5
 800ec22:	f7fe ff7d 	bl	800db20 <dwt_write32bitoffsetreg>
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	7823      	ldrb	r3, [r4, #0]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	4902      	ldr	r1, [pc, #8]	; (800ec38 <ull_configuretxrf+0x30>)
 800ec2e:	f7ff f95b 	bl	800dee8 <dwt_write8bitoffsetreg>
 800ec32:	e7f1      	b.n	800ec18 <ull_configuretxrf+0x10>
 800ec34:	00010004 	.word	0x00010004
 800ec38:	0007001c 	.word	0x0007001c

0800ec3c <ull_repeated_frames>:
 800ec3c:	b530      	push	{r4, r5, lr}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	4604      	mov	r4, r0
 800ec42:	460d      	mov	r5, r1
 800ec44:	2310      	movs	r3, #16
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	23ff      	movs	r3, #255	; 0xff
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	4906      	ldr	r1, [pc, #24]	; (800ec68 <ull_repeated_frames+0x2c>)
 800ec4e:	f7ff fddd 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ec52:	462b      	mov	r3, r5
 800ec54:	2d02      	cmp	r5, #2
 800ec56:	bf38      	it	cc
 800ec58:	2302      	movcc	r3, #2
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	2128      	movs	r1, #40	; 0x28
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f7fe ff5e 	bl	800db20 <dwt_write32bitoffsetreg>
 800ec64:	b003      	add	sp, #12
 800ec66:	bd30      	pop	{r4, r5, pc}
 800ec68:	000f0028 	.word	0x000f0028

0800ec6c <ull_setdwstate>:
 800ec6c:	b530      	push	{r4, r5, lr}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	4604      	mov	r4, r0
 800ec72:	2901      	cmp	r1, #1
 800ec74:	d01d      	beq.n	800ecb2 <ull_setdwstate+0x46>
 800ec76:	2902      	cmp	r1, #2
 800ec78:	d030      	beq.n	800ecdc <ull_setdwstate+0x70>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	23ff      	movs	r3, #255	; 0xff
 800ec80:	2200      	movs	r2, #0
 800ec82:	4926      	ldr	r1, [pc, #152]	; (800ed1c <ull_setdwstate+0xb0>)
 800ec84:	f7ff fdc2 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ec88:	4d25      	ldr	r5, [pc, #148]	; (800ed20 <ull_setdwstate+0xb4>)
 800ec8a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ec94:	2200      	movs	r2, #0
 800ec96:	4629      	mov	r1, r5
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f7ff fc47 	bl	800e52c <dwt_modify32bitoffsetreg>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	237f      	movs	r3, #127	; 0x7f
 800eca4:	2202      	movs	r2, #2
 800eca6:	4629      	mov	r1, r5
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f7ff fdaf 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ecae:	b003      	add	sp, #12
 800ecb0:	bd30      	pop	{r4, r5, pc}
 800ecb2:	2105      	movs	r1, #5
 800ecb4:	f7fe fee8 	bl	800da88 <ull_force_clocks>
 800ecb8:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	4917      	ldr	r1, [pc, #92]	; (800ed24 <ull_setdwstate+0xb8>)
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7ff fc30 	bl	800e52c <dwt_modify32bitoffsetreg>
 800eccc:	2201      	movs	r2, #1
 800ecce:	9200      	str	r2, [sp, #0]
 800ecd0:	23ff      	movs	r3, #255	; 0xff
 800ecd2:	4913      	ldr	r1, [pc, #76]	; (800ed20 <ull_setdwstate+0xb4>)
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	f7ff fd99 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ecda:	e7e8      	b.n	800ecae <ull_setdwstate+0x42>
 800ecdc:	2303      	movs	r3, #3
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	23ff      	movs	r3, #255	; 0xff
 800ece2:	2200      	movs	r2, #0
 800ece4:	490d      	ldr	r1, [pc, #52]	; (800ed1c <ull_setdwstate+0xb0>)
 800ece6:	f7ff fd91 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ecea:	4d0d      	ldr	r5, [pc, #52]	; (800ed20 <ull_setdwstate+0xb4>)
 800ecec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7ff fc16 	bl	800e52c <dwt_modify32bitoffsetreg>
 800ed00:	2300      	movs	r3, #0
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	237f      	movs	r3, #127	; 0x7f
 800ed06:	2202      	movs	r2, #2
 800ed08:	4629      	mov	r1, r5
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f7ff fd7e 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ed10:	2105      	movs	r1, #5
 800ed12:	4620      	mov	r0, r4
 800ed14:	f7fe feb8 	bl	800da88 <ull_force_clocks>
 800ed18:	e7c9      	b.n	800ecae <ull_setdwstate+0x42>
 800ed1a:	bf00      	nop
 800ed1c:	00110004 	.word	0x00110004
 800ed20:	00110008 	.word	0x00110008
 800ed24:	00090008 	.word	0x00090008

0800ed28 <ull_configureframefilter>:
 800ed28:	b530      	push	{r4, r5, lr}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	4605      	mov	r5, r0
 800ed2e:	2902      	cmp	r1, #2
 800ed30:	d00e      	beq.n	800ed50 <ull_configureframefilter+0x28>
 800ed32:	2400      	movs	r4, #0
 800ed34:	9400      	str	r4, [sp, #0]
 800ed36:	23fe      	movs	r3, #254	; 0xfe
 800ed38:	4622      	mov	r2, r4
 800ed3a:	2110      	movs	r1, #16
 800ed3c:	f7ff fd66 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ed40:	4623      	mov	r3, r4
 800ed42:	4622      	mov	r2, r4
 800ed44:	2114      	movs	r1, #20
 800ed46:	4628      	mov	r0, r5
 800ed48:	f7fe fe7f 	bl	800da4a <dwt_write16bitoffsetreg>
 800ed4c:	b003      	add	sp, #12
 800ed4e:	bd30      	pop	{r4, r5, pc}
 800ed50:	4614      	mov	r4, r2
 800ed52:	2301      	movs	r3, #1
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	23ff      	movs	r3, #255	; 0xff
 800ed58:	2200      	movs	r2, #0
 800ed5a:	2110      	movs	r1, #16
 800ed5c:	f7ff fd56 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ed60:	4623      	mov	r3, r4
 800ed62:	2200      	movs	r2, #0
 800ed64:	2114      	movs	r1, #20
 800ed66:	4628      	mov	r0, r5
 800ed68:	f7fe fe6f 	bl	800da4a <dwt_write16bitoffsetreg>
 800ed6c:	e7ee      	b.n	800ed4c <ull_configureframefilter+0x24>
	...

0800ed70 <ull_run_pgfcal>:
 800ed70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	4605      	mov	r5, r0
 800ed78:	4c2a      	ldr	r4, [pc, #168]	; (800ee24 <ull_run_pgfcal+0xb4>)
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	23ff      	movs	r3, #255	; 0xff
 800ed80:	2200      	movs	r2, #0
 800ed82:	4621      	mov	r1, r4
 800ed84:	f7ff fd42 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ed88:	2310      	movs	r3, #16
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	23ff      	movs	r3, #255	; 0xff
 800ed8e:	2200      	movs	r2, #0
 800ed90:	4621      	mov	r1, r4
 800ed92:	4628      	mov	r0, r5
 800ed94:	f7ff fd3a 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ed98:	2403      	movs	r4, #3
 800ed9a:	f04f 0814 	mov.w	r8, #20
 800ed9e:	4f22      	ldr	r7, [pc, #136]	; (800ee28 <ull_run_pgfcal+0xb8>)
 800eda0:	2600      	movs	r6, #0
 800eda2:	4640      	mov	r0, r8
 800eda4:	f7f1 fd67 	bl	8000876 <deca_usleep>
 800eda8:	4632      	mov	r2, r6
 800edaa:	4639      	mov	r1, r7
 800edac:	4628      	mov	r0, r5
 800edae:	f7fe fa2d 	bl	800d20c <dwt_read8bitoffsetreg>
 800edb2:	2801      	cmp	r0, #1
 800edb4:	d034      	beq.n	800ee20 <ull_run_pgfcal+0xb0>
 800edb6:	1e63      	subs	r3, r4, #1
 800edb8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800edbc:	d1f1      	bne.n	800eda2 <ull_run_pgfcal+0x32>
 800edbe:	f06f 0402 	mvn.w	r4, #2
 800edc2:	4e18      	ldr	r6, [pc, #96]	; (800ee24 <ull_run_pgfcal+0xb4>)
 800edc4:	2300      	movs	r3, #0
 800edc6:	461a      	mov	r2, r3
 800edc8:	4631      	mov	r1, r6
 800edca:	4628      	mov	r0, r5
 800edcc:	f7ff f88c 	bl	800dee8 <dwt_write8bitoffsetreg>
 800edd0:	2301      	movs	r3, #1
 800edd2:	2200      	movs	r2, #0
 800edd4:	4914      	ldr	r1, [pc, #80]	; (800ee28 <ull_run_pgfcal+0xb8>)
 800edd6:	4628      	mov	r0, r5
 800edd8:	f7ff f886 	bl	800dee8 <dwt_write8bitoffsetreg>
 800eddc:	2301      	movs	r3, #1
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	23ff      	movs	r3, #255	; 0xff
 800ede2:	2202      	movs	r2, #2
 800ede4:	4631      	mov	r1, r6
 800ede6:	4628      	mov	r0, r5
 800ede8:	f7ff fd10 	bl	800e80c <dwt_modify8bitoffsetreg>
 800edec:	2200      	movs	r2, #0
 800edee:	490f      	ldr	r1, [pc, #60]	; (800ee2c <ull_run_pgfcal+0xbc>)
 800edf0:	4628      	mov	r0, r5
 800edf2:	f7fe f9b6 	bl	800d162 <dwt_read32bitoffsetreg>
 800edf6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800edfa:	4298      	cmp	r0, r3
 800edfc:	bf08      	it	eq
 800edfe:	f06f 0403 	mvneq.w	r4, #3
 800ee02:	2200      	movs	r2, #0
 800ee04:	490a      	ldr	r1, [pc, #40]	; (800ee30 <ull_run_pgfcal+0xc0>)
 800ee06:	4628      	mov	r0, r5
 800ee08:	f7fe f9ab 	bl	800d162 <dwt_read32bitoffsetreg>
 800ee0c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ee10:	4298      	cmp	r0, r3
 800ee12:	bf14      	ite	ne
 800ee14:	4620      	movne	r0, r4
 800ee16:	f06f 0004 	mvneq.w	r0, #4
 800ee1a:	b002      	add	sp, #8
 800ee1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee20:	2400      	movs	r4, #0
 800ee22:	e7ce      	b.n	800edc2 <ull_run_pgfcal+0x52>
 800ee24:	0004000c 	.word	0x0004000c
 800ee28:	00040020 	.word	0x00040020
 800ee2c:	00040014 	.word	0x00040014
 800ee30:	0004001c 	.word	0x0004001c

0800ee34 <ull_setinterrupt>:
 800ee34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee38:	b083      	sub	sp, #12
 800ee3a:	4605      	mov	r5, r0
 800ee3c:	4688      	mov	r8, r1
 800ee3e:	4617      	mov	r7, r2
 800ee40:	461c      	mov	r4, r3
 800ee42:	f7f1 fcef 	bl	8000824 <decamutexon>
 800ee46:	4606      	mov	r6, r0
 800ee48:	2c02      	cmp	r4, #2
 800ee4a:	d019      	beq.n	800ee80 <ull_setinterrupt+0x4c>
 800ee4c:	2c04      	cmp	r4, #4
 800ee4e:	d017      	beq.n	800ee80 <ull_setinterrupt+0x4c>
 800ee50:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d03f      	beq.n	800eed8 <ull_setinterrupt+0xa4>
 800ee58:	f04f 0900 	mov.w	r9, #0
 800ee5c:	f8cd 9000 	str.w	r9, [sp]
 800ee60:	ea6f 0308 	mvn.w	r3, r8
 800ee64:	464a      	mov	r2, r9
 800ee66:	213c      	movs	r1, #60	; 0x3c
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f7ff fb5f 	bl	800e52c <dwt_modify32bitoffsetreg>
 800ee6e:	f8cd 9000 	str.w	r9, [sp]
 800ee72:	43fb      	mvns	r3, r7
 800ee74:	464a      	mov	r2, r9
 800ee76:	2140      	movs	r1, #64	; 0x40
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f7ff fb57 	bl	800e52c <dwt_modify32bitoffsetreg>
 800ee7e:	e00b      	b.n	800ee98 <ull_setinterrupt+0x64>
 800ee80:	4643      	mov	r3, r8
 800ee82:	2200      	movs	r2, #0
 800ee84:	213c      	movs	r1, #60	; 0x3c
 800ee86:	4628      	mov	r0, r5
 800ee88:	f7fe fe4a 	bl	800db20 <dwt_write32bitoffsetreg>
 800ee8c:	463b      	mov	r3, r7
 800ee8e:	2200      	movs	r2, #0
 800ee90:	2140      	movs	r1, #64	; 0x40
 800ee92:	4628      	mov	r0, r5
 800ee94:	f7fe fe44 	bl	800db20 <dwt_write32bitoffsetreg>
 800ee98:	3c03      	subs	r4, #3
 800ee9a:	b2e4      	uxtb	r4, r4
 800ee9c:	2c01      	cmp	r4, #1
 800ee9e:	d92d      	bls.n	800eefc <ull_setinterrupt+0xc8>
 800eea0:	2200      	movs	r2, #0
 800eea2:	213c      	movs	r1, #60	; 0x3c
 800eea4:	4628      	mov	r0, r5
 800eea6:	f7fe f95c 	bl	800d162 <dwt_read32bitoffsetreg>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2200      	movs	r2, #0
 800eeae:	2144      	movs	r1, #68	; 0x44
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f7fe fe35 	bl	800db20 <dwt_write32bitoffsetreg>
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	2140      	movs	r1, #64	; 0x40
 800eeba:	4628      	mov	r0, r5
 800eebc:	f7fe f951 	bl	800d162 <dwt_read32bitoffsetreg>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2200      	movs	r2, #0
 800eec4:	2148      	movs	r1, #72	; 0x48
 800eec6:	4628      	mov	r0, r5
 800eec8:	f7fe fe2a 	bl	800db20 <dwt_write32bitoffsetreg>
 800eecc:	4630      	mov	r0, r6
 800eece:	f7f1 fcba 	bl	8000846 <decamutexoff>
 800eed2:	b003      	add	sp, #12
 800eed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eed8:	f8cd 8000 	str.w	r8, [sp]
 800eedc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eee0:	2200      	movs	r2, #0
 800eee2:	213c      	movs	r1, #60	; 0x3c
 800eee4:	4628      	mov	r0, r5
 800eee6:	f7ff fb21 	bl	800e52c <dwt_modify32bitoffsetreg>
 800eeea:	9700      	str	r7, [sp, #0]
 800eeec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eef0:	2200      	movs	r2, #0
 800eef2:	2140      	movs	r1, #64	; 0x40
 800eef4:	4628      	mov	r0, r5
 800eef6:	f7ff fb19 	bl	800e52c <dwt_modify32bitoffsetreg>
 800eefa:	e7cd      	b.n	800ee98 <ull_setinterrupt+0x64>
 800eefc:	2110      	movs	r1, #16
 800eefe:	9100      	str	r1, [sp, #0]
 800ef00:	23ff      	movs	r3, #255	; 0xff
 800ef02:	2202      	movs	r2, #2
 800ef04:	4628      	mov	r0, r5
 800ef06:	f7ff fc81 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ef0a:	e7c9      	b.n	800eea0 <ull_setinterrupt+0x6c>

0800ef0c <prs_ack_enable>:
 800ef0c:	b500      	push	{lr}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	2900      	cmp	r1, #0
 800ef12:	bf0b      	itete	eq
 800ef14:	23ff      	moveq	r3, #255	; 0xff
 800ef16:	23f7      	movne	r3, #247	; 0xf7
 800ef18:	2200      	moveq	r2, #0
 800ef1a:	2208      	movne	r2, #8
 800ef1c:	9200      	str	r2, [sp, #0]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	2110      	movs	r1, #16
 800ef22:	f7ff fc73 	bl	800e80c <dwt_modify8bitoffsetreg>
 800ef26:	b003      	add	sp, #12
 800ef28:	f85d fb04 	ldr.w	pc, [sp], #4

0800ef2c <dwt_modify16bitoffsetreg>:
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800ef34:	f88d 300c 	strb.w	r3, [sp, #12]
 800ef38:	0a1b      	lsrs	r3, r3, #8
 800ef3a:	f88d 300d 	strb.w	r3, [sp, #13]
 800ef3e:	f88d 400e 	strb.w	r4, [sp, #14]
 800ef42:	0a24      	lsrs	r4, r4, #8
 800ef44:	f88d 400f 	strb.w	r4, [sp, #15]
 800ef48:	f248 0302 	movw	r3, #32770	; 0x8002
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	ab03      	add	r3, sp, #12
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	2304      	movs	r3, #4
 800ef54:	b292      	uxth	r2, r2
 800ef56:	f7fe f87c 	bl	800d052 <dwt_xfer3xxx>
 800ef5a:	b004      	add	sp, #16
 800ef5c:	bd10      	pop	{r4, pc}
	...

0800ef60 <ull_configurestsmode>:
 800ef60:	b530      	push	{r4, r5, lr}
 800ef62:	b083      	sub	sp, #12
 800ef64:	4605      	mov	r5, r0
 800ef66:	460c      	mov	r4, r1
 800ef68:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ef6a:	7559      	strb	r1, [r3, #21]
 800ef6c:	030b      	lsls	r3, r1, #12
 800ef6e:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800ef78:	2200      	movs	r2, #0
 800ef7a:	2110      	movs	r1, #16
 800ef7c:	f7ff ffd6 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800ef80:	f004 0403 	and.w	r4, r4, #3
 800ef84:	2c03      	cmp	r4, #3
 800ef86:	bf0c      	ite	eq
 800ef88:	4b04      	ldreq	r3, [pc, #16]	; (800ef9c <ull_configurestsmode+0x3c>)
 800ef8a:	4b05      	ldrne	r3, [pc, #20]	; (800efa0 <ull_configurestsmode+0x40>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	4905      	ldr	r1, [pc, #20]	; (800efa4 <ull_configurestsmode+0x44>)
 800ef90:	4628      	mov	r0, r5
 800ef92:	f7fe fdc5 	bl	800db20 <dwt_write32bitoffsetreg>
 800ef96:	b003      	add	sp, #12
 800ef98:	bd30      	pop	{r4, r5, pc}
 800ef9a:	bf00      	nop
 800ef9c:	af5f35cc 	.word	0xaf5f35cc
 800efa0:	af5f584c 	.word	0xaf5f584c
 800efa4:	0006000c 	.word	0x0006000c

0800efa8 <ull_setleds>:
 800efa8:	b530      	push	{r4, r5, lr}
 800efaa:	b083      	sub	sp, #12
 800efac:	4604      	mov	r4, r0
 800efae:	f011 0f01 	tst.w	r1, #1
 800efb2:	d01f      	beq.n	800eff4 <ull_setleds+0x4c>
 800efb4:	460d      	mov	r5, r1
 800efb6:	f44f 7310 	mov.w	r3, #576	; 0x240
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800efc0:	2200      	movs	r2, #0
 800efc2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800efc6:	f7ff fab1 	bl	800e52c <dwt_modify32bitoffsetreg>
 800efca:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efd4:	2200      	movs	r2, #0
 800efd6:	4918      	ldr	r1, [pc, #96]	; (800f038 <ull_setleds+0x90>)
 800efd8:	4620      	mov	r0, r4
 800efda:	f7ff faa7 	bl	800e52c <dwt_modify32bitoffsetreg>
 800efde:	f015 0f02 	tst.w	r5, #2
 800efe2:	d11a      	bne.n	800f01a <ull_setleds+0x72>
 800efe4:	f44f 7388 	mov.w	r3, #272	; 0x110
 800efe8:	2200      	movs	r2, #0
 800efea:	4914      	ldr	r1, [pc, #80]	; (800f03c <ull_setleds+0x94>)
 800efec:	4620      	mov	r0, r4
 800efee:	f7fe fd97 	bl	800db20 <dwt_write32bitoffsetreg>
 800eff2:	e010      	b.n	800f016 <ull_setleds+0x6e>
 800eff4:	2500      	movs	r5, #0
 800eff6:	9500      	str	r5, [sp, #0]
 800eff8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800effc:	462a      	mov	r2, r5
 800effe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f002:	f7ff fa93 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f006:	9500      	str	r5, [sp, #0]
 800f008:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f00c:	462a      	mov	r2, r5
 800f00e:	490b      	ldr	r1, [pc, #44]	; (800f03c <ull_setleds+0x94>)
 800f010:	4620      	mov	r0, r4
 800f012:	f7ff ff8b 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f016:	b003      	add	sp, #12
 800f018:	bd30      	pop	{r4, r5, pc}
 800f01a:	4d08      	ldr	r5, [pc, #32]	; (800f03c <ull_setleds+0x94>)
 800f01c:	4b08      	ldr	r3, [pc, #32]	; (800f040 <ull_setleds+0x98>)
 800f01e:	2200      	movs	r2, #0
 800f020:	4629      	mov	r1, r5
 800f022:	4620      	mov	r0, r4
 800f024:	f7fe fd7c 	bl	800db20 <dwt_write32bitoffsetreg>
 800f028:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f02c:	2200      	movs	r2, #0
 800f02e:	4629      	mov	r1, r5
 800f030:	4620      	mov	r0, r4
 800f032:	f7fe fd75 	bl	800db20 <dwt_write32bitoffsetreg>
 800f036:	e7ee      	b.n	800f016 <ull_setleds+0x6e>
 800f038:	00110004 	.word	0x00110004
 800f03c:	00110018 	.word	0x00110018
 800f040:	000f0110 	.word	0x000f0110

0800f044 <ull_pgf_cal>:
 800f044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f046:	b083      	sub	sp, #12
 800f048:	4604      	mov	r4, r0
 800f04a:	2901      	cmp	r1, #1
 800f04c:	d009      	beq.n	800f062 <ull_pgf_cal+0x1e>
 800f04e:	2014      	movs	r0, #20
 800f050:	f7f1 fc11 	bl	8000876 <deca_usleep>
 800f054:	4620      	mov	r0, r4
 800f056:	f7ff fe8b 	bl	800ed70 <ull_run_pgfcal>
 800f05a:	4605      	mov	r5, r0
 800f05c:	4628      	mov	r0, r5
 800f05e:	b003      	add	sp, #12
 800f060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f062:	4e0f      	ldr	r6, [pc, #60]	; (800f0a0 <ull_pgf_cal+0x5c>)
 800f064:	2200      	movs	r2, #0
 800f066:	4631      	mov	r1, r6
 800f068:	f7fe f891 	bl	800d18e <dwt_read16bitoffsetreg>
 800f06c:	4607      	mov	r7, r0
 800f06e:	f240 1307 	movw	r3, #263	; 0x107
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f078:	2200      	movs	r2, #0
 800f07a:	4631      	mov	r1, r6
 800f07c:	4620      	mov	r0, r4
 800f07e:	f7ff ff55 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f082:	2014      	movs	r0, #20
 800f084:	f7f1 fbf7 	bl	8000876 <deca_usleep>
 800f088:	4620      	mov	r0, r4
 800f08a:	f7ff fe71 	bl	800ed70 <ull_run_pgfcal>
 800f08e:	4605      	mov	r5, r0
 800f090:	2200      	movs	r2, #0
 800f092:	9200      	str	r2, [sp, #0]
 800f094:	463b      	mov	r3, r7
 800f096:	4631      	mov	r1, r6
 800f098:	4620      	mov	r0, r4
 800f09a:	f7ff ff47 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f09e:	e7dd      	b.n	800f05c <ull_pgf_cal+0x18>
 800f0a0:	00070048 	.word	0x00070048

0800f0a4 <ull_setgpiovalue>:
 800f0a4:	b500      	push	{lr}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	2a01      	cmp	r2, #1
 800f0aa:	d009      	beq.n	800f0c0 <ull_setgpiovalue+0x1c>
 800f0ac:	43cb      	mvns	r3, r1
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	9200      	str	r2, [sp, #0]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	4906      	ldr	r1, [pc, #24]	; (800f0d0 <ull_setgpiovalue+0x2c>)
 800f0b6:	f7ff ff39 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f0ba:	b003      	add	sp, #12
 800f0bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0c0:	9100      	str	r1, [sp, #0]
 800f0c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4901      	ldr	r1, [pc, #4]	; (800f0d0 <ull_setgpiovalue+0x2c>)
 800f0ca:	f7ff ff2f 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f0ce:	e7f4      	b.n	800f0ba <ull_setgpiovalue+0x16>
 800f0d0:	0005000c 	.word	0x0005000c

0800f0d4 <ull_readaccdata>:
 800f0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	4604      	mov	r4, r0
 800f0da:	460f      	mov	r7, r1
 800f0dc:	4616      	mov	r6, r2
 800f0de:	461d      	mov	r5, r3
 800f0e0:	f248 0340 	movw	r3, #32832	; 0x8040
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4918      	ldr	r1, [pc, #96]	; (800f150 <ull_readaccdata+0x7c>)
 800f0ee:	f7ff ff1d 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f0f2:	19aa      	adds	r2, r5, r6
 800f0f4:	f243 0301 	movw	r3, #12289	; 0x3001
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	dc15      	bgt.n	800f128 <ull_readaccdata+0x54>
 800f0fc:	2d7f      	cmp	r5, #127	; 0x7f
 800f0fe:	d91d      	bls.n	800f13c <ull_readaccdata+0x68>
 800f100:	2315      	movs	r3, #21
 800f102:	2200      	movs	r2, #0
 800f104:	4913      	ldr	r1, [pc, #76]	; (800f154 <ull_readaccdata+0x80>)
 800f106:	4620      	mov	r0, r4
 800f108:	f7fe fd0a 	bl	800db20 <dwt_write32bitoffsetreg>
 800f10c:	462b      	mov	r3, r5
 800f10e:	2200      	movs	r2, #0
 800f110:	4911      	ldr	r1, [pc, #68]	; (800f158 <ull_readaccdata+0x84>)
 800f112:	4620      	mov	r0, r4
 800f114:	f7fe fd04 	bl	800db20 <dwt_write32bitoffsetreg>
 800f118:	9700      	str	r7, [sp, #0]
 800f11a:	4633      	mov	r3, r6
 800f11c:	2200      	movs	r2, #0
 800f11e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f122:	4620      	mov	r0, r4
 800f124:	f7fe f813 	bl	800d14e <dwt_readfromdevice>
 800f128:	2200      	movs	r2, #0
 800f12a:	9200      	str	r2, [sp, #0]
 800f12c:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800f130:	4907      	ldr	r1, [pc, #28]	; (800f150 <ull_readaccdata+0x7c>)
 800f132:	4620      	mov	r0, r4
 800f134:	f7ff fefa 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f138:	b003      	add	sp, #12
 800f13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f13c:	9700      	str	r7, [sp, #0]
 800f13e:	4633      	mov	r3, r6
 800f140:	462a      	mov	r2, r5
 800f142:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800f146:	4620      	mov	r0, r4
 800f148:	f7fe f801 	bl	800d14e <dwt_readfromdevice>
 800f14c:	e7ec      	b.n	800f128 <ull_readaccdata+0x54>
 800f14e:	bf00      	nop
 800f150:	00110004 	.word	0x00110004
 800f154:	001f0004 	.word	0x001f0004
 800f158:	001f0008 	.word	0x001f0008

0800f15c <ull_configure>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	b083      	sub	sp, #12
 800f162:	4604      	mov	r4, r0
 800f164:	460d      	mov	r5, r1
 800f166:	f891 9000 	ldrb.w	r9, [r1]
 800f16a:	790b      	ldrb	r3, [r1, #4]
 800f16c:	2b18      	cmp	r3, #24
 800f16e:	d814      	bhi.n	800f19a <ull_configure+0x3e>
 800f170:	78cf      	ldrb	r7, [r1, #3]
 800f172:	2f18      	cmp	r7, #24
 800f174:	bf94      	ite	ls
 800f176:	2700      	movls	r7, #0
 800f178:	2701      	movhi	r7, #1
 800f17a:	b2ff      	uxtb	r7, r7
 800f17c:	79eb      	ldrb	r3, [r5, #7]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	bf0c      	ite	eq
 800f182:	2110      	moveq	r1, #16
 800f184:	2100      	movne	r1, #0
 800f186:	786b      	ldrb	r3, [r5, #1]
 800f188:	3b01      	subs	r3, #1
 800f18a:	2b06      	cmp	r3, #6
 800f18c:	d810      	bhi.n	800f1b0 <ull_configure+0x54>
 800f18e:	e8df f003 	tbb	[pc, r3]
 800f192:	0f06      	.short	0x0f06
 800f194:	0f0c120f 	.word	0x0f0c120f
 800f198:	09          	.byte	0x09
 800f199:	00          	.byte	0x00
 800f19a:	2701      	movs	r7, #1
 800f19c:	e7ed      	b.n	800f17a <ull_configure+0x1e>
 800f19e:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800f1a2:	e00a      	b.n	800f1ba <ull_configure+0x5e>
 800f1a4:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800f1a8:	e007      	b.n	800f1ba <ull_configure+0x5e>
 800f1aa:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800f1ae:	e004      	b.n	800f1ba <ull_configure+0x5e>
 800f1b0:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800f1b4:	e001      	b.n	800f1ba <ull_configure+0x5e>
 800f1b6:	f04f 0a20 	mov.w	sl, #32
 800f1ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1bc:	8a13      	ldrh	r3, [r2, #16]
 800f1be:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f1c2:	8213      	strh	r3, [r2, #16]
 800f1c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f1c6:	79ea      	ldrb	r2, [r5, #7]
 800f1c8:	72da      	strb	r2, [r3, #11]
 800f1ca:	7b2e      	ldrb	r6, [r5, #12]
 800f1cc:	1cb3      	adds	r3, r6, #2
 800f1ce:	2601      	movs	r6, #1
 800f1d0:	409e      	lsls	r6, r3
 800f1d2:	fa1f f886 	uxth.w	r8, r6
 800f1d6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1d8:	4bca      	ldr	r3, [pc, #808]	; (800f504 <ull_configure+0x3a8>)
 800f1da:	fb03 f308 	mul.w	r3, r3, r8
 800f1de:	0bdb      	lsrs	r3, r3, #15
 800f1e0:	8253      	strh	r3, [r2, #18]
 800f1e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f1e4:	7aea      	ldrb	r2, [r5, #11]
 800f1e6:	755a      	strb	r2, [r3, #21]
 800f1e8:	7a2b      	ldrb	r3, [r5, #8]
 800f1ea:	015b      	lsls	r3, r3, #5
 800f1ec:	f003 0320 	and.w	r3, r3, #32
 800f1f0:	7b6a      	ldrb	r2, [r5, #13]
 800f1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1f6:	7aea      	ldrb	r2, [r5, #11]
 800f1f8:	0312      	lsls	r2, r2, #12
 800f1fa:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800f1fe:	4313      	orrs	r3, r2
 800f200:	430b      	orrs	r3, r1
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	4bc0      	ldr	r3, [pc, #768]	; (800f508 <ull_configure+0x3ac>)
 800f206:	2200      	movs	r2, #0
 800f208:	2110      	movs	r1, #16
 800f20a:	4620      	mov	r0, r4
 800f20c:	f7ff f98e 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f210:	2f00      	cmp	r7, #0
 800f212:	f040 80fe 	bne.w	800f412 <ull_configure+0x2b6>
 800f216:	7aeb      	ldrb	r3, [r5, #11]
 800f218:	b1bb      	cbz	r3, 800f24a <ull_configure+0xee>
 800f21a:	7b6b      	ldrb	r3, [r5, #13]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	7b28      	ldrb	r0, [r5, #12]
 800f220:	bf94      	ite	ls
 800f222:	2203      	movls	r2, #3
 800f224:	2204      	movhi	r2, #4
 800f226:	2110      	movs	r1, #16
 800f228:	4bb8      	ldr	r3, [pc, #736]	; (800f50c <ull_configure+0x3b0>)
 800f22a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f22e:	f7fd fef3 	bl	800d018 <get_sts_mnth>
 800f232:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800f236:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f23a:	9000      	str	r0, [sp, #0]
 800f23c:	f64f 7380 	movw	r3, #65408	; 0xff80
 800f240:	2202      	movs	r2, #2
 800f242:	49b3      	ldr	r1, [pc, #716]	; (800f510 <ull_configure+0x3b4>)
 800f244:	4620      	mov	r0, r4
 800f246:	f7ff fe71 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f24a:	2394      	movs	r3, #148	; 0x94
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	4bb1      	ldr	r3, [pc, #708]	; (800f514 <ull_configure+0x3b8>)
 800f250:	2200      	movs	r2, #0
 800f252:	49b1      	ldr	r1, [pc, #708]	; (800f518 <ull_configure+0x3bc>)
 800f254:	4620      	mov	r0, r4
 800f256:	f7ff f969 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f25a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f25e:	f340 8103 	ble.w	800f468 <ull_configure+0x30c>
 800f262:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f264:	8a13      	ldrh	r3, [r2, #16]
 800f266:	f043 0320 	orr.w	r3, r3, #32
 800f26a:	8213      	strh	r3, [r2, #16]
 800f26c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f276:	2200      	movs	r2, #0
 800f278:	49a8      	ldr	r1, [pc, #672]	; (800f51c <ull_configure+0x3c0>)
 800f27a:	4620      	mov	r0, r4
 800f27c:	f7ff fe56 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f280:	7b6b      	ldrb	r3, [r5, #13]
 800f282:	2b01      	cmp	r3, #1
 800f284:	f000 80fb 	beq.w	800f47e <ull_configure+0x322>
 800f288:	78ab      	ldrb	r3, [r5, #2]
 800f28a:	f043 0310 	orr.w	r3, r3, #16
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	23fc      	movs	r3, #252	; 0xfc
 800f292:	2200      	movs	r2, #0
 800f294:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f298:	4620      	mov	r0, r4
 800f29a:	f7ff fab7 	bl	800e80c <dwt_modify8bitoffsetreg>
 800f29e:	1e73      	subs	r3, r6, #1
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	f7fe fe1d 	bl	800dee8 <dwt_write8bitoffsetreg>
 800f2ae:	786b      	ldrb	r3, [r5, #1]
 800f2b0:	2b07      	cmp	r3, #7
 800f2b2:	bf0c      	ite	eq
 800f2b4:	2108      	moveq	r1, #8
 800f2b6:	2100      	movne	r1, #0
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f7fe ff1b 	bl	800e0f4 <ull_setplenfine>
 800f2be:	7aeb      	ldrb	r3, [r5, #11]
 800f2c0:	f003 0303 	and.w	r3, r3, #3
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	bf0c      	ite	eq
 800f2c8:	4b95      	ldreq	r3, [pc, #596]	; (800f520 <ull_configure+0x3c4>)
 800f2ca:	4b96      	ldrne	r3, [pc, #600]	; (800f524 <ull_configure+0x3c8>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	4996      	ldr	r1, [pc, #600]	; (800f528 <ull_configure+0x3cc>)
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f7fe fc25 	bl	800db20 <dwt_write32bitoffsetreg>
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4994      	ldr	r1, [pc, #592]	; (800f52c <ull_configure+0x3d0>)
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f7fd ff41 	bl	800d162 <dwt_read32bitoffsetreg>
 800f2e0:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800f2e4:	f020 001f 	bic.w	r0, r0, #31
 800f2e8:	f1b9 0f09 	cmp.w	r9, #9
 800f2ec:	bf08      	it	eq
 800f2ee:	f040 0001 	orreq.w	r0, r0, #1
 800f2f2:	792a      	ldrb	r2, [r5, #4]
 800f2f4:	0212      	lsls	r2, r2, #8
 800f2f6:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800f2fa:	78eb      	ldrb	r3, [r5, #3]
 800f2fc:	00db      	lsls	r3, r3, #3
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	431a      	orrs	r2, r3
 800f302:	796b      	ldrb	r3, [r5, #5]
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	f003 0306 	and.w	r3, r3, #6
 800f30a:	4313      	orrs	r3, r2
 800f30c:	4303      	orrs	r3, r0
 800f30e:	2200      	movs	r2, #0
 800f310:	4986      	ldr	r1, [pc, #536]	; (800f52c <ull_configure+0x3d0>)
 800f312:	4620      	mov	r0, r4
 800f314:	f7fe fc04 	bl	800db20 <dwt_write32bitoffsetreg>
 800f318:	79aa      	ldrb	r2, [r5, #6]
 800f31a:	786b      	ldrb	r3, [r5, #1]
 800f31c:	031b      	lsls	r3, r3, #12
 800f31e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800f328:	2200      	movs	r2, #0
 800f32a:	2120      	movs	r1, #32
 800f32c:	4620      	mov	r0, r4
 800f32e:	f7ff f8fd 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f332:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f336:	b923      	cbnz	r3, 800f342 <ull_configure+0x1e6>
 800f338:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800f33c:	726b      	strb	r3, [r5, #9]
 800f33e:	2300      	movs	r3, #0
 800f340:	72ab      	strb	r3, [r5, #10]
 800f342:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f346:	2202      	movs	r2, #2
 800f348:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f34c:	4620      	mov	r0, r4
 800f34e:	f7fe fb7c 	bl	800da4a <dwt_write16bitoffsetreg>
 800f352:	2202      	movs	r2, #2
 800f354:	4976      	ldr	r1, [pc, #472]	; (800f530 <ull_configure+0x3d4>)
 800f356:	4620      	mov	r0, r4
 800f358:	f7fd ff58 	bl	800d20c <dwt_read8bitoffsetreg>
 800f35c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f35e:	7bdb      	ldrb	r3, [r3, #15]
 800f360:	454b      	cmp	r3, r9
 800f362:	f000 8096 	beq.w	800f492 <ull_configure+0x336>
 800f366:	2803      	cmp	r0, #3
 800f368:	f000 8097 	beq.w	800f49a <ull_configure+0x33e>
 800f36c:	f1b9 0f09 	cmp.w	r9, #9
 800f370:	f000 8098 	beq.w	800f4a4 <ull_configure+0x348>
 800f374:	4b6f      	ldr	r3, [pc, #444]	; (800f534 <ull_configure+0x3d8>)
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f37c:	2200      	movs	r2, #0
 800f37e:	496e      	ldr	r1, [pc, #440]	; (800f538 <ull_configure+0x3dc>)
 800f380:	4620      	mov	r0, r4
 800f382:	f7ff f8d3 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f386:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800f38a:	2200      	movs	r2, #0
 800f38c:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f390:	4620      	mov	r0, r4
 800f392:	f7fe fb5a 	bl	800da4a <dwt_write16bitoffsetreg>
 800f396:	2314      	movs	r3, #20
 800f398:	2201      	movs	r2, #1
 800f39a:	4968      	ldr	r1, [pc, #416]	; (800f53c <ull_configure+0x3e0>)
 800f39c:	4620      	mov	r0, r4
 800f39e:	f7fe fda3 	bl	800dee8 <dwt_write8bitoffsetreg>
 800f3a2:	230e      	movs	r3, #14
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	4966      	ldr	r1, [pc, #408]	; (800f540 <ull_configure+0x3e4>)
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f7fe fd9d 	bl	800dee8 <dwt_write8bitoffsetreg>
 800f3ae:	2381      	movs	r3, #129	; 0x81
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	4964      	ldr	r1, [pc, #400]	; (800f544 <ull_configure+0x3e8>)
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7fe fd97 	bl	800dee8 <dwt_write8bitoffsetreg>
 800f3ba:	2600      	movs	r6, #0
 800f3bc:	9600      	str	r6, [sp, #0]
 800f3be:	23fc      	movs	r3, #252	; 0xfc
 800f3c0:	2203      	movs	r2, #3
 800f3c2:	4961      	ldr	r1, [pc, #388]	; (800f548 <ull_configure+0x3ec>)
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f7ff fa21 	bl	800e80c <dwt_modify8bitoffsetreg>
 800f3ca:	2302      	movs	r3, #2
 800f3cc:	4632      	mov	r2, r6
 800f3ce:	2144      	movs	r1, #68	; 0x44
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f7fe fd89 	bl	800dee8 <dwt_write8bitoffsetreg>
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f7ff fc47 	bl	800ec6c <ull_setdwstate>
 800f3de:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800f3e2:	f04f 0814 	mov.w	r8, #20
 800f3e6:	4637      	mov	r7, r6
 800f3e8:	2644      	movs	r6, #68	; 0x44
 800f3ea:	4640      	mov	r0, r8
 800f3ec:	f7f1 fa43 	bl	8000876 <deca_usleep>
 800f3f0:	463a      	mov	r2, r7
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f7fd ff09 	bl	800d20c <dwt_read8bitoffsetreg>
 800f3fa:	f010 0f02 	tst.w	r0, #2
 800f3fe:	f040 80af 	bne.w	800f560 <ull_configure+0x404>
 800f402:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800f406:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800f40a:	d1ee      	bne.n	800f3ea <ull_configure+0x28e>
 800f40c:	f06f 0001 	mvn.w	r0, #1
 800f410:	e0e6      	b.n	800f5e0 <ull_configure+0x484>
 800f412:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f414:	8a13      	ldrh	r3, [r2, #16]
 800f416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f41a:	8213      	strh	r3, [r2, #16]
 800f41c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800f426:	2200      	movs	r2, #0
 800f428:	493c      	ldr	r1, [pc, #240]	; (800f51c <ull_configure+0x3c0>)
 800f42a:	4620      	mov	r0, r4
 800f42c:	f7ff f87e 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f430:	f240 3306 	movw	r3, #774	; 0x306
 800f434:	2200      	movs	r2, #0
 800f436:	4945      	ldr	r1, [pc, #276]	; (800f54c <ull_configure+0x3f0>)
 800f438:	4620      	mov	r0, r4
 800f43a:	f7fe fb71 	bl	800db20 <dwt_write32bitoffsetreg>
 800f43e:	2300      	movs	r3, #0
 800f440:	461a      	mov	r2, r3
 800f442:	4943      	ldr	r1, [pc, #268]	; (800f550 <ull_configure+0x3f4>)
 800f444:	4620      	mov	r0, r4
 800f446:	f7fe fb6b 	bl	800db20 <dwt_write32bitoffsetreg>
 800f44a:	4b42      	ldr	r3, [pc, #264]	; (800f554 <ull_configure+0x3f8>)
 800f44c:	2200      	movs	r2, #0
 800f44e:	4930      	ldr	r1, [pc, #192]	; (800f510 <ull_configure+0x3b4>)
 800f450:	4620      	mov	r0, r4
 800f452:	f7fe fb65 	bl	800db20 <dwt_write32bitoffsetreg>
 800f456:	239d      	movs	r3, #157	; 0x9d
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	4b2e      	ldr	r3, [pc, #184]	; (800f514 <ull_configure+0x3b8>)
 800f45c:	2200      	movs	r2, #0
 800f45e:	492e      	ldr	r1, [pc, #184]	; (800f518 <ull_configure+0x3bc>)
 800f460:	4620      	mov	r0, r4
 800f462:	f7ff f863 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f466:	e70b      	b.n	800f280 <ull_configure+0x124>
 800f468:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f472:	2200      	movs	r2, #0
 800f474:	4929      	ldr	r1, [pc, #164]	; (800f51c <ull_configure+0x3c0>)
 800f476:	4620      	mov	r0, r4
 800f478:	f7ff fd58 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f47c:	e700      	b.n	800f280 <ull_configure+0x124>
 800f47e:	78ab      	ldrb	r3, [r5, #2]
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	23ec      	movs	r3, #236	; 0xec
 800f484:	2200      	movs	r2, #0
 800f486:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f48a:	4620      	mov	r0, r4
 800f48c:	f7ff f9be 	bl	800e80c <dwt_modify8bitoffsetreg>
 800f490:	e705      	b.n	800f29e <ull_configure+0x142>
 800f492:	2803      	cmp	r0, #3
 800f494:	f47f af6a 	bne.w	800f36c <ull_configure+0x210>
 800f498:	e065      	b.n	800f566 <ull_configure+0x40a>
 800f49a:	2102      	movs	r1, #2
 800f49c:	4620      	mov	r0, r4
 800f49e:	f7ff fbe5 	bl	800ec6c <ull_setdwstate>
 800f4a2:	e763      	b.n	800f36c <ull_configure+0x210>
 800f4a4:	4b2c      	ldr	r3, [pc, #176]	; (800f558 <ull_configure+0x3fc>)
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	4922      	ldr	r1, [pc, #136]	; (800f538 <ull_configure+0x3dc>)
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f7ff f83b 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f4b6:	f640 733c 	movw	r3, #3900	; 0xf3c
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f7fe fac2 	bl	800da4a <dwt_write16bitoffsetreg>
 800f4c6:	e766      	b.n	800f396 <ull_configure+0x23a>
 800f4c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	4911      	ldr	r1, [pc, #68]	; (800f51c <ull_configure+0x3c0>)
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f7ff fd28 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f4dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f4de:	8a13      	ldrh	r3, [r2, #16]
 800f4e0:	f043 0308 	orr.w	r3, r3, #8
 800f4e4:	8213      	strh	r3, [r2, #16]
 800f4e6:	e050      	b.n	800f58a <ull_configure+0x42e>
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	9200      	str	r2, [sp, #0]
 800f4ec:	23fe      	movs	r3, #254	; 0xfe
 800f4ee:	491b      	ldr	r1, [pc, #108]	; (800f55c <ull_configure+0x400>)
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f7ff f98b 	bl	800e80c <dwt_modify8bitoffsetreg>
 800f4f6:	e052      	b.n	800f59e <ull_configure+0x442>
 800f4f8:	2101      	movs	r1, #1
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f7ff fda2 	bl	800f044 <ull_pgf_cal>
 800f500:	e06b      	b.n	800f5da <ull_configure+0x47e>
 800f502:	bf00      	nop
 800f504:	00026668 	.word	0x00026668
 800f508:	fffc4fcf 	.word	0xfffc4fcf
 800f50c:	0801224c 	.word	0x0801224c
 800f510:	000e0014 	.word	0x000e0014
 800f514:	bfffff00 	.word	0xbfffff00
 800f518:	000e0018 	.word	0x000e0018
 800f51c:	000b0008 	.word	0x000b0008
 800f520:	af5f35cc 	.word	0xaf5f35cc
 800f524:	af5f584c 	.word	0xaf5f584c
 800f528:	0006000c 	.word	0x0006000c
 800f52c:	00010008 	.word	0x00010008
 800f530:	000f0030 	.word	0x000f0030
 800f534:	1c071134 	.word	0x1c071134
 800f538:	0007001c 	.word	0x0007001c
 800f53c:	00070050 	.word	0x00070050
 800f540:	00070018 	.word	0x00070018
 800f544:	00090008 	.word	0x00090008
 800f548:	00090004 	.word	0x00090004
 800f54c:	000e000c 	.word	0x000e000c
 800f550:	000e0010 	.word	0x000e0010
 800f554:	000c5a0a 	.word	0x000c5a0a
 800f558:	1c010034 	.word	0x1c010034
 800f55c:	00030018 	.word	0x00030018
 800f560:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f562:	f883 900f 	strb.w	r9, [r3, #15]
 800f566:	792b      	ldrb	r3, [r5, #4]
 800f568:	3b09      	subs	r3, #9
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	2b0f      	cmp	r3, #15
 800f56e:	d8bb      	bhi.n	800f4e8 <ull_configure+0x38c>
 800f570:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f572:	7a1b      	ldrb	r3, [r3, #8]
 800f574:	2b01      	cmp	r3, #1
 800f576:	d0a7      	beq.n	800f4c8 <ull_configure+0x36c>
 800f578:	4649      	mov	r1, r9
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7fe fb9c 	bl	800dcb8 <ull_configmrxlut>
 800f580:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f582:	8a13      	ldrh	r3, [r2, #16]
 800f584:	f023 0308 	bic.w	r3, r3, #8
 800f588:	8213      	strh	r3, [r2, #16]
 800f58a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f58e:	9300      	str	r3, [sp, #0]
 800f590:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800f594:	2200      	movs	r2, #0
 800f596:	4914      	ldr	r1, [pc, #80]	; (800f5e8 <ull_configure+0x48c>)
 800f598:	4620      	mov	r0, r4
 800f59a:	f7ff fcc7 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f59e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800f5a2:	bfcc      	ite	gt
 800f5a4:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800f5a8:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	490d      	ldr	r1, [pc, #52]	; (800f5ec <ull_configure+0x490>)
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f7fe ffb8 	bl	800e52c <dwt_modify32bitoffsetreg>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	23ff      	movs	r3, #255	; 0xff
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	490a      	ldr	r1, [pc, #40]	; (800f5f0 <ull_configure+0x494>)
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f7ff f920 	bl	800e80c <dwt_modify8bitoffsetreg>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4909      	ldr	r1, [pc, #36]	; (800f5f4 <ull_configure+0x498>)
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f7fd fdc6 	bl	800d162 <dwt_read32bitoffsetreg>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d08e      	beq.n	800f4f8 <ull_configure+0x39c>
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7ff f98a 	bl	800e8f4 <ull_adcoffsetscalibration>
 800f5e0:	b003      	add	sp, #12
 800f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e6:	bf00      	nop
 800f5e8:	00030018 	.word	0x00030018
 800f5ec:	00060010 	.word	0x00060010
 800f5f0:	0004000c 	.word	0x0004000c
 800f5f4:	00040014 	.word	0x00040014

0800f5f8 <ull_initialise>:
 800f5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	4605      	mov	r5, r0
 800f600:	460e      	mov	r6, r1
 800f602:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f604:	2b00      	cmp	r3, #0
 800f606:	d05b      	beq.n	800f6c0 <ull_initialise+0xc8>
 800f608:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800f60a:	2300      	movs	r3, #0
 800f60c:	73a3      	strb	r3, [r4, #14]
 800f60e:	2202      	movs	r2, #2
 800f610:	8222      	strh	r2, [r4, #16]
 800f612:	7523      	strb	r3, [r4, #20]
 800f614:	7563      	strb	r3, [r4, #21]
 800f616:	73e3      	strb	r3, [r4, #15]
 800f618:	7263      	strb	r3, [r4, #9]
 800f61a:	72a3      	strb	r3, [r4, #10]
 800f61c:	2104      	movs	r1, #4
 800f61e:	4628      	mov	r0, r5
 800f620:	f7fe fa5c 	bl	800dadc <_dwt_otpread>
 800f624:	4607      	mov	r7, r0
 800f626:	2105      	movs	r1, #5
 800f628:	4628      	mov	r0, r5
 800f62a:	f7fe fa57 	bl	800dadc <_dwt_otpread>
 800f62e:	4680      	mov	r8, r0
 800f630:	210a      	movs	r1, #10
 800f632:	4628      	mov	r0, r5
 800f634:	f7fe fa52 	bl	800dadc <_dwt_otpread>
 800f638:	b12f      	cbz	r7, 800f646 <ull_initialise+0x4e>
 800f63a:	f1b8 0f00 	cmp.w	r8, #0
 800f63e:	d002      	beq.n	800f646 <ull_initialise+0x4e>
 800f640:	b280      	uxth	r0, r0
 800f642:	2800      	cmp	r0, #0
 800f644:	d141      	bne.n	800f6ca <ull_initialise+0xd2>
 800f646:	2120      	movs	r1, #32
 800f648:	4628      	mov	r0, r5
 800f64a:	f7fe fa47 	bl	800dadc <_dwt_otpread>
 800f64e:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800f652:	bf0c      	ite	eq
 800f654:	2301      	moveq	r3, #1
 800f656:	2300      	movne	r3, #0
 800f658:	7223      	strb	r3, [r4, #8]
 800f65a:	f016 0f10 	tst.w	r6, #16
 800f65e:	d143      	bne.n	800f6e8 <ull_initialise+0xf0>
 800f660:	f016 0f20 	tst.w	r6, #32
 800f664:	d146      	bne.n	800f6f4 <ull_initialise+0xfc>
 800f666:	f016 0f40 	tst.w	r6, #64	; 0x40
 800f66a:	d149      	bne.n	800f700 <ull_initialise+0x108>
 800f66c:	f016 0f80 	tst.w	r6, #128	; 0x80
 800f670:	d14d      	bne.n	800f70e <ull_initialise+0x116>
 800f672:	7aa3      	ldrb	r3, [r4, #10]
 800f674:	b90b      	cbnz	r3, 800f67a <ull_initialise+0x82>
 800f676:	2385      	movs	r3, #133	; 0x85
 800f678:	72a3      	strb	r3, [r4, #10]
 800f67a:	7a63      	ldrb	r3, [r4, #9]
 800f67c:	b90b      	cbnz	r3, 800f682 <ull_initialise+0x8a>
 800f67e:	2374      	movs	r3, #116	; 0x74
 800f680:	7263      	strb	r3, [r4, #9]
 800f682:	211f      	movs	r1, #31
 800f684:	4628      	mov	r0, r5
 800f686:	f7fe fa29 	bl	800dadc <_dwt_otpread>
 800f68a:	7320      	strb	r0, [r4, #12]
 800f68c:	211e      	movs	r1, #30
 800f68e:	4628      	mov	r0, r5
 800f690:	f7fe fa24 	bl	800dadc <_dwt_otpread>
 800f694:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800f698:	bf12      	itee	ne
 800f69a:	7360      	strbne	r0, [r4, #13]
 800f69c:	232e      	moveq	r3, #46	; 0x2e
 800f69e:	7363      	strbeq	r3, [r4, #13]
 800f6a0:	7b63      	ldrb	r3, [r4, #13]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	4920      	ldr	r1, [pc, #128]	; (800f728 <ull_initialise+0x130>)
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f7fe fc1e 	bl	800dee8 <dwt_write8bitoffsetreg>
 800f6ac:	2135      	movs	r1, #53	; 0x35
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f7fe fa14 	bl	800dadc <_dwt_otpread>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	bb80      	cbnz	r0, 800f71a <ull_initialise+0x122>
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	b002      	add	sp, #8
 800f6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c0:	2028      	movs	r0, #40	; 0x28
 800f6c2:	f002 fa67 	bl	8011b94 <malloc>
 800f6c6:	6528      	str	r0, [r5, #80]	; 0x50
 800f6c8:	e79e      	b.n	800f608 <ull_initialise+0x10>
 800f6ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	4915      	ldr	r1, [pc, #84]	; (800f72c <ull_initialise+0x134>)
 800f6d8:	4628      	mov	r0, r5
 800f6da:	f7ff fc27 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800f6de:	8a23      	ldrh	r3, [r4, #16]
 800f6e0:	f043 0314 	orr.w	r3, r3, #20
 800f6e4:	8223      	strh	r3, [r4, #16]
 800f6e6:	e7ae      	b.n	800f646 <ull_initialise+0x4e>
 800f6e8:	2106      	movs	r1, #6
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	f7fe f9f6 	bl	800dadc <_dwt_otpread>
 800f6f0:	6020      	str	r0, [r4, #0]
 800f6f2:	e7b5      	b.n	800f660 <ull_initialise+0x68>
 800f6f4:	2107      	movs	r1, #7
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	f7fe f9f0 	bl	800dadc <_dwt_otpread>
 800f6fc:	6060      	str	r0, [r4, #4]
 800f6fe:	e7b2      	b.n	800f666 <ull_initialise+0x6e>
 800f700:	2108      	movs	r1, #8
 800f702:	4628      	mov	r0, r5
 800f704:	f7fe f9ea 	bl	800dadc <_dwt_otpread>
 800f708:	0c00      	lsrs	r0, r0, #16
 800f70a:	7260      	strb	r0, [r4, #9]
 800f70c:	e7ae      	b.n	800f66c <ull_initialise+0x74>
 800f70e:	2109      	movs	r1, #9
 800f710:	4628      	mov	r0, r5
 800f712:	f7fe f9e3 	bl	800dadc <_dwt_otpread>
 800f716:	72a0      	strb	r0, [r4, #10]
 800f718:	e7ab      	b.n	800f672 <ull_initialise+0x7a>
 800f71a:	2200      	movs	r2, #0
 800f71c:	4904      	ldr	r1, [pc, #16]	; (800f730 <ull_initialise+0x138>)
 800f71e:	4628      	mov	r0, r5
 800f720:	f7fe f9fe 	bl	800db20 <dwt_write32bitoffsetreg>
 800f724:	e7c8      	b.n	800f6b8 <ull_initialise+0xc0>
 800f726:	bf00      	nop
 800f728:	00090014 	.word	0x00090014
 800f72c:	000b0008 	.word	0x000b0008
 800f730:	00090004 	.word	0x00090004

0800f734 <ull_rxenable>:
 800f734:	b530      	push	{r4, r5, lr}
 800f736:	b083      	sub	sp, #12
 800f738:	4605      	mov	r5, r0
 800f73a:	460c      	mov	r4, r1
 800f73c:	b171      	cbz	r1, 800f75c <ull_rxenable+0x28>
 800f73e:	f021 0302 	bic.w	r3, r1, #2
 800f742:	3b01      	subs	r3, #1
 800f744:	2b0f      	cmp	r3, #15
 800f746:	d862      	bhi.n	800f80e <ull_rxenable+0xda>
 800f748:	e8df f003 	tbb	[pc, r3]
 800f74c:	24616111 	.word	0x24616111
 800f750:	2d616161 	.word	0x2d616161
 800f754:	61616161 	.word	0x61616161
 800f758:	3a616161 	.word	0x3a616161
 800f75c:	2102      	movs	r1, #2
 800f75e:	9101      	str	r1, [sp, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	9200      	str	r2, [sp, #0]
 800f764:	4613      	mov	r3, r2
 800f766:	f7fd fc74 	bl	800d052 <dwt_xfer3xxx>
 800f76a:	4620      	mov	r0, r4
 800f76c:	e010      	b.n	800f790 <ull_rxenable+0x5c>
 800f76e:	2302      	movs	r3, #2
 800f770:	9301      	str	r3, [sp, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	9200      	str	r2, [sp, #0]
 800f776:	4613      	mov	r3, r2
 800f778:	2104      	movs	r1, #4
 800f77a:	f7fd fc6a 	bl	800d052 <dwt_xfer3xxx>
 800f77e:	2203      	movs	r2, #3
 800f780:	2144      	movs	r1, #68	; 0x44
 800f782:	4628      	mov	r0, r5
 800f784:	f7fd fd42 	bl	800d20c <dwt_read8bitoffsetreg>
 800f788:	f010 0f08 	tst.w	r0, #8
 800f78c:	d125      	bne.n	800f7da <ull_rxenable+0xa6>
 800f78e:	2000      	movs	r0, #0
 800f790:	b003      	add	sp, #12
 800f792:	bd30      	pop	{r4, r5, pc}
 800f794:	2302      	movs	r3, #2
 800f796:	9301      	str	r3, [sp, #4]
 800f798:	2200      	movs	r2, #0
 800f79a:	9200      	str	r2, [sp, #0]
 800f79c:	4613      	mov	r3, r2
 800f79e:	210a      	movs	r1, #10
 800f7a0:	f7fd fc57 	bl	800d052 <dwt_xfer3xxx>
 800f7a4:	e7eb      	b.n	800f77e <ull_rxenable+0x4a>
 800f7a6:	2100      	movs	r1, #0
 800f7a8:	f7fe f9cf 	bl	800db4a <_dwt_adjust_delaytime>
 800f7ac:	2302      	movs	r3, #2
 800f7ae:	9301      	str	r3, [sp, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	9200      	str	r2, [sp, #0]
 800f7b4:	4613      	mov	r3, r2
 800f7b6:	2108      	movs	r1, #8
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f7fd fc4a 	bl	800d052 <dwt_xfer3xxx>
 800f7be:	e7de      	b.n	800f77e <ull_rxenable+0x4a>
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	f7fe f9c2 	bl	800db4a <_dwt_adjust_delaytime>
 800f7c6:	2302      	movs	r3, #2
 800f7c8:	9301      	str	r3, [sp, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	9200      	str	r2, [sp, #0]
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	2106      	movs	r1, #6
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f7fd fc3d 	bl	800d052 <dwt_xfer3xxx>
 800f7d8:	e7d1      	b.n	800f77e <ull_rxenable+0x4a>
 800f7da:	2302      	movs	r3, #2
 800f7dc:	9301      	str	r3, [sp, #4]
 800f7de:	2100      	movs	r1, #0
 800f7e0:	9100      	str	r1, [sp, #0]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	460a      	mov	r2, r1
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	f7fd fc33 	bl	800d052 <dwt_xfer3xxx>
 800f7ec:	f014 0f02 	tst.w	r4, #2
 800f7f0:	d002      	beq.n	800f7f8 <ull_rxenable+0xc4>
 800f7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7f6:	e7cb      	b.n	800f790 <ull_rxenable+0x5c>
 800f7f8:	2102      	movs	r1, #2
 800f7fa:	9101      	str	r1, [sp, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	9200      	str	r2, [sp, #0]
 800f800:	4613      	mov	r3, r2
 800f802:	4628      	mov	r0, r5
 800f804:	f7fd fc25 	bl	800d052 <dwt_xfer3xxx>
 800f808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f80c:	e7c0      	b.n	800f790 <ull_rxenable+0x5c>
 800f80e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f812:	e7bd      	b.n	800f790 <ull_rxenable+0x5c>

0800f814 <ull_softreset_no_sema_fcmd>:
 800f814:	b570      	push	{r4, r5, r6, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	4606      	mov	r6, r0
 800f81a:	2502      	movs	r5, #2
 800f81c:	9501      	str	r5, [sp, #4]
 800f81e:	2400      	movs	r4, #0
 800f820:	9400      	str	r4, [sp, #0]
 800f822:	4623      	mov	r3, r4
 800f824:	4622      	mov	r2, r4
 800f826:	2119      	movs	r1, #25
 800f828:	f7fd fc13 	bl	800d052 <dwt_xfer3xxx>
 800f82c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f82e:	739c      	strb	r4, [r3, #14]
 800f830:	821d      	strh	r5, [r3, #16]
 800f832:	751c      	strb	r4, [r3, #20]
 800f834:	755c      	strb	r4, [r3, #21]
 800f836:	73dc      	strb	r4, [r3, #15]
 800f838:	b002      	add	sp, #8
 800f83a:	bd70      	pop	{r4, r5, r6, pc}

0800f83c <ull_softreset_fcmd>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	4606      	mov	r6, r0
 800f842:	2502      	movs	r5, #2
 800f844:	9501      	str	r5, [sp, #4]
 800f846:	2400      	movs	r4, #0
 800f848:	9400      	str	r4, [sp, #0]
 800f84a:	4623      	mov	r3, r4
 800f84c:	4622      	mov	r2, r4
 800f84e:	2118      	movs	r1, #24
 800f850:	f7fd fbff 	bl	800d052 <dwt_xfer3xxx>
 800f854:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f856:	739c      	strb	r4, [r3, #14]
 800f858:	821d      	strh	r5, [r3, #16]
 800f85a:	751c      	strb	r4, [r3, #20]
 800f85c:	755c      	strb	r4, [r3, #21]
 800f85e:	73dc      	strb	r4, [r3, #15]
 800f860:	b002      	add	sp, #8
 800f862:	bd70      	pop	{r4, r5, r6, pc}

0800f864 <dwt_ioctl>:
 800f864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f868:	b08d      	sub	sp, #52	; 0x34
 800f86a:	4606      	mov	r6, r0
 800f86c:	4615      	mov	r5, r2
 800f86e:	461c      	mov	r4, r3
 800f870:	299c      	cmp	r1, #156	; 0x9c
 800f872:	f200 809f 	bhi.w	800f9b4 <dwt_ioctl+0x150>
 800f876:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f87a:	09b9      	.short	0x09b9
 800f87c:	00a109c4 	.word	0x00a109c4
 800f880:	00c100a6 	.word	0x00c100a6
 800f884:	019d0151 	.word	0x019d0151
 800f888:	015c0176 	.word	0x015c0176
 800f88c:	01b301ae 	.word	0x01b301ae
 800f890:	01c501bc 	.word	0x01c501bc
 800f894:	01d701ce 	.word	0x01d701ce
 800f898:	01e501e0 	.word	0x01e501e0
 800f89c:	027201ee 	.word	0x027201ee
 800f8a0:	027e0278 	.word	0x027e0278
 800f8a4:	028f0289 	.word	0x028f0289
 800f8a8:	029a0295 	.word	0x029a0295
 800f8ac:	02a502a0 	.word	0x02a502a0
 800f8b0:	02b702ae 	.word	0x02b702ae
 800f8b4:	02c902c0 	.word	0x02c902c0
 800f8b8:	02f90304 	.word	0x02f90304
 800f8bc:	02d202ee 	.word	0x02d202ee
 800f8c0:	031e02e0 	.word	0x031e02e0
 800f8c4:	021a01f8 	.word	0x021a01f8
 800f8c8:	02420239 	.word	0x02420239
 800f8cc:	08ba0258 	.word	0x08ba0258
 800f8d0:	031508bf 	.word	0x031508bf
 800f8d4:	032c0327 	.word	0x032c0327
 800f8d8:	033c0336 	.word	0x033c0336
 800f8dc:	03520347 	.word	0x03520347
 800f8e0:	0386035b 	.word	0x0386035b
 800f8e4:	03a9039d 	.word	0x03a9039d
 800f8e8:	03b5030a 	.word	0x03b5030a
 800f8ec:	03d203bf 	.word	0x03d203bf
 800f8f0:	040b03f9 	.word	0x040b03f9
 800f8f4:	0457044d 	.word	0x0457044d
 800f8f8:	048c047d 	.word	0x048c047d
 800f8fc:	049504a7 	.word	0x049504a7
 800f900:	04f704b1 	.word	0x04f704b1
 800f904:	052f050f 	.word	0x052f050f
 800f908:	05580544 	.word	0x05580544
 800f90c:	057d0561 	.word	0x057d0561
 800f910:	0692056a 	.word	0x0692056a
 800f914:	071106c1 	.word	0x071106c1
 800f918:	07220717 	.word	0x07220717
 800f91c:	075b073b 	.word	0x075b073b
 800f920:	078f0765 	.word	0x078f0765
 800f924:	07c607bd 	.word	0x07c607bd
 800f928:	07d507cc 	.word	0x07d507cc
 800f92c:	07ef07e2 	.word	0x07ef07e2
 800f930:	080207f9 	.word	0x080207f9
 800f934:	0816080b 	.word	0x0816080b
 800f938:	08270821 	.word	0x08270821
 800f93c:	0855084a 	.word	0x0855084a
 800f940:	086b0860 	.word	0x086b0860
 800f944:	0898088d 	.word	0x0898088d
 800f948:	08c508b1 	.word	0x08c508b1
 800f94c:	0959094f 	.word	0x0959094f
 800f950:	09cc0964 	.word	0x09cc0964
 800f954:	09ae096e 	.word	0x09ae096e
 800f958:	090306b3 	.word	0x090306b3
 800f95c:	0a3a0924 	.word	0x0a3a0924
 800f960:	09d90a2f 	.word	0x09d90a2f
 800f964:	09ef09e4 	.word	0x09ef09e4
 800f968:	0a0509fa 	.word	0x0a0509fa
 800f96c:	0a1b0a10 	.word	0x0a1b0a10
 800f970:	0c320a24 	.word	0x0c320a24
 800f974:	0ca30c69 	.word	0x0ca30c69
 800f978:	0e2d0cc5 	.word	0x0e2d0cc5
 800f97c:	0a4a0e41 	.word	0x0a4a0e41
 800f980:	0b890b57 	.word	0x0b890b57
 800f984:	0b970b93 	.word	0x0b970b93
 800f988:	0ba50b9b 	.word	0x0ba50b9b
 800f98c:	0bc10bb7 	.word	0x0bc10bb7
 800f990:	0be80bd4 	.word	0x0be80bd4
 800f994:	0cdb0c22 	.word	0x0cdb0c22
 800f998:	0cfd0ce5 	.word	0x0cfd0ce5
 800f99c:	0d2d0d18 	.word	0x0d2d0d18
 800f9a0:	0d890d4d 	.word	0x0d890d4d
 800f9a4:	0db70da1 	.word	0x0db70da1
 800f9a8:	0efc0dc7 	.word	0x0efc0dc7
 800f9ac:	0dec0df6 	.word	0x0dec0df6
 800f9b0:	0e000e08 	.word	0x0e000e08
 800f9b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f9b8:	f001 be5c 	b.w	8011674 <dwt_ioctl+0x1e10>
 800f9bc:	f7fd fb28 	bl	800d010 <ull_wakeup_ic>
 800f9c0:	2500      	movs	r5, #0
 800f9c2:	f001 be57 	b.w	8011674 <dwt_ioctl+0x1e10>
 800f9c6:	2202      	movs	r2, #2
 800f9c8:	49c0      	ldr	r1, [pc, #768]	; (800fccc <dwt_ioctl+0x468>)
 800f9ca:	f7fd fc1f 	bl	800d20c <dwt_read8bitoffsetreg>
 800f9ce:	2803      	cmp	r0, #3
 800f9d0:	d802      	bhi.n	800f9d8 <dwt_ioctl+0x174>
 800f9d2:	2500      	movs	r5, #0
 800f9d4:	f001 be4e 	b.w	8011674 <dwt_ioctl+0x1e10>
 800f9d8:	f7f0 ff24 	bl	8000824 <decamutexon>
 800f9dc:	4604      	mov	r4, r0
 800f9de:	2302      	movs	r3, #2
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	2500      	movs	r5, #0
 800f9e4:	9500      	str	r5, [sp, #0]
 800f9e6:	462b      	mov	r3, r5
 800f9e8:	462a      	mov	r2, r5
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7fd fb30 	bl	800d052 <dwt_xfer3xxx>
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f7f0 ff27 	bl	8000846 <decamutexoff>
 800f9f8:	f001 be3c 	b.w	8011674 <dwt_ioctl+0x1e10>
 800f9fc:	2c00      	cmp	r4, #0
 800f9fe:	f001 863d 	beq.w	801167c <dwt_ioctl+0x1e18>
 800fa02:	7824      	ldrb	r4, [r4, #0]
 800fa04:	f014 0f1d 	tst.w	r4, #29
 800fa08:	d063      	beq.n	800fad2 <dwt_ioctl+0x26e>
 800fa0a:	f014 0f01 	tst.w	r4, #1
 800fa0e:	d025      	beq.n	800fa5c <dwt_ioctl+0x1f8>
 800fa10:	f014 0f02 	tst.w	r4, #2
 800fa14:	f04f 0302 	mov.w	r3, #2
 800fa18:	9301      	str	r3, [sp, #4]
 800fa1a:	f04f 0200 	mov.w	r2, #0
 800fa1e:	9200      	str	r2, [sp, #0]
 800fa20:	4613      	mov	r3, r2
 800fa22:	bf14      	ite	ne
 800fa24:	210d      	movne	r1, #13
 800fa26:	2103      	moveq	r1, #3
 800fa28:	f7fd fb13 	bl	800d052 <dwt_xfer3xxx>
 800fa2c:	2203      	movs	r2, #3
 800fa2e:	2144      	movs	r1, #68	; 0x44
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7fd fbeb 	bl	800d20c <dwt_read8bitoffsetreg>
 800fa36:	f010 0f08 	tst.w	r0, #8
 800fa3a:	bf08      	it	eq
 800fa3c:	2500      	moveq	r5, #0
 800fa3e:	f001 8619 	beq.w	8011674 <dwt_ioctl+0x1e10>
 800fa42:	2302      	movs	r3, #2
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	2100      	movs	r1, #0
 800fa48:	9100      	str	r1, [sp, #0]
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	460a      	mov	r2, r1
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7fd faff 	bl	800d052 <dwt_xfer3xxx>
 800fa54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fa58:	f001 be0c 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fa5c:	f014 0f08 	tst.w	r4, #8
 800fa60:	d111      	bne.n	800fa86 <dwt_ioctl+0x222>
 800fa62:	f014 0f10 	tst.w	r4, #16
 800fa66:	d121      	bne.n	800faac <dwt_ioctl+0x248>
 800fa68:	f014 0f02 	tst.w	r4, #2
 800fa6c:	f04f 0302 	mov.w	r3, #2
 800fa70:	9301      	str	r3, [sp, #4]
 800fa72:	f04f 0200 	mov.w	r2, #0
 800fa76:	9200      	str	r2, [sp, #0]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	bf14      	ite	ne
 800fa7c:	2110      	movne	r1, #16
 800fa7e:	2109      	moveq	r1, #9
 800fa80:	f7fd fae7 	bl	800d052 <dwt_xfer3xxx>
 800fa84:	e7d2      	b.n	800fa2c <dwt_ioctl+0x1c8>
 800fa86:	2100      	movs	r1, #0
 800fa88:	f7fe f85f 	bl	800db4a <_dwt_adjust_delaytime>
 800fa8c:	f014 0f02 	tst.w	r4, #2
 800fa90:	f04f 0302 	mov.w	r3, #2
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	f04f 0200 	mov.w	r2, #0
 800fa9a:	9200      	str	r2, [sp, #0]
 800fa9c:	4613      	mov	r3, r2
 800fa9e:	bf14      	ite	ne
 800faa0:	210f      	movne	r1, #15
 800faa2:	2107      	moveq	r1, #7
 800faa4:	4630      	mov	r0, r6
 800faa6:	f7fd fad4 	bl	800d052 <dwt_xfer3xxx>
 800faaa:	e7bf      	b.n	800fa2c <dwt_ioctl+0x1c8>
 800faac:	2101      	movs	r1, #1
 800faae:	f7fe f84c 	bl	800db4a <_dwt_adjust_delaytime>
 800fab2:	f014 0f02 	tst.w	r4, #2
 800fab6:	f04f 0302 	mov.w	r3, #2
 800faba:	9301      	str	r3, [sp, #4]
 800fabc:	f04f 0200 	mov.w	r2, #0
 800fac0:	9200      	str	r2, [sp, #0]
 800fac2:	4613      	mov	r3, r2
 800fac4:	bf14      	ite	ne
 800fac6:	210e      	movne	r1, #14
 800fac8:	2105      	moveq	r1, #5
 800faca:	4630      	mov	r0, r6
 800facc:	f7fd fac1 	bl	800d052 <dwt_xfer3xxx>
 800fad0:	e7ac      	b.n	800fa2c <dwt_ioctl+0x1c8>
 800fad2:	f014 0f20 	tst.w	r4, #32
 800fad6:	d010      	beq.n	800fafa <dwt_ioctl+0x296>
 800fad8:	f014 0f02 	tst.w	r4, #2
 800fadc:	f04f 0302 	mov.w	r3, #2
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	f04f 0500 	mov.w	r5, #0
 800fae6:	9500      	str	r5, [sp, #0]
 800fae8:	462b      	mov	r3, r5
 800faea:	462a      	mov	r2, r5
 800faec:	bf14      	ite	ne
 800faee:	2111      	movne	r1, #17
 800faf0:	210b      	moveq	r1, #11
 800faf2:	f7fd faae 	bl	800d052 <dwt_xfer3xxx>
 800faf6:	f001 bdbd 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fafa:	f014 0f02 	tst.w	r4, #2
 800fafe:	f04f 0302 	mov.w	r3, #2
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	f04f 0500 	mov.w	r5, #0
 800fb08:	9500      	str	r5, [sp, #0]
 800fb0a:	462b      	mov	r3, r5
 800fb0c:	462a      	mov	r2, r5
 800fb0e:	bf14      	ite	ne
 800fb10:	210c      	movne	r1, #12
 800fb12:	2101      	moveq	r1, #1
 800fb14:	f7fd fa9d 	bl	800d052 <dwt_xfer3xxx>
 800fb18:	f001 bdac 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fb1c:	2c00      	cmp	r4, #0
 800fb1e:	f001 85af 	beq.w	8011680 <dwt_ioctl+0x1e1c>
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	2200      	movs	r2, #0
 800fb26:	2128      	movs	r1, #40	; 0x28
 800fb28:	f7fd fffa 	bl	800db20 <dwt_write32bitoffsetreg>
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	f001 bda1 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	2200      	movs	r2, #0
 800fb36:	4966      	ldr	r1, [pc, #408]	; (800fcd0 <dwt_ioctl+0x46c>)
 800fb38:	f7fd fff2 	bl	800db20 <dwt_write32bitoffsetreg>
 800fb3c:	6863      	ldr	r3, [r4, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	4964      	ldr	r1, [pc, #400]	; (800fcd4 <dwt_ioctl+0x470>)
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7fd ffec 	bl	800db20 <dwt_write32bitoffsetreg>
 800fb48:	68a3      	ldr	r3, [r4, #8]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	4962      	ldr	r1, [pc, #392]	; (800fcd8 <dwt_ioctl+0x474>)
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f7fd ffe6 	bl	800db20 <dwt_write32bitoffsetreg>
 800fb54:	68e3      	ldr	r3, [r4, #12]
 800fb56:	2200      	movs	r2, #0
 800fb58:	4960      	ldr	r1, [pc, #384]	; (800fcdc <dwt_ioctl+0x478>)
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	f7fd ffe0 	bl	800db20 <dwt_write32bitoffsetreg>
 800fb60:	2500      	movs	r5, #0
 800fb62:	f001 bd87 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fb66:	2c00      	cmp	r4, #0
 800fb68:	f001 858c 	beq.w	8011684 <dwt_ioctl+0x1e20>
 800fb6c:	8823      	ldrh	r3, [r4, #0]
 800fb6e:	6865      	ldr	r5, [r4, #4]
 800fb70:	2d03      	cmp	r5, #3
 800fb72:	f201 8589 	bhi.w	8011688 <dwt_ioctl+0x1e24>
 800fb76:	e8df f005 	tbb	[pc, r5]
 800fb7a:	0802      	.short	0x0802
 800fb7c:	160f      	.short	0x160f
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4957      	ldr	r1, [pc, #348]	; (800fce0 <dwt_ioctl+0x47c>)
 800fb82:	f7fd ff62 	bl	800da4a <dwt_write16bitoffsetreg>
 800fb86:	f001 bd75 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fb8a:	2202      	movs	r2, #2
 800fb8c:	4954      	ldr	r1, [pc, #336]	; (800fce0 <dwt_ioctl+0x47c>)
 800fb8e:	f7fd ff5c 	bl	800da4a <dwt_write16bitoffsetreg>
 800fb92:	2500      	movs	r5, #0
 800fb94:	f001 bd6e 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fb98:	2200      	movs	r2, #0
 800fb9a:	4952      	ldr	r1, [pc, #328]	; (800fce4 <dwt_ioctl+0x480>)
 800fb9c:	f7fd ff55 	bl	800da4a <dwt_write16bitoffsetreg>
 800fba0:	2500      	movs	r5, #0
 800fba2:	f001 bd67 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fba6:	2202      	movs	r2, #2
 800fba8:	494e      	ldr	r1, [pc, #312]	; (800fce4 <dwt_ioctl+0x480>)
 800fbaa:	f7fd ff4e 	bl	800da4a <dwt_write16bitoffsetreg>
 800fbae:	2500      	movs	r5, #0
 800fbb0:	f001 bd60 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fbb4:	2c00      	cmp	r4, #0
 800fbb6:	f001 8569 	beq.w	801168c <dwt_ioctl+0x1e28>
 800fbba:	7823      	ldrb	r3, [r4, #0]
 800fbbc:	005b      	lsls	r3, r3, #1
 800fbbe:	f003 0306 	and.w	r3, r3, #6
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	f06f 0306 	mvn.w	r3, #6
 800fbc8:	2200      	movs	r2, #0
 800fbca:	4947      	ldr	r1, [pc, #284]	; (800fce8 <dwt_ioctl+0x484>)
 800fbcc:	f7fe fcae 	bl	800e52c <dwt_modify32bitoffsetreg>
 800fbd0:	2500      	movs	r5, #0
 800fbd2:	f001 bd4f 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fbd6:	f7fe fccd 	bl	800e574 <ull_enablegpioclocks>
 800fbda:	2500      	movs	r5, #0
 800fbdc:	f001 bd4a 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fbe0:	2c00      	cmp	r4, #0
 800fbe2:	f001 8555 	beq.w	8011690 <dwt_ioctl+0x1e2c>
 800fbe6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbe8:	7b1b      	ldrb	r3, [r3, #12]
 800fbea:	7023      	strb	r3, [r4, #0]
 800fbec:	2500      	movs	r5, #0
 800fbee:	f001 bd41 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fbf2:	2c00      	cmp	r4, #0
 800fbf4:	f001 854e 	beq.w	8011694 <dwt_ioctl+0x1e30>
 800fbf8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbfa:	7a5b      	ldrb	r3, [r3, #9]
 800fbfc:	7023      	strb	r3, [r4, #0]
 800fbfe:	2500      	movs	r5, #0
 800fc00:	f001 bd38 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc04:	2c00      	cmp	r4, #0
 800fc06:	f001 8547 	beq.w	8011698 <dwt_ioctl+0x1e34>
 800fc0a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fc0c:	7a9b      	ldrb	r3, [r3, #10]
 800fc0e:	7023      	strb	r3, [r4, #0]
 800fc10:	2500      	movs	r5, #0
 800fc12:	f001 bd2f 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc16:	2c00      	cmp	r4, #0
 800fc18:	f001 8540 	beq.w	801169c <dwt_ioctl+0x1e38>
 800fc1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	2500      	movs	r5, #0
 800fc24:	f001 bd26 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc28:	2c00      	cmp	r4, #0
 800fc2a:	f001 8539 	beq.w	80116a0 <dwt_ioctl+0x1e3c>
 800fc2e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	6023      	str	r3, [r4, #0]
 800fc34:	2500      	movs	r5, #0
 800fc36:	f001 bd1d 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc3a:	f7fe fae1 	bl	800e200 <ull_signal_rx_buff_free>
 800fc3e:	2500      	movs	r5, #0
 800fc40:	f001 bd18 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc44:	2c00      	cmp	r4, #0
 800fc46:	f001 852d 	beq.w	80116a4 <dwt_ioctl+0x1e40>
 800fc4a:	6821      	ldr	r1, [r4, #0]
 800fc4c:	f7fd ffa3 	bl	800db96 <ull_setrxaftertxdelay>
 800fc50:	2500      	movs	r5, #0
 800fc52:	f001 bd0f 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc56:	2c00      	cmp	r4, #0
 800fc58:	f001 8526 	beq.w	80116a8 <dwt_ioctl+0x1e44>
 800fc5c:	6862      	ldr	r2, [r4, #4]
 800fc5e:	7821      	ldrb	r1, [r4, #0]
 800fc60:	f7fe fde8 	bl	800e834 <ull_enablespicrccheck>
 800fc64:	2500      	movs	r5, #0
 800fc66:	f001 bd05 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc6a:	2c00      	cmp	r4, #0
 800fc6c:	f001 851e 	beq.w	80116ac <dwt_ioctl+0x1e48>
 800fc70:	6865      	ldr	r5, [r4, #4]
 800fc72:	7823      	ldrb	r3, [r4, #0]
 800fc74:	2203      	movs	r2, #3
 800fc76:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800fc7a:	f7fe f935 	bl	800dee8 <dwt_write8bitoffsetreg>
 800fc7e:	b94d      	cbnz	r5, 800fc94 <dwt_ioctl+0x430>
 800fc80:	2200      	movs	r2, #0
 800fc82:	9200      	str	r2, [sp, #0]
 800fc84:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800fc88:	2110      	movs	r1, #16
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f7ff f94e 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800fc90:	f001 bcf0 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fc94:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc9e:	2200      	movs	r2, #0
 800fca0:	2110      	movs	r1, #16
 800fca2:	4630      	mov	r0, r6
 800fca4:	f7fe fc42 	bl	800e52c <dwt_modify32bitoffsetreg>
 800fca8:	2500      	movs	r5, #0
 800fcaa:	f001 bce3 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fcae:	2200      	movs	r2, #0
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	f7fd fa56 	bl	800d162 <dwt_read32bitoffsetreg>
 800fcb6:	68b2      	ldr	r2, [r6, #8]
 800fcb8:	6813      	ldr	r3, [r2, #0]
 800fcba:	4043      	eors	r3, r0
 800fcbc:	6852      	ldr	r2, [r2, #4]
 800fcbe:	4213      	tst	r3, r2
 800fcc0:	bf14      	ite	ne
 800fcc2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800fcc6:	2500      	moveq	r5, #0
 800fcc8:	f001 bcd4 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fccc:	000f0030 	.word	0x000f0030
 800fcd0:	00010054 	.word	0x00010054
 800fcd4:	00010058 	.word	0x00010058
 800fcd8:	0001005c 	.word	0x0001005c
 800fcdc:	00010060 	.word	0x00010060
 800fce0:	0001000c 	.word	0x0001000c
 800fce4:	00010010 	.word	0x00010010
 800fce8:	00010008 	.word	0x00010008
 800fcec:	2c00      	cmp	r4, #0
 800fcee:	f001 84df 	beq.w	80116b0 <dwt_ioctl+0x1e4c>
 800fcf2:	7821      	ldrb	r1, [r4, #0]
 800fcf4:	f7fe fdba 	bl	800e86c <ull_configciadiag>
 800fcf8:	2500      	movs	r5, #0
 800fcfa:	f001 bcbb 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fcfe:	b942      	cbnz	r2, 800fd12 <dwt_ioctl+0x4ae>
 800fd00:	2200      	movs	r2, #0
 800fd02:	9200      	str	r2, [sp, #0]
 800fd04:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800fd08:	49d2      	ldr	r1, [pc, #840]	; (8010054 <dwt_ioctl+0x7f0>)
 800fd0a:	f7ff f90f 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800fd0e:	f001 bcb1 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fd12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	49cd      	ldr	r1, [pc, #820]	; (8010054 <dwt_ioctl+0x7f0>)
 800fd20:	f7ff f904 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800fd24:	2500      	movs	r5, #0
 800fd26:	f001 bca5 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fd2a:	f002 0201 	and.w	r2, r2, #1
 800fd2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd32:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800fd36:	2a00      	cmp	r2, #0
 800fd38:	bf08      	it	eq
 800fd3a:	460b      	moveq	r3, r1
 800fd3c:	02d2      	lsls	r2, r2, #11
 800fd3e:	f015 0f02 	tst.w	r5, #2
 800fd42:	bf12      	itee	ne
 800fd44:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800fd48:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd4c:	b29b      	uxtheq	r3, r3
 800fd4e:	9200      	str	r2, [sp, #0]
 800fd50:	2200      	movs	r2, #0
 800fd52:	49c0      	ldr	r1, [pc, #768]	; (8010054 <dwt_ioctl+0x7f0>)
 800fd54:	f7ff f8ea 	bl	800ef2c <dwt_modify16bitoffsetreg>
 800fd58:	2500      	movs	r5, #0
 800fd5a:	f001 bc8b 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fd5e:	4611      	mov	r1, r2
 800fd60:	f7fd ff2e 	bl	800dbc0 <ull_setfinegraintxseq>
 800fd64:	2500      	movs	r5, #0
 800fd66:	f001 bc85 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	f7fd ff3c 	bl	800dbe8 <ull_setlnapamode>
 800fd70:	2500      	movs	r5, #0
 800fd72:	f001 bc7f 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fd76:	2c00      	cmp	r4, #0
 800fd78:	f001 849c 	beq.w	80116b4 <dwt_ioctl+0x1e50>
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	49b6      	ldr	r1, [pc, #728]	; (8010058 <dwt_ioctl+0x7f4>)
 800fd80:	f7fd fa44 	bl	800d20c <dwt_read8bitoffsetreg>
 800fd84:	7020      	strb	r0, [r4, #0]
 800fd86:	2500      	movs	r5, #0
 800fd88:	f001 bc74 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fd8c:	4621      	mov	r1, r4
 800fd8e:	f7fd ff4b 	bl	800dc28 <ull_configurestskey>
 800fd92:	2500      	movs	r5, #0
 800fd94:	f001 bc6e 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fd98:	4621      	mov	r1, r4
 800fd9a:	f7fd ff69 	bl	800dc70 <ull_configurestsiv>
 800fd9e:	2500      	movs	r5, #0
 800fda0:	f001 bc68 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fda4:	f7fe fd98 	bl	800e8d8 <ull_configurestsloadiv>
 800fda8:	2500      	movs	r5, #0
 800fdaa:	f001 bc63 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fdae:	4611      	mov	r1, r2
 800fdb0:	f7fd ff82 	bl	800dcb8 <ull_configmrxlut>
 800fdb4:	2500      	movs	r5, #0
 800fdb6:	f001 bc5d 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fdba:	f7fe feb3 	bl	800eb24 <ull_restoreconfig>
 800fdbe:	2500      	movs	r5, #0
 800fdc0:	f001 bc58 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fdc4:	2c00      	cmp	r4, #0
 800fdc6:	f001 8477 	beq.w	80116b8 <dwt_ioctl+0x1e54>
 800fdca:	7821      	ldrb	r1, [r4, #0]
 800fdcc:	f7ff f8c8 	bl	800ef60 <ull_configurestsmode>
 800fdd0:	2500      	movs	r5, #0
 800fdd2:	f001 bc4f 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fdd6:	2c00      	cmp	r4, #0
 800fdd8:	f001 8470 	beq.w	80116bc <dwt_ioctl+0x1e58>
 800fddc:	8821      	ldrh	r1, [r4, #0]
 800fdde:	f7fd fe44 	bl	800da6a <ull_setrxantennadelay>
 800fde2:	2500      	movs	r5, #0
 800fde4:	f001 bc46 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fde8:	2c00      	cmp	r4, #0
 800fdea:	f001 8469 	beq.w	80116c0 <dwt_ioctl+0x1e5c>
 800fdee:	f7fd f9e0 	bl	800d1b2 <ull_getrxantennadelay>
 800fdf2:	8020      	strh	r0, [r4, #0]
 800fdf4:	2500      	movs	r5, #0
 800fdf6:	f001 bc3d 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fdfa:	2c00      	cmp	r4, #0
 800fdfc:	f001 8462 	beq.w	80116c4 <dwt_ioctl+0x1e60>
 800fe00:	8821      	ldrh	r1, [r4, #0]
 800fe02:	f7fd fe3a 	bl	800da7a <ull_settxantennadelay>
 800fe06:	2500      	movs	r5, #0
 800fe08:	f001 bc34 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fe0c:	2c00      	cmp	r4, #0
 800fe0e:	f001 845b 	beq.w	80116c8 <dwt_ioctl+0x1e64>
 800fe12:	f7fd f9d5 	bl	800d1c0 <ull_gettxantennadelay>
 800fe16:	8020      	strh	r0, [r4, #0]
 800fe18:	2500      	movs	r5, #0
 800fe1a:	f001 bc2b 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fe1e:	2c00      	cmp	r4, #0
 800fe20:	f001 8454 	beq.w	80116cc <dwt_ioctl+0x1e68>
 800fe24:	88a3      	ldrh	r3, [r4, #4]
 800fe26:	88e2      	ldrh	r2, [r4, #6]
 800fe28:	6821      	ldr	r1, [r4, #0]
 800fe2a:	9100      	str	r1, [sp, #0]
 800fe2c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800fe30:	f7fd fe00 	bl	800da34 <dwt_writetodevice>
 800fe34:	2500      	movs	r5, #0
 800fe36:	f001 bc1d 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fe3a:	2c00      	cmp	r4, #0
 800fe3c:	f001 8448 	beq.w	80116d0 <dwt_ioctl+0x1e6c>
 800fe40:	88a3      	ldrh	r3, [r4, #4]
 800fe42:	88e2      	ldrh	r2, [r4, #6]
 800fe44:	6821      	ldr	r1, [r4, #0]
 800fe46:	9100      	str	r1, [sp, #0]
 800fe48:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800fe4c:	f7fd f97f 	bl	800d14e <dwt_readfromdevice>
 800fe50:	2500      	movs	r5, #0
 800fe52:	f001 bc0f 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fe56:	2c00      	cmp	r4, #0
 800fe58:	f001 843c 	beq.w	80116d4 <dwt_ioctl+0x1e70>
 800fe5c:	88e3      	ldrh	r3, [r4, #6]
 800fe5e:	88a2      	ldrh	r2, [r4, #4]
 800fe60:	6821      	ldr	r1, [r4, #0]
 800fe62:	f7fe f80b 	bl	800de7c <ull_readrxdata>
 800fe66:	2500      	movs	r5, #0
 800fe68:	f001 bc04 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fe6c:	2c00      	cmp	r4, #0
 800fe6e:	f001 8433 	beq.w	80116d8 <dwt_ioctl+0x1e74>
 800fe72:	88e3      	ldrh	r3, [r4, #6]
 800fe74:	6822      	ldr	r2, [r4, #0]
 800fe76:	88a1      	ldrh	r1, [r4, #4]
 800fe78:	f7fe f990 	bl	800e19c <ull_writetxdata>
 800fe7c:	2500      	movs	r5, #0
 800fe7e:	f001 bbf9 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fe82:	4611      	mov	r1, r2
 800fe84:	f7ff fc56 	bl	800f734 <ull_rxenable>
 800fe88:	2500      	movs	r5, #0
 800fe8a:	f001 bbf3 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fe8e:	2c00      	cmp	r4, #0
 800fe90:	f001 8424 	beq.w	80116dc <dwt_ioctl+0x1e78>
 800fe94:	7923      	ldrb	r3, [r4, #4]
 800fe96:	8862      	ldrh	r2, [r4, #2]
 800fe98:	8821      	ldrh	r1, [r4, #0]
 800fe9a:	f7fe fc97 	bl	800e7cc <ull_writetxfctrl>
 800fe9e:	2500      	movs	r5, #0
 800fea0:	f001 bbe8 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fea4:	2c00      	cmp	r4, #0
 800fea6:	f001 841b 	beq.w	80116e0 <dwt_ioctl+0x1e7c>
 800feaa:	f7fd f98f 	bl	800d1cc <ull_readclockoffset>
 800feae:	8020      	strh	r0, [r4, #0]
 800feb0:	2500      	movs	r5, #0
 800feb2:	f001 bbdf 	b.w	8011674 <dwt_ioctl+0x1e10>
 800feb6:	2c00      	cmp	r4, #0
 800feb8:	f001 8414 	beq.w	80116e4 <dwt_ioctl+0x1e80>
 800febc:	f7fd f9b4 	bl	800d228 <ull_readcarrierintegrator>
 800fec0:	6020      	str	r0, [r4, #0]
 800fec2:	2500      	movs	r5, #0
 800fec4:	f001 bbd6 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fec8:	f7fe f866 	bl	800df98 <ull_clearaonconfig>
 800fecc:	2500      	movs	r5, #0
 800fece:	f001 bbd1 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fed2:	2c00      	cmp	r4, #0
 800fed4:	f001 8408 	beq.w	80116e8 <dwt_ioctl+0x1e84>
 800fed8:	8861      	ldrh	r1, [r4, #2]
 800feda:	f7fe fe53 	bl	800eb84 <ull_calcbandwidthadj>
 800fede:	7020      	strb	r0, [r4, #0]
 800fee0:	2500      	movs	r5, #0
 800fee2:	f001 bbc7 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fee6:	4621      	mov	r1, r4
 800fee8:	f7fd f9be 	bl	800d268 <ull_readdiagnostics>
 800feec:	2500      	movs	r5, #0
 800feee:	f001 bbc1 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fef2:	2c00      	cmp	r4, #0
 800fef4:	f001 83fa 	beq.w	80116ec <dwt_ioctl+0x1e88>
 800fef8:	2201      	movs	r2, #1
 800fefa:	2170      	movs	r1, #112	; 0x70
 800fefc:	f7fd f931 	bl	800d162 <dwt_read32bitoffsetreg>
 800ff00:	6020      	str	r0, [r4, #0]
 800ff02:	2500      	movs	r5, #0
 800ff04:	f001 bbb6 	b.w	8011674 <dwt_ioctl+0x1e10>
 800ff08:	2c00      	cmp	r4, #0
 800ff0a:	f001 83f1 	beq.w	80116f0 <dwt_ioctl+0x1e8c>
 800ff0e:	2200      	movs	r2, #0
 800ff10:	2170      	movs	r1, #112	; 0x70
 800ff12:	f7fd f926 	bl	800d162 <dwt_read32bitoffsetreg>
 800ff16:	6020      	str	r0, [r4, #0]
 800ff18:	2500      	movs	r5, #0
 800ff1a:	f001 bbab 	b.w	8011674 <dwt_ioctl+0x1e10>
 800ff1e:	9400      	str	r4, [sp, #0]
 800ff20:	2305      	movs	r3, #5
 800ff22:	2200      	movs	r2, #0
 800ff24:	2170      	movs	r1, #112	; 0x70
 800ff26:	f7fd f912 	bl	800d14e <dwt_readfromdevice>
 800ff2a:	2500      	movs	r5, #0
 800ff2c:	f001 bba2 	b.w	8011674 <dwt_ioctl+0x1e10>
 800ff30:	2c00      	cmp	r4, #0
 800ff32:	f001 83df 	beq.w	80116f4 <dwt_ioctl+0x1e90>
 800ff36:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ff38:	7b9b      	ldrb	r3, [r3, #14]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d015      	beq.n	800ff6a <dwt_ioctl+0x706>
 800ff3e:	2b03      	cmp	r3, #3
 800ff40:	d11a      	bne.n	800ff78 <dwt_ioctl+0x714>
 800ff42:	2216      	movs	r2, #22
 800ff44:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ff48:	f7fd f921 	bl	800d18e <dwt_read16bitoffsetreg>
 800ff4c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800ff50:	b283      	uxth	r3, r0
 800ff52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800ff56:	d004      	beq.n	800ff62 <dwt_ioctl+0x6fe>
 800ff58:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800ff5c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800ff60:	b218      	sxth	r0, r3
 800ff62:	8020      	strh	r0, [r4, #0]
 800ff64:	2500      	movs	r5, #0
 800ff66:	f001 bb85 	b.w	8011674 <dwt_ioctl+0x1e10>
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	493b      	ldr	r1, [pc, #236]	; (801005c <dwt_ioctl+0x7f8>)
 800ff6e:	f7fd f90e 	bl	800d18e <dwt_read16bitoffsetreg>
 800ff72:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800ff76:	e7eb      	b.n	800ff50 <dwt_ioctl+0x6ec>
 800ff78:	2202      	movs	r2, #2
 800ff7a:	4939      	ldr	r1, [pc, #228]	; (8010060 <dwt_ioctl+0x7fc>)
 800ff7c:	f7fd f907 	bl	800d18e <dwt_read16bitoffsetreg>
 800ff80:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800ff84:	e7e4      	b.n	800ff50 <dwt_ioctl+0x6ec>
 800ff86:	9400      	str	r4, [sp, #0]
 800ff88:	2306      	movs	r3, #6
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	4935      	ldr	r1, [pc, #212]	; (8010064 <dwt_ioctl+0x800>)
 800ff8e:	f7fd f8de 	bl	800d14e <dwt_readfromdevice>
 800ff92:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	db06      	blt.n	800ffa8 <dwt_ioctl+0x744>
 800ff9a:	7963      	ldrb	r3, [r4, #5]
 800ff9c:	f003 0301 	and.w	r3, r3, #1
 800ffa0:	7163      	strb	r3, [r4, #5]
 800ffa2:	2500      	movs	r5, #0
 800ffa4:	f001 bb66 	b.w	8011674 <dwt_ioctl+0x1e10>
 800ffa8:	23ff      	movs	r3, #255	; 0xff
 800ffaa:	70a3      	strb	r3, [r4, #2]
 800ffac:	70e3      	strb	r3, [r4, #3]
 800ffae:	7123      	strb	r3, [r4, #4]
 800ffb0:	7163      	strb	r3, [r4, #5]
 800ffb2:	e7f2      	b.n	800ff9a <dwt_ioctl+0x736>
 800ffb4:	2c00      	cmp	r4, #0
 800ffb6:	f001 839f 	beq.w	80116f8 <dwt_ioctl+0x1e94>
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800ffc0:	f7fd f924 	bl	800d20c <dwt_read8bitoffsetreg>
 800ffc4:	7020      	strb	r0, [r4, #0]
 800ffc6:	2500      	movs	r5, #0
 800ffc8:	f001 bb54 	b.w	8011674 <dwt_ioctl+0x1e10>
 800ffcc:	2c00      	cmp	r4, #0
 800ffce:	f001 8395 	beq.w	80116fc <dwt_ioctl+0x1e98>
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800ffd8:	f7fd f918 	bl	800d20c <dwt_read8bitoffsetreg>
 800ffdc:	7020      	strb	r0, [r4, #0]
 800ffde:	2500      	movs	r5, #0
 800ffe0:	f001 bb48 	b.w	8011674 <dwt_ioctl+0x1e10>
 800ffe4:	2c00      	cmp	r4, #0
 800ffe6:	f001 838b 	beq.w	8011700 <dwt_ioctl+0x1e9c>
 800ffea:	88a2      	ldrh	r2, [r4, #4]
 800ffec:	6821      	ldr	r1, [r4, #0]
 800ffee:	f7fe fb17 	bl	800e620 <_dwt_otpprogword32>
 800fff2:	2500      	movs	r5, #0
 800fff4:	f001 bb3e 	b.w	8011674 <dwt_ioctl+0x1e10>
 800fff8:	2c00      	cmp	r4, #0
 800fffa:	f001 8383 	beq.w	8011704 <dwt_ioctl+0x1ea0>
 800fffe:	6825      	ldr	r5, [r4, #0]
 8010000:	88a4      	ldrh	r4, [r4, #4]
 8010002:	4622      	mov	r2, r4
 8010004:	4629      	mov	r1, r5
 8010006:	f7fe fb0b 	bl	800e620 <_dwt_otpprogword32>
 801000a:	4621      	mov	r1, r4
 801000c:	4630      	mov	r0, r6
 801000e:	f7fd fd65 	bl	800dadc <_dwt_otpread>
 8010012:	1a2d      	subs	r5, r5, r0
 8010014:	bf18      	it	ne
 8010016:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 801001a:	f001 bb2b 	b.w	8011674 <dwt_ioctl+0x1e10>
 801001e:	2a02      	cmp	r2, #2
 8010020:	d00f      	beq.n	8010042 <dwt_ioctl+0x7de>
 8010022:	4c11      	ldr	r4, [pc, #68]	; (8010068 <dwt_ioctl+0x804>)
 8010024:	2300      	movs	r3, #0
 8010026:	461a      	mov	r2, r3
 8010028:	4621      	mov	r1, r4
 801002a:	4630      	mov	r0, r6
 801002c:	f7fd ff5c 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010030:	2302      	movs	r3, #2
 8010032:	2200      	movs	r2, #0
 8010034:	4621      	mov	r1, r4
 8010036:	4630      	mov	r0, r6
 8010038:	f7fd ff56 	bl	800dee8 <dwt_write8bitoffsetreg>
 801003c:	2500      	movs	r5, #0
 801003e:	f001 bb19 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010042:	2300      	movs	r3, #0
 8010044:	9300      	str	r3, [sp, #0]
 8010046:	23fe      	movs	r3, #254	; 0xfe
 8010048:	2201      	movs	r2, #1
 801004a:	4902      	ldr	r1, [pc, #8]	; (8010054 <dwt_ioctl+0x7f0>)
 801004c:	f7fe fbde 	bl	800e80c <dwt_modify8bitoffsetreg>
 8010050:	e7e7      	b.n	8010022 <dwt_ioctl+0x7be>
 8010052:	bf00      	nop
 8010054:	00110008 	.word	0x00110008
 8010058:	0007001c 	.word	0x0007001c
 801005c:	00180014 	.word	0x00180014
 8010060:	000c001c 	.word	0x000c001c
 8010064:	000c0018 	.word	0x000c0018
 8010068:	000a0004 	.word	0x000a0004
 801006c:	2c00      	cmp	r4, #0
 801006e:	f001 834b 	beq.w	8011708 <dwt_ioctl+0x1ea4>
 8010072:	8824      	ldrh	r4, [r4, #0]
 8010074:	b2e2      	uxtb	r2, r4
 8010076:	f44f 7181 	mov.w	r1, #258	; 0x102
 801007a:	f7fd ffe1 	bl	800e040 <ull_aon_write>
 801007e:	0a22      	lsrs	r2, r4, #8
 8010080:	f240 1103 	movw	r1, #259	; 0x103
 8010084:	4630      	mov	r0, r6
 8010086:	f7fd ffdb 	bl	800e040 <ull_aon_write>
 801008a:	2500      	movs	r5, #0
 801008c:	f001 baf2 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010090:	2c00      	cmp	r4, #0
 8010092:	f001 833b 	beq.w	801170c <dwt_ioctl+0x1ea8>
 8010096:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8010408 <dwt_ioctl+0xba4>
 801009a:	2310      	movs	r3, #16
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	23ff      	movs	r3, #255	; 0xff
 80100a0:	2200      	movs	r2, #0
 80100a2:	4641      	mov	r1, r8
 80100a4:	f7fe fbb2 	bl	800e80c <dwt_modify8bitoffsetreg>
 80100a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100ac:	4630      	mov	r0, r6
 80100ae:	f7fd ffa7 	bl	800e000 <ull_aon_read>
 80100b2:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80100b6:	462a      	mov	r2, r5
 80100b8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100bc:	4630      	mov	r0, r6
 80100be:	f7fd ffbf 	bl	800e040 <ull_aon_write>
 80100c2:	f045 0204 	orr.w	r2, r5, #4
 80100c6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100ca:	4630      	mov	r0, r6
 80100cc:	f7fd ffb8 	bl	800e040 <ull_aon_write>
 80100d0:	2002      	movs	r0, #2
 80100d2:	f7f0 fbc5 	bl	8000860 <deca_sleep>
 80100d6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80100da:	4630      	mov	r0, r6
 80100dc:	f7fd ff90 	bl	800e000 <ull_aon_read>
 80100e0:	4607      	mov	r7, r0
 80100e2:	f240 110f 	movw	r1, #271	; 0x10f
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7fd ff8a 	bl	800e000 <ull_aon_read>
 80100ec:	4681      	mov	r9, r0
 80100ee:	462a      	mov	r2, r5
 80100f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100f4:	4630      	mov	r0, r6
 80100f6:	f7fd ffa3 	bl	800e040 <ull_aon_write>
 80100fa:	2500      	movs	r5, #0
 80100fc:	9500      	str	r5, [sp, #0]
 80100fe:	23ef      	movs	r3, #239	; 0xef
 8010100:	462a      	mov	r2, r5
 8010102:	4641      	mov	r1, r8
 8010104:	4630      	mov	r0, r6
 8010106:	f7fe fb81 	bl	800e80c <dwt_modify8bitoffsetreg>
 801010a:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 801010e:	8027      	strh	r7, [r4, #0]
 8010110:	f001 bab0 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010114:	2c00      	cmp	r4, #0
 8010116:	f001 82fb 	beq.w	8011710 <dwt_ioctl+0x1eac>
 801011a:	78a2      	ldrb	r2, [r4, #2]
 801011c:	8821      	ldrh	r1, [r4, #0]
 801011e:	f7fd ffb7 	bl	800e090 <ull_configuresleep>
 8010122:	2500      	movs	r5, #0
 8010124:	f001 baa6 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010128:	2c00      	cmp	r4, #0
 801012a:	f001 82f3 	beq.w	8011714 <dwt_ioctl+0x1eb0>
 801012e:	6824      	ldr	r4, [r4, #0]
 8010130:	f7fd ff32 	bl	800df98 <ull_clearaonconfig>
 8010134:	2001      	movs	r0, #1
 8010136:	f7f0 fb93 	bl	8000860 <deca_sleep>
 801013a:	2303      	movs	r3, #3
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	23ff      	movs	r3, #255	; 0xff
 8010140:	2200      	movs	r2, #0
 8010142:	49af      	ldr	r1, [pc, #700]	; (8010400 <dwt_ioctl+0xb9c>)
 8010144:	4630      	mov	r0, r6
 8010146:	f7fe fb61 	bl	800e80c <dwt_modify8bitoffsetreg>
 801014a:	b97c      	cbnz	r4, 801016c <dwt_ioctl+0x908>
 801014c:	4630      	mov	r0, r6
 801014e:	f7ff fb61 	bl	800f814 <ull_softreset_no_sema_fcmd>
 8010152:	2001      	movs	r0, #1
 8010154:	f7f0 fb84 	bl	8000860 <deca_sleep>
 8010158:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801015a:	2500      	movs	r5, #0
 801015c:	739d      	strb	r5, [r3, #14]
 801015e:	2202      	movs	r2, #2
 8010160:	821a      	strh	r2, [r3, #16]
 8010162:	751d      	strb	r5, [r3, #20]
 8010164:	755d      	strb	r5, [r3, #21]
 8010166:	73dd      	strb	r5, [r3, #15]
 8010168:	f001 ba84 	b.w	8011674 <dwt_ioctl+0x1e10>
 801016c:	4630      	mov	r0, r6
 801016e:	f7ff fb65 	bl	800f83c <ull_softreset_fcmd>
 8010172:	e7ee      	b.n	8010152 <dwt_ioctl+0x8ee>
 8010174:	2c00      	cmp	r4, #0
 8010176:	f001 82cf 	beq.w	8011718 <dwt_ioctl+0x1eb4>
 801017a:	7823      	ldrb	r3, [r4, #0]
 801017c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010180:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010182:	7353      	strb	r3, [r2, #13]
 8010184:	2200      	movs	r2, #0
 8010186:	499f      	ldr	r1, [pc, #636]	; (8010404 <dwt_ioctl+0xba0>)
 8010188:	f7fd feae 	bl	800dee8 <dwt_write8bitoffsetreg>
 801018c:	2500      	movs	r5, #0
 801018e:	f001 ba71 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010192:	2c00      	cmp	r4, #0
 8010194:	f001 82c2 	beq.w	801171c <dwt_ioctl+0x1eb8>
 8010198:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801019a:	7b5b      	ldrb	r3, [r3, #13]
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	2500      	movs	r5, #0
 80101a0:	f001 ba68 	b.w	8011674 <dwt_ioctl+0x1e10>
 80101a4:	2101      	movs	r1, #1
 80101a6:	f7fe f9f5 	bl	800e594 <ull_enable_rf_tx>
 80101aa:	4630      	mov	r0, r6
 80101ac:	f7fe fa26 	bl	800e5fc <ull_enable_rftx_blocks>
 80101b0:	2101      	movs	r1, #1
 80101b2:	4630      	mov	r0, r6
 80101b4:	f7fd fc68 	bl	800da88 <ull_force_clocks>
 80101b8:	220f      	movs	r2, #15
 80101ba:	2101      	movs	r1, #1
 80101bc:	4630      	mov	r0, r6
 80101be:	f7fd fe39 	bl	800de34 <ull_repeated_cw>
 80101c2:	2500      	movs	r5, #0
 80101c4:	f001 ba56 	b.w	8011674 <dwt_ioctl+0x1e10>
 80101c8:	2c00      	cmp	r4, #0
 80101ca:	f001 82a9 	beq.w	8011720 <dwt_ioctl+0x1ebc>
 80101ce:	6862      	ldr	r2, [r4, #4]
 80101d0:	6821      	ldr	r1, [r4, #0]
 80101d2:	f7fd fe2f 	bl	800de34 <ull_repeated_cw>
 80101d6:	2500      	movs	r5, #0
 80101d8:	f001 ba4c 	b.w	8011674 <dwt_ioctl+0x1e10>
 80101dc:	2c00      	cmp	r4, #0
 80101de:	f001 82a1 	beq.w	8011724 <dwt_ioctl+0x1ec0>
 80101e2:	4d89      	ldr	r5, [pc, #548]	; (8010408 <dwt_ioctl+0xba4>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	4629      	mov	r1, r5
 80101e8:	f7fd f810 	bl	800d20c <dwt_read8bitoffsetreg>
 80101ec:	4680      	mov	r8, r0
 80101ee:	2302      	movs	r3, #2
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	23ff      	movs	r3, #255	; 0xff
 80101f4:	2200      	movs	r2, #0
 80101f6:	4629      	mov	r1, r5
 80101f8:	4630      	mov	r0, r6
 80101fa:	f7fe fb07 	bl	800e80c <dwt_modify8bitoffsetreg>
 80101fe:	2304      	movs	r3, #4
 8010200:	2200      	movs	r2, #0
 8010202:	4982      	ldr	r1, [pc, #520]	; (801040c <dwt_ioctl+0xba8>)
 8010204:	4630      	mov	r0, r6
 8010206:	f7fd fe6f 	bl	800dee8 <dwt_write8bitoffsetreg>
 801020a:	2301      	movs	r3, #1
 801020c:	2200      	movs	r2, #0
 801020e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010212:	4630      	mov	r0, r6
 8010214:	f7fd fe68 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010218:	4f7d      	ldr	r7, [pc, #500]	; (8010410 <dwt_ioctl+0xbac>)
 801021a:	2500      	movs	r5, #0
 801021c:	462a      	mov	r2, r5
 801021e:	4639      	mov	r1, r7
 8010220:	4630      	mov	r0, r6
 8010222:	f7fc fff3 	bl	800d20c <dwt_read8bitoffsetreg>
 8010226:	f010 0f01 	tst.w	r0, #1
 801022a:	d0f7      	beq.n	801021c <dwt_ioctl+0x9b8>
 801022c:	2200      	movs	r2, #0
 801022e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010232:	4630      	mov	r0, r6
 8010234:	f7fc ffab 	bl	800d18e <dwt_read16bitoffsetreg>
 8010238:	4605      	mov	r5, r0
 801023a:	2300      	movs	r3, #0
 801023c:	461a      	mov	r2, r3
 801023e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010242:	4630      	mov	r0, r6
 8010244:	f7fd fe50 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010248:	2300      	movs	r3, #0
 801024a:	461a      	mov	r2, r3
 801024c:	496f      	ldr	r1, [pc, #444]	; (801040c <dwt_ioctl+0xba8>)
 801024e:	4630      	mov	r0, r6
 8010250:	f7fd fe4a 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010254:	4643      	mov	r3, r8
 8010256:	2200      	movs	r2, #0
 8010258:	496b      	ldr	r1, [pc, #428]	; (8010408 <dwt_ioctl+0xba4>)
 801025a:	4630      	mov	r0, r6
 801025c:	f7fd fe44 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010260:	8025      	strh	r5, [r4, #0]
 8010262:	2500      	movs	r5, #0
 8010264:	f001 ba06 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010268:	2c00      	cmp	r4, #0
 801026a:	f001 825d 	beq.w	8011728 <dwt_ioctl+0x1ec4>
 801026e:	7923      	ldrb	r3, [r4, #4]
 8010270:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010272:	7a92      	ldrb	r2, [r2, #10]
 8010274:	1a9b      	subs	r3, r3, r2
 8010276:	ee07 3a90 	vmov	s15, r3
 801027a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801027e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8010414 <dwt_ioctl+0xbb0>
 8010282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010286:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 801028a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801028e:	edc4 7a00 	vstr	s15, [r4]
 8010292:	2500      	movs	r5, #0
 8010294:	f001 b9ee 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010298:	2c00      	cmp	r4, #0
 801029a:	f001 8247 	beq.w	801172c <dwt_ioctl+0x1ec8>
 801029e:	7923      	ldrb	r3, [r4, #4]
 80102a0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80102a2:	7a52      	ldrb	r2, [r2, #9]
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	ee07 3a90 	vmov	s15, r3
 80102aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102ae:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8010418 <dwt_ioctl+0xbb4>
 80102b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102b6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80102ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102be:	eddf 6a57 	vldr	s13, [pc, #348]	; 801041c <dwt_ioctl+0xbb8>
 80102c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80102c6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80102ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102ce:	edc4 7a00 	vstr	s15, [r4]
 80102d2:	2500      	movs	r5, #0
 80102d4:	f001 b9ce 	b.w	8011674 <dwt_ioctl+0x1e10>
 80102d8:	2c00      	cmp	r4, #0
 80102da:	f001 8229 	beq.w	8011730 <dwt_ioctl+0x1ecc>
 80102de:	6824      	ldr	r4, [r4, #0]
 80102e0:	2101      	movs	r1, #1
 80102e2:	f7fe f957 	bl	800e594 <ull_enable_rf_tx>
 80102e6:	4630      	mov	r0, r6
 80102e8:	f7fe f988 	bl	800e5fc <ull_enable_rftx_blocks>
 80102ec:	2101      	movs	r1, #1
 80102ee:	4630      	mov	r0, r6
 80102f0:	f7fd fbca 	bl	800da88 <ull_force_clocks>
 80102f4:	4621      	mov	r1, r4
 80102f6:	4630      	mov	r0, r6
 80102f8:	f7fe fca0 	bl	800ec3c <ull_repeated_frames>
 80102fc:	2500      	movs	r5, #0
 80102fe:	f001 b9b9 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010302:	2500      	movs	r5, #0
 8010304:	9500      	str	r5, [sp, #0]
 8010306:	23ef      	movs	r3, #239	; 0xef
 8010308:	462a      	mov	r2, r5
 801030a:	4945      	ldr	r1, [pc, #276]	; (8010420 <dwt_ioctl+0xbbc>)
 801030c:	f7fe fa7e 	bl	800e80c <dwt_modify8bitoffsetreg>
 8010310:	2105      	movs	r1, #5
 8010312:	4630      	mov	r0, r6
 8010314:	f7fd fbb8 	bl	800da88 <ull_force_clocks>
 8010318:	2101      	movs	r1, #1
 801031a:	4630      	mov	r0, r6
 801031c:	f7fd fd6c 	bl	800ddf8 <ull_disable_rf_tx>
 8010320:	4630      	mov	r0, r6
 8010322:	f7fd fd5f 	bl	800dde4 <ull_disable_rftx_blocks>
 8010326:	f001 b9a5 	b.w	8011674 <dwt_ioctl+0x1e10>
 801032a:	2500      	movs	r5, #0
 801032c:	9500      	str	r5, [sp, #0]
 801032e:	23ef      	movs	r3, #239	; 0xef
 8010330:	462a      	mov	r2, r5
 8010332:	493b      	ldr	r1, [pc, #236]	; (8010420 <dwt_ioctl+0xbbc>)
 8010334:	f7fe fa6a 	bl	800e80c <dwt_modify8bitoffsetreg>
 8010338:	f001 b99c 	b.w	8011674 <dwt_ioctl+0x1e10>
 801033c:	2c00      	cmp	r4, #0
 801033e:	f001 81f9 	beq.w	8011734 <dwt_ioctl+0x1ed0>
 8010342:	6821      	ldr	r1, [r4, #0]
 8010344:	f7fe fc7a 	bl	800ec3c <ull_repeated_frames>
 8010348:	2500      	movs	r5, #0
 801034a:	f001 b993 	b.w	8011674 <dwt_ioctl+0x1e10>
 801034e:	2200      	movs	r2, #0
 8010350:	4934      	ldr	r1, [pc, #208]	; (8010424 <dwt_ioctl+0xbc0>)
 8010352:	f7fc ff1c 	bl	800d18e <dwt_read16bitoffsetreg>
 8010356:	f3c0 050b 	ubfx	r5, r0, #0, #12
 801035a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801035e:	bf18      	it	ne
 8010360:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8010364:	b22d      	sxth	r5, r5
 8010366:	8025      	strh	r5, [r4, #0]
 8010368:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801036a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801036e:	1aed      	subs	r5, r5, r3
 8010370:	f001 b980 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010374:	2c00      	cmp	r4, #0
 8010376:	f001 81df 	beq.w	8011738 <dwt_ioctl+0x1ed4>
 801037a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801037e:	7a23      	ldrb	r3, [r4, #8]
 8010380:	f899 2013 	ldrb.w	r2, [r9, #19]
 8010384:	2aff      	cmp	r2, #255	; 0xff
 8010386:	f000 80fe 	beq.w	8010586 <dwt_ioctl+0xd22>
 801038a:	bb93      	cbnz	r3, 80103f2 <dwt_ioctl+0xb8e>
 801038c:	f8d9 1000 	ldr.w	r1, [r9]
 8010390:	f7fd feb8 	bl	800e104 <ull_update_nonce_GCM>
 8010394:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010398:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801039c:	18d1      	adds	r1, r2, r3
 801039e:	f899 2012 	ldrb.w	r2, [r9, #18]
 80103a2:	2a00      	cmp	r2, #0
 80103a4:	d140      	bne.n	8010428 <dwt_ioctl+0xbc4>
 80103a6:	f899 0010 	ldrb.w	r0, [r9, #16]
 80103aa:	2800      	cmp	r0, #0
 80103ac:	bf0b      	itete	eq
 80103ae:	227f      	moveq	r2, #127	; 0x7f
 80103b0:	f44f 6280 	movne.w	r2, #1024	; 0x400
 80103b4:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 80103b8:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 80103bc:	f899 0013 	ldrb.w	r0, [r9, #19]
 80103c0:	1a12      	subs	r2, r2, r0
 80103c2:	3a02      	subs	r2, #2
 80103c4:	4291      	cmp	r1, r2
 80103c6:	f200 80e7 	bhi.w	8010598 <dwt_ioctl+0xd34>
 80103ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80103ce:	9200      	str	r2, [sp, #0]
 80103d0:	2200      	movs	r2, #0
 80103d2:	4629      	mov	r1, r5
 80103d4:	4630      	mov	r0, r6
 80103d6:	f7fd fb2d 	bl	800da34 <dwt_writetodevice>
 80103da:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80103de:	f899 200c 	ldrb.w	r2, [r9, #12]
 80103e2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80103e6:	9100      	str	r1, [sp, #0]
 80103e8:	4629      	mov	r1, r5
 80103ea:	4630      	mov	r0, r6
 80103ec:	f7fd fb22 	bl	800da34 <dwt_writetodevice>
 80103f0:	e02b      	b.n	801044a <dwt_ioctl+0xbe6>
 80103f2:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80103f6:	f8d9 1000 	ldr.w	r1, [r9]
 80103fa:	f7fd fe91 	bl	800e120 <ull_update_nonce_CCM>
 80103fe:	e7c9      	b.n	8010394 <dwt_ioctl+0xb30>
 8010400:	00110004 	.word	0x00110004
 8010404:	00090014 	.word	0x00090014
 8010408:	00070048 	.word	0x00070048
 801040c:	00070034 	.word	0x00070034
 8010410:	00080004 	.word	0x00080004
 8010414:	3f866666 	.word	0x3f866666
 8010418:	3ecccccd 	.word	0x3ecccccd
 801041c:	437f0000 	.word	0x437f0000
 8010420:	000f0028 	.word	0x000f0028
 8010424:	00020008 	.word	0x00020008
 8010428:	2a01      	cmp	r2, #1
 801042a:	f040 80af 	bne.w	801058c <dwt_ioctl+0xd28>
 801042e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8010432:	2b00      	cmp	r3, #0
 8010434:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8010438:	bf08      	it	eq
 801043a:	237f      	moveq	r3, #127	; 0x7f
 801043c:	f899 2013 	ldrb.w	r2, [r9, #19]
 8010440:	1a9b      	subs	r3, r3, r2
 8010442:	3b02      	subs	r3, #2
 8010444:	4299      	cmp	r1, r3
 8010446:	f200 80a4 	bhi.w	8010592 <dwt_ioctl+0xd2e>
 801044a:	f899 2010 	ldrb.w	r2, [r9, #16]
 801044e:	1e53      	subs	r3, r2, #1
 8010450:	b2db      	uxtb	r3, r3
 8010452:	2b01      	cmp	r3, #1
 8010454:	d940      	bls.n	80104d8 <dwt_ioctl+0xc74>
 8010456:	f899 3011 	ldrb.w	r3, [r9, #17]
 801045a:	1e59      	subs	r1, r3, #1
 801045c:	b2c9      	uxtb	r1, r1
 801045e:	2901      	cmp	r1, #1
 8010460:	d947      	bls.n	80104f2 <dwt_ioctl+0xc8e>
 8010462:	2b04      	cmp	r3, #4
 8010464:	d04c      	beq.n	8010500 <dwt_ioctl+0xc9c>
 8010466:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 801046a:	2200      	movs	r2, #0
 801046c:	49ba      	ldr	r1, [pc, #744]	; (8010758 <dwt_ioctl+0xef4>)
 801046e:	4630      	mov	r0, r6
 8010470:	f7fd fb56 	bl	800db20 <dwt_write32bitoffsetreg>
 8010474:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8010478:	4ab8      	ldr	r2, [pc, #736]	; (801075c <dwt_ioctl+0xef8>)
 801047a:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 801047e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010486:	4313      	orrs	r3, r2
 8010488:	2200      	movs	r2, #0
 801048a:	49b5      	ldr	r1, [pc, #724]	; (8010760 <dwt_ioctl+0xefc>)
 801048c:	4630      	mov	r0, r6
 801048e:	f7fd fb47 	bl	800db20 <dwt_write32bitoffsetreg>
 8010492:	2301      	movs	r3, #1
 8010494:	2200      	movs	r2, #0
 8010496:	49b3      	ldr	r1, [pc, #716]	; (8010764 <dwt_ioctl+0xf00>)
 8010498:	4630      	mov	r0, r6
 801049a:	f7fd fd25 	bl	800dee8 <dwt_write8bitoffsetreg>
 801049e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8010768 <dwt_ioctl+0xf04>
 80104a2:	2700      	movs	r7, #0
 80104a4:	463a      	mov	r2, r7
 80104a6:	4641      	mov	r1, r8
 80104a8:	4630      	mov	r0, r6
 80104aa:	f7fc feaf 	bl	800d20c <dwt_read8bitoffsetreg>
 80104ae:	f010 0f05 	tst.w	r0, #5
 80104b2:	d0f7      	beq.n	80104a4 <dwt_ioctl+0xc40>
 80104b4:	4605      	mov	r5, r0
 80104b6:	4603      	mov	r3, r0
 80104b8:	2200      	movs	r2, #0
 80104ba:	49ab      	ldr	r1, [pc, #684]	; (8010768 <dwt_ioctl+0xf04>)
 80104bc:	4630      	mov	r0, r6
 80104be:	f7fd fd13 	bl	800dee8 <dwt_write8bitoffsetreg>
 80104c2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80104c6:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d025      	beq.n	801051a <dwt_ioctl+0xcb6>
 80104ce:	b26b      	sxtb	r3, r5
 80104d0:	7023      	strb	r3, [r4, #0]
 80104d2:	2500      	movs	r5, #0
 80104d4:	f001 b8ce 	b.w	8011674 <dwt_ioctl+0x1e10>
 80104d8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80104da:	7b9b      	ldrb	r3, [r3, #14]
 80104dc:	2b03      	cmp	r3, #3
 80104de:	f001 81af 	beq.w	8011840 <dwt_ioctl+0x1fdc>
 80104e2:	f899 3011 	ldrb.w	r3, [r9, #17]
 80104e6:	1e5a      	subs	r2, r3, #1
 80104e8:	b2d2      	uxtb	r2, r2
 80104ea:	2a01      	cmp	r2, #1
 80104ec:	d912      	bls.n	8010514 <dwt_ioctl+0xcb0>
 80104ee:	2201      	movs	r2, #1
 80104f0:	e7b7      	b.n	8010462 <dwt_ioctl+0xbfe>
 80104f2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80104f4:	7b9b      	ldrb	r3, [r3, #14]
 80104f6:	2b03      	cmp	r3, #3
 80104f8:	bf0c      	ite	eq
 80104fa:	2302      	moveq	r3, #2
 80104fc:	2301      	movne	r3, #1
 80104fe:	e7b2      	b.n	8010466 <dwt_ioctl+0xc02>
 8010500:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8010504:	2910      	cmp	r1, #16
 8010506:	d9ae      	bls.n	8010466 <dwt_ioctl+0xc02>
 8010508:	f06f 0303 	mvn.w	r3, #3
 801050c:	e7e0      	b.n	80104d0 <dwt_ioctl+0xc6c>
 801050e:	2202      	movs	r2, #2
 8010510:	4613      	mov	r3, r2
 8010512:	e7a8      	b.n	8010466 <dwt_ioctl+0xc02>
 8010514:	2201      	movs	r2, #1
 8010516:	4613      	mov	r3, r2
 8010518:	e7a5      	b.n	8010466 <dwt_ioctl+0xc02>
 801051a:	f899 3012 	ldrb.w	r3, [r9, #18]
 801051e:	2b01      	cmp	r3, #1
 8010520:	d1d5      	bne.n	80104ce <dwt_ioctl+0xc6a>
 8010522:	f899 2011 	ldrb.w	r2, [r9, #17]
 8010526:	1e53      	subs	r3, r2, #1
 8010528:	b2db      	uxtb	r3, r3
 801052a:	2b01      	cmp	r3, #1
 801052c:	d91b      	bls.n	8010566 <dwt_ioctl+0xd02>
 801052e:	2a03      	cmp	r2, #3
 8010530:	bf0c      	ite	eq
 8010532:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8010536:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 801053a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801053e:	b112      	cbz	r2, 8010546 <dwt_ioctl+0xce2>
 8010540:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010544:	b9c3      	cbnz	r3, 8010578 <dwt_ioctl+0xd14>
 8010546:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801054a:	2900      	cmp	r1, #0
 801054c:	d0bf      	beq.n	80104ce <dwt_ioctl+0xc6a>
 801054e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d0bb      	beq.n	80104ce <dwt_ioctl+0xc6a>
 8010556:	f899 200c 	ldrb.w	r2, [r9, #12]
 801055a:	9100      	str	r1, [sp, #0]
 801055c:	4639      	mov	r1, r7
 801055e:	4630      	mov	r0, r6
 8010560:	f7fc fdf5 	bl	800d14e <dwt_readfromdevice>
 8010564:	e7b3      	b.n	80104ce <dwt_ioctl+0xc6a>
 8010566:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010568:	7b9b      	ldrb	r3, [r3, #14]
 801056a:	2b03      	cmp	r3, #3
 801056c:	bf0c      	ite	eq
 801056e:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8010572:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8010576:	e7e0      	b.n	801053a <dwt_ioctl+0xcd6>
 8010578:	9200      	str	r2, [sp, #0]
 801057a:	2200      	movs	r2, #0
 801057c:	4639      	mov	r1, r7
 801057e:	4630      	mov	r0, r6
 8010580:	f7fc fde5 	bl	800d14e <dwt_readfromdevice>
 8010584:	e7df      	b.n	8010546 <dwt_ioctl+0xce2>
 8010586:	f06f 0302 	mvn.w	r3, #2
 801058a:	e7a1      	b.n	80104d0 <dwt_ioctl+0xc6c>
 801058c:	f06f 0301 	mvn.w	r3, #1
 8010590:	e79e      	b.n	80104d0 <dwt_ioctl+0xc6c>
 8010592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010596:	e79b      	b.n	80104d0 <dwt_ioctl+0xc6c>
 8010598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801059c:	e798      	b.n	80104d0 <dwt_ioctl+0xc6c>
 801059e:	7a23      	ldrb	r3, [r4, #8]
 80105a0:	79e1      	ldrb	r1, [r4, #7]
 80105a2:	79a2      	ldrb	r2, [r4, #6]
 80105a4:	00d2      	lsls	r2, r2, #3
 80105a6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80105aa:	4313      	orrs	r3, r2
 80105ac:	7962      	ldrb	r2, [r4, #5]
 80105ae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80105b2:	7922      	ldrb	r2, [r4, #4]
 80105b4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80105b8:	78e2      	ldrb	r2, [r4, #3]
 80105ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80105be:	78a2      	ldrb	r2, [r4, #2]
 80105c0:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80105c4:	7862      	ldrb	r2, [r4, #1]
 80105c6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80105ca:	7822      	ldrb	r2, [r4, #0]
 80105cc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	2200      	movs	r2, #0
 80105d4:	4965      	ldr	r1, [pc, #404]	; (801076c <dwt_ioctl+0xf08>)
 80105d6:	f7fd fa38 	bl	800da4a <dwt_write16bitoffsetreg>
 80105da:	2500      	movs	r5, #0
 80105dc:	f001 b84a 	b.w	8011674 <dwt_ioctl+0x1e10>
 80105e0:	2c00      	cmp	r4, #0
 80105e2:	f001 80ab 	beq.w	801173c <dwt_ioctl+0x1ed8>
 80105e6:	7863      	ldrb	r3, [r4, #1]
 80105e8:	b133      	cbz	r3, 80105f8 <dwt_ioctl+0xd94>
 80105ea:	085b      	lsrs	r3, r3, #1
 80105ec:	3b01      	subs	r3, #1
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	7023      	strb	r3, [r4, #0]
 80105f2:	2500      	movs	r5, #0
 80105f4:	f001 b83e 	b.w	8011674 <dwt_ioctl+0x1e10>
 80105f8:	2300      	movs	r3, #0
 80105fa:	e7f9      	b.n	80105f0 <dwt_ioctl+0xd8c>
 80105fc:	2200      	movs	r2, #0
 80105fe:	495c      	ldr	r1, [pc, #368]	; (8010770 <dwt_ioctl+0xf0c>)
 8010600:	f7fc fdaf 	bl	800d162 <dwt_read32bitoffsetreg>
 8010604:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8010608:	8023      	strh	r3, [r4, #0]
 801060a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801060e:	8060      	strh	r0, [r4, #2]
 8010610:	2200      	movs	r2, #0
 8010612:	4958      	ldr	r1, [pc, #352]	; (8010774 <dwt_ioctl+0xf10>)
 8010614:	4630      	mov	r0, r6
 8010616:	f7fc fda4 	bl	800d162 <dwt_read32bitoffsetreg>
 801061a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801061e:	80a3      	strh	r3, [r4, #4]
 8010620:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8010624:	80e0      	strh	r0, [r4, #6]
 8010626:	2200      	movs	r2, #0
 8010628:	4953      	ldr	r1, [pc, #332]	; (8010778 <dwt_ioctl+0xf14>)
 801062a:	4630      	mov	r0, r6
 801062c:	f7fc fd99 	bl	800d162 <dwt_read32bitoffsetreg>
 8010630:	7220      	strb	r0, [r4, #8]
 8010632:	0c00      	lsrs	r0, r0, #16
 8010634:	7260      	strb	r0, [r4, #9]
 8010636:	2200      	movs	r2, #0
 8010638:	4950      	ldr	r1, [pc, #320]	; (801077c <dwt_ioctl+0xf18>)
 801063a:	4630      	mov	r0, r6
 801063c:	f7fc fd91 	bl	800d162 <dwt_read32bitoffsetreg>
 8010640:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8010644:	81a3      	strh	r3, [r4, #12]
 8010646:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801064a:	8160      	strh	r0, [r4, #10]
 801064c:	2200      	movs	r2, #0
 801064e:	494c      	ldr	r1, [pc, #304]	; (8010780 <dwt_ioctl+0xf1c>)
 8010650:	4630      	mov	r0, r6
 8010652:	f7fc fd86 	bl	800d162 <dwt_read32bitoffsetreg>
 8010656:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801065a:	f8a4 300f 	strh.w	r3, [r4, #15]
 801065e:	73a0      	strb	r0, [r4, #14]
 8010660:	2200      	movs	r2, #0
 8010662:	4948      	ldr	r1, [pc, #288]	; (8010784 <dwt_ioctl+0xf20>)
 8010664:	4630      	mov	r0, r6
 8010666:	f7fc fd7c 	bl	800d162 <dwt_read32bitoffsetreg>
 801066a:	7460      	strb	r0, [r4, #17]
 801066c:	0c00      	lsrs	r0, r0, #16
 801066e:	74a0      	strb	r0, [r4, #18]
 8010670:	2200      	movs	r2, #0
 8010672:	4945      	ldr	r1, [pc, #276]	; (8010788 <dwt_ioctl+0xf24>)
 8010674:	4630      	mov	r0, r6
 8010676:	f7fc fd74 	bl	800d162 <dwt_read32bitoffsetreg>
 801067a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801067e:	f8a4 3013 	strh.w	r3, [r4, #19]
 8010682:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8010686:	f8a4 0015 	strh.w	r0, [r4, #21]
 801068a:	2200      	movs	r2, #0
 801068c:	493f      	ldr	r1, [pc, #252]	; (801078c <dwt_ioctl+0xf28>)
 801068e:	4630      	mov	r0, r6
 8010690:	f7fc fdbc 	bl	800d20c <dwt_read8bitoffsetreg>
 8010694:	75e0      	strb	r0, [r4, #23]
 8010696:	2500      	movs	r5, #0
 8010698:	f000 bfec 	b.w	8011674 <dwt_ioctl+0x1e10>
 801069c:	4611      	mov	r1, r2
 801069e:	f7fd fc9b 	bl	800dfd8 <ull_configeventcounters>
 80106a2:	2500      	movs	r5, #0
 80106a4:	f000 bfe6 	b.w	8011674 <dwt_ioctl+0x1e10>
 80106a8:	2c00      	cmp	r4, #0
 80106aa:	f001 8049 	beq.w	8011740 <dwt_ioctl+0x1edc>
 80106ae:	8823      	ldrh	r3, [r4, #0]
 80106b0:	2200      	movs	r2, #0
 80106b2:	4937      	ldr	r1, [pc, #220]	; (8010790 <dwt_ioctl+0xf2c>)
 80106b4:	f7fd f9c9 	bl	800da4a <dwt_write16bitoffsetreg>
 80106b8:	2500      	movs	r5, #0
 80106ba:	f000 bfdb 	b.w	8011674 <dwt_ioctl+0x1e10>
 80106be:	2c00      	cmp	r4, #0
 80106c0:	f001 8040 	beq.w	8011744 <dwt_ioctl+0x1ee0>
 80106c4:	6825      	ldr	r5, [r4, #0]
 80106c6:	b935      	cbnz	r5, 80106d6 <dwt_ioctl+0xe72>
 80106c8:	2300      	movs	r3, #0
 80106ca:	461a      	mov	r2, r3
 80106cc:	4931      	ldr	r1, [pc, #196]	; (8010794 <dwt_ioctl+0xf30>)
 80106ce:	f7fd f9bc 	bl	800da4a <dwt_write16bitoffsetreg>
 80106d2:	f000 bfcf 	b.w	8011674 <dwt_ioctl+0x1e10>
 80106d6:	7962      	ldrb	r2, [r4, #5]
 80106d8:	7923      	ldrb	r3, [r4, #4]
 80106da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80106de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80106e2:	2200      	movs	r2, #0
 80106e4:	492b      	ldr	r1, [pc, #172]	; (8010794 <dwt_ioctl+0xf30>)
 80106e6:	f7fd f9b0 	bl	800da4a <dwt_write16bitoffsetreg>
 80106ea:	2500      	movs	r5, #0
 80106ec:	f000 bfc2 	b.w	8011674 <dwt_ioctl+0x1e10>
 80106f0:	2c00      	cmp	r4, #0
 80106f2:	f001 8029 	beq.w	8011748 <dwt_ioctl+0x1ee4>
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	b94b      	cbnz	r3, 801070e <dwt_ioctl+0xeaa>
 80106fa:	2500      	movs	r5, #0
 80106fc:	9500      	str	r5, [sp, #0]
 80106fe:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8010702:	462a      	mov	r2, r5
 8010704:	2110      	movs	r1, #16
 8010706:	f7fe fc11 	bl	800ef2c <dwt_modify16bitoffsetreg>
 801070a:	f000 bfb3 	b.w	8011674 <dwt_ioctl+0x1e10>
 801070e:	2200      	movs	r2, #0
 8010710:	2134      	movs	r1, #52	; 0x34
 8010712:	f7fd fa05 	bl	800db20 <dwt_write32bitoffsetreg>
 8010716:	f44f 7300 	mov.w	r3, #512	; 0x200
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010720:	2200      	movs	r2, #0
 8010722:	2110      	movs	r1, #16
 8010724:	4630      	mov	r0, r6
 8010726:	f7fe fc01 	bl	800ef2c <dwt_modify16bitoffsetreg>
 801072a:	2500      	movs	r5, #0
 801072c:	f000 bfa2 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010730:	2c00      	cmp	r4, #0
 8010732:	f001 800b 	beq.w	801174c <dwt_ioctl+0x1ee8>
 8010736:	8861      	ldrh	r1, [r4, #2]
 8010738:	f7fd fc62 	bl	800e000 <ull_aon_read>
 801073c:	7020      	strb	r0, [r4, #0]
 801073e:	2500      	movs	r5, #0
 8010740:	f000 bf98 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010744:	2c00      	cmp	r4, #0
 8010746:	f001 8003 	beq.w	8011750 <dwt_ioctl+0x1eec>
 801074a:	78a2      	ldrb	r2, [r4, #2]
 801074c:	8821      	ldrh	r1, [r4, #0]
 801074e:	f7fd fc77 	bl	800e040 <ull_aon_write>
 8010752:	2500      	movs	r5, #0
 8010754:	f000 bf8e 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010758:	00010044 	.word	0x00010044
 801075c:	0001ff80 	.word	0x0001ff80
 8010760:	00010048 	.word	0x00010048
 8010764:	0001004c 	.word	0x0001004c
 8010768:	00010050 	.word	0x00010050
 801076c:	00010030 	.word	0x00010030
 8010770:	000f0004 	.word	0x000f0004
 8010774:	000f0008 	.word	0x000f0008
 8010778:	000f000c 	.word	0x000f000c
 801077c:	000f0010 	.word	0x000f0010
 8010780:	000f0014 	.word	0x000f0014
 8010784:	000f0018 	.word	0x000f0018
 8010788:	000f001c 	.word	0x000f001c
 801078c:	000f0020 	.word	0x000f0020
 8010790:	00060004 	.word	0x00060004
 8010794:	0011001c 	.word	0x0011001c
 8010798:	4bd5      	ldr	r3, [pc, #852]	; (8010af0 <dwt_ioctl+0x128c>)
 801079a:	4ad6      	ldr	r2, [pc, #856]	; (8010af4 <dwt_ioctl+0x1290>)
 801079c:	2d01      	cmp	r5, #1
 801079e:	bf18      	it	ne
 80107a0:	4613      	movne	r3, r2
 80107a2:	2d01      	cmp	r5, #1
 80107a4:	49d4      	ldr	r1, [pc, #848]	; (8010af8 <dwt_ioctl+0x1294>)
 80107a6:	bf18      	it	ne
 80107a8:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 80107ac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80107ae:	7b92      	ldrb	r2, [r2, #14]
 80107b0:	2a01      	cmp	r2, #1
 80107b2:	d012      	beq.n	80107da <dwt_ioctl+0xf76>
 80107b4:	2a03      	cmp	r2, #3
 80107b6:	d117      	bne.n	80107e8 <dwt_ioctl+0xf84>
 80107b8:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 80107bc:	3a01      	subs	r2, #1
 80107be:	441a      	add	r2, r3
 80107c0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80107c4:	f7fc fce3 	bl	800d18e <dwt_read16bitoffsetreg>
 80107c8:	09c0      	lsrs	r0, r0, #7
 80107ca:	8020      	strh	r0, [r4, #0]
 80107cc:	8825      	ldrh	r5, [r4, #0]
 80107ce:	3500      	adds	r5, #0
 80107d0:	bf18      	it	ne
 80107d2:	2501      	movne	r5, #1
 80107d4:	426d      	negs	r5, r5
 80107d6:	f000 bf4d 	b.w	8011674 <dwt_ioctl+0x1e10>
 80107da:	2202      	movs	r2, #2
 80107dc:	4619      	mov	r1, r3
 80107de:	f7fc fcd6 	bl	800d18e <dwt_read16bitoffsetreg>
 80107e2:	09c0      	lsrs	r0, r0, #7
 80107e4:	8020      	strh	r0, [r4, #0]
 80107e6:	e7f1      	b.n	80107cc <dwt_ioctl+0xf68>
 80107e8:	2202      	movs	r2, #2
 80107ea:	f7fc fcd0 	bl	800d18e <dwt_read16bitoffsetreg>
 80107ee:	09c0      	lsrs	r0, r0, #7
 80107f0:	8020      	strh	r0, [r4, #0]
 80107f2:	e7eb      	b.n	80107cc <dwt_ioctl+0xf68>
 80107f4:	2c00      	cmp	r4, #0
 80107f6:	f000 87ad 	beq.w	8011754 <dwt_ioctl+0x1ef0>
 80107fa:	7821      	ldrb	r1, [r4, #0]
 80107fc:	f7fe fbd4 	bl	800efa8 <ull_setleds>
 8010800:	2500      	movs	r5, #0
 8010802:	f000 bf37 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010806:	4611      	mov	r1, r2
 8010808:	f7fe fa30 	bl	800ec6c <ull_setdwstate>
 801080c:	2500      	movs	r5, #0
 801080e:	f000 bf31 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010812:	9400      	str	r4, [sp, #0]
 8010814:	2304      	movs	r3, #4
 8010816:	2200      	movs	r2, #0
 8010818:	211c      	movs	r1, #28
 801081a:	f7fc fc98 	bl	800d14e <dwt_readfromdevice>
 801081e:	2500      	movs	r5, #0
 8010820:	f000 bf28 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010824:	2c00      	cmp	r4, #0
 8010826:	f000 8797 	beq.w	8011758 <dwt_ioctl+0x1ef4>
 801082a:	2202      	movs	r2, #2
 801082c:	2144      	movs	r1, #68	; 0x44
 801082e:	f7fc fcae 	bl	800d18e <dwt_read16bitoffsetreg>
 8010832:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8010836:	7020      	strb	r0, [r4, #0]
 8010838:	2500      	movs	r5, #0
 801083a:	f000 bf1b 	b.w	8011674 <dwt_ioctl+0x1e10>
 801083e:	2c00      	cmp	r4, #0
 8010840:	f000 878c 	beq.w	801175c <dwt_ioctl+0x1ef8>
 8010844:	2200      	movs	r2, #0
 8010846:	2144      	movs	r1, #68	; 0x44
 8010848:	f7fc fce0 	bl	800d20c <dwt_read8bitoffsetreg>
 801084c:	f000 0001 	and.w	r0, r0, #1
 8010850:	7020      	strb	r0, [r4, #0]
 8010852:	2500      	movs	r5, #0
 8010854:	f000 bf0e 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010858:	2c00      	cmp	r4, #0
 801085a:	f000 8781 	beq.w	8011760 <dwt_ioctl+0x1efc>
 801085e:	8862      	ldrh	r2, [r4, #2]
 8010860:	8821      	ldrh	r1, [r4, #0]
 8010862:	f7fe fa61 	bl	800ed28 <ull_configureframefilter>
 8010866:	2500      	movs	r5, #0
 8010868:	f000 bf04 	b.w	8011674 <dwt_ioctl+0x1e10>
 801086c:	9400      	str	r4, [sp, #0]
 801086e:	2308      	movs	r3, #8
 8010870:	2200      	movs	r2, #0
 8010872:	2104      	movs	r1, #4
 8010874:	f7fd f8de 	bl	800da34 <dwt_writetodevice>
 8010878:	2500      	movs	r5, #0
 801087a:	f000 befb 	b.w	8011674 <dwt_ioctl+0x1e10>
 801087e:	9400      	str	r4, [sp, #0]
 8010880:	2308      	movs	r3, #8
 8010882:	2200      	movs	r2, #0
 8010884:	2104      	movs	r1, #4
 8010886:	f7fc fc62 	bl	800d14e <dwt_readfromdevice>
 801088a:	2500      	movs	r5, #0
 801088c:	f000 bef2 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010890:	2c00      	cmp	r4, #0
 8010892:	f000 8767 	beq.w	8011764 <dwt_ioctl+0x1f00>
 8010896:	8823      	ldrh	r3, [r4, #0]
 8010898:	2202      	movs	r2, #2
 801089a:	210c      	movs	r1, #12
 801089c:	f7fd f8d5 	bl	800da4a <dwt_write16bitoffsetreg>
 80108a0:	2500      	movs	r5, #0
 80108a2:	f000 bee7 	b.w	8011674 <dwt_ioctl+0x1e10>
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	f000 875e 	beq.w	8011768 <dwt_ioctl+0x1f04>
 80108ac:	8823      	ldrh	r3, [r4, #0]
 80108ae:	2200      	movs	r2, #0
 80108b0:	210c      	movs	r1, #12
 80108b2:	f7fd f8ca 	bl	800da4a <dwt_write16bitoffsetreg>
 80108b6:	2500      	movs	r5, #0
 80108b8:	f000 bedc 	b.w	8011674 <dwt_ioctl+0x1e10>
 80108bc:	4621      	mov	r1, r4
 80108be:	f7fd f897 	bl	800d9f0 <ull_readrxtimestamp>
 80108c2:	2500      	movs	r5, #0
 80108c4:	f000 bed6 	b.w	8011674 <dwt_ioctl+0x1e10>
 80108c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80108ca:	7b9b      	ldrb	r3, [r3, #14]
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d00b      	beq.n	80108e8 <dwt_ioctl+0x1084>
 80108d0:	2b03      	cmp	r3, #3
 80108d2:	d112      	bne.n	80108fa <dwt_ioctl+0x1096>
 80108d4:	9400      	str	r4, [sp, #0]
 80108d6:	2305      	movs	r3, #5
 80108d8:	2220      	movs	r2, #32
 80108da:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80108de:	f7fc fc36 	bl	800d14e <dwt_readfromdevice>
 80108e2:	2500      	movs	r5, #0
 80108e4:	f000 bec6 	b.w	8011674 <dwt_ioctl+0x1e10>
 80108e8:	9400      	str	r4, [sp, #0]
 80108ea:	2305      	movs	r3, #5
 80108ec:	2200      	movs	r2, #0
 80108ee:	4983      	ldr	r1, [pc, #524]	; (8010afc <dwt_ioctl+0x1298>)
 80108f0:	f7fc fc2d 	bl	800d14e <dwt_readfromdevice>
 80108f4:	2500      	movs	r5, #0
 80108f6:	f000 bebd 	b.w	8011674 <dwt_ioctl+0x1e10>
 80108fa:	9400      	str	r4, [sp, #0]
 80108fc:	2305      	movs	r3, #5
 80108fe:	2200      	movs	r2, #0
 8010900:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8010904:	f7fc fc23 	bl	800d14e <dwt_readfromdevice>
 8010908:	2500      	movs	r5, #0
 801090a:	f000 beb3 	b.w	8011674 <dwt_ioctl+0x1e10>
 801090e:	2500      	movs	r5, #0
 8010910:	f804 5b01 	strb.w	r5, [r4], #1
 8010914:	9400      	str	r4, [sp, #0]
 8010916:	2304      	movs	r3, #4
 8010918:	462a      	mov	r2, r5
 801091a:	216c      	movs	r1, #108	; 0x6c
 801091c:	f7fc fc17 	bl	800d14e <dwt_readfromdevice>
 8010920:	f000 bea8 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010924:	2c00      	cmp	r4, #0
 8010926:	f000 8721 	beq.w	801176c <dwt_ioctl+0x1f08>
 801092a:	2201      	movs	r2, #1
 801092c:	2160      	movs	r1, #96	; 0x60
 801092e:	f7fc fc18 	bl	800d162 <dwt_read32bitoffsetreg>
 8010932:	6020      	str	r0, [r4, #0]
 8010934:	2500      	movs	r5, #0
 8010936:	f000 be9d 	b.w	8011674 <dwt_ioctl+0x1e10>
 801093a:	2c00      	cmp	r4, #0
 801093c:	f000 8718 	beq.w	8011770 <dwt_ioctl+0x1f0c>
 8010940:	2200      	movs	r2, #0
 8010942:	2160      	movs	r1, #96	; 0x60
 8010944:	f7fc fc0d 	bl	800d162 <dwt_read32bitoffsetreg>
 8010948:	6020      	str	r0, [r4, #0]
 801094a:	2500      	movs	r5, #0
 801094c:	f000 be92 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010950:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010952:	7b9b      	ldrb	r3, [r3, #14]
 8010954:	2b01      	cmp	r3, #1
 8010956:	d00b      	beq.n	8010970 <dwt_ioctl+0x110c>
 8010958:	2b03      	cmp	r3, #3
 801095a:	d112      	bne.n	8010982 <dwt_ioctl+0x111e>
 801095c:	9400      	str	r4, [sp, #0]
 801095e:	2305      	movs	r3, #5
 8010960:	2228      	movs	r2, #40	; 0x28
 8010962:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010966:	f7fc fbf2 	bl	800d14e <dwt_readfromdevice>
 801096a:	2500      	movs	r5, #0
 801096c:	f000 be82 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010970:	9400      	str	r4, [sp, #0]
 8010972:	2305      	movs	r3, #5
 8010974:	2200      	movs	r2, #0
 8010976:	4962      	ldr	r1, [pc, #392]	; (8010b00 <dwt_ioctl+0x129c>)
 8010978:	f7fc fbe9 	bl	800d14e <dwt_readfromdevice>
 801097c:	2500      	movs	r5, #0
 801097e:	f000 be79 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010982:	9400      	str	r4, [sp, #0]
 8010984:	2305      	movs	r3, #5
 8010986:	2200      	movs	r2, #0
 8010988:	495e      	ldr	r1, [pc, #376]	; (8010b04 <dwt_ioctl+0x12a0>)
 801098a:	f7fc fbe0 	bl	800d14e <dwt_readfromdevice>
 801098e:	2500      	movs	r5, #0
 8010990:	f000 be70 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010994:	2c00      	cmp	r4, #0
 8010996:	f000 86ed 	beq.w	8011774 <dwt_ioctl+0x1f10>
 801099a:	2200      	movs	r2, #0
 801099c:	211c      	movs	r1, #28
 801099e:	f7fc fbe0 	bl	800d162 <dwt_read32bitoffsetreg>
 80109a2:	6020      	str	r0, [r4, #0]
 80109a4:	2500      	movs	r5, #0
 80109a6:	f000 be65 	b.w	8011674 <dwt_ioctl+0x1e10>
 80109aa:	2c00      	cmp	r4, #0
 80109ac:	f000 86e4 	beq.w	8011778 <dwt_ioctl+0x1f14>
 80109b0:	8825      	ldrh	r5, [r4, #0]
 80109b2:	6867      	ldr	r7, [r4, #4]
 80109b4:	7a23      	ldrb	r3, [r4, #8]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f000 86e0 	beq.w	801177c <dwt_ioctl+0x1f18>
 80109bc:	463c      	mov	r4, r7
 80109be:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80109c2:	4629      	mov	r1, r5
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7fd f889 	bl	800dadc <_dwt_otpread>
 80109ca:	f844 0b04 	str.w	r0, [r4], #4
 80109ce:	3501      	adds	r5, #1
 80109d0:	b2ad      	uxth	r5, r5
 80109d2:	42bc      	cmp	r4, r7
 80109d4:	d1f5      	bne.n	80109c2 <dwt_ioctl+0x115e>
 80109d6:	2500      	movs	r5, #0
 80109d8:	f000 be4c 	b.w	8011674 <dwt_ioctl+0x1e10>
 80109dc:	2c00      	cmp	r4, #0
 80109de:	f000 86cf 	beq.w	8011780 <dwt_ioctl+0x1f1c>
 80109e2:	7821      	ldrb	r1, [r4, #0]
 80109e4:	f7fd fb86 	bl	800e0f4 <ull_setplenfine>
 80109e8:	2500      	movs	r5, #0
 80109ea:	f000 be43 	b.w	8011674 <dwt_ioctl+0x1e10>
 80109ee:	f7fe f9bf 	bl	800ed70 <ull_run_pgfcal>
 80109f2:	4605      	mov	r5, r0
 80109f4:	f000 be3e 	b.w	8011674 <dwt_ioctl+0x1e10>
 80109f8:	4611      	mov	r1, r2
 80109fa:	f7fe fb23 	bl	800f044 <ull_pgf_cal>
 80109fe:	4605      	mov	r5, r0
 8010a00:	f000 be38 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010a04:	2c00      	cmp	r4, #0
 8010a06:	f000 86bd 	beq.w	8011784 <dwt_ioctl+0x1f20>
 8010a0a:	78a5      	ldrb	r5, [r4, #2]
 8010a0c:	2101      	movs	r1, #1
 8010a0e:	f7fd f83b 	bl	800da88 <ull_force_clocks>
 8010a12:	2100      	movs	r1, #0
 8010a14:	4630      	mov	r0, r6
 8010a16:	f7fd fdbd 	bl	800e594 <ull_enable_rf_tx>
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f7fd fdee 	bl	800e5fc <ull_enable_rftx_blocks>
 8010a20:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8010a24:	2200      	movs	r2, #0
 8010a26:	4938      	ldr	r1, [pc, #224]	; (8010b08 <dwt_ioctl+0x12a4>)
 8010a28:	4630      	mov	r0, r6
 8010a2a:	f7fd fa5d 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010a2e:	2301      	movs	r3, #1
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	23ff      	movs	r3, #255	; 0xff
 8010a34:	2200      	movs	r2, #0
 8010a36:	4935      	ldr	r1, [pc, #212]	; (8010b0c <dwt_ioctl+0x12a8>)
 8010a38:	4630      	mov	r0, r6
 8010a3a:	f7fd fee7 	bl	800e80c <dwt_modify8bitoffsetreg>
 8010a3e:	4f33      	ldr	r7, [pc, #204]	; (8010b0c <dwt_ioctl+0x12a8>)
 8010a40:	2500      	movs	r5, #0
 8010a42:	462a      	mov	r2, r5
 8010a44:	4639      	mov	r1, r7
 8010a46:	4630      	mov	r0, r6
 8010a48:	f7fc fbe0 	bl	800d20c <dwt_read8bitoffsetreg>
 8010a4c:	f010 0f01 	tst.w	r0, #1
 8010a50:	d1f7      	bne.n	8010a42 <dwt_ioctl+0x11de>
 8010a52:	2200      	movs	r2, #0
 8010a54:	492e      	ldr	r1, [pc, #184]	; (8010b10 <dwt_ioctl+0x12ac>)
 8010a56:	4630      	mov	r0, r6
 8010a58:	f7fc fb99 	bl	800d18e <dwt_read16bitoffsetreg>
 8010a5c:	4605      	mov	r5, r0
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f7fd f9c0 	bl	800dde4 <ull_disable_rftx_blocks>
 8010a64:	2100      	movs	r1, #0
 8010a66:	4630      	mov	r0, r6
 8010a68:	f7fd f9c6 	bl	800ddf8 <ull_disable_rf_tx>
 8010a6c:	2105      	movs	r1, #5
 8010a6e:	4630      	mov	r0, r6
 8010a70:	f7fd f80a 	bl	800da88 <ull_force_clocks>
 8010a74:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8010a78:	8025      	strh	r5, [r4, #0]
 8010a7a:	2500      	movs	r5, #0
 8010a7c:	f000 bdfa 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010a80:	2102      	movs	r1, #2
 8010a82:	f7fe f8f3 	bl	800ec6c <ull_setdwstate>
 8010a86:	2101      	movs	r1, #1
 8010a88:	4630      	mov	r0, r6
 8010a8a:	f7fe f8ef 	bl	800ec6c <ull_setdwstate>
 8010a8e:	2432      	movs	r4, #50	; 0x32
 8010a90:	f04f 0814 	mov.w	r8, #20
 8010a94:	2700      	movs	r7, #0
 8010a96:	2544      	movs	r5, #68	; 0x44
 8010a98:	4640      	mov	r0, r8
 8010a9a:	f7ef feec 	bl	8000876 <deca_usleep>
 8010a9e:	463a      	mov	r2, r7
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7fc fbb2 	bl	800d20c <dwt_read8bitoffsetreg>
 8010aa8:	f010 0f02 	tst.w	r0, #2
 8010aac:	d105      	bne.n	8010aba <dwt_ioctl+0x1256>
 8010aae:	1e63      	subs	r3, r4, #1
 8010ab0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8010ab4:	d1f0      	bne.n	8010a98 <dwt_ioctl+0x1234>
 8010ab6:	2501      	movs	r5, #1
 8010ab8:	e000      	b.n	8010abc <dwt_ioctl+0x1258>
 8010aba:	2500      	movs	r5, #0
 8010abc:	426d      	negs	r5, r5
 8010abe:	f000 bdd9 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010ac2:	2c00      	cmp	r4, #0
 8010ac4:	f000 8660 	beq.w	8011788 <dwt_ioctl+0x1f24>
 8010ac8:	7823      	ldrb	r3, [r4, #0]
 8010aca:	031b      	lsls	r3, r3, #12
 8010acc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010ad0:	7862      	ldrb	r2, [r4, #1]
 8010ad2:	2a01      	cmp	r2, #1
 8010ad4:	bf08      	it	eq
 8010ad6:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	490c      	ldr	r1, [pc, #48]	; (8010b14 <dwt_ioctl+0x12b0>)
 8010ae4:	f7fd fd22 	bl	800e52c <dwt_modify32bitoffsetreg>
 8010ae8:	2500      	movs	r5, #0
 8010aea:	f000 bdc3 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010aee:	bf00      	nop
 8010af0:	00180034 	.word	0x00180034
 8010af4:	0018002c 	.word	0x0018002c
 8010af8:	000c0014 	.word	0x000c0014
 8010afc:	00180020 	.word	0x00180020
 8010b00:	00180028 	.word	0x00180028
 8010b04:	000c0008 	.word	0x000c0008
 8010b08:	0007001c 	.word	0x0007001c
 8010b0c:	00080010 	.word	0x00080010
 8010b10:	00080014 	.word	0x00080014
 8010b14:	00070014 	.word	0x00070014
 8010b18:	2c00      	cmp	r4, #0
 8010b1a:	f000 8637 	beq.w	801178c <dwt_ioctl+0x1f28>
 8010b1e:	6862      	ldr	r2, [r4, #4]
 8010b20:	6821      	ldr	r1, [r4, #0]
 8010b22:	f7fd fe35 	bl	800e790 <ull_setgpiomode>
 8010b26:	2500      	movs	r5, #0
 8010b28:	f000 bda4 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010b2c:	2c00      	cmp	r4, #0
 8010b2e:	f000 862f 	beq.w	8011790 <dwt_ioctl+0x1f2c>
 8010b32:	8823      	ldrh	r3, [r4, #0]
 8010b34:	2200      	movs	r2, #0
 8010b36:	49c4      	ldr	r1, [pc, #784]	; (8010e48 <dwt_ioctl+0x15e4>)
 8010b38:	f7fc ff87 	bl	800da4a <dwt_write16bitoffsetreg>
 8010b3c:	2500      	movs	r5, #0
 8010b3e:	f000 bd99 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010b42:	2c00      	cmp	r4, #0
 8010b44:	f000 8626 	beq.w	8011794 <dwt_ioctl+0x1f30>
 8010b48:	6862      	ldr	r2, [r4, #4]
 8010b4a:	8821      	ldrh	r1, [r4, #0]
 8010b4c:	f7fe faaa 	bl	800f0a4 <ull_setgpiovalue>
 8010b50:	2500      	movs	r5, #0
 8010b52:	f000 bd8f 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010b56:	2c00      	cmp	r4, #0
 8010b58:	f000 861e 	beq.w	8011798 <dwt_ioctl+0x1f34>
 8010b5c:	7865      	ldrb	r5, [r4, #1]
 8010b5e:	7823      	ldrb	r3, [r4, #0]
 8010b60:	b18b      	cbz	r3, 8010b86 <dwt_ioctl+0x1322>
 8010b62:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010b64:	2200      	movs	r2, #0
 8010b66:	739a      	strb	r2, [r3, #14]
 8010b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b6c:	2208      	movs	r2, #8
 8010b6e:	b37d      	cbz	r5, 8010bd0 <dwt_ioctl+0x136c>
 8010b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010b74:	9200      	str	r2, [sp, #0]
 8010b76:	2200      	movs	r2, #0
 8010b78:	2110      	movs	r1, #16
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	f7fd fcd6 	bl	800e52c <dwt_modify32bitoffsetreg>
 8010b80:	2500      	movs	r5, #0
 8010b82:	f000 bd77 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010b86:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010b88:	2201      	movs	r2, #1
 8010b8a:	739a      	strb	r2, [r3, #14]
 8010b8c:	2318      	movs	r3, #24
 8010b8e:	2200      	movs	r2, #0
 8010b90:	49ae      	ldr	r1, [pc, #696]	; (8010e4c <dwt_ioctl+0x15e8>)
 8010b92:	f7fc ffc5 	bl	800db20 <dwt_write32bitoffsetreg>
 8010b96:	23e8      	movs	r3, #232	; 0xe8
 8010b98:	2200      	movs	r2, #0
 8010b9a:	49ad      	ldr	r1, [pc, #692]	; (8010e50 <dwt_ioctl+0x15ec>)
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f7fc ffbf 	bl	800db20 <dwt_write32bitoffsetreg>
 8010ba2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010ba4:	7d9b      	ldrb	r3, [r3, #22]
 8010ba6:	085b      	lsrs	r3, r3, #1
 8010ba8:	d003      	beq.n	8010bb2 <dwt_ioctl+0x134e>
 8010baa:	f06f 0308 	mvn.w	r3, #8
 8010bae:	2200      	movs	r2, #0
 8010bb0:	e7dd      	b.n	8010b6e <dwt_ioctl+0x130a>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	49a7      	ldr	r1, [pc, #668]	; (8010e54 <dwt_ioctl+0x15f0>)
 8010bb8:	4630      	mov	r0, r6
 8010bba:	f7fd f995 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010bbe:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8010bc0:	7d93      	ldrb	r3, [r2, #22]
 8010bc2:	f043 0302 	orr.w	r3, r3, #2
 8010bc6:	7593      	strb	r3, [r2, #22]
 8010bc8:	f06f 0308 	mvn.w	r3, #8
 8010bcc:	2200      	movs	r2, #0
 8010bce:	e7ce      	b.n	8010b6e <dwt_ioctl+0x130a>
 8010bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010bd4:	e7ce      	b.n	8010b74 <dwt_ioctl+0x1310>
 8010bd6:	2c00      	cmp	r4, #0
 8010bd8:	f000 85e0 	beq.w	801179c <dwt_ioctl+0x1f38>
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	2200      	movs	r2, #0
 8010be0:	2130      	movs	r1, #48	; 0x30
 8010be2:	f7fc ff9d 	bl	800db20 <dwt_write32bitoffsetreg>
 8010be6:	2500      	movs	r5, #0
 8010be8:	f000 bd44 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010bec:	2c00      	cmp	r4, #0
 8010bee:	f000 85d7 	beq.w	80117a0 <dwt_ioctl+0x1f3c>
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	f7fc fab4 	bl	800d162 <dwt_read32bitoffsetreg>
 8010bfa:	6020      	str	r0, [r4, #0]
 8010bfc:	2500      	movs	r5, #0
 8010bfe:	f000 bd39 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c02:	4623      	mov	r3, r4
 8010c04:	2200      	movs	r2, #0
 8010c06:	4629      	mov	r1, r5
 8010c08:	f7fc ff8a 	bl	800db20 <dwt_write32bitoffsetreg>
 8010c0c:	2500      	movs	r5, #0
 8010c0e:	f000 bd31 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c12:	2c00      	cmp	r4, #0
 8010c14:	f000 85c6 	beq.w	80117a4 <dwt_ioctl+0x1f40>
 8010c18:	2203      	movs	r2, #3
 8010c1a:	498f      	ldr	r1, [pc, #572]	; (8010e58 <dwt_ioctl+0x15f4>)
 8010c1c:	f7fc faf6 	bl	800d20c <dwt_read8bitoffsetreg>
 8010c20:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8010c24:	7020      	strb	r0, [r4, #0]
 8010c26:	2500      	movs	r5, #0
 8010c28:	f000 bd24 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c2c:	2c00      	cmp	r4, #0
 8010c2e:	f000 85bb 	beq.w	80117a8 <dwt_ioctl+0x1f44>
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	2200      	movs	r2, #0
 8010c36:	2144      	movs	r1, #68	; 0x44
 8010c38:	f7fc ff72 	bl	800db20 <dwt_write32bitoffsetreg>
 8010c3c:	2500      	movs	r5, #0
 8010c3e:	f000 bd19 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c42:	2c00      	cmp	r4, #0
 8010c44:	f000 85b2 	beq.w	80117ac <dwt_ioctl+0x1f48>
 8010c48:	8823      	ldrh	r3, [r4, #0]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	2148      	movs	r1, #72	; 0x48
 8010c4e:	f7fc fefc 	bl	800da4a <dwt_write16bitoffsetreg>
 8010c52:	2500      	movs	r5, #0
 8010c54:	f000 bd0e 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c58:	2c00      	cmp	r4, #0
 8010c5a:	f000 85a9 	beq.w	80117b0 <dwt_ioctl+0x1f4c>
 8010c5e:	2200      	movs	r2, #0
 8010c60:	2144      	movs	r1, #68	; 0x44
 8010c62:	f7fc fa7e 	bl	800d162 <dwt_read32bitoffsetreg>
 8010c66:	6020      	str	r0, [r4, #0]
 8010c68:	2500      	movs	r5, #0
 8010c6a:	f000 bd03 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c6e:	2c00      	cmp	r4, #0
 8010c70:	f000 85a0 	beq.w	80117b4 <dwt_ioctl+0x1f50>
 8010c74:	2200      	movs	r2, #0
 8010c76:	2148      	movs	r1, #72	; 0x48
 8010c78:	f7fc fa89 	bl	800d18e <dwt_read16bitoffsetreg>
 8010c7c:	6020      	str	r0, [r4, #0]
 8010c7e:	2500      	movs	r5, #0
 8010c80:	f000 bcf8 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c84:	2c00      	cmp	r4, #0
 8010c86:	f000 8597 	beq.w	80117b8 <dwt_ioctl+0x1f54>
 8010c8a:	7823      	ldrb	r3, [r4, #0]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	4973      	ldr	r1, [pc, #460]	; (8010e5c <dwt_ioctl+0x15f8>)
 8010c90:	f7fd f92a 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010c94:	2500      	movs	r5, #0
 8010c96:	f000 bced 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010c9a:	2c00      	cmp	r4, #0
 8010c9c:	f000 858e 	beq.w	80117bc <dwt_ioctl+0x1f58>
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2144      	movs	r1, #68	; 0x44
 8010ca4:	f7fc fab2 	bl	800d20c <dwt_read8bitoffsetreg>
 8010ca8:	7020      	strb	r0, [r4, #0]
 8010caa:	2500      	movs	r5, #0
 8010cac:	f000 bce2 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010cb0:	2c00      	cmp	r4, #0
 8010cb2:	f000 8585 	beq.w	80117c0 <dwt_ioctl+0x1f5c>
 8010cb6:	f7fd f923 	bl	800df00 <ull_getframelength>
 8010cba:	6020      	str	r0, [r4, #0]
 8010cbc:	2500      	movs	r5, #0
 8010cbe:	f000 bcd9 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010cc2:	2c00      	cmp	r4, #0
 8010cc4:	f000 857e 	beq.w	80117c4 <dwt_ioctl+0x1f60>
 8010cc8:	2200      	movs	r2, #0
 8010cca:	4965      	ldr	r1, [pc, #404]	; (8010e60 <dwt_ioctl+0x15fc>)
 8010ccc:	f7fc fa5f 	bl	800d18e <dwt_read16bitoffsetreg>
 8010cd0:	8020      	strh	r0, [r4, #0]
 8010cd2:	2500      	movs	r5, #0
 8010cd4:	f000 bcce 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010cd8:	2c00      	cmp	r4, #0
 8010cda:	f000 8575 	beq.w	80117c8 <dwt_ioctl+0x1f64>
 8010cde:	2200      	movs	r2, #0
 8010ce0:	4960      	ldr	r1, [pc, #384]	; (8010e64 <dwt_ioctl+0x1600>)
 8010ce2:	f7fc fa3e 	bl	800d162 <dwt_read32bitoffsetreg>
 8010ce6:	6020      	str	r0, [r4, #0]
 8010ce8:	2500      	movs	r5, #0
 8010cea:	f000 bcc3 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010cee:	2c00      	cmp	r4, #0
 8010cf0:	f000 856c 	beq.w	80117cc <dwt_ioctl+0x1f68>
 8010cf4:	8823      	ldrh	r3, [r4, #0]
 8010cf6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010d00:	2200      	movs	r2, #0
 8010d02:	4958      	ldr	r1, [pc, #352]	; (8010e64 <dwt_ioctl+0x1600>)
 8010d04:	f7fe f912 	bl	800ef2c <dwt_modify16bitoffsetreg>
 8010d08:	2500      	movs	r5, #0
 8010d0a:	f000 bcb3 	b.w	8011674 <dwt_ioctl+0x1e10>
 8010d0e:	2c00      	cmp	r4, #0
 8010d10:	f000 855e 	beq.w	80117d0 <dwt_ioctl+0x1f6c>
 8010d14:	88a7      	ldrh	r7, [r4, #4]
 8010d16:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8010d1a:	7b23      	ldrb	r3, [r4, #12]
 8010d1c:	9306      	str	r3, [sp, #24]
 8010d1e:	6922      	ldr	r2, [r4, #16]
 8010d20:	9204      	str	r2, [sp, #16]
 8010d22:	6962      	ldr	r2, [r4, #20]
 8010d24:	9205      	str	r2, [sp, #20]
 8010d26:	f00b 0203 	and.w	r2, fp, #3
 8010d2a:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8010d2e:	2b05      	cmp	r3, #5
 8010d30:	d147      	bne.n	8010dc2 <dwt_ioctl+0x155e>
 8010d32:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8010d36:	bf28      	it	cs
 8010d38:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8010d3c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8010e6c <dwt_ioctl+0x1608>
 8010d40:	2f04      	cmp	r7, #4
 8010d42:	d805      	bhi.n	8010d50 <dwt_ioctl+0x14ec>
 8010d44:	eb09 0305 	add.w	r3, r9, r5
 8010d48:	785b      	ldrb	r3, [r3, #1]
 8010d4a:	3b05      	subs	r3, #5
 8010d4c:	429f      	cmp	r7, r3
 8010d4e:	db40      	blt.n	8010dd2 <dwt_ioctl+0x156e>
 8010d50:	2a01      	cmp	r2, #1
 8010d52:	f200 80c8 	bhi.w	8010ee6 <dwt_ioctl+0x1682>
 8010d56:	4b44      	ldr	r3, [pc, #272]	; (8010e68 <dwt_ioctl+0x1604>)
 8010d58:	5c99      	ldrb	r1, [r3, r2]
 8010d5a:	463e      	mov	r6, r7
 8010d5c:	42b9      	cmp	r1, r7
 8010d5e:	f280 80c4 	bge.w	8010eea <dwt_ioctl+0x1686>
 8010d62:	1c50      	adds	r0, r2, #1
 8010d64:	fa53 f080 	uxtab	r0, r3, r0
 8010d68:	2300      	movs	r3, #0
 8010d6a:	440b      	add	r3, r1
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	3201      	adds	r2, #1
 8010d70:	b2d2      	uxtb	r2, r2
 8010d72:	2a02      	cmp	r2, #2
 8010d74:	d005      	beq.n	8010d82 <dwt_ioctl+0x151e>
 8010d76:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010d7a:	eba6 0c03 	sub.w	ip, r6, r3
 8010d7e:	4561      	cmp	r1, ip
 8010d80:	dbf3      	blt.n	8010d6a <dwt_ioctl+0x1506>
 8010d82:	429f      	cmp	r7, r3
 8010d84:	bf08      	it	eq
 8010d86:	9503      	streq	r5, [sp, #12]
 8010d88:	f000 80b4 	beq.w	8010ef4 <dwt_ioctl+0x1690>
 8010d8c:	f107 0c05 	add.w	ip, r7, #5
 8010d90:	fa1f fc8c 	uxth.w	ip, ip
 8010d94:	2680      	movs	r6, #128	; 0x80
 8010d96:	2100      	movs	r1, #0
 8010d98:	9107      	str	r1, [sp, #28]
 8010d9a:	9103      	str	r1, [sp, #12]
 8010d9c:	9108      	str	r1, [sp, #32]
 8010d9e:	2005      	movs	r0, #5
 8010da0:	46b8      	mov	r8, r7
 8010da2:	4287      	cmp	r7, r0
 8010da4:	bf38      	it	cc
 8010da6:	4680      	movcc	r8, r0
 8010da8:	f1a8 0805 	sub.w	r8, r8, #5
 8010dac:	fa1f f888 	uxth.w	r8, r8
 8010db0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8010e68 <dwt_ioctl+0x1604>
 8010db4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010db8:	4683      	mov	fp, r0
 8010dba:	4620      	mov	r0, r4
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	4686      	mov	lr, r0
 8010dc0:	e031      	b.n	8010e26 <dwt_ioctl+0x15c2>
 8010dc2:	f240 1331 	movw	r3, #305	; 0x131
 8010dc6:	429f      	cmp	r7, r3
 8010dc8:	bf28      	it	cs
 8010dca:	461f      	movcs	r7, r3
 8010dcc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8010e70 <dwt_ioctl+0x160c>
 8010dd0:	e7b6      	b.n	8010d40 <dwt_ioctl+0x14dc>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	9a05      	ldr	r2, [sp, #20]
 8010dd6:	8013      	strh	r3, [r2, #0]
 8010dd8:	9a04      	ldr	r2, [sp, #16]
 8010dda:	f8c2 b000 	str.w	fp, [r2]
 8010dde:	e098      	b.n	8010f12 <dwt_ioctl+0x16ae>
 8010de0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8010de4:	4674      	mov	r4, lr
 8010de6:	2300      	movs	r3, #0
 8010de8:	9a05      	ldr	r2, [sp, #20]
 8010dea:	8013      	strh	r3, [r2, #0]
 8010dec:	9b04      	ldr	r3, [sp, #16]
 8010dee:	f8c3 b000 	str.w	fp, [r3]
 8010df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010df6:	e08c      	b.n	8010f12 <dwt_ioctl+0x16ae>
 8010df8:	fa1f fb80 	uxth.w	fp, r0
 8010dfc:	9207      	str	r2, [sp, #28]
 8010dfe:	9503      	str	r5, [sp, #12]
 8010e00:	9308      	str	r3, [sp, #32]
 8010e02:	2401      	movs	r4, #1
 8010e04:	2d3f      	cmp	r5, #63	; 0x3f
 8010e06:	d050      	beq.n	8010eaa <dwt_ioctl+0x1646>
 8010e08:	2900      	cmp	r1, #0
 8010e0a:	d139      	bne.n	8010e80 <dwt_ioctl+0x161c>
 8010e0c:	3501      	adds	r5, #1
 8010e0e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8010e12:	f819 0005 	ldrb.w	r0, [r9, r5]
 8010e16:	4403      	add	r3, r0
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	429f      	cmp	r7, r3
 8010e1c:	d067      	beq.n	8010eee <dwt_ioctl+0x168a>
 8010e1e:	3e01      	subs	r6, #1
 8010e20:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8010e24:	d0dc      	beq.n	8010de0 <dwt_ioctl+0x157c>
 8010e26:	4543      	cmp	r3, r8
 8010e28:	d924      	bls.n	8010e74 <dwt_ioctl+0x1610>
 8010e2a:	4563      	cmp	r3, ip
 8010e2c:	d222      	bcs.n	8010e74 <dwt_ioctl+0x1610>
 8010e2e:	1af8      	subs	r0, r7, r3
 8010e30:	b200      	sxth	r0, r0
 8010e32:	2800      	cmp	r0, #0
 8010e34:	bfb8      	it	lt
 8010e36:	4240      	neglt	r0, r0
 8010e38:	4558      	cmp	r0, fp
 8010e3a:	dddd      	ble.n	8010df8 <dwt_ioctl+0x1594>
 8010e3c:	2c00      	cmp	r4, #0
 8010e3e:	d0e1      	beq.n	8010e04 <dwt_ioctl+0x15a0>
 8010e40:	4674      	mov	r4, lr
 8010e42:	9a07      	ldr	r2, [sp, #28]
 8010e44:	9b08      	ldr	r3, [sp, #32]
 8010e46:	e055      	b.n	8010ef4 <dwt_ioctl+0x1690>
 8010e48:	00050008 	.word	0x00050008
 8010e4c:	001f000c 	.word	0x001f000c
 8010e50:	001f0010 	.word	0x001f0010
 8010e54:	00010020 	.word	0x00010020
 8010e58:	00030054 	.word	0x00030054
 8010e5c:	00010018 	.word	0x00010018
 8010e60:	0005002c 	.word	0x0005002c
 8010e64:	000e001c 	.word	0x000e001c
 8010e68:	08012240 	.word	0x08012240
 8010e6c:	080121c0 	.word	0x080121c0
 8010e70:	08012200 	.word	0x08012200
 8010e74:	b984      	cbnz	r4, 8010e98 <dwt_ioctl+0x1634>
 8010e76:	4563      	cmp	r3, ip
 8010e78:	d3c4      	bcc.n	8010e04 <dwt_ioctl+0x15a0>
 8010e7a:	b199      	cbz	r1, 8010ea4 <dwt_ioctl+0x1640>
 8010e7c:	2d3f      	cmp	r5, #63	; 0x3f
 8010e7e:	d014      	beq.n	8010eaa <dwt_ioctl+0x1646>
 8010e80:	f819 1005 	ldrb.w	r1, [r9, r5]
 8010e84:	1a5b      	subs	r3, r3, r1
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	1e69      	subs	r1, r5, #1
 8010e8a:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8010e8e:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8010e92:	bf18      	it	ne
 8010e94:	2101      	movne	r1, #1
 8010e96:	e7c0      	b.n	8010e1a <dwt_ioctl+0x15b6>
 8010e98:	4674      	mov	r4, lr
 8010e9a:	f819 1005 	ldrb.w	r1, [r9, r5]
 8010e9e:	1a5b      	subs	r3, r3, r1
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	e027      	b.n	8010ef4 <dwt_ioctl+0x1690>
 8010ea4:	4674      	mov	r4, lr
 8010ea6:	9503      	str	r5, [sp, #12]
 8010ea8:	e024      	b.n	8010ef4 <dwt_ioctl+0x1690>
 8010eaa:	2c00      	cmp	r4, #0
 8010eac:	d134      	bne.n	8010f18 <dwt_ioctl+0x16b4>
 8010eae:	2a03      	cmp	r2, #3
 8010eb0:	d036      	beq.n	8010f20 <dwt_ioctl+0x16bc>
 8010eb2:	2a02      	cmp	r2, #2
 8010eb4:	d009      	beq.n	8010eca <dwt_ioctl+0x1666>
 8010eb6:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010eba:	1858      	adds	r0, r3, r1
 8010ebc:	42b8      	cmp	r0, r7
 8010ebe:	dd0b      	ble.n	8010ed8 <dwt_ioctl+0x1674>
 8010ec0:	440b      	add	r3, r1
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	3201      	adds	r2, #1
 8010ec6:	b2d2      	uxtb	r2, r2
 8010ec8:	e7da      	b.n	8010e80 <dwt_ioctl+0x161c>
 8010eca:	9906      	ldr	r1, [sp, #24]
 8010ecc:	2909      	cmp	r1, #9
 8010ece:	d1f2      	bne.n	8010eb6 <dwt_ioctl+0x1652>
 8010ed0:	4674      	mov	r4, lr
 8010ed2:	213f      	movs	r1, #63	; 0x3f
 8010ed4:	9103      	str	r1, [sp, #12]
 8010ed6:	e00d      	b.n	8010ef4 <dwt_ioctl+0x1690>
 8010ed8:	4674      	mov	r4, lr
 8010eda:	b283      	uxth	r3, r0
 8010edc:	3201      	adds	r2, #1
 8010ede:	b2d2      	uxtb	r2, r2
 8010ee0:	213f      	movs	r1, #63	; 0x3f
 8010ee2:	9103      	str	r1, [sp, #12]
 8010ee4:	e006      	b.n	8010ef4 <dwt_ioctl+0x1690>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e74b      	b.n	8010d82 <dwt_ioctl+0x151e>
 8010eea:	2300      	movs	r3, #0
 8010eec:	e749      	b.n	8010d82 <dwt_ioctl+0x151e>
 8010eee:	4674      	mov	r4, lr
 8010ef0:	9503      	str	r5, [sp, #12]
 8010ef2:	463b      	mov	r3, r7
 8010ef4:	9905      	ldr	r1, [sp, #20]
 8010ef6:	800b      	strh	r3, [r1, #0]
 8010ef8:	9b03      	ldr	r3, [sp, #12]
 8010efa:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	041a      	lsls	r2, r3, #16
 8010f02:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8010f06:	431a      	orrs	r2, r3
 8010f08:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8010f0c:	9a04      	ldr	r2, [sp, #16]
 8010f0e:	6013      	str	r3, [r2, #0]
 8010f10:	2300      	movs	r3, #0
 8010f12:	6023      	str	r3, [r4, #0]
 8010f14:	2500      	movs	r5, #0
 8010f16:	e3ad      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010f18:	4674      	mov	r4, lr
 8010f1a:	9a07      	ldr	r2, [sp, #28]
 8010f1c:	9b08      	ldr	r3, [sp, #32]
 8010f1e:	e7e9      	b.n	8010ef4 <dwt_ioctl+0x1690>
 8010f20:	4674      	mov	r4, lr
 8010f22:	213f      	movs	r1, #63	; 0x3f
 8010f24:	9103      	str	r1, [sp, #12]
 8010f26:	e7e5      	b.n	8010ef4 <dwt_ioctl+0x1690>
 8010f28:	2c00      	cmp	r4, #0
 8010f2a:	f000 8453 	beq.w	80117d4 <dwt_ioctl+0x1f70>
 8010f2e:	7827      	ldrb	r7, [r4, #0]
 8010f30:	7864      	ldrb	r4, [r4, #1]
 8010f32:	f7ef fc77 	bl	8000824 <decamutexon>
 8010f36:	4605      	mov	r5, r0
 8010f38:	2c02      	cmp	r4, #2
 8010f3a:	d00e      	beq.n	8010f5a <dwt_ioctl+0x16f6>
 8010f3c:	2c04      	cmp	r4, #4
 8010f3e:	d00c      	beq.n	8010f5a <dwt_ioctl+0x16f6>
 8010f40:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8010f44:	2c01      	cmp	r4, #1
 8010f46:	d019      	beq.n	8010f7c <dwt_ioctl+0x1718>
 8010f48:	43fb      	mvns	r3, r7
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	9200      	str	r2, [sp, #0]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	49c1      	ldr	r1, [pc, #772]	; (8011258 <dwt_ioctl+0x19f4>)
 8010f52:	4630      	mov	r0, r6
 8010f54:	f7fd fc5a 	bl	800e80c <dwt_modify8bitoffsetreg>
 8010f58:	e005      	b.n	8010f66 <dwt_ioctl+0x1702>
 8010f5a:	463b      	mov	r3, r7
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	49be      	ldr	r1, [pc, #760]	; (8011258 <dwt_ioctl+0x19f4>)
 8010f60:	4630      	mov	r0, r6
 8010f62:	f7fc ffc1 	bl	800dee8 <dwt_write8bitoffsetreg>
 8010f66:	463b      	mov	r3, r7
 8010f68:	2200      	movs	r2, #0
 8010f6a:	49bc      	ldr	r1, [pc, #752]	; (801125c <dwt_ioctl+0x19f8>)
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	f7fc fdd7 	bl	800db20 <dwt_write32bitoffsetreg>
 8010f72:	4628      	mov	r0, r5
 8010f74:	f7ef fc67 	bl	8000846 <decamutexoff>
 8010f78:	2500      	movs	r5, #0
 8010f7a:	e37b      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010f7c:	9700      	str	r7, [sp, #0]
 8010f7e:	23ff      	movs	r3, #255	; 0xff
 8010f80:	2200      	movs	r2, #0
 8010f82:	49b5      	ldr	r1, [pc, #724]	; (8011258 <dwt_ioctl+0x19f4>)
 8010f84:	4630      	mov	r0, r6
 8010f86:	f7fd fc41 	bl	800e80c <dwt_modify8bitoffsetreg>
 8010f8a:	e7ec      	b.n	8010f66 <dwt_ioctl+0x1702>
 8010f8c:	2302      	movs	r3, #2
 8010f8e:	9301      	str	r3, [sp, #4]
 8010f90:	2500      	movs	r5, #0
 8010f92:	9500      	str	r5, [sp, #0]
 8010f94:	462b      	mov	r3, r5
 8010f96:	462a      	mov	r2, r5
 8010f98:	211a      	movs	r1, #26
 8010f9a:	f7fc f85a 	bl	800d052 <dwt_xfer3xxx>
 8010f9e:	e369      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010fa0:	f7fe fc4c 	bl	800f83c <ull_softreset_fcmd>
 8010fa4:	2500      	movs	r5, #0
 8010fa6:	e365      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010fa8:	f7fe fc34 	bl	800f814 <ull_softreset_no_sema_fcmd>
 8010fac:	2500      	movs	r5, #0
 8010fae:	e361      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010fb0:	2302      	movs	r3, #2
 8010fb2:	9301      	str	r3, [sp, #4]
 8010fb4:	2500      	movs	r5, #0
 8010fb6:	9500      	str	r5, [sp, #0]
 8010fb8:	462b      	mov	r3, r5
 8010fba:	462a      	mov	r2, r5
 8010fbc:	2114      	movs	r1, #20
 8010fbe:	f7fc f848 	bl	800d052 <dwt_xfer3xxx>
 8010fc2:	e357      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010fc4:	2402      	movs	r4, #2
 8010fc6:	9401      	str	r4, [sp, #4]
 8010fc8:	2500      	movs	r5, #0
 8010fca:	9500      	str	r5, [sp, #0]
 8010fcc:	462b      	mov	r3, r5
 8010fce:	462a      	mov	r2, r5
 8010fd0:	2115      	movs	r1, #21
 8010fd2:	f7fc f83e 	bl	800d052 <dwt_xfer3xxx>
 8010fd6:	9401      	str	r4, [sp, #4]
 8010fd8:	9500      	str	r5, [sp, #0]
 8010fda:	462b      	mov	r3, r5
 8010fdc:	462a      	mov	r2, r5
 8010fde:	2115      	movs	r1, #21
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7fc f836 	bl	800d052 <dwt_xfer3xxx>
 8010fe6:	e345      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010fe8:	2302      	movs	r3, #2
 8010fea:	9301      	str	r3, [sp, #4]
 8010fec:	2500      	movs	r5, #0
 8010fee:	9500      	str	r5, [sp, #0]
 8010ff0:	462b      	mov	r3, r5
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	2116      	movs	r1, #22
 8010ff6:	f7fc f82c 	bl	800d052 <dwt_xfer3xxx>
 8010ffa:	e33b      	b.n	8011674 <dwt_ioctl+0x1e10>
 8010ffc:	2c00      	cmp	r4, #0
 8010ffe:	f000 83eb 	beq.w	80117d8 <dwt_ioctl+0x1f74>
 8011002:	b932      	cbnz	r2, 8011012 <dwt_ioctl+0x17ae>
 8011004:	2200      	movs	r2, #0
 8011006:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801100a:	f7fc f8ff 	bl	800d20c <dwt_read8bitoffsetreg>
 801100e:	7020      	strb	r0, [r4, #0]
 8011010:	e330      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011012:	2201      	movs	r2, #1
 8011014:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011018:	f7fc f8f8 	bl	800d20c <dwt_read8bitoffsetreg>
 801101c:	7020      	strb	r0, [r4, #0]
 801101e:	2500      	movs	r5, #0
 8011020:	e328      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011022:	2c00      	cmp	r4, #0
 8011024:	f000 83da 	beq.w	80117dc <dwt_ioctl+0x1f78>
 8011028:	7824      	ldrb	r4, [r4, #0]
 801102a:	2200      	movs	r2, #0
 801102c:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011030:	f7fc f8ec 	bl	800d20c <dwt_read8bitoffsetreg>
 8011034:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8011038:	4323      	orrs	r3, r4
 801103a:	2200      	movs	r2, #0
 801103c:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011040:	4630      	mov	r0, r6
 8011042:	f7fc ff51 	bl	800dee8 <dwt_write8bitoffsetreg>
 8011046:	2500      	movs	r5, #0
 8011048:	e314      	b.n	8011674 <dwt_ioctl+0x1e10>
 801104a:	2c00      	cmp	r4, #0
 801104c:	f000 83c8 	beq.w	80117e0 <dwt_ioctl+0x1f7c>
 8011050:	7824      	ldrb	r4, [r4, #0]
 8011052:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8011056:	d01d      	beq.n	8011094 <dwt_ioctl+0x1830>
 8011058:	2d01      	cmp	r5, #1
 801105a:	f040 83c3 	bne.w	80117e4 <dwt_ioctl+0x1f80>
 801105e:	2502      	movs	r5, #2
 8011060:	2201      	movs	r2, #1
 8011062:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011066:	4630      	mov	r0, r6
 8011068:	f7fc f8d0 	bl	800d20c <dwt_read8bitoffsetreg>
 801106c:	b9a4      	cbnz	r4, 8011098 <dwt_ioctl+0x1834>
 801106e:	ea20 0305 	bic.w	r3, r0, r5
 8011072:	b2db      	uxtb	r3, r3
 8011074:	2201      	movs	r2, #1
 8011076:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801107a:	4630      	mov	r0, r6
 801107c:	f7fc ff34 	bl	800dee8 <dwt_write8bitoffsetreg>
 8011080:	2200      	movs	r2, #0
 8011082:	2110      	movs	r1, #16
 8011084:	4630      	mov	r0, r6
 8011086:	f7fc f86c 	bl	800d162 <dwt_read32bitoffsetreg>
 801108a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 801108e:	d00a      	beq.n	80110a6 <dwt_ioctl+0x1842>
 8011090:	2500      	movs	r5, #0
 8011092:	e2ef      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011094:	2504      	movs	r5, #4
 8011096:	e7e3      	b.n	8011060 <dwt_ioctl+0x17fc>
 8011098:	2c01      	cmp	r4, #1
 801109a:	f040 83a6 	bne.w	80117ea <dwt_ioctl+0x1f86>
 801109e:	ea40 0305 	orr.w	r3, r0, r5
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	e7e6      	b.n	8011074 <dwt_ioctl+0x1810>
 80110a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110b0:	2200      	movs	r2, #0
 80110b2:	2110      	movs	r1, #16
 80110b4:	4630      	mov	r0, r6
 80110b6:	f7fd fa39 	bl	800e52c <dwt_modify32bitoffsetreg>
 80110ba:	2500      	movs	r5, #0
 80110bc:	e2da      	b.n	8011674 <dwt_ioctl+0x1e10>
 80110be:	2c00      	cmp	r4, #0
 80110c0:	f000 8396 	beq.w	80117f0 <dwt_ioctl+0x1f8c>
 80110c4:	7823      	ldrb	r3, [r4, #0]
 80110c6:	035b      	lsls	r3, r3, #13
 80110c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80110cc:	9300      	str	r3, [sp, #0]
 80110ce:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80110d2:	2200      	movs	r2, #0
 80110d4:	4962      	ldr	r1, [pc, #392]	; (8011260 <dwt_ioctl+0x19fc>)
 80110d6:	f7fd ff29 	bl	800ef2c <dwt_modify16bitoffsetreg>
 80110da:	2500      	movs	r5, #0
 80110dc:	e2ca      	b.n	8011674 <dwt_ioctl+0x1e10>
 80110de:	2c00      	cmp	r4, #0
 80110e0:	f000 8388 	beq.w	80117f4 <dwt_ioctl+0x1f90>
 80110e4:	7825      	ldrb	r5, [r4, #0]
 80110e6:	6862      	ldr	r2, [r4, #4]
 80110e8:	2a01      	cmp	r2, #1
 80110ea:	bf15      	itete	ne
 80110ec:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 80110f0:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80110f4:	27df      	movne	r7, #223	; 0xdf
 80110f6:	27ef      	moveq	r7, #239	; 0xef
 80110f8:	bf14      	ite	ne
 80110fa:	f04f 0820 	movne.w	r8, #32
 80110fe:	f04f 0810 	moveq.w	r8, #16
 8011102:	2400      	movs	r4, #0
 8011104:	9400      	str	r4, [sp, #0]
 8011106:	4622      	mov	r2, r4
 8011108:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801110c:	f7fd fa0e 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011110:	9400      	str	r4, [sp, #0]
 8011112:	463b      	mov	r3, r7
 8011114:	4622      	mov	r2, r4
 8011116:	4953      	ldr	r1, [pc, #332]	; (8011264 <dwt_ioctl+0x1a00>)
 8011118:	4630      	mov	r0, r6
 801111a:	f7fd fb77 	bl	800e80c <dwt_modify8bitoffsetreg>
 801111e:	2d01      	cmp	r5, #1
 8011120:	d002      	beq.n	8011128 <dwt_ioctl+0x18c4>
 8011122:	b155      	cbz	r5, 801113a <dwt_ioctl+0x18d6>
 8011124:	2500      	movs	r5, #0
 8011126:	e2a5      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011128:	4625      	mov	r5, r4
 801112a:	9400      	str	r4, [sp, #0]
 801112c:	463b      	mov	r3, r7
 801112e:	4622      	mov	r2, r4
 8011130:	494d      	ldr	r1, [pc, #308]	; (8011268 <dwt_ioctl+0x1a04>)
 8011132:	4630      	mov	r0, r6
 8011134:	f7fd fb6a 	bl	800e80c <dwt_modify8bitoffsetreg>
 8011138:	e29c      	b.n	8011674 <dwt_ioctl+0x1e10>
 801113a:	f8cd 8000 	str.w	r8, [sp]
 801113e:	23ff      	movs	r3, #255	; 0xff
 8011140:	2200      	movs	r2, #0
 8011142:	4949      	ldr	r1, [pc, #292]	; (8011268 <dwt_ioctl+0x1a04>)
 8011144:	4630      	mov	r0, r6
 8011146:	f7fd fb61 	bl	800e80c <dwt_modify8bitoffsetreg>
 801114a:	e293      	b.n	8011674 <dwt_ioctl+0x1e10>
 801114c:	2c00      	cmp	r4, #0
 801114e:	f000 8353 	beq.w	80117f8 <dwt_ioctl+0x1f94>
 8011152:	7822      	ldrb	r2, [r4, #0]
 8011154:	f012 0f01 	tst.w	r2, #1
 8011158:	d02c      	beq.n	80111b4 <dwt_ioctl+0x1950>
 801115a:	0157      	lsls	r7, r2, #5
 801115c:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8011160:	2440      	movs	r4, #64	; 0x40
 8011162:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8011166:	f012 0f04 	tst.w	r2, #4
 801116a:	d027      	beq.n	80111bc <dwt_ioctl+0x1958>
 801116c:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8011170:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8011174:	0112      	lsls	r2, r2, #4
 8011176:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801117a:	4317      	orrs	r7, r2
 801117c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011180:	9200      	str	r2, [sp, #0]
 8011182:	43db      	mvns	r3, r3
 8011184:	2200      	movs	r2, #0
 8011186:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801118a:	4630      	mov	r0, r6
 801118c:	f7fd f9ce 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011190:	43e4      	mvns	r4, r4
 8011192:	b2a4      	uxth	r4, r4
 8011194:	2500      	movs	r5, #0
 8011196:	9500      	str	r5, [sp, #0]
 8011198:	4623      	mov	r3, r4
 801119a:	462a      	mov	r2, r5
 801119c:	4931      	ldr	r1, [pc, #196]	; (8011264 <dwt_ioctl+0x1a00>)
 801119e:	4630      	mov	r0, r6
 80111a0:	f7fd fec4 	bl	800ef2c <dwt_modify16bitoffsetreg>
 80111a4:	9700      	str	r7, [sp, #0]
 80111a6:	4623      	mov	r3, r4
 80111a8:	462a      	mov	r2, r5
 80111aa:	492f      	ldr	r1, [pc, #188]	; (8011268 <dwt_ioctl+0x1a04>)
 80111ac:	4630      	mov	r0, r6
 80111ae:	f7fd febd 	bl	800ef2c <dwt_modify16bitoffsetreg>
 80111b2:	e25f      	b.n	8011674 <dwt_ioctl+0x1e10>
 80111b4:	2700      	movs	r7, #0
 80111b6:	463c      	mov	r4, r7
 80111b8:	463b      	mov	r3, r7
 80111ba:	e7d4      	b.n	8011166 <dwt_ioctl+0x1902>
 80111bc:	2200      	movs	r2, #0
 80111be:	e7df      	b.n	8011180 <dwt_ioctl+0x191c>
 80111c0:	2308      	movs	r3, #8
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	23ff      	movs	r3, #255	; 0xff
 80111c6:	2201      	movs	r2, #1
 80111c8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80111cc:	f7fd fb1e 	bl	800e80c <dwt_modify8bitoffsetreg>
 80111d0:	4c26      	ldr	r4, [pc, #152]	; (801126c <dwt_ioctl+0x1a08>)
 80111d2:	2302      	movs	r3, #2
 80111d4:	9300      	str	r3, [sp, #0]
 80111d6:	23ff      	movs	r3, #255	; 0xff
 80111d8:	2203      	movs	r2, #3
 80111da:	4621      	mov	r1, r4
 80111dc:	4630      	mov	r0, r6
 80111de:	f7fd fb15 	bl	800e80c <dwt_modify8bitoffsetreg>
 80111e2:	2500      	movs	r5, #0
 80111e4:	9500      	str	r5, [sp, #0]
 80111e6:	23f7      	movs	r3, #247	; 0xf7
 80111e8:	2201      	movs	r2, #1
 80111ea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80111ee:	4630      	mov	r0, r6
 80111f0:	f7fd fb0c 	bl	800e80c <dwt_modify8bitoffsetreg>
 80111f4:	9500      	str	r5, [sp, #0]
 80111f6:	23fd      	movs	r3, #253	; 0xfd
 80111f8:	2203      	movs	r2, #3
 80111fa:	4621      	mov	r1, r4
 80111fc:	4630      	mov	r0, r6
 80111fe:	f7fd fb05 	bl	800e80c <dwt_modify8bitoffsetreg>
 8011202:	e237      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011204:	2c00      	cmp	r4, #0
 8011206:	f000 82f9 	beq.w	80117fc <dwt_ioctl+0x1f98>
 801120a:	8863      	ldrh	r3, [r4, #2]
 801120c:	00db      	lsls	r3, r3, #3
 801120e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8011212:	7822      	ldrb	r2, [r4, #0]
 8011214:	b10a      	cbz	r2, 801121a <dwt_ioctl+0x19b6>
 8011216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	f24f 0307 	movw	r3, #61447	; 0xf007
 8011220:	2200      	movs	r2, #0
 8011222:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8011226:	4630      	mov	r0, r6
 8011228:	f7fd fe80 	bl	800ef2c <dwt_modify16bitoffsetreg>
 801122c:	2500      	movs	r5, #0
 801122e:	e221      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011230:	2500      	movs	r5, #0
 8011232:	9500      	str	r5, [sp, #0]
 8011234:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8011238:	462a      	mov	r2, r5
 801123a:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 801123e:	f7fd fe75 	bl	800ef2c <dwt_modify16bitoffsetreg>
 8011242:	e217      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011244:	2c00      	cmp	r4, #0
 8011246:	f000 82db 	beq.w	8011800 <dwt_ioctl+0x1f9c>
 801124a:	2200      	movs	r2, #0
 801124c:	4908      	ldr	r1, [pc, #32]	; (8011270 <dwt_ioctl+0x1a0c>)
 801124e:	f7fb ff9e 	bl	800d18e <dwt_read16bitoffsetreg>
 8011252:	8020      	strh	r0, [r4, #0]
 8011254:	2500      	movs	r5, #0
 8011256:	e20d      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011258:	0001001c 	.word	0x0001001c
 801125c:	00010018 	.word	0x00010018
 8011260:	000e000c 	.word	0x000e000c
 8011264:	00050008 	.word	0x00050008
 8011268:	0005000c 	.word	0x0005000c
 801126c:	00110008 	.word	0x00110008
 8011270:	00110048 	.word	0x00110048
 8011274:	2c00      	cmp	r4, #0
 8011276:	f000 82c5 	beq.w	8011804 <dwt_ioctl+0x1fa0>
 801127a:	7823      	ldrb	r3, [r4, #0]
 801127c:	2b01      	cmp	r3, #1
 801127e:	7862      	ldrb	r2, [r4, #1]
 8011280:	78a3      	ldrb	r3, [r4, #2]
 8011282:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8011286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801128a:	78e2      	ldrb	r2, [r4, #3]
 801128c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8011290:	7922      	ldrb	r2, [r4, #4]
 8011292:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 8011296:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801129a:	bf0c      	ite	eq
 801129c:	2202      	moveq	r2, #2
 801129e:	2200      	movne	r2, #0
 80112a0:	49b6      	ldr	r1, [pc, #728]	; (801157c <dwt_ioctl+0x1d18>)
 80112a2:	f7fc fbd2 	bl	800da4a <dwt_write16bitoffsetreg>
 80112a6:	2500      	movs	r5, #0
 80112a8:	e1e4      	b.n	8011674 <dwt_ioctl+0x1e10>
 80112aa:	2c00      	cmp	r4, #0
 80112ac:	f000 82ac 	beq.w	8011808 <dwt_ioctl+0x1fa4>
 80112b0:	6863      	ldr	r3, [r4, #4]
 80112b2:	7822      	ldrb	r2, [r4, #0]
 80112b4:	b13a      	cbz	r2, 80112c6 <dwt_ioctl+0x1a62>
 80112b6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112ba:	2200      	movs	r2, #0
 80112bc:	49b0      	ldr	r1, [pc, #704]	; (8011580 <dwt_ioctl+0x1d1c>)
 80112be:	f7fc fc2f 	bl	800db20 <dwt_write32bitoffsetreg>
 80112c2:	2500      	movs	r5, #0
 80112c4:	e1d6      	b.n	8011674 <dwt_ioctl+0x1e10>
 80112c6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112ca:	49ae      	ldr	r1, [pc, #696]	; (8011584 <dwt_ioctl+0x1d20>)
 80112cc:	f7fc fc28 	bl	800db20 <dwt_write32bitoffsetreg>
 80112d0:	2500      	movs	r5, #0
 80112d2:	e1cf      	b.n	8011674 <dwt_ioctl+0x1e10>
 80112d4:	2c00      	cmp	r4, #0
 80112d6:	f000 8299 	beq.w	801180c <dwt_ioctl+0x1fa8>
 80112da:	7823      	ldrb	r3, [r4, #0]
 80112dc:	2401      	movs	r4, #1
 80112de:	409c      	lsls	r4, r3
 80112e0:	b2e4      	uxtb	r4, r4
 80112e2:	2310      	movs	r3, #16
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	23ff      	movs	r3, #255	; 0xff
 80112e8:	2200      	movs	r2, #0
 80112ea:	49a7      	ldr	r1, [pc, #668]	; (8011588 <dwt_ioctl+0x1d24>)
 80112ec:	f7fd fa8e 	bl	800e80c <dwt_modify8bitoffsetreg>
 80112f0:	43e3      	mvns	r3, r4
 80112f2:	4fa2      	ldr	r7, [pc, #648]	; (801157c <dwt_ioctl+0x1d18>)
 80112f4:	2500      	movs	r5, #0
 80112f6:	9500      	str	r5, [sp, #0]
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	462a      	mov	r2, r5
 80112fc:	4639      	mov	r1, r7
 80112fe:	4630      	mov	r0, r6
 8011300:	f7fd fa84 	bl	800e80c <dwt_modify8bitoffsetreg>
 8011304:	9400      	str	r4, [sp, #0]
 8011306:	23ff      	movs	r3, #255	; 0xff
 8011308:	462a      	mov	r2, r5
 801130a:	4639      	mov	r1, r7
 801130c:	4630      	mov	r0, r6
 801130e:	f7fd fa7d 	bl	800e80c <dwt_modify8bitoffsetreg>
 8011312:	e1af      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011314:	2c00      	cmp	r4, #0
 8011316:	f000 827b 	beq.w	8011810 <dwt_ioctl+0x1fac>
 801131a:	7822      	ldrb	r2, [r4, #0]
 801131c:	7863      	ldrb	r3, [r4, #1]
 801131e:	b19b      	cbz	r3, 8011348 <dwt_ioctl+0x1ae4>
 8011320:	2a00      	cmp	r2, #0
 8011322:	f040 8297 	bne.w	8011854 <dwt_ioctl+0x1ff0>
 8011326:	2400      	movs	r4, #0
 8011328:	9400      	str	r4, [sp, #0]
 801132a:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801132e:	4622      	mov	r2, r4
 8011330:	2110      	movs	r1, #16
 8011332:	f7fd f8fb 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011336:	9400      	str	r4, [sp, #0]
 8011338:	4b94      	ldr	r3, [pc, #592]	; (801158c <dwt_ioctl+0x1d28>)
 801133a:	4622      	mov	r2, r4
 801133c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011340:	4630      	mov	r0, r6
 8011342:	f7fd f8f3 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011346:	e017      	b.n	8011378 <dwt_ioctl+0x1b14>
 8011348:	2a00      	cmp	r2, #0
 801134a:	f000 8285 	beq.w	8011858 <dwt_ioctl+0x1ff4>
 801134e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8011352:	2400      	movs	r4, #0
 8011354:	9400      	str	r4, [sp, #0]
 8011356:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801135a:	4622      	mov	r2, r4
 801135c:	2110      	movs	r1, #16
 801135e:	4630      	mov	r0, r6
 8011360:	f7fd f8e4 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011364:	9500      	str	r5, [sp, #0]
 8011366:	4b89      	ldr	r3, [pc, #548]	; (801158c <dwt_ioctl+0x1d28>)
 8011368:	4622      	mov	r2, r4
 801136a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801136e:	4630      	mov	r0, r6
 8011370:	f7fd f8dc 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011374:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8011378:	9400      	str	r4, [sp, #0]
 801137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801137e:	2200      	movs	r2, #0
 8011380:	2110      	movs	r1, #16
 8011382:	4630      	mov	r0, r6
 8011384:	f7fd f8d2 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011388:	2500      	movs	r5, #0
 801138a:	e173      	b.n	8011674 <dwt_ioctl+0x1e10>
 801138c:	2c00      	cmp	r4, #0
 801138e:	f000 8241 	beq.w	8011814 <dwt_ioctl+0x1fb0>
 8011392:	7823      	ldrb	r3, [r4, #0]
 8011394:	b93b      	cbnz	r3, 80113a6 <dwt_ioctl+0x1b42>
 8011396:	2500      	movs	r5, #0
 8011398:	9500      	str	r5, [sp, #0]
 801139a:	23df      	movs	r3, #223	; 0xdf
 801139c:	2203      	movs	r2, #3
 801139e:	497c      	ldr	r1, [pc, #496]	; (8011590 <dwt_ioctl+0x1d2c>)
 80113a0:	f7fd fa34 	bl	800e80c <dwt_modify8bitoffsetreg>
 80113a4:	e166      	b.n	8011674 <dwt_ioctl+0x1e10>
 80113a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113b0:	2200      	movs	r2, #0
 80113b2:	4977      	ldr	r1, [pc, #476]	; (8011590 <dwt_ioctl+0x1d2c>)
 80113b4:	f7fd f8ba 	bl	800e52c <dwt_modify32bitoffsetreg>
 80113b8:	2500      	movs	r5, #0
 80113ba:	e15b      	b.n	8011674 <dwt_ioctl+0x1e10>
 80113bc:	2c00      	cmp	r4, #0
 80113be:	f000 822b 	beq.w	8011818 <dwt_ioctl+0x1fb4>
 80113c2:	7823      	ldrb	r3, [r4, #0]
 80113c4:	b93b      	cbnz	r3, 80113d6 <dwt_ioctl+0x1b72>
 80113c6:	2500      	movs	r5, #0
 80113c8:	9500      	str	r5, [sp, #0]
 80113ca:	237f      	movs	r3, #127	; 0x7f
 80113cc:	2203      	movs	r2, #3
 80113ce:	4971      	ldr	r1, [pc, #452]	; (8011594 <dwt_ioctl+0x1d30>)
 80113d0:	f7fd fa1c 	bl	800e80c <dwt_modify8bitoffsetreg>
 80113d4:	e14e      	b.n	8011674 <dwt_ioctl+0x1e10>
 80113d6:	2380      	movs	r3, #128	; 0x80
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	23ff      	movs	r3, #255	; 0xff
 80113dc:	2203      	movs	r2, #3
 80113de:	496d      	ldr	r1, [pc, #436]	; (8011594 <dwt_ioctl+0x1d30>)
 80113e0:	f7fd fa14 	bl	800e80c <dwt_modify8bitoffsetreg>
 80113e4:	2500      	movs	r5, #0
 80113e6:	e145      	b.n	8011674 <dwt_ioctl+0x1e10>
 80113e8:	2c00      	cmp	r4, #0
 80113ea:	f000 8217 	beq.w	801181c <dwt_ioctl+0x1fb8>
 80113ee:	b2e3      	uxtb	r3, r4
 80113f0:	1c9a      	adds	r2, r3, #2
 80113f2:	2301      	movs	r3, #1
 80113f4:	4093      	lsls	r3, r2
 80113f6:	3b01      	subs	r3, #1
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	2200      	movs	r2, #0
 80113fc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8011400:	f7fc fd72 	bl	800dee8 <dwt_write8bitoffsetreg>
 8011404:	2500      	movs	r5, #0
 8011406:	e135      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011408:	2c00      	cmp	r4, #0
 801140a:	f000 8209 	beq.w	8011820 <dwt_ioctl+0x1fbc>
 801140e:	7ae3      	ldrb	r3, [r4, #11]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 8207 	beq.w	8011824 <dwt_ioctl+0x1fc0>
 8011416:	7b63      	ldrb	r3, [r4, #13]
 8011418:	2b01      	cmp	r3, #1
 801141a:	7b20      	ldrb	r0, [r4, #12]
 801141c:	bf94      	ite	ls
 801141e:	2203      	movls	r2, #3
 8011420:	2204      	movhi	r2, #4
 8011422:	2110      	movs	r1, #16
 8011424:	4b5c      	ldr	r3, [pc, #368]	; (8011598 <dwt_ioctl+0x1d34>)
 8011426:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801142a:	f7fb fdf5 	bl	800d018 <get_sts_mnth>
 801142e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011432:	9000      	str	r0, [sp, #0]
 8011434:	f64f 7380 	movw	r3, #65408	; 0xff80
 8011438:	2202      	movs	r2, #2
 801143a:	4958      	ldr	r1, [pc, #352]	; (801159c <dwt_ioctl+0x1d38>)
 801143c:	4630      	mov	r0, r6
 801143e:	f7fd fd75 	bl	800ef2c <dwt_modify16bitoffsetreg>
 8011442:	2394      	movs	r3, #148	; 0x94
 8011444:	2200      	movs	r2, #0
 8011446:	4956      	ldr	r1, [pc, #344]	; (80115a0 <dwt_ioctl+0x1d3c>)
 8011448:	4630      	mov	r0, r6
 801144a:	f7fc fd4d 	bl	800dee8 <dwt_write8bitoffsetreg>
 801144e:	2500      	movs	r5, #0
 8011450:	e110      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011452:	2c00      	cmp	r4, #0
 8011454:	f000 81e8 	beq.w	8011828 <dwt_ioctl+0x1fc4>
 8011458:	2200      	movs	r2, #0
 801145a:	4952      	ldr	r1, [pc, #328]	; (80115a4 <dwt_ioctl+0x1d40>)
 801145c:	f7fb fe81 	bl	800d162 <dwt_read32bitoffsetreg>
 8011460:	6020      	str	r0, [r4, #0]
 8011462:	2500      	movs	r5, #0
 8011464:	e106      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011466:	2c00      	cmp	r4, #0
 8011468:	f000 81e0 	beq.w	801182c <dwt_ioctl+0x1fc8>
 801146c:	2200      	movs	r2, #0
 801146e:	494e      	ldr	r1, [pc, #312]	; (80115a8 <dwt_ioctl+0x1d44>)
 8011470:	f7fb fe77 	bl	800d162 <dwt_read32bitoffsetreg>
 8011474:	6020      	str	r0, [r4, #0]
 8011476:	2500      	movs	r5, #0
 8011478:	e0fc      	b.n	8011674 <dwt_ioctl+0x1e10>
 801147a:	2c00      	cmp	r4, #0
 801147c:	f000 81d8 	beq.w	8011830 <dwt_ioctl+0x1fcc>
 8011480:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8011484:	6023      	str	r3, [r4, #0]
 8011486:	2500      	movs	r5, #0
 8011488:	e0f4      	b.n	8011674 <dwt_ioctl+0x1e10>
 801148a:	2c00      	cmp	r4, #0
 801148c:	f000 81d2 	beq.w	8011834 <dwt_ioctl+0x1fd0>
 8011490:	2500      	movs	r5, #0
 8011492:	950a      	str	r5, [sp, #40]	; 0x28
 8011494:	af0c      	add	r7, sp, #48	; 0x30
 8011496:	2319      	movs	r3, #25
 8011498:	f847 3d04 	str.w	r3, [r7, #-4]!
 801149c:	9700      	str	r7, [sp, #0]
 801149e:	2304      	movs	r3, #4
 80114a0:	462a      	mov	r2, r5
 80114a2:	4942      	ldr	r1, [pc, #264]	; (80115ac <dwt_ioctl+0x1d48>)
 80114a4:	f7fc fac6 	bl	800da34 <dwt_writetodevice>
 80114a8:	f641 7348 	movw	r3, #8008	; 0x1f48
 80114ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80114ae:	9700      	str	r7, [sp, #0]
 80114b0:	2304      	movs	r3, #4
 80114b2:	462a      	mov	r2, r5
 80114b4:	493e      	ldr	r1, [pc, #248]	; (80115b0 <dwt_ioctl+0x1d4c>)
 80114b6:	4630      	mov	r0, r6
 80114b8:	f7fc fabc 	bl	800da34 <dwt_writetodevice>
 80114bc:	ab0a      	add	r3, sp, #40	; 0x28
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	2304      	movs	r3, #4
 80114c2:	462a      	mov	r2, r5
 80114c4:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80114c8:	4630      	mov	r0, r6
 80114ca:	f7fb fe40 	bl	800d14e <dwt_readfromdevice>
 80114ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114d0:	6023      	str	r3, [r4, #0]
 80114d2:	e0cf      	b.n	8011674 <dwt_ioctl+0x1e10>
 80114d4:	2c00      	cmp	r4, #0
 80114d6:	f000 81af 	beq.w	8011838 <dwt_ioctl+0x1fd4>
 80114da:	2200      	movs	r2, #0
 80114dc:	4935      	ldr	r1, [pc, #212]	; (80115b4 <dwt_ioctl+0x1d50>)
 80114de:	f7fb fe40 	bl	800d162 <dwt_read32bitoffsetreg>
 80114e2:	b280      	uxth	r0, r0
 80114e4:	6020      	str	r0, [r4, #0]
 80114e6:	2200      	movs	r2, #0
 80114e8:	4933      	ldr	r1, [pc, #204]	; (80115b8 <dwt_ioctl+0x1d54>)
 80114ea:	4630      	mov	r0, r6
 80114ec:	f7fb fe39 	bl	800d162 <dwt_read32bitoffsetreg>
 80114f0:	0d43      	lsrs	r3, r0, #21
 80114f2:	019b      	lsls	r3, r3, #6
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	6063      	str	r3, [r4, #4]
 80114f8:	2500      	movs	r5, #0
 80114fa:	e0bb      	b.n	8011674 <dwt_ioctl+0x1e10>
 80114fc:	2c00      	cmp	r4, #0
 80114fe:	f000 819d 	beq.w	801183c <dwt_ioctl+0x1fd8>
 8011502:	7d63      	ldrb	r3, [r4, #21]
 8011504:	b133      	cbz	r3, 8011514 <dwt_ioctl+0x1cb0>
 8011506:	2b01      	cmp	r3, #1
 8011508:	d062      	beq.n	80115d0 <dwt_ioctl+0x1d6c>
 801150a:	2b02      	cmp	r3, #2
 801150c:	f000 8089 	beq.w	8011622 <dwt_ioctl+0x1dbe>
 8011510:	23ff      	movs	r3, #255	; 0xff
 8011512:	e02f      	b.n	8011574 <dwt_ioctl+0x1d10>
 8011514:	2200      	movs	r2, #0
 8011516:	4929      	ldr	r1, [pc, #164]	; (80115bc <dwt_ioctl+0x1d58>)
 8011518:	f7fb fe23 	bl	800d162 <dwt_read32bitoffsetreg>
 801151c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011520:	6020      	str	r0, [r4, #0]
 8011522:	2200      	movs	r2, #0
 8011524:	4926      	ldr	r1, [pc, #152]	; (80115c0 <dwt_ioctl+0x1d5c>)
 8011526:	4630      	mov	r0, r6
 8011528:	f7fb fe1b 	bl	800d162 <dwt_read32bitoffsetreg>
 801152c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011530:	6060      	str	r0, [r4, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	4923      	ldr	r1, [pc, #140]	; (80115c4 <dwt_ioctl+0x1d60>)
 8011536:	4630      	mov	r0, r6
 8011538:	f7fb fe13 	bl	800d162 <dwt_read32bitoffsetreg>
 801153c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011540:	60a0      	str	r0, [r4, #8]
 8011542:	2200      	movs	r2, #0
 8011544:	4920      	ldr	r1, [pc, #128]	; (80115c8 <dwt_ioctl+0x1d64>)
 8011546:	4630      	mov	r0, r6
 8011548:	f7fb fe0b 	bl	800d162 <dwt_read32bitoffsetreg>
 801154c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011550:	60e0      	str	r0, [r4, #12]
 8011552:	2200      	movs	r2, #0
 8011554:	491d      	ldr	r1, [pc, #116]	; (80115cc <dwt_ioctl+0x1d68>)
 8011556:	4630      	mov	r0, r6
 8011558:	f7fb fe03 	bl	800d162 <dwt_read32bitoffsetreg>
 801155c:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011560:	6120      	str	r0, [r4, #16]
 8011562:	2203      	movs	r2, #3
 8011564:	490f      	ldr	r1, [pc, #60]	; (80115a4 <dwt_ioctl+0x1d40>)
 8011566:	4630      	mov	r0, r6
 8011568:	f7fb fe50 	bl	800d20c <dwt_read8bitoffsetreg>
 801156c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8011570:	7520      	strb	r0, [r4, #20]
 8011572:	2300      	movs	r3, #0
 8011574:	75a3      	strb	r3, [r4, #22]
 8011576:	2500      	movs	r5, #0
 8011578:	e07c      	b.n	8011674 <dwt_ioctl+0x1e10>
 801157a:	bf00      	nop
 801157c:	0011003c 	.word	0x0011003c
 8011580:	00110044 	.word	0x00110044
 8011584:	00110040 	.word	0x00110040
 8011588:	00070048 	.word	0x00070048
 801158c:	f7fc0fff 	.word	0xf7fc0fff
 8011590:	000f0028 	.word	0x000f0028
 8011594:	0007001c 	.word	0x0007001c
 8011598:	0801224c 	.word	0x0801224c
 801159c:	000e0014 	.word	0x000e0014
 80115a0:	000e0018 	.word	0x000e0018
 80115a4:	00030054 	.word	0x00030054
 80115a8:	000f004c 	.word	0x000f004c
 80115ac:	001f0004 	.word	0x001f0004
 80115b0:	001f0008 	.word	0x001f0008
 80115b4:	000c0048 	.word	0x000c0048
 80115b8:	000c0028 	.word	0x000c0028
 80115bc:	000c0058 	.word	0x000c0058
 80115c0:	000c0030 	.word	0x000c0030
 80115c4:	000c0034 	.word	0x000c0034
 80115c8:	000c0038 	.word	0x000c0038
 80115cc:	000c002c 	.word	0x000c002c
 80115d0:	2200      	movs	r2, #0
 80115d2:	49aa      	ldr	r1, [pc, #680]	; (801187c <dwt_ioctl+0x2018>)
 80115d4:	f7fb fdc5 	bl	800d162 <dwt_read32bitoffsetreg>
 80115d8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80115dc:	6020      	str	r0, [r4, #0]
 80115de:	2200      	movs	r2, #0
 80115e0:	49a7      	ldr	r1, [pc, #668]	; (8011880 <dwt_ioctl+0x201c>)
 80115e2:	4630      	mov	r0, r6
 80115e4:	f7fb fdbd 	bl	800d162 <dwt_read32bitoffsetreg>
 80115e8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80115ec:	6060      	str	r0, [r4, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	49a4      	ldr	r1, [pc, #656]	; (8011884 <dwt_ioctl+0x2020>)
 80115f2:	4630      	mov	r0, r6
 80115f4:	f7fb fdb5 	bl	800d162 <dwt_read32bitoffsetreg>
 80115f8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80115fc:	60a0      	str	r0, [r4, #8]
 80115fe:	2200      	movs	r2, #0
 8011600:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8011604:	4630      	mov	r0, r6
 8011606:	f7fb fdac 	bl	800d162 <dwt_read32bitoffsetreg>
 801160a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801160e:	60e0      	str	r0, [r4, #12]
 8011610:	2200      	movs	r2, #0
 8011612:	499d      	ldr	r1, [pc, #628]	; (8011888 <dwt_ioctl+0x2024>)
 8011614:	4630      	mov	r0, r6
 8011616:	f7fb fda4 	bl	800d162 <dwt_read32bitoffsetreg>
 801161a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801161e:	6120      	str	r0, [r4, #16]
 8011620:	e79f      	b.n	8011562 <dwt_ioctl+0x1cfe>
 8011622:	2200      	movs	r2, #0
 8011624:	4999      	ldr	r1, [pc, #612]	; (801188c <dwt_ioctl+0x2028>)
 8011626:	f7fb fd9c 	bl	800d162 <dwt_read32bitoffsetreg>
 801162a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801162e:	6020      	str	r0, [r4, #0]
 8011630:	2200      	movs	r2, #0
 8011632:	4997      	ldr	r1, [pc, #604]	; (8011890 <dwt_ioctl+0x202c>)
 8011634:	4630      	mov	r0, r6
 8011636:	f7fb fd94 	bl	800d162 <dwt_read32bitoffsetreg>
 801163a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801163e:	6060      	str	r0, [r4, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	4994      	ldr	r1, [pc, #592]	; (8011894 <dwt_ioctl+0x2030>)
 8011644:	4630      	mov	r0, r6
 8011646:	f7fb fd8c 	bl	800d162 <dwt_read32bitoffsetreg>
 801164a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801164e:	60a0      	str	r0, [r4, #8]
 8011650:	2200      	movs	r2, #0
 8011652:	4991      	ldr	r1, [pc, #580]	; (8011898 <dwt_ioctl+0x2034>)
 8011654:	4630      	mov	r0, r6
 8011656:	f7fb fd84 	bl	800d162 <dwt_read32bitoffsetreg>
 801165a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801165e:	60e0      	str	r0, [r4, #12]
 8011660:	2200      	movs	r2, #0
 8011662:	498e      	ldr	r1, [pc, #568]	; (801189c <dwt_ioctl+0x2038>)
 8011664:	4630      	mov	r0, r6
 8011666:	f7fb fd7c 	bl	800d162 <dwt_read32bitoffsetreg>
 801166a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801166e:	6120      	str	r0, [r4, #16]
 8011670:	e777      	b.n	8011562 <dwt_ioctl+0x1cfe>
 8011672:	2500      	movs	r5, #0
 8011674:	4628      	mov	r0, r5
 8011676:	b00d      	add	sp, #52	; 0x34
 8011678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167c:	2500      	movs	r5, #0
 801167e:	e7f9      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011680:	2500      	movs	r5, #0
 8011682:	e7f7      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011684:	2500      	movs	r5, #0
 8011686:	e7f5      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011688:	2500      	movs	r5, #0
 801168a:	e7f3      	b.n	8011674 <dwt_ioctl+0x1e10>
 801168c:	2500      	movs	r5, #0
 801168e:	e7f1      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011690:	2500      	movs	r5, #0
 8011692:	e7ef      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011694:	2500      	movs	r5, #0
 8011696:	e7ed      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011698:	2500      	movs	r5, #0
 801169a:	e7eb      	b.n	8011674 <dwt_ioctl+0x1e10>
 801169c:	2500      	movs	r5, #0
 801169e:	e7e9      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116a0:	2500      	movs	r5, #0
 80116a2:	e7e7      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116a4:	2500      	movs	r5, #0
 80116a6:	e7e5      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116a8:	2500      	movs	r5, #0
 80116aa:	e7e3      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116ac:	2500      	movs	r5, #0
 80116ae:	e7e1      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116b0:	2500      	movs	r5, #0
 80116b2:	e7df      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116b4:	2500      	movs	r5, #0
 80116b6:	e7dd      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116b8:	2500      	movs	r5, #0
 80116ba:	e7db      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116bc:	2500      	movs	r5, #0
 80116be:	e7d9      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116c0:	2500      	movs	r5, #0
 80116c2:	e7d7      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116c4:	2500      	movs	r5, #0
 80116c6:	e7d5      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116c8:	2500      	movs	r5, #0
 80116ca:	e7d3      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116cc:	2500      	movs	r5, #0
 80116ce:	e7d1      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116d0:	2500      	movs	r5, #0
 80116d2:	e7cf      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116d4:	2500      	movs	r5, #0
 80116d6:	e7cd      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116d8:	2500      	movs	r5, #0
 80116da:	e7cb      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116dc:	2500      	movs	r5, #0
 80116de:	e7c9      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116e0:	2500      	movs	r5, #0
 80116e2:	e7c7      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116e4:	2500      	movs	r5, #0
 80116e6:	e7c5      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116e8:	2500      	movs	r5, #0
 80116ea:	e7c3      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116ec:	2500      	movs	r5, #0
 80116ee:	e7c1      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116f0:	2500      	movs	r5, #0
 80116f2:	e7bf      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116f4:	2500      	movs	r5, #0
 80116f6:	e7bd      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116f8:	2500      	movs	r5, #0
 80116fa:	e7bb      	b.n	8011674 <dwt_ioctl+0x1e10>
 80116fc:	2500      	movs	r5, #0
 80116fe:	e7b9      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011700:	2500      	movs	r5, #0
 8011702:	e7b7      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011704:	2500      	movs	r5, #0
 8011706:	e7b5      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011708:	2500      	movs	r5, #0
 801170a:	e7b3      	b.n	8011674 <dwt_ioctl+0x1e10>
 801170c:	2500      	movs	r5, #0
 801170e:	e7b1      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011710:	2500      	movs	r5, #0
 8011712:	e7af      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011714:	2500      	movs	r5, #0
 8011716:	e7ad      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011718:	2500      	movs	r5, #0
 801171a:	e7ab      	b.n	8011674 <dwt_ioctl+0x1e10>
 801171c:	2500      	movs	r5, #0
 801171e:	e7a9      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011720:	2500      	movs	r5, #0
 8011722:	e7a7      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011724:	2500      	movs	r5, #0
 8011726:	e7a5      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011728:	2500      	movs	r5, #0
 801172a:	e7a3      	b.n	8011674 <dwt_ioctl+0x1e10>
 801172c:	2500      	movs	r5, #0
 801172e:	e7a1      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011730:	2500      	movs	r5, #0
 8011732:	e79f      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011734:	2500      	movs	r5, #0
 8011736:	e79d      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011738:	2500      	movs	r5, #0
 801173a:	e79b      	b.n	8011674 <dwt_ioctl+0x1e10>
 801173c:	2500      	movs	r5, #0
 801173e:	e799      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011740:	2500      	movs	r5, #0
 8011742:	e797      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011744:	2500      	movs	r5, #0
 8011746:	e795      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011748:	2500      	movs	r5, #0
 801174a:	e793      	b.n	8011674 <dwt_ioctl+0x1e10>
 801174c:	2500      	movs	r5, #0
 801174e:	e791      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011750:	2500      	movs	r5, #0
 8011752:	e78f      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011754:	2500      	movs	r5, #0
 8011756:	e78d      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011758:	2500      	movs	r5, #0
 801175a:	e78b      	b.n	8011674 <dwt_ioctl+0x1e10>
 801175c:	2500      	movs	r5, #0
 801175e:	e789      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011760:	2500      	movs	r5, #0
 8011762:	e787      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011764:	2500      	movs	r5, #0
 8011766:	e785      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011768:	2500      	movs	r5, #0
 801176a:	e783      	b.n	8011674 <dwt_ioctl+0x1e10>
 801176c:	2500      	movs	r5, #0
 801176e:	e781      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011770:	2500      	movs	r5, #0
 8011772:	e77f      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011774:	2500      	movs	r5, #0
 8011776:	e77d      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011778:	2500      	movs	r5, #0
 801177a:	e77b      	b.n	8011674 <dwt_ioctl+0x1e10>
 801177c:	2500      	movs	r5, #0
 801177e:	e779      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011780:	2500      	movs	r5, #0
 8011782:	e777      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011784:	2500      	movs	r5, #0
 8011786:	e775      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011788:	2500      	movs	r5, #0
 801178a:	e773      	b.n	8011674 <dwt_ioctl+0x1e10>
 801178c:	2500      	movs	r5, #0
 801178e:	e771      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011790:	2500      	movs	r5, #0
 8011792:	e76f      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011794:	2500      	movs	r5, #0
 8011796:	e76d      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011798:	2500      	movs	r5, #0
 801179a:	e76b      	b.n	8011674 <dwt_ioctl+0x1e10>
 801179c:	2500      	movs	r5, #0
 801179e:	e769      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117a0:	2500      	movs	r5, #0
 80117a2:	e767      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117a4:	2500      	movs	r5, #0
 80117a6:	e765      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117a8:	2500      	movs	r5, #0
 80117aa:	e763      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117ac:	2500      	movs	r5, #0
 80117ae:	e761      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117b0:	2500      	movs	r5, #0
 80117b2:	e75f      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117b4:	2500      	movs	r5, #0
 80117b6:	e75d      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117b8:	2500      	movs	r5, #0
 80117ba:	e75b      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117bc:	2500      	movs	r5, #0
 80117be:	e759      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117c0:	2500      	movs	r5, #0
 80117c2:	e757      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117c4:	2500      	movs	r5, #0
 80117c6:	e755      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117c8:	2500      	movs	r5, #0
 80117ca:	e753      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117cc:	2500      	movs	r5, #0
 80117ce:	e751      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117d0:	2500      	movs	r5, #0
 80117d2:	e74f      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117d4:	2500      	movs	r5, #0
 80117d6:	e74d      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117d8:	2500      	movs	r5, #0
 80117da:	e74b      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117dc:	2500      	movs	r5, #0
 80117de:	e749      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117e0:	2500      	movs	r5, #0
 80117e2:	e747      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80117e8:	e744      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80117ee:	e741      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117f0:	2500      	movs	r5, #0
 80117f2:	e73f      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117f4:	2500      	movs	r5, #0
 80117f6:	e73d      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117f8:	2500      	movs	r5, #0
 80117fa:	e73b      	b.n	8011674 <dwt_ioctl+0x1e10>
 80117fc:	2500      	movs	r5, #0
 80117fe:	e739      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011800:	2500      	movs	r5, #0
 8011802:	e737      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011804:	2500      	movs	r5, #0
 8011806:	e735      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011808:	2500      	movs	r5, #0
 801180a:	e733      	b.n	8011674 <dwt_ioctl+0x1e10>
 801180c:	2500      	movs	r5, #0
 801180e:	e731      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011810:	2500      	movs	r5, #0
 8011812:	e72f      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011814:	2500      	movs	r5, #0
 8011816:	e72d      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011818:	2500      	movs	r5, #0
 801181a:	e72b      	b.n	8011674 <dwt_ioctl+0x1e10>
 801181c:	2500      	movs	r5, #0
 801181e:	e729      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011820:	2500      	movs	r5, #0
 8011822:	e727      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011824:	2500      	movs	r5, #0
 8011826:	e725      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011828:	2500      	movs	r5, #0
 801182a:	e723      	b.n	8011674 <dwt_ioctl+0x1e10>
 801182c:	2500      	movs	r5, #0
 801182e:	e721      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011830:	2500      	movs	r5, #0
 8011832:	e71f      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011834:	2500      	movs	r5, #0
 8011836:	e71d      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011838:	2500      	movs	r5, #0
 801183a:	e71b      	b.n	8011674 <dwt_ioctl+0x1e10>
 801183c:	2500      	movs	r5, #0
 801183e:	e719      	b.n	8011674 <dwt_ioctl+0x1e10>
 8011840:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011844:	1e5a      	subs	r2, r3, #1
 8011846:	b2d2      	uxtb	r2, r2
 8011848:	2a01      	cmp	r2, #1
 801184a:	f67e ae60 	bls.w	801050e <dwt_ioctl+0xcaa>
 801184e:	2202      	movs	r2, #2
 8011850:	f7fe be07 	b.w	8010462 <dwt_ioctl+0xbfe>
 8011854:	4d12      	ldr	r5, [pc, #72]	; (80118a0 <dwt_ioctl+0x203c>)
 8011856:	e57c      	b.n	8011352 <dwt_ioctl+0x1aee>
 8011858:	2400      	movs	r4, #0
 801185a:	9400      	str	r4, [sp, #0]
 801185c:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8011860:	4622      	mov	r2, r4
 8011862:	2110      	movs	r1, #16
 8011864:	f7fc fe62 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011868:	9400      	str	r4, [sp, #0]
 801186a:	4b0e      	ldr	r3, [pc, #56]	; (80118a4 <dwt_ioctl+0x2040>)
 801186c:	4622      	mov	r2, r4
 801186e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011872:	4630      	mov	r0, r6
 8011874:	f7fc fe5a 	bl	800e52c <dwt_modify32bitoffsetreg>
 8011878:	e57e      	b.n	8011378 <dwt_ioctl+0x1b14>
 801187a:	bf00      	nop
 801187c:	000d0020 	.word	0x000d0020
 8011880:	000c0064 	.word	0x000c0064
 8011884:	000c0068 	.word	0x000c0068
 8011888:	000c0060 	.word	0x000c0060
 801188c:	000d0068 	.word	0x000d0068
 8011890:	000d0040 	.word	0x000d0040
 8011894:	000d0044 	.word	0x000d0044
 8011898:	000d0048 	.word	0x000d0048
 801189c:	000d003c 	.word	0x000d003c
 80118a0:	08001000 	.word	0x08001000
 80118a4:	f7fc0fff 	.word	0xf7fc0fff

080118a8 <_init>:
 80118a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118aa:	b085      	sub	sp, #20
 80118ac:	4604      	mov	r4, r0
 80118ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80118b0:	6819      	ldr	r1, [r3, #0]
 80118b2:	f7fd fea1 	bl	800f5f8 <ull_initialise>
 80118b6:	4606      	mov	r6, r0
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	691b      	ldr	r3, [r3, #16]
 80118bc:	4798      	blx	r3
 80118be:	ab03      	add	r3, sp, #12
 80118c0:	2200      	movs	r2, #0
 80118c2:	4611      	mov	r1, r2
 80118c4:	4620      	mov	r0, r4
 80118c6:	f7fd ffcd 	bl	800f864 <dwt_ioctl>
 80118ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ce:	6819      	ldr	r1, [r3, #0]
 80118d0:	4620      	mov	r0, r4
 80118d2:	f7fd fc43 	bl	800f15c <ull_configure>
 80118d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118da:	6859      	ldr	r1, [r3, #4]
 80118dc:	4620      	mov	r0, r4
 80118de:	f7fd f993 	bl	800ec08 <ull_configuretxrf>
 80118e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e6:	89d9      	ldrh	r1, [r3, #14]
 80118e8:	4620      	mov	r0, r4
 80118ea:	f7fc f8be 	bl	800da6a <ull_setrxantennadelay>
 80118ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118f2:	8999      	ldrh	r1, [r3, #12]
 80118f4:	4620      	mov	r0, r4
 80118f6:	f7fc f8c0 	bl	800da7a <ull_settxantennadelay>
 80118fa:	2100      	movs	r1, #0
 80118fc:	4620      	mov	r0, r4
 80118fe:	f7fc f94a 	bl	800db96 <ull_setrxaftertxdelay>
 8011902:	2500      	movs	r5, #0
 8011904:	9500      	str	r5, [sp, #0]
 8011906:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 801190a:	462a      	mov	r2, r5
 801190c:	2110      	movs	r1, #16
 801190e:	4620      	mov	r0, r4
 8011910:	f7fd fb0c 	bl	800ef2c <dwt_modify16bitoffsetreg>
 8011914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011918:	895a      	ldrh	r2, [r3, #10]
 801191a:	8919      	ldrh	r1, [r3, #8]
 801191c:	4620      	mov	r0, r4
 801191e:	f7fd fa03 	bl	800ed28 <ull_configureframefilter>
 8011922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011926:	8a1b      	ldrh	r3, [r3, #16]
 8011928:	2202      	movs	r2, #2
 801192a:	210c      	movs	r1, #12
 801192c:	4620      	mov	r0, r4
 801192e:	f7fc f88c 	bl	800da4a <dwt_write16bitoffsetreg>
 8011932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011936:	8a5b      	ldrh	r3, [r3, #18]
 8011938:	462a      	mov	r2, r5
 801193a:	210c      	movs	r1, #12
 801193c:	4620      	mov	r0, r4
 801193e:	f7fc f884 	bl	800da4a <dwt_write16bitoffsetreg>
 8011942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011944:	7a19      	ldrb	r1, [r3, #8]
 8011946:	4620      	mov	r0, r4
 8011948:	f7fd fb2e 	bl	800efa8 <ull_setleds>
 801194c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801194e:	68d9      	ldr	r1, [r3, #12]
 8011950:	4620      	mov	r0, r4
 8011952:	f7fc f949 	bl	800dbe8 <ull_setlnapamode>
 8011956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011958:	7e0b      	ldrb	r3, [r1, #24]
 801195a:	694a      	ldr	r2, [r1, #20]
 801195c:	6909      	ldr	r1, [r1, #16]
 801195e:	4620      	mov	r0, r4
 8011960:	f7fd fa68 	bl	800ee34 <ull_setinterrupt>
 8011964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011966:	7f9a      	ldrb	r2, [r3, #30]
 8011968:	8b99      	ldrh	r1, [r3, #28]
 801196a:	4620      	mov	r0, r4
 801196c:	f7fc fb90 	bl	800e090 <ull_configuresleep>
 8011970:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011972:	7b53      	ldrb	r3, [r2, #13]
 8011974:	2b2e      	cmp	r3, #46	; 0x2e
 8011976:	d005      	beq.n	8011984 <_init+0xdc>
 8011978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801197a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801197e:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8011982:	d00a      	beq.n	801199a <_init+0xf2>
 8011984:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801198a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801198e:	7353      	strb	r3, [r2, #13]
 8011990:	2200      	movs	r2, #0
 8011992:	4928      	ldr	r1, [pc, #160]	; (8011a34 <_init+0x18c>)
 8011994:	4620      	mov	r0, r4
 8011996:	f7fc faa7 	bl	800dee8 <dwt_write8bitoffsetreg>
 801199a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801199c:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80119a0:	4620      	mov	r0, r4
 80119a2:	f7fc ff63 	bl	800e86c <ull_configciadiag>
 80119a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119a8:	6a19      	ldr	r1, [r3, #32]
 80119aa:	4620      	mov	r0, r4
 80119ac:	f7fc f93c 	bl	800dc28 <ull_configurestskey>
 80119b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80119b4:	4620      	mov	r0, r4
 80119b6:	f7fc f95b 	bl	800dc70 <ull_configurestsiv>
 80119ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80119c0:	bb9b      	cbnz	r3, 8011a2a <_init+0x182>
 80119c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119c4:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80119c8:	4620      	mov	r0, r4
 80119ca:	f7fc fb05 	bl	800dfd8 <ull_configeventcounters>
 80119ce:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 80119d2:	2d00      	cmp	r5, #0
 80119d4:	db26      	blt.n	8011a24 <_init+0x17c>
 80119d6:	2301      	movs	r3, #1
 80119d8:	fa03 f505 	lsl.w	r5, r3, r5
 80119dc:	b2af      	uxth	r7, r5
 80119de:	4a16      	ldr	r2, [pc, #88]	; (8011a38 <_init+0x190>)
 80119e0:	4639      	mov	r1, r7
 80119e2:	4620      	mov	r0, r4
 80119e4:	f7fc fed4 	bl	800e790 <ull_setgpiomode>
 80119e8:	f10d 030a 	add.w	r3, sp, #10
 80119ec:	9300      	str	r3, [sp, #0]
 80119ee:	2302      	movs	r3, #2
 80119f0:	2200      	movs	r2, #0
 80119f2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80119f6:	4620      	mov	r0, r4
 80119f8:	f7fb fba9 	bl	800d14e <dwt_readfromdevice>
 80119fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011a00:	ea23 0305 	bic.w	r3, r3, r5
 8011a04:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	490c      	ldr	r1, [pc, #48]	; (8011a3c <_init+0x194>)
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f7fc f81c 	bl	800da4a <dwt_write16bitoffsetreg>
 8011a12:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8011a16:	fab2 f282 	clz	r2, r2
 8011a1a:	0952      	lsrs	r2, r2, #5
 8011a1c:	4639      	mov	r1, r7
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f7fd fb40 	bl	800f0a4 <ull_setgpiovalue>
 8011a24:	4630      	mov	r0, r6
 8011a26:	b005      	add	sp, #20
 8011a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	f7fc ff54 	bl	800e8d8 <ull_configurestsloadiv>
 8011a30:	e7c7      	b.n	80119c2 <_init+0x11a>
 8011a32:	bf00      	nop
 8011a34:	00090014 	.word	0x00090014
 8011a38:	01200492 	.word	0x01200492
 8011a3c:	00050008 	.word	0x00050008

08011a40 <__register_exitproc>:
 8011a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a44:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011b00 <__register_exitproc+0xc0>
 8011a48:	4606      	mov	r6, r0
 8011a4a:	f8d8 0000 	ldr.w	r0, [r8]
 8011a4e:	461f      	mov	r7, r3
 8011a50:	460d      	mov	r5, r1
 8011a52:	4691      	mov	r9, r2
 8011a54:	f000 f89a 	bl	8011b8c <__retarget_lock_acquire_recursive>
 8011a58:	4b25      	ldr	r3, [pc, #148]	; (8011af0 <__register_exitproc+0xb0>)
 8011a5a:	681c      	ldr	r4, [r3, #0]
 8011a5c:	b934      	cbnz	r4, 8011a6c <__register_exitproc+0x2c>
 8011a5e:	4c25      	ldr	r4, [pc, #148]	; (8011af4 <__register_exitproc+0xb4>)
 8011a60:	601c      	str	r4, [r3, #0]
 8011a62:	4b25      	ldr	r3, [pc, #148]	; (8011af8 <__register_exitproc+0xb8>)
 8011a64:	b113      	cbz	r3, 8011a6c <__register_exitproc+0x2c>
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011a6c:	6863      	ldr	r3, [r4, #4]
 8011a6e:	2b1f      	cmp	r3, #31
 8011a70:	dd07      	ble.n	8011a82 <__register_exitproc+0x42>
 8011a72:	f8d8 0000 	ldr.w	r0, [r8]
 8011a76:	f000 f88b 	bl	8011b90 <__retarget_lock_release_recursive>
 8011a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a82:	b34e      	cbz	r6, 8011ad8 <__register_exitproc+0x98>
 8011a84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011a88:	b988      	cbnz	r0, 8011aae <__register_exitproc+0x6e>
 8011a8a:	4b1c      	ldr	r3, [pc, #112]	; (8011afc <__register_exitproc+0xbc>)
 8011a8c:	b923      	cbnz	r3, 8011a98 <__register_exitproc+0x58>
 8011a8e:	f8d8 0000 	ldr.w	r0, [r8]
 8011a92:	f000 f87c 	bl	8011b8e <__retarget_lock_release>
 8011a96:	e7f0      	b.n	8011a7a <__register_exitproc+0x3a>
 8011a98:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011a9c:	f000 f87a 	bl	8011b94 <malloc>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d0f4      	beq.n	8011a8e <__register_exitproc+0x4e>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011aaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011aae:	6863      	ldr	r3, [r4, #4]
 8011ab0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011ab4:	2201      	movs	r2, #1
 8011ab6:	409a      	lsls	r2, r3
 8011ab8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011abc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011ac6:	2e02      	cmp	r6, #2
 8011ac8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011acc:	bf02      	ittt	eq
 8011ace:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011ad2:	4313      	orreq	r3, r2
 8011ad4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8011ad8:	6863      	ldr	r3, [r4, #4]
 8011ada:	f8d8 0000 	ldr.w	r0, [r8]
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	3302      	adds	r3, #2
 8011ae2:	6062      	str	r2, [r4, #4]
 8011ae4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011ae8:	f000 f852 	bl	8011b90 <__retarget_lock_release_recursive>
 8011aec:	2000      	movs	r0, #0
 8011aee:	e7c6      	b.n	8011a7e <__register_exitproc+0x3e>
 8011af0:	200002e4 	.word	0x200002e4
 8011af4:	20000258 	.word	0x20000258
 8011af8:	080122bc 	.word	0x080122bc
 8011afc:	08011b95 	.word	0x08011b95
 8011b00:	20000068 	.word	0x20000068

08011b04 <atexit>:
 8011b04:	2300      	movs	r3, #0
 8011b06:	4601      	mov	r1, r0
 8011b08:	461a      	mov	r2, r3
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7ff bf98 	b.w	8011a40 <__register_exitproc>

08011b10 <__errno>:
 8011b10:	4b01      	ldr	r3, [pc, #4]	; (8011b18 <__errno+0x8>)
 8011b12:	6818      	ldr	r0, [r3, #0]
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	2000006c 	.word	0x2000006c

08011b1c <__libc_fini_array>:
 8011b1c:	b538      	push	{r3, r4, r5, lr}
 8011b1e:	4d07      	ldr	r5, [pc, #28]	; (8011b3c <__libc_fini_array+0x20>)
 8011b20:	4c07      	ldr	r4, [pc, #28]	; (8011b40 <__libc_fini_array+0x24>)
 8011b22:	1b64      	subs	r4, r4, r5
 8011b24:	10a4      	asrs	r4, r4, #2
 8011b26:	b91c      	cbnz	r4, 8011b30 <__libc_fini_array+0x14>
 8011b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b2c:	f000 b91c 	b.w	8011d68 <_fini>
 8011b30:	3c01      	subs	r4, #1
 8011b32:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011b36:	4798      	blx	r3
 8011b38:	e7f5      	b.n	8011b26 <__libc_fini_array+0xa>
 8011b3a:	bf00      	nop
 8011b3c:	080122e0 	.word	0x080122e0
 8011b40:	080122e4 	.word	0x080122e4

08011b44 <__libc_init_array>:
 8011b44:	b570      	push	{r4, r5, r6, lr}
 8011b46:	4d0d      	ldr	r5, [pc, #52]	; (8011b7c <__libc_init_array+0x38>)
 8011b48:	4c0d      	ldr	r4, [pc, #52]	; (8011b80 <__libc_init_array+0x3c>)
 8011b4a:	1b64      	subs	r4, r4, r5
 8011b4c:	10a4      	asrs	r4, r4, #2
 8011b4e:	2600      	movs	r6, #0
 8011b50:	42a6      	cmp	r6, r4
 8011b52:	d109      	bne.n	8011b68 <__libc_init_array+0x24>
 8011b54:	4d0b      	ldr	r5, [pc, #44]	; (8011b84 <__libc_init_array+0x40>)
 8011b56:	4c0c      	ldr	r4, [pc, #48]	; (8011b88 <__libc_init_array+0x44>)
 8011b58:	f000 f900 	bl	8011d5c <_init>
 8011b5c:	1b64      	subs	r4, r4, r5
 8011b5e:	10a4      	asrs	r4, r4, #2
 8011b60:	2600      	movs	r6, #0
 8011b62:	42a6      	cmp	r6, r4
 8011b64:	d105      	bne.n	8011b72 <__libc_init_array+0x2e>
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b6c:	4798      	blx	r3
 8011b6e:	3601      	adds	r6, #1
 8011b70:	e7ee      	b.n	8011b50 <__libc_init_array+0xc>
 8011b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b76:	4798      	blx	r3
 8011b78:	3601      	adds	r6, #1
 8011b7a:	e7f2      	b.n	8011b62 <__libc_init_array+0x1e>
 8011b7c:	080122c8 	.word	0x080122c8
 8011b80:	080122c8 	.word	0x080122c8
 8011b84:	080122c8 	.word	0x080122c8
 8011b88:	080122e0 	.word	0x080122e0

08011b8c <__retarget_lock_acquire_recursive>:
 8011b8c:	4770      	bx	lr

08011b8e <__retarget_lock_release>:
 8011b8e:	4770      	bx	lr

08011b90 <__retarget_lock_release_recursive>:
 8011b90:	4770      	bx	lr
	...

08011b94 <malloc>:
 8011b94:	4b02      	ldr	r3, [pc, #8]	; (8011ba0 <malloc+0xc>)
 8011b96:	4601      	mov	r1, r0
 8011b98:	6818      	ldr	r0, [r3, #0]
 8011b9a:	f000 b847 	b.w	8011c2c <_malloc_r>
 8011b9e:	bf00      	nop
 8011ba0:	2000006c 	.word	0x2000006c

08011ba4 <memcmp>:
 8011ba4:	b510      	push	{r4, lr}
 8011ba6:	3901      	subs	r1, #1
 8011ba8:	4402      	add	r2, r0
 8011baa:	4290      	cmp	r0, r2
 8011bac:	d101      	bne.n	8011bb2 <memcmp+0xe>
 8011bae:	2000      	movs	r0, #0
 8011bb0:	e005      	b.n	8011bbe <memcmp+0x1a>
 8011bb2:	7803      	ldrb	r3, [r0, #0]
 8011bb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011bb8:	42a3      	cmp	r3, r4
 8011bba:	d001      	beq.n	8011bc0 <memcmp+0x1c>
 8011bbc:	1b18      	subs	r0, r3, r4
 8011bbe:	bd10      	pop	{r4, pc}
 8011bc0:	3001      	adds	r0, #1
 8011bc2:	e7f2      	b.n	8011baa <memcmp+0x6>

08011bc4 <memset>:
 8011bc4:	4402      	add	r2, r0
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d100      	bne.n	8011bce <memset+0xa>
 8011bcc:	4770      	bx	lr
 8011bce:	f803 1b01 	strb.w	r1, [r3], #1
 8011bd2:	e7f9      	b.n	8011bc8 <memset+0x4>

08011bd4 <__malloc_lock>:
 8011bd4:	4801      	ldr	r0, [pc, #4]	; (8011bdc <__malloc_lock+0x8>)
 8011bd6:	f7ff bfd9 	b.w	8011b8c <__retarget_lock_acquire_recursive>
 8011bda:	bf00      	nop
 8011bdc:	200002e9 	.word	0x200002e9

08011be0 <__malloc_unlock>:
 8011be0:	4801      	ldr	r0, [pc, #4]	; (8011be8 <__malloc_unlock+0x8>)
 8011be2:	f7ff bfd5 	b.w	8011b90 <__retarget_lock_release_recursive>
 8011be6:	bf00      	nop
 8011be8:	200002e9 	.word	0x200002e9

08011bec <sbrk_aligned>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	4e0e      	ldr	r6, [pc, #56]	; (8011c28 <sbrk_aligned+0x3c>)
 8011bf0:	460c      	mov	r4, r1
 8011bf2:	6831      	ldr	r1, [r6, #0]
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	b911      	cbnz	r1, 8011bfe <sbrk_aligned+0x12>
 8011bf8:	f000 f88c 	bl	8011d14 <_sbrk_r>
 8011bfc:	6030      	str	r0, [r6, #0]
 8011bfe:	4621      	mov	r1, r4
 8011c00:	4628      	mov	r0, r5
 8011c02:	f000 f887 	bl	8011d14 <_sbrk_r>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	d00a      	beq.n	8011c20 <sbrk_aligned+0x34>
 8011c0a:	1cc4      	adds	r4, r0, #3
 8011c0c:	f024 0403 	bic.w	r4, r4, #3
 8011c10:	42a0      	cmp	r0, r4
 8011c12:	d007      	beq.n	8011c24 <sbrk_aligned+0x38>
 8011c14:	1a21      	subs	r1, r4, r0
 8011c16:	4628      	mov	r0, r5
 8011c18:	f000 f87c 	bl	8011d14 <_sbrk_r>
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	d101      	bne.n	8011c24 <sbrk_aligned+0x38>
 8011c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011c24:	4620      	mov	r0, r4
 8011c26:	bd70      	pop	{r4, r5, r6, pc}
 8011c28:	200002f0 	.word	0x200002f0

08011c2c <_malloc_r>:
 8011c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c30:	1ccd      	adds	r5, r1, #3
 8011c32:	f025 0503 	bic.w	r5, r5, #3
 8011c36:	3508      	adds	r5, #8
 8011c38:	2d0c      	cmp	r5, #12
 8011c3a:	bf38      	it	cc
 8011c3c:	250c      	movcc	r5, #12
 8011c3e:	2d00      	cmp	r5, #0
 8011c40:	4607      	mov	r7, r0
 8011c42:	db01      	blt.n	8011c48 <_malloc_r+0x1c>
 8011c44:	42a9      	cmp	r1, r5
 8011c46:	d905      	bls.n	8011c54 <_malloc_r+0x28>
 8011c48:	230c      	movs	r3, #12
 8011c4a:	603b      	str	r3, [r7, #0]
 8011c4c:	2600      	movs	r6, #0
 8011c4e:	4630      	mov	r0, r6
 8011c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c54:	4e2e      	ldr	r6, [pc, #184]	; (8011d10 <_malloc_r+0xe4>)
 8011c56:	f7ff ffbd 	bl	8011bd4 <__malloc_lock>
 8011c5a:	6833      	ldr	r3, [r6, #0]
 8011c5c:	461c      	mov	r4, r3
 8011c5e:	bb34      	cbnz	r4, 8011cae <_malloc_r+0x82>
 8011c60:	4629      	mov	r1, r5
 8011c62:	4638      	mov	r0, r7
 8011c64:	f7ff ffc2 	bl	8011bec <sbrk_aligned>
 8011c68:	1c43      	adds	r3, r0, #1
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	d14d      	bne.n	8011d0a <_malloc_r+0xde>
 8011c6e:	6834      	ldr	r4, [r6, #0]
 8011c70:	4626      	mov	r6, r4
 8011c72:	2e00      	cmp	r6, #0
 8011c74:	d140      	bne.n	8011cf8 <_malloc_r+0xcc>
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	4631      	mov	r1, r6
 8011c7a:	4638      	mov	r0, r7
 8011c7c:	eb04 0803 	add.w	r8, r4, r3
 8011c80:	f000 f848 	bl	8011d14 <_sbrk_r>
 8011c84:	4580      	cmp	r8, r0
 8011c86:	d13a      	bne.n	8011cfe <_malloc_r+0xd2>
 8011c88:	6821      	ldr	r1, [r4, #0]
 8011c8a:	3503      	adds	r5, #3
 8011c8c:	1a6d      	subs	r5, r5, r1
 8011c8e:	f025 0503 	bic.w	r5, r5, #3
 8011c92:	3508      	adds	r5, #8
 8011c94:	2d0c      	cmp	r5, #12
 8011c96:	bf38      	it	cc
 8011c98:	250c      	movcc	r5, #12
 8011c9a:	4629      	mov	r1, r5
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	f7ff ffa5 	bl	8011bec <sbrk_aligned>
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d02b      	beq.n	8011cfe <_malloc_r+0xd2>
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	442b      	add	r3, r5
 8011caa:	6023      	str	r3, [r4, #0]
 8011cac:	e00e      	b.n	8011ccc <_malloc_r+0xa0>
 8011cae:	6822      	ldr	r2, [r4, #0]
 8011cb0:	1b52      	subs	r2, r2, r5
 8011cb2:	d41e      	bmi.n	8011cf2 <_malloc_r+0xc6>
 8011cb4:	2a0b      	cmp	r2, #11
 8011cb6:	d916      	bls.n	8011ce6 <_malloc_r+0xba>
 8011cb8:	1961      	adds	r1, r4, r5
 8011cba:	42a3      	cmp	r3, r4
 8011cbc:	6025      	str	r5, [r4, #0]
 8011cbe:	bf18      	it	ne
 8011cc0:	6059      	strne	r1, [r3, #4]
 8011cc2:	6863      	ldr	r3, [r4, #4]
 8011cc4:	bf08      	it	eq
 8011cc6:	6031      	streq	r1, [r6, #0]
 8011cc8:	5162      	str	r2, [r4, r5]
 8011cca:	604b      	str	r3, [r1, #4]
 8011ccc:	4638      	mov	r0, r7
 8011cce:	f104 060b 	add.w	r6, r4, #11
 8011cd2:	f7ff ff85 	bl	8011be0 <__malloc_unlock>
 8011cd6:	f026 0607 	bic.w	r6, r6, #7
 8011cda:	1d23      	adds	r3, r4, #4
 8011cdc:	1af2      	subs	r2, r6, r3
 8011cde:	d0b6      	beq.n	8011c4e <_malloc_r+0x22>
 8011ce0:	1b9b      	subs	r3, r3, r6
 8011ce2:	50a3      	str	r3, [r4, r2]
 8011ce4:	e7b3      	b.n	8011c4e <_malloc_r+0x22>
 8011ce6:	6862      	ldr	r2, [r4, #4]
 8011ce8:	42a3      	cmp	r3, r4
 8011cea:	bf0c      	ite	eq
 8011cec:	6032      	streq	r2, [r6, #0]
 8011cee:	605a      	strne	r2, [r3, #4]
 8011cf0:	e7ec      	b.n	8011ccc <_malloc_r+0xa0>
 8011cf2:	4623      	mov	r3, r4
 8011cf4:	6864      	ldr	r4, [r4, #4]
 8011cf6:	e7b2      	b.n	8011c5e <_malloc_r+0x32>
 8011cf8:	4634      	mov	r4, r6
 8011cfa:	6876      	ldr	r6, [r6, #4]
 8011cfc:	e7b9      	b.n	8011c72 <_malloc_r+0x46>
 8011cfe:	230c      	movs	r3, #12
 8011d00:	603b      	str	r3, [r7, #0]
 8011d02:	4638      	mov	r0, r7
 8011d04:	f7ff ff6c 	bl	8011be0 <__malloc_unlock>
 8011d08:	e7a1      	b.n	8011c4e <_malloc_r+0x22>
 8011d0a:	6025      	str	r5, [r4, #0]
 8011d0c:	e7de      	b.n	8011ccc <_malloc_r+0xa0>
 8011d0e:	bf00      	nop
 8011d10:	200002ec 	.word	0x200002ec

08011d14 <_sbrk_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4d06      	ldr	r5, [pc, #24]	; (8011d30 <_sbrk_r+0x1c>)
 8011d18:	2300      	movs	r3, #0
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	4608      	mov	r0, r1
 8011d1e:	602b      	str	r3, [r5, #0]
 8011d20:	f7ef fc74 	bl	800160c <_sbrk>
 8011d24:	1c43      	adds	r3, r0, #1
 8011d26:	d102      	bne.n	8011d2e <_sbrk_r+0x1a>
 8011d28:	682b      	ldr	r3, [r5, #0]
 8011d2a:	b103      	cbz	r3, 8011d2e <_sbrk_r+0x1a>
 8011d2c:	6023      	str	r3, [r4, #0]
 8011d2e:	bd38      	pop	{r3, r4, r5, pc}
 8011d30:	200003fc 	.word	0x200003fc

08011d34 <__stack_chk_init>:
 8011d34:	4b03      	ldr	r3, [pc, #12]	; (8011d44 <__stack_chk_init+0x10>)
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	b912      	cbnz	r2, 8011d40 <__stack_chk_init+0xc>
 8011d3a:	f5a2 0276 	sub.w	r2, r2, #16121856	; 0xf60000
 8011d3e:	601a      	str	r2, [r3, #0]
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	20000400 	.word	0x20000400

08011d48 <register_fini>:
 8011d48:	4b02      	ldr	r3, [pc, #8]	; (8011d54 <register_fini+0xc>)
 8011d4a:	b113      	cbz	r3, 8011d52 <register_fini+0xa>
 8011d4c:	4802      	ldr	r0, [pc, #8]	; (8011d58 <register_fini+0x10>)
 8011d4e:	f7ff bed9 	b.w	8011b04 <atexit>
 8011d52:	4770      	bx	lr
 8011d54:	00000000 	.word	0x00000000
 8011d58:	08011b1d 	.word	0x08011b1d

08011d5c <_init>:
 8011d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5e:	bf00      	nop
 8011d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d62:	bc08      	pop	{r3}
 8011d64:	469e      	mov	lr, r3
 8011d66:	4770      	bx	lr

08011d68 <_fini>:
 8011d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6a:	bf00      	nop
 8011d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d6e:	bc08      	pop	{r3}
 8011d70:	469e      	mov	lr, r3
 8011d72:	4770      	bx	lr
