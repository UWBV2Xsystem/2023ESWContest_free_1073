
F411CEU6_CAR_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0801202c  0801202c  0002202c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012578  08012578  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012578  08012578  00022578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012580  08012580  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08012580  08012580  00022580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012598  08012598  00022598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0801259c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200000e0  08012678  000300e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08012678  0003045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013263  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb3  00000000  00000000  0004336f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00046028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00047038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019162  00000000  00000000  00047f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014972  00000000  00000000  00061062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935d5  00000000  00000000  000759d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  00108fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f4  00000000  00000000  00109078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      00000453  00000000  00000000  0010d76c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <dw3000_driver>:
 8000198:	12 03 ca de 0f ff ff ff b4 22 01 08 bc 22 01 08     ........."..."..
 80001a8:	f0 21 01 08 b4 21 01 08 07 00 06 00                 .!...!......

080001b4 <dw3700_driver>:
 80001b4:	13 03 ca de 0f ff ff ff b4 22 01 08 bc 22 01 08     ........."..."..
 80001c4:	30 23 01 08 f4 22 01 08 07 00 06 00                 0#..."......

080001d0 <dw3720_driver>:
 80001d0:	14 03 ca de 0f ff ff ff b4 22 01 08 bc 22 01 08     ........."..."..
 80001e0:	40 24 01 08 04 24 01 08 07 00 06 00                 @$...$......

080001ec <__do_global_dtors_aux>:
 80001ec:	b510      	push	{r4, lr}
 80001ee:	4c05      	ldr	r4, [pc, #20]	; (8000204 <__do_global_dtors_aux+0x18>)
 80001f0:	7823      	ldrb	r3, [r4, #0]
 80001f2:	b933      	cbnz	r3, 8000202 <__do_global_dtors_aux+0x16>
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x1c>)
 80001f6:	b113      	cbz	r3, 80001fe <__do_global_dtors_aux+0x12>
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <__do_global_dtors_aux+0x20>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	2301      	movs	r3, #1
 8000200:	7023      	strb	r3, [r4, #0]
 8000202:	bd10      	pop	{r4, pc}
 8000204:	200000e0 	.word	0x200000e0
 8000208:	00000000 	.word	0x00000000
 800020c:	08012014 	.word	0x08012014

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	4b03      	ldr	r3, [pc, #12]	; (8000220 <frame_dummy+0x10>)
 8000214:	b11b      	cbz	r3, 800021e <frame_dummy+0xe>
 8000216:	4903      	ldr	r1, [pc, #12]	; (8000224 <frame_dummy+0x14>)
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <frame_dummy+0x18>)
 800021a:	f3af 8000 	nop.w
 800021e:	bd08      	pop	{r3, pc}
 8000220:	00000000 	.word	0x00000000
 8000224:	200000e4 	.word	0x200000e4
 8000228:	08012014 	.word	0x08012014

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f7ff bff2 	b.w	800023c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <Pdoa_uwb_tx>:

/**
 * Application entry point.
 */
int Pdoa_uwb_tx(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000546:	f000 fbb1 	bl	8000cac <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 800054a:	f000 fb2f 	bl	8000bac <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 800054e:	2002      	movs	r0, #2
 8000550:	f000 fb00 	bl	8000b54 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <Pdoa_uwb_tx+0xb8>)
 8000556:	f004 f90b 	bl	8004770 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 800055a:	bf00      	nop
 800055c:	f004 fa10 	bl	8004980 <dwt_checkidlerc>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0fa      	beq.n	800055c <Pdoa_uwb_tx+0x1c>

    if (dwt_initialise(DWT_DW_INIT /*| DWT_READ_OTP_PID*/) == DWT_ERROR)
 8000566:	2000      	movs	r0, #0
 8000568:	f004 f95c 	bl	8004824 <dwt_initialise>
 800056c:	4603      	mov	r3, r0
 800056e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000572:	d103      	bne.n	800057c <Pdoa_uwb_tx+0x3c>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <Pdoa_uwb_tx+0xbc>)
 8000576:	f000 fc95 	bl	8000ea4 <test_run_info>
        while (1) { };
 800057a:	e7fe      	b.n	800057a <Pdoa_uwb_tx+0x3a>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 800057c:	2003      	movs	r0, #3
 800057e:	f004 fa35 	bl	80049ec <dwt_setleds>

    /* Configure DW IC. See NOTE 5 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8000582:	481f      	ldr	r0, [pc, #124]	; (8000600 <Pdoa_uwb_tx+0xc0>)
 8000584:	f004 f95a 	bl	800483c <dwt_configure>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <Pdoa_uwb_tx+0x56>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <Pdoa_uwb_tx+0xc4>)
 8000590:	f000 fc88 	bl	8000ea4 <test_run_info>
        while (1) { };
 8000594:	e7fe      	b.n	8000594 <Pdoa_uwb_tx+0x54>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8000596:	481c      	ldr	r0, [pc, #112]	; (8000608 <Pdoa_uwb_tx+0xc8>)
 8000598:	f004 f95c 	bl	8004854 <dwt_configuretxrf>
//
//        return 0;
//
//    }

    for (int var = 0; var < 5; var++) {
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e021      	b.n	80005e6 <Pdoa_uwb_tx+0xa6>

    	dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 80005a2:	2200      	movs	r2, #0
 80005a4:	4919      	ldr	r1, [pc, #100]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005a6:	200a      	movs	r0, #10
 80005a8:	f004 f984 	bl	80048b4 <dwt_writetxdata>

		/* In this example since the length of the transmitted frame does not change,
		 * nor the other parameters of the dwt_writetxfctrl function, the
		 * dwt_writetxfctrl call could be outside the main while(1) loop.
		 */
		dwt_writetxfctrl(FRAME_LENGTH, 0, 0); /* Zero offset in TX buffer, no ranging. */
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	200c      	movs	r0, #12
 80005b2:	f004 f98d 	bl	80048d0 <dwt_writetxfctrl>

		/* Start transmission. */
		dwt_starttx(DWT_START_TX_IMMEDIATE);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f004 f998 	bl	80048ec <dwt_starttx>
		/* Poll DW IC until TX frame sent event set. See NOTE 4 below.
		 * STATUS register is 4 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
		 * function to access it.*/
		waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 80005bc:	2300      	movs	r3, #0
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	2100      	movs	r1, #0
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fc2d 	bl	8000e22 <waitforsysstatus>

		/* Clear TX frame sent event. */
		dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 80005c8:	2080      	movs	r0, #128	; 0x80
 80005ca:	f004 fa21 	bl	8004a10 <dwt_writesysstatuslo>

		/* Execute a delay between transmissions. */
		Sleep(TX_DELAY_MS);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 fac0 	bl	8000b54 <Sleep>



		/* Increment the blink frame sequence number (modulo 256). */
		tx_msg[BLINK_FRAME_SN_IDX]++;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <Pdoa_uwb_tx+0xcc>)
 80005de:	705a      	strb	r2, [r3, #1]
    for (int var = 0; var < 5; var++) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	ddda      	ble.n	80005a2 <Pdoa_uwb_tx+0x62>

	}

    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08012090 	.word	0x08012090
 80005fc:	0801202c 	.word	0x0801202c
 8000600:	20000000 	.word	0x20000000
 8000604:	08012040 	.word	0x08012040
 8000608:	2000004c 	.word	0x2000004c
 800060c:	20000010 	.word	0x20000010

08000610 <ss_twr_responder_uwb>:
 * @param  none
 *
 * @return none
 */
int ss_twr_responder_uwb(void)
{
 8000610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000614:	b088      	sub	sp, #32
 8000616:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */


    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000618:	f000 fb48 	bl	8000cac <port_set_dw_ic_spi_fastrate>

    /* Reset and initialize DW chip. */
    reset_DWIC(); /* Target specific drive of RSTn line into DW3000 low for a period. */
 800061c:	f000 fac6 	bl	8000bac <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fa97 	bl	8000b54 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000626:	4869      	ldr	r0, [pc, #420]	; (80007cc <ss_twr_responder_uwb+0x1bc>)
 8000628:	f004 f8a2 	bl	8004770 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 800062c:	bf00      	nop
 800062e:	f004 f9a7 	bl	8004980 <dwt_checkidlerc>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0fa      	beq.n	800062e <ss_twr_responder_uwb+0x1e>
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8000638:	2000      	movs	r0, #0
 800063a:	f004 f8f3 	bl	8004824 <dwt_initialise>
 800063e:	4603      	mov	r3, r0
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000644:	d103      	bne.n	800064e <ss_twr_responder_uwb+0x3e>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8000646:	4862      	ldr	r0, [pc, #392]	; (80007d0 <ss_twr_responder_uwb+0x1c0>)
 8000648:	f000 fc2c 	bl	8000ea4 <test_run_info>
        while (1) { };
 800064c:	e7fe      	b.n	800064c <ss_twr_responder_uwb+0x3c>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 800064e:	2003      	movs	r0, #3
 8000650:	f004 f9cc 	bl	80049ec <dwt_setleds>

    /* Configure DW IC. See NOTE 13 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config_twr))
 8000654:	485f      	ldr	r0, [pc, #380]	; (80007d4 <ss_twr_responder_uwb+0x1c4>)
 8000656:	f004 f8f1 	bl	800483c <dwt_configure>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <ss_twr_responder_uwb+0x58>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8000660:	485d      	ldr	r0, [pc, #372]	; (80007d8 <ss_twr_responder_uwb+0x1c8>)
 8000662:	f000 fc1f 	bl	8000ea4 <test_run_info>
        while (1) { };
 8000666:	e7fe      	b.n	8000666 <ss_twr_responder_uwb+0x56>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8000668:	485c      	ldr	r0, [pc, #368]	; (80007dc <ss_twr_responder_uwb+0x1cc>)
 800066a:	f004 f8f3 	bl	8004854 <dwt_configuretxrf>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 800066e:	f244 0001 	movw	r0, #16385	; 0x4001
 8000672:	f004 f8fb 	bl	800486c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8000676:	f244 0001 	movw	r0, #16385	; 0x4001
 800067a:	f004 f909 	bl	8004890 <dwt_settxantennadelay>

    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 800067e:	2003      	movs	r0, #3
 8000680:	f004 f8c2 	bl	8004808 <dwt_setlnapamode>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8000684:	2000      	movs	r0, #0
 8000686:	f004 f96f 	bl	8004968 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 6 below. */
        waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR), 0);
 800068a:	2300      	movs	r3, #0
 800068c:	4a54      	ldr	r2, [pc, #336]	; (80007e0 <ss_twr_responder_uwb+0x1d0>)
 800068e:	2100      	movs	r1, #0
 8000690:	4854      	ldr	r0, [pc, #336]	; (80007e4 <ss_twr_responder_uwb+0x1d4>)
 8000692:	f000 fbc6 	bl	8000e22 <waitforsysstatus>

        if (status_reg & DWT_INT_RXFCG_BIT_MASK)
 8000696:	4b53      	ldr	r3, [pc, #332]	; (80007e4 <ss_twr_responder_uwb+0x1d4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f000 808a 	beq.w	80007b8 <ss_twr_responder_uwb+0x1a8>
        {
            uint16_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 80006a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006a8:	f004 f9b2 	bl	8004a10 <dwt_writesysstatuslo>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_getframelength();
 80006ac:	f004 f9e6 	bl	8004a7c <dwt_getframelength>
 80006b0:	4603      	mov	r3, r0
 80006b2:	83fb      	strh	r3, [r7, #30]
            if (frame_len <= sizeof(rx_buffer))
 80006b4:	8bfb      	ldrh	r3, [r7, #30]
 80006b6:	2b0c      	cmp	r3, #12
 80006b8:	d8e4      	bhi.n	8000684 <ss_twr_responder_uwb+0x74>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80006ba:	8bfb      	ldrh	r3, [r7, #30]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	4849      	ldr	r0, [pc, #292]	; (80007e8 <ss_twr_responder_uwb+0x1d8>)
 80006c2:	f004 f985 	bl	80049d0 <dwt_readrxdata>

                /* Check that the frame is a poll sent by "SS TWR initiator" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 80006c6:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <ss_twr_responder_uwb+0x1d8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]
                if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 80006cc:	220a      	movs	r2, #10
 80006ce:	4947      	ldr	r1, [pc, #284]	; (80007ec <ss_twr_responder_uwb+0x1dc>)
 80006d0:	4845      	ldr	r0, [pc, #276]	; (80007e8 <ss_twr_responder_uwb+0x1d8>)
 80006d2:	f011 fbc3 	bl	8011e5c <memcmp>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1d3      	bne.n	8000684 <ss_twr_responder_uwb+0x74>
                {
                    uint32_t resp_tx_time;
                    int ret;

                    /* Retrieve poll reception timestamp. */
                    poll_rx_ts = get_rx_timestamp_u64();
 80006dc:	f000 fb34 	bl	8000d48 <get_rx_timestamp_u64>
 80006e0:	4602      	mov	r2, r0
 80006e2:	460b      	mov	r3, r1
 80006e4:	4942      	ldr	r1, [pc, #264]	; (80007f0 <ss_twr_responder_uwb+0x1e0>)
 80006e6:	e9c1 2300 	strd	r2, r3, [r1]

                    /* Compute response message transmission time. See NOTE 7 below. */
                    resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80006ea:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <ss_twr_responder_uwb+0x1e0>)
 80006ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f0:	4940      	ldr	r1, [pc, #256]	; (80007f4 <ss_twr_responder_uwb+0x1e4>)
 80006f2:	eb12 0801 	adds.w	r8, r2, r1
 80006f6:	f143 0900 	adc.w	r9, r3, #0
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8000706:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 800070a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800070e:	4613      	mov	r3, r2
 8000710:	61bb      	str	r3, [r7, #24]
                    dwt_setdelayedtrxtime(resp_tx_time);
 8000712:	69b8      	ldr	r0, [r7, #24]
 8000714:	f004 f8fc 	bl	8004910 <dwt_setdelayedtrxtime>

                    /* Response TX timestamp is the transmission time we programmed plus the antenna delay. */
                    resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	2200      	movs	r2, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	60fa      	str	r2, [r7, #12]
 8000720:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000724:	460b      	mov	r3, r1
 8000726:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 800072a:	460b      	mov	r3, r1
 800072c:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8000730:	f42a 74ff 	bic.w	r4, sl, #510	; 0x1fe
 8000734:	f024 0401 	bic.w	r4, r4, #1
 8000738:	f00b 05ff 	and.w	r5, fp, #255	; 0xff
 800073c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000740:	18e3      	adds	r3, r4, r3
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	f145 0300 	adc.w	r3, r5, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <ss_twr_responder_uwb+0x1e8>)
 800074c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000750:	e9c3 1200 	strd	r1, r2, [r3]

                    /* Write all timestamps in the final message. See NOTE 8 below. */
                    resp_msg_set_ts(&tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX], poll_rx_ts);
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <ss_twr_responder_uwb+0x1e0>)
 8000756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800075a:	4828      	ldr	r0, [pc, #160]	; (80007fc <ss_twr_responder_uwb+0x1ec>)
 800075c:	f000 fb35 	bl	8000dca <resp_msg_set_ts>
                    resp_msg_set_ts(&tx_resp_msg[RESP_MSG_RESP_TX_TS_IDX], resp_tx_ts);
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <ss_twr_responder_uwb+0x1e8>)
 8000762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000766:	4826      	ldr	r0, [pc, #152]	; (8000800 <ss_twr_responder_uwb+0x1f0>)
 8000768:	f000 fb2f 	bl	8000dca <resp_msg_set_ts>

                    /* Write and send the response message. See NOTE 9 below. */
                    tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <ss_twr_responder_uwb+0x1f8>)
 8000772:	709a      	strb	r2, [r3, #2]
                    dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8000774:	2200      	movs	r2, #0
 8000776:	4924      	ldr	r1, [pc, #144]	; (8000808 <ss_twr_responder_uwb+0x1f8>)
 8000778:	2014      	movs	r0, #20
 800077a:	f004 f89b 	bl	80048b4 <dwt_writetxdata>
                    dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 800077e:	2201      	movs	r2, #1
 8000780:	2100      	movs	r1, #0
 8000782:	2014      	movs	r0, #20
 8000784:	f004 f8a4 	bl	80048d0 <dwt_writetxfctrl>
                    ret = dwt_starttx(DWT_START_TX_DELAYED);
 8000788:	2001      	movs	r0, #1
 800078a:	f004 f8af 	bl	80048ec <dwt_starttx>
 800078e:	6178      	str	r0, [r7, #20]

                    /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 10 below. */
                    if (ret == DWT_SUCCESS)
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d10e      	bne.n	80007b4 <ss_twr_responder_uwb+0x1a4>
                    {
                        /* Poll DW IC until TX frame sent event set. See NOTE 6 below. */
                        waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 8000796:	2300      	movs	r3, #0
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fb40 	bl	8000e22 <waitforsysstatus>

                        /* Clear TXFRS event. */
                        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	f004 f934 	bl	8004a10 <dwt_writesysstatuslo>

                        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
                        frame_seq_nb++;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <ss_twr_responder_uwb+0x1f4>)
 80007b2:	701a      	strb	r2, [r3, #0]


                    }
                    return 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	e003      	b.n	80007c0 <ss_twr_responder_uwb+0x1b0>
            }
        }
        else
        {
            /* Clear RX error events in the DW IC status register. */
            dwt_writesysstatuslo(SYS_STATUS_ALL_RX_ERR);
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <ss_twr_responder_uwb+0x1fc>)
 80007ba:	f004 f929 	bl	8004a10 <dwt_writesysstatuslo>
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80007be:	e761      	b.n	8000684 <ss_twr_responder_uwb+0x74>
        }
    }
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007ca:	bf00      	nop
 80007cc:	08012090 	.word	0x08012090
 80007d0:	08012054 	.word	0x08012054
 80007d4:	2000001c 	.word	0x2000001c
 80007d8:	08012068 	.word	0x08012068
 80007dc:	2000004c 	.word	0x2000004c
 80007e0:	3405d000 	.word	0x3405d000
 80007e4:	2000010c 	.word	0x2000010c
 80007e8:	20000100 	.word	0x20000100
 80007ec:	2000002c 	.word	0x2000002c
 80007f0:	20000110 	.word	0x20000110
 80007f4:	0279c104 	.word	0x0279c104
 80007f8:	20000118 	.word	0x20000118
 80007fc:	20000042 	.word	0x20000042
 8000800:	20000046 	.word	0x20000046
 8000804:	200000fc 	.word	0x200000fc
 8000808:	20000038 	.word	0x20000038
 800080c:	34059000 	.word	0x34059000

08000810 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8000816:	f000 fa7d 	bl	8000d14 <port_GetEXT_IRQStatus>
 800081a:	4603      	mov	r3, r0
 800081c:	607b      	str	r3, [r7, #4]

    if (s)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 8000824:	f000 fa52 	bl	8000ccc <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
    if (s)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8000840:	f000 fa56 	bl	8000cf0 <port_EnableEXT_IRQ>
    }
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f97d 	bl	8000b54 <Sleep>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f956 	bl	8000b1c <usleep>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4603      	mov	r3, r0
 8000884:	81fb      	strh	r3, [r7, #14]
 8000886:	4613      	mov	r3, r2
 8000888:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 800088a:	f7ff ffc1 	bl	8000810 <decamutexon>
 800088e:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000890:	bf00      	nop
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <writetospiwithcrc+0x90>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f002 f9c1 	bl	8002c1e <HAL_SPI_GetState>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d1f7      	bne.n	8000892 <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <writetospiwithcrc+0x94>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <writetospiwithcrc+0x98>)
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4819      	ldr	r0, [pc, #100]	; (8000914 <writetospiwithcrc+0x9c>)
 80008ae:	f001 fb7f 	bl	8001fb0 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <writetospiwithcrc+0x90>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	89fa      	ldrh	r2, [r7, #14]
 80008b8:	230a      	movs	r3, #10
 80008ba:	68b9      	ldr	r1, [r7, #8]
 80008bc:	f002 f873 	bl	80029a6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <writetospiwithcrc+0x90>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	89ba      	ldrh	r2, [r7, #12]
 80008c6:	230a      	movs	r3, #10
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	f002 f86c 	bl	80029a6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <writetospiwithcrc+0x90>)
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	230a      	movs	r3, #10
 80008d4:	2201      	movs	r2, #1
 80008d6:	f107 0120 	add.w	r1, r7, #32
 80008da:	f002 f864 	bl	80029a6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <writetospiwithcrc+0x94>)
 80008e0:	8819      	ldrh	r1, [r3, #0]
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <writetospiwithcrc+0x98>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	bf0c      	ite	eq
 80008ea:	2301      	moveq	r3, #1
 80008ec:	2300      	movne	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <writetospiwithcrc+0x9c>)
 80008f4:	f001 fb5c 	bl	8001fb0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	f7ff ff9a 	bl	8000832 <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80008fe:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000060 	.word	0x20000060
 800090c:	20000064 	.word	0x20000064
 8000910:	2000024c 	.word	0x2000024c
 8000914:	40020000 	.word	0x40020000

08000918 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4603      	mov	r3, r0
 8000924:	81fb      	strh	r3, [r7, #14]
 8000926:	4613      	mov	r3, r2
 8000928:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 800092a:	f7ff ff71 	bl	8000810 <decamutexon>
 800092e:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000930:	bf00      	nop
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <writetospi+0x8c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f971 	bl	8002c1e <HAL_SPI_GetState>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d1f7      	bne.n	8000932 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <writetospi+0x90>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	4a19      	ldr	r2, [pc, #100]	; (80009ac <writetospi+0x94>)
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	4818      	ldr	r0, [pc, #96]	; (80009b0 <writetospi+0x98>)
 800094e:	f001 fb2f 	bl	8001fb0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <writetospi+0x8c>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	89fa      	ldrh	r2, [r7, #14]
 8000958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	f002 f822 	bl	80029a6 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8000962:	89bb      	ldrh	r3, [r7, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d007      	beq.n	8000978 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <writetospi+0x8c>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	89ba      	ldrh	r2, [r7, #12]
 800096e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f002 f817 	bl	80029a6 <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <writetospi+0x90>)
 800097a:	8819      	ldrh	r1, [r3, #0]
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <writetospi+0x94>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <writetospi+0x98>)
 800098e:	f001 fb0f 	bl	8001fb0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff4d 	bl	8000832 <decamutexoff>

    return 0;
 8000998:	2300      	movs	r3, #0
} // end writetospi()
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000060 	.word	0x20000060
 80009a8:	20000064 	.word	0x20000064
 80009ac:	2000024c 	.word	0x2000024c
 80009b0:	40020000 	.word	0x40020000

080009b4 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	4613      	mov	r3, r2
 80009c4:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 80009c6:	f7ff ff23 	bl	8000810 <decamutexon>
 80009ca:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80009cc:	bf00      	nop
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <readfromspi+0xd4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f923 	bl	8002c1e <HAL_SPI_GetState>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d1f7      	bne.n	80009ce <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <readfromspi+0xd8>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <readfromspi+0xdc>)
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <readfromspi+0xe0>)
 80009ea:	f001 fae1 	bl	8001fb0 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <readfromspi+0xd4>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	89fa      	ldrh	r2, [r7, #14]
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	f001 ffd4 	bl	80029a6 <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80009fe:	bf00      	nop
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <readfromspi+0xd4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d1f7      	bne.n	8000a00 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8000a10:	e01f      	b.n	8000a52 <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 8000a12:	bf00      	nop
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <readfromspi+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d1f7      	bne.n	8000a14 <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <readfromspi+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8000a2e:	bf00      	nop
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <readfromspi+0xd4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d1f7      	bne.n	8000a30 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <readfromspi+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68d9      	ldr	r1, [r3, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8000a52:	89bb      	ldrh	r3, [r7, #12]
 8000a54:	1e5a      	subs	r2, r3, #1
 8000a56:	81ba      	strh	r2, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1da      	bne.n	8000a12 <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <readfromspi+0xd8>)
 8000a5e:	8819      	ldrh	r1, [r3, #0]
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <readfromspi+0xdc>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <readfromspi+0xe0>)
 8000a72:	f001 fa9d 	bl	8001fb0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff fedb 	bl	8000832 <decamutexoff>

    return 0;
 8000a7c:	2300      	movs	r3, #0
} // end readfromspi()
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000060 	.word	0x20000060
 8000a8c:	20000064 	.word	0x20000064
 8000a90:	2000024c 	.word	0x2000024c
 8000a94:	40020000 	.word	0x40020000

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db12      	blt.n	8000b0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	490a      	ldr	r1, [pc, #40]	; (8000b18 <__NVIC_DisableIRQ+0x44>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	3320      	adds	r3, #32
 8000afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b00:	f3bf 8f4f 	dsb	sy
}
 8000b04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b06:	f3bf 8f6f 	isb	sy
}
 8000b0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e003      	b.n	8000b3e <usleep+0x22>
    {
        __NOP();
 8000b36:	bf00      	nop
    for (i = 0; i < usec; i++)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3f7      	bcc.n	8000b36 <usleep+0x1a>
    }
    return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 ff3b 	bl	80019d8 <HAL_Delay>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <EXTI_GetITEnStatus+0x3c>)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	095b      	lsrs	r3, r3, #5
 8000b7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 031f 	and.w	r3, r3, #31
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb6:	2311      	movs	r3, #17
 8000bb8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480a      	ldr	r0, [pc, #40]	; (8000bec <reset_DWIC+0x40>)
 8000bc4:	f001 f870 	bl	8001ca8 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <reset_DWIC+0x40>)
 8000bce:	f001 f9ef 	bl	8001fb0 <HAL_GPIO_WritePin>

    usleep(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff ffa2 	bl	8000b1c <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 f809 	bl	8000bf0 <setup_DWICRSTnIRQ>
    Sleep(2);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ffb8 	bl	8000b54 <Sleep>
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020400 	.word	0x40020400

08000bf0 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d015      	beq.n	8000c2a <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c06:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <setup_DWICRSTnIRQ+0x70>)
 8000c14:	f001 f848 	bl	8001ca8 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f001 f81c 	bl	8001c56 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	2006      	movs	r0, #6
 8000c24:	f000 fffb 	bl	8001c1e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8000c28:	e015      	b.n	8000c56 <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000c2a:	2006      	movs	r0, #6
 8000c2c:	f001 f821 	bl	8001c72 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c34:	2311      	movs	r3, #17
 8000c36:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <setup_DWICRSTnIRQ+0x70>)
 8000c48:	f001 f82e 	bl	8001ca8 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <setup_DWICRSTnIRQ+0x70>)
 8000c52:	f001 f9ad 	bl	8001fb0 <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020400 	.word	0x40020400

08000c64 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <wakeup_device_with_io+0x24>)
 8000c6e:	f001 f99f 	bl	8001fb0 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff ff6e 	bl	8000b54 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <wakeup_device_with_io+0x24>)
 8000c7e:	f001 f997 	bl	8001fb0 <HAL_GPIO_WritePin>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020400 	.word	0x40020400

08000c8c <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <port_set_dw_ic_spi_slowrate+0x1c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2218      	movs	r2, #24
 8000c96:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <port_set_dw_ic_spi_slowrate+0x1c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fdf9 	bl	8002894 <HAL_SPI_Init>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000060 	.word	0x20000060

08000cac <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <port_set_dw_ic_spi_fastrate+0x1c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <port_set_dw_ic_spi_fastrate+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fde9 	bl	8002894 <HAL_SPI_Init>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000060 	.word	0x20000060

08000ccc <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <port_DisableEXT_IRQ+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8000cd8:	2028      	movs	r0, #40	; 0x28
 8000cda:	f7ff fefb 	bl	8000ad4 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 8000cde:	e002      	b.n	8000ce6 <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8000ce0:	2017      	movs	r0, #23
 8000ce2:	f7ff fef7 	bl	8000ad4 <__NVIC_DisableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000024d 	.word	0x2000024d

08000cf0 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <port_EnableEXT_IRQ+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d103      	bne.n	8000d04 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8000cfc:	2028      	movs	r0, #40	; 0x28
 8000cfe:	f7ff fecb 	bl	8000a98 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8000d02:	e002      	b.n	8000d0a <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8000d04:	2017      	movs	r0, #23
 8000d06:	f7ff fec7 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000024d 	.word	0x2000024d

08000d14 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <port_GetEXT_IRQStatus+0x30>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d105      	bne.n	8000d2e <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8000d22:	2028      	movs	r0, #40	; 0x28
 8000d24:	f7ff ff22 	bl	8000b6c <EXTI_GetITEnStatus>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	e004      	b.n	8000d38 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8000d2e:	2017      	movs	r0, #23
 8000d30:	f7ff ff1c 	bl	8000b6c <EXTI_GetITEnStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	607b      	str	r3, [r7, #4]
    }
    return status;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000024d 	.word	0x2000024d

08000d48 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 8000d48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fde8 	bl	8004934 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8000d64:	2304      	movs	r3, #4
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	e023      	b.n	8000db2 <get_rx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 8000d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	020b      	lsls	r3, r1, #8
 8000d78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000d7c:	0202      	lsls	r2, r0, #8
 8000d7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	3310      	adds	r3, #16
 8000d88:	443b      	add	r3, r7
 8000d8a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2200      	movs	r2, #0
 8000d92:	461c      	mov	r4, r3
 8000d94:	4615      	mov	r5, r2
 8000d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d9a:	ea42 0804 	orr.w	r8, r2, r4
 8000d9e:	ea43 0905 	orr.w	r9, r3, r5
 8000da2:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dad7      	bge.n	8000d6a <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8000dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000dca <resp_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_set_ts(uint8_t *ts_field, const uint64_t ts)
{
 8000dca:	b4f0      	push	{r4, r5, r6, r7}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	75fb      	strb	r3, [r7, #23]
 8000dda:	e019      	b.n	8000e10 <resp_msg_set_ts+0x46>
    {
        ts_field[i] = (uint8_t)(ts >> (i * 8));
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	00d9      	lsls	r1, r3, #3
 8000de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	f1a1 0020 	sub.w	r0, r1, #32
 8000dec:	fa22 f401 	lsr.w	r4, r2, r1
 8000df0:	fa03 f606 	lsl.w	r6, r3, r6
 8000df4:	4334      	orrs	r4, r6
 8000df6:	fa23 f000 	lsr.w	r0, r3, r0
 8000dfa:	4304      	orrs	r4, r0
 8000dfc:	fa23 f501 	lsr.w	r5, r3, r1
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	4413      	add	r3, r2
 8000e06:	b2e2      	uxtb	r2, r4
 8000e08:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	75fb      	strb	r3, [r7, #23]
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d9e2      	bls.n	8000ddc <resp_msg_set_ts+0x12>
    }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e20:	4770      	bx	lr

08000e22 <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d014      	beq.n	8000e68 <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000e3e:	e00a      	b.n	8000e56 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 8000e46:	f003 fe07 	bl	8004a58 <dwt_readsysstatushi>
 8000e4a:	6138      	str	r0, [r7, #16]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d115      	bne.n	8000e82 <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000e56:	f003 fded 	bl	8004a34 <dwt_readsysstatuslo>
 8000e5a:	6178      	str	r0, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0ec      	beq.n	8000e40 <waitforsysstatus+0x1e>
 8000e66:	e00d      	b.n	8000e84 <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00a      	beq.n	8000e84 <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8000e6e:	bf00      	nop
 8000e70:	f003 fdf2 	bl	8004a58 <dwt_readsysstatushi>
 8000e74:	6138      	str	r0, [r7, #16]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f7      	beq.n	8000e70 <waitforsysstatus+0x4e>
 8000e80:	e000      	b.n	8000e84 <waitforsysstatus+0x62>
                    break;
 8000e82:	bf00      	nop
    }

    if (lo_result != NULL)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	601a      	str	r2, [r3, #0]
    }
}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <test_run_info>:

unsigned char T_light = 0;
unsigned char T_light_cnt = 0;

void test_run_info(unsigned char *data) // UART print code will be added.
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(LED_S_GPIO_Port,LED_S_Pin, GPIO_PIN_RESET);
	uint16_t data_length;

	data_length = strlen((const char *)data);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff f9bd 	bl	800022c <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, data_length, 1000);
 8000eb6:	89fa      	ldrh	r2, [r7, #14]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <test_run_info+0x28>)
 8000ec0:	f002 ff81 	bl	8003dc6 <HAL_UART_Transmit>

	//HAL_GPIO_WritePin(LED_S_GPIO_Port,LED_S_Pin, GPIO_PIN_SET);
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000208 	.word	0x20000208

08000ed0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d171      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0xf6>
  {
	 switch (T_light) {
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d048      	beq.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0xac>
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	dc67      	bgt.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0xee>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d021      	beq.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x6a>
			else{
				T_light_cnt++;
			}
			break;
		default:
			break;
 8000ef6:	e062      	b.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0xee>
			if (T_light_cnt > 5){
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d915      	bls.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x5c>
				T_light_cnt = 0;
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
				T_light = 2; //to green
 8000f06:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	701a      	strb	r2, [r3, #0]
				tx_msg[9] = 'G';
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f0e:	2247      	movs	r2, #71	; 0x47
 8000f10:	725a      	strb	r2, [r3, #9]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f18:	4830      	ldr	r0, [pc, #192]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f1a:	f001 f849 	bl	8001fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f24:	482d      	ldr	r0, [pc, #180]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f26:	f001 f843 	bl	8001fb0 <HAL_GPIO_WritePin>
			break;
 8000f2a:	e049      	b.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				T_light_cnt++;
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f36:	701a      	strb	r2, [r3, #0]
			break;
 8000f38:	e042      	b.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf0>
			if (T_light_cnt > 3){
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d915      	bls.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x9e>
				T_light_cnt = 0;
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
				T_light = 0; //to red
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
				tx_msg[9] = 'R';
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f50:	2252      	movs	r2, #82	; 0x52
 8000f52:	725a      	strb	r2, [r3, #9]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5a:	4820      	ldr	r0, [pc, #128]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f5c:	f001 f828 	bl	8001fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f66:	481d      	ldr	r0, [pc, #116]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f68:	f001 f822 	bl	8001fb0 <HAL_GPIO_WritePin>
			break;
 8000f6c:	e028      	b.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				T_light_cnt++;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f78:	701a      	strb	r2, [r3, #0]
			break;
 8000f7a:	e021      	b.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf0>
			if (T_light_cnt > 8){
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d915      	bls.n	8000fb0 <HAL_TIM_PeriodElapsedCallback+0xe0>
				T_light_cnt = 0;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
				T_light = 1; //to yellow
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
				tx_msg[9] = 'Y';
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f92:	2259      	movs	r2, #89	; 0x59
 8000f94:	725a      	strb	r2, [r3, #9]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f9e:	f001 f807 	bl	8001fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000faa:	f001 f801 	bl	8001fb0 <HAL_GPIO_WritePin>
			break;
 8000fae:	e007      	b.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				T_light_cnt++;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fba:	701a      	strb	r2, [r3, #0]
			break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xf0>
			break;
 8000fbe:	bf00      	nop
	}
    HAL_TIM_Base_Start_IT(&htim2);
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000fc2:	f001 ff55 	bl	8002e70 <HAL_TIM_Base_Start_IT>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000024e 	.word	0x2000024e
 8000fd4:	2000024f 	.word	0x2000024f
 8000fd8:	20000054 	.word	0x20000054
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	200001c0 	.word	0x200001c0

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fc84 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f828 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f9f6 	bl	80013e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ff4:	f000 f88e 	bl	8001114 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ff8:	f000 f9c8 	bl	800138c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ffc:	f000 f8c0 	bl	8001180 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001000:	f000 f976 	bl	80012f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <main+0x54>)
 8001006:	f001 ff33 	bl	8002e70 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 800100a:	f7ff fe5f 	bl	8000ccc <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fdee 	bl	8000bf0 <setup_DWICRSTnIRQ>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <main+0x58>)
 800101c:	f000 ffc8 	bl	8001fb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <main+0x58>)
 8001028:	f000 ffc2 	bl	8001fb0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  ss_twr_responder_uwb();
 800102c:	f7ff faf0 	bl	8000610 <ss_twr_responder_uwb>
	  Pdoa_uwb_tx();
 8001030:	f7ff fa86 	bl	8000540 <Pdoa_uwb_tx>
	  ss_twr_responder_uwb();
 8001034:	e7fa      	b.n	800102c <main+0x48>
 8001036:	bf00      	nop
 8001038:	200001c0 	.word	0x200001c0
 800103c:	40020400 	.word	0x40020400

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f010 ff14 	bl	8011e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <SystemClock_Config+0xcc>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <SystemClock_Config+0xd0>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 80010b0:	2314      	movs	r3, #20
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80010b4:	23a0      	movs	r3, #160	; 0xa0
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b8:	2304      	movs	r3, #4
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 ff8d 	bl	8001fe4 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d0:	f000 fa32 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2101      	movs	r1, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f9ee 	bl	80024d4 <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010fe:	f000 fa1b 	bl	8001538 <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3750      	adds	r7, #80	; 0x50
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_SPI1_Init+0x64>)
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_SPI1_Init+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_SPI1_Init+0x64>)
 8001120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_SPI1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_SPI1_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_SPI1_Init+0x64>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_SPI1_Init+0x64>)
 8001148:	2210      	movs	r2, #16
 800114a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_SPI1_Init+0x64>)
 8001160:	220a      	movs	r2, #10
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_SPI1_Init+0x64>)
 8001166:	f001 fb95 	bl	8002894 <HAL_SPI_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001170:	f000 f9e2 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000120 	.word	0x20000120
 800117c:	40013000 	.word	0x40013000

08001180 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b09a      	sub	sp, #104	; 0x68
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001194:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2220      	movs	r2, #32
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f010 fe57 	bl	8011e7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ce:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011d0:	4a46      	ldr	r2, [pc, #280]	; (80012ec <MX_TIM1_Init+0x16c>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011e0:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f0:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fc:	483a      	ldr	r0, [pc, #232]	; (80012e8 <MX_TIM1_Init+0x168>)
 80011fe:	f001 fde7 	bl	8002dd0 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001208:	f000 f996 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001216:	4619      	mov	r1, r3
 8001218:	4833      	ldr	r0, [pc, #204]	; (80012e8 <MX_TIM1_Init+0x168>)
 800121a:	f002 f849 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001224:	f000 f988 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <MX_TIM1_Init+0x168>)
 800122a:	f001 fe83 	bl	8002f34 <HAL_TIM_OC_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001234:	f000 f980 	bl	8001538 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001238:	2306      	movs	r3, #6
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800123c:	2300      	movs	r3, #0
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001240:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001244:	4619      	mov	r1, r3
 8001246:	4828      	ldr	r0, [pc, #160]	; (80012e8 <MX_TIM1_Init+0x168>)
 8001248:	f002 f8f9 	bl	800343e <HAL_TIM_SlaveConfigSynchro>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001252:	f000 f971 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001262:	4619      	mov	r1, r3
 8001264:	4820      	ldr	r0, [pc, #128]	; (80012e8 <MX_TIM1_Init+0x168>)
 8001266:	f002 fc8d 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001270:	f000 f962 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_TIM1_Init+0x168>)
 800129a:	f001 ffad 	bl	80031f8 <HAL_TIM_OC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80012a4:	f000 f948 	bl	8001538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM1_Init+0x168>)
 80012cc:	f002 fcc8 	bl	8003c60 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80012d6:	f000 f92f 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM1_Init+0x168>)
 80012dc:	f000 f9e6 	bl	80016ac <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3768      	adds	r7, #104	; 0x68
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000178 	.word	0x20000178
 80012ec:	40010000 	.word	0x40010000

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM2_Init+0x98>)
 800130e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000;
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM2_Init+0x98>)
 8001316:	f242 3228 	movw	r2, #9000	; 0x2328
 800131a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM2_Init+0x98>)
 8001324:	f241 3287 	movw	r2, #4999	; 0x1387
 8001328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM2_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM2_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_TIM2_Init+0x98>)
 8001338:	f001 fd4a 	bl	8002dd0 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001342:	f000 f8f9 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM2_Init+0x98>)
 8001354:	f001 ffac 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800135e:	f000 f8eb 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM2_Init+0x98>)
 8001370:	f002 fc08 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800137a:	f000 f8dd 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001c0 	.word	0x200001c0

0800138c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <MX_USART1_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013c4:	f002 fcb2 	bl	8003d2c <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 f8b3 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000208 	.word	0x20000208
 80013dc:	40011000 	.word	0x40011000

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <MX_GPIO_Init+0x148>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a4a      	ldr	r2, [pc, #296]	; (8001528 <MX_GPIO_Init+0x148>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b48      	ldr	r3, [pc, #288]	; (8001528 <MX_GPIO_Init+0x148>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <MX_GPIO_Init+0x148>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a43      	ldr	r2, [pc, #268]	; (8001528 <MX_GPIO_Init+0x148>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <MX_GPIO_Init+0x148>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <MX_GPIO_Init+0x148>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <MX_GPIO_Init+0x148>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <MX_GPIO_Init+0x148>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <MX_GPIO_Init+0x148>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a35      	ldr	r2, [pc, #212]	; (8001528 <MX_GPIO_Init+0x148>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MX_GPIO_Init+0x148>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_S_GPIO_Port, LED_S_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146c:	482f      	ldr	r0, [pc, #188]	; (800152c <MX_GPIO_Init+0x14c>)
 800146e:	f000 fd9f 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2110      	movs	r1, #16
 8001476:	482e      	ldr	r0, [pc, #184]	; (8001530 <MX_GPIO_Init+0x150>)
 8001478:	f000 fd9a 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2103      	movs	r1, #3
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <MX_GPIO_Init+0x154>)
 8001482:	f000 fd95 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_r_Pin|LED_y_Pin|LED_g_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <MX_GPIO_Init+0x154>)
 800148e:	f000 fd8f 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_S_Pin */
  GPIO_InitStruct.Pin = LED_S_Pin;
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_S_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4820      	ldr	r0, [pc, #128]	; (800152c <MX_GPIO_Init+0x14c>)
 80014ac:	f000 fbfc 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin|DW_IRQn_Pin;
 80014b0:	2306      	movs	r3, #6
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	481a      	ldr	r0, [pc, #104]	; (8001530 <MX_GPIO_Init+0x150>)
 80014c6:	f000 fbef 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80014ca:	2310      	movs	r3, #16
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_GPIO_Init+0x150>)
 80014e2:	f000 fbe1 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_NSS1_WAKEUP_Pin;
 80014e6:	2303      	movs	r3, #3
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_GPIO_Init+0x154>)
 80014fe:	f000 fbd3 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_r_Pin LED_y_Pin LED_g_Pin */
  GPIO_InitStruct.Pin = LED_r_Pin|LED_y_Pin|LED_g_Pin;
 8001502:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_GPIO_Init+0x154>)
 800151c:	f000 fbc4 	bl	8001ca8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40020800 	.word	0x40020800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_SPI_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12b      	bne.n	800160e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_SPI_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ee:	23e0      	movs	r3, #224	; 0xe0
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015fe:	2305      	movs	r3, #5
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_SPI_MspInit+0x8c>)
 800160a:	f000 fb4d 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40013000 	.word	0x40013000
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_TIM_Base_MspInit+0x80>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d116      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_TIM_Base_MspInit+0x84>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <HAL_TIM_Base_MspInit+0x84>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_TIM_Base_MspInit+0x84>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2105      	movs	r1, #5
 8001656:	201b      	movs	r0, #27
 8001658:	f000 fae1 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800165c:	201b      	movs	r0, #27
 800165e:	f000 fafa 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001662:	e01a      	b.n	800169a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166c:	d115      	bne.n	800169a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_TIM_Base_MspInit+0x84>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_TIM_Base_MspInit+0x84>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_TIM_Base_MspInit+0x84>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201c      	movs	r0, #28
 8001690:	f000 fac5 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001694:	201c      	movs	r0, #28
 8001696:	f000 fade 	bl	8001c56 <HAL_NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <HAL_TIM_MspPostInit+0x68>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d11e      	bne.n	800170c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_TIM_MspPostInit+0x70>)
 8001708:	f000 face 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010000 	.word	0x40010000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_UART_MspInit+0x84>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d12b      	bne.n	800179a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_UART_MspInit+0x88>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0x88>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_UART_MspInit+0x88>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_UART_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_UART_MspInit+0x88>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_UART_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800177a:	23c0      	movs	r3, #192	; 0xc0
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178a:	2307      	movs	r3, #7
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <HAL_UART_MspInit+0x8c>)
 8001796:	f000 fa87 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020400 	.word	0x40020400

080017b0 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017de:	f000 f8db 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM1_CC_IRQHandler+0x10>)
 80017ee:	f001 fbfa 	bl	8002fe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000178 	.word	0x20000178

080017fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM2_IRQHandler+0x10>)
 8001802:	f001 fbf0 	bl	8002fe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001c0 	.word	0x200001c0

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f010 fac2 	bl	8011dc8 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20020000 	.word	0x20020000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000250 	.word	0x20000250
 8001878:	20000460 	.word	0x20000460

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <SystemInit+0x20>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <SystemInit+0x20>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a6:	490e      	ldr	r1, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018bc:	4c0b      	ldr	r4, [pc, #44]	; (80018ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ca:	f7ff ffd7 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f010 fa95 	bl	8011dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fb87 	bl	8000fe4 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80018e4:	0801259c 	.word	0x0801259c
  ldr r2, =_sbss
 80018e8:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80018ec:	2000045c 	.word	0x2000045c

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f973 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fe0c 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f999 	bl	8001c8e <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001974:	f000 f953 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000068 	.word	0x20000068
 8001990:	20000070 	.word	0x20000070
 8001994:	2000006c 	.word	0x2000006c

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000070 	.word	0x20000070
 80019bc:	20000254 	.word	0x20000254

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000254 	.word	0x20000254

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000070 	.word	0x20000070

08001a20 <__NVIC_SetPriorityGrouping>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_DisableIRQ>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db12      	blt.n	8001af8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	490a      	ldr	r1, [pc, #40]	; (8001b04 <__NVIC_DisableIRQ+0x44>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	3320      	adds	r3, #32
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aec:	f3bf 8f4f 	dsb	sy
}
 8001af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001af2:	f3bf 8f6f 	isb	sy
}
 8001af6:	bf00      	nop
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff05 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff1a 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff0d 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff1d 	bl	8001ac0 <__NVIC_DisableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff94 	bl	8001bc4 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e159      	b.n	8001f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8148 	bne.w	8001f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d005      	beq.n	8001cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d130      	bne.n	8001d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d017      	beq.n	8001d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d123      	bne.n	8001dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a2 	beq.w	8001f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a56      	ldr	r2, [pc, #344]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4a:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x202>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x1fe>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_GPIO_Init+0x2f8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <HAL_GPIO_Init+0x2fc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x1f6>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a45      	ldr	r2, [pc, #276]	; (8001fa8 <HAL_GPIO_Init+0x300>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x1f2>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eee:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f42:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f aea2 	bls.w	8001cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e267      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d075      	beq.n	80020ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002002:	4b88      	ldr	r3, [pc, #544]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d00c      	beq.n	8002028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b85      	ldr	r3, [pc, #532]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002016:	2b08      	cmp	r3, #8
 8002018:	d112      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4b82      	ldr	r3, [pc, #520]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05b      	beq.n	80020ec <HAL_RCC_OscConfig+0x108>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d157      	bne.n	80020ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e242      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x74>
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a75      	ldr	r2, [pc, #468]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b70      	ldr	r3, [pc, #448]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6f      	ldr	r2, [pc, #444]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a6c      	ldr	r2, [pc, #432]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 800207c:	4b69      	ldr	r3, [pc, #420]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a68      	ldr	r2, [pc, #416]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a65      	ldr	r2, [pc, #404]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fc90 	bl	80019c0 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fc8c 	bl	80019c0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e207      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xc0>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fc7c 	bl	80019c0 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fc78 	bl	80019c0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1f3      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0xe8>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d063      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b44      	ldr	r3, [pc, #272]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x152>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1c7      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4937      	ldr	r1, [pc, #220]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e03a      	b.n	80021c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_OscConfig+0x244>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff fc31 	bl	80019c0 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002162:	f7ff fc2d 	bl	80019c0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e1a8      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4925      	ldr	r1, [pc, #148]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x244>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fc10 	bl	80019c0 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a4:	f7ff fc0c 	bl	80019c0 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e187      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d036      	beq.n	800223c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_RCC_OscConfig+0x248>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7ff fbf0 	bl	80019c0 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff fbec 	bl	80019c0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e167      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_OscConfig+0x240>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x200>
 8002202:	e01b      	b.n	800223c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_OscConfig+0x248>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff fbd9 	bl	80019c0 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	e00e      	b.n	8002230 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002212:	f7ff fbd5 	bl	80019c0 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d907      	bls.n	8002230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e150      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
 8002224:	40023800 	.word	0x40023800
 8002228:	42470000 	.word	0x42470000
 800222c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b88      	ldr	r3, [pc, #544]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ea      	bne.n	8002212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8097 	beq.w	8002378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b7d      	ldr	r3, [pc, #500]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a7c      	ldr	r2, [pc, #496]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b7a      	ldr	r3, [pc, #488]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b77      	ldr	r3, [pc, #476]	; (8002458 <HAL_RCC_OscConfig+0x474>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d118      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b74      	ldr	r3, [pc, #464]	; (8002458 <HAL_RCC_OscConfig+0x474>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a73      	ldr	r2, [pc, #460]	; (8002458 <HAL_RCC_OscConfig+0x474>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7ff fb95 	bl	80019c0 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229a:	f7ff fb91 	bl	80019c0 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e10c      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x474>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x2ea>
 80022c0:	4b64      	ldr	r3, [pc, #400]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a63      	ldr	r2, [pc, #396]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	e01c      	b.n	8002308 <HAL_RCC_OscConfig+0x324>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x30c>
 80022d6:	4b5f      	ldr	r3, [pc, #380]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	4a5e      	ldr	r2, [pc, #376]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	; 0x70
 80022e2:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	4a5b      	ldr	r2, [pc, #364]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0x324>
 80022f0:	4b58      	ldr	r3, [pc, #352]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	4a57      	ldr	r2, [pc, #348]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	6713      	str	r3, [r2, #112]	; 0x70
 80022fc:	4b55      	ldr	r3, [pc, #340]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	4a54      	ldr	r2, [pc, #336]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7ff fb56 	bl	80019c0 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7ff fb52 	bl	80019c0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0cb      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	4b49      	ldr	r3, [pc, #292]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ee      	beq.n	8002318 <HAL_RCC_OscConfig+0x334>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7ff fb40 	bl	80019c0 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7ff fb3c 	bl	80019c0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0b5      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235a:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ee      	bne.n	8002344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a38      	ldr	r2, [pc, #224]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002376:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a1 	beq.w	80024c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002382:	4b34      	ldr	r3, [pc, #208]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b08      	cmp	r3, #8
 800238c:	d05c      	beq.n	8002448 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d141      	bne.n	800241a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_RCC_OscConfig+0x478>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fb10 	bl	80019c0 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7ff fb0c 	bl	80019c0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e087      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	3b01      	subs	r3, #1
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	491b      	ldr	r1, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x478>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fae5 	bl	80019c0 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7ff fae1 	bl	80019c0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e05c      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x416>
 8002418:	e054      	b.n	80024c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <HAL_RCC_OscConfig+0x478>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff face 	bl	80019c0 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff faca 	bl	80019c0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e045      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_OscConfig+0x470>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x444>
 8002446:	e03d      	b.n	80024c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e038      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
 8002454:	40023800 	.word	0x40023800
 8002458:	40007000 	.word	0x40007000
 800245c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x4ec>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d028      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d121      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d11a      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	4293      	cmp	r3, r2
 800249a:	d111      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	3b01      	subs	r3, #1
 80024aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0cc      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b68      	ldr	r3, [pc, #416]	; (800268c <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d90c      	bls.n	8002510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800254a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d044      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d119      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d003      	beq.n	8002592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258e:	2b03      	cmp	r3, #3
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e067      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b37      	ldr	r3, [pc, #220]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4934      	ldr	r1, [pc, #208]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c4:	f7ff f9fc 	bl	80019c0 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7ff f9f8 	bl	80019c0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e04f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b25      	ldr	r3, [pc, #148]	; (800268c <HAL_RCC_ClockConfig+0x1b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d20c      	bcs.n	800261c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f95c 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00
 8002690:	40023800 	.word	0x40023800
 8002694:	0801209c 	.word	0x0801209c
 8002698:	20000068 	.word	0x20000068
 800269c:	2000006c 	.word	0x2000006c

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a4:	b090      	sub	sp, #64	; 0x40
 80026a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	; 0x34
 80026ac:	2300      	movs	r3, #0
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d00d      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x40>
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	f200 80a1 	bhi.w	800280c <HAL_RCC_GetSysClockFreq+0x16c>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x3a>
 80026d2:	e09b      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_GetSysClockFreq+0x184>)
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026d8:	e09b      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026da:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_GetSysClockFreq+0x188>)
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026de:	e098      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e0:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ea:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d028      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	627a      	str	r2, [r7, #36]	; 0x24
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002708:	2100      	movs	r1, #0
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_GetSysClockFreq+0x188>)
 800270c:	fb03 f201 	mul.w	r2, r3, r1
 8002710:	2300      	movs	r3, #0
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	4413      	add	r3, r2
 8002718:	4a43      	ldr	r2, [pc, #268]	; (8002828 <HAL_RCC_GetSysClockFreq+0x188>)
 800271a:	fba0 1202 	umull	r1, r2, r0, r2
 800271e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002720:	460a      	mov	r2, r1
 8002722:	62ba      	str	r2, [r7, #40]	; 0x28
 8002724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002726:	4413      	add	r3, r2
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	2200      	movs	r2, #0
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	61fa      	str	r2, [r7, #28]
 8002732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800273a:	f7fd fd81 	bl	8000240 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4613      	mov	r3, r2
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002746:	e053      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002748:	4b35      	ldr	r3, [pc, #212]	; (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	2200      	movs	r2, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	617a      	str	r2, [r7, #20]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800275a:	f04f 0b00 	mov.w	fp, #0
 800275e:	4652      	mov	r2, sl
 8002760:	465b      	mov	r3, fp
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	0159      	lsls	r1, r3, #5
 800276c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002770:	0150      	lsls	r0, r2, #5
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	ebb2 080a 	subs.w	r8, r2, sl
 800277a:	eb63 090b 	sbc.w	r9, r3, fp
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800278a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800278e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002792:	ebb2 0408 	subs.w	r4, r2, r8
 8002796:	eb63 0509 	sbc.w	r5, r3, r9
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	00eb      	lsls	r3, r5, #3
 80027a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a8:	00e2      	lsls	r2, r4, #3
 80027aa:	4614      	mov	r4, r2
 80027ac:	461d      	mov	r5, r3
 80027ae:	eb14 030a 	adds.w	r3, r4, sl
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	eb45 030b 	adc.w	r3, r5, fp
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c6:	4629      	mov	r1, r5
 80027c8:	028b      	lsls	r3, r1, #10
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d0:	4621      	mov	r1, r4
 80027d2:	028a      	lsls	r2, r1, #10
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027da:	2200      	movs	r2, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	60fa      	str	r2, [r7, #12]
 80027e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e4:	f7fd fd2c 	bl	8000240 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetSysClockFreq+0x184>)
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002814:	4618      	mov	r0, r3
 8002816:	3740      	adds	r7, #64	; 0x40
 8002818:	46bd      	mov	sp, r7
 800281a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	00f42400 	.word	0x00f42400
 8002828:	017d7840 	.word	0x017d7840

0800282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000068 	.word	0x20000068

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	080120ac 	.word	0x080120ac

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffdc 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0b5b      	lsrs	r3, r3, #13
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	080120ac 	.word	0x080120ac

08002894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07b      	b.n	800299e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b6:	d009      	beq.n	80028cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
 80028be:	e005      	b.n	80028cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fe54 	bl	8001594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002902:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	ea42 0103 	orr.w	r1, r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0104 	and.w	r1, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	f003 0210 	and.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_SPI_Transmit+0x22>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e126      	b.n	8002c16 <HAL_SPI_Transmit+0x270>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029d0:	f7fe fff6 	bl	80019c0 <HAL_GetTick>
 80029d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ea:	e10b      	b.n	8002c04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_SPI_Transmit+0x52>
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029fc:	e102      	b.n	8002c04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2203      	movs	r2, #3
 8002a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a44:	d10f      	bne.n	8002a66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d007      	beq.n	8002a84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8c:	d14b      	bne.n	8002b26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_SPI_Transmit+0xf6>
 8002a96:	8afb      	ldrh	r3, [r7, #22]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d13e      	bne.n	8002b1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	1c9a      	adds	r2, r3, #2
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ac0:	e02b      	b.n	8002b1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d112      	bne.n	8002af6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002af4:	e011      	b.n	8002b1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af6:	f7fe ff63 	bl	80019c0 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d803      	bhi.n	8002b0e <HAL_SPI_Transmit+0x168>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0c:	d102      	bne.n	8002b14 <HAL_SPI_Transmit+0x16e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b18:	e074      	b.n	8002c04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ce      	bne.n	8002ac2 <HAL_SPI_Transmit+0x11c>
 8002b24:	e04c      	b.n	8002bc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_SPI_Transmit+0x18e>
 8002b2e:	8afb      	ldrh	r3, [r7, #22]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d140      	bne.n	8002bb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	7812      	ldrb	r2, [r2, #0]
 8002b40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b5a:	e02c      	b.n	8002bb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d113      	bne.n	8002b92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b90:	e011      	b.n	8002bb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b92:	f7fe ff15 	bl	80019c0 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d803      	bhi.n	8002baa <HAL_SPI_Transmit+0x204>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba8:	d102      	bne.n	8002bb0 <HAL_SPI_Transmit+0x20a>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bb4:	e026      	b.n	8002c04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1cd      	bne.n	8002b5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f8c1 	bl	8002d4c <SPI_EndRxTxTransaction>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	e000      	b.n	8002c04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c2c:	b2db      	uxtb	r3, r3
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c4c:	f7fe feb8 	bl	80019c0 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c5c:	f7fe feb0 	bl	80019c0 <HAL_GetTick>
 8002c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c62:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	015b      	lsls	r3, r3, #5
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c72:	e054      	b.n	8002d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d050      	beq.n	8002d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c7c:	f7fe fea0 	bl	80019c0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d902      	bls.n	8002c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d13d      	bne.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002caa:	d111      	bne.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb4:	d004      	beq.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbe:	d107      	bne.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd8:	d10f      	bne.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e017      	b.n	8002d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4013      	ands	r3, r2
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d19b      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000068 	.word	0x20000068

08002d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <SPI_EndRxTxTransaction+0x7c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <SPI_EndRxTxTransaction+0x80>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0d5b      	lsrs	r3, r3, #21
 8002d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d76:	d112      	bne.n	8002d9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2180      	movs	r1, #128	; 0x80
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff ff5a 	bl	8002c3c <SPI_WaitFlagStateUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e00f      	b.n	8002dbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d0f2      	beq.n	8002d9e <SPI_EndRxTxTransaction+0x52>
 8002db8:	e000      	b.n	8002dbc <SPI_EndRxTxTransaction+0x70>
        break;
 8002dba:	bf00      	nop
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000068 	.word	0x20000068
 8002dcc:	165e9f81 	.word	0x165e9f81

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e041      	b.n	8002e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fc14 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 fb80 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d001      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e044      	b.n	8002f12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d018      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d013      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_TIM_Base_Start_IT+0xb4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d111      	bne.n	8002f00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d010      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	e007      	b.n	8002f10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40014000 	.word	0x40014000

08002f34 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e041      	b.n	8002fca <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f839 	bl	8002fd2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f000 face 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d122      	bne.n	8003042 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d11b      	bne.n	8003042 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f06f 0202 	mvn.w	r2, #2
 8003012:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fa54 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 800302e:	e005      	b.n	800303c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa46 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa57 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d122      	bne.n	8003096 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d11b      	bne.n	8003096 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f06f 0204 	mvn.w	r2, #4
 8003066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fa2a 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8003082:	e005      	b.n	8003090 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa1c 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa2d 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d122      	bne.n	80030ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11b      	bne.n	80030ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0208 	mvn.w	r2, #8
 80030ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2204      	movs	r2, #4
 80030c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa00 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 80030d6:	e005      	b.n	80030e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f9f2 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa03 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d122      	bne.n	800313e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d11b      	bne.n	800313e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0210 	mvn.w	r2, #16
 800310e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2208      	movs	r2, #8
 8003114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f9d6 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 800312a:	e005      	b.n	8003138 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9c8 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9d9 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10e      	bne.n	800316a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0201 	mvn.w	r2, #1
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd feb3 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d10e      	bne.n	8003196 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d107      	bne.n	8003196 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fdc1 	bl	8003d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d10e      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f99e 	bl	80034fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d10e      	bne.n	80031ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d107      	bne.n	80031ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f06f 0220 	mvn.w	r2, #32
 80031e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fd8b 	bl	8003d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003212:	2302      	movs	r3, #2
 8003214:	e048      	b.n	80032a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d839      	bhi.n	8003298 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003224:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003261 	.word	0x08003261
 8003230:	08003299 	.word	0x08003299
 8003234:	08003299 	.word	0x08003299
 8003238:	08003299 	.word	0x08003299
 800323c:	0800326f 	.word	0x0800326f
 8003240:	08003299 	.word	0x08003299
 8003244:	08003299 	.word	0x08003299
 8003248:	08003299 	.word	0x08003299
 800324c:	0800327d 	.word	0x0800327d
 8003250:	08003299 	.word	0x08003299
 8003254:	08003299 	.word	0x08003299
 8003258:	08003299 	.word	0x08003299
 800325c:	0800328b 	.word	0x0800328b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f9d4 	bl	8003614 <TIM_OC1_SetConfig>
      break;
 800326c:	e017      	b.n	800329e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fa33 	bl	80036e0 <TIM_OC2_SetConfig>
      break;
 800327a:	e010      	b.n	800329e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fa98 	bl	80037b8 <TIM_OC3_SetConfig>
      break;
 8003288:	e009      	b.n	800329e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fafb 	bl	800388c <TIM_OC4_SetConfig>
      break;
 8003296:	e002      	b.n	800329e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
      break;
 800329c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_ConfigClockSource+0x1c>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0b4      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x186>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d03e      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0xd4>
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330a:	f200 8087 	bhi.w	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	f000 8086 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x172>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d87f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d01a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xa6>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d87b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d050      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x11a>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d877      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d03c      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xfa>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d873      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d058      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x13a>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d86f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d064      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d86b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d060      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d867      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003350:	2b10      	cmp	r3, #16
 8003352:	d05a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	e062      	b.n	800341c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 fbec 	bl	8003b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	609a      	str	r2, [r3, #8]
      break;
 8003382:	e04f      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f000 fbd5 	bl	8003b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e03c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 fb49 	bl	8003a4e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2150      	movs	r1, #80	; 0x50
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fba2 	bl	8003b0c <TIM_ITRx_SetConfig>
      break;
 80033c8:	e02c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 fb68 	bl	8003aac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2160      	movs	r1, #96	; 0x60
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fb92 	bl	8003b0c <TIM_ITRx_SetConfig>
      break;
 80033e8:	e01c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 fb29 	bl	8003a4e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fb82 	bl	8003b0c <TIM_ITRx_SetConfig>
      break;
 8003408:	e00c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 fb79 	bl	8003b0c <TIM_ITRx_SetConfig>
      break;
 800341a:	e003      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e000      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003452:	2302      	movs	r3, #2
 8003454:	e031      	b.n	80034ba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fa5f 	bl	800392c <TIM_SlaveTimer_SetConfig>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e018      	b.n	80034ba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003496:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034a6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <TIM_Base_SetConfig+0xe4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a31      	ldr	r2, [pc, #196]	; (80035fc <TIM_Base_SetConfig+0xe8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a30      	ldr	r2, [pc, #192]	; (8003600 <TIM_Base_SetConfig+0xec>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <TIM_Base_SetConfig+0xf0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <TIM_Base_SetConfig+0xe4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d017      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a22      	ldr	r2, [pc, #136]	; (80035fc <TIM_Base_SetConfig+0xe8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a21      	ldr	r2, [pc, #132]	; (8003600 <TIM_Base_SetConfig+0xec>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00f      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <TIM_Base_SetConfig+0xf0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <TIM_Base_SetConfig+0xf4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <TIM_Base_SetConfig+0xf8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <TIM_Base_SetConfig+0xfc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d108      	bne.n	80035b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <TIM_Base_SetConfig+0xe4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d103      	bne.n	80035e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800

08003614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f023 0201 	bic.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 0302 	bic.w	r3, r3, #2
 800365c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <TIM_OC1_SetConfig+0xc8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10c      	bne.n	800368a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0308 	bic.w	r3, r3, #8
 8003676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <TIM_OC1_SetConfig+0xc8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d111      	bne.n	80036b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	621a      	str	r2, [r3, #32]
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40010000 	.word	0x40010000

080036e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0210 	bic.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0320 	bic.w	r3, r3, #32
 800372a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <TIM_OC2_SetConfig+0xd4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10d      	bne.n	800375c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800375a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <TIM_OC2_SetConfig+0xd4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d113      	bne.n	800378c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800376a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000

080037b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <TIM_OC3_SetConfig+0xd0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10d      	bne.n	8003832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800381c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a14      	ldr	r2, [pc, #80]	; (8003888 <TIM_OC3_SetConfig+0xd0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d113      	bne.n	8003862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40010000 	.word	0x40010000

0800388c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	031b      	lsls	r3, r3, #12
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a10      	ldr	r2, [pc, #64]	; (8003928 <TIM_OC4_SetConfig+0x9c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d109      	bne.n	8003900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000

0800392c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b70      	cmp	r3, #112	; 0x70
 8003974:	d01a      	beq.n	80039ac <TIM_SlaveTimer_SetConfig+0x80>
 8003976:	2b70      	cmp	r3, #112	; 0x70
 8003978:	d860      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d054      	beq.n	8003a28 <TIM_SlaveTimer_SetConfig+0xfc>
 800397e:	2b60      	cmp	r3, #96	; 0x60
 8003980:	d85c      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 8003982:	2b50      	cmp	r3, #80	; 0x50
 8003984:	d046      	beq.n	8003a14 <TIM_SlaveTimer_SetConfig+0xe8>
 8003986:	2b50      	cmp	r3, #80	; 0x50
 8003988:	d858      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d019      	beq.n	80039c2 <TIM_SlaveTimer_SetConfig+0x96>
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d854      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d055      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 8003996:	2b30      	cmp	r3, #48	; 0x30
 8003998:	d850      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 800399a:	2b20      	cmp	r3, #32
 800399c:	d051      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d84c      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04d      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d04b      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 80039aa:	e047      	b.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68d9      	ldr	r1, [r3, #12]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f000 f8c1 	bl	8003b42 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80039c0:	e040      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d101      	bne.n	80039ce <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e03b      	b.n	8003a46 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
      break;
 8003a12:	e017      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f000 f814 	bl	8003a4e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003a26:	e00d      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	461a      	mov	r2, r3
 8003a36:	f000 f839 	bl	8003aac <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003a3a:	e003      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a40:	e000      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003a42:	bf00      	nop
  }

  return status;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b087      	sub	sp, #28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 0201 	bic.w	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 030a 	bic.w	r3, r3, #10
 8003a8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f023 0210 	bic.w	r2, r3, #16
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	031b      	lsls	r3, r3, #12
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f043 0307 	orr.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e050      	b.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d013      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40014000 	.word	0x40014000

08003c60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e03d      	b.n	8003cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e03f      	b.n	8003dbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fd fce4 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	; 0x24
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f929 	bl	8003fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b08a      	sub	sp, #40	; 0x28
 8003dca:	af02      	add	r7, sp, #8
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d17c      	bne.n	8003ee0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_UART_Transmit+0x2c>
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e075      	b.n	8003ee2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_UART_Transmit+0x3e>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e06e      	b.n	8003ee2 <HAL_UART_Transmit+0x11c>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2221      	movs	r2, #33	; 0x21
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e1a:	f7fd fdd1 	bl	80019c0 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d108      	bne.n	8003e48 <HAL_UART_Transmit+0x82>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e003      	b.n	8003e50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e58:	e02a      	b.n	8003eb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f840 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e036      	b.n	8003ee2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e007      	b.n	8003ea2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1cf      	bne.n	8003e5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2140      	movs	r1, #64	; 0x40
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f810 	bl	8003eea <UART_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e006      	b.n	8003ee2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b090      	sub	sp, #64	; 0x40
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efa:	e050      	b.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f02:	d04c      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f0a:	f7fd fd59 	bl	80019c0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d241      	bcs.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f3a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f6e:	623a      	str	r2, [r7, #32]
 8003f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	69f9      	ldr	r1, [r7, #28]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00f      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d09f      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3740      	adds	r7, #64	; 0x40
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b0c0      	sub	sp, #256	; 0x100
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	68d9      	ldr	r1, [r3, #12]
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	ea40 0301 	orr.w	r3, r0, r1
 8003ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	431a      	orrs	r2, r3
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004020:	f021 010c 	bic.w	r1, r1, #12
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800402e:	430b      	orrs	r3, r1
 8004030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	6999      	ldr	r1, [r3, #24]
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	ea40 0301 	orr.w	r3, r0, r1
 800404e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b8f      	ldr	r3, [pc, #572]	; (8004294 <UART_SetConfig+0x2cc>)
 8004058:	429a      	cmp	r2, r3
 800405a:	d005      	beq.n	8004068 <UART_SetConfig+0xa0>
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b8d      	ldr	r3, [pc, #564]	; (8004298 <UART_SetConfig+0x2d0>)
 8004064:	429a      	cmp	r2, r3
 8004066:	d104      	bne.n	8004072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7fe fc00 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 800406c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004070:	e003      	b.n	800407a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004072:	f7fe fbe7 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004076:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004084:	f040 810c 	bne.w	80042a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004092:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80040a2:	415b      	adcs	r3, r3
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040aa:	4621      	mov	r1, r4
 80040ac:	eb12 0801 	adds.w	r8, r2, r1
 80040b0:	4629      	mov	r1, r5
 80040b2:	eb43 0901 	adc.w	r9, r3, r1
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ca:	4690      	mov	r8, r2
 80040cc:	4699      	mov	r9, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	eb18 0303 	adds.w	r3, r8, r3
 80040d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040d8:	462b      	mov	r3, r5
 80040da:	eb49 0303 	adc.w	r3, r9, r3
 80040de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040f6:	460b      	mov	r3, r1
 80040f8:	18db      	adds	r3, r3, r3
 80040fa:	653b      	str	r3, [r7, #80]	; 0x50
 80040fc:	4613      	mov	r3, r2
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	657b      	str	r3, [r7, #84]	; 0x54
 8004104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800410c:	f7fc f898 	bl	8000240 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <UART_SetConfig+0x2d4>)
 8004116:	fba3 2302 	umull	r2, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	011c      	lsls	r4, r3, #4
 800411e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004122:	2200      	movs	r2, #0
 8004124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004128:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800412c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	1891      	adds	r1, r2, r2
 8004136:	64b9      	str	r1, [r7, #72]	; 0x48
 8004138:	415b      	adcs	r3, r3
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800413c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004140:	4641      	mov	r1, r8
 8004142:	eb12 0a01 	adds.w	sl, r2, r1
 8004146:	4649      	mov	r1, r9
 8004148:	eb43 0b01 	adc.w	fp, r3, r1
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800415c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004160:	4692      	mov	sl, r2
 8004162:	469b      	mov	fp, r3
 8004164:	4643      	mov	r3, r8
 8004166:	eb1a 0303 	adds.w	r3, sl, r3
 800416a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800416e:	464b      	mov	r3, r9
 8004170:	eb4b 0303 	adc.w	r3, fp, r3
 8004174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004184:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800418c:	460b      	mov	r3, r1
 800418e:	18db      	adds	r3, r3, r3
 8004190:	643b      	str	r3, [r7, #64]	; 0x40
 8004192:	4613      	mov	r3, r2
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
 800419a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800419e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041a2:	f7fc f84d 	bl	8000240 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4611      	mov	r1, r2
 80041ac:	4b3b      	ldr	r3, [pc, #236]	; (800429c <UART_SetConfig+0x2d4>)
 80041ae:	fba3 2301 	umull	r2, r3, r3, r1
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2264      	movs	r2, #100	; 0x64
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	1acb      	subs	r3, r1, r3
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041c2:	4b36      	ldr	r3, [pc, #216]	; (800429c <UART_SetConfig+0x2d4>)
 80041c4:	fba3 2302 	umull	r2, r3, r3, r2
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041d0:	441c      	add	r4, r3
 80041d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
 80041e8:	1891      	adds	r1, r2, r2
 80041ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80041ec:	415b      	adcs	r3, r3
 80041ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041f4:	4641      	mov	r1, r8
 80041f6:	1851      	adds	r1, r2, r1
 80041f8:	6339      	str	r1, [r7, #48]	; 0x30
 80041fa:	4649      	mov	r1, r9
 80041fc:	414b      	adcs	r3, r1
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800420c:	4659      	mov	r1, fp
 800420e:	00cb      	lsls	r3, r1, #3
 8004210:	4651      	mov	r1, sl
 8004212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004216:	4651      	mov	r1, sl
 8004218:	00ca      	lsls	r2, r1, #3
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	4603      	mov	r3, r0
 8004220:	4642      	mov	r2, r8
 8004222:	189b      	adds	r3, r3, r2
 8004224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004228:	464b      	mov	r3, r9
 800422a:	460a      	mov	r2, r1
 800422c:	eb42 0303 	adc.w	r3, r2, r3
 8004230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004240:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004248:	460b      	mov	r3, r1
 800424a:	18db      	adds	r3, r3, r3
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
 800424e:	4613      	mov	r3, r2
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800425a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800425e:	f7fb ffef 	bl	8000240 <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <UART_SetConfig+0x2d4>)
 8004268:	fba3 1302 	umull	r1, r3, r3, r2
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	2164      	movs	r1, #100	; 0x64
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	3332      	adds	r3, #50	; 0x32
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <UART_SetConfig+0x2d4>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	f003 0207 	and.w	r2, r3, #7
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4422      	add	r2, r4
 800428e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004290:	e105      	b.n	800449e <UART_SetConfig+0x4d6>
 8004292:	bf00      	nop
 8004294:	40011000 	.word	0x40011000
 8004298:	40011400 	.word	0x40011400
 800429c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042b2:	4642      	mov	r2, r8
 80042b4:	464b      	mov	r3, r9
 80042b6:	1891      	adds	r1, r2, r2
 80042b8:	6239      	str	r1, [r7, #32]
 80042ba:	415b      	adcs	r3, r3
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042c2:	4641      	mov	r1, r8
 80042c4:	1854      	adds	r4, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb43 0501 	adc.w	r5, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	00eb      	lsls	r3, r5, #3
 80042d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042da:	00e2      	lsls	r2, r4, #3
 80042dc:	4614      	mov	r4, r2
 80042de:	461d      	mov	r5, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	18e3      	adds	r3, r4, r3
 80042e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042e8:	464b      	mov	r3, r9
 80042ea:	eb45 0303 	adc.w	r3, r5, r3
 80042ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800430e:	4629      	mov	r1, r5
 8004310:	008b      	lsls	r3, r1, #2
 8004312:	4621      	mov	r1, r4
 8004314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004318:	4621      	mov	r1, r4
 800431a:	008a      	lsls	r2, r1, #2
 800431c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004320:	f7fb ff8e 	bl	8000240 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4b60      	ldr	r3, [pc, #384]	; (80044ac <UART_SetConfig+0x4e4>)
 800432a:	fba3 2302 	umull	r2, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	011c      	lsls	r4, r3, #4
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800433c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	61b9      	str	r1, [r7, #24]
 800434c:	415b      	adcs	r3, r3
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004354:	4641      	mov	r1, r8
 8004356:	1851      	adds	r1, r2, r1
 8004358:	6139      	str	r1, [r7, #16]
 800435a:	4649      	mov	r1, r9
 800435c:	414b      	adcs	r3, r1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800436c:	4659      	mov	r1, fp
 800436e:	00cb      	lsls	r3, r1, #3
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004376:	4651      	mov	r1, sl
 8004378:	00ca      	lsls	r2, r1, #3
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	4603      	mov	r3, r0
 8004380:	4642      	mov	r2, r8
 8004382:	189b      	adds	r3, r3, r2
 8004384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004388:	464b      	mov	r3, r9
 800438a:	460a      	mov	r2, r1
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	67bb      	str	r3, [r7, #120]	; 0x78
 800439e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043ac:	4649      	mov	r1, r9
 80043ae:	008b      	lsls	r3, r1, #2
 80043b0:	4641      	mov	r1, r8
 80043b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043b6:	4641      	mov	r1, r8
 80043b8:	008a      	lsls	r2, r1, #2
 80043ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043be:	f7fb ff3f 	bl	8000240 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <UART_SetConfig+0x4e4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a34      	ldr	r2, [pc, #208]	; (80044ac <UART_SetConfig+0x4e4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e6:	441c      	add	r4, r3
 80043e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ec:	2200      	movs	r2, #0
 80043ee:	673b      	str	r3, [r7, #112]	; 0x70
 80043f0:	677a      	str	r2, [r7, #116]	; 0x74
 80043f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043f6:	4642      	mov	r2, r8
 80043f8:	464b      	mov	r3, r9
 80043fa:	1891      	adds	r1, r2, r2
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	415b      	adcs	r3, r3
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004406:	4641      	mov	r1, r8
 8004408:	1851      	adds	r1, r2, r1
 800440a:	6039      	str	r1, [r7, #0]
 800440c:	4649      	mov	r1, r9
 800440e:	414b      	adcs	r3, r1
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800441e:	4659      	mov	r1, fp
 8004420:	00cb      	lsls	r3, r1, #3
 8004422:	4651      	mov	r1, sl
 8004424:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004428:	4651      	mov	r1, sl
 800442a:	00ca      	lsls	r2, r1, #3
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	4603      	mov	r3, r0
 8004432:	4642      	mov	r2, r8
 8004434:	189b      	adds	r3, r3, r2
 8004436:	66bb      	str	r3, [r7, #104]	; 0x68
 8004438:	464b      	mov	r3, r9
 800443a:	460a      	mov	r2, r1
 800443c:	eb42 0303 	adc.w	r3, r2, r3
 8004440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	663b      	str	r3, [r7, #96]	; 0x60
 800444c:	667a      	str	r2, [r7, #100]	; 0x64
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800445a:	4649      	mov	r1, r9
 800445c:	008b      	lsls	r3, r1, #2
 800445e:	4641      	mov	r1, r8
 8004460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004464:	4641      	mov	r1, r8
 8004466:	008a      	lsls	r2, r1, #2
 8004468:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800446c:	f7fb fee8 	bl	8000240 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <UART_SetConfig+0x4e4>)
 8004476:	fba3 1302 	umull	r1, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2164      	movs	r1, #100	; 0x64
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a08      	ldr	r2, [pc, #32]	; (80044ac <UART_SetConfig+0x4e4>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4422      	add	r2, r4
 800449c:	609a      	str	r2, [r3, #8]
}
 800449e:	bf00      	nop
 80044a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044aa:	bf00      	nop
 80044ac:	51eb851f 	.word	0x51eb851f

080044b0 <interface_tx_frame>:
 80044b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b4:	b085      	sub	sp, #20
 80044b6:	4605      	mov	r5, r0
 80044b8:	461c      	mov	r4, r3
 80044ba:	6883      	ldr	r3, [r0, #8]
 80044bc:	695e      	ldr	r6, [r3, #20]
 80044be:	b1e2      	cbz	r2, 80044fa <interface_tx_frame+0x4a>
 80044c0:	9102      	str	r1, [sp, #8]
 80044c2:	fa1f f882 	uxth.w	r8, r2
 80044c6:	f8ad 800c 	strh.w	r8, [sp, #12]
 80044ca:	f04f 0900 	mov.w	r9, #0
 80044ce:	f8ad 900e 	strh.w	r9, [sp, #14]
 80044d2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80044d4:	ab02      	add	r3, sp, #8
 80044d6:	464a      	mov	r2, r9
 80044d8:	2120      	movs	r1, #32
 80044da:	47b8      	blx	r7
 80044dc:	f8ad 8000 	strh.w	r8, [sp]
 80044e0:	f8ad 9002 	strh.w	r9, [sp, #2]
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80044ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80044ee:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80044f0:	466b      	mov	r3, sp
 80044f2:	464a      	mov	r2, r9
 80044f4:	2137      	movs	r1, #55	; 0x37
 80044f6:	4628      	mov	r0, r5
 80044f8:	47b8      	blx	r7
 80044fa:	68e3      	ldr	r3, [r4, #12]
 80044fc:	f013 0f1d 	tst.w	r3, #29
 8004500:	d005      	beq.n	800450e <interface_tx_frame+0x5e>
 8004502:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004504:	4623      	mov	r3, r4
 8004506:	2200      	movs	r2, #0
 8004508:	2105      	movs	r1, #5
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	6863      	ldr	r3, [r4, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	db0c      	blt.n	800452e <interface_tx_frame+0x7e>
 8004514:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004516:	1d23      	adds	r3, r4, #4
 8004518:	2200      	movs	r2, #0
 800451a:	2110      	movs	r1, #16
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004522:	f104 0308 	add.w	r3, r4, #8
 8004526:	2200      	movs	r2, #0
 8004528:	2151      	movs	r1, #81	; 0x51
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8004530:	f104 030c 	add.w	r3, r4, #12
 8004534:	2200      	movs	r2, #0
 8004536:	2104      	movs	r1, #4
 8004538:	4628      	mov	r0, r5
 800453a:	47b0      	blx	r6
 800453c:	b005      	add	sp, #20
 800453e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004542 <interface_get_timestamp>:
 8004542:	b530      	push	{r4, r5, lr}
 8004544:	b083      	sub	sp, #12
 8004546:	ab02      	add	r3, sp, #8
 8004548:	2400      	movs	r4, #0
 800454a:	2500      	movs	r5, #0
 800454c:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8004550:	6882      	ldr	r2, [r0, #8]
 8004552:	6952      	ldr	r2, [r2, #20]
 8004554:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004556:	2200      	movs	r2, #0
 8004558:	215f      	movs	r1, #95	; 0x5f
 800455a:	47a0      	blx	r4
 800455c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004560:	b003      	add	sp, #12
 8004562:	bd30      	pop	{r4, r5, pc}

08004564 <interface_rx_disable>:
 8004564:	b510      	push	{r4, lr}
 8004566:	6883      	ldr	r3, [r0, #8]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800456c:	2300      	movs	r3, #0
 800456e:	461a      	mov	r2, r3
 8004570:	2103      	movs	r1, #3
 8004572:	47a0      	blx	r4
 8004574:	bd10      	pop	{r4, pc}
	...

08004578 <interface_rx_enable>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	4604      	mov	r4, r0
 8004580:	6883      	ldr	r3, [r0, #8]
 8004582:	695d      	ldr	r5, [r3, #20]
 8004584:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8004588:	680b      	ldr	r3, [r1, #0]
 800458a:	9303      	str	r3, [sp, #12]
 800458c:	684a      	ldr	r2, [r1, #4]
 800458e:	ab04      	add	r3, sp, #16
 8004590:	f843 2d08 	str.w	r2, [r3, #-8]!
 8004594:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8004596:	2200      	movs	r2, #0
 8004598:	214f      	movs	r1, #79	; 0x4f
 800459a:	47b8      	blx	r7
 800459c:	4607      	mov	r7, r0
 800459e:	b118      	cbz	r0, 80045a8 <interface_rx_enable+0x30>
 80045a0:	4638      	mov	r0, r7
 80045a2:	b004      	add	sp, #16
 80045a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db3c      	blt.n	800462e <interface_rx_enable+0xb6>
 80045b4:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80045b6:	ab01      	add	r3, sp, #4
 80045b8:	2200      	movs	r2, #0
 80045ba:	2157      	movs	r1, #87	; 0x57
 80045bc:	4620      	mov	r0, r4
 80045be:	47b8      	blx	r7
 80045c0:	bba8      	cbnz	r0, 800462e <interface_rx_enable+0xb6>
 80045c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80045c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80045d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80045da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80045de:	f1ba 0f00 	cmp.w	sl, #0
 80045e2:	d131      	bne.n	8004648 <interface_rx_enable+0xd0>
 80045e4:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 80045e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045ec:	9303      	str	r3, [sp, #12]
 80045ee:	f04f 0a01 	mov.w	sl, #1
 80045f2:	68a3      	ldr	r3, [r4, #8]
 80045f4:	695f      	ldr	r7, [r3, #20]
 80045f6:	f10d 0302 	add.w	r3, sp, #2
 80045fa:	2200      	movs	r2, #0
 80045fc:	217b      	movs	r1, #123	; 0x7b
 80045fe:	4620      	mov	r0, r4
 8004600:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8004602:	47b0      	blx	r6
 8004604:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8004608:	2b01      	cmp	r3, #1
 800460a:	d04e      	beq.n	80046aa <interface_rx_enable+0x132>
 800460c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004610:	2201      	movs	r2, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800461a:	ea22 0203 	bic.w	r2, r2, r3
 800461e:	ab04      	add	r3, sp, #16
 8004620:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8004624:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8004626:	2200      	movs	r2, #0
 8004628:	216b      	movs	r1, #107	; 0x6b
 800462a:	4620      	mov	r0, r4
 800462c:	47b8      	blx	r7
 800462e:	f1ba 0f00 	cmp.w	sl, #0
 8004632:	d14a      	bne.n	80046ca <interface_rx_enable+0x152>
 8004634:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004636:	2300      	movs	r3, #0
 8004638:	461a      	mov	r2, r3
 800463a:	211f      	movs	r1, #31
 800463c:	4620      	mov	r0, r4
 800463e:	47a8      	blx	r5
 8004640:	4607      	mov	r7, r0
 8004642:	2800      	cmp	r0, #0
 8004644:	d150      	bne.n	80046e8 <interface_rx_enable+0x170>
 8004646:	e7ab      	b.n	80045a0 <interface_rx_enable+0x28>
 8004648:	9a03      	ldr	r2, [sp, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	4698      	mov	r8, r3
 800464e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8004652:	ea4f 1249 	mov.w	r2, r9, lsl #5
 8004656:	0158      	lsls	r0, r3, #5
 8004658:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 800465c:	1ac0      	subs	r0, r0, r3
 800465e:	eb61 0109 	sbc.w	r1, r1, r9
 8004662:	024b      	lsls	r3, r1, #9
 8004664:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004668:	0242      	lsls	r2, r0, #9
 800466a:	eb12 0008 	adds.w	r0, r2, r8
 800466e:	eb43 0109 	adc.w	r1, r3, r9
 8004672:	018b      	lsls	r3, r1, #6
 8004674:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004678:	0182      	lsls	r2, r0, #6
 800467a:	1a12      	subs	r2, r2, r0
 800467c:	eb63 0301 	sbc.w	r3, r3, r1
 8004680:	4616      	mov	r6, r2
 8004682:	461f      	mov	r7, r3
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <interface_rx_enable+0x1d4>)
 8004686:	2300      	movs	r3, #0
 8004688:	eb16 0008 	adds.w	r0, r6, r8
 800468c:	eb47 0109 	adc.w	r1, r7, r9
 8004690:	f7fb fdd6 	bl	8000240 <__aeabi_uldivmod>
 8004694:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 8004698:	ddab      	ble.n	80045f2 <interface_rx_enable+0x7a>
 800469a:	68a3      	ldr	r3, [r4, #8]
 800469c:	695f      	ldr	r7, [r3, #20]
 800469e:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 80046a2:	d0a8      	beq.n	80045f6 <interface_rx_enable+0x7e>
 80046a4:	f7fc f8dd 	bl	8000862 <deca_usleep>
 80046a8:	e7a5      	b.n	80045f6 <interface_rx_enable+0x7e>
 80046aa:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80046ae:	2201      	movs	r2, #1
 80046b0:	409a      	lsls	r2, r3
 80046b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	ab04      	add	r3, sp, #16
 80046ba:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80046be:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80046c0:	2200      	movs	r2, #0
 80046c2:	216b      	movs	r1, #107	; 0x6b
 80046c4:	4620      	mov	r0, r4
 80046c6:	47b8      	blx	r7
 80046c8:	e7b1      	b.n	800462e <interface_rx_enable+0xb6>
 80046ca:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80046cc:	ab03      	add	r3, sp, #12
 80046ce:	2200      	movs	r2, #0
 80046d0:	2105      	movs	r1, #5
 80046d2:	4620      	mov	r0, r4
 80046d4:	47b0      	blx	r6
 80046d6:	4607      	mov	r7, r0
 80046d8:	b930      	cbnz	r0, 80046e8 <interface_rx_enable+0x170>
 80046da:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80046dc:	2300      	movs	r3, #0
 80046de:	2201      	movs	r2, #1
 80046e0:	211f      	movs	r1, #31
 80046e2:	4620      	mov	r0, r4
 80046e4:	47a8      	blx	r5
 80046e6:	4607      	mov	r7, r0
 80046e8:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f6ff af57 	blt.w	80045a0 <interface_rx_enable+0x28>
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	695d      	ldr	r5, [r3, #20]
 80046f6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80046f8:	ab01      	add	r3, sp, #4
 80046fa:	2200      	movs	r2, #0
 80046fc:	217b      	movs	r1, #123	; 0x7b
 80046fe:	4620      	mov	r0, r4
 8004700:	47b0      	blx	r6
 8004702:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8004706:	b18b      	cbz	r3, 800472c <interface_rx_enable+0x1b4>
 8004708:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800470c:	2201      	movs	r2, #1
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004716:	ea22 0203 	bic.w	r2, r2, r3
 800471a:	ab04      	add	r3, sp, #16
 800471c:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004720:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004722:	2200      	movs	r2, #0
 8004724:	216b      	movs	r1, #107	; 0x6b
 8004726:	4620      	mov	r0, r4
 8004728:	47a8      	blx	r5
 800472a:	e739      	b.n	80045a0 <interface_rx_enable+0x28>
 800472c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8004730:	2201      	movs	r2, #1
 8004732:	409a      	lsls	r2, r3
 8004734:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004738:	431a      	orrs	r2, r3
 800473a:	ab04      	add	r3, sp, #16
 800473c:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8004740:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004742:	2200      	movs	r2, #0
 8004744:	216b      	movs	r1, #107	; 0x6b
 8004746:	4620      	mov	r0, r4
 8004748:	47a8      	blx	r5
 800474a:	e729      	b.n	80045a0 <interface_rx_enable+0x28>
 800474c:	0ee09800 	.word	0x0ee09800

08004750 <interface_read_rx_frame>:
 8004750:	b510      	push	{r4, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	9100      	str	r1, [sp, #0]
 8004756:	f8ad 2004 	strh.w	r2, [sp, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004760:	6883      	ldr	r3, [r0, #8]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004766:	466b      	mov	r3, sp
 8004768:	2121      	movs	r1, #33	; 0x21
 800476a:	47a0      	blx	r4
 800476c:	b002      	add	sp, #8
 800476e:	bd10      	pop	{r4, pc}

08004770 <dwt_probe>:
 8004770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004772:	b083      	sub	sp, #12
 8004774:	6803      	ldr	r3, [r0, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d037      	beq.n	80047ea <dwt_probe+0x7a>
 800477a:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <dwt_probe+0x88>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <dwt_probe+0x88>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6842      	ldr	r2, [r0, #4]
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	6882      	ldr	r2, [r0, #8]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f88d 2003 	strb.w	r2, [sp, #3]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681c      	ldr	r4, [r3, #0]
 8004794:	ab01      	add	r3, sp, #4
 8004796:	2204      	movs	r2, #4
 8004798:	f10d 0103 	add.w	r1, sp, #3
 800479c:	2001      	movs	r0, #1
 800479e:	47a0      	blx	r4
 80047a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047a4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80047a8:	0409      	lsls	r1, r1, #16
 80047aa:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80047ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80047b2:	4319      	orrs	r1, r3
 80047b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80047b8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80047bc:	4a0f      	ldr	r2, [pc, #60]	; (80047fc <dwt_probe+0x8c>)
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <dwt_probe+0x90>)
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d216      	bcs.n	80047f2 <dwt_probe+0x82>
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <dwt_probe+0x88>)
 80047c6:	681f      	ldr	r7, [r3, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ce:	2600      	movs	r6, #0
 80047d0:	4d0b      	ldr	r5, [pc, #44]	; (8004800 <dwt_probe+0x90>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	404a      	eors	r2, r1
 80047d6:	685c      	ldr	r4, [r3, #4]
 80047d8:	4222      	tst	r2, r4
 80047da:	bf04      	itt	eq
 80047dc:	60bb      	streq	r3, [r7, #8]
 80047de:	4630      	moveq	r0, r6
 80047e0:	331c      	adds	r3, #28
 80047e2:	42ab      	cmp	r3, r5
 80047e4:	d3f5      	bcc.n	80047d2 <dwt_probe+0x62>
 80047e6:	b003      	add	sp, #12
 80047e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ea:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <dwt_probe+0x88>)
 80047ec:	4a05      	ldr	r2, [pc, #20]	; (8004804 <dwt_probe+0x94>)
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e7c5      	b.n	800477e <dwt_probe+0xe>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047f6:	e7f6      	b.n	80047e6 <dwt_probe+0x76>
 80047f8:	20000258 	.word	0x20000258
 80047fc:	08000198 	.word	0x08000198
 8004800:	080001ec 	.word	0x080001ec
 8004804:	2000025c 	.word	0x2000025c

08004808 <dwt_setlnapamode>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <dwt_setlnapamode+0x18>)
 800480c:	681c      	ldr	r4, [r3, #0]
 800480e:	68a3      	ldr	r3, [r4, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004814:	2300      	movs	r3, #0
 8004816:	4602      	mov	r2, r0
 8004818:	2113      	movs	r1, #19
 800481a:	4620      	mov	r0, r4
 800481c:	47a8      	blx	r5
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000258 	.word	0x20000258

08004824 <dwt_initialise>:
 8004824:	b508      	push	{r3, lr}
 8004826:	4b04      	ldr	r3, [pc, #16]	; (8004838 <dwt_initialise+0x14>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	6912      	ldr	r2, [r2, #16]
 800482e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004830:	4601      	mov	r1, r0
 8004832:	4618      	mov	r0, r3
 8004834:	4790      	blx	r2
 8004836:	bd08      	pop	{r3, pc}
 8004838:	20000258 	.word	0x20000258

0800483c <dwt_configure>:
 800483c:	b508      	push	{r3, lr}
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <dwt_configure+0x14>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	6912      	ldr	r2, [r2, #16]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	4601      	mov	r1, r0
 800484a:	4618      	mov	r0, r3
 800484c:	4790      	blx	r2
 800484e:	bd08      	pop	{r3, pc}
 8004850:	20000258 	.word	0x20000258

08004854 <dwt_configuretxrf>:
 8004854:	b508      	push	{r3, lr}
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <dwt_configuretxrf+0x14>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	6912      	ldr	r2, [r2, #16]
 800485e:	6992      	ldr	r2, [r2, #24]
 8004860:	4601      	mov	r1, r0
 8004862:	4618      	mov	r0, r3
 8004864:	4790      	blx	r2
 8004866:	bd08      	pop	{r3, pc}
 8004868:	20000258 	.word	0x20000258

0800486c <dwt_setrxantennadelay>:
 800486c:	b510      	push	{r4, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	ab02      	add	r3, sp, #8
 8004872:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8004876:	4a05      	ldr	r2, [pc, #20]	; (800488c <dwt_setrxantennadelay+0x20>)
 8004878:	6810      	ldr	r0, [r2, #0]
 800487a:	6882      	ldr	r2, [r0, #8]
 800487c:	6912      	ldr	r2, [r2, #16]
 800487e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004880:	2200      	movs	r2, #0
 8004882:	211b      	movs	r1, #27
 8004884:	47a0      	blx	r4
 8004886:	b002      	add	sp, #8
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	20000258 	.word	0x20000258

08004890 <dwt_settxantennadelay>:
 8004890:	b510      	push	{r4, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	ab02      	add	r3, sp, #8
 8004896:	f823 0d02 	strh.w	r0, [r3, #-2]!
 800489a:	4a05      	ldr	r2, [pc, #20]	; (80048b0 <dwt_settxantennadelay+0x20>)
 800489c:	6810      	ldr	r0, [r2, #0]
 800489e:	6882      	ldr	r2, [r0, #8]
 80048a0:	6912      	ldr	r2, [r2, #16]
 80048a2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80048a4:	2200      	movs	r2, #0
 80048a6:	211d      	movs	r1, #29
 80048a8:	47a0      	blx	r4
 80048aa:	b002      	add	sp, #8
 80048ac:	bd10      	pop	{r4, pc}
 80048ae:	bf00      	nop
 80048b0:	20000258 	.word	0x20000258

080048b4 <dwt_writetxdata>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <dwt_writetxdata+0x18>)
 80048b8:	681c      	ldr	r4, [r3, #0]
 80048ba:	68a3      	ldr	r3, [r4, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	685d      	ldr	r5, [r3, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	460a      	mov	r2, r1
 80048c4:	4601      	mov	r1, r0
 80048c6:	4620      	mov	r0, r4
 80048c8:	47a8      	blx	r5
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20000258 	.word	0x20000258

080048d0 <dwt_writetxfctrl>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <dwt_writetxfctrl+0x18>)
 80048d4:	681c      	ldr	r4, [r3, #0]
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	689d      	ldr	r5, [r3, #8]
 80048dc:	4613      	mov	r3, r2
 80048de:	460a      	mov	r2, r1
 80048e0:	4601      	mov	r1, r0
 80048e2:	4620      	mov	r0, r4
 80048e4:	47a8      	blx	r5
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	20000258 	.word	0x20000258

080048ec <dwt_starttx>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	ab02      	add	r3, sp, #8
 80048f2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <dwt_starttx+0x20>)
 80048f8:	6810      	ldr	r0, [r2, #0]
 80048fa:	6882      	ldr	r2, [r0, #8]
 80048fc:	6912      	ldr	r2, [r2, #16]
 80048fe:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004900:	2200      	movs	r2, #0
 8004902:	2104      	movs	r1, #4
 8004904:	47a0      	blx	r4
 8004906:	b002      	add	sp, #8
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	20000258 	.word	0x20000258

08004910 <dwt_setdelayedtrxtime>:
 8004910:	b510      	push	{r4, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	ab02      	add	r3, sp, #8
 8004916:	f843 0d04 	str.w	r0, [r3, #-4]!
 800491a:	4a05      	ldr	r2, [pc, #20]	; (8004930 <dwt_setdelayedtrxtime+0x20>)
 800491c:	6810      	ldr	r0, [r2, #0]
 800491e:	6882      	ldr	r2, [r0, #8]
 8004920:	6912      	ldr	r2, [r2, #16]
 8004922:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004924:	2200      	movs	r2, #0
 8004926:	2105      	movs	r1, #5
 8004928:	47a0      	blx	r4
 800492a:	b002      	add	sp, #8
 800492c:	bd10      	pop	{r4, pc}
 800492e:	bf00      	nop
 8004930:	20000258 	.word	0x20000258

08004934 <dwt_readrxtimestamp>:
 8004934:	b508      	push	{r3, lr}
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <dwt_readrxtimestamp+0x14>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	6912      	ldr	r2, [r2, #16]
 800493e:	6952      	ldr	r2, [r2, #20]
 8004940:	4601      	mov	r1, r0
 8004942:	4618      	mov	r0, r3
 8004944:	4790      	blx	r2
 8004946:	bd08      	pop	{r3, pc}
 8004948:	20000258 	.word	0x20000258

0800494c <dwt_forcetrxoff>:
 800494c:	b510      	push	{r4, lr}
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <dwt_forcetrxoff+0x18>)
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	6883      	ldr	r3, [r0, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004958:	2300      	movs	r3, #0
 800495a:	461a      	mov	r2, r3
 800495c:	2103      	movs	r1, #3
 800495e:	47a0      	blx	r4
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	20000258 	.word	0x20000258

08004968 <dwt_rxenable>:
 8004968:	b508      	push	{r3, lr}
 800496a:	4b04      	ldr	r3, [pc, #16]	; (800497c <dwt_rxenable+0x14>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	6912      	ldr	r2, [r2, #16]
 8004972:	6a12      	ldr	r2, [r2, #32]
 8004974:	4601      	mov	r1, r0
 8004976:	4618      	mov	r0, r3
 8004978:	4790      	blx	r2
 800497a:	bd08      	pop	{r3, pc}
 800497c:	20000258 	.word	0x20000258

08004980 <dwt_checkidlerc>:
 8004980:	b510      	push	{r4, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	2200      	movs	r2, #0
 8004986:	ab02      	add	r3, sp, #8
 8004988:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800498c:	4905      	ldr	r1, [pc, #20]	; (80049a4 <dwt_checkidlerc+0x24>)
 800498e:	6808      	ldr	r0, [r1, #0]
 8004990:	6881      	ldr	r1, [r0, #8]
 8004992:	6909      	ldr	r1, [r1, #16]
 8004994:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004996:	2158      	movs	r1, #88	; 0x58
 8004998:	47a0      	blx	r4
 800499a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800499e:	b002      	add	sp, #8
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	bf00      	nop
 80049a4:	20000258 	.word	0x20000258

080049a8 <dwt_generatecrc8>:
 80049a8:	2900      	cmp	r1, #0
 80049aa:	dd0d      	ble.n	80049c8 <dwt_generatecrc8+0x20>
 80049ac:	b410      	push	{r4}
 80049ae:	1e43      	subs	r3, r0, #1
 80049b0:	4419      	add	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	4c05      	ldr	r4, [pc, #20]	; (80049cc <dwt_generatecrc8+0x24>)
 80049b6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80049ba:	4050      	eors	r0, r2
 80049bc:	5c20      	ldrb	r0, [r4, r0]
 80049be:	428b      	cmp	r3, r1
 80049c0:	d1f9      	bne.n	80049b6 <dwt_generatecrc8+0xe>
 80049c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	4610      	mov	r0, r2
 80049ca:	4770      	bx	lr
 80049cc:	080120b4 	.word	0x080120b4

080049d0 <dwt_readrxdata>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <dwt_readrxdata+0x18>)
 80049d4:	681c      	ldr	r4, [r3, #0]
 80049d6:	68a3      	ldr	r3, [r4, #8]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	68dd      	ldr	r5, [r3, #12]
 80049dc:	4613      	mov	r3, r2
 80049de:	460a      	mov	r2, r1
 80049e0:	4601      	mov	r1, r0
 80049e2:	4620      	mov	r0, r4
 80049e4:	47a8      	blx	r5
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	20000258 	.word	0x20000258

080049ec <dwt_setleds>:
 80049ec:	b510      	push	{r4, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	ab02      	add	r3, sp, #8
 80049f2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80049f6:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <dwt_setleds+0x20>)
 80049f8:	6810      	ldr	r0, [r2, #0]
 80049fa:	6882      	ldr	r2, [r0, #8]
 80049fc:	6912      	ldr	r2, [r2, #16]
 80049fe:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004a00:	2200      	movs	r2, #0
 8004a02:	2155      	movs	r1, #85	; 0x55
 8004a04:	47a0      	blx	r4
 8004a06:	b002      	add	sp, #8
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000258 	.word	0x20000258

08004a10 <dwt_writesysstatuslo>:
 8004a10:	b510      	push	{r4, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	ab02      	add	r3, sp, #8
 8004a16:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004a1a:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <dwt_writesysstatuslo+0x20>)
 8004a1c:	6810      	ldr	r0, [r2, #0]
 8004a1e:	6882      	ldr	r2, [r0, #8]
 8004a20:	6912      	ldr	r2, [r2, #16]
 8004a22:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004a24:	2200      	movs	r2, #0
 8004a26:	2174      	movs	r1, #116	; 0x74
 8004a28:	47a0      	blx	r4
 8004a2a:	b002      	add	sp, #8
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000258 	.word	0x20000258

08004a34 <dwt_readsysstatuslo>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	2200      	movs	r2, #0
 8004a3a:	ab02      	add	r3, sp, #8
 8004a3c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8004a40:	4904      	ldr	r1, [pc, #16]	; (8004a54 <dwt_readsysstatuslo+0x20>)
 8004a42:	6808      	ldr	r0, [r1, #0]
 8004a44:	6881      	ldr	r1, [r0, #8]
 8004a46:	6909      	ldr	r1, [r1, #16]
 8004a48:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004a4a:	2176      	movs	r1, #118	; 0x76
 8004a4c:	47a0      	blx	r4
 8004a4e:	9801      	ldr	r0, [sp, #4]
 8004a50:	b002      	add	sp, #8
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	20000258 	.word	0x20000258

08004a58 <dwt_readsysstatushi>:
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	ab02      	add	r3, sp, #8
 8004a60:	f843 2d04 	str.w	r2, [r3, #-4]!
 8004a64:	4904      	ldr	r1, [pc, #16]	; (8004a78 <dwt_readsysstatushi+0x20>)
 8004a66:	6808      	ldr	r0, [r1, #0]
 8004a68:	6881      	ldr	r1, [r0, #8]
 8004a6a:	6909      	ldr	r1, [r1, #16]
 8004a6c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004a6e:	2177      	movs	r1, #119	; 0x77
 8004a70:	47a0      	blx	r4
 8004a72:	9801      	ldr	r0, [sp, #4]
 8004a74:	b002      	add	sp, #8
 8004a76:	bd10      	pop	{r4, pc}
 8004a78:	20000258 	.word	0x20000258

08004a7c <dwt_getframelength>:
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	2200      	movs	r2, #0
 8004a82:	ab02      	add	r3, sp, #8
 8004a84:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8004a88:	4905      	ldr	r1, [pc, #20]	; (8004aa0 <dwt_getframelength+0x24>)
 8004a8a:	6808      	ldr	r0, [r1, #0]
 8004a8c:	6881      	ldr	r1, [r0, #8]
 8004a8e:	6909      	ldr	r1, [r1, #16]
 8004a90:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004a92:	217a      	movs	r1, #122	; 0x7a
 8004a94:	47a0      	blx	r4
 8004a96:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004a9a:	b002      	add	sp, #8
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000258 	.word	0x20000258

08004aa4 <dwt_dbg_fn>:
 8004aa4:	2998      	cmp	r1, #152	; 0x98
 8004aa6:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <dwt_dbg_fn+0xc>)
 8004aa8:	bf18      	it	ne
 8004aaa:	2000      	movne	r0, #0
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	080122ac 	.word	0x080122ac

08004ab4 <_deinit>:
 8004ab4:	4770      	bx	lr

08004ab6 <dwt_xfer3xxx>:
 8004ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	4605      	mov	r5, r0
 8004abe:	460e      	mov	r6, r1
 8004ac0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8004ac4:	1990      	adds	r0, r2, r6
 8004ac6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004aca:	4432      	add	r2, r6
 8004acc:	f3c2 4204 	ubfx	r2, r2, #16, #5
 8004ad0:	0084      	lsls	r4, r0, #2
 8004ad2:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 8004ad6:	ea41 0204 	orr.w	r2, r1, r4
 8004ada:	0a12      	lsrs	r2, r2, #8
 8004adc:	f88d 200c 	strb.w	r2, [sp, #12]
 8004ae0:	f001 0703 	and.w	r7, r1, #3
 8004ae4:	433c      	orrs	r4, r7
 8004ae6:	f88d 400d 	strb.w	r4, [sp, #13]
 8004aea:	461f      	mov	r7, r3
 8004aec:	b973      	cbnz	r3, 8004b0c <dwt_xfer3xxx+0x56>
 8004aee:	2900      	cmp	r1, #0
 8004af0:	d05c      	beq.n	8004bac <dwt_xfer3xxx+0xf6>
 8004af2:	0073      	lsls	r3, r6, #1
 8004af4:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8004af8:	f88d 300c 	strb.w	r3, [sp, #12]
 8004afc:	2401      	movs	r4, #1
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d02f      	beq.n	8004b62 <dwt_xfer3xxx+0xac>
 8004b02:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8004b06:	2903      	cmp	r1, #3
 8004b08:	d90a      	bls.n	8004b20 <dwt_xfer3xxx+0x6a>
 8004b0a:	e7fe      	b.n	8004b0a <dwt_xfer3xxx+0x54>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d14f      	bne.n	8004bb0 <dwt_xfer3xxx+0xfa>
 8004b10:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004b14:	d003      	beq.n	8004b1e <dwt_xfer3xxx+0x68>
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d14a      	bne.n	8004bb0 <dwt_xfer3xxx+0xfa>
 8004b1a:	2401      	movs	r4, #1
 8004b1c:	e021      	b.n	8004b62 <dwt_xfer3xxx+0xac>
 8004b1e:	2401      	movs	r4, #1
 8004b20:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004b22:	7d9b      	ldrb	r3, [r3, #22]
 8004b24:	b94b      	cbnz	r3, 8004b3a <dwt_xfer3xxx+0x84>
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	685d      	ldr	r5, [r3, #4]
 8004b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2c:	463a      	mov	r2, r7
 8004b2e:	a903      	add	r1, sp, #12
 8004b30:	4620      	mov	r0, r4
 8004b32:	47a8      	blx	r5
 8004b34:	b004      	add	sp, #16
 8004b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	a803      	add	r0, sp, #12
 8004b40:	f7ff ff32 	bl	80049a8 <dwt_generatecrc8>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4639      	mov	r1, r7
 8004b48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b4a:	f7ff ff2d 	bl	80049a8 <dwt_generatecrc8>
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	9000      	str	r0, [sp, #0]
 8004b52:	689d      	ldr	r5, [r3, #8]
 8004b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b56:	463a      	mov	r2, r7
 8004b58:	a903      	add	r1, sp, #12
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	47a8      	blx	r5
 8004b5e:	e7e9      	b.n	8004b34 <dwt_xfer3xxx+0x7e>
 8004b60:	2401      	movs	r4, #1
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	f8d3 8000 	ldr.w	r8, [r3]
 8004b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	a903      	add	r1, sp, #12
 8004b6e:	4620      	mov	r0, r4
 8004b70:	47c0      	blx	r8
 8004b72:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004b74:	7d9b      	ldrb	r3, [r3, #22]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d1dc      	bne.n	8004b34 <dwt_xfer3xxx+0x7e>
 8004b7a:	2e18      	cmp	r6, #24
 8004b7c:	d0da      	beq.n	8004b34 <dwt_xfer3xxx+0x7e>
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4621      	mov	r1, r4
 8004b82:	a803      	add	r0, sp, #12
 8004b84:	f7ff ff10 	bl	80049a8 <dwt_generatecrc8>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b8e:	f7ff ff0b 	bl	80049a8 <dwt_generatecrc8>
 8004b92:	4604      	mov	r4, r0
 8004b94:	2200      	movs	r2, #0
 8004b96:	2118      	movs	r1, #24
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 f841 	bl	8004c20 <dwt_read8bitoffsetreg>
 8004b9e:	4284      	cmp	r4, r0
 8004ba0:	d0c8      	beq.n	8004b34 <dwt_xfer3xxx+0x7e>
 8004ba2:	68eb      	ldr	r3, [r5, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0c5      	beq.n	8004b34 <dwt_xfer3xxx+0x7e>
 8004ba8:	4798      	blx	r3
 8004baa:	e7c3      	b.n	8004b34 <dwt_xfer3xxx+0x7e>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d0d7      	beq.n	8004b60 <dwt_xfer3xxx+0xaa>
 8004bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb4:	f88d 200c 	strb.w	r2, [sp, #12]
 8004bb8:	2402      	movs	r4, #2
 8004bba:	e7a0      	b.n	8004afe <dwt_xfer3xxx+0x48>

08004bbc <dwt_readfromdevice>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	2400      	movs	r4, #0
 8004bc2:	9401      	str	r4, [sp, #4]
 8004bc4:	9c04      	ldr	r4, [sp, #16]
 8004bc6:	9400      	str	r4, [sp, #0]
 8004bc8:	f7ff ff75 	bl	8004ab6 <dwt_xfer3xxx>
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <dwt_read32bitoffsetreg>:
 8004bd0:	b500      	push	{lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	ab03      	add	r3, sp, #12
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2304      	movs	r3, #4
 8004bda:	b292      	uxth	r2, r2
 8004bdc:	f7ff ffee 	bl	8004bbc <dwt_readfromdevice>
 8004be0:	f10d 030f 	add.w	r3, sp, #15
 8004be4:	f10d 010b 	add.w	r1, sp, #11
 8004be8:	2000      	movs	r0, #0
 8004bea:	f813 2901 	ldrb.w	r2, [r3], #-1
 8004bee:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8004bf2:	428b      	cmp	r3, r1
 8004bf4:	d1f9      	bne.n	8004bea <dwt_read32bitoffsetreg+0x1a>
 8004bf6:	b005      	add	sp, #20
 8004bf8:	f85d fb04 	ldr.w	pc, [sp], #4

08004bfc <dwt_read16bitoffsetreg>:
 8004bfc:	b500      	push	{lr}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	ab03      	add	r3, sp, #12
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2302      	movs	r3, #2
 8004c06:	b292      	uxth	r2, r2
 8004c08:	f7ff ffd8 	bl	8004bbc <dwt_readfromdevice>
 8004c0c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004c10:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004c14:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8004c18:	b280      	uxth	r0, r0
 8004c1a:	b005      	add	sp, #20
 8004c1c:	f85d fb04 	ldr.w	pc, [sp], #4

08004c20 <dwt_read8bitoffsetreg>:
 8004c20:	b500      	push	{lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	f10d 030f 	add.w	r3, sp, #15
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	b292      	uxth	r2, r2
 8004c2e:	f7ff ffc5 	bl	8004bbc <dwt_readfromdevice>
 8004c32:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004c36:	b005      	add	sp, #20
 8004c38:	f85d fb04 	ldr.w	pc, [sp], #4

08004c3c <ull_readdiagnostics>:
 8004c3c:	b530      	push	{r4, r5, lr}
 8004c3e:	b0bd      	sub	sp, #244	; 0xf4
 8004c40:	4605      	mov	r5, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004c46:	7bda      	ldrb	r2, [r3, #15]
 8004c48:	2a01      	cmp	r2, #1
 8004c4a:	d01c      	beq.n	8004c86 <ull_readdiagnostics+0x4a>
 8004c4c:	2a03      	cmp	r2, #3
 8004c4e:	f040 81d4 	bne.w	8004ffa <ull_readdiagnostics+0x3be>
 8004c52:	7e1b      	ldrb	r3, [r3, #24]
 8004c54:	f013 0f08 	tst.w	r3, #8
 8004c58:	d10c      	bne.n	8004c74 <ull_readdiagnostics+0x38>
 8004c5a:	f013 0f04 	tst.w	r3, #4
 8004c5e:	ab02      	add	r3, sp, #8
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	bf14      	ite	ne
 8004c64:	2338      	movne	r3, #56	; 0x38
 8004c66:	2320      	moveq	r3, #32
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8004c6e:	f7ff ffa5 	bl	8004bbc <dwt_readfromdevice>
 8004c72:	e019      	b.n	8004ca8 <ull_readdiagnostics+0x6c>
 8004c74:	ab02      	add	r3, sp, #8
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	23e8      	movs	r3, #232	; 0xe8
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8004c80:	f7ff ff9c 	bl	8004bbc <dwt_readfromdevice>
 8004c84:	e010      	b.n	8004ca8 <ull_readdiagnostics+0x6c>
 8004c86:	7e1b      	ldrb	r3, [r3, #24]
 8004c88:	f013 0f08 	tst.w	r3, #8
 8004c8c:	f040 81ac 	bne.w	8004fe8 <ull_readdiagnostics+0x3ac>
 8004c90:	f013 0f04 	tst.w	r3, #4
 8004c94:	ab02      	add	r3, sp, #8
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	bf14      	ite	ne
 8004c9a:	2338      	movne	r3, #56	; 0x38
 8004c9c:	2320      	moveq	r3, #32
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8004ca4:	f7ff ff8a 	bl	8004bbc <dwt_readfromdevice>
 8004ca8:	f10d 0217 	add.w	r2, sp, #23
 8004cac:	f104 031a 	add.w	r3, r4, #26
 8004cb0:	f104 0020 	add.w	r0, r4, #32
 8004cb4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	d1f9      	bne.n	8004cb4 <ull_readdiagnostics+0x78>
 8004cc0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004cc4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004cc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd0:	8463      	strh	r3, [r4, #34]	; 0x22
 8004cd2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8004cd6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004cda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cde:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004ce2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004ce6:	bf1c      	itt	ne
 8004ce8:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8004cec:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8004cf0:	8423      	strh	r3, [r4, #32]
 8004cf2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8004cf6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8004cfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d02:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004d04:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004d06:	7e1b      	ldrb	r3, [r3, #24]
 8004d08:	f013 0f02 	tst.w	r3, #2
 8004d0c:	f040 816a 	bne.w	8004fe4 <ull_readdiagnostics+0x3a8>
 8004d10:	aa0a      	add	r2, sp, #40	; 0x28
 8004d12:	1e63      	subs	r3, r4, #1
 8004d14:	1d20      	adds	r0, r4, #4
 8004d16:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004d1a:	f803 1f01 	strb.w	r1, [r3, #1]!
 8004d1e:	79d1      	ldrb	r1, [r2, #7]
 8004d20:	7219      	strb	r1, [r3, #8]
 8004d22:	7bd1      	ldrb	r1, [r2, #15]
 8004d24:	7459      	strb	r1, [r3, #17]
 8004d26:	4283      	cmp	r3, r0
 8004d28:	d1f5      	bne.n	8004d16 <ull_readdiagnostics+0xda>
 8004d2a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8004d2e:	7163      	strb	r3, [r4, #5]
 8004d30:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8004d34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8004d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d3c:	80e3      	strh	r3, [r4, #6]
 8004d3e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004d42:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004d46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d4a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004d4e:	f8a4 300d 	strh.w	r3, [r4, #13]
 8004d52:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8004d56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004d5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d5e:	f8a4 300f 	strh.w	r3, [r4, #15]
 8004d62:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8004d66:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8004d6a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d6e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8004d72:	82e3      	strh	r3, [r4, #22]
 8004d74:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8004d78:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8004d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d80:	8323      	strh	r3, [r4, #24]
 8004d82:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004d84:	7e1b      	ldrb	r3, [r3, #24]
 8004d86:	f013 0f04 	tst.w	r3, #4
 8004d8a:	f040 812b 	bne.w	8004fe4 <ull_readdiagnostics+0x3a8>
 8004d8e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8004d92:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d9c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8004da6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004daa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004dae:	6263      	str	r3, [r4, #36]	; 0x24
 8004db0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8004db4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004dbe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8004dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dd2:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8004dd6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004de0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8004dea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dee:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004df2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004df4:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8004df8:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e02:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8004e0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e14:	6323      	str	r3, [r4, #48]	; 0x30
 8004e16:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8004e1a:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8004e1e:	041b      	lsls	r3, r3, #16
 8004e20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e24:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8004e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e36:	6363      	str	r3, [r4, #52]	; 0x34
 8004e38:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8004e3c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8004e40:	041b      	lsls	r3, r3, #16
 8004e42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e46:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8004e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e58:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e5a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8004e5e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8004e62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e66:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004e68:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8004e6c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e76:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8004e80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e84:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004e88:	6423      	str	r3, [r4, #64]	; 0x40
 8004e8a:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8004e8e:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8004e92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e96:	6463      	str	r3, [r4, #68]	; 0x44
 8004e98:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8004e9c:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ea6:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8004eb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004eb4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004eb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8004eba:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8004ebe:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ec8:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8004ed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ed6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004eda:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004edc:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8004ee0:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8004ee4:	041b      	lsls	r3, r3, #16
 8004ee6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004eea:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8004ef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ef8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004efc:	6523      	str	r3, [r4, #80]	; 0x50
 8004efe:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8004f02:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8004f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f0e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8004f12:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8004f16:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8004f1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f22:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004f26:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8004f2a:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f34:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8004f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f42:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f46:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f48:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8004f4c:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8004f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f54:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004f56:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8004f5a:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f64:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8004f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f76:	6623      	str	r3, [r4, #96]	; 0x60
 8004f78:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8004f7c:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f86:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8004f90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004f98:	6663      	str	r3, [r4, #100]	; 0x64
 8004f9a:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8004f9e:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004fa8:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8004fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fb6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004fba:	66a3      	str	r3, [r4, #104]	; 0x68
 8004fbc:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8004fc0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8004fc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004fcc:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8004fd0:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8004fd4:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8004fd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe0:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8004fe4:	b03d      	add	sp, #244	; 0xf4
 8004fe6:	bd30      	pop	{r4, r5, pc}
 8004fe8:	ab02      	add	r3, sp, #8
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	23e8      	movs	r3, #232	; 0xe8
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8004ff4:	f7ff fde2 	bl	8004bbc <dwt_readfromdevice>
 8004ff8:	e656      	b.n	8004ca8 <ull_readdiagnostics+0x6c>
 8004ffa:	7e1b      	ldrb	r3, [r3, #24]
 8004ffc:	f013 0f01 	tst.w	r3, #1
 8005000:	f000 819f 	beq.w	8005342 <ull_readdiagnostics+0x706>
 8005004:	ab02      	add	r3, sp, #8
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	236c      	movs	r3, #108	; 0x6c
 800500a:	2200      	movs	r2, #0
 800500c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005010:	f7ff fdd4 	bl	8004bbc <dwt_readfromdevice>
 8005014:	ab1d      	add	r3, sp, #116	; 0x74
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	236c      	movs	r3, #108	; 0x6c
 800501a:	2200      	movs	r2, #0
 800501c:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8005020:	4628      	mov	r0, r5
 8005022:	f7ff fdcb 	bl	8004bbc <dwt_readfromdevice>
 8005026:	aa02      	add	r2, sp, #8
 8005028:	1e63      	subs	r3, r4, #1
 800502a:	1d20      	adds	r0, r4, #4
 800502c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005030:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005034:	79d1      	ldrb	r1, [r2, #7]
 8005036:	7219      	strb	r1, [r3, #8]
 8005038:	7bd1      	ldrb	r1, [r2, #15]
 800503a:	7459      	strb	r1, [r3, #17]
 800503c:	7dd1      	ldrb	r1, [r2, #23]
 800503e:	7699      	strb	r1, [r3, #26]
 8005040:	4283      	cmp	r3, r0
 8005042:	d1f3      	bne.n	800502c <ull_readdiagnostics+0x3f0>
 8005044:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8005048:	77e3      	strb	r3, [r4, #31]
 800504a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800504e:	7163      	strb	r3, [r4, #5]
 8005050:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005054:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005058:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800505c:	80e3      	strh	r3, [r4, #6]
 800505e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005062:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005066:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800506a:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800506e:	f8a4 200d 	strh.w	r2, [r4, #13]
 8005072:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005076:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800507a:	f8a4 200f 	strh.w	r2, [r4, #15]
 800507e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005086:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800508a:	82e3      	strh	r3, [r4, #22]
 800508c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8005090:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8005094:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005098:	8323      	strh	r3, [r4, #24]
 800509a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800509e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80050a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80050aa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80050ae:	bf1c      	itt	ne
 80050b0:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80050b4:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80050b8:	8423      	strh	r3, [r4, #32]
 80050ba:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80050be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80050c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050ca:	8463      	strh	r3, [r4, #34]	; 0x22
 80050cc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80050d0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80050da:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80050de:	4313      	orrs	r3, r2
 80050e0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80050e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050e8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80050ec:	6263      	str	r3, [r4, #36]	; 0x24
 80050ee:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80050f0:	7e1b      	ldrb	r3, [r3, #24]
 80050f2:	f013 0f01 	tst.w	r3, #1
 80050f6:	f43f af75 	beq.w	8004fe4 <ull_readdiagnostics+0x3a8>
 80050fa:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80050fe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005108:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800510c:	4313      	orrs	r3, r2
 800510e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8005112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511a:	62a3      	str	r3, [r4, #40]	; 0x28
 800511c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005120:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800512a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800512e:	4313      	orrs	r3, r2
 8005130:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8005134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005138:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800513c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800513e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8005142:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800514c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005150:	4313      	orrs	r3, r2
 8005152:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8005156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800515a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800515e:	6323      	str	r3, [r4, #48]	; 0x30
 8005160:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005164:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800516e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8005172:	4313      	orrs	r3, r2
 8005174:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8005178:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800517c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005180:	6363      	str	r3, [r4, #52]	; 0x34
 8005182:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8005186:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005190:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8005194:	4313      	orrs	r3, r2
 8005196:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800519a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800519e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80051a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80051a4:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80051a8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80051ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80051b2:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80051b6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80051ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80051c4:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80051c8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80051d2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80051dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80051e4:	6423      	str	r3, [r4, #64]	; 0x40
 80051e6:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 80051ea:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80051ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051f2:	6463      	str	r3, [r4, #68]	; 0x44
 80051f4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 80051f8:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005202:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8005206:	4313      	orrs	r3, r2
 8005208:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800520c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005210:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005214:	64a3      	str	r3, [r4, #72]	; 0x48
 8005216:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800521a:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005224:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8005228:	4313      	orrs	r3, r2
 800522a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800522e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005232:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005236:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005238:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800523c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005246:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800524a:	4313      	orrs	r3, r2
 800524c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8005250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005258:	6523      	str	r3, [r4, #80]	; 0x50
 800525a:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800525e:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8005262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005266:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800526a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800526e:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8005272:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8005276:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800527a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8005282:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8005286:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005290:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8005294:	4313      	orrs	r3, r2
 8005296:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800529a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800529e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80052a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80052a4:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80052a8:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80052ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80052b0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80052b2:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80052b6:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80052c0:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80052ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80052ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80052d2:	6623      	str	r3, [r4, #96]	; 0x60
 80052d4:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 80052d8:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80052e2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 80052ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80052f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80052f4:	6663      	str	r3, [r4, #100]	; 0x64
 80052f6:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80052fa:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005304:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005308:	4313      	orrs	r3, r2
 800530a:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800530e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005312:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005316:	66a3      	str	r3, [r4, #104]	; 0x68
 8005318:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800531c:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8005320:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005324:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005328:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800532c:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005330:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005334:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005340:	e650      	b.n	8004fe4 <ull_readdiagnostics+0x3a8>
 8005342:	ab02      	add	r3, sp, #8
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2328      	movs	r3, #40	; 0x28
 8005348:	2200      	movs	r2, #0
 800534a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800534e:	f7ff fc35 	bl	8004bbc <dwt_readfromdevice>
 8005352:	e668      	b.n	8005026 <ull_readdiagnostics+0x3ea>

08005354 <ull_readrxtimestamp>:
 8005354:	b500      	push	{lr}
 8005356:	b083      	sub	sp, #12
 8005358:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800535a:	7bdb      	ldrb	r3, [r3, #15]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d00b      	beq.n	8005378 <ull_readrxtimestamp+0x24>
 8005360:	2b03      	cmp	r3, #3
 8005362:	d110      	bne.n	8005386 <ull_readrxtimestamp+0x32>
 8005364:	9100      	str	r1, [sp, #0]
 8005366:	2305      	movs	r3, #5
 8005368:	2204      	movs	r2, #4
 800536a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800536e:	f7ff fc25 	bl	8004bbc <dwt_readfromdevice>
 8005372:	b003      	add	sp, #12
 8005374:	f85d fb04 	ldr.w	pc, [sp], #4
 8005378:	9100      	str	r1, [sp, #0]
 800537a:	2305      	movs	r3, #5
 800537c:	2200      	movs	r2, #0
 800537e:	4905      	ldr	r1, [pc, #20]	; (8005394 <ull_readrxtimestamp+0x40>)
 8005380:	f7ff fc1c 	bl	8004bbc <dwt_readfromdevice>
 8005384:	e7f5      	b.n	8005372 <ull_readrxtimestamp+0x1e>
 8005386:	9100      	str	r1, [sp, #0]
 8005388:	2305      	movs	r3, #5
 800538a:	2200      	movs	r2, #0
 800538c:	2164      	movs	r1, #100	; 0x64
 800538e:	f7ff fc15 	bl	8004bbc <dwt_readfromdevice>
 8005392:	e7ee      	b.n	8005372 <ull_readrxtimestamp+0x1e>
 8005394:	00180004 	.word	0x00180004

08005398 <dwt_writetodevice>:
 8005398:	b510      	push	{r4, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80053a0:	9401      	str	r4, [sp, #4]
 80053a2:	9c04      	ldr	r4, [sp, #16]
 80053a4:	9400      	str	r4, [sp, #0]
 80053a6:	f7ff fb86 	bl	8004ab6 <dwt_xfer3xxx>
 80053aa:	b002      	add	sp, #8
 80053ac:	bd10      	pop	{r4, pc}

080053ae <dwt_write8bitoffsetreg>:
 80053ae:	b510      	push	{r4, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	ac04      	add	r4, sp, #16
 80053b4:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80053b8:	9400      	str	r4, [sp, #0]
 80053ba:	2301      	movs	r3, #1
 80053bc:	b292      	uxth	r2, r2
 80053be:	f7ff ffeb 	bl	8005398 <dwt_writetodevice>
 80053c2:	b004      	add	sp, #16
 80053c4:	bd10      	pop	{r4, pc}
	...

080053c8 <ull_getframelength>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	4604      	mov	r4, r0
 80053cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80053ce:	7bdb      	ldrb	r3, [r3, #15]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d013      	beq.n	80053fc <ull_getframelength+0x34>
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d11d      	bne.n	8005414 <ull_getframelength+0x4c>
 80053d8:	23f0      	movs	r3, #240	; 0xf0
 80053da:	2200      	movs	r2, #0
 80053dc:	4912      	ldr	r1, [pc, #72]	; (8005428 <ull_getframelength+0x60>)
 80053de:	f7ff ffe6 	bl	80053ae <dwt_write8bitoffsetreg>
 80053e2:	2200      	movs	r2, #0
 80053e4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80053e8:	4620      	mov	r0, r4
 80053ea:	f7ff fc07 	bl	8004bfc <dwt_read16bitoffsetreg>
 80053ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053f0:	7b1a      	ldrb	r2, [r3, #12]
 80053f2:	b1a2      	cbz	r2, 800541e <ull_getframelength+0x56>
 80053f4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80053f8:	8458      	strh	r0, [r3, #34]	; 0x22
 80053fa:	bd10      	pop	{r4, pc}
 80053fc:	230f      	movs	r3, #15
 80053fe:	2200      	movs	r2, #0
 8005400:	4909      	ldr	r1, [pc, #36]	; (8005428 <ull_getframelength+0x60>)
 8005402:	f7ff ffd4 	bl	80053ae <dwt_write8bitoffsetreg>
 8005406:	2200      	movs	r2, #0
 8005408:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800540c:	4620      	mov	r0, r4
 800540e:	f7ff fbf5 	bl	8004bfc <dwt_read16bitoffsetreg>
 8005412:	e7ec      	b.n	80053ee <ull_getframelength+0x26>
 8005414:	2200      	movs	r2, #0
 8005416:	214c      	movs	r1, #76	; 0x4c
 8005418:	f7ff fbf0 	bl	8004bfc <dwt_read16bitoffsetreg>
 800541c:	e7e7      	b.n	80053ee <ull_getframelength+0x26>
 800541e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005422:	8458      	strh	r0, [r3, #34]	; 0x22
 8005424:	e7e9      	b.n	80053fa <ull_getframelength+0x32>
 8005426:	bf00      	nop
 8005428:	00010024 	.word	0x00010024

0800542c <ull_configeventcounters>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4605      	mov	r5, r0
 8005430:	460c      	mov	r4, r1
 8005432:	2302      	movs	r3, #2
 8005434:	2200      	movs	r2, #0
 8005436:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800543a:	f7ff ffb8 	bl	80053ae <dwt_write8bitoffsetreg>
 800543e:	b904      	cbnz	r4, 8005442 <ull_configeventcounters+0x16>
 8005440:	bd38      	pop	{r3, r4, r5, pc}
 8005442:	2301      	movs	r3, #1
 8005444:	2200      	movs	r2, #0
 8005446:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800544a:	4628      	mov	r0, r5
 800544c:	f7ff ffaf 	bl	80053ae <dwt_write8bitoffsetreg>
 8005450:	e7f6      	b.n	8005440 <ull_configeventcounters+0x14>

08005452 <dwt_write16bitoffsetreg>:
 8005452:	b500      	push	{lr}
 8005454:	b085      	sub	sp, #20
 8005456:	f88d 300c 	strb.w	r3, [sp, #12]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f88d 300d 	strb.w	r3, [sp, #13]
 8005460:	ab03      	add	r3, sp, #12
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2302      	movs	r3, #2
 8005466:	b292      	uxth	r2, r2
 8005468:	f7ff ff96 	bl	8005398 <dwt_writetodevice>
 800546c:	b005      	add	sp, #20
 800546e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005474 <ull_clearaonconfig>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4604      	mov	r4, r0
 8005478:	2300      	movs	r3, #0
 800547a:	461a      	mov	r2, r3
 800547c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8005480:	f7ff ffe7 	bl	8005452 <dwt_write16bitoffsetreg>
 8005484:	2300      	movs	r3, #0
 8005486:	461a      	mov	r2, r3
 8005488:	4908      	ldr	r1, [pc, #32]	; (80054ac <ull_clearaonconfig+0x38>)
 800548a:	4620      	mov	r0, r4
 800548c:	f7ff ff8f 	bl	80053ae <dwt_write8bitoffsetreg>
 8005490:	4d07      	ldr	r5, [pc, #28]	; (80054b0 <ull_clearaonconfig+0x3c>)
 8005492:	2300      	movs	r3, #0
 8005494:	461a      	mov	r2, r3
 8005496:	4629      	mov	r1, r5
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff ff88 	bl	80053ae <dwt_write8bitoffsetreg>
 800549e:	2302      	movs	r3, #2
 80054a0:	2200      	movs	r2, #0
 80054a2:	4629      	mov	r1, r5
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff ff82 	bl	80053ae <dwt_write8bitoffsetreg>
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	000a0014 	.word	0x000a0014
 80054b0:	000a0004 	.word	0x000a0004

080054b4 <ull_force_clocks>:
 80054b4:	b508      	push	{r3, lr}
 80054b6:	2901      	cmp	r1, #1
 80054b8:	d002      	beq.n	80054c0 <ull_force_clocks+0xc>
 80054ba:	2905      	cmp	r1, #5
 80054bc:	d007      	beq.n	80054ce <ull_force_clocks+0x1a>
 80054be:	bd08      	pop	{r3, pc}
 80054c0:	f641 0322 	movw	r3, #6178	; 0x1822
 80054c4:	2200      	movs	r2, #0
 80054c6:	4905      	ldr	r1, [pc, #20]	; (80054dc <ull_force_clocks+0x28>)
 80054c8:	f7ff ffc3 	bl	8005452 <dwt_write16bitoffsetreg>
 80054cc:	e7f7      	b.n	80054be <ull_force_clocks+0xa>
 80054ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054d2:	2200      	movs	r2, #0
 80054d4:	4901      	ldr	r1, [pc, #4]	; (80054dc <ull_force_clocks+0x28>)
 80054d6:	f7ff ffbc 	bl	8005452 <dwt_write16bitoffsetreg>
 80054da:	e7f0      	b.n	80054be <ull_force_clocks+0xa>
 80054dc:	00110004 	.word	0x00110004

080054e0 <__dwt_otp_write_wdata_id_reg>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4605      	mov	r5, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2200      	movs	r2, #0
 80054ee:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80054f2:	f7ff ffae 	bl	8005452 <dwt_write16bitoffsetreg>
 80054f6:	b2a3      	uxth	r3, r4
 80054f8:	2200      	movs	r2, #0
 80054fa:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80054fe:	4628      	mov	r0, r5
 8005500:	f7ff ffa7 	bl	8005452 <dwt_write16bitoffsetreg>
 8005504:	bd38      	pop	{r3, r4, r5, pc}
	...

08005508 <_dwt_otpread>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4604      	mov	r4, r0
 800550c:	460e      	mov	r6, r1
 800550e:	4d0c      	ldr	r5, [pc, #48]	; (8005540 <_dwt_otpread+0x38>)
 8005510:	2301      	movs	r3, #1
 8005512:	2200      	movs	r2, #0
 8005514:	4629      	mov	r1, r5
 8005516:	f7ff ff9c 	bl	8005452 <dwt_write16bitoffsetreg>
 800551a:	4633      	mov	r3, r6
 800551c:	2200      	movs	r2, #0
 800551e:	4909      	ldr	r1, [pc, #36]	; (8005544 <_dwt_otpread+0x3c>)
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff ff96 	bl	8005452 <dwt_write16bitoffsetreg>
 8005526:	2302      	movs	r3, #2
 8005528:	2200      	movs	r2, #0
 800552a:	4629      	mov	r1, r5
 800552c:	4620      	mov	r0, r4
 800552e:	f7ff ff90 	bl	8005452 <dwt_write16bitoffsetreg>
 8005532:	2200      	movs	r2, #0
 8005534:	4904      	ldr	r1, [pc, #16]	; (8005548 <_dwt_otpread+0x40>)
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff fb4a 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	bf00      	nop
 8005540:	000b0008 	.word	0x000b0008
 8005544:	000b0004 	.word	0x000b0004
 8005548:	000b0010 	.word	0x000b0010

0800554c <ull_aon_read>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4604      	mov	r4, r0
 8005550:	460b      	mov	r3, r1
 8005552:	2200      	movs	r2, #0
 8005554:	490a      	ldr	r1, [pc, #40]	; (8005580 <ull_aon_read+0x34>)
 8005556:	f7ff ff7c 	bl	8005452 <dwt_write16bitoffsetreg>
 800555a:	4d0a      	ldr	r5, [pc, #40]	; (8005584 <ull_aon_read+0x38>)
 800555c:	2388      	movs	r3, #136	; 0x88
 800555e:	2200      	movs	r2, #0
 8005560:	4629      	mov	r1, r5
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff ff23 	bl	80053ae <dwt_write8bitoffsetreg>
 8005568:	2300      	movs	r3, #0
 800556a:	461a      	mov	r2, r3
 800556c:	4629      	mov	r1, r5
 800556e:	4620      	mov	r0, r4
 8005570:	f7ff ff1d 	bl	80053ae <dwt_write8bitoffsetreg>
 8005574:	2200      	movs	r2, #0
 8005576:	4904      	ldr	r1, [pc, #16]	; (8005588 <ull_aon_read+0x3c>)
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fb51 	bl	8004c20 <dwt_read8bitoffsetreg>
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	000a000c 	.word	0x000a000c
 8005584:	000a0004 	.word	0x000a0004
 8005588:	000a0008 	.word	0x000a0008

0800558c <ull_aon_write>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4604      	mov	r4, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4615      	mov	r5, r2
 8005594:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005598:	bf34      	ite	cc
 800559a:	2600      	movcc	r6, #0
 800559c:	2620      	movcs	r6, #32
 800559e:	2200      	movs	r2, #0
 80055a0:	490b      	ldr	r1, [pc, #44]	; (80055d0 <ull_aon_write+0x44>)
 80055a2:	f7ff ff56 	bl	8005452 <dwt_write16bitoffsetreg>
 80055a6:	462b      	mov	r3, r5
 80055a8:	2200      	movs	r2, #0
 80055aa:	490a      	ldr	r1, [pc, #40]	; (80055d4 <ull_aon_write+0x48>)
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff fefe 	bl	80053ae <dwt_write8bitoffsetreg>
 80055b2:	4d09      	ldr	r5, [pc, #36]	; (80055d8 <ull_aon_write+0x4c>)
 80055b4:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80055b8:	2200      	movs	r2, #0
 80055ba:	4629      	mov	r1, r5
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff fef6 	bl	80053ae <dwt_write8bitoffsetreg>
 80055c2:	2300      	movs	r3, #0
 80055c4:	461a      	mov	r2, r3
 80055c6:	4629      	mov	r1, r5
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff fef0 	bl	80053ae <dwt_write8bitoffsetreg>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	000a000c 	.word	0x000a000c
 80055d4:	000a0010 	.word	0x000a0010
 80055d8:	000a0004 	.word	0x000a0004

080055dc <ull_configuresleep>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4604      	mov	r4, r0
 80055e0:	460d      	mov	r5, r1
 80055e2:	4616      	mov	r6, r2
 80055e4:	2200      	movs	r2, #0
 80055e6:	f240 110b 	movw	r1, #267	; 0x10b
 80055ea:	f7ff ffcf 	bl	800558c <ull_aon_write>
 80055ee:	f44f 7182 	mov.w	r1, #260	; 0x104
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7ff ffaa 	bl	800554c <ull_aon_read>
 80055f8:	f000 021f 	and.w	r2, r0, #31
 80055fc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005600:	4620      	mov	r0, r4
 8005602:	f7ff ffc3 	bl	800558c <ull_aon_write>
 8005606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005608:	8a5a      	ldrh	r2, [r3, #18]
 800560a:	4315      	orrs	r5, r2
 800560c:	825d      	strh	r5, [r3, #18]
 800560e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005610:	8a5b      	ldrh	r3, [r3, #18]
 8005612:	2200      	movs	r2, #0
 8005614:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff ff1a 	bl	8005452 <dwt_write16bitoffsetreg>
 800561e:	4633      	mov	r3, r6
 8005620:	2200      	movs	r2, #0
 8005622:	4902      	ldr	r1, [pc, #8]	; (800562c <ull_configuresleep+0x50>)
 8005624:	4620      	mov	r0, r4
 8005626:	f7ff fec2 	bl	80053ae <dwt_write8bitoffsetreg>
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	000a0014 	.word	0x000a0014

08005630 <ull_signal_rx_buff_free>:
 8005630:	b510      	push	{r4, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	4604      	mov	r4, r0
 8005636:	2200      	movs	r2, #0
 8005638:	9200      	str	r2, [sp, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	2113      	movs	r1, #19
 800563e:	f7ff feab 	bl	8005398 <dwt_writetodevice>
 8005642:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005644:	7bda      	ldrb	r2, [r3, #15]
 8005646:	2a03      	cmp	r2, #3
 8005648:	bf0c      	ite	eq
 800564a:	2201      	moveq	r2, #1
 800564c:	2203      	movne	r2, #3
 800564e:	73da      	strb	r2, [r3, #15]
 8005650:	b002      	add	sp, #8
 8005652:	bd10      	pop	{r4, pc}

08005654 <dwt_write32bitoffsetreg>:
 8005654:	b510      	push	{r4, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	f88d 300c 	strb.w	r3, [sp, #12]
 800565c:	0a1c      	lsrs	r4, r3, #8
 800565e:	f88d 400d 	strb.w	r4, [sp, #13]
 8005662:	0c1c      	lsrs	r4, r3, #16
 8005664:	f88d 400e 	strb.w	r4, [sp, #14]
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f88d 300f 	strb.w	r3, [sp, #15]
 800566e:	ab03      	add	r3, sp, #12
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	2304      	movs	r3, #4
 8005674:	b292      	uxth	r2, r2
 8005676:	f7ff fe8f 	bl	8005398 <dwt_writetodevice>
 800567a:	b004      	add	sp, #16
 800567c:	bd10      	pop	{r4, pc}
	...

08005680 <ull_isr>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	2200      	movs	r2, #0
 8005686:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800568a:	f7ff fac9 	bl	8004c20 <dwt_read8bitoffsetreg>
 800568e:	4605      	mov	r5, r0
 8005690:	2200      	movs	r2, #0
 8005692:	2144      	movs	r1, #68	; 0x44
 8005694:	4620      	mov	r0, r4
 8005696:	f7ff fa9b 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800569a:	4606      	mov	r6, r0
 800569c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800569e:	2200      	movs	r2, #0
 80056a0:	845a      	strh	r2, [r3, #34]	; 0x22
 80056a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056a6:	61da      	str	r2, [r3, #28]
 80056a8:	841a      	strh	r2, [r3, #32]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
 80056ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056ae:	629c      	str	r4, [r3, #40]	; 0x28
 80056b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056b2:	61d8      	str	r0, [r3, #28]
 80056b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80056b6:	7dd3      	ldrb	r3, [r2, #23]
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d079      	beq.n	80057b4 <ull_isr+0x134>
 80056c0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80056c4:	d005      	beq.n	80056d2 <ull_isr+0x52>
 80056c6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80056d2:	f015 0f80 	tst.w	r5, #128	; 0x80
 80056d6:	d174      	bne.n	80057c2 <ull_isr+0x142>
 80056d8:	f015 0f01 	tst.w	r5, #1
 80056dc:	f040 80a3 	bne.w	8005826 <ull_isr+0x1a6>
 80056e0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056e4:	d00b      	beq.n	80056fe <ull_isr+0x7e>
 80056e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e8:	b113      	cbz	r3, 80056f0 <ull_isr+0x70>
 80056ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80056ec:	301c      	adds	r0, #28
 80056ee:	4798      	blx	r3
 80056f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80056f4:	2202      	movs	r2, #2
 80056f6:	2144      	movs	r1, #68	; 0x44
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7ff feaa 	bl	8005452 <dwt_write16bitoffsetreg>
 80056fe:	f015 0f08 	tst.w	r5, #8
 8005702:	f000 80ea 	beq.w	80058da <ull_isr+0x25a>
 8005706:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800570e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005710:	7bdb      	ldrb	r3, [r3, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 8095 	bne.w	8005842 <ull_isr+0x1c2>
 8005718:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800571a:	61de      	str	r6, [r3, #28]
 800571c:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8005720:	f000 80a9 	beq.w	8005876 <ull_isr+0x1f6>
 8005724:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005726:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800572a:	f043 0308 	orr.w	r3, r3, #8
 800572e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005732:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8005736:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800573a:	d008      	beq.n	800574e <ull_isr+0xce>
 800573c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800573e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005742:	f043 0310 	orr.w	r3, r3, #16
 8005746:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800574a:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800574e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8005752:	d006      	beq.n	8005762 <ull_isr+0xe2>
 8005754:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005756:	7dd3      	ldrb	r3, [r2, #23]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b03      	cmp	r3, #3
 800575e:	f000 8096 	beq.w	800588e <ull_isr+0x20e>
 8005762:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005766:	f040 809e 	bne.w	80058a6 <ull_isr+0x226>
 800576a:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800576e:	2200      	movs	r2, #0
 8005770:	2144      	movs	r1, #68	; 0x44
 8005772:	4620      	mov	r0, r4
 8005774:	f7ff ff6e 	bl	8005654 <dwt_write32bitoffsetreg>
 8005778:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800577a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 80a1 	bne.w	80058c4 <ull_isr+0x244>
 8005782:	7dc3      	ldrb	r3, [r0, #23]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b03      	cmp	r3, #3
 800578a:	f000 809b 	beq.w	80058c4 <ull_isr+0x244>
 800578e:	69c3      	ldr	r3, [r0, #28]
 8005790:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005794:	61c3      	str	r3, [r0, #28]
 8005796:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005798:	69d3      	ldr	r3, [r2, #28]
 800579a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800579e:	61d3      	str	r3, [r2, #28]
 80057a0:	69e3      	ldr	r3, [r4, #28]
 80057a2:	b113      	cbz	r3, 80057aa <ull_isr+0x12a>
 80057a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80057a6:	301c      	adds	r0, #28
 80057a8:	4798      	blx	r3
 80057aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057b2:	e08b      	b.n	80058cc <ull_isr+0x24c>
 80057b4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80057b8:	bf1c      	itt	ne
 80057ba:	f045 0508 	orrne.w	r5, r5, #8
 80057be:	b2ed      	uxtbne	r5, r5
 80057c0:	e77e      	b.n	80056c0 <ull_isr+0x40>
 80057c2:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80057c4:	2200      	movs	r2, #0
 80057c6:	2148      	movs	r1, #72	; 0x48
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fa17 	bl	8004bfc <dwt_read16bitoffsetreg>
 80057ce:	8438      	strh	r0, [r7, #32]
 80057d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80057d2:	7d9a      	ldrb	r2, [r3, #22]
 80057d4:	b11a      	cbz	r2, 80057de <ull_isr+0x15e>
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	f012 0f04 	tst.w	r2, #4
 80057dc:	d103      	bne.n	80057e6 <ull_isr+0x166>
 80057de:	8c1b      	ldrh	r3, [r3, #32]
 80057e0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80057e4:	b18b      	cbz	r3, 800580a <ull_isr+0x18a>
 80057e6:	2304      	movs	r3, #4
 80057e8:	2200      	movs	r2, #0
 80057ea:	2144      	movs	r1, #68	; 0x44
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7ff fdde 	bl	80053ae <dwt_write8bitoffsetreg>
 80057f2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80057f6:	2200      	movs	r2, #0
 80057f8:	2148      	movs	r1, #72	; 0x48
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff fe29 	bl	8005452 <dwt_write16bitoffsetreg>
 8005800:	6a23      	ldr	r3, [r4, #32]
 8005802:	b113      	cbz	r3, 800580a <ull_isr+0x18a>
 8005804:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005806:	301c      	adds	r0, #28
 8005808:	4798      	blx	r3
 800580a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800580c:	8c1b      	ldrh	r3, [r3, #32]
 800580e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005812:	f43f af61 	beq.w	80056d8 <ull_isr+0x58>
 8005816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800581a:	2200      	movs	r2, #0
 800581c:	2148      	movs	r1, #72	; 0x48
 800581e:	4620      	mov	r0, r4
 8005820:	f7ff fe17 	bl	8005452 <dwt_write16bitoffsetreg>
 8005824:	e758      	b.n	80056d8 <ull_isr+0x58>
 8005826:	23f8      	movs	r3, #248	; 0xf8
 8005828:	2200      	movs	r2, #0
 800582a:	2144      	movs	r1, #68	; 0x44
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff fdbe 	bl	80053ae <dwt_write8bitoffsetreg>
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f43f af53 	beq.w	80056e0 <ull_isr+0x60>
 800583a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800583c:	301c      	adds	r0, #28
 800583e:	4798      	blx	r3
 8005840:	e74e      	b.n	80056e0 <ull_isr+0x60>
 8005842:	493b      	ldr	r1, [pc, #236]	; (8005930 <ull_isr+0x2b0>)
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff f9eb 	bl	8004c20 <dwt_read8bitoffsetreg>
 800584a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800584c:	7bdb      	ldrb	r3, [r3, #15]
 800584e:	2b03      	cmp	r3, #3
 8005850:	bf08      	it	eq
 8005852:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 8005856:	f010 0f01 	tst.w	r0, #1
 800585a:	bf18      	it	ne
 800585c:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8005860:	f010 0f02 	tst.w	r0, #2
 8005864:	bf18      	it	ne
 8005866:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800586a:	f010 0f04 	tst.w	r0, #4
 800586e:	bf18      	it	ne
 8005870:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8005874:	e750      	b.n	8005718 <ull_isr+0x98>
 8005876:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800587a:	bf1f      	itttt	ne
 800587c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800587e:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 8005882:	f043 0304 	orrne.w	r3, r3, #4
 8005886:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 800588a:	2700      	movs	r7, #0
 800588c:	e753      	b.n	8005736 <ull_isr+0xb6>
 800588e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8005892:	f043 0302 	orr.w	r3, r3, #2
 8005896:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800589a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800589c:	2200      	movs	r2, #0
 800589e:	845a      	strh	r2, [r3, #34]	; 0x22
 80058a0:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80058a4:	e761      	b.n	800576a <ull_isr+0xea>
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff fd8e 	bl	80053c8 <ull_getframelength>
 80058ac:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80058b0:	f43f af5b 	beq.w	800576a <ull_isr+0xea>
 80058b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80058b6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80058c2:	e752      	b.n	800576a <ull_isr+0xea>
 80058c4:	6963      	ldr	r3, [r4, #20]
 80058c6:	b10b      	cbz	r3, 80058cc <ull_isr+0x24c>
 80058c8:	301c      	adds	r0, #28
 80058ca:	4798      	blx	r3
 80058cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058ce:	7bdb      	ldrb	r3, [r3, #15]
 80058d0:	b953      	cbnz	r3, 80058e8 <ull_isr+0x268>
 80058d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058da:	f015 0f10 	tst.w	r5, #16
 80058de:	d107      	bne.n	80058f0 <ull_isr+0x270>
 80058e0:	f015 0f20 	tst.w	r5, #32
 80058e4:	d114      	bne.n	8005910 <ull_isr+0x290>
 80058e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff fea1 	bl	8005630 <ull_signal_rx_buff_free>
 80058ee:	e7f0      	b.n	80058d2 <ull_isr+0x252>
 80058f0:	4b10      	ldr	r3, [pc, #64]	; (8005934 <ull_isr+0x2b4>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	2144      	movs	r1, #68	; 0x44
 80058f6:	4620      	mov	r0, r4
 80058f8:	f7ff feac 	bl	8005654 <dwt_write32bitoffsetreg>
 80058fc:	69e3      	ldr	r3, [r4, #28]
 80058fe:	b113      	cbz	r3, 8005906 <ull_isr+0x286>
 8005900:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005902:	301c      	adds	r0, #28
 8005904:	4798      	blx	r3
 8005906:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800590e:	e7e7      	b.n	80058e0 <ull_isr+0x260>
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <ull_isr+0x2b8>)
 8005912:	2200      	movs	r2, #0
 8005914:	2144      	movs	r1, #68	; 0x44
 8005916:	4620      	mov	r0, r4
 8005918:	f7ff fe9c 	bl	8005654 <dwt_write32bitoffsetreg>
 800591c:	69a3      	ldr	r3, [r4, #24]
 800591e:	b113      	cbz	r3, 8005926 <ull_isr+0x2a6>
 8005920:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005922:	301c      	adds	r0, #28
 8005924:	4798      	blx	r3
 8005926:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800592e:	e7da      	b.n	80058e6 <ull_isr+0x266>
 8005930:	00010024 	.word	0x00010024
 8005934:	34059400 	.word	0x34059400
 8005938:	10220400 	.word	0x10220400

0800593c <_dwt_adjust_delaytime>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4604      	mov	r4, r0
 8005940:	b989      	cbnz	r1, 8005966 <_dwt_adjust_delaytime+0x2a>
 8005942:	2200      	movs	r2, #0
 8005944:	212c      	movs	r1, #44	; 0x2c
 8005946:	f7ff f943 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800594a:	4605      	mov	r5, r0
 800594c:	2201      	movs	r2, #1
 800594e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005952:	4620      	mov	r0, r4
 8005954:	f7ff f964 	bl	8004c20 <dwt_read8bitoffsetreg>
 8005958:	1a2b      	subs	r3, r5, r0
 800595a:	2200      	movs	r2, #0
 800595c:	212c      	movs	r1, #44	; 0x2c
 800595e:	4620      	mov	r0, r4
 8005960:	f7ff fe78 	bl	8005654 <dwt_write32bitoffsetreg>
 8005964:	bd38      	pop	{r3, r4, r5, pc}
 8005966:	2200      	movs	r2, #0
 8005968:	212c      	movs	r1, #44	; 0x2c
 800596a:	f7ff f931 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800596e:	4605      	mov	r5, r0
 8005970:	2201      	movs	r2, #1
 8005972:	4905      	ldr	r1, [pc, #20]	; (8005988 <_dwt_adjust_delaytime+0x4c>)
 8005974:	4620      	mov	r0, r4
 8005976:	f7ff f953 	bl	8004c20 <dwt_read8bitoffsetreg>
 800597a:	1a2b      	subs	r3, r5, r0
 800597c:	2200      	movs	r2, #0
 800597e:	212c      	movs	r1, #44	; 0x2c
 8005980:	4620      	mov	r0, r4
 8005982:	f7ff fe67 	bl	8005654 <dwt_write32bitoffsetreg>
 8005986:	e7ed      	b.n	8005964 <_dwt_adjust_delaytime+0x28>
 8005988:	00010004 	.word	0x00010004

0800598c <ull_setrxaftertxdelay>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4606      	mov	r6, r0
 8005990:	460c      	mov	r4, r1
 8005992:	4d08      	ldr	r5, [pc, #32]	; (80059b4 <ull_setrxaftertxdelay+0x28>)
 8005994:	2200      	movs	r2, #0
 8005996:	4629      	mov	r1, r5
 8005998:	f7ff f91a 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800599c:	0d00      	lsrs	r0, r0, #20
 800599e:	0500      	lsls	r0, r0, #20
 80059a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80059a4:	4303      	orrs	r3, r0
 80059a6:	2200      	movs	r2, #0
 80059a8:	4629      	mov	r1, r5
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff fe52 	bl	8005654 <dwt_write32bitoffsetreg>
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
 80059b2:	bf00      	nop
 80059b4:	00010008 	.word	0x00010008

080059b8 <ull_setlnapamode>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	2200      	movs	r2, #0
 80059c0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80059c4:	f7ff f904 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <ull_setlnapamode+0x40>)
 80059ca:	4003      	ands	r3, r0
 80059cc:	f014 0f01 	tst.w	r4, #1
 80059d0:	bf18      	it	ne
 80059d2:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 80059d6:	f014 0f02 	tst.w	r4, #2
 80059da:	bf18      	it	ne
 80059dc:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 80059e0:	f014 0f04 	tst.w	r4, #4
 80059e4:	bf18      	it	ne
 80059e6:	f043 0312 	orrne.w	r3, r3, #18
 80059ea:	2200      	movs	r2, #0
 80059ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80059f0:	4628      	mov	r0, r5
 80059f2:	f7ff fe2f 	bl	8005654 <dwt_write32bitoffsetreg>
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	ffe00fc0 	.word	0xffe00fc0

080059fc <ull_configurestskey>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4605      	mov	r5, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	680b      	ldr	r3, [r1, #0]
 8005a04:	2200      	movs	r2, #0
 8005a06:	490b      	ldr	r1, [pc, #44]	; (8005a34 <ull_configurestskey+0x38>)
 8005a08:	f7ff fe24 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4909      	ldr	r1, [pc, #36]	; (8005a38 <ull_configurestskey+0x3c>)
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7ff fe1e 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4907      	ldr	r1, [pc, #28]	; (8005a3c <ull_configurestskey+0x40>)
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f7ff fe18 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	4905      	ldr	r1, [pc, #20]	; (8005a40 <ull_configurestskey+0x44>)
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f7ff fe12 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a30:	bd38      	pop	{r3, r4, r5, pc}
 8005a32:	bf00      	nop
 8005a34:	0002000c 	.word	0x0002000c
 8005a38:	00020010 	.word	0x00020010
 8005a3c:	00020014 	.word	0x00020014
 8005a40:	00020018 	.word	0x00020018

08005a44 <ull_configurestsiv>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4605      	mov	r5, r0
 8005a48:	460c      	mov	r4, r1
 8005a4a:	680b      	ldr	r3, [r1, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	490b      	ldr	r1, [pc, #44]	; (8005a7c <ull_configurestsiv+0x38>)
 8005a50:	f7ff fe00 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a54:	6863      	ldr	r3, [r4, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	4909      	ldr	r1, [pc, #36]	; (8005a80 <ull_configurestsiv+0x3c>)
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f7ff fdfa 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a60:	68a3      	ldr	r3, [r4, #8]
 8005a62:	2200      	movs	r2, #0
 8005a64:	4907      	ldr	r1, [pc, #28]	; (8005a84 <ull_configurestsiv+0x40>)
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7ff fdf4 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a6c:	68e3      	ldr	r3, [r4, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	4905      	ldr	r1, [pc, #20]	; (8005a88 <ull_configurestsiv+0x44>)
 8005a72:	4628      	mov	r0, r5
 8005a74:	f7ff fdee 	bl	8005654 <dwt_write32bitoffsetreg>
 8005a78:	bd38      	pop	{r3, r4, r5, pc}
 8005a7a:	bf00      	nop
 8005a7c:	0002001c 	.word	0x0002001c
 8005a80:	00020020 	.word	0x00020020
 8005a84:	00020024 	.word	0x00020024
 8005a88:	00020028 	.word	0x00020028

08005a8c <ull_configmrxlut>:
 8005a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	4604      	mov	r4, r0
 8005a92:	2905      	cmp	r1, #5
 8005a94:	d040      	beq.n	8005b18 <ull_configmrxlut+0x8c>
 8005a96:	4d26      	ldr	r5, [pc, #152]	; (8005b30 <ull_configmrxlut+0xa4>)
 8005a98:	462e      	mov	r6, r5
 8005a9a:	4f26      	ldr	r7, [pc, #152]	; (8005b34 <ull_configmrxlut+0xa8>)
 8005a9c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8005b78 <ull_configmrxlut+0xec>
 8005aa0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8005b7c <ull_configmrxlut+0xf0>
 8005aa4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005b80 <ull_configmrxlut+0xf4>
 8005aa8:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <ull_configmrxlut+0xac>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	4923      	ldr	r1, [pc, #140]	; (8005b3c <ull_configmrxlut+0xb0>)
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff fdd0 	bl	8005654 <dwt_write32bitoffsetreg>
 8005ab4:	4653      	mov	r3, sl
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4921      	ldr	r1, [pc, #132]	; (8005b40 <ull_configmrxlut+0xb4>)
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff fdca 	bl	8005654 <dwt_write32bitoffsetreg>
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	491f      	ldr	r1, [pc, #124]	; (8005b44 <ull_configmrxlut+0xb8>)
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f7ff fdc4 	bl	8005654 <dwt_write32bitoffsetreg>
 8005acc:	4643      	mov	r3, r8
 8005ace:	2200      	movs	r2, #0
 8005ad0:	491d      	ldr	r1, [pc, #116]	; (8005b48 <ull_configmrxlut+0xbc>)
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7ff fdbe 	bl	8005654 <dwt_write32bitoffsetreg>
 8005ad8:	463b      	mov	r3, r7
 8005ada:	2200      	movs	r2, #0
 8005adc:	491b      	ldr	r1, [pc, #108]	; (8005b4c <ull_configmrxlut+0xc0>)
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7ff fdb8 	bl	8005654 <dwt_write32bitoffsetreg>
 8005ae4:	4633      	mov	r3, r6
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4919      	ldr	r1, [pc, #100]	; (8005b50 <ull_configmrxlut+0xc4>)
 8005aea:	4620      	mov	r0, r4
 8005aec:	f7ff fdb2 	bl	8005654 <dwt_write32bitoffsetreg>
 8005af0:	462b      	mov	r3, r5
 8005af2:	2200      	movs	r2, #0
 8005af4:	4917      	ldr	r1, [pc, #92]	; (8005b54 <ull_configmrxlut+0xc8>)
 8005af6:	4620      	mov	r0, r4
 8005af8:	f7ff fdac 	bl	8005654 <dwt_write32bitoffsetreg>
 8005afc:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <ull_configmrxlut+0xcc>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	4916      	ldr	r1, [pc, #88]	; (8005b5c <ull_configmrxlut+0xd0>)
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff fda6 	bl	8005654 <dwt_write32bitoffsetreg>
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <ull_configmrxlut+0xd4>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	4915      	ldr	r1, [pc, #84]	; (8005b64 <ull_configmrxlut+0xd8>)
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff fda0 	bl	8005654 <dwt_write32bitoffsetreg>
 8005b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b18:	4d13      	ldr	r5, [pc, #76]	; (8005b68 <ull_configmrxlut+0xdc>)
 8005b1a:	4e14      	ldr	r6, [pc, #80]	; (8005b6c <ull_configmrxlut+0xe0>)
 8005b1c:	4f14      	ldr	r7, [pc, #80]	; (8005b70 <ull_configmrxlut+0xe4>)
 8005b1e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005b84 <ull_configmrxlut+0xf8>
 8005b22:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8005b88 <ull_configmrxlut+0xfc>
 8005b26:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005b8c <ull_configmrxlut+0x100>
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <ull_configmrxlut+0xe8>)
 8005b2c:	e7bd      	b.n	8005aaa <ull_configmrxlut+0x1e>
 8005b2e:	bf00      	nop
 8005b30:	0002afb5 	.word	0x0002afb5
 8005b34:	0002af7d 	.word	0x0002af7d
 8005b38:	0002a8fe 	.word	0x0002a8fe
 8005b3c:	00030038 	.word	0x00030038
 8005b40:	0003003c 	.word	0x0003003c
 8005b44:	00030040 	.word	0x00030040
 8005b48:	00030044 	.word	0x00030044
 8005b4c:	00030048 	.word	0x00030048
 8005b50:	0003004c 	.word	0x0003004c
 8005b54:	00030050 	.word	0x00030050
 8005b58:	10000240 	.word	0x10000240
 8005b5c:	0003001c 	.word	0x0003001c
 8005b60:	1b6da489 	.word	0x1b6da489
 8005b64:	00030020 	.word	0x00030020
 8005b68:	0001cff5 	.word	0x0001cff5
 8005b6c:	0001cfb5 	.word	0x0001cfb5
 8005b70:	0001cf36 	.word	0x0001cf36
 8005b74:	0001c0fd 	.word	0x0001c0fd
 8005b78:	0002af3e 	.word	0x0002af3e
 8005b7c:	0002a5fe 	.word	0x0002a5fe
 8005b80:	0002ac36 	.word	0x0002ac36
 8005b84:	0001c77e 	.word	0x0001c77e
 8005b88:	0001c6be 	.word	0x0001c6be
 8005b8c:	0001c43e 	.word	0x0001c43e

08005b90 <ull_disable_rftx_blocks>:
 8005b90:	b508      	push	{r3, lr}
 8005b92:	2300      	movs	r3, #0
 8005b94:	461a      	mov	r2, r3
 8005b96:	4902      	ldr	r1, [pc, #8]	; (8005ba0 <ull_disable_rftx_blocks+0x10>)
 8005b98:	f7ff fd5c 	bl	8005654 <dwt_write32bitoffsetreg>
 8005b9c:	bd08      	pop	{r3, pc}
 8005b9e:	bf00      	nop
 8005ba0:	00070004 	.word	0x00070004

08005ba4 <ull_disable_rf_tx>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	460d      	mov	r5, r1
 8005baa:	2300      	movs	r3, #0
 8005bac:	461a      	mov	r2, r3
 8005bae:	490a      	ldr	r1, [pc, #40]	; (8005bd8 <ull_disable_rf_tx+0x34>)
 8005bb0:	f7ff fd50 	bl	8005654 <dwt_write32bitoffsetreg>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff fd49 	bl	8005654 <dwt_write32bitoffsetreg>
 8005bc2:	b905      	cbnz	r5, 8005bc6 <ull_disable_rf_tx+0x22>
 8005bc4:	bd38      	pop	{r3, r4, r5, pc}
 8005bc6:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8005bca:	2200      	movs	r2, #0
 8005bcc:	4903      	ldr	r1, [pc, #12]	; (8005bdc <ull_disable_rf_tx+0x38>)
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f7ff fd40 	bl	8005654 <dwt_write32bitoffsetreg>
 8005bd4:	e7f6      	b.n	8005bc4 <ull_disable_rf_tx+0x20>
 8005bd6:	bf00      	nop
 8005bd8:	00070048 	.word	0x00070048
 8005bdc:	00070014 	.word	0x00070014

08005be0 <ull_readrxdata>:
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b083      	sub	sp, #12
 8005be4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005be6:	7be4      	ldrb	r4, [r4, #15]
 8005be8:	2c03      	cmp	r4, #3
 8005bea:	bf0c      	ite	eq
 8005bec:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8005bf0:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8005bf4:	189c      	adds	r4, r3, r2
 8005bf6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005bfa:	da19      	bge.n	8005c30 <ull_readrxdata+0x50>
 8005bfc:	461d      	mov	r5, r3
 8005bfe:	4616      	mov	r6, r2
 8005c00:	460f      	mov	r7, r1
 8005c02:	4604      	mov	r4, r0
 8005c04:	2b7f      	cmp	r3, #127	; 0x7f
 8005c06:	d915      	bls.n	8005c34 <ull_readrxdata+0x54>
 8005c08:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	490d      	ldr	r1, [pc, #52]	; (8005c44 <ull_readrxdata+0x64>)
 8005c10:	f7ff fd20 	bl	8005654 <dwt_write32bitoffsetreg>
 8005c14:	462b      	mov	r3, r5
 8005c16:	2200      	movs	r2, #0
 8005c18:	490b      	ldr	r1, [pc, #44]	; (8005c48 <ull_readrxdata+0x68>)
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f7ff fd1a 	bl	8005654 <dwt_write32bitoffsetreg>
 8005c20:	9700      	str	r7, [sp, #0]
 8005c22:	4633      	mov	r3, r6
 8005c24:	2200      	movs	r2, #0
 8005c26:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7fe ffc6 	bl	8004bbc <dwt_readfromdevice>
 8005c30:	b003      	add	sp, #12
 8005c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c34:	9100      	str	r1, [sp, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	462a      	mov	r2, r5
 8005c3a:	4661      	mov	r1, ip
 8005c3c:	f7fe ffbe 	bl	8004bbc <dwt_readfromdevice>
 8005c40:	e7f6      	b.n	8005c30 <ull_readrxdata+0x50>
 8005c42:	bf00      	nop
 8005c44:	001f0004 	.word	0x001f0004
 8005c48:	001f0008 	.word	0x001f0008

08005c4c <ull_rxenable>:
 8005c4c:	b530      	push	{r4, r5, lr}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	4605      	mov	r5, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	b171      	cbz	r1, 8005c74 <ull_rxenable+0x28>
 8005c56:	f021 0302 	bic.w	r3, r1, #2
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	2b0f      	cmp	r3, #15
 8005c5e:	d856      	bhi.n	8005d0e <ull_rxenable+0xc2>
 8005c60:	e8df f003 	tbb	[pc, r3]
 8005c64:	21555510 	.word	0x21555510
 8005c68:	28555555 	.word	0x28555555
 8005c6c:	55555555 	.word	0x55555555
 8005c70:	33555555 	.word	0x33555555
 8005c74:	2200      	movs	r2, #0
 8005c76:	9200      	str	r2, [sp, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	f7ff fb8c 	bl	8005398 <dwt_writetodevice>
 8005c80:	4620      	mov	r0, r4
 8005c82:	e00e      	b.n	8005ca2 <ull_rxenable+0x56>
 8005c84:	2200      	movs	r2, #0
 8005c86:	9200      	str	r2, [sp, #0]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	f7ff fb84 	bl	8005398 <dwt_writetodevice>
 8005c90:	2203      	movs	r2, #3
 8005c92:	2144      	movs	r1, #68	; 0x44
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7fe ffc3 	bl	8004c20 <dwt_read8bitoffsetreg>
 8005c9a:	f010 0f08 	tst.w	r0, #8
 8005c9e:	d11f      	bne.n	8005ce0 <ull_rxenable+0x94>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	b003      	add	sp, #12
 8005ca4:	bd30      	pop	{r4, r5, pc}
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	9200      	str	r2, [sp, #0]
 8005caa:	4613      	mov	r3, r2
 8005cac:	210a      	movs	r1, #10
 8005cae:	f7ff fb73 	bl	8005398 <dwt_writetodevice>
 8005cb2:	e7ed      	b.n	8005c90 <ull_rxenable+0x44>
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	f7ff fe41 	bl	800593c <_dwt_adjust_delaytime>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	9200      	str	r2, [sp, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	2108      	movs	r1, #8
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7ff fb68 	bl	8005398 <dwt_writetodevice>
 8005cc8:	e7e2      	b.n	8005c90 <ull_rxenable+0x44>
 8005cca:	2101      	movs	r1, #1
 8005ccc:	f7ff fe36 	bl	800593c <_dwt_adjust_delaytime>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	9200      	str	r2, [sp, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	2106      	movs	r1, #6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f7ff fb5d 	bl	8005398 <dwt_writetodevice>
 8005cde:	e7d7      	b.n	8005c90 <ull_rxenable+0x44>
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	9100      	str	r1, [sp, #0]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	460a      	mov	r2, r1
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7ff fb55 	bl	8005398 <dwt_writetodevice>
 8005cee:	f014 0f02 	tst.w	r4, #2
 8005cf2:	d002      	beq.n	8005cfa <ull_rxenable+0xae>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf8:	e7d3      	b.n	8005ca2 <ull_rxenable+0x56>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	9200      	str	r2, [sp, #0]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	2102      	movs	r1, #2
 8005d02:	4628      	mov	r0, r5
 8005d04:	f7ff fb48 	bl	8005398 <dwt_writetodevice>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d0c:	e7c9      	b.n	8005ca2 <ull_rxenable+0x56>
 8005d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d12:	e7c6      	b.n	8005ca2 <ull_rxenable+0x56>

08005d14 <ull_writetxdata>:
 8005d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d16:	b083      	sub	sp, #12
 8005d18:	185c      	adds	r4, r3, r1
 8005d1a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005d1e:	da24      	bge.n	8005d6a <ull_writetxdata+0x56>
 8005d20:	461c      	mov	r4, r3
 8005d22:	4617      	mov	r7, r2
 8005d24:	460e      	mov	r6, r1
 8005d26:	4605      	mov	r5, r0
 8005d28:	2b7f      	cmp	r3, #127	; 0x7f
 8005d2a:	d915      	bls.n	8005d58 <ull_writetxdata+0x44>
 8005d2c:	2314      	movs	r3, #20
 8005d2e:	2200      	movs	r2, #0
 8005d30:	490f      	ldr	r1, [pc, #60]	; (8005d70 <ull_writetxdata+0x5c>)
 8005d32:	f7ff fc8f 	bl	8005654 <dwt_write32bitoffsetreg>
 8005d36:	4623      	mov	r3, r4
 8005d38:	2200      	movs	r2, #0
 8005d3a:	490e      	ldr	r1, [pc, #56]	; (8005d74 <ull_writetxdata+0x60>)
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f7ff fc89 	bl	8005654 <dwt_write32bitoffsetreg>
 8005d42:	9700      	str	r7, [sp, #0]
 8005d44:	4633      	mov	r3, r6
 8005d46:	2200      	movs	r2, #0
 8005d48:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f7ff fb23 	bl	8005398 <dwt_writetodevice>
 8005d52:	2000      	movs	r0, #0
 8005d54:	b003      	add	sp, #12
 8005d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d58:	9200      	str	r2, [sp, #0]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8005d62:	f7ff fb19 	bl	8005398 <dwt_writetodevice>
 8005d66:	2000      	movs	r0, #0
 8005d68:	e7f4      	b.n	8005d54 <ull_writetxdata+0x40>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d6e:	e7f1      	b.n	8005d54 <ull_writetxdata+0x40>
 8005d70:	001f0004 	.word	0x001f0004
 8005d74:	001f0008 	.word	0x001f0008

08005d78 <dwt_modify32bitoffsetreg>:
 8005d78:	b530      	push	{r4, r5, lr}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	9c08      	ldr	r4, [sp, #32]
 8005d7e:	f88d 3008 	strb.w	r3, [sp, #8]
 8005d82:	0a1d      	lsrs	r5, r3, #8
 8005d84:	f88d 5009 	strb.w	r5, [sp, #9]
 8005d88:	0c1d      	lsrs	r5, r3, #16
 8005d8a:	f88d 500a 	strb.w	r5, [sp, #10]
 8005d8e:	0e1b      	lsrs	r3, r3, #24
 8005d90:	f88d 300b 	strb.w	r3, [sp, #11]
 8005d94:	f88d 400c 	strb.w	r4, [sp, #12]
 8005d98:	0a23      	lsrs	r3, r4, #8
 8005d9a:	f88d 300d 	strb.w	r3, [sp, #13]
 8005d9e:	0c23      	lsrs	r3, r4, #16
 8005da0:	f88d 300e 	strb.w	r3, [sp, #14]
 8005da4:	0e24      	lsrs	r4, r4, #24
 8005da6:	f88d 400f 	strb.w	r4, [sp, #15]
 8005daa:	f248 0303 	movw	r3, #32771	; 0x8003
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	ab02      	add	r3, sp, #8
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	2308      	movs	r3, #8
 8005db6:	b292      	uxth	r2, r2
 8005db8:	f7fe fe7d 	bl	8004ab6 <dwt_xfer3xxx>
 8005dbc:	b005      	add	sp, #20
 8005dbe:	bd30      	pop	{r4, r5, pc}

08005dc0 <_dwt_kick_dgc_on_wakeup>:
 8005dc0:	b500      	push	{lr}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	2905      	cmp	r1, #5
 8005dc6:	d004      	beq.n	8005dd2 <_dwt_kick_dgc_on_wakeup+0x12>
 8005dc8:	2909      	cmp	r1, #9
 8005dca:	d00b      	beq.n	8005de4 <_dwt_kick_dgc_on_wakeup+0x24>
 8005dcc:	b003      	add	sp, #12
 8005dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4906      	ldr	r1, [pc, #24]	; (8005df8 <_dwt_kick_dgc_on_wakeup+0x38>)
 8005dde:	f7ff ffcb 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8005de2:	e7f3      	b.n	8005dcc <_dwt_kick_dgc_on_wakeup+0xc>
 8005de4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8005dee:	2200      	movs	r2, #0
 8005df0:	4901      	ldr	r1, [pc, #4]	; (8005df8 <_dwt_kick_dgc_on_wakeup+0x38>)
 8005df2:	f7ff ffc1 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8005df6:	e7e9      	b.n	8005dcc <_dwt_kick_dgc_on_wakeup+0xc>
 8005df8:	000b0008 	.word	0x000b0008

08005dfc <ull_enable_rf_tx>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	4604      	mov	r4, r0
 8005e02:	460e      	mov	r6, r1
 8005e04:	4d13      	ldr	r5, [pc, #76]	; (8005e54 <ull_enable_rf_tx+0x58>)
 8005e06:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e10:	2200      	movs	r2, #0
 8005e12:	4629      	mov	r1, r5
 8005e14:	f7ff ffb0 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8005e18:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e22:	2200      	movs	r2, #0
 8005e24:	4629      	mov	r1, r5
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7ff ffa6 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <ull_enable_rf_tx+0x5c>)
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e34:	2200      	movs	r2, #0
 8005e36:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7ff ff9c 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8005e40:	b90e      	cbnz	r6, 8005e46 <ull_enable_rf_tx+0x4a>
 8005e42:	b002      	add	sp, #8
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <ull_enable_rf_tx+0x60>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4905      	ldr	r1, [pc, #20]	; (8005e60 <ull_enable_rf_tx+0x64>)
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f7ff fc01 	bl	8005654 <dwt_write32bitoffsetreg>
 8005e52:	e7f6      	b.n	8005e42 <ull_enable_rf_tx+0x46>
 8005e54:	00070048 	.word	0x00070048
 8005e58:	02003c00 	.word	0x02003c00
 8005e5c:	01011100 	.word	0x01011100
 8005e60:	00070014 	.word	0x00070014

08005e64 <ull_enable_rftx_blocks>:
 8005e64:	b500      	push	{lr}
 8005e66:	b083      	sub	sp, #12
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <ull_enable_rftx_blocks+0x1c>)
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e70:	2200      	movs	r2, #0
 8005e72:	4904      	ldr	r1, [pc, #16]	; (8005e84 <ull_enable_rftx_blocks+0x20>)
 8005e74:	f7ff ff80 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8005e78:	b003      	add	sp, #12
 8005e7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e7e:	bf00      	nop
 8005e80:	02003c00 	.word	0x02003c00
 8005e84:	00070004 	.word	0x00070004

08005e88 <_dwt_otpprogword32>:
 8005e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	4604      	mov	r4, r0
 8005e90:	460d      	mov	r5, r1
 8005e92:	4617      	mov	r7, r2
 8005e94:	4e56      	ldr	r6, [pc, #344]	; (8005ff0 <_dwt_otpprogword32+0x168>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	4631      	mov	r1, r6
 8005e9a:	f7fe fe99 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8005e9e:	4681      	mov	r9, r0
 8005ea0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4631      	mov	r1, r6
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f7ff ff62 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8005eb4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8005ff4 <_dwt_otpprogword32+0x16c>
 8005eb8:	2318      	movs	r3, #24
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff fac7 	bl	8005452 <dwt_write16bitoffsetreg>
 8005ec4:	2125      	movs	r1, #37	; 0x25
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff fb0a 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005ecc:	2102      	movs	r1, #2
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7ff fb06 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005ed4:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff fb01 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005ede:	b2f9      	uxtb	r1, r7
 8005ee0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f7ff fafb 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7ff faf6 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff faf2 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005efc:	2102      	movs	r1, #2
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7ff faee 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f04:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f7ff fae9 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f0e:	b2e9      	uxtb	r1, r5
 8005f10:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7ff fae3 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f1a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8005f1e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff fadc 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f28:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8005f2c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff fad5 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f36:	0e29      	lsrs	r1, r5, #24
 8005f38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff facf 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f42:	2100      	movs	r1, #0
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff facb 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f4a:	213a      	movs	r1, #58	; 0x3a
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff fac7 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff fac2 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f5c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff fabd 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f66:	2100      	movs	r1, #0
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f7ff fab9 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f6e:	213a      	movs	r1, #58	; 0x3a
 8005f70:	4620      	mov	r0, r4
 8005f72:	f7ff fab5 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f76:	f240 1101 	movw	r1, #257	; 0x101
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f7ff fab0 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005f80:	2302      	movs	r3, #2
 8005f82:	2200      	movs	r2, #0
 8005f84:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7ff fa62 	bl	8005452 <dwt_write16bitoffsetreg>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	461a      	mov	r2, r3
 8005f92:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005f96:	4620      	mov	r0, r4
 8005f98:	f7ff fa5b 	bl	8005452 <dwt_write16bitoffsetreg>
 8005f9c:	2002      	movs	r0, #2
 8005f9e:	f7fa fc55 	bl	800084c <deca_sleep>
 8005fa2:	213a      	movs	r1, #58	; 0x3a
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff fa9b 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005faa:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7ff fa96 	bl	80054e0 <__dwt_otp_write_wdata_id_reg>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7ff fa48 	bl	8005452 <dwt_write16bitoffsetreg>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f7ff fa41 	bl	8005452 <dwt_write16bitoffsetreg>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f7ff fa3b 	bl	8005452 <dwt_write16bitoffsetreg>
 8005fdc:	464b      	mov	r3, r9
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff fb36 	bl	8005654 <dwt_write32bitoffsetreg>
 8005fe8:	b003      	add	sp, #12
 8005fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fee:	bf00      	nop
 8005ff0:	00070044 	.word	0x00070044
 8005ff4:	000b0008 	.word	0x000b0008

08005ff8 <ull_setgpiomode>:
 8005ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	2400      	movs	r4, #0
 8005ffe:	4623      	mov	r3, r4
 8006000:	2601      	movs	r6, #1
 8006002:	2707      	movs	r7, #7
 8006004:	e002      	b.n	800600c <ull_setgpiomode+0x14>
 8006006:	3401      	adds	r4, #1
 8006008:	2c09      	cmp	r4, #9
 800600a:	d009      	beq.n	8006020 <ull_setgpiomode+0x28>
 800600c:	fa06 f504 	lsl.w	r5, r6, r4
 8006010:	420d      	tst	r5, r1
 8006012:	d0f8      	beq.n	8006006 <ull_setgpiomode+0xe>
 8006014:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006018:	fa07 f505 	lsl.w	r5, r7, r5
 800601c:	432b      	orrs	r3, r5
 800601e:	e7f2      	b.n	8006006 <ull_setgpiomode+0xe>
 8006020:	401a      	ands	r2, r3
 8006022:	9200      	str	r2, [sp, #0]
 8006024:	43db      	mvns	r3, r3
 8006026:	2200      	movs	r2, #0
 8006028:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800602c:	f7ff fea4 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006030:	b003      	add	sp, #12
 8006032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006034 <ull_setinterrupt>:
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	4604      	mov	r4, r0
 800603c:	4688      	mov	r8, r1
 800603e:	4617      	mov	r7, r2
 8006040:	461d      	mov	r5, r3
 8006042:	f7fa fbe5 	bl	8000810 <decamutexon>
 8006046:	4606      	mov	r6, r0
 8006048:	2d02      	cmp	r5, #2
 800604a:	d02d      	beq.n	80060a8 <ull_setinterrupt+0x74>
 800604c:	2d01      	cmp	r5, #1
 800604e:	d038      	beq.n	80060c2 <ull_setinterrupt+0x8e>
 8006050:	2500      	movs	r5, #0
 8006052:	9500      	str	r5, [sp, #0]
 8006054:	ea6f 0308 	mvn.w	r3, r8
 8006058:	462a      	mov	r2, r5
 800605a:	213c      	movs	r1, #60	; 0x3c
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff fe8b 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006062:	9500      	str	r5, [sp, #0]
 8006064:	43fb      	mvns	r3, r7
 8006066:	462a      	mov	r2, r5
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	4620      	mov	r0, r4
 800606c:	f7ff fe84 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006070:	2200      	movs	r2, #0
 8006072:	213c      	movs	r1, #60	; 0x3c
 8006074:	4620      	mov	r0, r4
 8006076:	f7fe fdab 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800607a:	4603      	mov	r3, r0
 800607c:	2200      	movs	r2, #0
 800607e:	2144      	movs	r1, #68	; 0x44
 8006080:	4620      	mov	r0, r4
 8006082:	f7ff fae7 	bl	8005654 <dwt_write32bitoffsetreg>
 8006086:	2200      	movs	r2, #0
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	4620      	mov	r0, r4
 800608c:	f7fe fda0 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8006090:	4603      	mov	r3, r0
 8006092:	2200      	movs	r2, #0
 8006094:	2148      	movs	r1, #72	; 0x48
 8006096:	4620      	mov	r0, r4
 8006098:	f7ff fadc 	bl	8005654 <dwt_write32bitoffsetreg>
 800609c:	4630      	mov	r0, r6
 800609e:	f7fa fbc8 	bl	8000832 <decamutexoff>
 80060a2:	b002      	add	sp, #8
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	4643      	mov	r3, r8
 80060aa:	2200      	movs	r2, #0
 80060ac:	213c      	movs	r1, #60	; 0x3c
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff fad0 	bl	8005654 <dwt_write32bitoffsetreg>
 80060b4:	463b      	mov	r3, r7
 80060b6:	2200      	movs	r2, #0
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff faca 	bl	8005654 <dwt_write32bitoffsetreg>
 80060c0:	e7d6      	b.n	8006070 <ull_setinterrupt+0x3c>
 80060c2:	f8cd 8000 	str.w	r8, [sp]
 80060c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ca:	2200      	movs	r2, #0
 80060cc:	213c      	movs	r1, #60	; 0x3c
 80060ce:	4620      	mov	r0, r4
 80060d0:	f7ff fe52 	bl	8005d78 <dwt_modify32bitoffsetreg>
 80060d4:	9700      	str	r7, [sp, #0]
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060da:	2200      	movs	r2, #0
 80060dc:	2140      	movs	r1, #64	; 0x40
 80060de:	4620      	mov	r0, r4
 80060e0:	f7ff fe4a 	bl	8005d78 <dwt_modify32bitoffsetreg>
 80060e4:	e7c4      	b.n	8006070 <ull_setinterrupt+0x3c>
	...

080060e8 <ull_writetxfctrl>:
 80060e8:	b510      	push	{r4, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	4604      	mov	r4, r0
 80060ee:	2a7f      	cmp	r2, #127	; 0x7f
 80060f0:	d912      	bls.n	8006118 <ull_writetxfctrl+0x30>
 80060f2:	3280      	adds	r2, #128	; 0x80
 80060f4:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 80060f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060fc:	9100      	str	r1, [sp, #0]
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <ull_writetxfctrl+0x48>)
 8006100:	2200      	movs	r2, #0
 8006102:	2124      	movs	r1, #36	; 0x24
 8006104:	f7ff fe38 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800610e:	4620      	mov	r0, r4
 8006110:	f7fe fd86 	bl	8004c20 <dwt_read8bitoffsetreg>
 8006114:	b002      	add	sp, #8
 8006116:	bd10      	pop	{r4, pc}
 8006118:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800611c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006120:	9100      	str	r1, [sp, #0]
 8006122:	4b03      	ldr	r3, [pc, #12]	; (8006130 <ull_writetxfctrl+0x48>)
 8006124:	2200      	movs	r2, #0
 8006126:	2124      	movs	r1, #36	; 0x24
 8006128:	f7ff fe26 	bl	8005d78 <dwt_modify32bitoffsetreg>
 800612c:	e7f2      	b.n	8006114 <ull_writetxfctrl+0x2c>
 800612e:	bf00      	nop
 8006130:	fc00f400 	.word	0xfc00f400

08006134 <prs_sys_status_and_or>:
 8006134:	b500      	push	{lr}
 8006136:	b083      	sub	sp, #12
 8006138:	9200      	str	r2, [sp, #0]
 800613a:	460b      	mov	r3, r1
 800613c:	2200      	movs	r2, #0
 800613e:	2144      	movs	r1, #68	; 0x44
 8006140:	f7ff fe1a 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006144:	2000      	movs	r0, #0
 8006146:	b003      	add	sp, #12
 8006148:	f85d fb04 	ldr.w	pc, [sp], #4

0800614c <dwt_modify8bitoffsetreg>:
 800614c:	b500      	push	{lr}
 800614e:	b085      	sub	sp, #20
 8006150:	f88d 300c 	strb.w	r3, [sp, #12]
 8006154:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006158:	f88d 300d 	strb.w	r3, [sp, #13]
 800615c:	f248 0301 	movw	r3, #32769	; 0x8001
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	ab03      	add	r3, sp, #12
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	2302      	movs	r3, #2
 8006168:	b292      	uxth	r2, r2
 800616a:	f7fe fca4 	bl	8004ab6 <dwt_xfer3xxx>
 800616e:	b005      	add	sp, #20
 8006170:	f85d fb04 	ldr.w	pc, [sp], #4

08006174 <ull_configciadiag>:
 8006174:	b530      	push	{r4, r5, lr}
 8006176:	b083      	sub	sp, #12
 8006178:	4604      	mov	r4, r0
 800617a:	460d      	mov	r5, r1
 800617c:	f011 0f01 	tst.w	r1, #1
 8006180:	d015      	beq.n	80061ae <ull_configciadiag+0x3a>
 8006182:	2300      	movs	r3, #0
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	23ef      	movs	r3, #239	; 0xef
 8006188:	2202      	movs	r2, #2
 800618a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800618e:	f7ff ffdd 	bl	800614c <dwt_modify8bitoffsetreg>
 8006192:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006194:	761d      	strb	r5, [r3, #24]
 8006196:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006198:	7e1b      	ldrb	r3, [r3, #24]
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	d010      	beq.n	80061c0 <ull_configciadiag+0x4c>
 800619e:	086b      	lsrs	r3, r5, #1
 80061a0:	2200      	movs	r2, #0
 80061a2:	490e      	ldr	r1, [pc, #56]	; (80061dc <ull_configciadiag+0x68>)
 80061a4:	4620      	mov	r0, r4
 80061a6:	f7ff f902 	bl	80053ae <dwt_write8bitoffsetreg>
 80061aa:	b003      	add	sp, #12
 80061ac:	bd30      	pop	{r4, r5, pc}
 80061ae:	2310      	movs	r3, #16
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	23ff      	movs	r3, #255	; 0xff
 80061b4:	2202      	movs	r2, #2
 80061b6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80061ba:	f7ff ffc7 	bl	800614c <dwt_modify8bitoffsetreg>
 80061be:	e7e8      	b.n	8006192 <ull_configciadiag+0x1e>
 80061c0:	2301      	movs	r3, #1
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	23ff      	movs	r3, #255	; 0xff
 80061c6:	2200      	movs	r2, #0
 80061c8:	4904      	ldr	r1, [pc, #16]	; (80061dc <ull_configciadiag+0x68>)
 80061ca:	4620      	mov	r0, r4
 80061cc:	f7ff ffbe 	bl	800614c <dwt_modify8bitoffsetreg>
 80061d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80061d2:	7e13      	ldrb	r3, [r2, #24]
 80061d4:	f043 0302 	orr.w	r3, r3, #2
 80061d8:	7613      	strb	r3, [r2, #24]
 80061da:	e7e6      	b.n	80061aa <ull_configciadiag+0x36>
 80061dc:	00010028 	.word	0x00010028

080061e0 <ull_calcbandwidthadj>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	4604      	mov	r4, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	2101      	movs	r1, #1
 80061ea:	f7ff f963 	bl	80054b4 <ull_force_clocks>
 80061ee:	2100      	movs	r1, #0
 80061f0:	4620      	mov	r0, r4
 80061f2:	f7ff fe03 	bl	8005dfc <ull_enable_rf_tx>
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff fe34 	bl	8005e64 <ull_enable_rftx_blocks>
 80061fc:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8006200:	2200      	movs	r2, #0
 8006202:	4915      	ldr	r1, [pc, #84]	; (8006258 <ull_calcbandwidthadj+0x78>)
 8006204:	4620      	mov	r0, r4
 8006206:	f7ff f924 	bl	8005452 <dwt_write16bitoffsetreg>
 800620a:	2303      	movs	r3, #3
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	23ff      	movs	r3, #255	; 0xff
 8006210:	2200      	movs	r2, #0
 8006212:	4912      	ldr	r1, [pc, #72]	; (800625c <ull_calcbandwidthadj+0x7c>)
 8006214:	4620      	mov	r0, r4
 8006216:	f7ff ff99 	bl	800614c <dwt_modify8bitoffsetreg>
 800621a:	4e10      	ldr	r6, [pc, #64]	; (800625c <ull_calcbandwidthadj+0x7c>)
 800621c:	2500      	movs	r5, #0
 800621e:	462a      	mov	r2, r5
 8006220:	4631      	mov	r1, r6
 8006222:	4620      	mov	r0, r4
 8006224:	f7fe fcfc 	bl	8004c20 <dwt_read8bitoffsetreg>
 8006228:	f010 0f01 	tst.w	r0, #1
 800622c:	d1f7      	bne.n	800621e <ull_calcbandwidthadj+0x3e>
 800622e:	4620      	mov	r0, r4
 8006230:	f7ff fcae 	bl	8005b90 <ull_disable_rftx_blocks>
 8006234:	2100      	movs	r1, #0
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff fcb4 	bl	8005ba4 <ull_disable_rf_tx>
 800623c:	2105      	movs	r1, #5
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff f938 	bl	80054b4 <ull_force_clocks>
 8006244:	2200      	movs	r2, #0
 8006246:	4906      	ldr	r1, [pc, #24]	; (8006260 <ull_calcbandwidthadj+0x80>)
 8006248:	4620      	mov	r0, r4
 800624a:	f7fe fce9 	bl	8004c20 <dwt_read8bitoffsetreg>
 800624e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006252:	b002      	add	sp, #8
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	bf00      	nop
 8006258:	0008001c 	.word	0x0008001c
 800625c:	00080010 	.word	0x00080010
 8006260:	0007001c 	.word	0x0007001c

08006264 <ull_configuretxrf>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4605      	mov	r5, r0
 8006268:	460c      	mov	r4, r1
 800626a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800626e:	b149      	cbz	r1, 8006284 <ull_configuretxrf+0x20>
 8006270:	f7ff ffb6 	bl	80061e0 <ull_calcbandwidthadj>
 8006274:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8006278:	2200      	movs	r2, #0
 800627a:	4905      	ldr	r1, [pc, #20]	; (8006290 <ull_configuretxrf+0x2c>)
 800627c:	4628      	mov	r0, r5
 800627e:	f7ff f9e9 	bl	8005654 <dwt_write32bitoffsetreg>
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	7823      	ldrb	r3, [r4, #0]
 8006286:	2200      	movs	r2, #0
 8006288:	4902      	ldr	r1, [pc, #8]	; (8006294 <ull_configuretxrf+0x30>)
 800628a:	f7ff f890 	bl	80053ae <dwt_write8bitoffsetreg>
 800628e:	e7f1      	b.n	8006274 <ull_configuretxrf+0x10>
 8006290:	0001000c 	.word	0x0001000c
 8006294:	0007001c 	.word	0x0007001c

08006298 <ull_repeated_frames>:
 8006298:	b530      	push	{r4, r5, lr}
 800629a:	b083      	sub	sp, #12
 800629c:	4604      	mov	r4, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	2310      	movs	r3, #16
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	23ff      	movs	r3, #255	; 0xff
 80062a6:	2200      	movs	r2, #0
 80062a8:	4906      	ldr	r1, [pc, #24]	; (80062c4 <ull_repeated_frames+0x2c>)
 80062aa:	f7ff ff4f 	bl	800614c <dwt_modify8bitoffsetreg>
 80062ae:	462b      	mov	r3, r5
 80062b0:	2d02      	cmp	r5, #2
 80062b2:	bf38      	it	cc
 80062b4:	2302      	movcc	r3, #2
 80062b6:	2200      	movs	r2, #0
 80062b8:	212c      	movs	r1, #44	; 0x2c
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff f9ca 	bl	8005654 <dwt_write32bitoffsetreg>
 80062c0:	b003      	add	sp, #12
 80062c2:	bd30      	pop	{r4, r5, pc}
 80062c4:	000f0024 	.word	0x000f0024

080062c8 <ull_setdwstate>:
 80062c8:	b530      	push	{r4, r5, lr}
 80062ca:	b083      	sub	sp, #12
 80062cc:	4604      	mov	r4, r0
 80062ce:	2901      	cmp	r1, #1
 80062d0:	d01d      	beq.n	800630e <ull_setdwstate+0x46>
 80062d2:	2902      	cmp	r1, #2
 80062d4:	d030      	beq.n	8006338 <ull_setdwstate+0x70>
 80062d6:	2301      	movs	r3, #1
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	23ff      	movs	r3, #255	; 0xff
 80062dc:	2200      	movs	r2, #0
 80062de:	4926      	ldr	r1, [pc, #152]	; (8006378 <ull_setdwstate+0xb0>)
 80062e0:	f7ff ff34 	bl	800614c <dwt_modify8bitoffsetreg>
 80062e4:	4d25      	ldr	r5, [pc, #148]	; (800637c <ull_setdwstate+0xb4>)
 80062e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80062f0:	2200      	movs	r2, #0
 80062f2:	4629      	mov	r1, r5
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff fd3f 	bl	8005d78 <dwt_modify32bitoffsetreg>
 80062fa:	2300      	movs	r3, #0
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	237f      	movs	r3, #127	; 0x7f
 8006300:	2202      	movs	r2, #2
 8006302:	4629      	mov	r1, r5
 8006304:	4620      	mov	r0, r4
 8006306:	f7ff ff21 	bl	800614c <dwt_modify8bitoffsetreg>
 800630a:	b003      	add	sp, #12
 800630c:	bd30      	pop	{r4, r5, pc}
 800630e:	2105      	movs	r1, #5
 8006310:	f7ff f8d0 	bl	80054b4 <ull_force_clocks>
 8006314:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800631e:	2200      	movs	r2, #0
 8006320:	4917      	ldr	r1, [pc, #92]	; (8006380 <ull_setdwstate+0xb8>)
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff fd28 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006328:	2201      	movs	r2, #1
 800632a:	9200      	str	r2, [sp, #0]
 800632c:	23ff      	movs	r3, #255	; 0xff
 800632e:	4913      	ldr	r1, [pc, #76]	; (800637c <ull_setdwstate+0xb4>)
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff ff0b 	bl	800614c <dwt_modify8bitoffsetreg>
 8006336:	e7e8      	b.n	800630a <ull_setdwstate+0x42>
 8006338:	2303      	movs	r3, #3
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	23ff      	movs	r3, #255	; 0xff
 800633e:	2200      	movs	r2, #0
 8006340:	490d      	ldr	r1, [pc, #52]	; (8006378 <ull_setdwstate+0xb0>)
 8006342:	f7ff ff03 	bl	800614c <dwt_modify8bitoffsetreg>
 8006346:	4d0d      	ldr	r5, [pc, #52]	; (800637c <ull_setdwstate+0xb4>)
 8006348:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006352:	2200      	movs	r2, #0
 8006354:	4629      	mov	r1, r5
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff fd0e 	bl	8005d78 <dwt_modify32bitoffsetreg>
 800635c:	2300      	movs	r3, #0
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	237f      	movs	r3, #127	; 0x7f
 8006362:	2202      	movs	r2, #2
 8006364:	4629      	mov	r1, r5
 8006366:	4620      	mov	r0, r4
 8006368:	f7ff fef0 	bl	800614c <dwt_modify8bitoffsetreg>
 800636c:	2105      	movs	r1, #5
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff f8a0 	bl	80054b4 <ull_force_clocks>
 8006374:	e7c9      	b.n	800630a <ull_setdwstate+0x42>
 8006376:	bf00      	nop
 8006378:	00110004 	.word	0x00110004
 800637c:	00110008 	.word	0x00110008
 8006380:	00090008 	.word	0x00090008

08006384 <ull_configureframefilter>:
 8006384:	b530      	push	{r4, r5, lr}
 8006386:	b083      	sub	sp, #12
 8006388:	4605      	mov	r5, r0
 800638a:	2902      	cmp	r1, #2
 800638c:	d00e      	beq.n	80063ac <ull_configureframefilter+0x28>
 800638e:	2400      	movs	r4, #0
 8006390:	9400      	str	r4, [sp, #0]
 8006392:	23fe      	movs	r3, #254	; 0xfe
 8006394:	4622      	mov	r2, r4
 8006396:	2110      	movs	r1, #16
 8006398:	f7ff fed8 	bl	800614c <dwt_modify8bitoffsetreg>
 800639c:	4623      	mov	r3, r4
 800639e:	4622      	mov	r2, r4
 80063a0:	2114      	movs	r1, #20
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7ff f855 	bl	8005452 <dwt_write16bitoffsetreg>
 80063a8:	b003      	add	sp, #12
 80063aa:	bd30      	pop	{r4, r5, pc}
 80063ac:	4614      	mov	r4, r2
 80063ae:	2301      	movs	r3, #1
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	23ff      	movs	r3, #255	; 0xff
 80063b4:	2200      	movs	r2, #0
 80063b6:	2110      	movs	r1, #16
 80063b8:	f7ff fec8 	bl	800614c <dwt_modify8bitoffsetreg>
 80063bc:	4623      	mov	r3, r4
 80063be:	2200      	movs	r2, #0
 80063c0:	2114      	movs	r1, #20
 80063c2:	4628      	mov	r0, r5
 80063c4:	f7ff f845 	bl	8005452 <dwt_write16bitoffsetreg>
 80063c8:	e7ee      	b.n	80063a8 <ull_configureframefilter+0x24>
	...

080063cc <ull_run_pgfcal>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	4605      	mov	r5, r0
 80063d4:	4c29      	ldr	r4, [pc, #164]	; (800647c <ull_run_pgfcal+0xb0>)
 80063d6:	4b2a      	ldr	r3, [pc, #168]	; (8006480 <ull_run_pgfcal+0xb4>)
 80063d8:	2200      	movs	r2, #0
 80063da:	4621      	mov	r1, r4
 80063dc:	f7ff f93a 	bl	8005654 <dwt_write32bitoffsetreg>
 80063e0:	2310      	movs	r3, #16
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	23ff      	movs	r3, #255	; 0xff
 80063e6:	2200      	movs	r2, #0
 80063e8:	4621      	mov	r1, r4
 80063ea:	4628      	mov	r0, r5
 80063ec:	f7ff feae 	bl	800614c <dwt_modify8bitoffsetreg>
 80063f0:	2403      	movs	r4, #3
 80063f2:	f04f 0814 	mov.w	r8, #20
 80063f6:	4f23      	ldr	r7, [pc, #140]	; (8006484 <ull_run_pgfcal+0xb8>)
 80063f8:	2600      	movs	r6, #0
 80063fa:	4640      	mov	r0, r8
 80063fc:	f7fa fa31 	bl	8000862 <deca_usleep>
 8006400:	4632      	mov	r2, r6
 8006402:	4639      	mov	r1, r7
 8006404:	4628      	mov	r0, r5
 8006406:	f7fe fc0b 	bl	8004c20 <dwt_read8bitoffsetreg>
 800640a:	2801      	cmp	r0, #1
 800640c:	d034      	beq.n	8006478 <ull_run_pgfcal+0xac>
 800640e:	1e63      	subs	r3, r4, #1
 8006410:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8006414:	d1f1      	bne.n	80063fa <ull_run_pgfcal+0x2e>
 8006416:	f06f 0402 	mvn.w	r4, #2
 800641a:	4e18      	ldr	r6, [pc, #96]	; (800647c <ull_run_pgfcal+0xb0>)
 800641c:	2300      	movs	r3, #0
 800641e:	461a      	mov	r2, r3
 8006420:	4631      	mov	r1, r6
 8006422:	4628      	mov	r0, r5
 8006424:	f7fe ffc3 	bl	80053ae <dwt_write8bitoffsetreg>
 8006428:	2301      	movs	r3, #1
 800642a:	2200      	movs	r2, #0
 800642c:	4915      	ldr	r1, [pc, #84]	; (8006484 <ull_run_pgfcal+0xb8>)
 800642e:	4628      	mov	r0, r5
 8006430:	f7fe ffbd 	bl	80053ae <dwt_write8bitoffsetreg>
 8006434:	2301      	movs	r3, #1
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	23ff      	movs	r3, #255	; 0xff
 800643a:	2202      	movs	r2, #2
 800643c:	4631      	mov	r1, r6
 800643e:	4628      	mov	r0, r5
 8006440:	f7ff fe84 	bl	800614c <dwt_modify8bitoffsetreg>
 8006444:	2200      	movs	r2, #0
 8006446:	4910      	ldr	r1, [pc, #64]	; (8006488 <ull_run_pgfcal+0xbc>)
 8006448:	4628      	mov	r0, r5
 800644a:	f7fe fbc1 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800644e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006452:	4298      	cmp	r0, r3
 8006454:	bf08      	it	eq
 8006456:	f06f 0403 	mvneq.w	r4, #3
 800645a:	2200      	movs	r2, #0
 800645c:	490b      	ldr	r1, [pc, #44]	; (800648c <ull_run_pgfcal+0xc0>)
 800645e:	4628      	mov	r0, r5
 8006460:	f7fe fbb6 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8006464:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006468:	4298      	cmp	r0, r3
 800646a:	bf14      	ite	ne
 800646c:	4620      	movne	r0, r4
 800646e:	f06f 0004 	mvneq.w	r0, #4
 8006472:	b002      	add	sp, #8
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006478:	2400      	movs	r4, #0
 800647a:	e7ce      	b.n	800641a <ull_run_pgfcal+0x4e>
 800647c:	0004000c 	.word	0x0004000c
 8006480:	00020001 	.word	0x00020001
 8006484:	00040020 	.word	0x00040020
 8006488:	00040014 	.word	0x00040014
 800648c:	0004001c 	.word	0x0004001c

08006490 <prs_ack_enable>:
 8006490:	b500      	push	{lr}
 8006492:	b083      	sub	sp, #12
 8006494:	2900      	cmp	r1, #0
 8006496:	bf0b      	itete	eq
 8006498:	23ff      	moveq	r3, #255	; 0xff
 800649a:	23f7      	movne	r3, #247	; 0xf7
 800649c:	2200      	moveq	r2, #0
 800649e:	2208      	movne	r2, #8
 80064a0:	9200      	str	r2, [sp, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	2110      	movs	r1, #16
 80064a6:	f7ff fe51 	bl	800614c <dwt_modify8bitoffsetreg>
 80064aa:	b003      	add	sp, #12
 80064ac:	f85d fb04 	ldr.w	pc, [sp], #4

080064b0 <dwt_modify16bitoffsetreg>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80064b8:	f88d 300c 	strb.w	r3, [sp, #12]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	f88d 300d 	strb.w	r3, [sp, #13]
 80064c2:	f88d 400e 	strb.w	r4, [sp, #14]
 80064c6:	0a24      	lsrs	r4, r4, #8
 80064c8:	f88d 400f 	strb.w	r4, [sp, #15]
 80064cc:	f248 0302 	movw	r3, #32770	; 0x8002
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	ab03      	add	r3, sp, #12
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2304      	movs	r3, #4
 80064d8:	b292      	uxth	r2, r2
 80064da:	f7fe faec 	bl	8004ab6 <dwt_xfer3xxx>
 80064de:	b004      	add	sp, #16
 80064e0:	bd10      	pop	{r4, pc}
	...

080064e4 <_dwt_prog_ldo_and_bias_tune>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	4604      	mov	r4, r0
 80064ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064f4:	2200      	movs	r2, #0
 80064f6:	4907      	ldr	r1, [pc, #28]	; (8006514 <_dwt_prog_ldo_and_bias_tune+0x30>)
 80064f8:	f7ff ffda 	bl	80064b0 <dwt_modify16bitoffsetreg>
 80064fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064fe:	7a1b      	ldrb	r3, [r3, #8]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006506:	2200      	movs	r2, #0
 8006508:	4903      	ldr	r1, [pc, #12]	; (8006518 <_dwt_prog_ldo_and_bias_tune+0x34>)
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff ffd0 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006510:	b002      	add	sp, #8
 8006512:	bd10      	pop	{r4, pc}
 8006514:	000b0008 	.word	0x000b0008
 8006518:	0011001f 	.word	0x0011001f

0800651c <ull_setleds>:
 800651c:	b530      	push	{r4, r5, lr}
 800651e:	b083      	sub	sp, #12
 8006520:	4604      	mov	r4, r0
 8006522:	f011 0f01 	tst.w	r1, #1
 8006526:	d01f      	beq.n	8006568 <ull_setleds+0x4c>
 8006528:	460d      	mov	r5, r1
 800652a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8006534:	2200      	movs	r2, #0
 8006536:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800653a:	f7ff fc1d 	bl	8005d78 <dwt_modify32bitoffsetreg>
 800653e:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006548:	2200      	movs	r2, #0
 800654a:	4918      	ldr	r1, [pc, #96]	; (80065ac <ull_setleds+0x90>)
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff fc13 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006552:	f015 0f02 	tst.w	r5, #2
 8006556:	d11a      	bne.n	800658e <ull_setleds+0x72>
 8006558:	f44f 7388 	mov.w	r3, #272	; 0x110
 800655c:	2200      	movs	r2, #0
 800655e:	4914      	ldr	r1, [pc, #80]	; (80065b0 <ull_setleds+0x94>)
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff f877 	bl	8005654 <dwt_write32bitoffsetreg>
 8006566:	e010      	b.n	800658a <ull_setleds+0x6e>
 8006568:	2500      	movs	r5, #0
 800656a:	9500      	str	r5, [sp, #0]
 800656c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8006570:	462a      	mov	r2, r5
 8006572:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006576:	f7ff fbff 	bl	8005d78 <dwt_modify32bitoffsetreg>
 800657a:	9500      	str	r5, [sp, #0]
 800657c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8006580:	462a      	mov	r2, r5
 8006582:	490b      	ldr	r1, [pc, #44]	; (80065b0 <ull_setleds+0x94>)
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff ff93 	bl	80064b0 <dwt_modify16bitoffsetreg>
 800658a:	b003      	add	sp, #12
 800658c:	bd30      	pop	{r4, r5, pc}
 800658e:	4d08      	ldr	r5, [pc, #32]	; (80065b0 <ull_setleds+0x94>)
 8006590:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <ull_setleds+0x98>)
 8006592:	2200      	movs	r2, #0
 8006594:	4629      	mov	r1, r5
 8006596:	4620      	mov	r0, r4
 8006598:	f7ff f85c 	bl	8005654 <dwt_write32bitoffsetreg>
 800659c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80065a0:	2200      	movs	r2, #0
 80065a2:	4629      	mov	r1, r5
 80065a4:	4620      	mov	r0, r4
 80065a6:	f7ff f855 	bl	8005654 <dwt_write32bitoffsetreg>
 80065aa:	e7ee      	b.n	800658a <ull_setleds+0x6e>
 80065ac:	00110004 	.word	0x00110004
 80065b0:	00110016 	.word	0x00110016
 80065b4:	000f0110 	.word	0x000f0110

080065b8 <ull_pgf_cal>:
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b083      	sub	sp, #12
 80065bc:	4604      	mov	r4, r0
 80065be:	2901      	cmp	r1, #1
 80065c0:	d009      	beq.n	80065d6 <ull_pgf_cal+0x1e>
 80065c2:	2014      	movs	r0, #20
 80065c4:	f7fa f94d 	bl	8000862 <deca_usleep>
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7ff feff 	bl	80063cc <ull_run_pgfcal>
 80065ce:	4605      	mov	r5, r0
 80065d0:	4628      	mov	r0, r5
 80065d2:	b003      	add	sp, #12
 80065d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d6:	4e0f      	ldr	r6, [pc, #60]	; (8006614 <ull_pgf_cal+0x5c>)
 80065d8:	2200      	movs	r2, #0
 80065da:	4631      	mov	r1, r6
 80065dc:	f7fe fb0e 	bl	8004bfc <dwt_read16bitoffsetreg>
 80065e0:	4607      	mov	r7, r0
 80065e2:	f240 1305 	movw	r3, #261	; 0x105
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065ec:	2200      	movs	r2, #0
 80065ee:	4631      	mov	r1, r6
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff ff5d 	bl	80064b0 <dwt_modify16bitoffsetreg>
 80065f6:	2014      	movs	r0, #20
 80065f8:	f7fa f933 	bl	8000862 <deca_usleep>
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff fee5 	bl	80063cc <ull_run_pgfcal>
 8006602:	4605      	mov	r5, r0
 8006604:	2200      	movs	r2, #0
 8006606:	9200      	str	r2, [sp, #0]
 8006608:	463b      	mov	r3, r7
 800660a:	4631      	mov	r1, r6
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff ff4f 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006612:	e7dd      	b.n	80065d0 <ull_pgf_cal+0x18>
 8006614:	00070048 	.word	0x00070048

08006618 <ull_setgpiovalue>:
 8006618:	b500      	push	{lr}
 800661a:	b083      	sub	sp, #12
 800661c:	2a01      	cmp	r2, #1
 800661e:	d009      	beq.n	8006634 <ull_setgpiovalue+0x1c>
 8006620:	43cb      	mvns	r3, r1
 8006622:	2200      	movs	r2, #0
 8006624:	9200      	str	r2, [sp, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	4906      	ldr	r1, [pc, #24]	; (8006644 <ull_setgpiovalue+0x2c>)
 800662a:	f7ff ff41 	bl	80064b0 <dwt_modify16bitoffsetreg>
 800662e:	b003      	add	sp, #12
 8006630:	f85d fb04 	ldr.w	pc, [sp], #4
 8006634:	9100      	str	r1, [sp, #0]
 8006636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800663a:	2200      	movs	r2, #0
 800663c:	4901      	ldr	r1, [pc, #4]	; (8006644 <ull_setgpiovalue+0x2c>)
 800663e:	f7ff ff37 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006642:	e7f4      	b.n	800662e <ull_setgpiovalue+0x16>
 8006644:	0005000c 	.word	0x0005000c

08006648 <ull_readaccdata>:
 8006648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664a:	b083      	sub	sp, #12
 800664c:	4604      	mov	r4, r0
 800664e:	460f      	mov	r7, r1
 8006650:	4616      	mov	r6, r2
 8006652:	461d      	mov	r5, r3
 8006654:	f248 0340 	movw	r3, #32832	; 0x8040
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800665e:	2200      	movs	r2, #0
 8006660:	4918      	ldr	r1, [pc, #96]	; (80066c4 <ull_readaccdata+0x7c>)
 8006662:	f7ff ff25 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006666:	19aa      	adds	r2, r5, r6
 8006668:	f243 0301 	movw	r3, #12289	; 0x3001
 800666c:	429a      	cmp	r2, r3
 800666e:	dc15      	bgt.n	800669c <ull_readaccdata+0x54>
 8006670:	2d7f      	cmp	r5, #127	; 0x7f
 8006672:	d91d      	bls.n	80066b0 <ull_readaccdata+0x68>
 8006674:	2315      	movs	r3, #21
 8006676:	2200      	movs	r2, #0
 8006678:	4913      	ldr	r1, [pc, #76]	; (80066c8 <ull_readaccdata+0x80>)
 800667a:	4620      	mov	r0, r4
 800667c:	f7fe ffea 	bl	8005654 <dwt_write32bitoffsetreg>
 8006680:	462b      	mov	r3, r5
 8006682:	2200      	movs	r2, #0
 8006684:	4911      	ldr	r1, [pc, #68]	; (80066cc <ull_readaccdata+0x84>)
 8006686:	4620      	mov	r0, r4
 8006688:	f7fe ffe4 	bl	8005654 <dwt_write32bitoffsetreg>
 800668c:	9700      	str	r7, [sp, #0]
 800668e:	4633      	mov	r3, r6
 8006690:	2200      	movs	r2, #0
 8006692:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006696:	4620      	mov	r0, r4
 8006698:	f7fe fa90 	bl	8004bbc <dwt_readfromdevice>
 800669c:	2200      	movs	r2, #0
 800669e:	9200      	str	r2, [sp, #0]
 80066a0:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80066a4:	4907      	ldr	r1, [pc, #28]	; (80066c4 <ull_readaccdata+0x7c>)
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff ff02 	bl	80064b0 <dwt_modify16bitoffsetreg>
 80066ac:	b003      	add	sp, #12
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	9700      	str	r7, [sp, #0]
 80066b2:	4633      	mov	r3, r6
 80066b4:	462a      	mov	r2, r5
 80066b6:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7fe fa7e 	bl	8004bbc <dwt_readfromdevice>
 80066c0:	e7ec      	b.n	800669c <ull_readaccdata+0x54>
 80066c2:	bf00      	nop
 80066c4:	00110004 	.word	0x00110004
 80066c8:	001f0004 	.word	0x001f0004
 80066cc:	001f0008 	.word	0x001f0008

080066d0 <ull_repeated_cw>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4606      	mov	r6, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	4615      	mov	r5, r2
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <ull_repeated_cw+0x44>)
 80066da:	2202      	movs	r2, #2
 80066dc:	490e      	ldr	r1, [pc, #56]	; (8006718 <ull_repeated_cw+0x48>)
 80066de:	f7fe ffb9 	bl	8005654 <dwt_write32bitoffsetreg>
 80066e2:	2d0f      	cmp	r5, #15
 80066e4:	bfa8      	it	ge
 80066e6:	250f      	movge	r5, #15
 80066e8:	1e63      	subs	r3, r4, #1
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	bf28      	it	cs
 80066ee:	2404      	movcs	r4, #4
 80066f0:	2310      	movs	r3, #16
 80066f2:	4123      	asrs	r3, r4
 80066f4:	2200      	movs	r2, #0
 80066f6:	4909      	ldr	r1, [pc, #36]	; (800671c <ull_repeated_cw+0x4c>)
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7fe ffab 	bl	8005654 <dwt_write32bitoffsetreg>
 80066fe:	1e63      	subs	r3, r4, #1
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	fa05 f303 	lsl.w	r3, r5, r3
 8006706:	2200      	movs	r2, #0
 8006708:	4905      	ldr	r1, [pc, #20]	; (8006720 <ull_repeated_cw+0x50>)
 800670a:	4630      	mov	r0, r6
 800670c:	f7fe ffa2 	bl	8005654 <dwt_write32bitoffsetreg>
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	bf00      	nop
 8006714:	00d20874 	.word	0x00d20874
 8006718:	00110010 	.word	0x00110010
 800671c:	00070028 	.word	0x00070028
 8006720:	00080018 	.word	0x00080018

08006724 <ull_configure>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	b083      	sub	sp, #12
 800672a:	4604      	mov	r4, r0
 800672c:	460d      	mov	r5, r1
 800672e:	f891 9000 	ldrb.w	r9, [r1]
 8006732:	790b      	ldrb	r3, [r1, #4]
 8006734:	2b18      	cmp	r3, #24
 8006736:	d814      	bhi.n	8006762 <ull_configure+0x3e>
 8006738:	78cf      	ldrb	r7, [r1, #3]
 800673a:	2f18      	cmp	r7, #24
 800673c:	bf94      	ite	ls
 800673e:	2700      	movls	r7, #0
 8006740:	2701      	movhi	r7, #1
 8006742:	b2ff      	uxtb	r7, r7
 8006744:	79eb      	ldrb	r3, [r5, #7]
 8006746:	2b01      	cmp	r3, #1
 8006748:	bf0c      	ite	eq
 800674a:	2110      	moveq	r1, #16
 800674c:	2100      	movne	r1, #0
 800674e:	786b      	ldrb	r3, [r5, #1]
 8006750:	3b01      	subs	r3, #1
 8006752:	2b06      	cmp	r3, #6
 8006754:	d810      	bhi.n	8006778 <ull_configure+0x54>
 8006756:	e8df f003 	tbb	[pc, r3]
 800675a:	0f06      	.short	0x0f06
 800675c:	0f0c120f 	.word	0x0f0c120f
 8006760:	09          	.byte	0x09
 8006761:	00          	.byte	0x00
 8006762:	2701      	movs	r7, #1
 8006764:	e7ed      	b.n	8006742 <ull_configure+0x1e>
 8006766:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800676a:	e00a      	b.n	8006782 <ull_configure+0x5e>
 800676c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8006770:	e007      	b.n	8006782 <ull_configure+0x5e>
 8006772:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8006776:	e004      	b.n	8006782 <ull_configure+0x5e>
 8006778:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800677c:	e001      	b.n	8006782 <ull_configure+0x5e>
 800677e:	f04f 0a20 	mov.w	sl, #32
 8006782:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006784:	8a53      	ldrh	r3, [r2, #18]
 8006786:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800678a:	8253      	strh	r3, [r2, #18]
 800678c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800678e:	79ea      	ldrb	r2, [r5, #7]
 8006790:	731a      	strb	r2, [r3, #12]
 8006792:	7b2e      	ldrb	r6, [r5, #12]
 8006794:	1cb3      	adds	r3, r6, #2
 8006796:	2601      	movs	r6, #1
 8006798:	409e      	lsls	r6, r3
 800679a:	fa1f f886 	uxth.w	r8, r6
 800679e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80067a0:	4bc7      	ldr	r3, [pc, #796]	; (8006ac0 <ull_configure+0x39c>)
 80067a2:	fb03 f308 	mul.w	r3, r3, r8
 80067a6:	0bdb      	lsrs	r3, r3, #15
 80067a8:	8293      	strh	r3, [r2, #20]
 80067aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80067ac:	7aea      	ldrb	r2, [r5, #11]
 80067ae:	75da      	strb	r2, [r3, #23]
 80067b0:	7a2b      	ldrb	r3, [r5, #8]
 80067b2:	015b      	lsls	r3, r3, #5
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	7b6a      	ldrb	r2, [r5, #13]
 80067ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067be:	7aea      	ldrb	r2, [r5, #11]
 80067c0:	0312      	lsls	r2, r2, #12
 80067c2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80067c6:	4313      	orrs	r3, r2
 80067c8:	430b      	orrs	r3, r1
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	4bbd      	ldr	r3, [pc, #756]	; (8006ac4 <ull_configure+0x3a0>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	2110      	movs	r1, #16
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7ff fad0 	bl	8005d78 <dwt_modify32bitoffsetreg>
 80067d8:	2f00      	cmp	r7, #0
 80067da:	f040 80f6 	bne.w	80069ca <ull_configure+0x2a6>
 80067de:	7aeb      	ldrb	r3, [r5, #11]
 80067e0:	b1f3      	cbz	r3, 8006820 <ull_configure+0xfc>
 80067e2:	7b6b      	ldrb	r3, [r5, #13]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	f240 811c 	bls.w	8006a22 <ull_configure+0x2fe>
 80067ea:	7b2a      	ldrb	r2, [r5, #12]
 80067ec:	4bb6      	ldr	r3, [pc, #728]	; (8006ac8 <ull_configure+0x3a4>)
 80067ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80067f2:	0112      	lsls	r2, r2, #4
 80067f4:	0ad3      	lsrs	r3, r2, #11
 80067f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80067fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067fe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006802:	bf28      	it	cs
 8006804:	3301      	addcs	r3, #1
 8006806:	b29b      	uxth	r3, r3
 8006808:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800680c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	f64f 7380 	movw	r3, #65408	; 0xff80
 8006816:	2202      	movs	r2, #2
 8006818:	49ac      	ldr	r1, [pc, #688]	; (8006acc <ull_configure+0x3a8>)
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff fe48 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006820:	2394      	movs	r3, #148	; 0x94
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4baa      	ldr	r3, [pc, #680]	; (8006ad0 <ull_configure+0x3ac>)
 8006826:	2200      	movs	r2, #0
 8006828:	49aa      	ldr	r1, [pc, #680]	; (8006ad4 <ull_configure+0x3b0>)
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff faa4 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006830:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8006834:	f340 8108 	ble.w	8006a48 <ull_configure+0x324>
 8006838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800683a:	8a53      	ldrh	r3, [r2, #18]
 800683c:	f043 0320 	orr.w	r3, r3, #32
 8006840:	8253      	strh	r3, [r2, #18]
 8006842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800684c:	2200      	movs	r2, #0
 800684e:	49a2      	ldr	r1, [pc, #648]	; (8006ad8 <ull_configure+0x3b4>)
 8006850:	4620      	mov	r0, r4
 8006852:	f7ff fe2d 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006856:	7b6b      	ldrb	r3, [r5, #13]
 8006858:	2b01      	cmp	r3, #1
 800685a:	f000 8100 	beq.w	8006a5e <ull_configure+0x33a>
 800685e:	78ab      	ldrb	r3, [r5, #2]
 8006860:	f043 0310 	orr.w	r3, r3, #16
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	23fc      	movs	r3, #252	; 0xfc
 8006868:	2200      	movs	r2, #0
 800686a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fc6c 	bl	800614c <dwt_modify8bitoffsetreg>
 8006874:	1e73      	subs	r3, r6, #1
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2200      	movs	r2, #0
 800687a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800687e:	4620      	mov	r0, r4
 8006880:	f7fe fd95 	bl	80053ae <dwt_write8bitoffsetreg>
 8006884:	786b      	ldrb	r3, [r5, #1]
 8006886:	2b07      	cmp	r3, #7
 8006888:	bf0c      	ite	eq
 800688a:	2308      	moveq	r3, #8
 800688c:	2300      	movne	r3, #0
 800688e:	2201      	movs	r2, #1
 8006890:	2128      	movs	r1, #40	; 0x28
 8006892:	4620      	mov	r0, r4
 8006894:	f7fe fd8b 	bl	80053ae <dwt_write8bitoffsetreg>
 8006898:	4b90      	ldr	r3, [pc, #576]	; (8006adc <ull_configure+0x3b8>)
 800689a:	2200      	movs	r2, #0
 800689c:	4990      	ldr	r1, [pc, #576]	; (8006ae0 <ull_configure+0x3bc>)
 800689e:	4620      	mov	r0, r4
 80068a0:	f7fe fed8 	bl	8005654 <dwt_write32bitoffsetreg>
 80068a4:	2200      	movs	r2, #0
 80068a6:	498f      	ldr	r1, [pc, #572]	; (8006ae4 <ull_configure+0x3c0>)
 80068a8:	4620      	mov	r0, r4
 80068aa:	f7fe f991 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80068ae:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80068b2:	f020 001f 	bic.w	r0, r0, #31
 80068b6:	f1b9 0f09 	cmp.w	r9, #9
 80068ba:	bf08      	it	eq
 80068bc:	f040 0001 	orreq.w	r0, r0, #1
 80068c0:	792a      	ldrb	r2, [r5, #4]
 80068c2:	0212      	lsls	r2, r2, #8
 80068c4:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80068c8:	78eb      	ldrb	r3, [r5, #3]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	431a      	orrs	r2, r3
 80068d0:	796b      	ldrb	r3, [r5, #5]
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	f003 0306 	and.w	r3, r3, #6
 80068d8:	4313      	orrs	r3, r2
 80068da:	4303      	orrs	r3, r0
 80068dc:	2200      	movs	r2, #0
 80068de:	4981      	ldr	r1, [pc, #516]	; (8006ae4 <ull_configure+0x3c0>)
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7fe feb7 	bl	8005654 <dwt_write32bitoffsetreg>
 80068e6:	79aa      	ldrb	r2, [r5, #6]
 80068e8:	786b      	ldrb	r3, [r5, #1]
 80068ea:	031b      	lsls	r3, r3, #12
 80068ec:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80068f6:	2200      	movs	r2, #0
 80068f8:	2124      	movs	r1, #36	; 0x24
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff fa3c 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006900:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8006904:	b923      	cbnz	r3, 8006910 <ull_configure+0x1ec>
 8006906:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800690a:	726b      	strb	r3, [r5, #9]
 800690c:	2300      	movs	r3, #0
 800690e:	72ab      	strb	r3, [r5, #10]
 8006910:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8006914:	2202      	movs	r2, #2
 8006916:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800691a:	4620      	mov	r0, r4
 800691c:	f7fe fd99 	bl	8005452 <dwt_write16bitoffsetreg>
 8006920:	2202      	movs	r2, #2
 8006922:	4971      	ldr	r1, [pc, #452]	; (8006ae8 <ull_configure+0x3c4>)
 8006924:	4620      	mov	r0, r4
 8006926:	f7fe f97b 	bl	8004c20 <dwt_read8bitoffsetreg>
 800692a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800692c:	7c1b      	ldrb	r3, [r3, #16]
 800692e:	454b      	cmp	r3, r9
 8006930:	f000 809f 	beq.w	8006a72 <ull_configure+0x34e>
 8006934:	2803      	cmp	r0, #3
 8006936:	f000 80a0 	beq.w	8006a7a <ull_configure+0x356>
 800693a:	f1b9 0f09 	cmp.w	r9, #9
 800693e:	f000 80a1 	beq.w	8006a84 <ull_configure+0x360>
 8006942:	4b6a      	ldr	r3, [pc, #424]	; (8006aec <ull_configure+0x3c8>)
 8006944:	2200      	movs	r2, #0
 8006946:	496a      	ldr	r1, [pc, #424]	; (8006af0 <ull_configure+0x3cc>)
 8006948:	4620      	mov	r0, r4
 800694a:	f7fe fe83 	bl	8005654 <dwt_write32bitoffsetreg>
 800694e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8006952:	2200      	movs	r2, #0
 8006954:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8006958:	4620      	mov	r0, r4
 800695a:	f7fe fd7a 	bl	8005452 <dwt_write16bitoffsetreg>
 800695e:	2314      	movs	r3, #20
 8006960:	2201      	movs	r2, #1
 8006962:	4964      	ldr	r1, [pc, #400]	; (8006af4 <ull_configure+0x3d0>)
 8006964:	4620      	mov	r0, r4
 8006966:	f7fe fd22 	bl	80053ae <dwt_write8bitoffsetreg>
 800696a:	230e      	movs	r3, #14
 800696c:	2202      	movs	r2, #2
 800696e:	4962      	ldr	r1, [pc, #392]	; (8006af8 <ull_configure+0x3d4>)
 8006970:	4620      	mov	r0, r4
 8006972:	f7fe fd1c 	bl	80053ae <dwt_write8bitoffsetreg>
 8006976:	2381      	movs	r3, #129	; 0x81
 8006978:	2200      	movs	r2, #0
 800697a:	4960      	ldr	r1, [pc, #384]	; (8006afc <ull_configure+0x3d8>)
 800697c:	4620      	mov	r0, r4
 800697e:	f7fe fd16 	bl	80053ae <dwt_write8bitoffsetreg>
 8006982:	2302      	movs	r3, #2
 8006984:	2200      	movs	r2, #0
 8006986:	2144      	movs	r1, #68	; 0x44
 8006988:	4620      	mov	r0, r4
 800698a:	f7fe fd10 	bl	80053ae <dwt_write8bitoffsetreg>
 800698e:	2101      	movs	r1, #1
 8006990:	4620      	mov	r0, r4
 8006992:	f7ff fc99 	bl	80062c8 <ull_setdwstate>
 8006996:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800699a:	f04f 0814 	mov.w	r8, #20
 800699e:	2700      	movs	r7, #0
 80069a0:	2644      	movs	r6, #68	; 0x44
 80069a2:	4640      	mov	r0, r8
 80069a4:	f7f9 ff5d 	bl	8000862 <deca_usleep>
 80069a8:	463a      	mov	r2, r7
 80069aa:	4631      	mov	r1, r6
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7fe f937 	bl	8004c20 <dwt_read8bitoffsetreg>
 80069b2:	f010 0f02 	tst.w	r0, #2
 80069b6:	f040 80ab 	bne.w	8006b10 <ull_configure+0x3ec>
 80069ba:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80069be:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80069c2:	d1ee      	bne.n	80069a2 <ull_configure+0x27e>
 80069c4:	f06f 0001 	mvn.w	r0, #1
 80069c8:	e0cf      	b.n	8006b6a <ull_configure+0x446>
 80069ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80069cc:	8a53      	ldrh	r3, [r2, #18]
 80069ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069d2:	8253      	strh	r3, [r2, #18]
 80069d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 80069de:	2200      	movs	r2, #0
 80069e0:	493d      	ldr	r1, [pc, #244]	; (8006ad8 <ull_configure+0x3b4>)
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff f9c8 	bl	8005d78 <dwt_modify32bitoffsetreg>
 80069e8:	f240 3306 	movw	r3, #774	; 0x306
 80069ec:	2200      	movs	r2, #0
 80069ee:	4944      	ldr	r1, [pc, #272]	; (8006b00 <ull_configure+0x3dc>)
 80069f0:	4620      	mov	r0, r4
 80069f2:	f7fe fe2f 	bl	8005654 <dwt_write32bitoffsetreg>
 80069f6:	2300      	movs	r3, #0
 80069f8:	461a      	mov	r2, r3
 80069fa:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 80069fe:	4620      	mov	r0, r4
 8006a00:	f7fe fe28 	bl	8005654 <dwt_write32bitoffsetreg>
 8006a04:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <ull_configure+0x3e0>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	4930      	ldr	r1, [pc, #192]	; (8006acc <ull_configure+0x3a8>)
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7fe fe22 	bl	8005654 <dwt_write32bitoffsetreg>
 8006a10:	239d      	movs	r3, #157	; 0x9d
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <ull_configure+0x3ac>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	492e      	ldr	r1, [pc, #184]	; (8006ad4 <ull_configure+0x3b0>)
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7ff f9ac 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006a20:	e719      	b.n	8006856 <ull_configure+0x132>
 8006a22:	7b2a      	ldrb	r2, [r5, #12]
 8006a24:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <ull_configure+0x3a4>)
 8006a26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a2a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8006a2e:	fb02 f203 	mul.w	r2, r2, r3
 8006a32:	0c93      	lsrs	r3, r2, #18
 8006a34:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8006a38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a3c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006a40:	bf28      	it	cs
 8006a42:	3301      	addcs	r3, #1
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	e6df      	b.n	8006808 <ull_configure+0xe4>
 8006a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8006a52:	2200      	movs	r2, #0
 8006a54:	4920      	ldr	r1, [pc, #128]	; (8006ad8 <ull_configure+0x3b4>)
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff fd2a 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006a5c:	e6fb      	b.n	8006856 <ull_configure+0x132>
 8006a5e:	78ab      	ldrb	r3, [r5, #2]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	23ec      	movs	r3, #236	; 0xec
 8006a64:	2200      	movs	r2, #0
 8006a66:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff fb6e 	bl	800614c <dwt_modify8bitoffsetreg>
 8006a70:	e700      	b.n	8006874 <ull_configure+0x150>
 8006a72:	2803      	cmp	r0, #3
 8006a74:	f47f af61 	bne.w	800693a <ull_configure+0x216>
 8006a78:	e04d      	b.n	8006b16 <ull_configure+0x3f2>
 8006a7a:	2102      	movs	r1, #2
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7ff fc23 	bl	80062c8 <ull_setdwstate>
 8006a82:	e75a      	b.n	800693a <ull_configure+0x216>
 8006a84:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <ull_configure+0x3e4>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	4919      	ldr	r1, [pc, #100]	; (8006af0 <ull_configure+0x3cc>)
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7fe fde2 	bl	8005654 <dwt_write32bitoffsetreg>
 8006a90:	f640 733c 	movw	r3, #3900	; 0xf3c
 8006a94:	2200      	movs	r2, #0
 8006a96:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7fe fcd9 	bl	8005452 <dwt_write16bitoffsetreg>
 8006aa0:	e75d      	b.n	800695e <ull_configure+0x23a>
 8006aa2:	fa4f f189 	sxtb.w	r1, r9
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7ff f98a 	bl	8005dc0 <_dwt_kick_dgc_on_wakeup>
 8006aac:	e040      	b.n	8006b30 <ull_configure+0x40c>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	9200      	str	r2, [sp, #0]
 8006ab2:	23fe      	movs	r3, #254	; 0xfe
 8006ab4:	4915      	ldr	r1, [pc, #84]	; (8006b0c <ull_configure+0x3e8>)
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff fb48 	bl	800614c <dwt_modify8bitoffsetreg>
 8006abc:	e042      	b.n	8006b44 <ull_configure+0x420>
 8006abe:	bf00      	nop
 8006ac0:	00026668 	.word	0x00026668
 8006ac4:	fffc4fcf 	.word	0xfffc4fcf
 8006ac8:	080122e4 	.word	0x080122e4
 8006acc:	000e0012 	.word	0x000e0012
 8006ad0:	bfffff00 	.word	0xbfffff00
 8006ad4:	000e0016 	.word	0x000e0016
 8006ad8:	000b0008 	.word	0x000b0008
 8006adc:	af5f35cc 	.word	0xaf5f35cc
 8006ae0:	0006000c 	.word	0x0006000c
 8006ae4:	00010014 	.word	0x00010014
 8006ae8:	000f0030 	.word	0x000f0030
 8006aec:	1c071134 	.word	0x1c071134
 8006af0:	0007001c 	.word	0x0007001c
 8006af4:	00070050 	.word	0x00070050
 8006af8:	00070018 	.word	0x00070018
 8006afc:	00090008 	.word	0x00090008
 8006b00:	000e000c 	.word	0x000e000c
 8006b04:	000c5a0a 	.word	0x000c5a0a
 8006b08:	1c010034 	.word	0x1c010034
 8006b0c:	00030018 	.word	0x00030018
 8006b10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b12:	f883 9010 	strb.w	r9, [r3, #16]
 8006b16:	792b      	ldrb	r3, [r5, #4]
 8006b18:	3b09      	subs	r3, #9
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b0f      	cmp	r3, #15
 8006b1e:	d8c6      	bhi.n	8006aae <ull_configure+0x38a>
 8006b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b22:	7a5b      	ldrb	r3, [r3, #9]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d0bc      	beq.n	8006aa2 <ull_configure+0x37e>
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f7fe ffae 	bl	8005a8c <ull_configmrxlut>
 8006b30:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	490c      	ldr	r1, [pc, #48]	; (8006b70 <ull_configure+0x44c>)
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f7ff fcb6 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006b44:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8006b48:	bfcc      	ite	gt
 8006b4a:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8006b4e:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4906      	ldr	r1, [pc, #24]	; (8006b74 <ull_configure+0x450>)
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff f90b 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006b62:	2101      	movs	r1, #1
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7ff fd27 	bl	80065b8 <ull_pgf_cal>
 8006b6a:	b003      	add	sp, #12
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b70:	00030018 	.word	0x00030018
 8006b74:	00060010 	.word	0x00060010

08006b78 <dwt_ioctl>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	b091      	sub	sp, #68	; 0x44
 8006b7e:	4606      	mov	r6, r0
 8006b80:	4615      	mov	r5, r2
 8006b82:	461c      	mov	r4, r3
 8006b84:	299c      	cmp	r1, #156	; 0x9c
 8006b86:	f200 809f 	bhi.w	8006cc8 <dwt_ioctl+0x150>
 8006b8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006b8e:	0a6d      	.short	0x0a6d
 8006b90:	00a30a78 	.word	0x00a30a78
 8006b94:	00be00a7 	.word	0x00be00a7
 8006b98:	018e0148 	.word	0x018e0148
 8006b9c:	0152016b 	.word	0x0152016b
 8006ba0:	01a9019e 	.word	0x01a9019e
 8006ba4:	01b901b1 	.word	0x01b901b1
 8006ba8:	01c901c1 	.word	0x01c901c1
 8006bac:	01d501d1 	.word	0x01d501d1
 8006bb0:	026e01dd 	.word	0x026e01dd
 8006bb4:	0281027c 	.word	0x0281027c
 8006bb8:	0290028b 	.word	0x0290028b
 8006bbc:	029e0295 	.word	0x029e0295
 8006bc0:	030902a3 	.word	0x030902a3
 8006bc4:	0326031b 	.word	0x0326031b
 8006bc8:	033b0331 	.word	0x033b0331
 8006bcc:	03690373 	.word	0x03690373
 8006bd0:	0345035f 	.word	0x0345035f
 8006bd4:	03c10352 	.word	0x03c10352
 8006bd8:	022b01f8 	.word	0x022b01f8
 8006bdc:	02410239 	.word	0x02410239
 8006be0:	09960255 	.word	0x09960255
 8006be4:	0382099b 	.word	0x0382099b
 8006be8:	03e303df 	.word	0x03e303df
 8006bec:	03f103ec 	.word	0x03f103ec
 8006bf0:	040503fb 	.word	0x040503fb
 8006bf4:	0437040d 	.word	0x0437040d
 8006bf8:	044e0443 	.word	0x044e0443
 8006bfc:	04590378 	.word	0x04590378
 8006c00:	04740462 	.word	0x04740462
 8006c04:	049e048d 	.word	0x049e048d
 8006c08:	04ea04e0 	.word	0x04ea04e0
 8006c0c:	051a050b 	.word	0x051a050b
 8006c10:	05230535 	.word	0x05230535
 8006c14:	05970551 	.word	0x05970551
 8006c18:	05cf05af 	.word	0x05cf05af
 8006c1c:	05f805e4 	.word	0x05f805e4
 8006c20:	061d0601 	.word	0x061d0601
 8006c24:	0773060a 	.word	0x0773060a
 8006c28:	07ed079f 	.word	0x07ed079f
 8006c2c:	07fe07f3 	.word	0x07fe07f3
 8006c30:	08370817 	.word	0x08370817
 8006c34:	084b0841 	.word	0x084b0841
 8006c38:	08820879 	.word	0x08820879
 8006c3c:	08910888 	.word	0x08910888
 8006c40:	08ab089e 	.word	0x08ab089e
 8006c44:	08be08b5 	.word	0x08be08b5
 8006c48:	08d208c7 	.word	0x08d208c7
 8006c4c:	08e308dd 	.word	0x08e308dd
 8006c50:	09110906 	.word	0x09110906
 8006c54:	0945091c 	.word	0x0945091c
 8006c58:	09720967 	.word	0x09720967
 8006c5c:	09a1098b 	.word	0x09a1098b
 8006c60:	0a200a16 	.word	0x0a200a16
 8006c64:	0a800a2b 	.word	0x0a800a2b
 8006c68:	0a620a35 	.word	0x0a620a35
 8006c6c:	09df0791 	.word	0x09df0791
 8006c70:	0aee0a00 	.word	0x0aee0a00
 8006c74:	0a8d0ae3 	.word	0x0a8d0ae3
 8006c78:	0aa30a98 	.word	0x0aa30a98
 8006c7c:	0ab90aae 	.word	0x0ab90aae
 8006c80:	0acf0ac4 	.word	0x0acf0ac4
 8006c84:	0bd80ad8 	.word	0x0bd80ad8
 8006c88:	0c4d0c12 	.word	0x0c4d0c12
 8006c8c:	0d290c70 	.word	0x0d290c70
 8006c90:	0b190d3e 	.word	0x0b190d3e
 8006c94:	009d009d 	.word	0x009d009d
 8006c98:	009d009d 	.word	0x009d009d
 8006c9c:	009d009d 	.word	0x009d009d
 8006ca0:	009d009d 	.word	0x009d009d
 8006ca4:	009d009d 	.word	0x009d009d
 8006ca8:	009d009d 	.word	0x009d009d
 8006cac:	009d009d 	.word	0x009d009d
 8006cb0:	009d009d 	.word	0x009d009d
 8006cb4:	009d009d 	.word	0x009d009d
 8006cb8:	0c87009d 	.word	0x0c87009d
 8006cbc:	0dce0ca5 	.word	0x0dce0ca5
 8006cc0:	0ce40cef 	.word	0x0ce40cef
 8006cc4:	0cfa0d03 	.word	0x0cfa0d03
 8006cc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ccc:	4628      	mov	r0, r5
 8006cce:	b011      	add	sp, #68	; 0x44
 8006cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	6843      	ldr	r3, [r0, #4]
 8006cd6:	4798      	blx	r3
 8006cd8:	2500      	movs	r5, #0
 8006cda:	e7f7      	b.n	8006ccc <dwt_ioctl+0x154>
 8006cdc:	2202      	movs	r2, #2
 8006cde:	49b7      	ldr	r1, [pc, #732]	; (8006fbc <dwt_ioctl+0x444>)
 8006ce0:	f7fd ff9e 	bl	8004c20 <dwt_read8bitoffsetreg>
 8006ce4:	2803      	cmp	r0, #3
 8006ce6:	d801      	bhi.n	8006cec <dwt_ioctl+0x174>
 8006ce8:	2500      	movs	r5, #0
 8006cea:	e7ef      	b.n	8006ccc <dwt_ioctl+0x154>
 8006cec:	f7f9 fd90 	bl	8000810 <decamutexon>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	9500      	str	r5, [sp, #0]
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	462a      	mov	r2, r5
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7fe fb4b 	bl	8005398 <dwt_writetodevice>
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7f9 fd95 	bl	8000832 <decamutexoff>
 8006d08:	e7e0      	b.n	8006ccc <dwt_ioctl+0x154>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	f001 8510 	beq.w	8008730 <dwt_ioctl+0x1bb8>
 8006d10:	7824      	ldrb	r4, [r4, #0]
 8006d12:	f014 0f1d 	tst.w	r4, #29
 8006d16:	d065      	beq.n	8006de4 <dwt_ioctl+0x26c>
 8006d18:	f014 0f01 	tst.w	r4, #1
 8006d1c:	d026      	beq.n	8006d6c <dwt_ioctl+0x1f4>
 8006d1e:	f014 0f02 	tst.w	r4, #2
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	9200      	str	r2, [sp, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	bf14      	ite	ne
 8006d2c:	210d      	movne	r1, #13
 8006d2e:	2103      	moveq	r1, #3
 8006d30:	f7fe fb32 	bl	8005398 <dwt_writetodevice>
 8006d34:	2203      	movs	r2, #3
 8006d36:	2144      	movs	r1, #68	; 0x44
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7fd ff71 	bl	8004c20 <dwt_read8bitoffsetreg>
 8006d3e:	f010 0f08 	tst.w	r0, #8
 8006d42:	d145      	bne.n	8006dd0 <dwt_ioctl+0x258>
 8006d44:	2200      	movs	r2, #0
 8006d46:	499d      	ldr	r1, [pc, #628]	; (8006fbc <dwt_ioctl+0x444>)
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7fd ff41 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8006d4e:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8006d52:	bf18      	it	ne
 8006d54:	2500      	movne	r5, #0
 8006d56:	d1b9      	bne.n	8006ccc <dwt_ioctl+0x154>
 8006d58:	2100      	movs	r1, #0
 8006d5a:	9100      	str	r1, [sp, #0]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	460a      	mov	r2, r1
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7fe fb19 	bl	8005398 <dwt_writetodevice>
 8006d66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006d6a:	e7af      	b.n	8006ccc <dwt_ioctl+0x154>
 8006d6c:	f014 0f08 	tst.w	r4, #8
 8006d70:	d10e      	bne.n	8006d90 <dwt_ioctl+0x218>
 8006d72:	f014 0f10 	tst.w	r4, #16
 8006d76:	d11b      	bne.n	8006db0 <dwt_ioctl+0x238>
 8006d78:	f014 0f02 	tst.w	r4, #2
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	9200      	str	r2, [sp, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	bf14      	ite	ne
 8006d86:	2110      	movne	r1, #16
 8006d88:	2109      	moveq	r1, #9
 8006d8a:	f7fe fb05 	bl	8005398 <dwt_writetodevice>
 8006d8e:	e7d1      	b.n	8006d34 <dwt_ioctl+0x1bc>
 8006d90:	2100      	movs	r1, #0
 8006d92:	f7fe fdd3 	bl	800593c <_dwt_adjust_delaytime>
 8006d96:	f014 0f02 	tst.w	r4, #2
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	9200      	str	r2, [sp, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	bf14      	ite	ne
 8006da4:	210f      	movne	r1, #15
 8006da6:	2107      	moveq	r1, #7
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7fe faf5 	bl	8005398 <dwt_writetodevice>
 8006dae:	e7c1      	b.n	8006d34 <dwt_ioctl+0x1bc>
 8006db0:	2101      	movs	r1, #1
 8006db2:	f7fe fdc3 	bl	800593c <_dwt_adjust_delaytime>
 8006db6:	f014 0f02 	tst.w	r4, #2
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	9200      	str	r2, [sp, #0]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	bf14      	ite	ne
 8006dc4:	210e      	movne	r1, #14
 8006dc6:	2105      	moveq	r1, #5
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f7fe fae5 	bl	8005398 <dwt_writetodevice>
 8006dce:	e7b1      	b.n	8006d34 <dwt_ioctl+0x1bc>
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	9100      	str	r1, [sp, #0]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	460a      	mov	r2, r1
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7fe fadd 	bl	8005398 <dwt_writetodevice>
 8006dde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006de2:	e773      	b.n	8006ccc <dwt_ioctl+0x154>
 8006de4:	f014 0f20 	tst.w	r4, #32
 8006de8:	d00c      	beq.n	8006e04 <dwt_ioctl+0x28c>
 8006dea:	f014 0f02 	tst.w	r4, #2
 8006dee:	f04f 0500 	mov.w	r5, #0
 8006df2:	9500      	str	r5, [sp, #0]
 8006df4:	462b      	mov	r3, r5
 8006df6:	462a      	mov	r2, r5
 8006df8:	bf14      	ite	ne
 8006dfa:	2111      	movne	r1, #17
 8006dfc:	210b      	moveq	r1, #11
 8006dfe:	f7fe facb 	bl	8005398 <dwt_writetodevice>
 8006e02:	e763      	b.n	8006ccc <dwt_ioctl+0x154>
 8006e04:	f014 0f02 	tst.w	r4, #2
 8006e08:	f04f 0500 	mov.w	r5, #0
 8006e0c:	9500      	str	r5, [sp, #0]
 8006e0e:	462b      	mov	r3, r5
 8006e10:	462a      	mov	r2, r5
 8006e12:	bf14      	ite	ne
 8006e14:	210c      	movne	r1, #12
 8006e16:	2101      	moveq	r1, #1
 8006e18:	f7fe fabe 	bl	8005398 <dwt_writetodevice>
 8006e1c:	e756      	b.n	8006ccc <dwt_ioctl+0x154>
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	f001 8489 	beq.w	8008736 <dwt_ioctl+0x1bbe>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	2200      	movs	r2, #0
 8006e28:	212c      	movs	r1, #44	; 0x2c
 8006e2a:	f7fe fc13 	bl	8005654 <dwt_write32bitoffsetreg>
 8006e2e:	2500      	movs	r5, #0
 8006e30:	e74c      	b.n	8006ccc <dwt_ioctl+0x154>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	2200      	movs	r2, #0
 8006e36:	4962      	ldr	r1, [pc, #392]	; (8006fc0 <dwt_ioctl+0x448>)
 8006e38:	f7fe fc0c 	bl	8005654 <dwt_write32bitoffsetreg>
 8006e3c:	6863      	ldr	r3, [r4, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4960      	ldr	r1, [pc, #384]	; (8006fc4 <dwt_ioctl+0x44c>)
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7fe fc06 	bl	8005654 <dwt_write32bitoffsetreg>
 8006e48:	68a3      	ldr	r3, [r4, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	495e      	ldr	r1, [pc, #376]	; (8006fc8 <dwt_ioctl+0x450>)
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7fe fc00 	bl	8005654 <dwt_write32bitoffsetreg>
 8006e54:	68e3      	ldr	r3, [r4, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	495c      	ldr	r1, [pc, #368]	; (8006fcc <dwt_ioctl+0x454>)
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f7fe fbfa 	bl	8005654 <dwt_write32bitoffsetreg>
 8006e60:	2500      	movs	r5, #0
 8006e62:	e733      	b.n	8006ccc <dwt_ioctl+0x154>
 8006e64:	2c00      	cmp	r4, #0
 8006e66:	f001 8469 	beq.w	800873c <dwt_ioctl+0x1bc4>
 8006e6a:	8823      	ldrh	r3, [r4, #0]
 8006e6c:	6865      	ldr	r5, [r4, #4]
 8006e6e:	2d03      	cmp	r5, #3
 8006e70:	f201 8467 	bhi.w	8008742 <dwt_ioctl+0x1bca>
 8006e74:	e8df f005 	tbb	[pc, r5]
 8006e78:	130d0702 	.word	0x130d0702
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4954      	ldr	r1, [pc, #336]	; (8006fd0 <dwt_ioctl+0x458>)
 8006e80:	f7fe fae7 	bl	8005452 <dwt_write16bitoffsetreg>
 8006e84:	e722      	b.n	8006ccc <dwt_ioctl+0x154>
 8006e86:	2202      	movs	r2, #2
 8006e88:	4951      	ldr	r1, [pc, #324]	; (8006fd0 <dwt_ioctl+0x458>)
 8006e8a:	f7fe fae2 	bl	8005452 <dwt_write16bitoffsetreg>
 8006e8e:	2500      	movs	r5, #0
 8006e90:	e71c      	b.n	8006ccc <dwt_ioctl+0x154>
 8006e92:	2200      	movs	r2, #0
 8006e94:	494f      	ldr	r1, [pc, #316]	; (8006fd4 <dwt_ioctl+0x45c>)
 8006e96:	f7fe fadc 	bl	8005452 <dwt_write16bitoffsetreg>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	e716      	b.n	8006ccc <dwt_ioctl+0x154>
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	494c      	ldr	r1, [pc, #304]	; (8006fd4 <dwt_ioctl+0x45c>)
 8006ea2:	f7fe fad6 	bl	8005452 <dwt_write16bitoffsetreg>
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	e710      	b.n	8006ccc <dwt_ioctl+0x154>
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	f001 844c 	beq.w	8008748 <dwt_ioctl+0x1bd0>
 8006eb0:	7823      	ldrb	r3, [r4, #0]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	f003 0306 	and.w	r3, r3, #6
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	f06f 0306 	mvn.w	r3, #6
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4945      	ldr	r1, [pc, #276]	; (8006fd8 <dwt_ioctl+0x460>)
 8006ec2:	f7fe ff59 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	e700      	b.n	8006ccc <dwt_ioctl+0x154>
 8006eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4941      	ldr	r1, [pc, #260]	; (8006fdc <dwt_ioctl+0x464>)
 8006ed8:	f7fe ff4e 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006edc:	2500      	movs	r5, #0
 8006ede:	e6f5      	b.n	8006ccc <dwt_ioctl+0x154>
 8006ee0:	2c00      	cmp	r4, #0
 8006ee2:	f001 8434 	beq.w	800874e <dwt_ioctl+0x1bd6>
 8006ee6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006ee8:	7b5b      	ldrb	r3, [r3, #13]
 8006eea:	7023      	strb	r3, [r4, #0]
 8006eec:	2500      	movs	r5, #0
 8006eee:	e6ed      	b.n	8006ccc <dwt_ioctl+0x154>
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	f001 842f 	beq.w	8008754 <dwt_ioctl+0x1bdc>
 8006ef6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006ef8:	7a9b      	ldrb	r3, [r3, #10]
 8006efa:	7023      	strb	r3, [r4, #0]
 8006efc:	2500      	movs	r5, #0
 8006efe:	e6e5      	b.n	8006ccc <dwt_ioctl+0x154>
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	f001 842a 	beq.w	800875a <dwt_ioctl+0x1be2>
 8006f06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006f08:	7adb      	ldrb	r3, [r3, #11]
 8006f0a:	7023      	strb	r3, [r4, #0]
 8006f0c:	2500      	movs	r5, #0
 8006f0e:	e6dd      	b.n	8006ccc <dwt_ioctl+0x154>
 8006f10:	2c00      	cmp	r4, #0
 8006f12:	f001 8425 	beq.w	8008760 <dwt_ioctl+0x1be8>
 8006f16:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	e6d5      	b.n	8006ccc <dwt_ioctl+0x154>
 8006f20:	2c00      	cmp	r4, #0
 8006f22:	f001 8420 	beq.w	8008766 <dwt_ioctl+0x1bee>
 8006f26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	2500      	movs	r5, #0
 8006f2e:	e6cd      	b.n	8006ccc <dwt_ioctl+0x154>
 8006f30:	f7fe fb7e 	bl	8005630 <ull_signal_rx_buff_free>
 8006f34:	2500      	movs	r5, #0
 8006f36:	e6c9      	b.n	8006ccc <dwt_ioctl+0x154>
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	f001 8417 	beq.w	800876c <dwt_ioctl+0x1bf4>
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	f7fe fd24 	bl	800598c <ull_setrxaftertxdelay>
 8006f44:	2500      	movs	r5, #0
 8006f46:	e6c1      	b.n	8006ccc <dwt_ioctl+0x154>
 8006f48:	2c00      	cmp	r4, #0
 8006f4a:	f001 8412 	beq.w	8008772 <dwt_ioctl+0x1bfa>
 8006f4e:	7825      	ldrb	r5, [r4, #0]
 8006f50:	b15d      	cbz	r5, 8006f6a <dwt_ioctl+0x3f2>
 8006f52:	6864      	ldr	r4, [r4, #4]
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	23ff      	movs	r3, #255	; 0xff
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2110      	movs	r1, #16
 8006f5e:	f7ff f8f5 	bl	800614c <dwt_modify8bitoffsetreg>
 8006f62:	2d02      	cmp	r5, #2
 8006f64:	d107      	bne.n	8006f76 <dwt_ioctl+0x3fe>
 8006f66:	60f4      	str	r4, [r6, #12]
 8006f68:	e005      	b.n	8006f76 <dwt_ioctl+0x3fe>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	9200      	str	r2, [sp, #0]
 8006f6e:	23bf      	movs	r3, #191	; 0xbf
 8006f70:	2110      	movs	r1, #16
 8006f72:	f7ff f8eb 	bl	800614c <dwt_modify8bitoffsetreg>
 8006f76:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8006f78:	759d      	strb	r5, [r3, #22]
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	e6a6      	b.n	8006ccc <dwt_ioctl+0x154>
 8006f7e:	2c00      	cmp	r4, #0
 8006f80:	f001 83fa 	beq.w	8008778 <dwt_ioctl+0x1c00>
 8006f84:	6865      	ldr	r5, [r4, #4]
 8006f86:	7823      	ldrb	r3, [r4, #0]
 8006f88:	2203      	movs	r2, #3
 8006f8a:	4915      	ldr	r1, [pc, #84]	; (8006fe0 <dwt_ioctl+0x468>)
 8006f8c:	f7fe fa0f 	bl	80053ae <dwt_write8bitoffsetreg>
 8006f90:	b945      	cbnz	r5, 8006fa4 <dwt_ioctl+0x42c>
 8006f92:	2200      	movs	r2, #0
 8006f94:	9200      	str	r2, [sp, #0]
 8006f96:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8006f9a:	2110      	movs	r1, #16
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f7ff fa87 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8006fa2:	e693      	b.n	8006ccc <dwt_ioctl+0x154>
 8006fa4:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2110      	movs	r1, #16
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f7fe fee0 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8006fb8:	2500      	movs	r5, #0
 8006fba:	e687      	b.n	8006ccc <dwt_ioctl+0x154>
 8006fbc:	000f0030 	.word	0x000f0030
 8006fc0:	00010054 	.word	0x00010054
 8006fc4:	00010058 	.word	0x00010058
 8006fc8:	0001005c 	.word	0x0001005c
 8006fcc:	00010060 	.word	0x00010060
 8006fd0:	00010018 	.word	0x00010018
 8006fd4:	0001001c 	.word	0x0001001c
 8006fd8:	00010014 	.word	0x00010014
 8006fdc:	00110004 	.word	0x00110004
 8006fe0:	00010008 	.word	0x00010008
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	f7fd fdf2 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8006fec:	68b2      	ldr	r2, [r6, #8]
 8006fee:	6813      	ldr	r3, [r2, #0]
 8006ff0:	4043      	eors	r3, r0
 8006ff2:	6852      	ldr	r2, [r2, #4]
 8006ff4:	4213      	tst	r3, r2
 8006ff6:	bf14      	ite	ne
 8006ff8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8006ffc:	2500      	moveq	r5, #0
 8006ffe:	e665      	b.n	8006ccc <dwt_ioctl+0x154>
 8007000:	2c00      	cmp	r4, #0
 8007002:	f001 83bc 	beq.w	800877e <dwt_ioctl+0x1c06>
 8007006:	7821      	ldrb	r1, [r4, #0]
 8007008:	f7ff f8b4 	bl	8006174 <ull_configciadiag>
 800700c:	2500      	movs	r5, #0
 800700e:	e65d      	b.n	8006ccc <dwt_ioctl+0x154>
 8007010:	b93a      	cbnz	r2, 8007022 <dwt_ioctl+0x4aa>
 8007012:	2200      	movs	r2, #0
 8007014:	9200      	str	r2, [sp, #0]
 8007016:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800701a:	49ae      	ldr	r1, [pc, #696]	; (80072d4 <dwt_ioctl+0x75c>)
 800701c:	f7ff fa48 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8007020:	e654      	b.n	8006ccc <dwt_ioctl+0x154>
 8007022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800702c:	2200      	movs	r2, #0
 800702e:	49a9      	ldr	r1, [pc, #676]	; (80072d4 <dwt_ioctl+0x75c>)
 8007030:	f7ff fa3e 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8007034:	2500      	movs	r5, #0
 8007036:	e649      	b.n	8006ccc <dwt_ioctl+0x154>
 8007038:	f002 0201 	and.w	r2, r2, #1
 800703c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007040:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8007044:	2a00      	cmp	r2, #0
 8007046:	bf08      	it	eq
 8007048:	460b      	moveq	r3, r1
 800704a:	02d2      	lsls	r2, r2, #11
 800704c:	f015 0f02 	tst.w	r5, #2
 8007050:	bf12      	itee	ne
 8007052:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8007056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800705a:	b29b      	uxtheq	r3, r3
 800705c:	9200      	str	r2, [sp, #0]
 800705e:	2200      	movs	r2, #0
 8007060:	499c      	ldr	r1, [pc, #624]	; (80072d4 <dwt_ioctl+0x75c>)
 8007062:	f7ff fa25 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8007066:	2500      	movs	r5, #0
 8007068:	e630      	b.n	8006ccc <dwt_ioctl+0x154>
 800706a:	b92a      	cbnz	r2, 8007078 <dwt_ioctl+0x500>
 800706c:	4b9a      	ldr	r3, [pc, #616]	; (80072d8 <dwt_ioctl+0x760>)
 800706e:	2202      	movs	r2, #2
 8007070:	499a      	ldr	r1, [pc, #616]	; (80072dc <dwt_ioctl+0x764>)
 8007072:	f7fe faef 	bl	8005654 <dwt_write32bitoffsetreg>
 8007076:	e629      	b.n	8006ccc <dwt_ioctl+0x154>
 8007078:	4b99      	ldr	r3, [pc, #612]	; (80072e0 <dwt_ioctl+0x768>)
 800707a:	2202      	movs	r2, #2
 800707c:	4997      	ldr	r1, [pc, #604]	; (80072dc <dwt_ioctl+0x764>)
 800707e:	f7fe fae9 	bl	8005654 <dwt_write32bitoffsetreg>
 8007082:	2500      	movs	r5, #0
 8007084:	e622      	b.n	8006ccc <dwt_ioctl+0x154>
 8007086:	4611      	mov	r1, r2
 8007088:	f7fe fc96 	bl	80059b8 <ull_setlnapamode>
 800708c:	2500      	movs	r5, #0
 800708e:	e61d      	b.n	8006ccc <dwt_ioctl+0x154>
 8007090:	2c00      	cmp	r4, #0
 8007092:	f001 8377 	beq.w	8008784 <dwt_ioctl+0x1c0c>
 8007096:	2200      	movs	r2, #0
 8007098:	4992      	ldr	r1, [pc, #584]	; (80072e4 <dwt_ioctl+0x76c>)
 800709a:	f7fd fdc1 	bl	8004c20 <dwt_read8bitoffsetreg>
 800709e:	7020      	strb	r0, [r4, #0]
 80070a0:	2500      	movs	r5, #0
 80070a2:	e613      	b.n	8006ccc <dwt_ioctl+0x154>
 80070a4:	4621      	mov	r1, r4
 80070a6:	f7fe fca9 	bl	80059fc <ull_configurestskey>
 80070aa:	2500      	movs	r5, #0
 80070ac:	e60e      	b.n	8006ccc <dwt_ioctl+0x154>
 80070ae:	4621      	mov	r1, r4
 80070b0:	f7fe fcc8 	bl	8005a44 <ull_configurestsiv>
 80070b4:	2500      	movs	r5, #0
 80070b6:	e609      	b.n	8006ccc <dwt_ioctl+0x154>
 80070b8:	2301      	movs	r3, #1
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	23ff      	movs	r3, #255	; 0xff
 80070be:	2200      	movs	r2, #0
 80070c0:	4989      	ldr	r1, [pc, #548]	; (80072e8 <dwt_ioctl+0x770>)
 80070c2:	f7ff f843 	bl	800614c <dwt_modify8bitoffsetreg>
 80070c6:	2500      	movs	r5, #0
 80070c8:	e600      	b.n	8006ccc <dwt_ioctl+0x154>
 80070ca:	4611      	mov	r1, r2
 80070cc:	f7fe fcde 	bl	8005a8c <ull_configmrxlut>
 80070d0:	2500      	movs	r5, #0
 80070d2:	e5fb      	b.n	8006ccc <dwt_ioctl+0x154>
 80070d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80070d6:	7a1b      	ldrb	r3, [r3, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d137      	bne.n	800714c <dwt_ioctl+0x5d4>
 80070dc:	2314      	movs	r3, #20
 80070de:	2201      	movs	r2, #1
 80070e0:	4982      	ldr	r1, [pc, #520]	; (80072ec <dwt_ioctl+0x774>)
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7fe f963 	bl	80053ae <dwt_write8bitoffsetreg>
 80070e8:	2318      	movs	r3, #24
 80070ea:	2200      	movs	r2, #0
 80070ec:	4980      	ldr	r1, [pc, #512]	; (80072f0 <dwt_ioctl+0x778>)
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7fe fab0 	bl	8005654 <dwt_write32bitoffsetreg>
 80070f4:	23e8      	movs	r3, #232	; 0xe8
 80070f6:	2200      	movs	r2, #0
 80070f8:	497e      	ldr	r1, [pc, #504]	; (80072f4 <dwt_ioctl+0x77c>)
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7fe faaa 	bl	8005654 <dwt_write32bitoffsetreg>
 8007100:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007102:	8a5b      	ldrh	r3, [r3, #18]
 8007104:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007108:	2b20      	cmp	r3, #32
 800710a:	d022      	beq.n	8007152 <dwt_ioctl+0x5da>
 800710c:	2b60      	cmp	r3, #96	; 0x60
 800710e:	d02b      	beq.n	8007168 <dwt_ioctl+0x5f0>
 8007110:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007112:	7e1b      	ldrb	r3, [r3, #24]
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	d032      	beq.n	800717e <dwt_ioctl+0x606>
 8007118:	2200      	movs	r2, #0
 800711a:	4977      	ldr	r1, [pc, #476]	; (80072f8 <dwt_ioctl+0x780>)
 800711c:	4630      	mov	r0, r6
 800711e:	f7fd fd6d 	bl	8004bfc <dwt_read16bitoffsetreg>
 8007122:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8007126:	3b09      	subs	r3, #9
 8007128:	2b0f      	cmp	r3, #15
 800712a:	f201 832e 	bhi.w	800878a <dwt_ioctl+0x1c12>
 800712e:	f000 0001 	and.w	r0, r0, #1
 8007132:	2800      	cmp	r0, #0
 8007134:	bf0c      	ite	eq
 8007136:	2105      	moveq	r1, #5
 8007138:	2109      	movne	r1, #9
 800713a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800713c:	7a5b      	ldrb	r3, [r3, #9]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d029      	beq.n	8007196 <dwt_ioctl+0x61e>
 8007142:	4630      	mov	r0, r6
 8007144:	f7fe fca2 	bl	8005a8c <ull_configmrxlut>
 8007148:	2500      	movs	r5, #0
 800714a:	e5bf      	b.n	8006ccc <dwt_ioctl+0x154>
 800714c:	f7ff f9ca 	bl	80064e4 <_dwt_prog_ldo_and_bias_tune>
 8007150:	e7c4      	b.n	80070dc <dwt_ioctl+0x564>
 8007152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800715c:	2200      	movs	r2, #0
 800715e:	4967      	ldr	r1, [pc, #412]	; (80072fc <dwt_ioctl+0x784>)
 8007160:	4630      	mov	r0, r6
 8007162:	f7fe fe09 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8007166:	e7d3      	b.n	8007110 <dwt_ioctl+0x598>
 8007168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007172:	2200      	movs	r2, #0
 8007174:	4961      	ldr	r1, [pc, #388]	; (80072fc <dwt_ioctl+0x784>)
 8007176:	4630      	mov	r0, r6
 8007178:	f7fe fdfe 	bl	8005d78 <dwt_modify32bitoffsetreg>
 800717c:	e7c8      	b.n	8007110 <dwt_ioctl+0x598>
 800717e:	2301      	movs	r3, #1
 8007180:	2200      	movs	r2, #0
 8007182:	495f      	ldr	r1, [pc, #380]	; (8007300 <dwt_ioctl+0x788>)
 8007184:	4630      	mov	r0, r6
 8007186:	f7fe f912 	bl	80053ae <dwt_write8bitoffsetreg>
 800718a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800718c:	7e13      	ldrb	r3, [r2, #24]
 800718e:	f043 0302 	orr.w	r3, r3, #2
 8007192:	7613      	strb	r3, [r2, #24]
 8007194:	e7c0      	b.n	8007118 <dwt_ioctl+0x5a0>
 8007196:	4630      	mov	r0, r6
 8007198:	f7fe fe12 	bl	8005dc0 <_dwt_kick_dgc_on_wakeup>
 800719c:	2500      	movs	r5, #0
 800719e:	e595      	b.n	8006ccc <dwt_ioctl+0x154>
 80071a0:	2c00      	cmp	r4, #0
 80071a2:	f001 82f5 	beq.w	8008790 <dwt_ioctl+0x1c18>
 80071a6:	7823      	ldrb	r3, [r4, #0]
 80071a8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80071aa:	75d3      	strb	r3, [r2, #23]
 80071ac:	031b      	lsls	r3, r3, #12
 80071ae:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	f644 73ff 	movw	r3, #20479	; 0x4fff
 80071b8:	2200      	movs	r2, #0
 80071ba:	2110      	movs	r1, #16
 80071bc:	f7ff f978 	bl	80064b0 <dwt_modify16bitoffsetreg>
 80071c0:	2500      	movs	r5, #0
 80071c2:	e583      	b.n	8006ccc <dwt_ioctl+0x154>
 80071c4:	2c00      	cmp	r4, #0
 80071c6:	f001 82e6 	beq.w	8008796 <dwt_ioctl+0x1c1e>
 80071ca:	8823      	ldrh	r3, [r4, #0]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80071d2:	f7fe f93e 	bl	8005452 <dwt_write16bitoffsetreg>
 80071d6:	2500      	movs	r5, #0
 80071d8:	e578      	b.n	8006ccc <dwt_ioctl+0x154>
 80071da:	2c00      	cmp	r4, #0
 80071dc:	f001 82de 	beq.w	800879c <dwt_ioctl+0x1c24>
 80071e0:	2200      	movs	r2, #0
 80071e2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80071e6:	f7fd fd09 	bl	8004bfc <dwt_read16bitoffsetreg>
 80071ea:	8020      	strh	r0, [r4, #0]
 80071ec:	2500      	movs	r5, #0
 80071ee:	e56d      	b.n	8006ccc <dwt_ioctl+0x154>
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	f001 82d6 	beq.w	80087a2 <dwt_ioctl+0x1c2a>
 80071f6:	8823      	ldrh	r3, [r4, #0]
 80071f8:	2200      	movs	r2, #0
 80071fa:	4942      	ldr	r1, [pc, #264]	; (8007304 <dwt_ioctl+0x78c>)
 80071fc:	f7fe f929 	bl	8005452 <dwt_write16bitoffsetreg>
 8007200:	2500      	movs	r5, #0
 8007202:	e563      	b.n	8006ccc <dwt_ioctl+0x154>
 8007204:	2c00      	cmp	r4, #0
 8007206:	f001 82cf 	beq.w	80087a8 <dwt_ioctl+0x1c30>
 800720a:	2200      	movs	r2, #0
 800720c:	493d      	ldr	r1, [pc, #244]	; (8007304 <dwt_ioctl+0x78c>)
 800720e:	f7fd fcf5 	bl	8004bfc <dwt_read16bitoffsetreg>
 8007212:	8020      	strh	r0, [r4, #0]
 8007214:	2500      	movs	r5, #0
 8007216:	e559      	b.n	8006ccc <dwt_ioctl+0x154>
 8007218:	2c00      	cmp	r4, #0
 800721a:	f001 82c8 	beq.w	80087ae <dwt_ioctl+0x1c36>
 800721e:	88a3      	ldrh	r3, [r4, #4]
 8007220:	88e2      	ldrh	r2, [r4, #6]
 8007222:	6821      	ldr	r1, [r4, #0]
 8007224:	9100      	str	r1, [sp, #0]
 8007226:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800722a:	f7fe f8b5 	bl	8005398 <dwt_writetodevice>
 800722e:	2500      	movs	r5, #0
 8007230:	e54c      	b.n	8006ccc <dwt_ioctl+0x154>
 8007232:	2c00      	cmp	r4, #0
 8007234:	f001 82be 	beq.w	80087b4 <dwt_ioctl+0x1c3c>
 8007238:	88a3      	ldrh	r3, [r4, #4]
 800723a:	88e2      	ldrh	r2, [r4, #6]
 800723c:	6821      	ldr	r1, [r4, #0]
 800723e:	9100      	str	r1, [sp, #0]
 8007240:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8007244:	f7fd fcba 	bl	8004bbc <dwt_readfromdevice>
 8007248:	2500      	movs	r5, #0
 800724a:	e53f      	b.n	8006ccc <dwt_ioctl+0x154>
 800724c:	2c00      	cmp	r4, #0
 800724e:	f001 82b4 	beq.w	80087ba <dwt_ioctl+0x1c42>
 8007252:	88e3      	ldrh	r3, [r4, #6]
 8007254:	88a2      	ldrh	r2, [r4, #4]
 8007256:	6821      	ldr	r1, [r4, #0]
 8007258:	f7fe fcc2 	bl	8005be0 <ull_readrxdata>
 800725c:	2500      	movs	r5, #0
 800725e:	e535      	b.n	8006ccc <dwt_ioctl+0x154>
 8007260:	2c00      	cmp	r4, #0
 8007262:	f001 82ad 	beq.w	80087c0 <dwt_ioctl+0x1c48>
 8007266:	88e3      	ldrh	r3, [r4, #6]
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	88a1      	ldrh	r1, [r4, #4]
 800726c:	f7fe fd52 	bl	8005d14 <ull_writetxdata>
 8007270:	2500      	movs	r5, #0
 8007272:	e52b      	b.n	8006ccc <dwt_ioctl+0x154>
 8007274:	4611      	mov	r1, r2
 8007276:	f7fe fce9 	bl	8005c4c <ull_rxenable>
 800727a:	2500      	movs	r5, #0
 800727c:	e526      	b.n	8006ccc <dwt_ioctl+0x154>
 800727e:	2c00      	cmp	r4, #0
 8007280:	f001 82a1 	beq.w	80087c6 <dwt_ioctl+0x1c4e>
 8007284:	7923      	ldrb	r3, [r4, #4]
 8007286:	8862      	ldrh	r2, [r4, #2]
 8007288:	8821      	ldrh	r1, [r4, #0]
 800728a:	f7fe ff2d 	bl	80060e8 <ull_writetxfctrl>
 800728e:	2500      	movs	r5, #0
 8007290:	e51c      	b.n	8006ccc <dwt_ioctl+0x154>
 8007292:	2c00      	cmp	r4, #0
 8007294:	f001 829a 	beq.w	80087cc <dwt_ioctl+0x1c54>
 8007298:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800729a:	7bdb      	ldrb	r3, [r3, #15]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d00c      	beq.n	80072ba <dwt_ioctl+0x742>
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d110      	bne.n	80072c6 <dwt_ioctl+0x74e>
 80072a4:	220c      	movs	r2, #12
 80072a6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80072aa:	f7fd fca7 	bl	8004bfc <dwt_read16bitoffsetreg>
 80072ae:	b200      	sxth	r0, r0
 80072b0:	f340 030c 	sbfx	r3, r0, #0, #13
 80072b4:	8023      	strh	r3, [r4, #0]
 80072b6:	2500      	movs	r5, #0
 80072b8:	e508      	b.n	8006ccc <dwt_ioctl+0x154>
 80072ba:	2200      	movs	r2, #0
 80072bc:	4912      	ldr	r1, [pc, #72]	; (8007308 <dwt_ioctl+0x790>)
 80072be:	f7fd fc9d 	bl	8004bfc <dwt_read16bitoffsetreg>
 80072c2:	b200      	sxth	r0, r0
 80072c4:	e7f4      	b.n	80072b0 <dwt_ioctl+0x738>
 80072c6:	2200      	movs	r2, #0
 80072c8:	4910      	ldr	r1, [pc, #64]	; (800730c <dwt_ioctl+0x794>)
 80072ca:	f7fd fc97 	bl	8004bfc <dwt_read16bitoffsetreg>
 80072ce:	b200      	sxth	r0, r0
 80072d0:	e7ee      	b.n	80072b0 <dwt_ioctl+0x738>
 80072d2:	bf00      	nop
 80072d4:	00110008 	.word	0x00110008
 80072d8:	00d20874 	.word	0x00d20874
 80072dc:	00110010 	.word	0x00110010
 80072e0:	04d28874 	.word	0x04d28874
 80072e4:	0007001c 	.word	0x0007001c
 80072e8:	00020004 	.word	0x00020004
 80072ec:	00070050 	.word	0x00070050
 80072f0:	001f000c 	.word	0x001f000c
 80072f4:	001f0010 	.word	0x001f0010
 80072f8:	00010014 	.word	0x00010014
 80072fc:	000b0008 	.word	0x000b0008
 8007300:	00010028 	.word	0x00010028
 8007304:	00010004 	.word	0x00010004
 8007308:	0018000c 	.word	0x0018000c
 800730c:	000c0020 	.word	0x000c0020
 8007310:	2c00      	cmp	r4, #0
 8007312:	f001 825e 	beq.w	80087d2 <dwt_ioctl+0x1c5a>
 8007316:	ab0c      	add	r3, sp, #48	; 0x30
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2303      	movs	r3, #3
 800731c:	2200      	movs	r2, #0
 800731e:	49bb      	ldr	r1, [pc, #748]	; (800760c <dwt_ioctl+0xa94>)
 8007320:	f7fd fc4c 	bl	8004bbc <dwt_readfromdevice>
 8007324:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8007328:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800732c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8007330:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8007334:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007338:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800733c:	bf1c      	itt	ne
 800733e:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8007342:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	2500      	movs	r5, #0
 800734a:	e4bf      	b.n	8006ccc <dwt_ioctl+0x154>
 800734c:	f7fe f892 	bl	8005474 <ull_clearaonconfig>
 8007350:	2500      	movs	r5, #0
 8007352:	e4bb      	b.n	8006ccc <dwt_ioctl+0x154>
 8007354:	2c00      	cmp	r4, #0
 8007356:	f001 823f 	beq.w	80087d8 <dwt_ioctl+0x1c60>
 800735a:	8861      	ldrh	r1, [r4, #2]
 800735c:	f7fe ff40 	bl	80061e0 <ull_calcbandwidthadj>
 8007360:	7020      	strb	r0, [r4, #0]
 8007362:	2500      	movs	r5, #0
 8007364:	e4b2      	b.n	8006ccc <dwt_ioctl+0x154>
 8007366:	4621      	mov	r1, r4
 8007368:	f7fd fc68 	bl	8004c3c <ull_readdiagnostics>
 800736c:	2500      	movs	r5, #0
 800736e:	e4ad      	b.n	8006ccc <dwt_ioctl+0x154>
 8007370:	2c00      	cmp	r4, #0
 8007372:	f001 8234 	beq.w	80087de <dwt_ioctl+0x1c66>
 8007376:	2201      	movs	r2, #1
 8007378:	2174      	movs	r1, #116	; 0x74
 800737a:	f7fd fc29 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800737e:	6020      	str	r0, [r4, #0]
 8007380:	2500      	movs	r5, #0
 8007382:	e4a3      	b.n	8006ccc <dwt_ioctl+0x154>
 8007384:	2c00      	cmp	r4, #0
 8007386:	f001 822d 	beq.w	80087e4 <dwt_ioctl+0x1c6c>
 800738a:	2200      	movs	r2, #0
 800738c:	2174      	movs	r1, #116	; 0x74
 800738e:	f7fd fc1f 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007392:	6020      	str	r0, [r4, #0]
 8007394:	2500      	movs	r5, #0
 8007396:	e499      	b.n	8006ccc <dwt_ioctl+0x154>
 8007398:	9400      	str	r4, [sp, #0]
 800739a:	2305      	movs	r3, #5
 800739c:	2200      	movs	r2, #0
 800739e:	2174      	movs	r1, #116	; 0x74
 80073a0:	f7fd fc0c 	bl	8004bbc <dwt_readfromdevice>
 80073a4:	2500      	movs	r5, #0
 80073a6:	e491      	b.n	8006ccc <dwt_ioctl+0x154>
 80073a8:	2c00      	cmp	r4, #0
 80073aa:	f001 821e 	beq.w	80087ea <dwt_ioctl+0x1c72>
 80073ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80073b0:	7bdb      	ldrb	r3, [r3, #15]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d014      	beq.n	80073e0 <dwt_ioctl+0x868>
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d119      	bne.n	80073ee <dwt_ioctl+0x876>
 80073ba:	2216      	movs	r2, #22
 80073bc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80073c0:	f7fd fc1c 	bl	8004bfc <dwt_read16bitoffsetreg>
 80073c4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80073c8:	b283      	uxth	r3, r0
 80073ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80073ce:	d004      	beq.n	80073da <dwt_ioctl+0x862>
 80073d0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80073d4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80073d8:	b218      	sxth	r0, r3
 80073da:	8020      	strh	r0, [r4, #0]
 80073dc:	2500      	movs	r5, #0
 80073de:	e475      	b.n	8006ccc <dwt_ioctl+0x154>
 80073e0:	2202      	movs	r2, #2
 80073e2:	498b      	ldr	r1, [pc, #556]	; (8007610 <dwt_ioctl+0xa98>)
 80073e4:	f7fd fc0a 	bl	8004bfc <dwt_read16bitoffsetreg>
 80073e8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80073ec:	e7ec      	b.n	80073c8 <dwt_ioctl+0x850>
 80073ee:	2202      	movs	r2, #2
 80073f0:	4988      	ldr	r1, [pc, #544]	; (8007614 <dwt_ioctl+0xa9c>)
 80073f2:	f7fd fc03 	bl	8004bfc <dwt_read16bitoffsetreg>
 80073f6:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80073fa:	e7e5      	b.n	80073c8 <dwt_ioctl+0x850>
 80073fc:	9400      	str	r4, [sp, #0]
 80073fe:	2306      	movs	r3, #6
 8007400:	2200      	movs	r2, #0
 8007402:	4985      	ldr	r1, [pc, #532]	; (8007618 <dwt_ioctl+0xaa0>)
 8007404:	f7fd fbda 	bl	8004bbc <dwt_readfromdevice>
 8007408:	7963      	ldrb	r3, [r4, #5]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	7163      	strb	r3, [r4, #5]
 8007410:	2500      	movs	r5, #0
 8007412:	e45b      	b.n	8006ccc <dwt_ioctl+0x154>
 8007414:	2c00      	cmp	r4, #0
 8007416:	f001 81eb 	beq.w	80087f0 <dwt_ioctl+0x1c78>
 800741a:	2201      	movs	r2, #1
 800741c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8007420:	f7fd fbfe 	bl	8004c20 <dwt_read8bitoffsetreg>
 8007424:	7020      	strb	r0, [r4, #0]
 8007426:	2500      	movs	r5, #0
 8007428:	e450      	b.n	8006ccc <dwt_ioctl+0x154>
 800742a:	2c00      	cmp	r4, #0
 800742c:	f001 81e3 	beq.w	80087f6 <dwt_ioctl+0x1c7e>
 8007430:	2200      	movs	r2, #0
 8007432:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8007436:	f7fd fbf3 	bl	8004c20 <dwt_read8bitoffsetreg>
 800743a:	7020      	strb	r0, [r4, #0]
 800743c:	2500      	movs	r5, #0
 800743e:	e445      	b.n	8006ccc <dwt_ioctl+0x154>
 8007440:	2c00      	cmp	r4, #0
 8007442:	f001 81db 	beq.w	80087fc <dwt_ioctl+0x1c84>
 8007446:	88a2      	ldrh	r2, [r4, #4]
 8007448:	6821      	ldr	r1, [r4, #0]
 800744a:	f7fe fd1d 	bl	8005e88 <_dwt_otpprogword32>
 800744e:	2500      	movs	r5, #0
 8007450:	e43c      	b.n	8006ccc <dwt_ioctl+0x154>
 8007452:	2c00      	cmp	r4, #0
 8007454:	f001 81d5 	beq.w	8008802 <dwt_ioctl+0x1c8a>
 8007458:	6825      	ldr	r5, [r4, #0]
 800745a:	88a4      	ldrh	r4, [r4, #4]
 800745c:	4622      	mov	r2, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7fe fd12 	bl	8005e88 <_dwt_otpprogword32>
 8007464:	4621      	mov	r1, r4
 8007466:	4630      	mov	r0, r6
 8007468:	f7fe f84e 	bl	8005508 <_dwt_otpread>
 800746c:	1a2d      	subs	r5, r5, r0
 800746e:	bf18      	it	ne
 8007470:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8007474:	e42a      	b.n	8006ccc <dwt_ioctl+0x154>
 8007476:	2a02      	cmp	r2, #2
 8007478:	d00e      	beq.n	8007498 <dwt_ioctl+0x920>
 800747a:	4c68      	ldr	r4, [pc, #416]	; (800761c <dwt_ioctl+0xaa4>)
 800747c:	2300      	movs	r3, #0
 800747e:	461a      	mov	r2, r3
 8007480:	4621      	mov	r1, r4
 8007482:	4630      	mov	r0, r6
 8007484:	f7fd ff93 	bl	80053ae <dwt_write8bitoffsetreg>
 8007488:	2302      	movs	r3, #2
 800748a:	2200      	movs	r2, #0
 800748c:	4621      	mov	r1, r4
 800748e:	4630      	mov	r0, r6
 8007490:	f7fd ff8d 	bl	80053ae <dwt_write8bitoffsetreg>
 8007494:	2500      	movs	r5, #0
 8007496:	e419      	b.n	8006ccc <dwt_ioctl+0x154>
 8007498:	2300      	movs	r3, #0
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	23fe      	movs	r3, #254	; 0xfe
 800749e:	2201      	movs	r2, #1
 80074a0:	495f      	ldr	r1, [pc, #380]	; (8007620 <dwt_ioctl+0xaa8>)
 80074a2:	f7fe fe53 	bl	800614c <dwt_modify8bitoffsetreg>
 80074a6:	e7e8      	b.n	800747a <dwt_ioctl+0x902>
 80074a8:	2c00      	cmp	r4, #0
 80074aa:	f001 81ad 	beq.w	8008808 <dwt_ioctl+0x1c90>
 80074ae:	8824      	ldrh	r4, [r4, #0]
 80074b0:	b2e2      	uxtb	r2, r4
 80074b2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80074b6:	f7fe f869 	bl	800558c <ull_aon_write>
 80074ba:	0a22      	lsrs	r2, r4, #8
 80074bc:	f240 1103 	movw	r1, #259	; 0x103
 80074c0:	4630      	mov	r0, r6
 80074c2:	f7fe f863 	bl	800558c <ull_aon_write>
 80074c6:	2500      	movs	r5, #0
 80074c8:	e400      	b.n	8006ccc <dwt_ioctl+0x154>
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	f001 819f 	beq.w	800880e <dwt_ioctl+0x1c96>
 80074d0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800762c <dwt_ioctl+0xab4>
 80074d4:	2310      	movs	r3, #16
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	23ff      	movs	r3, #255	; 0xff
 80074da:	2200      	movs	r2, #0
 80074dc:	4641      	mov	r1, r8
 80074de:	f7fe fe35 	bl	800614c <dwt_modify8bitoffsetreg>
 80074e2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7fe f830 	bl	800554c <ull_aon_read>
 80074ec:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80074f0:	462a      	mov	r2, r5
 80074f2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7fe f848 	bl	800558c <ull_aon_write>
 80074fc:	f045 0204 	orr.w	r2, r5, #4
 8007500:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007504:	4630      	mov	r0, r6
 8007506:	f7fe f841 	bl	800558c <ull_aon_write>
 800750a:	2002      	movs	r0, #2
 800750c:	f7f9 f99e 	bl	800084c <deca_sleep>
 8007510:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8007514:	4630      	mov	r0, r6
 8007516:	f7fe f819 	bl	800554c <ull_aon_read>
 800751a:	4607      	mov	r7, r0
 800751c:	f240 110f 	movw	r1, #271	; 0x10f
 8007520:	4630      	mov	r0, r6
 8007522:	f7fe f813 	bl	800554c <ull_aon_read>
 8007526:	4681      	mov	r9, r0
 8007528:	462a      	mov	r2, r5
 800752a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800752e:	4630      	mov	r0, r6
 8007530:	f7fe f82c 	bl	800558c <ull_aon_write>
 8007534:	2500      	movs	r5, #0
 8007536:	9500      	str	r5, [sp, #0]
 8007538:	23ef      	movs	r3, #239	; 0xef
 800753a:	462a      	mov	r2, r5
 800753c:	4641      	mov	r1, r8
 800753e:	4630      	mov	r0, r6
 8007540:	f7fe fe04 	bl	800614c <dwt_modify8bitoffsetreg>
 8007544:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8007548:	8027      	strh	r7, [r4, #0]
 800754a:	f7ff bbbf 	b.w	8006ccc <dwt_ioctl+0x154>
 800754e:	2c00      	cmp	r4, #0
 8007550:	f001 8160 	beq.w	8008814 <dwt_ioctl+0x1c9c>
 8007554:	78a2      	ldrb	r2, [r4, #2]
 8007556:	8821      	ldrh	r1, [r4, #0]
 8007558:	f7fe f840 	bl	80055dc <ull_configuresleep>
 800755c:	2500      	movs	r5, #0
 800755e:	f7ff bbb5 	b.w	8006ccc <dwt_ioctl+0x154>
 8007562:	f7fd ff87 	bl	8005474 <ull_clearaonconfig>
 8007566:	2001      	movs	r0, #1
 8007568:	f7f9 f970 	bl	800084c <deca_sleep>
 800756c:	2303      	movs	r3, #3
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	23ff      	movs	r3, #255	; 0xff
 8007572:	2200      	movs	r2, #0
 8007574:	492b      	ldr	r1, [pc, #172]	; (8007624 <dwt_ioctl+0xaac>)
 8007576:	4630      	mov	r0, r6
 8007578:	f7fe fde8 	bl	800614c <dwt_modify8bitoffsetreg>
 800757c:	2300      	movs	r3, #0
 800757e:	461a      	mov	r2, r3
 8007580:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8007584:	4630      	mov	r0, r6
 8007586:	f7fd ff12 	bl	80053ae <dwt_write8bitoffsetreg>
 800758a:	2001      	movs	r0, #1
 800758c:	f7f9 f95e 	bl	800084c <deca_sleep>
 8007590:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007592:	2500      	movs	r5, #0
 8007594:	73dd      	strb	r5, [r3, #15]
 8007596:	2202      	movs	r2, #2
 8007598:	825a      	strh	r2, [r3, #18]
 800759a:	759d      	strb	r5, [r3, #22]
 800759c:	75dd      	strb	r5, [r3, #23]
 800759e:	741d      	strb	r5, [r3, #16]
 80075a0:	f7ff bb94 	b.w	8006ccc <dwt_ioctl+0x154>
 80075a4:	2c00      	cmp	r4, #0
 80075a6:	f001 8138 	beq.w	800881a <dwt_ioctl+0x1ca2>
 80075aa:	7823      	ldrb	r3, [r4, #0]
 80075ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80075b2:	7393      	strb	r3, [r2, #14]
 80075b4:	2200      	movs	r2, #0
 80075b6:	491c      	ldr	r1, [pc, #112]	; (8007628 <dwt_ioctl+0xab0>)
 80075b8:	f7fd fef9 	bl	80053ae <dwt_write8bitoffsetreg>
 80075bc:	2500      	movs	r5, #0
 80075be:	f7ff bb85 	b.w	8006ccc <dwt_ioctl+0x154>
 80075c2:	2c00      	cmp	r4, #0
 80075c4:	f001 812c 	beq.w	8008820 <dwt_ioctl+0x1ca8>
 80075c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80075ca:	7b9b      	ldrb	r3, [r3, #14]
 80075cc:	7023      	strb	r3, [r4, #0]
 80075ce:	2500      	movs	r5, #0
 80075d0:	f7ff bb7c 	b.w	8006ccc <dwt_ioctl+0x154>
 80075d4:	2101      	movs	r1, #1
 80075d6:	f7fe fc11 	bl	8005dfc <ull_enable_rf_tx>
 80075da:	4630      	mov	r0, r6
 80075dc:	f7fe fc42 	bl	8005e64 <ull_enable_rftx_blocks>
 80075e0:	2101      	movs	r1, #1
 80075e2:	4630      	mov	r0, r6
 80075e4:	f7fd ff66 	bl	80054b4 <ull_force_clocks>
 80075e8:	220f      	movs	r2, #15
 80075ea:	2101      	movs	r1, #1
 80075ec:	4630      	mov	r0, r6
 80075ee:	f7ff f86f 	bl	80066d0 <ull_repeated_cw>
 80075f2:	2500      	movs	r5, #0
 80075f4:	f7ff bb6a 	b.w	8006ccc <dwt_ioctl+0x154>
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	f001 8114 	beq.w	8008826 <dwt_ioctl+0x1cae>
 80075fe:	6862      	ldr	r2, [r4, #4]
 8007600:	6821      	ldr	r1, [r4, #0]
 8007602:	f7ff f865 	bl	80066d0 <ull_repeated_cw>
 8007606:	2500      	movs	r5, #0
 8007608:	f7ff bb60 	b.w	8006ccc <dwt_ioctl+0x154>
 800760c:	00060029 	.word	0x00060029
 8007610:	00180014 	.word	0x00180014
 8007614:	000c001c 	.word	0x000c001c
 8007618:	000c0018 	.word	0x000c0018
 800761c:	000a0004 	.word	0x000a0004
 8007620:	00110008 	.word	0x00110008
 8007624:	00110004 	.word	0x00110004
 8007628:	00090014 	.word	0x00090014
 800762c:	00070048 	.word	0x00070048
 8007630:	2c00      	cmp	r4, #0
 8007632:	f001 80fb 	beq.w	800882c <dwt_ioctl+0x1cb4>
 8007636:	4dd6      	ldr	r5, [pc, #856]	; (8007990 <dwt_ioctl+0xe18>)
 8007638:	2200      	movs	r2, #0
 800763a:	4629      	mov	r1, r5
 800763c:	f7fd faf0 	bl	8004c20 <dwt_read8bitoffsetreg>
 8007640:	4680      	mov	r8, r0
 8007642:	2302      	movs	r3, #2
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	23ff      	movs	r3, #255	; 0xff
 8007648:	2200      	movs	r2, #0
 800764a:	4629      	mov	r1, r5
 800764c:	4630      	mov	r0, r6
 800764e:	f7fe fd7d 	bl	800614c <dwt_modify8bitoffsetreg>
 8007652:	2304      	movs	r3, #4
 8007654:	2200      	movs	r2, #0
 8007656:	49cf      	ldr	r1, [pc, #828]	; (8007994 <dwt_ioctl+0xe1c>)
 8007658:	4630      	mov	r0, r6
 800765a:	f7fd fea8 	bl	80053ae <dwt_write8bitoffsetreg>
 800765e:	2301      	movs	r3, #1
 8007660:	2200      	movs	r2, #0
 8007662:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007666:	4630      	mov	r0, r6
 8007668:	f7fd fea1 	bl	80053ae <dwt_write8bitoffsetreg>
 800766c:	4fca      	ldr	r7, [pc, #808]	; (8007998 <dwt_ioctl+0xe20>)
 800766e:	2500      	movs	r5, #0
 8007670:	462a      	mov	r2, r5
 8007672:	4639      	mov	r1, r7
 8007674:	4630      	mov	r0, r6
 8007676:	f7fd fad3 	bl	8004c20 <dwt_read8bitoffsetreg>
 800767a:	f010 0f01 	tst.w	r0, #1
 800767e:	d0f7      	beq.n	8007670 <dwt_ioctl+0xaf8>
 8007680:	2200      	movs	r2, #0
 8007682:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8007686:	4630      	mov	r0, r6
 8007688:	f7fd fab8 	bl	8004bfc <dwt_read16bitoffsetreg>
 800768c:	4605      	mov	r5, r0
 800768e:	2300      	movs	r3, #0
 8007690:	461a      	mov	r2, r3
 8007692:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007696:	4630      	mov	r0, r6
 8007698:	f7fd fe89 	bl	80053ae <dwt_write8bitoffsetreg>
 800769c:	2300      	movs	r3, #0
 800769e:	461a      	mov	r2, r3
 80076a0:	49bc      	ldr	r1, [pc, #752]	; (8007994 <dwt_ioctl+0xe1c>)
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7fd fe83 	bl	80053ae <dwt_write8bitoffsetreg>
 80076a8:	4643      	mov	r3, r8
 80076aa:	2200      	movs	r2, #0
 80076ac:	49b8      	ldr	r1, [pc, #736]	; (8007990 <dwt_ioctl+0xe18>)
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7fd fe7d 	bl	80053ae <dwt_write8bitoffsetreg>
 80076b4:	8025      	strh	r5, [r4, #0]
 80076b6:	2500      	movs	r5, #0
 80076b8:	f7ff bb08 	b.w	8006ccc <dwt_ioctl+0x154>
 80076bc:	2c00      	cmp	r4, #0
 80076be:	f001 80b8 	beq.w	8008832 <dwt_ioctl+0x1cba>
 80076c2:	7923      	ldrb	r3, [r4, #4]
 80076c4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80076c6:	7ad2      	ldrb	r2, [r2, #11]
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d2:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800799c <dwt_ioctl+0xe24>
 80076d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076da:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80076de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076e2:	edc4 7a00 	vstr	s15, [r4]
 80076e6:	2500      	movs	r5, #0
 80076e8:	f7ff baf0 	b.w	8006ccc <dwt_ioctl+0x154>
 80076ec:	2c00      	cmp	r4, #0
 80076ee:	f001 80a3 	beq.w	8008838 <dwt_ioctl+0x1cc0>
 80076f2:	7923      	ldrb	r3, [r4, #4]
 80076f4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80076f6:	7a92      	ldrb	r2, [r2, #10]
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007702:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80079a0 <dwt_ioctl+0xe28>
 8007706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800770a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800770e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007712:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80079a4 <dwt_ioctl+0xe2c>
 8007716:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800771a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800771e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007722:	edc4 7a00 	vstr	s15, [r4]
 8007726:	2500      	movs	r5, #0
 8007728:	f7ff bad0 	b.w	8006ccc <dwt_ioctl+0x154>
 800772c:	2c00      	cmp	r4, #0
 800772e:	f001 8086 	beq.w	800883e <dwt_ioctl+0x1cc6>
 8007732:	6824      	ldr	r4, [r4, #0]
 8007734:	2101      	movs	r1, #1
 8007736:	f7fe fb61 	bl	8005dfc <ull_enable_rf_tx>
 800773a:	4630      	mov	r0, r6
 800773c:	f7fe fb92 	bl	8005e64 <ull_enable_rftx_blocks>
 8007740:	2101      	movs	r1, #1
 8007742:	4630      	mov	r0, r6
 8007744:	f7fd feb6 	bl	80054b4 <ull_force_clocks>
 8007748:	4621      	mov	r1, r4
 800774a:	4630      	mov	r0, r6
 800774c:	f7fe fda4 	bl	8006298 <ull_repeated_frames>
 8007750:	2500      	movs	r5, #0
 8007752:	f7ff babb 	b.w	8006ccc <dwt_ioctl+0x154>
 8007756:	2500      	movs	r5, #0
 8007758:	9500      	str	r5, [sp, #0]
 800775a:	23ef      	movs	r3, #239	; 0xef
 800775c:	462a      	mov	r2, r5
 800775e:	4992      	ldr	r1, [pc, #584]	; (80079a8 <dwt_ioctl+0xe30>)
 8007760:	f7fe fcf4 	bl	800614c <dwt_modify8bitoffsetreg>
 8007764:	2105      	movs	r1, #5
 8007766:	4630      	mov	r0, r6
 8007768:	f7fd fea4 	bl	80054b4 <ull_force_clocks>
 800776c:	2101      	movs	r1, #1
 800776e:	4630      	mov	r0, r6
 8007770:	f7fe fa18 	bl	8005ba4 <ull_disable_rf_tx>
 8007774:	4630      	mov	r0, r6
 8007776:	f7fe fa0b 	bl	8005b90 <ull_disable_rftx_blocks>
 800777a:	f7ff baa7 	b.w	8006ccc <dwt_ioctl+0x154>
 800777e:	2500      	movs	r5, #0
 8007780:	9500      	str	r5, [sp, #0]
 8007782:	23ef      	movs	r3, #239	; 0xef
 8007784:	462a      	mov	r2, r5
 8007786:	4988      	ldr	r1, [pc, #544]	; (80079a8 <dwt_ioctl+0xe30>)
 8007788:	f7fe fce0 	bl	800614c <dwt_modify8bitoffsetreg>
 800778c:	f7ff ba9e 	b.w	8006ccc <dwt_ioctl+0x154>
 8007790:	2c00      	cmp	r4, #0
 8007792:	f001 8057 	beq.w	8008844 <dwt_ioctl+0x1ccc>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	f7fe fd7e 	bl	8006298 <ull_repeated_frames>
 800779c:	2500      	movs	r5, #0
 800779e:	f7ff ba95 	b.w	8006ccc <dwt_ioctl+0x154>
 80077a2:	2200      	movs	r2, #0
 80077a4:	4981      	ldr	r1, [pc, #516]	; (80079ac <dwt_ioctl+0xe34>)
 80077a6:	f7fd fa29 	bl	8004bfc <dwt_read16bitoffsetreg>
 80077aa:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80077ae:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80077b2:	bf18      	it	ne
 80077b4:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80077b8:	b22d      	sxth	r5, r5
 80077ba:	8025      	strh	r5, [r4, #0]
 80077bc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80077be:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80077c2:	1aed      	subs	r5, r5, r3
 80077c4:	f7ff ba82 	b.w	8006ccc <dwt_ioctl+0x154>
 80077c8:	2c00      	cmp	r4, #0
 80077ca:	f001 806d 	beq.w	80088a8 <dwt_ioctl+0x1d30>
 80077ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80077d2:	7a23      	ldrb	r3, [r4, #8]
 80077d4:	f899 2013 	ldrb.w	r2, [r9, #19]
 80077d8:	2aff      	cmp	r2, #255	; 0xff
 80077da:	f000 813f 	beq.w	8007a5c <dwt_ioctl+0xee4>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d136      	bne.n	8007850 <dwt_ioctl+0xcd8>
 80077e2:	f8d9 3000 	ldr.w	r3, [r9]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	230c      	movs	r3, #12
 80077ea:	2200      	movs	r2, #0
 80077ec:	4970      	ldr	r1, [pc, #448]	; (80079b0 <dwt_ioctl+0xe38>)
 80077ee:	f7fd fdd3 	bl	8005398 <dwt_writetodevice>
 80077f2:	f899 300c 	ldrb.w	r3, [r9, #12]
 80077f6:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80077fa:	18d1      	adds	r1, r2, r3
 80077fc:	f899 2012 	ldrb.w	r2, [r9, #18]
 8007800:	2a00      	cmp	r2, #0
 8007802:	d15f      	bne.n	80078c4 <dwt_ioctl+0xd4c>
 8007804:	f899 0010 	ldrb.w	r0, [r9, #16]
 8007808:	2800      	cmp	r0, #0
 800780a:	bf0b      	itete	eq
 800780c:	227f      	moveq	r2, #127	; 0x7f
 800780e:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8007812:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8007816:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800781a:	f899 0013 	ldrb.w	r0, [r9, #19]
 800781e:	1a12      	subs	r2, r2, r0
 8007820:	3a02      	subs	r2, #2
 8007822:	4291      	cmp	r1, r2
 8007824:	f200 8120 	bhi.w	8007a68 <dwt_ioctl+0xef0>
 8007828:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800782c:	9200      	str	r2, [sp, #0]
 800782e:	2200      	movs	r2, #0
 8007830:	4629      	mov	r1, r5
 8007832:	4630      	mov	r0, r6
 8007834:	f7fd fdb0 	bl	8005398 <dwt_writetodevice>
 8007838:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800783c:	f899 200c 	ldrb.w	r2, [r9, #12]
 8007840:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007844:	9100      	str	r1, [sp, #0]
 8007846:	4629      	mov	r1, r5
 8007848:	4630      	mov	r0, r6
 800784a:	f7fd fda5 	bl	8005398 <dwt_writetodevice>
 800784e:	e04a      	b.n	80078e6 <dwt_ioctl+0xd6e>
 8007850:	f8d9 3000 	ldr.w	r3, [r9]
 8007854:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8007858:	7a9a      	ldrb	r2, [r3, #10]
 800785a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800785e:	7a5a      	ldrb	r2, [r3, #9]
 8007860:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8007864:	7a1a      	ldrb	r2, [r3, #8]
 8007866:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800786a:	79da      	ldrb	r2, [r3, #7]
 800786c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8007870:	799a      	ldrb	r2, [r3, #6]
 8007872:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8007876:	795a      	ldrb	r2, [r3, #5]
 8007878:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800787c:	791a      	ldrb	r2, [r3, #4]
 800787e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8007882:	78da      	ldrb	r2, [r3, #3]
 8007884:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8007888:	789a      	ldrb	r2, [r3, #2]
 800788a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800788e:	785a      	ldrb	r2, [r3, #1]
 8007890:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800789a:	2200      	movs	r2, #0
 800789c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80078a0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80078a4:	0a09      	lsrs	r1, r1, #8
 80078a6:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80078aa:	7b19      	ldrb	r1, [r3, #12]
 80078ac:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80078b0:	7adb      	ldrb	r3, [r3, #11]
 80078b2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80078b6:	ab0c      	add	r3, sp, #48	; 0x30
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	2310      	movs	r3, #16
 80078bc:	493c      	ldr	r1, [pc, #240]	; (80079b0 <dwt_ioctl+0xe38>)
 80078be:	f7fd fd6b 	bl	8005398 <dwt_writetodevice>
 80078c2:	e796      	b.n	80077f2 <dwt_ioctl+0xc7a>
 80078c4:	2a01      	cmp	r2, #1
 80078c6:	f040 80cc 	bne.w	8007a62 <dwt_ioctl+0xeea>
 80078ca:	f899 3011 	ldrb.w	r3, [r9, #17]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80078d4:	bf08      	it	eq
 80078d6:	237f      	moveq	r3, #127	; 0x7f
 80078d8:	f899 2013 	ldrb.w	r2, [r9, #19]
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	3b02      	subs	r3, #2
 80078e0:	4299      	cmp	r1, r3
 80078e2:	f200 80c4 	bhi.w	8007a6e <dwt_ioctl+0xef6>
 80078e6:	f899 2010 	ldrb.w	r2, [r9, #16]
 80078ea:	1e53      	subs	r3, r2, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d940      	bls.n	8007974 <dwt_ioctl+0xdfc>
 80078f2:	f899 3011 	ldrb.w	r3, [r9, #17]
 80078f6:	1e59      	subs	r1, r3, #1
 80078f8:	b2c9      	uxtb	r1, r1
 80078fa:	2901      	cmp	r1, #1
 80078fc:	d964      	bls.n	80079c8 <dwt_ioctl+0xe50>
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d069      	beq.n	80079d6 <dwt_ioctl+0xe5e>
 8007902:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8007906:	2200      	movs	r2, #0
 8007908:	492a      	ldr	r1, [pc, #168]	; (80079b4 <dwt_ioctl+0xe3c>)
 800790a:	4630      	mov	r0, r6
 800790c:	f7fd fea2 	bl	8005654 <dwt_write32bitoffsetreg>
 8007910:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007914:	4a28      	ldr	r2, [pc, #160]	; (80079b8 <dwt_ioctl+0xe40>)
 8007916:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800791a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800791e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007922:	4313      	orrs	r3, r2
 8007924:	2200      	movs	r2, #0
 8007926:	4925      	ldr	r1, [pc, #148]	; (80079bc <dwt_ioctl+0xe44>)
 8007928:	4630      	mov	r0, r6
 800792a:	f7fd fe93 	bl	8005654 <dwt_write32bitoffsetreg>
 800792e:	2301      	movs	r3, #1
 8007930:	2200      	movs	r2, #0
 8007932:	4923      	ldr	r1, [pc, #140]	; (80079c0 <dwt_ioctl+0xe48>)
 8007934:	4630      	mov	r0, r6
 8007936:	f7fd fd3a 	bl	80053ae <dwt_write8bitoffsetreg>
 800793a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80079c4 <dwt_ioctl+0xe4c>
 800793e:	2700      	movs	r7, #0
 8007940:	463a      	mov	r2, r7
 8007942:	4641      	mov	r1, r8
 8007944:	4630      	mov	r0, r6
 8007946:	f7fd f96b 	bl	8004c20 <dwt_read8bitoffsetreg>
 800794a:	f010 0f05 	tst.w	r0, #5
 800794e:	d0f7      	beq.n	8007940 <dwt_ioctl+0xdc8>
 8007950:	4605      	mov	r5, r0
 8007952:	4603      	mov	r3, r0
 8007954:	2200      	movs	r2, #0
 8007956:	491b      	ldr	r1, [pc, #108]	; (80079c4 <dwt_ioctl+0xe4c>)
 8007958:	4630      	mov	r0, r6
 800795a:	f7fd fd28 	bl	80053ae <dwt_write8bitoffsetreg>
 800795e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8007962:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8007966:	2b01      	cmp	r3, #1
 8007968:	d042      	beq.n	80079f0 <dwt_ioctl+0xe78>
 800796a:	b26b      	sxtb	r3, r5
 800796c:	7023      	strb	r3, [r4, #0]
 800796e:	2500      	movs	r5, #0
 8007970:	f7ff b9ac 	b.w	8006ccc <dwt_ioctl+0x154>
 8007974:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007976:	7bdb      	ldrb	r3, [r3, #15]
 8007978:	2b03      	cmp	r3, #3
 800797a:	f001 802e 	beq.w	80089da <dwt_ioctl+0x1e62>
 800797e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8007982:	1e5a      	subs	r2, r3, #1
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	2a01      	cmp	r2, #1
 8007988:	d92c      	bls.n	80079e4 <dwt_ioctl+0xe6c>
 800798a:	2201      	movs	r2, #1
 800798c:	e7b7      	b.n	80078fe <dwt_ioctl+0xd86>
 800798e:	bf00      	nop
 8007990:	00070048 	.word	0x00070048
 8007994:	00070034 	.word	0x00070034
 8007998:	00080004 	.word	0x00080004
 800799c:	3f866666 	.word	0x3f866666
 80079a0:	3ecccccd 	.word	0x3ecccccd
 80079a4:	437f0000 	.word	0x437f0000
 80079a8:	000f0024 	.word	0x000f0024
 80079ac:	00020008 	.word	0x00020008
 80079b0:	00010034 	.word	0x00010034
 80079b4:	00010044 	.word	0x00010044
 80079b8:	0001ff80 	.word	0x0001ff80
 80079bc:	00010048 	.word	0x00010048
 80079c0:	0001004c 	.word	0x0001004c
 80079c4:	00010050 	.word	0x00010050
 80079c8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80079ca:	7bdb      	ldrb	r3, [r3, #15]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	bf0c      	ite	eq
 80079d0:	2302      	moveq	r3, #2
 80079d2:	2301      	movne	r3, #1
 80079d4:	e795      	b.n	8007902 <dwt_ioctl+0xd8a>
 80079d6:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80079da:	2910      	cmp	r1, #16
 80079dc:	d991      	bls.n	8007902 <dwt_ioctl+0xd8a>
 80079de:	f06f 0303 	mvn.w	r3, #3
 80079e2:	e7c3      	b.n	800796c <dwt_ioctl+0xdf4>
 80079e4:	2201      	movs	r2, #1
 80079e6:	4613      	mov	r3, r2
 80079e8:	e78b      	b.n	8007902 <dwt_ioctl+0xd8a>
 80079ea:	2202      	movs	r2, #2
 80079ec:	4613      	mov	r3, r2
 80079ee:	e788      	b.n	8007902 <dwt_ioctl+0xd8a>
 80079f0:	f899 3012 	ldrb.w	r3, [r9, #18]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d1b8      	bne.n	800796a <dwt_ioctl+0xdf2>
 80079f8:	f899 2011 	ldrb.w	r2, [r9, #17]
 80079fc:	1e53      	subs	r3, r2, #1
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d91b      	bls.n	8007a3c <dwt_ioctl+0xec4>
 8007a04:	2a03      	cmp	r2, #3
 8007a06:	bf0c      	ite	eq
 8007a08:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8007a0c:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8007a10:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007a14:	b112      	cbz	r2, 8007a1c <dwt_ioctl+0xea4>
 8007a16:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007a1a:	b9c3      	cbnz	r3, 8007a4e <dwt_ioctl+0xed6>
 8007a1c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007a20:	2900      	cmp	r1, #0
 8007a22:	d0a2      	beq.n	800796a <dwt_ioctl+0xdf2>
 8007a24:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d09e      	beq.n	800796a <dwt_ioctl+0xdf2>
 8007a2c:	f899 200c 	ldrb.w	r2, [r9, #12]
 8007a30:	9100      	str	r1, [sp, #0]
 8007a32:	4639      	mov	r1, r7
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7fd f8c1 	bl	8004bbc <dwt_readfromdevice>
 8007a3a:	e796      	b.n	800796a <dwt_ioctl+0xdf2>
 8007a3c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007a3e:	7bdb      	ldrb	r3, [r3, #15]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	bf0c      	ite	eq
 8007a44:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8007a48:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8007a4c:	e7e0      	b.n	8007a10 <dwt_ioctl+0xe98>
 8007a4e:	9200      	str	r2, [sp, #0]
 8007a50:	2200      	movs	r2, #0
 8007a52:	4639      	mov	r1, r7
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7fd f8b1 	bl	8004bbc <dwt_readfromdevice>
 8007a5a:	e7df      	b.n	8007a1c <dwt_ioctl+0xea4>
 8007a5c:	f06f 0302 	mvn.w	r3, #2
 8007a60:	e784      	b.n	800796c <dwt_ioctl+0xdf4>
 8007a62:	f06f 0301 	mvn.w	r3, #1
 8007a66:	e781      	b.n	800796c <dwt_ioctl+0xdf4>
 8007a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a6c:	e77e      	b.n	800796c <dwt_ioctl+0xdf4>
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a72:	e77b      	b.n	800796c <dwt_ioctl+0xdf4>
 8007a74:	7a23      	ldrb	r3, [r4, #8]
 8007a76:	79e1      	ldrb	r1, [r4, #7]
 8007a78:	79a2      	ldrb	r2, [r4, #6]
 8007a7a:	00d2      	lsls	r2, r2, #3
 8007a7c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007a80:	4313      	orrs	r3, r2
 8007a82:	7962      	ldrb	r2, [r4, #5]
 8007a84:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007a88:	7922      	ldrb	r2, [r4, #4]
 8007a8a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007a8e:	78e2      	ldrb	r2, [r4, #3]
 8007a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a94:	78a2      	ldrb	r2, [r4, #2]
 8007a96:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8007a9a:	7862      	ldrb	r2, [r4, #1]
 8007a9c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	49cd      	ldr	r1, [pc, #820]	; (8007ddc <dwt_ioctl+0x1264>)
 8007aa6:	f7fd fcd4 	bl	8005452 <dwt_write16bitoffsetreg>
 8007aaa:	2500      	movs	r5, #0
 8007aac:	f7ff b90e 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	f000 86fc 	beq.w	80088ae <dwt_ioctl+0x1d36>
 8007ab6:	7863      	ldrb	r3, [r4, #1]
 8007ab8:	b133      	cbz	r3, 8007ac8 <dwt_ioctl+0xf50>
 8007aba:	085b      	lsrs	r3, r3, #1
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	7023      	strb	r3, [r4, #0]
 8007ac2:	2500      	movs	r5, #0
 8007ac4:	f7ff b902 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e7f9      	b.n	8007ac0 <dwt_ioctl+0xf48>
 8007acc:	2200      	movs	r2, #0
 8007ace:	49c4      	ldr	r1, [pc, #784]	; (8007de0 <dwt_ioctl+0x1268>)
 8007ad0:	f7fd f87e 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007ad4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007ad8:	8023      	strh	r3, [r4, #0]
 8007ada:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007ade:	8060      	strh	r0, [r4, #2]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	49c0      	ldr	r1, [pc, #768]	; (8007de4 <dwt_ioctl+0x126c>)
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7fd f873 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007aea:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007aee:	80a3      	strh	r3, [r4, #4]
 8007af0:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007af4:	80e0      	strh	r0, [r4, #6]
 8007af6:	2200      	movs	r2, #0
 8007af8:	49bb      	ldr	r1, [pc, #748]	; (8007de8 <dwt_ioctl+0x1270>)
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7fd f868 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007b00:	7220      	strb	r0, [r4, #8]
 8007b02:	0c00      	lsrs	r0, r0, #16
 8007b04:	7260      	strb	r0, [r4, #9]
 8007b06:	2200      	movs	r2, #0
 8007b08:	49b8      	ldr	r1, [pc, #736]	; (8007dec <dwt_ioctl+0x1274>)
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7fd f860 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007b10:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007b1a:	8160      	strh	r0, [r4, #10]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	49b4      	ldr	r1, [pc, #720]	; (8007df0 <dwt_ioctl+0x1278>)
 8007b20:	4630      	mov	r0, r6
 8007b22:	f7fd f855 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007b26:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8007b2a:	f8a4 300f 	strh.w	r3, [r4, #15]
 8007b2e:	73a0      	strb	r0, [r4, #14]
 8007b30:	2200      	movs	r2, #0
 8007b32:	49b0      	ldr	r1, [pc, #704]	; (8007df4 <dwt_ioctl+0x127c>)
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7fd f84b 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007b3a:	7460      	strb	r0, [r4, #17]
 8007b3c:	0c00      	lsrs	r0, r0, #16
 8007b3e:	74a0      	strb	r0, [r4, #18]
 8007b40:	2200      	movs	r2, #0
 8007b42:	49ad      	ldr	r1, [pc, #692]	; (8007df8 <dwt_ioctl+0x1280>)
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7fd f843 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007b4a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007b4e:	f8a4 0013 	strh.w	r0, [r4, #19]
 8007b52:	2500      	movs	r5, #0
 8007b54:	7565      	strb	r5, [r4, #21]
 8007b56:	75a5      	strb	r5, [r4, #22]
 8007b58:	462a      	mov	r2, r5
 8007b5a:	49a8      	ldr	r1, [pc, #672]	; (8007dfc <dwt_ioctl+0x1284>)
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7fd f85f 	bl	8004c20 <dwt_read8bitoffsetreg>
 8007b62:	75e0      	strb	r0, [r4, #23]
 8007b64:	f7ff b8b2 	b.w	8006ccc <dwt_ioctl+0x154>
 8007b68:	4611      	mov	r1, r2
 8007b6a:	f7fd fc5f 	bl	800542c <ull_configeventcounters>
 8007b6e:	2500      	movs	r5, #0
 8007b70:	f7ff b8ac 	b.w	8006ccc <dwt_ioctl+0x154>
 8007b74:	2c00      	cmp	r4, #0
 8007b76:	f000 869d 	beq.w	80088b4 <dwt_ioctl+0x1d3c>
 8007b7a:	8823      	ldrh	r3, [r4, #0]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	49a0      	ldr	r1, [pc, #640]	; (8007e00 <dwt_ioctl+0x1288>)
 8007b80:	f7fd fc67 	bl	8005452 <dwt_write16bitoffsetreg>
 8007b84:	2500      	movs	r5, #0
 8007b86:	f7ff b8a1 	b.w	8006ccc <dwt_ioctl+0x154>
 8007b8a:	2c00      	cmp	r4, #0
 8007b8c:	f000 8695 	beq.w	80088ba <dwt_ioctl+0x1d42>
 8007b90:	6825      	ldr	r5, [r4, #0]
 8007b92:	b935      	cbnz	r5, 8007ba2 <dwt_ioctl+0x102a>
 8007b94:	2300      	movs	r3, #0
 8007b96:	461a      	mov	r2, r3
 8007b98:	499a      	ldr	r1, [pc, #616]	; (8007e04 <dwt_ioctl+0x128c>)
 8007b9a:	f7fd fc5a 	bl	8005452 <dwt_write16bitoffsetreg>
 8007b9e:	f7ff b895 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ba2:	7962      	ldrb	r2, [r4, #5]
 8007ba4:	7923      	ldrb	r3, [r4, #4]
 8007ba6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4994      	ldr	r1, [pc, #592]	; (8007e04 <dwt_ioctl+0x128c>)
 8007bb2:	f7fd fc4e 	bl	8005452 <dwt_write16bitoffsetreg>
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	f7ff b888 	b.w	8006ccc <dwt_ioctl+0x154>
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	f000 867f 	beq.w	80088c0 <dwt_ioctl+0x1d48>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	b94b      	cbnz	r3, 8007bda <dwt_ioctl+0x1062>
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	9500      	str	r5, [sp, #0]
 8007bca:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8007bce:	462a      	mov	r2, r5
 8007bd0:	2110      	movs	r1, #16
 8007bd2:	f7fe fc6d 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8007bd6:	f7ff b879 	b.w	8006ccc <dwt_ioctl+0x154>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2134      	movs	r1, #52	; 0x34
 8007bde:	f7fd fd39 	bl	8005654 <dwt_write32bitoffsetreg>
 8007be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bec:	2200      	movs	r2, #0
 8007bee:	2110      	movs	r1, #16
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7fe fc5d 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	f7ff b868 	b.w	8006ccc <dwt_ioctl+0x154>
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	f000 8662 	beq.w	80088c6 <dwt_ioctl+0x1d4e>
 8007c02:	8861      	ldrh	r1, [r4, #2]
 8007c04:	f7fd fca2 	bl	800554c <ull_aon_read>
 8007c08:	7020      	strb	r0, [r4, #0]
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	f7ff b85e 	b.w	8006ccc <dwt_ioctl+0x154>
 8007c10:	2c00      	cmp	r4, #0
 8007c12:	f000 865b 	beq.w	80088cc <dwt_ioctl+0x1d54>
 8007c16:	78a2      	ldrb	r2, [r4, #2]
 8007c18:	8821      	ldrh	r1, [r4, #0]
 8007c1a:	f7fd fcb7 	bl	800558c <ull_aon_write>
 8007c1e:	2500      	movs	r5, #0
 8007c20:	f7ff b854 	b.w	8006ccc <dwt_ioctl+0x154>
 8007c24:	4b78      	ldr	r3, [pc, #480]	; (8007e08 <dwt_ioctl+0x1290>)
 8007c26:	4a79      	ldr	r2, [pc, #484]	; (8007e0c <dwt_ioctl+0x1294>)
 8007c28:	2d01      	cmp	r5, #1
 8007c2a:	bf18      	it	ne
 8007c2c:	4613      	movne	r3, r2
 8007c2e:	2d01      	cmp	r5, #1
 8007c30:	4977      	ldr	r1, [pc, #476]	; (8007e10 <dwt_ioctl+0x1298>)
 8007c32:	bf18      	it	ne
 8007c34:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8007c38:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007c3a:	7bd2      	ldrb	r2, [r2, #15]
 8007c3c:	2a01      	cmp	r2, #1
 8007c3e:	d012      	beq.n	8007c66 <dwt_ioctl+0x10ee>
 8007c40:	2a03      	cmp	r2, #3
 8007c42:	d117      	bne.n	8007c74 <dwt_ioctl+0x10fc>
 8007c44:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8007c48:	3a01      	subs	r2, #1
 8007c4a:	441a      	add	r2, r3
 8007c4c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007c50:	f7fc ffd4 	bl	8004bfc <dwt_read16bitoffsetreg>
 8007c54:	09c0      	lsrs	r0, r0, #7
 8007c56:	8020      	strh	r0, [r4, #0]
 8007c58:	8825      	ldrh	r5, [r4, #0]
 8007c5a:	3500      	adds	r5, #0
 8007c5c:	bf18      	it	ne
 8007c5e:	2501      	movne	r5, #1
 8007c60:	426d      	negs	r5, r5
 8007c62:	f7ff b833 	b.w	8006ccc <dwt_ioctl+0x154>
 8007c66:	2202      	movs	r2, #2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	f7fc ffc7 	bl	8004bfc <dwt_read16bitoffsetreg>
 8007c6e:	09c0      	lsrs	r0, r0, #7
 8007c70:	8020      	strh	r0, [r4, #0]
 8007c72:	e7f1      	b.n	8007c58 <dwt_ioctl+0x10e0>
 8007c74:	2202      	movs	r2, #2
 8007c76:	f7fc ffc1 	bl	8004bfc <dwt_read16bitoffsetreg>
 8007c7a:	09c0      	lsrs	r0, r0, #7
 8007c7c:	8020      	strh	r0, [r4, #0]
 8007c7e:	e7eb      	b.n	8007c58 <dwt_ioctl+0x10e0>
 8007c80:	2c00      	cmp	r4, #0
 8007c82:	f000 8626 	beq.w	80088d2 <dwt_ioctl+0x1d5a>
 8007c86:	7821      	ldrb	r1, [r4, #0]
 8007c88:	f7fe fc48 	bl	800651c <ull_setleds>
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	f7ff b81d 	b.w	8006ccc <dwt_ioctl+0x154>
 8007c92:	4611      	mov	r1, r2
 8007c94:	f7fe fb18 	bl	80062c8 <ull_setdwstate>
 8007c98:	2500      	movs	r5, #0
 8007c9a:	f7ff b817 	b.w	8006ccc <dwt_ioctl+0x154>
 8007c9e:	9400      	str	r4, [sp, #0]
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	211c      	movs	r1, #28
 8007ca6:	f7fc ff89 	bl	8004bbc <dwt_readfromdevice>
 8007caa:	2500      	movs	r5, #0
 8007cac:	f7ff b80e 	b.w	8006ccc <dwt_ioctl+0x154>
 8007cb0:	2c00      	cmp	r4, #0
 8007cb2:	f000 8611 	beq.w	80088d8 <dwt_ioctl+0x1d60>
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	2144      	movs	r1, #68	; 0x44
 8007cba:	f7fc ff9f 	bl	8004bfc <dwt_read16bitoffsetreg>
 8007cbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8007cc2:	7020      	strb	r0, [r4, #0]
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	f7ff b801 	b.w	8006ccc <dwt_ioctl+0x154>
 8007cca:	2c00      	cmp	r4, #0
 8007ccc:	f000 8607 	beq.w	80088de <dwt_ioctl+0x1d66>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2144      	movs	r1, #68	; 0x44
 8007cd4:	f7fc ffa4 	bl	8004c20 <dwt_read8bitoffsetreg>
 8007cd8:	f000 0001 	and.w	r0, r0, #1
 8007cdc:	7020      	strb	r0, [r4, #0]
 8007cde:	2500      	movs	r5, #0
 8007ce0:	f7fe bff4 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	f000 85fd 	beq.w	80088e4 <dwt_ioctl+0x1d6c>
 8007cea:	8862      	ldrh	r2, [r4, #2]
 8007cec:	8821      	ldrh	r1, [r4, #0]
 8007cee:	f7fe fb49 	bl	8006384 <ull_configureframefilter>
 8007cf2:	2500      	movs	r5, #0
 8007cf4:	f7fe bfea 	b.w	8006ccc <dwt_ioctl+0x154>
 8007cf8:	9400      	str	r4, [sp, #0]
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2104      	movs	r1, #4
 8007d00:	f7fd fb4a 	bl	8005398 <dwt_writetodevice>
 8007d04:	2500      	movs	r5, #0
 8007d06:	f7fe bfe1 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d0a:	9400      	str	r4, [sp, #0]
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2104      	movs	r1, #4
 8007d12:	f7fc ff53 	bl	8004bbc <dwt_readfromdevice>
 8007d16:	2500      	movs	r5, #0
 8007d18:	f7fe bfd8 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d1c:	2c00      	cmp	r4, #0
 8007d1e:	f000 85e4 	beq.w	80088ea <dwt_ioctl+0x1d72>
 8007d22:	8823      	ldrh	r3, [r4, #0]
 8007d24:	2202      	movs	r2, #2
 8007d26:	210c      	movs	r1, #12
 8007d28:	f7fd fb93 	bl	8005452 <dwt_write16bitoffsetreg>
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	f7fe bfcd 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d32:	2c00      	cmp	r4, #0
 8007d34:	f000 85dc 	beq.w	80088f0 <dwt_ioctl+0x1d78>
 8007d38:	8823      	ldrh	r3, [r4, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	210c      	movs	r1, #12
 8007d3e:	f7fd fb88 	bl	8005452 <dwt_write16bitoffsetreg>
 8007d42:	2500      	movs	r5, #0
 8007d44:	f7fe bfc2 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	f7fd fb03 	bl	8005354 <ull_readrxtimestamp>
 8007d4e:	2500      	movs	r5, #0
 8007d50:	f7fe bfbc 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d54:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d56:	7bdb      	ldrb	r3, [r3, #15]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d00b      	beq.n	8007d74 <dwt_ioctl+0x11fc>
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d112      	bne.n	8007d86 <dwt_ioctl+0x120e>
 8007d60:	9400      	str	r4, [sp, #0]
 8007d62:	2305      	movs	r3, #5
 8007d64:	2220      	movs	r2, #32
 8007d66:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007d6a:	f7fc ff27 	bl	8004bbc <dwt_readfromdevice>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	f7fe bfac 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d74:	9400      	str	r4, [sp, #0]
 8007d76:	2305      	movs	r3, #5
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4926      	ldr	r1, [pc, #152]	; (8007e14 <dwt_ioctl+0x129c>)
 8007d7c:	f7fc ff1e 	bl	8004bbc <dwt_readfromdevice>
 8007d80:	2500      	movs	r5, #0
 8007d82:	f7fe bfa3 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d86:	9400      	str	r4, [sp, #0]
 8007d88:	2305      	movs	r3, #5
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8007d90:	f7fc ff14 	bl	8004bbc <dwt_readfromdevice>
 8007d94:	2500      	movs	r5, #0
 8007d96:	f7fe bf99 	b.w	8006ccc <dwt_ioctl+0x154>
 8007d9a:	2500      	movs	r5, #0
 8007d9c:	f804 5b01 	strb.w	r5, [r4], #1
 8007da0:	9400      	str	r4, [sp, #0]
 8007da2:	2304      	movs	r3, #4
 8007da4:	462a      	mov	r2, r5
 8007da6:	2170      	movs	r1, #112	; 0x70
 8007da8:	f7fc ff08 	bl	8004bbc <dwt_readfromdevice>
 8007dac:	f7fe bf8e 	b.w	8006ccc <dwt_ioctl+0x154>
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	f000 85a0 	beq.w	80088f6 <dwt_ioctl+0x1d7e>
 8007db6:	2201      	movs	r2, #1
 8007db8:	2164      	movs	r1, #100	; 0x64
 8007dba:	f7fc ff09 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007dbe:	6020      	str	r0, [r4, #0]
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	f7fe bf83 	b.w	8006ccc <dwt_ioctl+0x154>
 8007dc6:	2c00      	cmp	r4, #0
 8007dc8:	f000 8598 	beq.w	80088fc <dwt_ioctl+0x1d84>
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2164      	movs	r1, #100	; 0x64
 8007dd0:	f7fc fefe 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007dd4:	6020      	str	r0, [r4, #0]
 8007dd6:	2500      	movs	r5, #0
 8007dd8:	f7fe bf78 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ddc:	00010030 	.word	0x00010030
 8007de0:	000f0004 	.word	0x000f0004
 8007de4:	000f0008 	.word	0x000f0008
 8007de8:	000f000c 	.word	0x000f000c
 8007dec:	000f0010 	.word	0x000f0010
 8007df0:	000f0014 	.word	0x000f0014
 8007df4:	000f0018 	.word	0x000f0018
 8007df8:	000f001c 	.word	0x000f001c
 8007dfc:	000f0028 	.word	0x000f0028
 8007e00:	00060004 	.word	0x00060004
 8007e04:	0011001a 	.word	0x0011001a
 8007e08:	00180034 	.word	0x00180034
 8007e0c:	0018002c 	.word	0x0018002c
 8007e10:	000c0014 	.word	0x000c0014
 8007e14:	00180020 	.word	0x00180020
 8007e18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007e1a:	7bdb      	ldrb	r3, [r3, #15]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d00b      	beq.n	8007e38 <dwt_ioctl+0x12c0>
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d112      	bne.n	8007e4a <dwt_ioctl+0x12d2>
 8007e24:	9400      	str	r4, [sp, #0]
 8007e26:	2305      	movs	r3, #5
 8007e28:	2228      	movs	r2, #40	; 0x28
 8007e2a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007e2e:	f7fc fec5 	bl	8004bbc <dwt_readfromdevice>
 8007e32:	2500      	movs	r5, #0
 8007e34:	f7fe bf4a 	b.w	8006ccc <dwt_ioctl+0x154>
 8007e38:	9400      	str	r4, [sp, #0]
 8007e3a:	2305      	movs	r3, #5
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	49d3      	ldr	r1, [pc, #844]	; (800818c <dwt_ioctl+0x1614>)
 8007e40:	f7fc febc 	bl	8004bbc <dwt_readfromdevice>
 8007e44:	2500      	movs	r5, #0
 8007e46:	f7fe bf41 	b.w	8006ccc <dwt_ioctl+0x154>
 8007e4a:	9400      	str	r4, [sp, #0]
 8007e4c:	2305      	movs	r3, #5
 8007e4e:	2200      	movs	r2, #0
 8007e50:	49cf      	ldr	r1, [pc, #828]	; (8008190 <dwt_ioctl+0x1618>)
 8007e52:	f7fc feb3 	bl	8004bbc <dwt_readfromdevice>
 8007e56:	2500      	movs	r5, #0
 8007e58:	f7fe bf38 	b.w	8006ccc <dwt_ioctl+0x154>
 8007e5c:	2c00      	cmp	r4, #0
 8007e5e:	f000 8550 	beq.w	8008902 <dwt_ioctl+0x1d8a>
 8007e62:	2200      	movs	r2, #0
 8007e64:	211c      	movs	r1, #28
 8007e66:	f7fc feb3 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	f7fe bf2d 	b.w	8006ccc <dwt_ioctl+0x154>
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	f000 8548 	beq.w	8008908 <dwt_ioctl+0x1d90>
 8007e78:	8825      	ldrh	r5, [r4, #0]
 8007e7a:	6867      	ldr	r7, [r4, #4]
 8007e7c:	7a23      	ldrb	r3, [r4, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 8545 	beq.w	800890e <dwt_ioctl+0x1d96>
 8007e84:	463c      	mov	r4, r7
 8007e86:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7fd fb3b 	bl	8005508 <_dwt_otpread>
 8007e92:	f844 0b04 	str.w	r0, [r4], #4
 8007e96:	3501      	adds	r5, #1
 8007e98:	b2ad      	uxth	r5, r5
 8007e9a:	42bc      	cmp	r4, r7
 8007e9c:	d1f5      	bne.n	8007e8a <dwt_ioctl+0x1312>
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	f7fe bf14 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	f000 8535 	beq.w	8008914 <dwt_ioctl+0x1d9c>
 8007eaa:	7823      	ldrb	r3, [r4, #0]
 8007eac:	2201      	movs	r2, #1
 8007eae:	2128      	movs	r1, #40	; 0x28
 8007eb0:	f7fd fa7d 	bl	80053ae <dwt_write8bitoffsetreg>
 8007eb4:	2500      	movs	r5, #0
 8007eb6:	f7fe bf09 	b.w	8006ccc <dwt_ioctl+0x154>
 8007eba:	f7fe fa87 	bl	80063cc <ull_run_pgfcal>
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	f7fe bf04 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	f7fe fb77 	bl	80065b8 <ull_pgf_cal>
 8007eca:	4605      	mov	r5, r0
 8007ecc:	f7fe befe 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ed0:	2c00      	cmp	r4, #0
 8007ed2:	f000 8522 	beq.w	800891a <dwt_ioctl+0x1da2>
 8007ed6:	78a5      	ldrb	r5, [r4, #2]
 8007ed8:	2101      	movs	r1, #1
 8007eda:	f7fd faeb 	bl	80054b4 <ull_force_clocks>
 8007ede:	2100      	movs	r1, #0
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7fd ff8b 	bl	8005dfc <ull_enable_rf_tx>
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7fd ffbc 	bl	8005e64 <ull_enable_rftx_blocks>
 8007eec:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	49a8      	ldr	r1, [pc, #672]	; (8008194 <dwt_ioctl+0x161c>)
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7fd fa5a 	bl	80053ae <dwt_write8bitoffsetreg>
 8007efa:	2301      	movs	r3, #1
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	23ff      	movs	r3, #255	; 0xff
 8007f00:	2200      	movs	r2, #0
 8007f02:	49a5      	ldr	r1, [pc, #660]	; (8008198 <dwt_ioctl+0x1620>)
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7fe f921 	bl	800614c <dwt_modify8bitoffsetreg>
 8007f0a:	4fa3      	ldr	r7, [pc, #652]	; (8008198 <dwt_ioctl+0x1620>)
 8007f0c:	2500      	movs	r5, #0
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4639      	mov	r1, r7
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7fc fe84 	bl	8004c20 <dwt_read8bitoffsetreg>
 8007f18:	f010 0f01 	tst.w	r0, #1
 8007f1c:	d1f7      	bne.n	8007f0e <dwt_ioctl+0x1396>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	499e      	ldr	r1, [pc, #632]	; (800819c <dwt_ioctl+0x1624>)
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7fc fe6a 	bl	8004bfc <dwt_read16bitoffsetreg>
 8007f28:	4605      	mov	r5, r0
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7fd fe30 	bl	8005b90 <ull_disable_rftx_blocks>
 8007f30:	2100      	movs	r1, #0
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7fd fe36 	bl	8005ba4 <ull_disable_rf_tx>
 8007f38:	2105      	movs	r1, #5
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7fd faba 	bl	80054b4 <ull_force_clocks>
 8007f40:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8007f44:	8025      	strh	r5, [r4, #0]
 8007f46:	2500      	movs	r5, #0
 8007f48:	f7fe bec0 	b.w	8006ccc <dwt_ioctl+0x154>
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	f7fe f9bb 	bl	80062c8 <ull_setdwstate>
 8007f52:	2101      	movs	r1, #1
 8007f54:	4630      	mov	r0, r6
 8007f56:	f7fe f9b7 	bl	80062c8 <ull_setdwstate>
 8007f5a:	2432      	movs	r4, #50	; 0x32
 8007f5c:	f04f 0814 	mov.w	r8, #20
 8007f60:	2700      	movs	r7, #0
 8007f62:	2544      	movs	r5, #68	; 0x44
 8007f64:	4640      	mov	r0, r8
 8007f66:	f7f8 fc7c 	bl	8000862 <deca_usleep>
 8007f6a:	463a      	mov	r2, r7
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7fc fe56 	bl	8004c20 <dwt_read8bitoffsetreg>
 8007f74:	f010 0f02 	tst.w	r0, #2
 8007f78:	d105      	bne.n	8007f86 <dwt_ioctl+0x140e>
 8007f7a:	1e63      	subs	r3, r4, #1
 8007f7c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007f80:	d1f0      	bne.n	8007f64 <dwt_ioctl+0x13ec>
 8007f82:	2501      	movs	r5, #1
 8007f84:	e000      	b.n	8007f88 <dwt_ioctl+0x1410>
 8007f86:	2500      	movs	r5, #0
 8007f88:	426d      	negs	r5, r5
 8007f8a:	f7fe be9f 	b.w	8006ccc <dwt_ioctl+0x154>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	f000 84c6 	beq.w	8008920 <dwt_ioctl+0x1da8>
 8007f94:	7823      	ldrb	r3, [r4, #0]
 8007f96:	031b      	lsls	r3, r3, #12
 8007f98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007f9c:	7862      	ldrb	r2, [r4, #1]
 8007f9e:	2a01      	cmp	r2, #1
 8007fa0:	bf08      	it	eq
 8007fa2:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8007fac:	2200      	movs	r2, #0
 8007fae:	497c      	ldr	r1, [pc, #496]	; (80081a0 <dwt_ioctl+0x1628>)
 8007fb0:	f7fd fee2 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8007fb4:	2500      	movs	r5, #0
 8007fb6:	f7fe be89 	b.w	8006ccc <dwt_ioctl+0x154>
 8007fba:	2c00      	cmp	r4, #0
 8007fbc:	f000 84b3 	beq.w	8008926 <dwt_ioctl+0x1dae>
 8007fc0:	6862      	ldr	r2, [r4, #4]
 8007fc2:	6821      	ldr	r1, [r4, #0]
 8007fc4:	f7fe f818 	bl	8005ff8 <ull_setgpiomode>
 8007fc8:	2500      	movs	r5, #0
 8007fca:	f7fe be7f 	b.w	8006ccc <dwt_ioctl+0x154>
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	f000 84ac 	beq.w	800892c <dwt_ioctl+0x1db4>
 8007fd4:	8823      	ldrh	r3, [r4, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4972      	ldr	r1, [pc, #456]	; (80081a4 <dwt_ioctl+0x162c>)
 8007fda:	f7fd fa3a 	bl	8005452 <dwt_write16bitoffsetreg>
 8007fde:	2500      	movs	r5, #0
 8007fe0:	f7fe be74 	b.w	8006ccc <dwt_ioctl+0x154>
 8007fe4:	2c00      	cmp	r4, #0
 8007fe6:	f000 84a4 	beq.w	8008932 <dwt_ioctl+0x1dba>
 8007fea:	6862      	ldr	r2, [r4, #4]
 8007fec:	8821      	ldrh	r1, [r4, #0]
 8007fee:	f7fe fb13 	bl	8006618 <ull_setgpiovalue>
 8007ff2:	2500      	movs	r5, #0
 8007ff4:	f7fe be6a 	b.w	8006ccc <dwt_ioctl+0x154>
 8007ff8:	2c00      	cmp	r4, #0
 8007ffa:	f000 849d 	beq.w	8008938 <dwt_ioctl+0x1dc0>
 8007ffe:	7865      	ldrb	r5, [r4, #1]
 8008000:	7823      	ldrb	r3, [r4, #0]
 8008002:	b18b      	cbz	r3, 8008028 <dwt_ioctl+0x14b0>
 8008004:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008006:	2200      	movs	r2, #0
 8008008:	73da      	strb	r2, [r3, #15]
 800800a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800800e:	2208      	movs	r2, #8
 8008010:	b1e5      	cbz	r5, 800804c <dwt_ioctl+0x14d4>
 8008012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008016:	9200      	str	r2, [sp, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	2110      	movs	r1, #16
 800801c:	4630      	mov	r0, r6
 800801e:	f7fd feab 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8008022:	2500      	movs	r5, #0
 8008024:	f7fe be52 	b.w	8006ccc <dwt_ioctl+0x154>
 8008028:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800802a:	2201      	movs	r2, #1
 800802c:	73da      	strb	r2, [r3, #15]
 800802e:	2318      	movs	r3, #24
 8008030:	2200      	movs	r2, #0
 8008032:	495d      	ldr	r1, [pc, #372]	; (80081a8 <dwt_ioctl+0x1630>)
 8008034:	f7fd fb0e 	bl	8005654 <dwt_write32bitoffsetreg>
 8008038:	23e8      	movs	r3, #232	; 0xe8
 800803a:	2200      	movs	r2, #0
 800803c:	495b      	ldr	r1, [pc, #364]	; (80081ac <dwt_ioctl+0x1634>)
 800803e:	4630      	mov	r0, r6
 8008040:	f7fd fb08 	bl	8005654 <dwt_write32bitoffsetreg>
 8008044:	f06f 0308 	mvn.w	r3, #8
 8008048:	2200      	movs	r2, #0
 800804a:	e7e1      	b.n	8008010 <dwt_ioctl+0x1498>
 800804c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008050:	e7e1      	b.n	8008016 <dwt_ioctl+0x149e>
 8008052:	2c00      	cmp	r4, #0
 8008054:	f000 8473 	beq.w	800893e <dwt_ioctl+0x1dc6>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	2130      	movs	r1, #48	; 0x30
 800805e:	f7fd faf9 	bl	8005654 <dwt_write32bitoffsetreg>
 8008062:	2500      	movs	r5, #0
 8008064:	f7fe be32 	b.w	8006ccc <dwt_ioctl+0x154>
 8008068:	2c00      	cmp	r4, #0
 800806a:	f000 846b 	beq.w	8008944 <dwt_ioctl+0x1dcc>
 800806e:	2200      	movs	r2, #0
 8008070:	4629      	mov	r1, r5
 8008072:	f7fc fdad 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	2500      	movs	r5, #0
 800807a:	f7fe be27 	b.w	8006ccc <dwt_ioctl+0x154>
 800807e:	4623      	mov	r3, r4
 8008080:	2200      	movs	r2, #0
 8008082:	4629      	mov	r1, r5
 8008084:	f7fd fae6 	bl	8005654 <dwt_write32bitoffsetreg>
 8008088:	2500      	movs	r5, #0
 800808a:	f7fe be1f 	b.w	8006ccc <dwt_ioctl+0x154>
 800808e:	2c00      	cmp	r4, #0
 8008090:	f000 845b 	beq.w	800894a <dwt_ioctl+0x1dd2>
 8008094:	2203      	movs	r2, #3
 8008096:	4946      	ldr	r1, [pc, #280]	; (80081b0 <dwt_ioctl+0x1638>)
 8008098:	f7fc fdc2 	bl	8004c20 <dwt_read8bitoffsetreg>
 800809c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80080a0:	7020      	strb	r0, [r4, #0]
 80080a2:	2500      	movs	r5, #0
 80080a4:	f7fe be12 	b.w	8006ccc <dwt_ioctl+0x154>
 80080a8:	2c00      	cmp	r4, #0
 80080aa:	f000 8451 	beq.w	8008950 <dwt_ioctl+0x1dd8>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	2200      	movs	r2, #0
 80080b2:	2144      	movs	r1, #68	; 0x44
 80080b4:	f7fd face 	bl	8005654 <dwt_write32bitoffsetreg>
 80080b8:	2500      	movs	r5, #0
 80080ba:	f7fe be07 	b.w	8006ccc <dwt_ioctl+0x154>
 80080be:	2c00      	cmp	r4, #0
 80080c0:	f000 8449 	beq.w	8008956 <dwt_ioctl+0x1dde>
 80080c4:	8823      	ldrh	r3, [r4, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	2148      	movs	r1, #72	; 0x48
 80080ca:	f7fd f9c2 	bl	8005452 <dwt_write16bitoffsetreg>
 80080ce:	2500      	movs	r5, #0
 80080d0:	f7fe bdfc 	b.w	8006ccc <dwt_ioctl+0x154>
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	f000 8441 	beq.w	800895c <dwt_ioctl+0x1de4>
 80080da:	2200      	movs	r2, #0
 80080dc:	2144      	movs	r1, #68	; 0x44
 80080de:	f7fc fd77 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80080e2:	6020      	str	r0, [r4, #0]
 80080e4:	2500      	movs	r5, #0
 80080e6:	f7fe bdf1 	b.w	8006ccc <dwt_ioctl+0x154>
 80080ea:	2c00      	cmp	r4, #0
 80080ec:	f000 8439 	beq.w	8008962 <dwt_ioctl+0x1dea>
 80080f0:	2200      	movs	r2, #0
 80080f2:	2148      	movs	r1, #72	; 0x48
 80080f4:	f7fc fd82 	bl	8004bfc <dwt_read16bitoffsetreg>
 80080f8:	6020      	str	r0, [r4, #0]
 80080fa:	2500      	movs	r5, #0
 80080fc:	f7fe bde6 	b.w	8006ccc <dwt_ioctl+0x154>
 8008100:	2c00      	cmp	r4, #0
 8008102:	f000 8431 	beq.w	8008968 <dwt_ioctl+0x1df0>
 8008106:	7823      	ldrb	r3, [r4, #0]
 8008108:	2200      	movs	r2, #0
 800810a:	492a      	ldr	r1, [pc, #168]	; (80081b4 <dwt_ioctl+0x163c>)
 800810c:	f7fd f94f 	bl	80053ae <dwt_write8bitoffsetreg>
 8008110:	2500      	movs	r5, #0
 8008112:	f7fe bddb 	b.w	8006ccc <dwt_ioctl+0x154>
 8008116:	2c00      	cmp	r4, #0
 8008118:	f000 8429 	beq.w	800896e <dwt_ioctl+0x1df6>
 800811c:	2200      	movs	r2, #0
 800811e:	2144      	movs	r1, #68	; 0x44
 8008120:	f7fc fd7e 	bl	8004c20 <dwt_read8bitoffsetreg>
 8008124:	7020      	strb	r0, [r4, #0]
 8008126:	2500      	movs	r5, #0
 8008128:	f7fe bdd0 	b.w	8006ccc <dwt_ioctl+0x154>
 800812c:	2c00      	cmp	r4, #0
 800812e:	f000 8421 	beq.w	8008974 <dwt_ioctl+0x1dfc>
 8008132:	f7fd f949 	bl	80053c8 <ull_getframelength>
 8008136:	6020      	str	r0, [r4, #0]
 8008138:	2500      	movs	r5, #0
 800813a:	f7fe bdc7 	b.w	8006ccc <dwt_ioctl+0x154>
 800813e:	2c00      	cmp	r4, #0
 8008140:	f000 841b 	beq.w	800897a <dwt_ioctl+0x1e02>
 8008144:	2200      	movs	r2, #0
 8008146:	491c      	ldr	r1, [pc, #112]	; (80081b8 <dwt_ioctl+0x1640>)
 8008148:	f7fc fd58 	bl	8004bfc <dwt_read16bitoffsetreg>
 800814c:	8020      	strh	r0, [r4, #0]
 800814e:	2500      	movs	r5, #0
 8008150:	f7fe bdbc 	b.w	8006ccc <dwt_ioctl+0x154>
 8008154:	2c00      	cmp	r4, #0
 8008156:	f000 8413 	beq.w	8008980 <dwt_ioctl+0x1e08>
 800815a:	2200      	movs	r2, #0
 800815c:	4917      	ldr	r1, [pc, #92]	; (80081bc <dwt_ioctl+0x1644>)
 800815e:	f7fc fd37 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008162:	6020      	str	r0, [r4, #0]
 8008164:	2500      	movs	r5, #0
 8008166:	f7fe bdb1 	b.w	8006ccc <dwt_ioctl+0x154>
 800816a:	2c00      	cmp	r4, #0
 800816c:	f000 840b 	beq.w	8008986 <dwt_ioctl+0x1e0e>
 8008170:	8823      	ldrh	r3, [r4, #0]
 8008172:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800817c:	2200      	movs	r2, #0
 800817e:	490f      	ldr	r1, [pc, #60]	; (80081bc <dwt_ioctl+0x1644>)
 8008180:	f7fe f996 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8008184:	2500      	movs	r5, #0
 8008186:	f7fe bda1 	b.w	8006ccc <dwt_ioctl+0x154>
 800818a:	bf00      	nop
 800818c:	00180028 	.word	0x00180028
 8008190:	000c0008 	.word	0x000c0008
 8008194:	0007001c 	.word	0x0007001c
 8008198:	00080010 	.word	0x00080010
 800819c:	00080014 	.word	0x00080014
 80081a0:	00070014 	.word	0x00070014
 80081a4:	00050008 	.word	0x00050008
 80081a8:	001f000c 	.word	0x001f000c
 80081ac:	001f0010 	.word	0x001f0010
 80081b0:	00030060 	.word	0x00030060
 80081b4:	00010024 	.word	0x00010024
 80081b8:	0005002c 	.word	0x0005002c
 80081bc:	000e001a 	.word	0x000e001a
 80081c0:	2c00      	cmp	r4, #0
 80081c2:	f000 83e3 	beq.w	800898c <dwt_ioctl+0x1e14>
 80081c6:	88a7      	ldrh	r7, [r4, #4]
 80081c8:	68a3      	ldr	r3, [r4, #8]
 80081ca:	9309      	str	r3, [sp, #36]	; 0x24
 80081cc:	7b21      	ldrb	r1, [r4, #12]
 80081ce:	9106      	str	r1, [sp, #24]
 80081d0:	6922      	ldr	r2, [r4, #16]
 80081d2:	9204      	str	r2, [sp, #16]
 80081d4:	6962      	ldr	r2, [r4, #20]
 80081d6:	9205      	str	r2, [sp, #20]
 80081d8:	f003 0203 	and.w	r2, r3, #3
 80081dc:	f3c3 0085 	ubfx	r0, r3, #2, #6
 80081e0:	2905      	cmp	r1, #5
 80081e2:	d142      	bne.n	800826a <dwt_ioctl+0x16f2>
 80081e4:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 80081e8:	bf28      	it	cs
 80081ea:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 80081ee:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80084d0 <dwt_ioctl+0x1958>
 80081f2:	2f04      	cmp	r7, #4
 80081f4:	d805      	bhi.n	8008202 <dwt_ioctl+0x168a>
 80081f6:	eb09 0300 	add.w	r3, r9, r0
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	3b05      	subs	r3, #5
 80081fe:	429f      	cmp	r7, r3
 8008200:	db3b      	blt.n	800827a <dwt_ioctl+0x1702>
 8008202:	2a01      	cmp	r2, #1
 8008204:	d877      	bhi.n	80082f6 <dwt_ioctl+0x177e>
 8008206:	4bae      	ldr	r3, [pc, #696]	; (80084c0 <dwt_ioctl+0x1948>)
 8008208:	5c99      	ldrb	r1, [r3, r2]
 800820a:	463e      	mov	r6, r7
 800820c:	42b9      	cmp	r1, r7
 800820e:	da74      	bge.n	80082fa <dwt_ioctl+0x1782>
 8008210:	1c55      	adds	r5, r2, #1
 8008212:	fa53 f585 	uxtab	r5, r3, r5
 8008216:	2300      	movs	r3, #0
 8008218:	440b      	add	r3, r1
 800821a:	b29b      	uxth	r3, r3
 800821c:	3201      	adds	r2, #1
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	2a02      	cmp	r2, #2
 8008222:	d005      	beq.n	8008230 <dwt_ioctl+0x16b8>
 8008224:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008228:	eba6 0c03 	sub.w	ip, r6, r3
 800822c:	4561      	cmp	r1, ip
 800822e:	dbf3      	blt.n	8008218 <dwt_ioctl+0x16a0>
 8008230:	429f      	cmp	r7, r3
 8008232:	bf08      	it	eq
 8008234:	9003      	streq	r0, [sp, #12]
 8008236:	d064      	beq.n	8008302 <dwt_ioctl+0x178a>
 8008238:	f107 0805 	add.w	r8, r7, #5
 800823c:	fa1f f888 	uxth.w	r8, r8
 8008240:	2580      	movs	r5, #128	; 0x80
 8008242:	2100      	movs	r1, #0
 8008244:	9107      	str	r1, [sp, #28]
 8008246:	9103      	str	r1, [sp, #12]
 8008248:	9108      	str	r1, [sp, #32]
 800824a:	460e      	mov	r6, r1
 800824c:	f04f 0b05 	mov.w	fp, #5
 8008250:	46be      	mov	lr, r7
 8008252:	455f      	cmp	r7, fp
 8008254:	bf38      	it	cc
 8008256:	46de      	movcc	lr, fp
 8008258:	f1ae 0e05 	sub.w	lr, lr, #5
 800825c:	fa1f fe8e 	uxth.w	lr, lr
 8008260:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80084c0 <dwt_ioctl+0x1948>
 8008264:	46bc      	mov	ip, r7
 8008266:	460f      	mov	r7, r1
 8008268:	e3dd      	b.n	8008a26 <dwt_ioctl+0x1eae>
 800826a:	f240 1331 	movw	r3, #305	; 0x131
 800826e:	429f      	cmp	r7, r3
 8008270:	bf28      	it	cs
 8008272:	461f      	movcs	r7, r3
 8008274:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80084d4 <dwt_ioctl+0x195c>
 8008278:	e7bb      	b.n	80081f2 <dwt_ioctl+0x167a>
 800827a:	2300      	movs	r3, #0
 800827c:	9a05      	ldr	r2, [sp, #20]
 800827e:	8013      	strh	r3, [r2, #0]
 8008280:	9a04      	ldr	r2, [sp, #16]
 8008282:	4611      	mov	r1, r2
 8008284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008286:	600a      	str	r2, [r1, #0]
 8008288:	e04a      	b.n	8008320 <dwt_ioctl+0x17a8>
 800828a:	2300      	movs	r3, #0
 800828c:	9a05      	ldr	r2, [sp, #20]
 800828e:	8013      	strh	r3, [r2, #0]
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	461a      	mov	r2, r3
 8008294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800829c:	e040      	b.n	8008320 <dwt_ioctl+0x17a8>
 800829e:	fa1f fb81 	uxth.w	fp, r1
 80082a2:	9207      	str	r2, [sp, #28]
 80082a4:	9003      	str	r0, [sp, #12]
 80082a6:	9308      	str	r3, [sp, #32]
 80082a8:	2701      	movs	r7, #1
 80082aa:	e3cd      	b.n	8008a48 <dwt_ioctl+0x1ed0>
 80082ac:	2f00      	cmp	r7, #0
 80082ae:	f040 83a1 	bne.w	80089f4 <dwt_ioctl+0x1e7c>
 80082b2:	4598      	cmp	r8, r3
 80082b4:	f200 83a3 	bhi.w	80089fe <dwt_ioctl+0x1e86>
 80082b8:	2e00      	cmp	r6, #0
 80082ba:	d038      	beq.n	800832e <dwt_ioctl+0x17b6>
 80082bc:	283f      	cmp	r0, #63	; 0x3f
 80082be:	f000 83c8 	beq.w	8008a52 <dwt_ioctl+0x1eda>
 80082c2:	2700      	movs	r7, #0
 80082c4:	f819 1000 	ldrb.w	r1, [r9, r0]
 80082c8:	1a5b      	subs	r3, r3, r1
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	1e46      	subs	r6, r0, #1
 80082ce:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 80082d2:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 80082d6:	bf18      	it	ne
 80082d8:	2601      	movne	r6, #1
 80082da:	e39c      	b.n	8008a16 <dwt_ioctl+0x1e9e>
 80082dc:	9906      	ldr	r1, [sp, #24]
 80082de:	2909      	cmp	r1, #9
 80082e0:	f040 83bd 	bne.w	8008a5e <dwt_ioctl+0x1ee6>
 80082e4:	213f      	movs	r1, #63	; 0x3f
 80082e6:	9103      	str	r1, [sp, #12]
 80082e8:	e00b      	b.n	8008302 <dwt_ioctl+0x178a>
 80082ea:	b2b3      	uxth	r3, r6
 80082ec:	3201      	adds	r2, #1
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	213f      	movs	r1, #63	; 0x3f
 80082f2:	9103      	str	r1, [sp, #12]
 80082f4:	e005      	b.n	8008302 <dwt_ioctl+0x178a>
 80082f6:	2300      	movs	r3, #0
 80082f8:	e79a      	b.n	8008230 <dwt_ioctl+0x16b8>
 80082fa:	2300      	movs	r3, #0
 80082fc:	e798      	b.n	8008230 <dwt_ioctl+0x16b8>
 80082fe:	9003      	str	r0, [sp, #12]
 8008300:	4663      	mov	r3, ip
 8008302:	9905      	ldr	r1, [sp, #20]
 8008304:	800b      	strh	r3, [r1, #0]
 8008306:	9b03      	ldr	r3, [sp, #12]
 8008308:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	0413      	lsls	r3, r2, #16
 8008310:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008314:	4313      	orrs	r3, r2
 8008316:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800831a:	9a04      	ldr	r2, [sp, #16]
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	2300      	movs	r3, #0
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	2500      	movs	r5, #0
 8008324:	f7fe bcd2 	b.w	8006ccc <dwt_ioctl+0x154>
 8008328:	9a07      	ldr	r2, [sp, #28]
 800832a:	9b08      	ldr	r3, [sp, #32]
 800832c:	e7e9      	b.n	8008302 <dwt_ioctl+0x178a>
 800832e:	9003      	str	r0, [sp, #12]
 8008330:	e7e7      	b.n	8008302 <dwt_ioctl+0x178a>
 8008332:	9a07      	ldr	r2, [sp, #28]
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	e7e4      	b.n	8008302 <dwt_ioctl+0x178a>
 8008338:	213f      	movs	r1, #63	; 0x3f
 800833a:	9103      	str	r1, [sp, #12]
 800833c:	e7e1      	b.n	8008302 <dwt_ioctl+0x178a>
 800833e:	2c00      	cmp	r4, #0
 8008340:	f000 8327 	beq.w	8008992 <dwt_ioctl+0x1e1a>
 8008344:	7825      	ldrb	r5, [r4, #0]
 8008346:	6862      	ldr	r2, [r4, #4]
 8008348:	2a01      	cmp	r2, #1
 800834a:	bf15      	itete	ne
 800834c:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8008350:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8008354:	27df      	movne	r7, #223	; 0xdf
 8008356:	27ef      	moveq	r7, #239	; 0xef
 8008358:	bf14      	ite	ne
 800835a:	f04f 0820 	movne.w	r8, #32
 800835e:	f04f 0810 	moveq.w	r8, #16
 8008362:	2400      	movs	r4, #0
 8008364:	9400      	str	r4, [sp, #0]
 8008366:	4622      	mov	r2, r4
 8008368:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800836c:	f7fd fd04 	bl	8005d78 <dwt_modify32bitoffsetreg>
 8008370:	9400      	str	r4, [sp, #0]
 8008372:	463b      	mov	r3, r7
 8008374:	4622      	mov	r2, r4
 8008376:	4953      	ldr	r1, [pc, #332]	; (80084c4 <dwt_ioctl+0x194c>)
 8008378:	4630      	mov	r0, r6
 800837a:	f7fd fee7 	bl	800614c <dwt_modify8bitoffsetreg>
 800837e:	2d01      	cmp	r5, #1
 8008380:	d003      	beq.n	800838a <dwt_ioctl+0x1812>
 8008382:	b165      	cbz	r5, 800839e <dwt_ioctl+0x1826>
 8008384:	2500      	movs	r5, #0
 8008386:	f7fe bca1 	b.w	8006ccc <dwt_ioctl+0x154>
 800838a:	4625      	mov	r5, r4
 800838c:	9400      	str	r4, [sp, #0]
 800838e:	463b      	mov	r3, r7
 8008390:	4622      	mov	r2, r4
 8008392:	494d      	ldr	r1, [pc, #308]	; (80084c8 <dwt_ioctl+0x1950>)
 8008394:	4630      	mov	r0, r6
 8008396:	f7fd fed9 	bl	800614c <dwt_modify8bitoffsetreg>
 800839a:	f7fe bc97 	b.w	8006ccc <dwt_ioctl+0x154>
 800839e:	f8cd 8000 	str.w	r8, [sp]
 80083a2:	23ff      	movs	r3, #255	; 0xff
 80083a4:	2200      	movs	r2, #0
 80083a6:	4948      	ldr	r1, [pc, #288]	; (80084c8 <dwt_ioctl+0x1950>)
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7fd fecf 	bl	800614c <dwt_modify8bitoffsetreg>
 80083ae:	f7fe bc8d 	b.w	8006ccc <dwt_ioctl+0x154>
 80083b2:	2c00      	cmp	r4, #0
 80083b4:	f000 82f0 	beq.w	8008998 <dwt_ioctl+0x1e20>
 80083b8:	7822      	ldrb	r2, [r4, #0]
 80083ba:	f012 0f01 	tst.w	r2, #1
 80083be:	d02d      	beq.n	800841c <dwt_ioctl+0x18a4>
 80083c0:	0157      	lsls	r7, r2, #5
 80083c2:	f007 0740 	and.w	r7, r7, #64	; 0x40
 80083c6:	2440      	movs	r4, #64	; 0x40
 80083c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80083cc:	f012 0f04 	tst.w	r2, #4
 80083d0:	d028      	beq.n	8008424 <dwt_ioctl+0x18ac>
 80083d2:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80083d6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80083da:	0112      	lsls	r2, r2, #4
 80083dc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80083e0:	4317      	orrs	r7, r2
 80083e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80083e6:	9200      	str	r2, [sp, #0]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	2200      	movs	r2, #0
 80083ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7fd fcc1 	bl	8005d78 <dwt_modify32bitoffsetreg>
 80083f6:	43e4      	mvns	r4, r4
 80083f8:	b2a4      	uxth	r4, r4
 80083fa:	2500      	movs	r5, #0
 80083fc:	9500      	str	r5, [sp, #0]
 80083fe:	4623      	mov	r3, r4
 8008400:	462a      	mov	r2, r5
 8008402:	4930      	ldr	r1, [pc, #192]	; (80084c4 <dwt_ioctl+0x194c>)
 8008404:	4630      	mov	r0, r6
 8008406:	f7fe f853 	bl	80064b0 <dwt_modify16bitoffsetreg>
 800840a:	9700      	str	r7, [sp, #0]
 800840c:	4623      	mov	r3, r4
 800840e:	462a      	mov	r2, r5
 8008410:	492d      	ldr	r1, [pc, #180]	; (80084c8 <dwt_ioctl+0x1950>)
 8008412:	4630      	mov	r0, r6
 8008414:	f7fe f84c 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8008418:	f7fe bc58 	b.w	8006ccc <dwt_ioctl+0x154>
 800841c:	2700      	movs	r7, #0
 800841e:	463c      	mov	r4, r7
 8008420:	463b      	mov	r3, r7
 8008422:	e7d3      	b.n	80083cc <dwt_ioctl+0x1854>
 8008424:	2200      	movs	r2, #0
 8008426:	e7de      	b.n	80083e6 <dwt_ioctl+0x186e>
 8008428:	2308      	movs	r3, #8
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	23ff      	movs	r3, #255	; 0xff
 800842e:	2201      	movs	r2, #1
 8008430:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008434:	f7fd fe8a 	bl	800614c <dwt_modify8bitoffsetreg>
 8008438:	4c24      	ldr	r4, [pc, #144]	; (80084cc <dwt_ioctl+0x1954>)
 800843a:	2302      	movs	r3, #2
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	23ff      	movs	r3, #255	; 0xff
 8008440:	2203      	movs	r2, #3
 8008442:	4621      	mov	r1, r4
 8008444:	4630      	mov	r0, r6
 8008446:	f7fd fe81 	bl	800614c <dwt_modify8bitoffsetreg>
 800844a:	2500      	movs	r5, #0
 800844c:	9500      	str	r5, [sp, #0]
 800844e:	23f7      	movs	r3, #247	; 0xf7
 8008450:	2201      	movs	r2, #1
 8008452:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008456:	4630      	mov	r0, r6
 8008458:	f7fd fe78 	bl	800614c <dwt_modify8bitoffsetreg>
 800845c:	9500      	str	r5, [sp, #0]
 800845e:	23fd      	movs	r3, #253	; 0xfd
 8008460:	2203      	movs	r2, #3
 8008462:	4621      	mov	r1, r4
 8008464:	4630      	mov	r0, r6
 8008466:	f7fd fe71 	bl	800614c <dwt_modify8bitoffsetreg>
 800846a:	f7fe bc2f 	b.w	8006ccc <dwt_ioctl+0x154>
 800846e:	2c00      	cmp	r4, #0
 8008470:	f000 8295 	beq.w	800899e <dwt_ioctl+0x1e26>
 8008474:	8863      	ldrh	r3, [r4, #2]
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800847c:	7822      	ldrb	r2, [r4, #0]
 800847e:	b10a      	cbz	r2, 8008484 <dwt_ioctl+0x190c>
 8008480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	f24f 0307 	movw	r3, #61447	; 0xf007
 800848a:	2200      	movs	r2, #0
 800848c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008490:	4630      	mov	r0, r6
 8008492:	f7fe f80d 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8008496:	2500      	movs	r5, #0
 8008498:	f7fe bc18 	b.w	8006ccc <dwt_ioctl+0x154>
 800849c:	2c00      	cmp	r4, #0
 800849e:	f000 8281 	beq.w	80089a4 <dwt_ioctl+0x1e2c>
 80084a2:	b2e3      	uxtb	r3, r4
 80084a4:	1c9a      	adds	r2, r3, #2
 80084a6:	2301      	movs	r3, #1
 80084a8:	4093      	lsls	r3, r2
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2200      	movs	r2, #0
 80084b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80084b4:	f7fc ff7b 	bl	80053ae <dwt_write8bitoffsetreg>
 80084b8:	2500      	movs	r5, #0
 80084ba:	f7fe bc07 	b.w	8006ccc <dwt_ioctl+0x154>
 80084be:	bf00      	nop
 80084c0:	080122a8 	.word	0x080122a8
 80084c4:	00050008 	.word	0x00050008
 80084c8:	0005000c 	.word	0x0005000c
 80084cc:	00110008 	.word	0x00110008
 80084d0:	08012228 	.word	0x08012228
 80084d4:	08012268 	.word	0x08012268
 80084d8:	2c00      	cmp	r4, #0
 80084da:	f000 8266 	beq.w	80089aa <dwt_ioctl+0x1e32>
 80084de:	7ae3      	ldrb	r3, [r4, #11]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 8265 	beq.w	80089b0 <dwt_ioctl+0x1e38>
 80084e6:	7b63      	ldrb	r3, [r4, #13]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d921      	bls.n	8008530 <dwt_ioctl+0x19b8>
 80084ec:	7b22      	ldrb	r2, [r4, #12]
 80084ee:	4bd7      	ldr	r3, [pc, #860]	; (800884c <dwt_ioctl+0x1cd4>)
 80084f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80084f4:	0112      	lsls	r2, r2, #4
 80084f6:	0ad3      	lsrs	r3, r2, #11
 80084f8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80084fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008500:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008504:	bf28      	it	cs
 8008506:	3301      	addcs	r3, #1
 8008508:	b29b      	uxth	r3, r3
 800850a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	f64f 7380 	movw	r3, #65408	; 0xff80
 8008514:	2202      	movs	r2, #2
 8008516:	49ce      	ldr	r1, [pc, #824]	; (8008850 <dwt_ioctl+0x1cd8>)
 8008518:	4630      	mov	r0, r6
 800851a:	f7fd ffc9 	bl	80064b0 <dwt_modify16bitoffsetreg>
 800851e:	2394      	movs	r3, #148	; 0x94
 8008520:	2200      	movs	r2, #0
 8008522:	49cc      	ldr	r1, [pc, #816]	; (8008854 <dwt_ioctl+0x1cdc>)
 8008524:	4630      	mov	r0, r6
 8008526:	f7fc ff42 	bl	80053ae <dwt_write8bitoffsetreg>
 800852a:	2500      	movs	r5, #0
 800852c:	f7fe bbce 	b.w	8006ccc <dwt_ioctl+0x154>
 8008530:	7b22      	ldrb	r2, [r4, #12]
 8008532:	4bc6      	ldr	r3, [pc, #792]	; (800884c <dwt_ioctl+0x1cd4>)
 8008534:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008538:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800853c:	fb02 f203 	mul.w	r2, r2, r3
 8008540:	0c93      	lsrs	r3, r2, #18
 8008542:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8008546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800854a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800854e:	bf28      	it	cs
 8008550:	3301      	addcs	r3, #1
 8008552:	b29b      	uxth	r3, r3
 8008554:	e7d9      	b.n	800850a <dwt_ioctl+0x1992>
 8008556:	2c00      	cmp	r4, #0
 8008558:	f000 822d 	beq.w	80089b6 <dwt_ioctl+0x1e3e>
 800855c:	2200      	movs	r2, #0
 800855e:	49be      	ldr	r1, [pc, #760]	; (8008858 <dwt_ioctl+0x1ce0>)
 8008560:	f7fc fb36 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008564:	6020      	str	r0, [r4, #0]
 8008566:	2500      	movs	r5, #0
 8008568:	f7fe bbb0 	b.w	8006ccc <dwt_ioctl+0x154>
 800856c:	2c00      	cmp	r4, #0
 800856e:	f000 8225 	beq.w	80089bc <dwt_ioctl+0x1e44>
 8008572:	2200      	movs	r2, #0
 8008574:	49b9      	ldr	r1, [pc, #740]	; (800885c <dwt_ioctl+0x1ce4>)
 8008576:	f7fc fb2b 	bl	8004bd0 <dwt_read32bitoffsetreg>
 800857a:	6020      	str	r0, [r4, #0]
 800857c:	2500      	movs	r5, #0
 800857e:	f7fe bba5 	b.w	8006ccc <dwt_ioctl+0x154>
 8008582:	2c00      	cmp	r4, #0
 8008584:	f000 821d 	beq.w	80089c2 <dwt_ioctl+0x1e4a>
 8008588:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	2500      	movs	r5, #0
 8008590:	f7fe bb9c 	b.w	8006ccc <dwt_ioctl+0x154>
 8008594:	2c00      	cmp	r4, #0
 8008596:	f000 8217 	beq.w	80089c8 <dwt_ioctl+0x1e50>
 800859a:	2500      	movs	r5, #0
 800859c:	950b      	str	r5, [sp, #44]	; 0x2c
 800859e:	af10      	add	r7, sp, #64	; 0x40
 80085a0:	2319      	movs	r3, #25
 80085a2:	f847 3d10 	str.w	r3, [r7, #-16]!
 80085a6:	9700      	str	r7, [sp, #0]
 80085a8:	2304      	movs	r3, #4
 80085aa:	462a      	mov	r2, r5
 80085ac:	49ac      	ldr	r1, [pc, #688]	; (8008860 <dwt_ioctl+0x1ce8>)
 80085ae:	f7fc fef3 	bl	8005398 <dwt_writetodevice>
 80085b2:	f641 7348 	movw	r3, #8008	; 0x1f48
 80085b6:	930c      	str	r3, [sp, #48]	; 0x30
 80085b8:	9700      	str	r7, [sp, #0]
 80085ba:	2304      	movs	r3, #4
 80085bc:	462a      	mov	r2, r5
 80085be:	49a9      	ldr	r1, [pc, #676]	; (8008864 <dwt_ioctl+0x1cec>)
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7fc fee9 	bl	8005398 <dwt_writetodevice>
 80085c6:	ab0b      	add	r3, sp, #44	; 0x2c
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	2304      	movs	r3, #4
 80085cc:	462a      	mov	r2, r5
 80085ce:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7fc faf2 	bl	8004bbc <dwt_readfromdevice>
 80085d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	f7fe bb76 	b.w	8006ccc <dwt_ioctl+0x154>
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	f000 81f4 	beq.w	80089ce <dwt_ioctl+0x1e56>
 80085e6:	2200      	movs	r2, #0
 80085e8:	499f      	ldr	r1, [pc, #636]	; (8008868 <dwt_ioctl+0x1cf0>)
 80085ea:	f7fc faf1 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80085ee:	b280      	uxth	r0, r0
 80085f0:	6020      	str	r0, [r4, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	499d      	ldr	r1, [pc, #628]	; (800886c <dwt_ioctl+0x1cf4>)
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7fc faea 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80085fc:	0d43      	lsrs	r3, r0, #21
 80085fe:	019b      	lsls	r3, r3, #6
 8008600:	b29b      	uxth	r3, r3
 8008602:	6063      	str	r3, [r4, #4]
 8008604:	2500      	movs	r5, #0
 8008606:	f7fe bb61 	b.w	8006ccc <dwt_ioctl+0x154>
 800860a:	2c00      	cmp	r4, #0
 800860c:	f000 81e2 	beq.w	80089d4 <dwt_ioctl+0x1e5c>
 8008610:	7d63      	ldrb	r3, [r4, #21]
 8008612:	b12b      	cbz	r3, 8008620 <dwt_ioctl+0x1aa8>
 8008614:	2b01      	cmp	r3, #1
 8008616:	d037      	beq.n	8008688 <dwt_ioctl+0x1b10>
 8008618:	2b02      	cmp	r3, #2
 800861a:	d05e      	beq.n	80086da <dwt_ioctl+0x1b62>
 800861c:	23ff      	movs	r3, #255	; 0xff
 800861e:	e02f      	b.n	8008680 <dwt_ioctl+0x1b08>
 8008620:	2200      	movs	r2, #0
 8008622:	4993      	ldr	r1, [pc, #588]	; (8008870 <dwt_ioctl+0x1cf8>)
 8008624:	f7fc fad4 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008628:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800862c:	6020      	str	r0, [r4, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	4990      	ldr	r1, [pc, #576]	; (8008874 <dwt_ioctl+0x1cfc>)
 8008632:	4630      	mov	r0, r6
 8008634:	f7fc facc 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008638:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	498d      	ldr	r1, [pc, #564]	; (8008878 <dwt_ioctl+0x1d00>)
 8008642:	4630      	mov	r0, r6
 8008644:	f7fc fac4 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008648:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800864c:	60a0      	str	r0, [r4, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	498a      	ldr	r1, [pc, #552]	; (800887c <dwt_ioctl+0x1d04>)
 8008652:	4630      	mov	r0, r6
 8008654:	f7fc fabc 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008658:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800865c:	60e0      	str	r0, [r4, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	4987      	ldr	r1, [pc, #540]	; (8008880 <dwt_ioctl+0x1d08>)
 8008662:	4630      	mov	r0, r6
 8008664:	f7fc fab4 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008668:	f3c0 0010 	ubfx	r0, r0, #0, #17
 800866c:	6120      	str	r0, [r4, #16]
 800866e:	2203      	movs	r2, #3
 8008670:	4979      	ldr	r1, [pc, #484]	; (8008858 <dwt_ioctl+0x1ce0>)
 8008672:	4630      	mov	r0, r6
 8008674:	f7fc fad4 	bl	8004c20 <dwt_read8bitoffsetreg>
 8008678:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800867c:	7520      	strb	r0, [r4, #20]
 800867e:	2300      	movs	r3, #0
 8008680:	75a3      	strb	r3, [r4, #22]
 8008682:	2500      	movs	r5, #0
 8008684:	f7fe bb22 	b.w	8006ccc <dwt_ioctl+0x154>
 8008688:	2200      	movs	r2, #0
 800868a:	497e      	ldr	r1, [pc, #504]	; (8008884 <dwt_ioctl+0x1d0c>)
 800868c:	f7fc faa0 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008690:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008694:	6020      	str	r0, [r4, #0]
 8008696:	2200      	movs	r2, #0
 8008698:	497b      	ldr	r1, [pc, #492]	; (8008888 <dwt_ioctl+0x1d10>)
 800869a:	4630      	mov	r0, r6
 800869c:	f7fc fa98 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80086a0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80086a4:	6060      	str	r0, [r4, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	4978      	ldr	r1, [pc, #480]	; (800888c <dwt_ioctl+0x1d14>)
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7fc fa90 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80086b0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80086b4:	60a0      	str	r0, [r4, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80086bc:	4630      	mov	r0, r6
 80086be:	f7fc fa87 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80086c2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80086c6:	60e0      	str	r0, [r4, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	4971      	ldr	r1, [pc, #452]	; (8008890 <dwt_ioctl+0x1d18>)
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7fc fa7f 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80086d2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80086d6:	6120      	str	r0, [r4, #16]
 80086d8:	e7c9      	b.n	800866e <dwt_ioctl+0x1af6>
 80086da:	2200      	movs	r2, #0
 80086dc:	496d      	ldr	r1, [pc, #436]	; (8008894 <dwt_ioctl+0x1d1c>)
 80086de:	f7fc fa77 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80086e2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80086e6:	6020      	str	r0, [r4, #0]
 80086e8:	2200      	movs	r2, #0
 80086ea:	496b      	ldr	r1, [pc, #428]	; (8008898 <dwt_ioctl+0x1d20>)
 80086ec:	4630      	mov	r0, r6
 80086ee:	f7fc fa6f 	bl	8004bd0 <dwt_read32bitoffsetreg>
 80086f2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80086f6:	6060      	str	r0, [r4, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	4968      	ldr	r1, [pc, #416]	; (800889c <dwt_ioctl+0x1d24>)
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7fc fa67 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008702:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008706:	60a0      	str	r0, [r4, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	4965      	ldr	r1, [pc, #404]	; (80088a0 <dwt_ioctl+0x1d28>)
 800870c:	4630      	mov	r0, r6
 800870e:	f7fc fa5f 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008712:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8008716:	60e0      	str	r0, [r4, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	4962      	ldr	r1, [pc, #392]	; (80088a4 <dwt_ioctl+0x1d2c>)
 800871c:	4630      	mov	r0, r6
 800871e:	f7fc fa57 	bl	8004bd0 <dwt_read32bitoffsetreg>
 8008722:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8008726:	6120      	str	r0, [r4, #16]
 8008728:	e7a1      	b.n	800866e <dwt_ioctl+0x1af6>
 800872a:	2500      	movs	r5, #0
 800872c:	f7fe bace 	b.w	8006ccc <dwt_ioctl+0x154>
 8008730:	2500      	movs	r5, #0
 8008732:	f7fe bacb 	b.w	8006ccc <dwt_ioctl+0x154>
 8008736:	2500      	movs	r5, #0
 8008738:	f7fe bac8 	b.w	8006ccc <dwt_ioctl+0x154>
 800873c:	2500      	movs	r5, #0
 800873e:	f7fe bac5 	b.w	8006ccc <dwt_ioctl+0x154>
 8008742:	2500      	movs	r5, #0
 8008744:	f7fe bac2 	b.w	8006ccc <dwt_ioctl+0x154>
 8008748:	2500      	movs	r5, #0
 800874a:	f7fe babf 	b.w	8006ccc <dwt_ioctl+0x154>
 800874e:	2500      	movs	r5, #0
 8008750:	f7fe babc 	b.w	8006ccc <dwt_ioctl+0x154>
 8008754:	2500      	movs	r5, #0
 8008756:	f7fe bab9 	b.w	8006ccc <dwt_ioctl+0x154>
 800875a:	2500      	movs	r5, #0
 800875c:	f7fe bab6 	b.w	8006ccc <dwt_ioctl+0x154>
 8008760:	2500      	movs	r5, #0
 8008762:	f7fe bab3 	b.w	8006ccc <dwt_ioctl+0x154>
 8008766:	2500      	movs	r5, #0
 8008768:	f7fe bab0 	b.w	8006ccc <dwt_ioctl+0x154>
 800876c:	2500      	movs	r5, #0
 800876e:	f7fe baad 	b.w	8006ccc <dwt_ioctl+0x154>
 8008772:	2500      	movs	r5, #0
 8008774:	f7fe baaa 	b.w	8006ccc <dwt_ioctl+0x154>
 8008778:	2500      	movs	r5, #0
 800877a:	f7fe baa7 	b.w	8006ccc <dwt_ioctl+0x154>
 800877e:	2500      	movs	r5, #0
 8008780:	f7fe baa4 	b.w	8006ccc <dwt_ioctl+0x154>
 8008784:	2500      	movs	r5, #0
 8008786:	f7fe baa1 	b.w	8006ccc <dwt_ioctl+0x154>
 800878a:	2500      	movs	r5, #0
 800878c:	f7fe ba9e 	b.w	8006ccc <dwt_ioctl+0x154>
 8008790:	2500      	movs	r5, #0
 8008792:	f7fe ba9b 	b.w	8006ccc <dwt_ioctl+0x154>
 8008796:	2500      	movs	r5, #0
 8008798:	f7fe ba98 	b.w	8006ccc <dwt_ioctl+0x154>
 800879c:	2500      	movs	r5, #0
 800879e:	f7fe ba95 	b.w	8006ccc <dwt_ioctl+0x154>
 80087a2:	2500      	movs	r5, #0
 80087a4:	f7fe ba92 	b.w	8006ccc <dwt_ioctl+0x154>
 80087a8:	2500      	movs	r5, #0
 80087aa:	f7fe ba8f 	b.w	8006ccc <dwt_ioctl+0x154>
 80087ae:	2500      	movs	r5, #0
 80087b0:	f7fe ba8c 	b.w	8006ccc <dwt_ioctl+0x154>
 80087b4:	2500      	movs	r5, #0
 80087b6:	f7fe ba89 	b.w	8006ccc <dwt_ioctl+0x154>
 80087ba:	2500      	movs	r5, #0
 80087bc:	f7fe ba86 	b.w	8006ccc <dwt_ioctl+0x154>
 80087c0:	2500      	movs	r5, #0
 80087c2:	f7fe ba83 	b.w	8006ccc <dwt_ioctl+0x154>
 80087c6:	2500      	movs	r5, #0
 80087c8:	f7fe ba80 	b.w	8006ccc <dwt_ioctl+0x154>
 80087cc:	2500      	movs	r5, #0
 80087ce:	f7fe ba7d 	b.w	8006ccc <dwt_ioctl+0x154>
 80087d2:	2500      	movs	r5, #0
 80087d4:	f7fe ba7a 	b.w	8006ccc <dwt_ioctl+0x154>
 80087d8:	2500      	movs	r5, #0
 80087da:	f7fe ba77 	b.w	8006ccc <dwt_ioctl+0x154>
 80087de:	2500      	movs	r5, #0
 80087e0:	f7fe ba74 	b.w	8006ccc <dwt_ioctl+0x154>
 80087e4:	2500      	movs	r5, #0
 80087e6:	f7fe ba71 	b.w	8006ccc <dwt_ioctl+0x154>
 80087ea:	2500      	movs	r5, #0
 80087ec:	f7fe ba6e 	b.w	8006ccc <dwt_ioctl+0x154>
 80087f0:	2500      	movs	r5, #0
 80087f2:	f7fe ba6b 	b.w	8006ccc <dwt_ioctl+0x154>
 80087f6:	2500      	movs	r5, #0
 80087f8:	f7fe ba68 	b.w	8006ccc <dwt_ioctl+0x154>
 80087fc:	2500      	movs	r5, #0
 80087fe:	f7fe ba65 	b.w	8006ccc <dwt_ioctl+0x154>
 8008802:	2500      	movs	r5, #0
 8008804:	f7fe ba62 	b.w	8006ccc <dwt_ioctl+0x154>
 8008808:	2500      	movs	r5, #0
 800880a:	f7fe ba5f 	b.w	8006ccc <dwt_ioctl+0x154>
 800880e:	2500      	movs	r5, #0
 8008810:	f7fe ba5c 	b.w	8006ccc <dwt_ioctl+0x154>
 8008814:	2500      	movs	r5, #0
 8008816:	f7fe ba59 	b.w	8006ccc <dwt_ioctl+0x154>
 800881a:	2500      	movs	r5, #0
 800881c:	f7fe ba56 	b.w	8006ccc <dwt_ioctl+0x154>
 8008820:	2500      	movs	r5, #0
 8008822:	f7fe ba53 	b.w	8006ccc <dwt_ioctl+0x154>
 8008826:	2500      	movs	r5, #0
 8008828:	f7fe ba50 	b.w	8006ccc <dwt_ioctl+0x154>
 800882c:	2500      	movs	r5, #0
 800882e:	f7fe ba4d 	b.w	8006ccc <dwt_ioctl+0x154>
 8008832:	2500      	movs	r5, #0
 8008834:	f7fe ba4a 	b.w	8006ccc <dwt_ioctl+0x154>
 8008838:	2500      	movs	r5, #0
 800883a:	f7fe ba47 	b.w	8006ccc <dwt_ioctl+0x154>
 800883e:	2500      	movs	r5, #0
 8008840:	f7fe ba44 	b.w	8006ccc <dwt_ioctl+0x154>
 8008844:	2500      	movs	r5, #0
 8008846:	f7fe ba41 	b.w	8006ccc <dwt_ioctl+0x154>
 800884a:	bf00      	nop
 800884c:	080122e4 	.word	0x080122e4
 8008850:	000e0012 	.word	0x000e0012
 8008854:	000e0016 	.word	0x000e0016
 8008858:	00030060 	.word	0x00030060
 800885c:	000f0048 	.word	0x000f0048
 8008860:	001f0004 	.word	0x001f0004
 8008864:	001f0008 	.word	0x001f0008
 8008868:	000c0048 	.word	0x000c0048
 800886c:	000c0028 	.word	0x000c0028
 8008870:	000c0058 	.word	0x000c0058
 8008874:	000c0030 	.word	0x000c0030
 8008878:	000c0034 	.word	0x000c0034
 800887c:	000c0038 	.word	0x000c0038
 8008880:	000c002c 	.word	0x000c002c
 8008884:	000d0020 	.word	0x000d0020
 8008888:	000c0064 	.word	0x000c0064
 800888c:	000c0068 	.word	0x000c0068
 8008890:	000c0060 	.word	0x000c0060
 8008894:	000d0068 	.word	0x000d0068
 8008898:	000d0040 	.word	0x000d0040
 800889c:	000d0044 	.word	0x000d0044
 80088a0:	000d0048 	.word	0x000d0048
 80088a4:	000d003c 	.word	0x000d003c
 80088a8:	2500      	movs	r5, #0
 80088aa:	f7fe ba0f 	b.w	8006ccc <dwt_ioctl+0x154>
 80088ae:	2500      	movs	r5, #0
 80088b0:	f7fe ba0c 	b.w	8006ccc <dwt_ioctl+0x154>
 80088b4:	2500      	movs	r5, #0
 80088b6:	f7fe ba09 	b.w	8006ccc <dwt_ioctl+0x154>
 80088ba:	2500      	movs	r5, #0
 80088bc:	f7fe ba06 	b.w	8006ccc <dwt_ioctl+0x154>
 80088c0:	2500      	movs	r5, #0
 80088c2:	f7fe ba03 	b.w	8006ccc <dwt_ioctl+0x154>
 80088c6:	2500      	movs	r5, #0
 80088c8:	f7fe ba00 	b.w	8006ccc <dwt_ioctl+0x154>
 80088cc:	2500      	movs	r5, #0
 80088ce:	f7fe b9fd 	b.w	8006ccc <dwt_ioctl+0x154>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f7fe b9fa 	b.w	8006ccc <dwt_ioctl+0x154>
 80088d8:	2500      	movs	r5, #0
 80088da:	f7fe b9f7 	b.w	8006ccc <dwt_ioctl+0x154>
 80088de:	2500      	movs	r5, #0
 80088e0:	f7fe b9f4 	b.w	8006ccc <dwt_ioctl+0x154>
 80088e4:	2500      	movs	r5, #0
 80088e6:	f7fe b9f1 	b.w	8006ccc <dwt_ioctl+0x154>
 80088ea:	2500      	movs	r5, #0
 80088ec:	f7fe b9ee 	b.w	8006ccc <dwt_ioctl+0x154>
 80088f0:	2500      	movs	r5, #0
 80088f2:	f7fe b9eb 	b.w	8006ccc <dwt_ioctl+0x154>
 80088f6:	2500      	movs	r5, #0
 80088f8:	f7fe b9e8 	b.w	8006ccc <dwt_ioctl+0x154>
 80088fc:	2500      	movs	r5, #0
 80088fe:	f7fe b9e5 	b.w	8006ccc <dwt_ioctl+0x154>
 8008902:	2500      	movs	r5, #0
 8008904:	f7fe b9e2 	b.w	8006ccc <dwt_ioctl+0x154>
 8008908:	2500      	movs	r5, #0
 800890a:	f7fe b9df 	b.w	8006ccc <dwt_ioctl+0x154>
 800890e:	2500      	movs	r5, #0
 8008910:	f7fe b9dc 	b.w	8006ccc <dwt_ioctl+0x154>
 8008914:	2500      	movs	r5, #0
 8008916:	f7fe b9d9 	b.w	8006ccc <dwt_ioctl+0x154>
 800891a:	2500      	movs	r5, #0
 800891c:	f7fe b9d6 	b.w	8006ccc <dwt_ioctl+0x154>
 8008920:	2500      	movs	r5, #0
 8008922:	f7fe b9d3 	b.w	8006ccc <dwt_ioctl+0x154>
 8008926:	2500      	movs	r5, #0
 8008928:	f7fe b9d0 	b.w	8006ccc <dwt_ioctl+0x154>
 800892c:	2500      	movs	r5, #0
 800892e:	f7fe b9cd 	b.w	8006ccc <dwt_ioctl+0x154>
 8008932:	2500      	movs	r5, #0
 8008934:	f7fe b9ca 	b.w	8006ccc <dwt_ioctl+0x154>
 8008938:	2500      	movs	r5, #0
 800893a:	f7fe b9c7 	b.w	8006ccc <dwt_ioctl+0x154>
 800893e:	2500      	movs	r5, #0
 8008940:	f7fe b9c4 	b.w	8006ccc <dwt_ioctl+0x154>
 8008944:	2500      	movs	r5, #0
 8008946:	f7fe b9c1 	b.w	8006ccc <dwt_ioctl+0x154>
 800894a:	2500      	movs	r5, #0
 800894c:	f7fe b9be 	b.w	8006ccc <dwt_ioctl+0x154>
 8008950:	2500      	movs	r5, #0
 8008952:	f7fe b9bb 	b.w	8006ccc <dwt_ioctl+0x154>
 8008956:	2500      	movs	r5, #0
 8008958:	f7fe b9b8 	b.w	8006ccc <dwt_ioctl+0x154>
 800895c:	2500      	movs	r5, #0
 800895e:	f7fe b9b5 	b.w	8006ccc <dwt_ioctl+0x154>
 8008962:	2500      	movs	r5, #0
 8008964:	f7fe b9b2 	b.w	8006ccc <dwt_ioctl+0x154>
 8008968:	2500      	movs	r5, #0
 800896a:	f7fe b9af 	b.w	8006ccc <dwt_ioctl+0x154>
 800896e:	2500      	movs	r5, #0
 8008970:	f7fe b9ac 	b.w	8006ccc <dwt_ioctl+0x154>
 8008974:	2500      	movs	r5, #0
 8008976:	f7fe b9a9 	b.w	8006ccc <dwt_ioctl+0x154>
 800897a:	2500      	movs	r5, #0
 800897c:	f7fe b9a6 	b.w	8006ccc <dwt_ioctl+0x154>
 8008980:	2500      	movs	r5, #0
 8008982:	f7fe b9a3 	b.w	8006ccc <dwt_ioctl+0x154>
 8008986:	2500      	movs	r5, #0
 8008988:	f7fe b9a0 	b.w	8006ccc <dwt_ioctl+0x154>
 800898c:	2500      	movs	r5, #0
 800898e:	f7fe b99d 	b.w	8006ccc <dwt_ioctl+0x154>
 8008992:	2500      	movs	r5, #0
 8008994:	f7fe b99a 	b.w	8006ccc <dwt_ioctl+0x154>
 8008998:	2500      	movs	r5, #0
 800899a:	f7fe b997 	b.w	8006ccc <dwt_ioctl+0x154>
 800899e:	2500      	movs	r5, #0
 80089a0:	f7fe b994 	b.w	8006ccc <dwt_ioctl+0x154>
 80089a4:	2500      	movs	r5, #0
 80089a6:	f7fe b991 	b.w	8006ccc <dwt_ioctl+0x154>
 80089aa:	2500      	movs	r5, #0
 80089ac:	f7fe b98e 	b.w	8006ccc <dwt_ioctl+0x154>
 80089b0:	2500      	movs	r5, #0
 80089b2:	f7fe b98b 	b.w	8006ccc <dwt_ioctl+0x154>
 80089b6:	2500      	movs	r5, #0
 80089b8:	f7fe b988 	b.w	8006ccc <dwt_ioctl+0x154>
 80089bc:	2500      	movs	r5, #0
 80089be:	f7fe b985 	b.w	8006ccc <dwt_ioctl+0x154>
 80089c2:	2500      	movs	r5, #0
 80089c4:	f7fe b982 	b.w	8006ccc <dwt_ioctl+0x154>
 80089c8:	2500      	movs	r5, #0
 80089ca:	f7fe b97f 	b.w	8006ccc <dwt_ioctl+0x154>
 80089ce:	2500      	movs	r5, #0
 80089d0:	f7fe b97c 	b.w	8006ccc <dwt_ioctl+0x154>
 80089d4:	2500      	movs	r5, #0
 80089d6:	f7fe b979 	b.w	8006ccc <dwt_ioctl+0x154>
 80089da:	f899 3011 	ldrb.w	r3, [r9, #17]
 80089de:	1e5a      	subs	r2, r3, #1
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	2a01      	cmp	r2, #1
 80089e4:	f67f a801 	bls.w	80079ea <dwt_ioctl+0xe72>
 80089e8:	2202      	movs	r2, #2
 80089ea:	f7fe bf88 	b.w	80078fe <dwt_ioctl+0xd86>
 80089ee:	2f00      	cmp	r7, #0
 80089f0:	f43f ac62 	beq.w	80082b8 <dwt_ioctl+0x1740>
 80089f4:	f819 1000 	ldrb.w	r1, [r9, r0]
 80089f8:	1a5b      	subs	r3, r3, r1
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	e481      	b.n	8008302 <dwt_ioctl+0x178a>
 80089fe:	283f      	cmp	r0, #63	; 0x3f
 8008a00:	d027      	beq.n	8008a52 <dwt_ioctl+0x1eda>
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	f47f ac5e 	bne.w	80082c4 <dwt_ioctl+0x174c>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008a0e:	f819 1000 	ldrb.w	r1, [r9, r0]
 8008a12:	440b      	add	r3, r1
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	459c      	cmp	ip, r3
 8008a18:	f43f ac71 	beq.w	80082fe <dwt_ioctl+0x1786>
 8008a1c:	3d01      	subs	r5, #1
 8008a1e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8008a22:	f43f ac32 	beq.w	800828a <dwt_ioctl+0x1712>
 8008a26:	459e      	cmp	lr, r3
 8008a28:	f4bf ac40 	bcs.w	80082ac <dwt_ioctl+0x1734>
 8008a2c:	4598      	cmp	r8, r3
 8008a2e:	d9de      	bls.n	80089ee <dwt_ioctl+0x1e76>
 8008a30:	ebac 0103 	sub.w	r1, ip, r3
 8008a34:	b209      	sxth	r1, r1
 8008a36:	2900      	cmp	r1, #0
 8008a38:	bfb8      	it	lt
 8008a3a:	4249      	neglt	r1, r1
 8008a3c:	4559      	cmp	r1, fp
 8008a3e:	f77f ac2e 	ble.w	800829e <dwt_ioctl+0x1726>
 8008a42:	2f00      	cmp	r7, #0
 8008a44:	f47f ac70 	bne.w	8008328 <dwt_ioctl+0x17b0>
 8008a48:	283f      	cmp	r0, #63	; 0x3f
 8008a4a:	d1da      	bne.n	8008a02 <dwt_ioctl+0x1e8a>
 8008a4c:	2f00      	cmp	r7, #0
 8008a4e:	f47f ac70 	bne.w	8008332 <dwt_ioctl+0x17ba>
 8008a52:	2a03      	cmp	r2, #3
 8008a54:	f43f ac70 	beq.w	8008338 <dwt_ioctl+0x17c0>
 8008a58:	2a02      	cmp	r2, #2
 8008a5a:	f43f ac3f 	beq.w	80082dc <dwt_ioctl+0x1764>
 8008a5e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8008a62:	185e      	adds	r6, r3, r1
 8008a64:	4566      	cmp	r6, ip
 8008a66:	f77f ac40 	ble.w	80082ea <dwt_ioctl+0x1772>
 8008a6a:	440b      	add	r3, r1
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3201      	adds	r2, #1
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	2700      	movs	r7, #0
 8008a74:	e426      	b.n	80082c4 <dwt_ioctl+0x174c>
 8008a76:	bf00      	nop

08008a78 <ull_initialise>:
 8008a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	460e      	mov	r6, r1
 8008a80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d05c      	beq.n	8008b40 <ull_initialise+0xc8>
 8008a86:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73e3      	strb	r3, [r4, #15]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	8262      	strh	r2, [r4, #18]
 8008a90:	75a3      	strb	r3, [r4, #22]
 8008a92:	75e3      	strb	r3, [r4, #23]
 8008a94:	7423      	strb	r3, [r4, #16]
 8008a96:	72a3      	strb	r3, [r4, #10]
 8008a98:	72e3      	strb	r3, [r4, #11]
 8008a9a:	2104      	movs	r1, #4
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f7fc fd33 	bl	8005508 <_dwt_otpread>
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	2105      	movs	r1, #5
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f7fc fd2e 	bl	8005508 <_dwt_otpread>
 8008aac:	4680      	mov	r8, r0
 8008aae:	210a      	movs	r1, #10
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f7fc fd29 	bl	8005508 <_dwt_otpread>
 8008ab6:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8008aba:	7220      	strb	r0, [r4, #8]
 8008abc:	b127      	cbz	r7, 8008ac8 <ull_initialise+0x50>
 8008abe:	f1b8 0f00 	cmp.w	r8, #0
 8008ac2:	d001      	beq.n	8008ac8 <ull_initialise+0x50>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d140      	bne.n	8008b4a <ull_initialise+0xd2>
 8008ac8:	2120      	movs	r1, #32
 8008aca:	4628      	mov	r0, r5
 8008acc:	f7fc fd1c 	bl	8005508 <_dwt_otpread>
 8008ad0:	4b2f      	ldr	r3, [pc, #188]	; (8008b90 <ull_initialise+0x118>)
 8008ad2:	4298      	cmp	r0, r3
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2301      	moveq	r3, #1
 8008ad8:	2300      	movne	r3, #0
 8008ada:	7263      	strb	r3, [r4, #9]
 8008adc:	f016 0f10 	tst.w	r6, #16
 8008ae0:	d137      	bne.n	8008b52 <ull_initialise+0xda>
 8008ae2:	f016 0f20 	tst.w	r6, #32
 8008ae6:	d13a      	bne.n	8008b5e <ull_initialise+0xe6>
 8008ae8:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008aec:	d13d      	bne.n	8008b6a <ull_initialise+0xf2>
 8008aee:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008af2:	d141      	bne.n	8008b78 <ull_initialise+0x100>
 8008af4:	7ae3      	ldrb	r3, [r4, #11]
 8008af6:	b90b      	cbnz	r3, 8008afc <ull_initialise+0x84>
 8008af8:	2385      	movs	r3, #133	; 0x85
 8008afa:	72e3      	strb	r3, [r4, #11]
 8008afc:	7aa3      	ldrb	r3, [r4, #10]
 8008afe:	b90b      	cbnz	r3, 8008b04 <ull_initialise+0x8c>
 8008b00:	2374      	movs	r3, #116	; 0x74
 8008b02:	72a3      	strb	r3, [r4, #10]
 8008b04:	211f      	movs	r1, #31
 8008b06:	4628      	mov	r0, r5
 8008b08:	f7fc fcfe 	bl	8005508 <_dwt_otpread>
 8008b0c:	7360      	strb	r0, [r4, #13]
 8008b0e:	211e      	movs	r1, #30
 8008b10:	4628      	mov	r0, r5
 8008b12:	f7fc fcf9 	bl	8005508 <_dwt_otpread>
 8008b16:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8008b1a:	bf12      	itee	ne
 8008b1c:	73a0      	strbne	r0, [r4, #14]
 8008b1e:	232e      	moveq	r3, #46	; 0x2e
 8008b20:	73a3      	strbeq	r3, [r4, #14]
 8008b22:	7ba3      	ldrb	r3, [r4, #14]
 8008b24:	2200      	movs	r2, #0
 8008b26:	491b      	ldr	r1, [pc, #108]	; (8008b94 <ull_initialise+0x11c>)
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7fc fc40 	bl	80053ae <dwt_write8bitoffsetreg>
 8008b2e:	2135      	movs	r1, #53	; 0x35
 8008b30:	4628      	mov	r0, r5
 8008b32:	f7fc fce9 	bl	8005508 <_dwt_otpread>
 8008b36:	4603      	mov	r3, r0
 8008b38:	bb20      	cbnz	r0, 8008b84 <ull_initialise+0x10c>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	202c      	movs	r0, #44	; 0x2c
 8008b42:	f009 f983 	bl	8011e4c <malloc>
 8008b46:	6528      	str	r0, [r5, #80]	; 0x50
 8008b48:	e79d      	b.n	8008a86 <ull_initialise+0xe>
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f7fd fcca 	bl	80064e4 <_dwt_prog_ldo_and_bias_tune>
 8008b50:	e7ba      	b.n	8008ac8 <ull_initialise+0x50>
 8008b52:	2106      	movs	r1, #6
 8008b54:	4628      	mov	r0, r5
 8008b56:	f7fc fcd7 	bl	8005508 <_dwt_otpread>
 8008b5a:	6020      	str	r0, [r4, #0]
 8008b5c:	e7c1      	b.n	8008ae2 <ull_initialise+0x6a>
 8008b5e:	2107      	movs	r1, #7
 8008b60:	4628      	mov	r0, r5
 8008b62:	f7fc fcd1 	bl	8005508 <_dwt_otpread>
 8008b66:	6060      	str	r0, [r4, #4]
 8008b68:	e7be      	b.n	8008ae8 <ull_initialise+0x70>
 8008b6a:	2108      	movs	r1, #8
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f7fc fccb 	bl	8005508 <_dwt_otpread>
 8008b72:	0c00      	lsrs	r0, r0, #16
 8008b74:	72a0      	strb	r0, [r4, #10]
 8008b76:	e7ba      	b.n	8008aee <ull_initialise+0x76>
 8008b78:	2109      	movs	r1, #9
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f7fc fcc4 	bl	8005508 <_dwt_otpread>
 8008b80:	72e0      	strb	r0, [r4, #11]
 8008b82:	e7b7      	b.n	8008af4 <ull_initialise+0x7c>
 8008b84:	2200      	movs	r2, #0
 8008b86:	4904      	ldr	r1, [pc, #16]	; (8008b98 <ull_initialise+0x120>)
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f7fc fd63 	bl	8005654 <dwt_write32bitoffsetreg>
 8008b8e:	e7d4      	b.n	8008b3a <ull_initialise+0xc2>
 8008b90:	10000240 	.word	0x10000240
 8008b94:	00090014 	.word	0x00090014
 8008b98:	00090004 	.word	0x00090004

08008b9c <_init>:
 8008b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	f7ff ff67 	bl	8008a78 <ull_initialise>
 8008baa:	4606      	mov	r6, r0
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	4798      	blx	r3
 8008bb2:	ab03      	add	r3, sp, #12
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7fd ffdd 	bl	8006b78 <dwt_ioctl>
 8008bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f7fd fdad 	bl	8006724 <ull_configure>
 8008bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	6859      	ldr	r1, [r3, #4]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7fd fb47 	bl	8006264 <ull_configuretxrf>
 8008bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	89db      	ldrh	r3, [r3, #14]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8008be2:	4620      	mov	r0, r4
 8008be4:	f7fc fc35 	bl	8005452 <dwt_write16bitoffsetreg>
 8008be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	899b      	ldrh	r3, [r3, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4952      	ldr	r1, [pc, #328]	; (8008d3c <_init+0x1a0>)
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f7fc fc2d 	bl	8005452 <dwt_write16bitoffsetreg>
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f7fc fec6 	bl	800598c <ull_setrxaftertxdelay>
 8008c00:	2500      	movs	r5, #0
 8008c02:	9500      	str	r5, [sp, #0]
 8008c04:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8008c08:	462a      	mov	r2, r5
 8008c0a:	2110      	movs	r1, #16
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f7fd fc4f 	bl	80064b0 <dwt_modify16bitoffsetreg>
 8008c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	895a      	ldrh	r2, [r3, #10]
 8008c18:	8919      	ldrh	r1, [r3, #8]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f7fd fbb2 	bl	8006384 <ull_configureframefilter>
 8008c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	8a1b      	ldrh	r3, [r3, #16]
 8008c26:	2202      	movs	r2, #2
 8008c28:	210c      	movs	r1, #12
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7fc fc11 	bl	8005452 <dwt_write16bitoffsetreg>
 8008c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c34:	8a5b      	ldrh	r3, [r3, #18]
 8008c36:	462a      	mov	r2, r5
 8008c38:	210c      	movs	r1, #12
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7fc fc09 	bl	8005452 <dwt_write16bitoffsetreg>
 8008c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c42:	7a19      	ldrb	r1, [r3, #8]
 8008c44:	4620      	mov	r0, r4
 8008c46:	f7fd fc69 	bl	800651c <ull_setleds>
 8008c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c4c:	68d9      	ldr	r1, [r3, #12]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7fc feb2 	bl	80059b8 <ull_setlnapamode>
 8008c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c56:	7e0b      	ldrb	r3, [r1, #24]
 8008c58:	694a      	ldr	r2, [r1, #20]
 8008c5a:	6909      	ldr	r1, [r1, #16]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f7fd f9e9 	bl	8006034 <ull_setinterrupt>
 8008c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c64:	7f9a      	ldrb	r2, [r3, #30]
 8008c66:	8b99      	ldrh	r1, [r3, #28]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f7fc fcb7 	bl	80055dc <ull_configuresleep>
 8008c6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008c70:	7b93      	ldrb	r3, [r2, #14]
 8008c72:	2b2e      	cmp	r3, #46	; 0x2e
 8008c74:	d005      	beq.n	8008c82 <_init+0xe6>
 8008c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c7c:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8008c80:	d00a      	beq.n	8008c98 <_init+0xfc>
 8008c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c8c:	7393      	strb	r3, [r2, #14]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	492b      	ldr	r1, [pc, #172]	; (8008d40 <_init+0x1a4>)
 8008c92:	4620      	mov	r0, r4
 8008c94:	f7fc fb8b 	bl	80053ae <dwt_write8bitoffsetreg>
 8008c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c9a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f7fd fa68 	bl	8006174 <ull_configciadiag>
 8008ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ca6:	6a19      	ldr	r1, [r3, #32]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f7fc fea7 	bl	80059fc <ull_configurestskey>
 8008cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7fc fec6 	bl	8005a44 <ull_configurestsiv>
 8008cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008cbe:	bba3      	cbnz	r3, 8008d2a <_init+0x18e>
 8008cc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cc2:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7fc fbb0 	bl	800542c <ull_configeventcounters>
 8008ccc:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	db27      	blt.n	8008d24 <_init+0x188>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	fa03 f505 	lsl.w	r5, r3, r5
 8008cda:	b2af      	uxth	r7, r5
 8008cdc:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7fd f988 	bl	8005ff8 <ull_setgpiomode>
 8008ce8:	f10d 030a 	add.w	r3, sp, #10
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2302      	movs	r3, #2
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f7fb ff60 	bl	8004bbc <dwt_readfromdevice>
 8008cfc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008d00:	ea23 0305 	bic.w	r3, r3, r5
 8008d04:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	490e      	ldr	r1, [pc, #56]	; (8008d44 <_init+0x1a8>)
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7fc fba0 	bl	8005452 <dwt_write16bitoffsetreg>
 8008d12:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8008d16:	fab2 f282 	clz	r2, r2
 8008d1a:	0952      	lsrs	r2, r2, #5
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7fd fc7a 	bl	8006618 <ull_setgpiovalue>
 8008d24:	4630      	mov	r0, r6
 8008d26:	b005      	add	sp, #20
 8008d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	23ff      	movs	r3, #255	; 0xff
 8008d30:	2200      	movs	r2, #0
 8008d32:	4905      	ldr	r1, [pc, #20]	; (8008d48 <_init+0x1ac>)
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7fd fa09 	bl	800614c <dwt_modify8bitoffsetreg>
 8008d3a:	e7c1      	b.n	8008cc0 <_init+0x124>
 8008d3c:	00010004 	.word	0x00010004
 8008d40:	00090014 	.word	0x00090014
 8008d44:	00050008 	.word	0x00050008
 8008d48:	00020004 	.word	0x00020004

08008d4c <dwt_dbg_fn>:
 8008d4c:	2998      	cmp	r1, #152	; 0x98
 8008d4e:	4802      	ldr	r0, [pc, #8]	; (8008d58 <dwt_dbg_fn+0xc>)
 8008d50:	bf18      	it	ne
 8008d52:	2000      	movne	r0, #0
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	080123ec 	.word	0x080123ec

08008d5c <_deinit>:
 8008d5c:	4770      	bx	lr

08008d5e <dwt_xfer3xxx>:
 8008d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	4605      	mov	r5, r0
 8008d66:	460f      	mov	r7, r1
 8008d68:	461e      	mov	r6, r3
 8008d6a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8008d6e:	1e59      	subs	r1, r3, #1
 8008d70:	b289      	uxth	r1, r1
 8008d72:	2901      	cmp	r1, #1
 8008d74:	d91c      	bls.n	8008db0 <dwt_xfer3xxx+0x52>
 8008d76:	19d0      	adds	r0, r2, r7
 8008d78:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008d7c:	443a      	add	r2, r7
 8008d7e:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8008d82:	0082      	lsls	r2, r0, #2
 8008d84:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8008d88:	ea43 0102 	orr.w	r1, r3, r2
 8008d8c:	0a09      	lsrs	r1, r1, #8
 8008d8e:	f88d 100c 	strb.w	r1, [sp, #12]
 8008d92:	b920      	cbnz	r0, 8008d9e <dwt_xfer3xxx+0x40>
 8008d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d98:	d018      	beq.n	8008dcc <dwt_xfer3xxx+0x6e>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d037      	beq.n	8008e0e <dwt_xfer3xxx+0xb0>
 8008d9e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008da2:	f88d 100c 	strb.w	r1, [sp, #12]
 8008da6:	431a      	orrs	r2, r3
 8008da8:	f88d 200d 	strb.w	r2, [sp, #13]
 8008dac:	2402      	movs	r4, #2
 8008dae:	e005      	b.n	8008dbc <dwt_xfer3xxx+0x5e>
 8008db0:	007a      	lsls	r2, r7, #1
 8008db2:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8008db6:	f88d 200c 	strb.w	r2, [sp, #12]
 8008dba:	2401      	movs	r4, #1
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d006      	beq.n	8008dce <dwt_xfer3xxx+0x70>
 8008dc0:	d326      	bcc.n	8008e10 <dwt_xfer3xxx+0xb2>
 8008dc2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d901      	bls.n	8008dce <dwt_xfer3xxx+0x70>
 8008dca:	e7fe      	b.n	8008dca <dwt_xfer3xxx+0x6c>
 8008dcc:	2401      	movs	r4, #1
 8008dce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008dd0:	7d1b      	ldrb	r3, [r3, #20]
 8008dd2:	b94b      	cbnz	r3, 8008de8 <dwt_xfer3xxx+0x8a>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	685d      	ldr	r5, [r3, #4]
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dda:	4632      	mov	r2, r6
 8008ddc:	a903      	add	r1, sp, #12
 8008dde:	4620      	mov	r0, r4
 8008de0:	47a8      	blx	r5
 8008de2:	b004      	add	sp, #16
 8008de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de8:	2200      	movs	r2, #0
 8008dea:	4621      	mov	r1, r4
 8008dec:	a803      	add	r0, sp, #12
 8008dee:	f7fb fddb 	bl	80049a8 <dwt_generatecrc8>
 8008df2:	4602      	mov	r2, r0
 8008df4:	4631      	mov	r1, r6
 8008df6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008df8:	f7fb fdd6 	bl	80049a8 <dwt_generatecrc8>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	9000      	str	r0, [sp, #0]
 8008e00:	689d      	ldr	r5, [r3, #8]
 8008e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e04:	4632      	mov	r2, r6
 8008e06:	a903      	add	r1, sp, #12
 8008e08:	4620      	mov	r0, r4
 8008e0a:	47a8      	blx	r5
 8008e0c:	e7e9      	b.n	8008de2 <dwt_xfer3xxx+0x84>
 8008e0e:	2401      	movs	r4, #1
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	f8d3 8000 	ldr.w	r8, [r3]
 8008e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e18:	4632      	mov	r2, r6
 8008e1a:	a903      	add	r1, sp, #12
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	47c0      	blx	r8
 8008e20:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008e22:	7d1b      	ldrb	r3, [r3, #20]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d1dc      	bne.n	8008de2 <dwt_xfer3xxx+0x84>
 8008e28:	2f18      	cmp	r7, #24
 8008e2a:	d0da      	beq.n	8008de2 <dwt_xfer3xxx+0x84>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4621      	mov	r1, r4
 8008e30:	a803      	add	r0, sp, #12
 8008e32:	f7fb fdb9 	bl	80049a8 <dwt_generatecrc8>
 8008e36:	4602      	mov	r2, r0
 8008e38:	4631      	mov	r1, r6
 8008e3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e3c:	f7fb fdb4 	bl	80049a8 <dwt_generatecrc8>
 8008e40:	4604      	mov	r4, r0
 8008e42:	2200      	movs	r2, #0
 8008e44:	2118      	movs	r1, #24
 8008e46:	4628      	mov	r0, r5
 8008e48:	f000 f839 	bl	8008ebe <dwt_read8bitoffsetreg>
 8008e4c:	4284      	cmp	r4, r0
 8008e4e:	d0c8      	beq.n	8008de2 <dwt_xfer3xxx+0x84>
 8008e50:	68eb      	ldr	r3, [r5, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0c5      	beq.n	8008de2 <dwt_xfer3xxx+0x84>
 8008e56:	4798      	blx	r3
 8008e58:	e7c3      	b.n	8008de2 <dwt_xfer3xxx+0x84>

08008e5a <dwt_readfromdevice>:
 8008e5a:	b510      	push	{r4, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	2400      	movs	r4, #0
 8008e60:	9401      	str	r4, [sp, #4]
 8008e62:	9c04      	ldr	r4, [sp, #16]
 8008e64:	9400      	str	r4, [sp, #0]
 8008e66:	f7ff ff7a 	bl	8008d5e <dwt_xfer3xxx>
 8008e6a:	b002      	add	sp, #8
 8008e6c:	bd10      	pop	{r4, pc}

08008e6e <dwt_read32bitoffsetreg>:
 8008e6e:	b500      	push	{lr}
 8008e70:	b085      	sub	sp, #20
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	2304      	movs	r3, #4
 8008e78:	b292      	uxth	r2, r2
 8008e7a:	f7ff ffee 	bl	8008e5a <dwt_readfromdevice>
 8008e7e:	f10d 030f 	add.w	r3, sp, #15
 8008e82:	f10d 010b 	add.w	r1, sp, #11
 8008e86:	2000      	movs	r0, #0
 8008e88:	f813 2901 	ldrb.w	r2, [r3], #-1
 8008e8c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8008e90:	428b      	cmp	r3, r1
 8008e92:	d1f9      	bne.n	8008e88 <dwt_read32bitoffsetreg+0x1a>
 8008e94:	b005      	add	sp, #20
 8008e96:	f85d fb04 	ldr.w	pc, [sp], #4

08008e9a <dwt_read16bitoffsetreg>:
 8008e9a:	b500      	push	{lr}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	b292      	uxth	r2, r2
 8008ea6:	f7ff ffd8 	bl	8008e5a <dwt_readfromdevice>
 8008eaa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008eae:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8008eb2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8008eb6:	b280      	uxth	r0, r0
 8008eb8:	b005      	add	sp, #20
 8008eba:	f85d fb04 	ldr.w	pc, [sp], #4

08008ebe <dwt_read8bitoffsetreg>:
 8008ebe:	b500      	push	{lr}
 8008ec0:	b085      	sub	sp, #20
 8008ec2:	f10d 030f 	add.w	r3, sp, #15
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	b292      	uxth	r2, r2
 8008ecc:	f7ff ffc5 	bl	8008e5a <dwt_readfromdevice>
 8008ed0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8008ed4:	b005      	add	sp, #20
 8008ed6:	f85d fb04 	ldr.w	pc, [sp], #4

08008eda <ull_readdiagnostics>:
 8008eda:	b530      	push	{r4, r5, lr}
 8008edc:	b0bd      	sub	sp, #244	; 0xf4
 8008ede:	4605      	mov	r5, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008ee4:	7b9a      	ldrb	r2, [r3, #14]
 8008ee6:	2a01      	cmp	r2, #1
 8008ee8:	d01c      	beq.n	8008f24 <ull_readdiagnostics+0x4a>
 8008eea:	2a03      	cmp	r2, #3
 8008eec:	f040 81e8 	bne.w	80092c0 <ull_readdiagnostics+0x3e6>
 8008ef0:	7d9b      	ldrb	r3, [r3, #22]
 8008ef2:	f013 0f08 	tst.w	r3, #8
 8008ef6:	d10c      	bne.n	8008f12 <ull_readdiagnostics+0x38>
 8008ef8:	f013 0f04 	tst.w	r3, #4
 8008efc:	ab02      	add	r3, sp, #8
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	bf14      	ite	ne
 8008f02:	2338      	movne	r3, #56	; 0x38
 8008f04:	2320      	moveq	r3, #32
 8008f06:	2200      	movs	r2, #0
 8008f08:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008f0c:	f7ff ffa5 	bl	8008e5a <dwt_readfromdevice>
 8008f10:	e019      	b.n	8008f46 <ull_readdiagnostics+0x6c>
 8008f12:	ab02      	add	r3, sp, #8
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	23e8      	movs	r3, #232	; 0xe8
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008f1e:	f7ff ff9c 	bl	8008e5a <dwt_readfromdevice>
 8008f22:	e010      	b.n	8008f46 <ull_readdiagnostics+0x6c>
 8008f24:	7d9b      	ldrb	r3, [r3, #22]
 8008f26:	f013 0f08 	tst.w	r3, #8
 8008f2a:	f040 81c0 	bne.w	80092ae <ull_readdiagnostics+0x3d4>
 8008f2e:	f013 0f04 	tst.w	r3, #4
 8008f32:	ab02      	add	r3, sp, #8
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	bf14      	ite	ne
 8008f38:	2338      	movne	r3, #56	; 0x38
 8008f3a:	2320      	moveq	r3, #32
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8008f42:	f7ff ff8a 	bl	8008e5a <dwt_readfromdevice>
 8008f46:	f10d 0217 	add.w	r2, sp, #23
 8008f4a:	f104 031a 	add.w	r3, r4, #26
 8008f4e:	f104 0020 	add.w	r0, r4, #32
 8008f52:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008f56:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5a:	4283      	cmp	r3, r0
 8008f5c:	d1f9      	bne.n	8008f52 <ull_readdiagnostics+0x78>
 8008f5e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8008f62:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f6e:	8463      	strh	r3, [r4, #34]	; 0x22
 8008f70:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008f74:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8008f78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008f80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008f84:	bf1c      	itt	ne
 8008f86:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8008f8a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8008f8e:	8423      	strh	r3, [r4, #32]
 8008f90:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8008f94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fa0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008fa2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008fa4:	7d9b      	ldrb	r3, [r3, #22]
 8008fa6:	f013 0f02 	tst.w	r3, #2
 8008faa:	f040 817e 	bne.w	80092aa <ull_readdiagnostics+0x3d0>
 8008fae:	aa0a      	add	r2, sp, #40	; 0x28
 8008fb0:	1e63      	subs	r3, r4, #1
 8008fb2:	1d20      	adds	r0, r4, #4
 8008fb4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008fb8:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008fbc:	79d1      	ldrb	r1, [r2, #7]
 8008fbe:	7219      	strb	r1, [r3, #8]
 8008fc0:	7bd1      	ldrb	r1, [r2, #15]
 8008fc2:	7459      	strb	r1, [r3, #17]
 8008fc4:	4283      	cmp	r3, r0
 8008fc6:	d1f5      	bne.n	8008fb4 <ull_readdiagnostics+0xda>
 8008fc8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8008fcc:	7163      	strb	r3, [r4, #5]
 8008fce:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8008fd2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8008fd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fda:	80e3      	strh	r3, [r4, #6]
 8008fdc:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8008fe0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8008fe4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008fe8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8008fec:	f8a4 300d 	strh.w	r3, [r4, #13]
 8008ff0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8008ff4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8008ff8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ffc:	f8a4 300f 	strh.w	r3, [r4, #15]
 8009000:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8009004:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8009008:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800900c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009010:	82e3      	strh	r3, [r4, #22]
 8009012:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8009016:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800901a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800901e:	8323      	strh	r3, [r4, #24]
 8009020:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009022:	7d9b      	ldrb	r3, [r3, #22]
 8009024:	f013 0f04 	tst.w	r3, #4
 8009028:	f040 813f 	bne.w	80092aa <ull_readdiagnostics+0x3d0>
 800902c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8009030:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009034:	041b      	lsls	r3, r3, #16
 8009036:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800903a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800903e:	4313      	orrs	r3, r2
 8009040:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8009044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009048:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800904c:	6263      	str	r3, [r4, #36]	; 0x24
 800904e:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8009052:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8009056:	041b      	lsls	r3, r3, #16
 8009058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800905c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009060:	4313      	orrs	r3, r2
 8009062:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8009066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800906a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800906e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009070:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8009074:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8009078:	041b      	lsls	r3, r3, #16
 800907a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800907e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8009082:	4313      	orrs	r3, r2
 8009084:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8009088:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800908c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009092:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8009096:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800909a:	041b      	lsls	r3, r3, #16
 800909c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090a0:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80090a4:	4313      	orrs	r3, r2
 80090a6:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 80090aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090ae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80090b2:	6323      	str	r3, [r4, #48]	; 0x30
 80090b4:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 80090b8:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 80090bc:	041b      	lsls	r3, r3, #16
 80090be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090c2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80090c6:	4313      	orrs	r3, r2
 80090c8:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80090cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80090d4:	6363      	str	r3, [r4, #52]	; 0x34
 80090d6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 80090da:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090e4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 80090ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80090f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80090f8:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80090fc:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009104:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8009106:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800910a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009114:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8009118:	4313      	orrs	r3, r2
 800911a:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800911e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009122:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009126:	6423      	str	r3, [r4, #64]	; 0x40
 8009128:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800912c:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8009130:	041b      	lsls	r3, r3, #16
 8009132:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009136:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800913a:	4313      	orrs	r3, r2
 800913c:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8009140:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009148:	6463      	str	r3, [r4, #68]	; 0x44
 800914a:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800914e:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8009152:	041b      	lsls	r3, r3, #16
 8009154:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009158:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800915c:	4313      	orrs	r3, r2
 800915e:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8009162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009166:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800916a:	64a3      	str	r3, [r4, #72]	; 0x48
 800916c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8009170:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8009174:	041b      	lsls	r3, r3, #16
 8009176:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800917a:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800917e:	4313      	orrs	r3, r2
 8009180:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8009184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009188:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800918c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800918e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8009192:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8009196:	041b      	lsls	r3, r3, #16
 8009198:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800919c:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 80091a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091ae:	6523      	str	r3, [r4, #80]	; 0x50
 80091b0:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 80091b4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80091b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80091c0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80091c4:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 80091c8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80091cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091d4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80091d8:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80091dc:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 80091e0:	041b      	lsls	r3, r3, #16
 80091e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091e6:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 80091ea:	4313      	orrs	r3, r2
 80091ec:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 80091f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80091fa:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 80091fe:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009208:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800920c:	4313      	orrs	r3, r2
 800920e:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8009212:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800921a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800921c:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8009220:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8009224:	041b      	lsls	r3, r3, #16
 8009226:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800922a:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800922e:	4313      	orrs	r3, r2
 8009230:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8009234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009238:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800923c:	6623      	str	r3, [r4, #96]	; 0x60
 800923e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8009242:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800924c:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8009250:	4313      	orrs	r3, r2
 8009252:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8009256:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800925a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800925e:	6663      	str	r3, [r4, #100]	; 0x64
 8009260:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8009264:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8009268:	041b      	lsls	r3, r3, #16
 800926a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800926e:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8009272:	4313      	orrs	r3, r2
 8009274:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8009278:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800927c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009280:	66a3      	str	r3, [r4, #104]	; 0x68
 8009282:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8009286:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800928a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800928e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009292:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8009296:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800929a:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800929e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092a6:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80092aa:	b03d      	add	sp, #244	; 0xf4
 80092ac:	bd30      	pop	{r4, r5, pc}
 80092ae:	ab02      	add	r3, sp, #8
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	23e8      	movs	r3, #232	; 0xe8
 80092b4:	2200      	movs	r2, #0
 80092b6:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80092ba:	f7ff fdce 	bl	8008e5a <dwt_readfromdevice>
 80092be:	e642      	b.n	8008f46 <ull_readdiagnostics+0x6c>
 80092c0:	7d9b      	ldrb	r3, [r3, #22]
 80092c2:	f013 0f01 	tst.w	r3, #1
 80092c6:	f000 81b3 	beq.w	8009630 <ull_readdiagnostics+0x756>
 80092ca:	ab02      	add	r3, sp, #8
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	236c      	movs	r3, #108	; 0x6c
 80092d0:	2200      	movs	r2, #0
 80092d2:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80092d6:	f7ff fdc0 	bl	8008e5a <dwt_readfromdevice>
 80092da:	ab1d      	add	r3, sp, #116	; 0x74
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	236c      	movs	r3, #108	; 0x6c
 80092e0:	2200      	movs	r2, #0
 80092e2:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80092e6:	4628      	mov	r0, r5
 80092e8:	f7ff fdb7 	bl	8008e5a <dwt_readfromdevice>
 80092ec:	aa02      	add	r2, sp, #8
 80092ee:	1e63      	subs	r3, r4, #1
 80092f0:	1d20      	adds	r0, r4, #4
 80092f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80092f6:	f803 1f01 	strb.w	r1, [r3, #1]!
 80092fa:	79d1      	ldrb	r1, [r2, #7]
 80092fc:	7219      	strb	r1, [r3, #8]
 80092fe:	7bd1      	ldrb	r1, [r2, #15]
 8009300:	7459      	strb	r1, [r3, #17]
 8009302:	7dd1      	ldrb	r1, [r2, #23]
 8009304:	7699      	strb	r1, [r3, #26]
 8009306:	4283      	cmp	r3, r0
 8009308:	d1f3      	bne.n	80092f2 <ull_readdiagnostics+0x418>
 800930a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800930e:	77e3      	strb	r3, [r4, #31]
 8009310:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009314:	7163      	strb	r3, [r4, #5]
 8009316:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800931a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800931e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009322:	80e3      	strh	r3, [r4, #6]
 8009324:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009328:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800932c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8009330:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8009334:	f8a4 200d 	strh.w	r2, [r4, #13]
 8009338:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800933c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009340:	f8a4 200f 	strh.w	r2, [r4, #15]
 8009344:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800934c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009350:	82e3      	strh	r3, [r4, #22]
 8009352:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8009356:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800935a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800935e:	8323      	strh	r3, [r4, #24]
 8009360:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8009364:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8009368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800936c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009370:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009374:	bf1c      	itt	ne
 8009376:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800937a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800937e:	8423      	strh	r3, [r4, #32]
 8009380:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8009384:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800938c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009390:	8463      	strh	r3, [r4, #34]	; 0x22
 8009392:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8009396:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800939a:	041b      	lsls	r3, r3, #16
 800939c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80093a0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80093a4:	4313      	orrs	r3, r2
 80093a6:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80093aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80093ae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80093b2:	6263      	str	r3, [r4, #36]	; 0x24
 80093b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80093b6:	7d9b      	ldrb	r3, [r3, #22]
 80093b8:	f013 0f01 	tst.w	r3, #1
 80093bc:	f43f af75 	beq.w	80092aa <ull_readdiagnostics+0x3d0>
 80093c0:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80093c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80093c8:	041b      	lsls	r3, r3, #16
 80093ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80093ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80093d2:	4313      	orrs	r3, r2
 80093d4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80093d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80093dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80093e2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 80093e6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80093f0:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80093f4:	4313      	orrs	r3, r2
 80093f6:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 80093fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80093fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009402:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009404:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8009408:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800940c:	041b      	lsls	r3, r3, #16
 800940e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009412:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8009416:	4313      	orrs	r3, r2
 8009418:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800941c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009420:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009424:	6323      	str	r3, [r4, #48]	; 0x30
 8009426:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800942a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800942e:	041b      	lsls	r3, r3, #16
 8009430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009434:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8009438:	4313      	orrs	r3, r2
 800943a:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800943e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009442:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009446:	6363      	str	r3, [r4, #52]	; 0x34
 8009448:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800944c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009456:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800945a:	4313      	orrs	r3, r2
 800945c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8009460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009464:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009468:	63a3      	str	r3, [r4, #56]	; 0x38
 800946a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800946e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8009472:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009476:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8009478:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800947c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8009480:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009488:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800948a:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800948e:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8009492:	041b      	lsls	r3, r3, #16
 8009494:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009498:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800949c:	4313      	orrs	r3, r2
 800949e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80094a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80094a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80094aa:	6423      	str	r3, [r4, #64]	; 0x40
 80094ac:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80094b0:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80094ba:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 80094be:	4313      	orrs	r3, r2
 80094c0:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 80094c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80094c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094cc:	6463      	str	r3, [r4, #68]	; 0x44
 80094ce:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 80094d2:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80094dc:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80094e0:	4313      	orrs	r3, r2
 80094e2:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 80094e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80094ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80094ee:	64a3      	str	r3, [r4, #72]	; 0x48
 80094f0:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 80094f4:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80094fe:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8009502:	4313      	orrs	r3, r2
 8009504:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8009508:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800950c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009510:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009512:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8009516:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800951a:	041b      	lsls	r3, r3, #16
 800951c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009520:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8009524:	4313      	orrs	r3, r2
 8009526:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800952a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800952e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009532:	6523      	str	r3, [r4, #80]	; 0x50
 8009534:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8009538:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800953c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009540:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009544:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8009548:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800954c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8009550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009558:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800955c:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8009560:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8009564:	041b      	lsls	r3, r3, #16
 8009566:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800956a:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800956e:	4313      	orrs	r3, r2
 8009570:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8009574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009578:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800957c:	65a3      	str	r3, [r4, #88]	; 0x58
 800957e:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 8009582:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 8009586:	041b      	lsls	r3, r3, #16
 8009588:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800958c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8009590:	4313      	orrs	r3, r2
 8009592:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8009596:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800959a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959e:	65e3      	str	r3, [r4, #92]	; 0x5c
 80095a0:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80095a4:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80095a8:	041b      	lsls	r3, r3, #16
 80095aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80095ae:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80095b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80095bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80095c0:	6623      	str	r3, [r4, #96]	; 0x60
 80095c2:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 80095c6:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 80095ca:	041b      	lsls	r3, r3, #16
 80095cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80095d0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80095d4:	4313      	orrs	r3, r2
 80095d6:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 80095da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80095de:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80095e2:	6663      	str	r3, [r4, #100]	; 0x64
 80095e4:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80095e8:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 80095ec:	041b      	lsls	r3, r3, #16
 80095ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80095f2:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 80095fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009600:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009604:	66a3      	str	r3, [r4, #104]	; 0x68
 8009606:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800960a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800960e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009612:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009616:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800961a:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800961e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8009622:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800962a:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800962e:	e63c      	b.n	80092aa <ull_readdiagnostics+0x3d0>
 8009630:	ab02      	add	r3, sp, #8
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2328      	movs	r3, #40	; 0x28
 8009636:	2200      	movs	r2, #0
 8009638:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800963c:	f7ff fc0d 	bl	8008e5a <dwt_readfromdevice>
 8009640:	e654      	b.n	80092ec <ull_readdiagnostics+0x412>
	...

08009644 <ull_readrxtimestamp>:
 8009644:	b500      	push	{lr}
 8009646:	b083      	sub	sp, #12
 8009648:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800964a:	7b9b      	ldrb	r3, [r3, #14]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d00b      	beq.n	8009668 <ull_readrxtimestamp+0x24>
 8009650:	2b03      	cmp	r3, #3
 8009652:	d110      	bne.n	8009676 <ull_readrxtimestamp+0x32>
 8009654:	9100      	str	r1, [sp, #0]
 8009656:	2305      	movs	r3, #5
 8009658:	2204      	movs	r2, #4
 800965a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800965e:	f7ff fbfc 	bl	8008e5a <dwt_readfromdevice>
 8009662:	b003      	add	sp, #12
 8009664:	f85d fb04 	ldr.w	pc, [sp], #4
 8009668:	9100      	str	r1, [sp, #0]
 800966a:	2305      	movs	r3, #5
 800966c:	2200      	movs	r2, #0
 800966e:	4905      	ldr	r1, [pc, #20]	; (8009684 <ull_readrxtimestamp+0x40>)
 8009670:	f7ff fbf3 	bl	8008e5a <dwt_readfromdevice>
 8009674:	e7f5      	b.n	8009662 <ull_readrxtimestamp+0x1e>
 8009676:	9100      	str	r1, [sp, #0]
 8009678:	2305      	movs	r3, #5
 800967a:	2200      	movs	r2, #0
 800967c:	2160      	movs	r1, #96	; 0x60
 800967e:	f7ff fbec 	bl	8008e5a <dwt_readfromdevice>
 8009682:	e7ee      	b.n	8009662 <ull_readrxtimestamp+0x1e>
 8009684:	00180004 	.word	0x00180004

08009688 <dwt_writetodevice>:
 8009688:	b510      	push	{r4, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8009690:	9401      	str	r4, [sp, #4]
 8009692:	9c04      	ldr	r4, [sp, #16]
 8009694:	9400      	str	r4, [sp, #0]
 8009696:	f7ff fb62 	bl	8008d5e <dwt_xfer3xxx>
 800969a:	b002      	add	sp, #8
 800969c:	bd10      	pop	{r4, pc}

0800969e <dwt_write16bitoffsetreg>:
 800969e:	b500      	push	{lr}
 80096a0:	b085      	sub	sp, #20
 80096a2:	f88d 300c 	strb.w	r3, [sp, #12]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	f88d 300d 	strb.w	r3, [sp, #13]
 80096ac:	ab03      	add	r3, sp, #12
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2302      	movs	r3, #2
 80096b2:	b292      	uxth	r2, r2
 80096b4:	f7ff ffe8 	bl	8009688 <dwt_writetodevice>
 80096b8:	b005      	add	sp, #20
 80096ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080096c0 <ull_force_clocks>:
 80096c0:	b508      	push	{r3, lr}
 80096c2:	2901      	cmp	r1, #1
 80096c4:	d002      	beq.n	80096cc <ull_force_clocks+0xc>
 80096c6:	2905      	cmp	r1, #5
 80096c8:	d007      	beq.n	80096da <ull_force_clocks+0x1a>
 80096ca:	bd08      	pop	{r3, pc}
 80096cc:	f641 0322 	movw	r3, #6178	; 0x1822
 80096d0:	2200      	movs	r2, #0
 80096d2:	4905      	ldr	r1, [pc, #20]	; (80096e8 <ull_force_clocks+0x28>)
 80096d4:	f7ff ffe3 	bl	800969e <dwt_write16bitoffsetreg>
 80096d8:	e7f7      	b.n	80096ca <ull_force_clocks+0xa>
 80096da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096de:	2200      	movs	r2, #0
 80096e0:	4901      	ldr	r1, [pc, #4]	; (80096e8 <ull_force_clocks+0x28>)
 80096e2:	f7ff ffdc 	bl	800969e <dwt_write16bitoffsetreg>
 80096e6:	e7f0      	b.n	80096ca <ull_force_clocks+0xa>
 80096e8:	00110004 	.word	0x00110004

080096ec <__dwt_otp_write_wdata_id_reg>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4605      	mov	r5, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2200      	movs	r2, #0
 80096fa:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80096fe:	f7ff ffce 	bl	800969e <dwt_write16bitoffsetreg>
 8009702:	b2a3      	uxth	r3, r4
 8009704:	2200      	movs	r2, #0
 8009706:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800970a:	4628      	mov	r0, r5
 800970c:	f7ff ffc7 	bl	800969e <dwt_write16bitoffsetreg>
 8009710:	bd38      	pop	{r3, r4, r5, pc}
	...

08009714 <_dwt_otpread>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4604      	mov	r4, r0
 8009718:	460e      	mov	r6, r1
 800971a:	4d0c      	ldr	r5, [pc, #48]	; (800974c <_dwt_otpread+0x38>)
 800971c:	2301      	movs	r3, #1
 800971e:	2200      	movs	r2, #0
 8009720:	4629      	mov	r1, r5
 8009722:	f7ff ffbc 	bl	800969e <dwt_write16bitoffsetreg>
 8009726:	4633      	mov	r3, r6
 8009728:	2200      	movs	r2, #0
 800972a:	4909      	ldr	r1, [pc, #36]	; (8009750 <_dwt_otpread+0x3c>)
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff ffb6 	bl	800969e <dwt_write16bitoffsetreg>
 8009732:	2302      	movs	r3, #2
 8009734:	2200      	movs	r2, #0
 8009736:	4629      	mov	r1, r5
 8009738:	4620      	mov	r0, r4
 800973a:	f7ff ffb0 	bl	800969e <dwt_write16bitoffsetreg>
 800973e:	2200      	movs	r2, #0
 8009740:	4904      	ldr	r1, [pc, #16]	; (8009754 <_dwt_otpread+0x40>)
 8009742:	4620      	mov	r0, r4
 8009744:	f7ff fb93 	bl	8008e6e <dwt_read32bitoffsetreg>
 8009748:	bd70      	pop	{r4, r5, r6, pc}
 800974a:	bf00      	nop
 800974c:	000b0008 	.word	0x000b0008
 8009750:	000b0004 	.word	0x000b0004
 8009754:	000b0010 	.word	0x000b0010

08009758 <dwt_write32bitoffsetreg>:
 8009758:	b510      	push	{r4, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	f88d 300c 	strb.w	r3, [sp, #12]
 8009760:	0a1c      	lsrs	r4, r3, #8
 8009762:	f88d 400d 	strb.w	r4, [sp, #13]
 8009766:	0c1c      	lsrs	r4, r3, #16
 8009768:	f88d 400e 	strb.w	r4, [sp, #14]
 800976c:	0e1b      	lsrs	r3, r3, #24
 800976e:	f88d 300f 	strb.w	r3, [sp, #15]
 8009772:	ab03      	add	r3, sp, #12
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	2304      	movs	r3, #4
 8009778:	b292      	uxth	r2, r2
 800977a:	f7ff ff85 	bl	8009688 <dwt_writetodevice>
 800977e:	b004      	add	sp, #16
 8009780:	bd10      	pop	{r4, pc}

08009782 <_dwt_adjust_delaytime>:
 8009782:	b538      	push	{r3, r4, r5, lr}
 8009784:	4604      	mov	r4, r0
 8009786:	b989      	cbnz	r1, 80097ac <_dwt_adjust_delaytime+0x2a>
 8009788:	2200      	movs	r2, #0
 800978a:	2128      	movs	r1, #40	; 0x28
 800978c:	f7ff fb6f 	bl	8008e6e <dwt_read32bitoffsetreg>
 8009790:	4605      	mov	r5, r0
 8009792:	2201      	movs	r2, #1
 8009794:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8009798:	4620      	mov	r0, r4
 800979a:	f7ff fb90 	bl	8008ebe <dwt_read8bitoffsetreg>
 800979e:	1a2b      	subs	r3, r5, r0
 80097a0:	2200      	movs	r2, #0
 80097a2:	2128      	movs	r1, #40	; 0x28
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7ff ffd7 	bl	8009758 <dwt_write32bitoffsetreg>
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	2200      	movs	r2, #0
 80097ae:	2128      	movs	r1, #40	; 0x28
 80097b0:	f7ff fb5d 	bl	8008e6e <dwt_read32bitoffsetreg>
 80097b4:	4605      	mov	r5, r0
 80097b6:	2201      	movs	r2, #1
 80097b8:	217c      	movs	r1, #124	; 0x7c
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7ff fb7f 	bl	8008ebe <dwt_read8bitoffsetreg>
 80097c0:	1a2b      	subs	r3, r5, r0
 80097c2:	2200      	movs	r2, #0
 80097c4:	2128      	movs	r1, #40	; 0x28
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7ff ffc6 	bl	8009758 <dwt_write32bitoffsetreg>
 80097cc:	e7ed      	b.n	80097aa <_dwt_adjust_delaytime+0x28>

080097ce <ull_setrxaftertxdelay>:
 80097ce:	b538      	push	{r3, r4, r5, lr}
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	2200      	movs	r2, #0
 80097d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80097da:	f7ff fb48 	bl	8008e6e <dwt_read32bitoffsetreg>
 80097de:	0d00      	lsrs	r0, r0, #20
 80097e0:	0500      	lsls	r0, r0, #20
 80097e2:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80097e6:	4303      	orrs	r3, r0
 80097e8:	2200      	movs	r2, #0
 80097ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7ff ffb2 	bl	8009758 <dwt_write32bitoffsetreg>
 80097f4:	bd38      	pop	{r3, r4, r5, pc}

080097f6 <ull_setlnapamode>:
 80097f6:	b538      	push	{r3, r4, r5, lr}
 80097f8:	4605      	mov	r5, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	2200      	movs	r2, #0
 80097fe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009802:	f7ff fb34 	bl	8008e6e <dwt_read32bitoffsetreg>
 8009806:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800980a:	f014 0f01 	tst.w	r4, #1
 800980e:	bf18      	it	ne
 8009810:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8009814:	f014 0f02 	tst.w	r4, #2
 8009818:	bf18      	it	ne
 800981a:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800981e:	f014 0f04 	tst.w	r4, #4
 8009822:	bf18      	it	ne
 8009824:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 8009828:	2200      	movs	r2, #0
 800982a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800982e:	4628      	mov	r0, r5
 8009830:	f7ff ff92 	bl	8009758 <dwt_write32bitoffsetreg>
 8009834:	bd38      	pop	{r3, r4, r5, pc}
	...

08009838 <ull_configurestskey>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4605      	mov	r5, r0
 800983c:	460c      	mov	r4, r1
 800983e:	680b      	ldr	r3, [r1, #0]
 8009840:	2200      	movs	r2, #0
 8009842:	490b      	ldr	r1, [pc, #44]	; (8009870 <ull_configurestskey+0x38>)
 8009844:	f7ff ff88 	bl	8009758 <dwt_write32bitoffsetreg>
 8009848:	6863      	ldr	r3, [r4, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	4909      	ldr	r1, [pc, #36]	; (8009874 <ull_configurestskey+0x3c>)
 800984e:	4628      	mov	r0, r5
 8009850:	f7ff ff82 	bl	8009758 <dwt_write32bitoffsetreg>
 8009854:	68a3      	ldr	r3, [r4, #8]
 8009856:	2200      	movs	r2, #0
 8009858:	4907      	ldr	r1, [pc, #28]	; (8009878 <ull_configurestskey+0x40>)
 800985a:	4628      	mov	r0, r5
 800985c:	f7ff ff7c 	bl	8009758 <dwt_write32bitoffsetreg>
 8009860:	68e3      	ldr	r3, [r4, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	4905      	ldr	r1, [pc, #20]	; (800987c <ull_configurestskey+0x44>)
 8009866:	4628      	mov	r0, r5
 8009868:	f7ff ff76 	bl	8009758 <dwt_write32bitoffsetreg>
 800986c:	bd38      	pop	{r3, r4, r5, pc}
 800986e:	bf00      	nop
 8009870:	0002000c 	.word	0x0002000c
 8009874:	00020010 	.word	0x00020010
 8009878:	00020014 	.word	0x00020014
 800987c:	00020018 	.word	0x00020018

08009880 <ull_configurestsiv>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4605      	mov	r5, r0
 8009884:	460c      	mov	r4, r1
 8009886:	680b      	ldr	r3, [r1, #0]
 8009888:	2200      	movs	r2, #0
 800988a:	490b      	ldr	r1, [pc, #44]	; (80098b8 <ull_configurestsiv+0x38>)
 800988c:	f7ff ff64 	bl	8009758 <dwt_write32bitoffsetreg>
 8009890:	6863      	ldr	r3, [r4, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	4909      	ldr	r1, [pc, #36]	; (80098bc <ull_configurestsiv+0x3c>)
 8009896:	4628      	mov	r0, r5
 8009898:	f7ff ff5e 	bl	8009758 <dwt_write32bitoffsetreg>
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	4907      	ldr	r1, [pc, #28]	; (80098c0 <ull_configurestsiv+0x40>)
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7ff ff58 	bl	8009758 <dwt_write32bitoffsetreg>
 80098a8:	68e3      	ldr	r3, [r4, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	4905      	ldr	r1, [pc, #20]	; (80098c4 <ull_configurestsiv+0x44>)
 80098ae:	4628      	mov	r0, r5
 80098b0:	f7ff ff52 	bl	8009758 <dwt_write32bitoffsetreg>
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	bf00      	nop
 80098b8:	0002001c 	.word	0x0002001c
 80098bc:	00020020 	.word	0x00020020
 80098c0:	00020024 	.word	0x00020024
 80098c4:	00020028 	.word	0x00020028

080098c8 <ull_configmrxlut>:
 80098c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098cc:	4604      	mov	r4, r0
 80098ce:	2905      	cmp	r1, #5
 80098d0:	d03a      	beq.n	8009948 <ull_configmrxlut+0x80>
 80098d2:	4d23      	ldr	r5, [pc, #140]	; (8009960 <ull_configmrxlut+0x98>)
 80098d4:	462e      	mov	r6, r5
 80098d6:	4f23      	ldr	r7, [pc, #140]	; (8009964 <ull_configmrxlut+0x9c>)
 80098d8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80099a0 <ull_configmrxlut+0xd8>
 80098dc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80099a4 <ull_configmrxlut+0xdc>
 80098e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099a8 <ull_configmrxlut+0xe0>
 80098e4:	4b20      	ldr	r3, [pc, #128]	; (8009968 <ull_configmrxlut+0xa0>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	4920      	ldr	r1, [pc, #128]	; (800996c <ull_configmrxlut+0xa4>)
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff ff34 	bl	8009758 <dwt_write32bitoffsetreg>
 80098f0:	4653      	mov	r3, sl
 80098f2:	2200      	movs	r2, #0
 80098f4:	491e      	ldr	r1, [pc, #120]	; (8009970 <ull_configmrxlut+0xa8>)
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7ff ff2e 	bl	8009758 <dwt_write32bitoffsetreg>
 80098fc:	464b      	mov	r3, r9
 80098fe:	2200      	movs	r2, #0
 8009900:	491c      	ldr	r1, [pc, #112]	; (8009974 <ull_configmrxlut+0xac>)
 8009902:	4620      	mov	r0, r4
 8009904:	f7ff ff28 	bl	8009758 <dwt_write32bitoffsetreg>
 8009908:	4643      	mov	r3, r8
 800990a:	2200      	movs	r2, #0
 800990c:	491a      	ldr	r1, [pc, #104]	; (8009978 <ull_configmrxlut+0xb0>)
 800990e:	4620      	mov	r0, r4
 8009910:	f7ff ff22 	bl	8009758 <dwt_write32bitoffsetreg>
 8009914:	463b      	mov	r3, r7
 8009916:	2200      	movs	r2, #0
 8009918:	4918      	ldr	r1, [pc, #96]	; (800997c <ull_configmrxlut+0xb4>)
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff ff1c 	bl	8009758 <dwt_write32bitoffsetreg>
 8009920:	4633      	mov	r3, r6
 8009922:	2200      	movs	r2, #0
 8009924:	4916      	ldr	r1, [pc, #88]	; (8009980 <ull_configmrxlut+0xb8>)
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff ff16 	bl	8009758 <dwt_write32bitoffsetreg>
 800992c:	462b      	mov	r3, r5
 800992e:	2200      	movs	r2, #0
 8009930:	4914      	ldr	r1, [pc, #80]	; (8009984 <ull_configmrxlut+0xbc>)
 8009932:	4620      	mov	r0, r4
 8009934:	f7ff ff10 	bl	8009758 <dwt_write32bitoffsetreg>
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <ull_configmrxlut+0xc0>)
 800993a:	2200      	movs	r2, #0
 800993c:	4913      	ldr	r1, [pc, #76]	; (800998c <ull_configmrxlut+0xc4>)
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff ff0a 	bl	8009758 <dwt_write32bitoffsetreg>
 8009944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009948:	4d11      	ldr	r5, [pc, #68]	; (8009990 <ull_configmrxlut+0xc8>)
 800994a:	4e12      	ldr	r6, [pc, #72]	; (8009994 <ull_configmrxlut+0xcc>)
 800994c:	4f12      	ldr	r7, [pc, #72]	; (8009998 <ull_configmrxlut+0xd0>)
 800994e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80099ac <ull_configmrxlut+0xe4>
 8009952:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80099b0 <ull_configmrxlut+0xe8>
 8009956:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80099b4 <ull_configmrxlut+0xec>
 800995a:	4b10      	ldr	r3, [pc, #64]	; (800999c <ull_configmrxlut+0xd4>)
 800995c:	e7c3      	b.n	80098e6 <ull_configmrxlut+0x1e>
 800995e:	bf00      	nop
 8009960:	0002afb5 	.word	0x0002afb5
 8009964:	0002af7d 	.word	0x0002af7d
 8009968:	0002a8fe 	.word	0x0002a8fe
 800996c:	00030038 	.word	0x00030038
 8009970:	0003003c 	.word	0x0003003c
 8009974:	00030040 	.word	0x00030040
 8009978:	00030044 	.word	0x00030044
 800997c:	00030048 	.word	0x00030048
 8009980:	0003004c 	.word	0x0003004c
 8009984:	00030050 	.word	0x00030050
 8009988:	10000240 	.word	0x10000240
 800998c:	0003001c 	.word	0x0003001c
 8009990:	0001cff5 	.word	0x0001cff5
 8009994:	0001cfb5 	.word	0x0001cfb5
 8009998:	0001cf36 	.word	0x0001cf36
 800999c:	0001c0fd 	.word	0x0001c0fd
 80099a0:	0002af3e 	.word	0x0002af3e
 80099a4:	0002a5fe 	.word	0x0002a5fe
 80099a8:	0002ac36 	.word	0x0002ac36
 80099ac:	0001c77e 	.word	0x0001c77e
 80099b0:	0001c6be 	.word	0x0001c6be
 80099b4:	0001c43e 	.word	0x0001c43e

080099b8 <ull_disable_rftx_blocks>:
 80099b8:	b508      	push	{r3, lr}
 80099ba:	2300      	movs	r3, #0
 80099bc:	461a      	mov	r2, r3
 80099be:	4902      	ldr	r1, [pc, #8]	; (80099c8 <ull_disable_rftx_blocks+0x10>)
 80099c0:	f7ff feca 	bl	8009758 <dwt_write32bitoffsetreg>
 80099c4:	bd08      	pop	{r3, pc}
 80099c6:	bf00      	nop
 80099c8:	00070004 	.word	0x00070004

080099cc <ull_disable_rf_tx>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4604      	mov	r4, r0
 80099d0:	460d      	mov	r5, r1
 80099d2:	2300      	movs	r3, #0
 80099d4:	461a      	mov	r2, r3
 80099d6:	490a      	ldr	r1, [pc, #40]	; (8009a00 <ull_disable_rf_tx+0x34>)
 80099d8:	f7ff febe 	bl	8009758 <dwt_write32bitoffsetreg>
 80099dc:	2300      	movs	r3, #0
 80099de:	461a      	mov	r2, r3
 80099e0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80099e4:	4620      	mov	r0, r4
 80099e6:	f7ff feb7 	bl	8009758 <dwt_write32bitoffsetreg>
 80099ea:	b905      	cbnz	r5, 80099ee <ull_disable_rf_tx+0x22>
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
 80099ee:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80099f2:	2200      	movs	r2, #0
 80099f4:	4903      	ldr	r1, [pc, #12]	; (8009a04 <ull_disable_rf_tx+0x38>)
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7ff feae 	bl	8009758 <dwt_write32bitoffsetreg>
 80099fc:	e7f6      	b.n	80099ec <ull_disable_rf_tx+0x20>
 80099fe:	bf00      	nop
 8009a00:	00070048 	.word	0x00070048
 8009a04:	00070014 	.word	0x00070014

08009a08 <ull_readrxdata>:
 8009a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8009a0e:	7ba4      	ldrb	r4, [r4, #14]
 8009a10:	2c03      	cmp	r4, #3
 8009a12:	bf0c      	ite	eq
 8009a14:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8009a18:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8009a1c:	189c      	adds	r4, r3, r2
 8009a1e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009a22:	da19      	bge.n	8009a58 <ull_readrxdata+0x50>
 8009a24:	461d      	mov	r5, r3
 8009a26:	4616      	mov	r6, r2
 8009a28:	460f      	mov	r7, r1
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8009a2e:	d915      	bls.n	8009a5c <ull_readrxdata+0x54>
 8009a30:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8009a34:	2200      	movs	r2, #0
 8009a36:	490d      	ldr	r1, [pc, #52]	; (8009a6c <ull_readrxdata+0x64>)
 8009a38:	f7ff fe8e 	bl	8009758 <dwt_write32bitoffsetreg>
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	2200      	movs	r2, #0
 8009a40:	490b      	ldr	r1, [pc, #44]	; (8009a70 <ull_readrxdata+0x68>)
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff fe88 	bl	8009758 <dwt_write32bitoffsetreg>
 8009a48:	9700      	str	r7, [sp, #0]
 8009a4a:	4633      	mov	r3, r6
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7ff fa01 	bl	8008e5a <dwt_readfromdevice>
 8009a58:	b003      	add	sp, #12
 8009a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5c:	9100      	str	r1, [sp, #0]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	462a      	mov	r2, r5
 8009a62:	4661      	mov	r1, ip
 8009a64:	f7ff f9f9 	bl	8008e5a <dwt_readfromdevice>
 8009a68:	e7f6      	b.n	8009a58 <ull_readrxdata+0x50>
 8009a6a:	bf00      	nop
 8009a6c:	001f0004 	.word	0x001f0004
 8009a70:	001f0008 	.word	0x001f0008

08009a74 <dwt_write8bitoffsetreg>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	ac04      	add	r4, sp, #16
 8009a7a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8009a7e:	9400      	str	r4, [sp, #0]
 8009a80:	2301      	movs	r3, #1
 8009a82:	b292      	uxth	r2, r2
 8009a84:	f7ff fe00 	bl	8009688 <dwt_writetodevice>
 8009a88:	b004      	add	sp, #16
 8009a8a:	bd10      	pop	{r4, pc}

08009a8c <ull_getframelength>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	4604      	mov	r4, r0
 8009a90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009a92:	7b9b      	ldrb	r3, [r3, #14]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d013      	beq.n	8009ac0 <ull_getframelength+0x34>
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d11d      	bne.n	8009ad8 <ull_getframelength+0x4c>
 8009a9c:	23f0      	movs	r3, #240	; 0xf0
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	4912      	ldr	r1, [pc, #72]	; (8009aec <ull_getframelength+0x60>)
 8009aa2:	f7ff ffe7 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009aac:	4620      	mov	r0, r4
 8009aae:	f7ff f9f4 	bl	8008e9a <dwt_read16bitoffsetreg>
 8009ab2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ab4:	7ada      	ldrb	r2, [r3, #11]
 8009ab6:	b1a2      	cbz	r2, 8009ae2 <ull_getframelength+0x56>
 8009ab8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009abc:	83d8      	strh	r0, [r3, #30]
 8009abe:	bd10      	pop	{r4, pc}
 8009ac0:	230f      	movs	r3, #15
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4909      	ldr	r1, [pc, #36]	; (8009aec <ull_getframelength+0x60>)
 8009ac6:	f7ff ffd5 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009aca:	2200      	movs	r2, #0
 8009acc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f7ff f9e2 	bl	8008e9a <dwt_read16bitoffsetreg>
 8009ad6:	e7ec      	b.n	8009ab2 <ull_getframelength+0x26>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	214c      	movs	r1, #76	; 0x4c
 8009adc:	f7ff f9dd 	bl	8008e9a <dwt_read16bitoffsetreg>
 8009ae0:	e7e7      	b.n	8009ab2 <ull_getframelength+0x26>
 8009ae2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009ae6:	83d8      	strh	r0, [r3, #30]
 8009ae8:	e7e9      	b.n	8009abe <ull_getframelength+0x32>
 8009aea:	bf00      	nop
 8009aec:	00010018 	.word	0x00010018

08009af0 <_dwt_clear_db_events>:
 8009af0:	b510      	push	{r4, lr}
 8009af2:	4604      	mov	r4, r0
 8009af4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009af6:	7b9b      	ldrb	r3, [r3, #14]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d004      	beq.n	8009b06 <_dwt_clear_db_events+0x16>
 8009afc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009afe:	7b9b      	ldrb	r3, [r3, #14]
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d006      	beq.n	8009b12 <_dwt_clear_db_events+0x22>
 8009b04:	bd10      	pop	{r4, pc}
 8009b06:	230f      	movs	r3, #15
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4905      	ldr	r1, [pc, #20]	; (8009b20 <_dwt_clear_db_events+0x30>)
 8009b0c:	f7ff ffb2 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009b10:	e7f4      	b.n	8009afc <_dwt_clear_db_events+0xc>
 8009b12:	23f0      	movs	r3, #240	; 0xf0
 8009b14:	2200      	movs	r2, #0
 8009b16:	4902      	ldr	r1, [pc, #8]	; (8009b20 <_dwt_clear_db_events+0x30>)
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f7ff ffab 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009b1e:	e7f1      	b.n	8009b04 <_dwt_clear_db_events+0x14>
 8009b20:	00010018 	.word	0x00010018

08009b24 <ull_clearaonconfig>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4604      	mov	r4, r0
 8009b28:	2300      	movs	r3, #0
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8009b30:	f7ff fdb5 	bl	800969e <dwt_write16bitoffsetreg>
 8009b34:	2300      	movs	r3, #0
 8009b36:	461a      	mov	r2, r3
 8009b38:	4908      	ldr	r1, [pc, #32]	; (8009b5c <ull_clearaonconfig+0x38>)
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff ff9a 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009b40:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <ull_clearaonconfig+0x3c>)
 8009b42:	2300      	movs	r3, #0
 8009b44:	461a      	mov	r2, r3
 8009b46:	4629      	mov	r1, r5
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7ff ff93 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	2200      	movs	r2, #0
 8009b52:	4629      	mov	r1, r5
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7ff ff8d 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	000a0014 	.word	0x000a0014
 8009b60:	000a0004 	.word	0x000a0004

08009b64 <ull_configeventcounters>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4605      	mov	r5, r0
 8009b68:	460c      	mov	r4, r1
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8009b72:	f7ff ff7f 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009b76:	b904      	cbnz	r4, 8009b7a <ull_configeventcounters+0x16>
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7ff ff76 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009b88:	e7f6      	b.n	8009b78 <ull_configeventcounters+0x14>
	...

08009b8c <ull_aon_read>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4604      	mov	r4, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	2200      	movs	r2, #0
 8009b94:	490a      	ldr	r1, [pc, #40]	; (8009bc0 <ull_aon_read+0x34>)
 8009b96:	f7ff fd82 	bl	800969e <dwt_write16bitoffsetreg>
 8009b9a:	4d0a      	ldr	r5, [pc, #40]	; (8009bc4 <ull_aon_read+0x38>)
 8009b9c:	2388      	movs	r3, #136	; 0x88
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f7ff ff66 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	461a      	mov	r2, r3
 8009bac:	4629      	mov	r1, r5
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f7ff ff60 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4904      	ldr	r1, [pc, #16]	; (8009bc8 <ull_aon_read+0x3c>)
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff f980 	bl	8008ebe <dwt_read8bitoffsetreg>
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	000a000c 	.word	0x000a000c
 8009bc4:	000a0004 	.word	0x000a0004
 8009bc8:	000a0008 	.word	0x000a0008

08009bcc <ull_aon_write>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	4604      	mov	r4, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4615      	mov	r5, r2
 8009bd4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009bd8:	bf34      	ite	cc
 8009bda:	2600      	movcc	r6, #0
 8009bdc:	2620      	movcs	r6, #32
 8009bde:	2200      	movs	r2, #0
 8009be0:	490b      	ldr	r1, [pc, #44]	; (8009c10 <ull_aon_write+0x44>)
 8009be2:	f7ff fd5c 	bl	800969e <dwt_write16bitoffsetreg>
 8009be6:	462b      	mov	r3, r5
 8009be8:	2200      	movs	r2, #0
 8009bea:	490a      	ldr	r1, [pc, #40]	; (8009c14 <ull_aon_write+0x48>)
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7ff ff41 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009bf2:	4d09      	ldr	r5, [pc, #36]	; (8009c18 <ull_aon_write+0x4c>)
 8009bf4:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f7ff ff39 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009c02:	2300      	movs	r3, #0
 8009c04:	461a      	mov	r2, r3
 8009c06:	4629      	mov	r1, r5
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f7ff ff33 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	000a000c 	.word	0x000a000c
 8009c14:	000a0010 	.word	0x000a0010
 8009c18:	000a0004 	.word	0x000a0004

08009c1c <ull_configuresleep>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	460d      	mov	r5, r1
 8009c22:	4616      	mov	r6, r2
 8009c24:	2200      	movs	r2, #0
 8009c26:	f240 110b 	movw	r1, #267	; 0x10b
 8009c2a:	f7ff ffcf 	bl	8009bcc <ull_aon_write>
 8009c2e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009c32:	4620      	mov	r0, r4
 8009c34:	f7ff ffaa 	bl	8009b8c <ull_aon_read>
 8009c38:	f000 021f 	and.w	r2, r0, #31
 8009c3c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7ff ffc3 	bl	8009bcc <ull_aon_write>
 8009c46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c48:	8a1a      	ldrh	r2, [r3, #16]
 8009c4a:	4315      	orrs	r5, r2
 8009c4c:	821d      	strh	r5, [r3, #16]
 8009c4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c50:	8a1b      	ldrh	r3, [r3, #16]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f7ff fd20 	bl	800969e <dwt_write16bitoffsetreg>
 8009c5e:	4633      	mov	r3, r6
 8009c60:	2200      	movs	r2, #0
 8009c62:	4902      	ldr	r1, [pc, #8]	; (8009c6c <ull_configuresleep+0x50>)
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7ff ff05 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	000a0014 	.word	0x000a0014

08009c70 <ull_writetxdata>:
 8009c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c72:	b083      	sub	sp, #12
 8009c74:	185c      	adds	r4, r3, r1
 8009c76:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009c7a:	da24      	bge.n	8009cc6 <ull_writetxdata+0x56>
 8009c7c:	461c      	mov	r4, r3
 8009c7e:	4617      	mov	r7, r2
 8009c80:	460e      	mov	r6, r1
 8009c82:	4605      	mov	r5, r0
 8009c84:	2b7f      	cmp	r3, #127	; 0x7f
 8009c86:	d915      	bls.n	8009cb4 <ull_writetxdata+0x44>
 8009c88:	2314      	movs	r3, #20
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	490f      	ldr	r1, [pc, #60]	; (8009ccc <ull_writetxdata+0x5c>)
 8009c8e:	f7ff fd63 	bl	8009758 <dwt_write32bitoffsetreg>
 8009c92:	4623      	mov	r3, r4
 8009c94:	2200      	movs	r2, #0
 8009c96:	490e      	ldr	r1, [pc, #56]	; (8009cd0 <ull_writetxdata+0x60>)
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f7ff fd5d 	bl	8009758 <dwt_write32bitoffsetreg>
 8009c9e:	9700      	str	r7, [sp, #0]
 8009ca0:	4633      	mov	r3, r6
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f7ff fced 	bl	8009688 <dwt_writetodevice>
 8009cae:	2000      	movs	r0, #0
 8009cb0:	b003      	add	sp, #12
 8009cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb4:	9200      	str	r2, [sp, #0]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4622      	mov	r2, r4
 8009cba:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8009cbe:	f7ff fce3 	bl	8009688 <dwt_writetodevice>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e7f4      	b.n	8009cb0 <ull_writetxdata+0x40>
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cca:	e7f1      	b.n	8009cb0 <ull_writetxdata+0x40>
 8009ccc:	001f0004 	.word	0x001f0004
 8009cd0:	001f0008 	.word	0x001f0008

08009cd4 <ull_signal_rx_buff_free>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	4604      	mov	r4, r0
 8009cda:	2302      	movs	r3, #2
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	9200      	str	r2, [sp, #0]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	2113      	movs	r1, #19
 8009ce6:	f7ff f83a 	bl	8008d5e <dwt_xfer3xxx>
 8009cea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009cec:	7b9a      	ldrb	r2, [r3, #14]
 8009cee:	2a03      	cmp	r2, #3
 8009cf0:	bf0c      	ite	eq
 8009cf2:	2201      	moveq	r2, #1
 8009cf4:	2203      	movne	r2, #3
 8009cf6:	739a      	strb	r2, [r3, #14]
 8009cf8:	b002      	add	sp, #8
 8009cfa:	bd10      	pop	{r4, pc}

08009cfc <ull_isr>:
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	4604      	mov	r4, r0
 8009d02:	2200      	movs	r2, #0
 8009d04:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8009d08:	f7ff f8d9 	bl	8008ebe <dwt_read8bitoffsetreg>
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2144      	movs	r1, #68	; 0x44
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff f8ab 	bl	8008e6e <dwt_read32bitoffsetreg>
 8009d18:	4606      	mov	r6, r0
 8009d1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	83da      	strh	r2, [r3, #30]
 8009d20:	f883 2020 	strb.w	r2, [r3, #32]
 8009d24:	619a      	str	r2, [r3, #24]
 8009d26:	839a      	strh	r2, [r3, #28]
 8009d28:	625a      	str	r2, [r3, #36]	; 0x24
 8009d2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d2c:	625c      	str	r4, [r3, #36]	; 0x24
 8009d2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d30:	7b9f      	ldrb	r7, [r3, #14]
 8009d32:	2f00      	cmp	r7, #0
 8009d34:	d17f      	bne.n	8009e36 <ull_isr+0x13a>
 8009d36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d38:	619e      	str	r6, [r3, #24]
 8009d3a:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 8009d3e:	f898 3015 	ldrb.w	r3, [r8, #21]
 8009d42:	f003 0303 	and.w	r3, r3, #3
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	f000 8090 	beq.w	8009e6c <ull_isr+0x170>
 8009d4c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8009d50:	f040 8093 	bne.w	8009e7a <ull_isr+0x17e>
 8009d54:	f015 0f01 	tst.w	r5, #1
 8009d58:	f040 80c1 	bne.w	8009ede <ull_isr+0x1e2>
 8009d5c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d60:	d00b      	beq.n	8009d7a <ull_isr+0x7e>
 8009d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d64:	b113      	cbz	r3, 8009d6c <ull_isr+0x70>
 8009d66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009d68:	3018      	adds	r0, #24
 8009d6a:	4798      	blx	r3
 8009d6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009d70:	2202      	movs	r2, #2
 8009d72:	2144      	movs	r1, #68	; 0x44
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff fc92 	bl	800969e <dwt_write16bitoffsetreg>
 8009d7a:	f015 0f08 	tst.w	r5, #8
 8009d7e:	d107      	bne.n	8009d90 <ull_isr+0x94>
 8009d80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d82:	7b9b      	ldrb	r3, [r3, #14]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80ea 	beq.w	8009f5e <ull_isr+0x262>
 8009d8a:	2f00      	cmp	r7, #0
 8009d8c:	f000 80e7 	beq.w	8009f5e <ull_isr+0x262>
 8009d90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2020 	strb.w	r2, [r3, #32]
 8009d98:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8009d9c:	f000 80ad 	beq.w	8009efa <ull_isr+0x1fe>
 8009da0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009da2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009da6:	f043 0308 	orr.w	r3, r3, #8
 8009daa:	f882 3020 	strb.w	r3, [r2, #32]
 8009dae:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8009db2:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8009db6:	d008      	beq.n	8009dca <ull_isr+0xce>
 8009db8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009dba:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009dbe:	f043 0310 	orr.w	r3, r3, #16
 8009dc2:	f882 3020 	strb.w	r3, [r2, #32]
 8009dc6:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8009dca:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009dce:	d006      	beq.n	8009dde <ull_isr+0xe2>
 8009dd0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009dd2:	7d53      	ldrb	r3, [r2, #21]
 8009dd4:	f003 0303 	and.w	r3, r3, #3
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	f000 809a 	beq.w	8009f12 <ull_isr+0x216>
 8009dde:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8009de2:	f040 80a2 	bne.w	8009f2a <ull_isr+0x22e>
 8009de6:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8009dea:	2200      	movs	r2, #0
 8009dec:	2144      	movs	r1, #68	; 0x44
 8009dee:	4620      	mov	r0, r4
 8009df0:	f7ff fcb2 	bl	8009758 <dwt_write32bitoffsetreg>
 8009df4:	4620      	mov	r0, r4
 8009df6:	f7ff fe7b 	bl	8009af0 <_dwt_clear_db_events>
 8009dfa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009dfc:	8bc3      	ldrh	r3, [r0, #30]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 80a2 	bne.w	8009f48 <ull_isr+0x24c>
 8009e04:	7d43      	ldrb	r3, [r0, #21]
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	f000 809c 	beq.w	8009f48 <ull_isr+0x24c>
 8009e10:	6983      	ldr	r3, [r0, #24]
 8009e12:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009e16:	6183      	str	r3, [r0, #24]
 8009e18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009e1a:	6993      	ldr	r3, [r2, #24]
 8009e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e20:	6193      	str	r3, [r2, #24]
 8009e22:	69e3      	ldr	r3, [r4, #28]
 8009e24:	b113      	cbz	r3, 8009e2c <ull_isr+0x130>
 8009e26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009e28:	3018      	adds	r0, #24
 8009e2a:	4798      	blx	r3
 8009e2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2020 	strb.w	r2, [r3, #32]
 8009e34:	e08c      	b.n	8009f50 <ull_isr+0x254>
 8009e36:	496d      	ldr	r1, [pc, #436]	; (8009fec <ull_isr+0x2f0>)
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f7ff f840 	bl	8008ebe <dwt_read8bitoffsetreg>
 8009e3e:	4607      	mov	r7, r0
 8009e40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009e42:	7b9b      	ldrb	r3, [r3, #14]
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	bf08      	it	eq
 8009e48:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 8009e4c:	f017 0f01 	tst.w	r7, #1
 8009e50:	bf18      	it	ne
 8009e52:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8009e56:	f017 0f02 	tst.w	r7, #2
 8009e5a:	bf18      	it	ne
 8009e5c:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8009e60:	f017 0f04 	tst.w	r7, #4
 8009e64:	bf18      	it	ne
 8009e66:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8009e6a:	e764      	b.n	8009d36 <ull_isr+0x3a>
 8009e6c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8009e70:	bf1c      	itt	ne
 8009e72:	f045 0508 	orrne.w	r5, r5, #8
 8009e76:	b2ed      	uxtbne	r5, r5
 8009e78:	e768      	b.n	8009d4c <ull_isr+0x50>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2148      	movs	r1, #72	; 0x48
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff f80b 	bl	8008e9a <dwt_read16bitoffsetreg>
 8009e84:	f8a8 001c 	strh.w	r0, [r8, #28]
 8009e88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009e8a:	7d1a      	ldrb	r2, [r3, #20]
 8009e8c:	b11a      	cbz	r2, 8009e96 <ull_isr+0x19a>
 8009e8e:	699a      	ldr	r2, [r3, #24]
 8009e90:	f012 0f04 	tst.w	r2, #4
 8009e94:	d103      	bne.n	8009e9e <ull_isr+0x1a2>
 8009e96:	8b9b      	ldrh	r3, [r3, #28]
 8009e98:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009e9c:	b18b      	cbz	r3, 8009ec2 <ull_isr+0x1c6>
 8009e9e:	2304      	movs	r3, #4
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2144      	movs	r1, #68	; 0x44
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f7ff fde5 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009eaa:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2148      	movs	r1, #72	; 0x48
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f7ff fbf3 	bl	800969e <dwt_write16bitoffsetreg>
 8009eb8:	6a23      	ldr	r3, [r4, #32]
 8009eba:	b113      	cbz	r3, 8009ec2 <ull_isr+0x1c6>
 8009ebc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009ebe:	3018      	adds	r0, #24
 8009ec0:	4798      	blx	r3
 8009ec2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ec4:	8b9b      	ldrh	r3, [r3, #28]
 8009ec6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009eca:	f43f af43 	beq.w	8009d54 <ull_isr+0x58>
 8009ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2148      	movs	r1, #72	; 0x48
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7ff fbe1 	bl	800969e <dwt_write16bitoffsetreg>
 8009edc:	e73a      	b.n	8009d54 <ull_isr+0x58>
 8009ede:	23f8      	movs	r3, #248	; 0xf8
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2144      	movs	r1, #68	; 0x44
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f7ff fdc5 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009eea:	6923      	ldr	r3, [r4, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f43f af35 	beq.w	8009d5c <ull_isr+0x60>
 8009ef2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009ef4:	3018      	adds	r0, #24
 8009ef6:	4798      	blx	r3
 8009ef8:	e730      	b.n	8009d5c <ull_isr+0x60>
 8009efa:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8009efe:	bf1f      	itttt	ne
 8009f00:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8009f02:	f892 3020 	ldrbne.w	r3, [r2, #32]
 8009f06:	f043 0304 	orrne.w	r3, r3, #4
 8009f0a:	f882 3020 	strbne.w	r3, [r2, #32]
 8009f0e:	2700      	movs	r7, #0
 8009f10:	e74f      	b.n	8009db2 <ull_isr+0xb6>
 8009f12:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009f16:	f043 0302 	orr.w	r3, r3, #2
 8009f1a:	f882 3020 	strb.w	r3, [r2, #32]
 8009f1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009f20:	2200      	movs	r2, #0
 8009f22:	83da      	strh	r2, [r3, #30]
 8009f24:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8009f28:	e75d      	b.n	8009de6 <ull_isr+0xea>
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7ff fdae 	bl	8009a8c <ull_getframelength>
 8009f30:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8009f34:	f43f af57 	beq.w	8009de6 <ull_isr+0xea>
 8009f38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009f3a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009f3e:	f043 0301 	orr.w	r3, r3, #1
 8009f42:	f882 3020 	strb.w	r3, [r2, #32]
 8009f46:	e74e      	b.n	8009de6 <ull_isr+0xea>
 8009f48:	6963      	ldr	r3, [r4, #20]
 8009f4a:	b10b      	cbz	r3, 8009f50 <ull_isr+0x254>
 8009f4c:	3018      	adds	r0, #24
 8009f4e:	4798      	blx	r3
 8009f50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009f52:	7b9b      	ldrb	r3, [r3, #14]
 8009f54:	bb03      	cbnz	r3, 8009f98 <ull_isr+0x29c>
 8009f56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2020 	strb.w	r2, [r3, #32]
 8009f5e:	f015 0f10 	tst.w	r5, #16
 8009f62:	d11d      	bne.n	8009fa0 <ull_isr+0x2a4>
 8009f64:	f015 0f20 	tst.w	r5, #32
 8009f68:	d12d      	bne.n	8009fc6 <ull_isr+0x2ca>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	4920      	ldr	r1, [pc, #128]	; (8009ff0 <ull_isr+0x2f4>)
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f7fe ffa5 	bl	8008ebe <dwt_read8bitoffsetreg>
 8009f74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009f76:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8009f7a:	f010 0303 	ands.w	r3, r0, #3
 8009f7e:	d009      	beq.n	8009f94 <ull_isr+0x298>
 8009f80:	2200      	movs	r2, #0
 8009f82:	491b      	ldr	r1, [pc, #108]	; (8009ff0 <ull_isr+0x2f4>)
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7ff fd75 	bl	8009a74 <dwt_write8bitoffsetreg>
 8009f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f8c:	b113      	cbz	r3, 8009f94 <ull_isr+0x298>
 8009f8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009f90:	3018      	adds	r0, #24
 8009f92:	4798      	blx	r3
 8009f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff fe9b 	bl	8009cd4 <ull_signal_rx_buff_free>
 8009f9e:	e7da      	b.n	8009f56 <ull_isr+0x25a>
 8009fa0:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <ull_isr+0x2f8>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2144      	movs	r1, #68	; 0x44
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f7ff fbd6 	bl	8009758 <dwt_write32bitoffsetreg>
 8009fac:	4620      	mov	r0, r4
 8009fae:	f7ff fd9f 	bl	8009af0 <_dwt_clear_db_events>
 8009fb2:	69e3      	ldr	r3, [r4, #28]
 8009fb4:	b113      	cbz	r3, 8009fbc <ull_isr+0x2c0>
 8009fb6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009fb8:	3018      	adds	r0, #24
 8009fba:	4798      	blx	r3
 8009fbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2020 	strb.w	r2, [r3, #32]
 8009fc4:	e7ce      	b.n	8009f64 <ull_isr+0x268>
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <ull_isr+0x2fc>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2144      	movs	r1, #68	; 0x44
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f7ff fbc3 	bl	8009758 <dwt_write32bitoffsetreg>
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f7ff fd8c 	bl	8009af0 <_dwt_clear_db_events>
 8009fd8:	69a3      	ldr	r3, [r4, #24]
 8009fda:	b113      	cbz	r3, 8009fe2 <ull_isr+0x2e6>
 8009fdc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009fde:	3018      	adds	r0, #24
 8009fe0:	4798      	blx	r3
 8009fe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2020 	strb.w	r2, [r3, #32]
 8009fea:	e7be      	b.n	8009f6a <ull_isr+0x26e>
 8009fec:	00010018 	.word	0x00010018
 8009ff0:	00110038 	.word	0x00110038
 8009ff4:	34059400 	.word	0x34059400
 8009ff8:	10220400 	.word	0x10220400

08009ffc <dwt_modify32bitoffsetreg>:
 8009ffc:	b530      	push	{r4, r5, lr}
 8009ffe:	b085      	sub	sp, #20
 800a000:	9c08      	ldr	r4, [sp, #32]
 800a002:	f88d 3008 	strb.w	r3, [sp, #8]
 800a006:	0a1d      	lsrs	r5, r3, #8
 800a008:	f88d 5009 	strb.w	r5, [sp, #9]
 800a00c:	0c1d      	lsrs	r5, r3, #16
 800a00e:	f88d 500a 	strb.w	r5, [sp, #10]
 800a012:	0e1b      	lsrs	r3, r3, #24
 800a014:	f88d 300b 	strb.w	r3, [sp, #11]
 800a018:	f88d 400c 	strb.w	r4, [sp, #12]
 800a01c:	0a23      	lsrs	r3, r4, #8
 800a01e:	f88d 300d 	strb.w	r3, [sp, #13]
 800a022:	0c23      	lsrs	r3, r4, #16
 800a024:	f88d 300e 	strb.w	r3, [sp, #14]
 800a028:	0e24      	lsrs	r4, r4, #24
 800a02a:	f88d 400f 	strb.w	r4, [sp, #15]
 800a02e:	f248 0303 	movw	r3, #32771	; 0x8003
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	ab02      	add	r3, sp, #8
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2308      	movs	r3, #8
 800a03a:	b292      	uxth	r2, r2
 800a03c:	f7fe fe8f 	bl	8008d5e <dwt_xfer3xxx>
 800a040:	b005      	add	sp, #20
 800a042:	bd30      	pop	{r4, r5, pc}

0800a044 <ull_enable_rf_tx>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	4604      	mov	r4, r0
 800a04a:	460e      	mov	r6, r1
 800a04c:	4d13      	ldr	r5, [pc, #76]	; (800a09c <ull_enable_rf_tx+0x58>)
 800a04e:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a058:	2200      	movs	r2, #0
 800a05a:	4629      	mov	r1, r5
 800a05c:	f7ff ffce 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a060:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a06a:	2200      	movs	r2, #0
 800a06c:	4629      	mov	r1, r5
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff ffc4 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <ull_enable_rf_tx+0x5c>)
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a07c:	2200      	movs	r2, #0
 800a07e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800a082:	4620      	mov	r0, r4
 800a084:	f7ff ffba 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a088:	b90e      	cbnz	r6, 800a08e <ull_enable_rf_tx+0x4a>
 800a08a:	b002      	add	sp, #8
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <ull_enable_rf_tx+0x60>)
 800a090:	2200      	movs	r2, #0
 800a092:	4905      	ldr	r1, [pc, #20]	; (800a0a8 <ull_enable_rf_tx+0x64>)
 800a094:	4620      	mov	r0, r4
 800a096:	f7ff fb5f 	bl	8009758 <dwt_write32bitoffsetreg>
 800a09a:	e7f6      	b.n	800a08a <ull_enable_rf_tx+0x46>
 800a09c:	00070048 	.word	0x00070048
 800a0a0:	02003c00 	.word	0x02003c00
 800a0a4:	01011100 	.word	0x01011100
 800a0a8:	00070014 	.word	0x00070014

0800a0ac <ull_enable_rftx_blocks>:
 800a0ac:	b500      	push	{lr}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <ull_enable_rftx_blocks+0x1c>)
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	4904      	ldr	r1, [pc, #16]	; (800a0cc <ull_enable_rftx_blocks+0x20>)
 800a0bc:	f7ff ff9e 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a0c0:	b003      	add	sp, #12
 800a0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0c6:	bf00      	nop
 800a0c8:	02003c00 	.word	0x02003c00
 800a0cc:	00070004 	.word	0x00070004

0800a0d0 <_dwt_otpprogword32>:
 800a0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	460d      	mov	r5, r1
 800a0da:	4617      	mov	r7, r2
 800a0dc:	4e56      	ldr	r6, [pc, #344]	; (800a238 <_dwt_otpprogword32+0x168>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4631      	mov	r1, r6
 800a0e2:	f7fe fec4 	bl	8008e6e <dwt_read32bitoffsetreg>
 800a0e6:	4681      	mov	r9, r0
 800a0e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	4631      	mov	r1, r6
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7ff ff80 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a0fc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800a23c <_dwt_otpprogword32+0x16c>
 800a100:	2318      	movs	r3, #24
 800a102:	2200      	movs	r2, #0
 800a104:	4641      	mov	r1, r8
 800a106:	4620      	mov	r0, r4
 800a108:	f7ff fac9 	bl	800969e <dwt_write16bitoffsetreg>
 800a10c:	2125      	movs	r1, #37	; 0x25
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff faec 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a114:	2102      	movs	r1, #2
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff fae8 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a11c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800a120:	4620      	mov	r0, r4
 800a122:	f7ff fae3 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a126:	b2f9      	uxtb	r1, r7
 800a128:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a12c:	4620      	mov	r0, r4
 800a12e:	f7ff fadd 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a132:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a136:	4620      	mov	r0, r4
 800a138:	f7ff fad8 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a13c:	2100      	movs	r1, #0
 800a13e:	4620      	mov	r0, r4
 800a140:	f7ff fad4 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a144:	2102      	movs	r1, #2
 800a146:	4620      	mov	r0, r4
 800a148:	f7ff fad0 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a14c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800a150:	4620      	mov	r0, r4
 800a152:	f7ff facb 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a156:	b2e9      	uxtb	r1, r5
 800a158:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a15c:	4620      	mov	r0, r4
 800a15e:	f7ff fac5 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a162:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800a166:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a16a:	4620      	mov	r0, r4
 800a16c:	f7ff fabe 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a170:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800a174:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a178:	4620      	mov	r0, r4
 800a17a:	f7ff fab7 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a17e:	0e29      	lsrs	r1, r5, #24
 800a180:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800a184:	4620      	mov	r0, r4
 800a186:	f7ff fab1 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a18a:	2100      	movs	r1, #0
 800a18c:	4620      	mov	r0, r4
 800a18e:	f7ff faad 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a192:	213a      	movs	r1, #58	; 0x3a
 800a194:	4620      	mov	r0, r4
 800a196:	f7ff faa9 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a19a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff faa4 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a1a4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7ff fa9f 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f7ff fa9b 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a1b6:	213a      	movs	r1, #58	; 0x3a
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7ff fa97 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a1be:	f240 1101 	movw	r1, #257	; 0x101
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff fa92 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7ff fa64 	bl	800969e <dwt_write16bitoffsetreg>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	461a      	mov	r2, r3
 800a1da:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7ff fa5d 	bl	800969e <dwt_write16bitoffsetreg>
 800a1e4:	2002      	movs	r0, #2
 800a1e6:	f7f6 fb31 	bl	800084c <deca_sleep>
 800a1ea:	213a      	movs	r1, #58	; 0x3a
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7ff fa7d 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a1f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff fa78 	bl	80096ec <__dwt_otp_write_wdata_id_reg>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	2200      	movs	r2, #0
 800a200:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a204:	4620      	mov	r0, r4
 800a206:	f7ff fa4a 	bl	800969e <dwt_write16bitoffsetreg>
 800a20a:	2300      	movs	r3, #0
 800a20c:	461a      	mov	r2, r3
 800a20e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a212:	4620      	mov	r0, r4
 800a214:	f7ff fa43 	bl	800969e <dwt_write16bitoffsetreg>
 800a218:	2300      	movs	r3, #0
 800a21a:	461a      	mov	r2, r3
 800a21c:	4641      	mov	r1, r8
 800a21e:	4620      	mov	r0, r4
 800a220:	f7ff fa3d 	bl	800969e <dwt_write16bitoffsetreg>
 800a224:	464b      	mov	r3, r9
 800a226:	2200      	movs	r2, #0
 800a228:	4631      	mov	r1, r6
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7ff fa94 	bl	8009758 <dwt_write32bitoffsetreg>
 800a230:	b003      	add	sp, #12
 800a232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a236:	bf00      	nop
 800a238:	00070044 	.word	0x00070044
 800a23c:	000b0008 	.word	0x000b0008

0800a240 <ull_setgpiomode>:
 800a240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a242:	b083      	sub	sp, #12
 800a244:	2400      	movs	r4, #0
 800a246:	4623      	mov	r3, r4
 800a248:	2601      	movs	r6, #1
 800a24a:	2707      	movs	r7, #7
 800a24c:	e002      	b.n	800a254 <ull_setgpiomode+0x14>
 800a24e:	3401      	adds	r4, #1
 800a250:	2c09      	cmp	r4, #9
 800a252:	d009      	beq.n	800a268 <ull_setgpiomode+0x28>
 800a254:	fa06 f504 	lsl.w	r5, r6, r4
 800a258:	420d      	tst	r5, r1
 800a25a:	d0f8      	beq.n	800a24e <ull_setgpiomode+0xe>
 800a25c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800a260:	fa07 f505 	lsl.w	r5, r7, r5
 800a264:	432b      	orrs	r3, r5
 800a266:	e7f2      	b.n	800a24e <ull_setgpiomode+0xe>
 800a268:	401a      	ands	r2, r3
 800a26a:	9200      	str	r2, [sp, #0]
 800a26c:	43db      	mvns	r3, r3
 800a26e:	2200      	movs	r2, #0
 800a270:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a274:	f7ff fec2 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a278:	b003      	add	sp, #12
 800a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a27c <ull_writetxfctrl>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	4604      	mov	r4, r0
 800a282:	2a7f      	cmp	r2, #127	; 0x7f
 800a284:	d912      	bls.n	800a2ac <ull_writetxfctrl+0x30>
 800a286:	3280      	adds	r2, #128	; 0x80
 800a288:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800a28c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a290:	9100      	str	r1, [sp, #0]
 800a292:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <ull_writetxfctrl+0x48>)
 800a294:	2200      	movs	r2, #0
 800a296:	2120      	movs	r1, #32
 800a298:	f7ff feb0 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a29c:	2200      	movs	r2, #0
 800a29e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f7fe fe0b 	bl	8008ebe <dwt_read8bitoffsetreg>
 800a2a8:	b002      	add	sp, #8
 800a2aa:	bd10      	pop	{r4, pc}
 800a2ac:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800a2b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2b4:	9100      	str	r1, [sp, #0]
 800a2b6:	4b03      	ldr	r3, [pc, #12]	; (800a2c4 <ull_writetxfctrl+0x48>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2120      	movs	r1, #32
 800a2bc:	f7ff fe9e 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a2c0:	e7f2      	b.n	800a2a8 <ull_writetxfctrl+0x2c>
 800a2c2:	bf00      	nop
 800a2c4:	fc00f400 	.word	0xfc00f400

0800a2c8 <prs_sys_status_and_or>:
 800a2c8:	b500      	push	{lr}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	9200      	str	r2, [sp, #0]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2144      	movs	r1, #68	; 0x44
 800a2d4:	f7ff fe92 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a2d8:	2000      	movs	r0, #0
 800a2da:	b003      	add	sp, #12
 800a2dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800a2e0 <dwt_modify8bitoffsetreg>:
 800a2e0:	b500      	push	{lr}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	f88d 300c 	strb.w	r3, [sp, #12]
 800a2e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a2ec:	f88d 300d 	strb.w	r3, [sp, #13]
 800a2f0:	f248 0301 	movw	r3, #32769	; 0x8001
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	ab03      	add	r3, sp, #12
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	b292      	uxth	r2, r2
 800a2fe:	f7fe fd2e 	bl	8008d5e <dwt_xfer3xxx>
 800a302:	b005      	add	sp, #20
 800a304:	f85d fb04 	ldr.w	pc, [sp], #4

0800a308 <ull_configciadiag>:
 800a308:	b530      	push	{r4, r5, lr}
 800a30a:	b083      	sub	sp, #12
 800a30c:	4604      	mov	r4, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	f011 0f01 	tst.w	r1, #1
 800a314:	d015      	beq.n	800a342 <ull_configciadiag+0x3a>
 800a316:	2300      	movs	r3, #0
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	23ef      	movs	r3, #239	; 0xef
 800a31c:	2202      	movs	r2, #2
 800a31e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a322:	f7ff ffdd 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a326:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a328:	759d      	strb	r5, [r3, #22]
 800a32a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a32c:	7d9b      	ldrb	r3, [r3, #22]
 800a32e:	085b      	lsrs	r3, r3, #1
 800a330:	d010      	beq.n	800a354 <ull_configciadiag+0x4c>
 800a332:	086b      	lsrs	r3, r5, #1
 800a334:	2200      	movs	r2, #0
 800a336:	490e      	ldr	r1, [pc, #56]	; (800a370 <ull_configciadiag+0x68>)
 800a338:	4620      	mov	r0, r4
 800a33a:	f7ff fb9b 	bl	8009a74 <dwt_write8bitoffsetreg>
 800a33e:	b003      	add	sp, #12
 800a340:	bd30      	pop	{r4, r5, pc}
 800a342:	2310      	movs	r3, #16
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	23ff      	movs	r3, #255	; 0xff
 800a348:	2202      	movs	r2, #2
 800a34a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a34e:	f7ff ffc7 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a352:	e7e8      	b.n	800a326 <ull_configciadiag+0x1e>
 800a354:	2301      	movs	r3, #1
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	23ff      	movs	r3, #255	; 0xff
 800a35a:	2200      	movs	r2, #0
 800a35c:	4904      	ldr	r1, [pc, #16]	; (800a370 <ull_configciadiag+0x68>)
 800a35e:	4620      	mov	r0, r4
 800a360:	f7ff ffbe 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a364:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a366:	7d93      	ldrb	r3, [r2, #22]
 800a368:	f043 0302 	orr.w	r3, r3, #2
 800a36c:	7593      	strb	r3, [r2, #22]
 800a36e:	e7e6      	b.n	800a33e <ull_configciadiag+0x36>
 800a370:	00010020 	.word	0x00010020

0800a374 <ull_calcbandwidthadj>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	4604      	mov	r4, r0
 800a37a:	460d      	mov	r5, r1
 800a37c:	2101      	movs	r1, #1
 800a37e:	f7ff f99f 	bl	80096c0 <ull_force_clocks>
 800a382:	2100      	movs	r1, #0
 800a384:	4620      	mov	r0, r4
 800a386:	f7ff fe5d 	bl	800a044 <ull_enable_rf_tx>
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7ff fe8e 	bl	800a0ac <ull_enable_rftx_blocks>
 800a390:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800a394:	2200      	movs	r2, #0
 800a396:	4915      	ldr	r1, [pc, #84]	; (800a3ec <ull_calcbandwidthadj+0x78>)
 800a398:	4620      	mov	r0, r4
 800a39a:	f7ff f980 	bl	800969e <dwt_write16bitoffsetreg>
 800a39e:	2303      	movs	r3, #3
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	23ff      	movs	r3, #255	; 0xff
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4912      	ldr	r1, [pc, #72]	; (800a3f0 <ull_calcbandwidthadj+0x7c>)
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7ff ff99 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a3ae:	4e10      	ldr	r6, [pc, #64]	; (800a3f0 <ull_calcbandwidthadj+0x7c>)
 800a3b0:	2500      	movs	r5, #0
 800a3b2:	462a      	mov	r2, r5
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f7fe fd81 	bl	8008ebe <dwt_read8bitoffsetreg>
 800a3bc:	f010 0f01 	tst.w	r0, #1
 800a3c0:	d1f7      	bne.n	800a3b2 <ull_calcbandwidthadj+0x3e>
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7ff faf8 	bl	80099b8 <ull_disable_rftx_blocks>
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7ff fafe 	bl	80099cc <ull_disable_rf_tx>
 800a3d0:	2105      	movs	r1, #5
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f7ff f974 	bl	80096c0 <ull_force_clocks>
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4906      	ldr	r1, [pc, #24]	; (800a3f4 <ull_calcbandwidthadj+0x80>)
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f7fe fd6e 	bl	8008ebe <dwt_read8bitoffsetreg>
 800a3e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a3e6:	b002      	add	sp, #8
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0008001c 	.word	0x0008001c
 800a3f0:	00080010 	.word	0x00080010
 800a3f4:	0007001c 	.word	0x0007001c

0800a3f8 <ull_configuretxrf>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800a402:	b149      	cbz	r1, 800a418 <ull_configuretxrf+0x20>
 800a404:	f7ff ffb6 	bl	800a374 <ull_calcbandwidthadj>
 800a408:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800a40c:	2200      	movs	r2, #0
 800a40e:	4905      	ldr	r1, [pc, #20]	; (800a424 <ull_configuretxrf+0x2c>)
 800a410:	4628      	mov	r0, r5
 800a412:	f7ff f9a1 	bl	8009758 <dwt_write32bitoffsetreg>
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	7823      	ldrb	r3, [r4, #0]
 800a41a:	2200      	movs	r2, #0
 800a41c:	4902      	ldr	r1, [pc, #8]	; (800a428 <ull_configuretxrf+0x30>)
 800a41e:	f7ff fb29 	bl	8009a74 <dwt_write8bitoffsetreg>
 800a422:	e7f1      	b.n	800a408 <ull_configuretxrf+0x10>
 800a424:	00010004 	.word	0x00010004
 800a428:	0007001c 	.word	0x0007001c

0800a42c <ull_repeated_frames>:
 800a42c:	b530      	push	{r4, r5, lr}
 800a42e:	b083      	sub	sp, #12
 800a430:	4604      	mov	r4, r0
 800a432:	460d      	mov	r5, r1
 800a434:	2310      	movs	r3, #16
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	23ff      	movs	r3, #255	; 0xff
 800a43a:	2200      	movs	r2, #0
 800a43c:	4906      	ldr	r1, [pc, #24]	; (800a458 <ull_repeated_frames+0x2c>)
 800a43e:	f7ff ff4f 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a442:	462b      	mov	r3, r5
 800a444:	2d02      	cmp	r5, #2
 800a446:	bf38      	it	cc
 800a448:	2302      	movcc	r3, #2
 800a44a:	2200      	movs	r2, #0
 800a44c:	2128      	movs	r1, #40	; 0x28
 800a44e:	4620      	mov	r0, r4
 800a450:	f7ff f982 	bl	8009758 <dwt_write32bitoffsetreg>
 800a454:	b003      	add	sp, #12
 800a456:	bd30      	pop	{r4, r5, pc}
 800a458:	000f0028 	.word	0x000f0028

0800a45c <ull_setdwstate>:
 800a45c:	b530      	push	{r4, r5, lr}
 800a45e:	b083      	sub	sp, #12
 800a460:	4604      	mov	r4, r0
 800a462:	2901      	cmp	r1, #1
 800a464:	d01d      	beq.n	800a4a2 <ull_setdwstate+0x46>
 800a466:	2902      	cmp	r1, #2
 800a468:	d02f      	beq.n	800a4ca <ull_setdwstate+0x6e>
 800a46a:	2301      	movs	r3, #1
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	23ff      	movs	r3, #255	; 0xff
 800a470:	2200      	movs	r2, #0
 800a472:	4925      	ldr	r1, [pc, #148]	; (800a508 <ull_setdwstate+0xac>)
 800a474:	f7ff ff34 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a478:	4d24      	ldr	r5, [pc, #144]	; (800a50c <ull_setdwstate+0xb0>)
 800a47a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a484:	2200      	movs	r2, #0
 800a486:	4629      	mov	r1, r5
 800a488:	4620      	mov	r0, r4
 800a48a:	f7ff fdb7 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a48e:	2300      	movs	r3, #0
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	237f      	movs	r3, #127	; 0x7f
 800a494:	2202      	movs	r2, #2
 800a496:	4629      	mov	r1, r5
 800a498:	4620      	mov	r0, r4
 800a49a:	f7ff ff21 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a49e:	b003      	add	sp, #12
 800a4a0:	bd30      	pop	{r4, r5, pc}
 800a4a2:	2105      	movs	r1, #5
 800a4a4:	f7ff f90c 	bl	80096c0 <ull_force_clocks>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	4917      	ldr	r1, [pc, #92]	; (800a510 <ull_setdwstate+0xb4>)
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f7ff fda1 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	9200      	str	r2, [sp, #0]
 800a4be:	23ff      	movs	r3, #255	; 0xff
 800a4c0:	4912      	ldr	r1, [pc, #72]	; (800a50c <ull_setdwstate+0xb0>)
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff ff0c 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a4c8:	e7e9      	b.n	800a49e <ull_setdwstate+0x42>
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	23ff      	movs	r3, #255	; 0xff
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	490d      	ldr	r1, [pc, #52]	; (800a508 <ull_setdwstate+0xac>)
 800a4d4:	f7ff ff04 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a4d8:	4d0c      	ldr	r5, [pc, #48]	; (800a50c <ull_setdwstate+0xb0>)
 800a4da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7ff fd87 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	237f      	movs	r3, #127	; 0x7f
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f7ff fef1 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a4fe:	2105      	movs	r1, #5
 800a500:	4620      	mov	r0, r4
 800a502:	f7ff f8dd 	bl	80096c0 <ull_force_clocks>
 800a506:	e7ca      	b.n	800a49e <ull_setdwstate+0x42>
 800a508:	00110004 	.word	0x00110004
 800a50c:	00110008 	.word	0x00110008
 800a510:	00090008 	.word	0x00090008

0800a514 <ull_configureframefilter>:
 800a514:	b530      	push	{r4, r5, lr}
 800a516:	b083      	sub	sp, #12
 800a518:	4605      	mov	r5, r0
 800a51a:	2902      	cmp	r1, #2
 800a51c:	d00e      	beq.n	800a53c <ull_configureframefilter+0x28>
 800a51e:	2400      	movs	r4, #0
 800a520:	9400      	str	r4, [sp, #0]
 800a522:	23fe      	movs	r3, #254	; 0xfe
 800a524:	4622      	mov	r2, r4
 800a526:	2110      	movs	r1, #16
 800a528:	f7ff feda 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a52c:	4623      	mov	r3, r4
 800a52e:	4622      	mov	r2, r4
 800a530:	2114      	movs	r1, #20
 800a532:	4628      	mov	r0, r5
 800a534:	f7ff f8b3 	bl	800969e <dwt_write16bitoffsetreg>
 800a538:	b003      	add	sp, #12
 800a53a:	bd30      	pop	{r4, r5, pc}
 800a53c:	4614      	mov	r4, r2
 800a53e:	2301      	movs	r3, #1
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	23ff      	movs	r3, #255	; 0xff
 800a544:	2200      	movs	r2, #0
 800a546:	2110      	movs	r1, #16
 800a548:	f7ff feca 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a54c:	4623      	mov	r3, r4
 800a54e:	2200      	movs	r2, #0
 800a550:	2114      	movs	r1, #20
 800a552:	4628      	mov	r0, r5
 800a554:	f7ff f8a3 	bl	800969e <dwt_write16bitoffsetreg>
 800a558:	e7ee      	b.n	800a538 <ull_configureframefilter+0x24>
	...

0800a55c <ull_run_pgfcal>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	4605      	mov	r5, r0
 800a564:	4c29      	ldr	r4, [pc, #164]	; (800a60c <ull_run_pgfcal+0xb0>)
 800a566:	4b2a      	ldr	r3, [pc, #168]	; (800a610 <ull_run_pgfcal+0xb4>)
 800a568:	2200      	movs	r2, #0
 800a56a:	4621      	mov	r1, r4
 800a56c:	f7ff f8f4 	bl	8009758 <dwt_write32bitoffsetreg>
 800a570:	2310      	movs	r3, #16
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	23ff      	movs	r3, #255	; 0xff
 800a576:	2200      	movs	r2, #0
 800a578:	4621      	mov	r1, r4
 800a57a:	4628      	mov	r0, r5
 800a57c:	f7ff feb0 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a580:	2403      	movs	r4, #3
 800a582:	f04f 0814 	mov.w	r8, #20
 800a586:	4f23      	ldr	r7, [pc, #140]	; (800a614 <ull_run_pgfcal+0xb8>)
 800a588:	2600      	movs	r6, #0
 800a58a:	4640      	mov	r0, r8
 800a58c:	f7f6 f969 	bl	8000862 <deca_usleep>
 800a590:	4632      	mov	r2, r6
 800a592:	4639      	mov	r1, r7
 800a594:	4628      	mov	r0, r5
 800a596:	f7fe fc92 	bl	8008ebe <dwt_read8bitoffsetreg>
 800a59a:	2801      	cmp	r0, #1
 800a59c:	d034      	beq.n	800a608 <ull_run_pgfcal+0xac>
 800a59e:	1e63      	subs	r3, r4, #1
 800a5a0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a5a4:	d1f1      	bne.n	800a58a <ull_run_pgfcal+0x2e>
 800a5a6:	f06f 0402 	mvn.w	r4, #2
 800a5aa:	4e18      	ldr	r6, [pc, #96]	; (800a60c <ull_run_pgfcal+0xb0>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f7ff fa5e 	bl	8009a74 <dwt_write8bitoffsetreg>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4915      	ldr	r1, [pc, #84]	; (800a614 <ull_run_pgfcal+0xb8>)
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f7ff fa58 	bl	8009a74 <dwt_write8bitoffsetreg>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	23ff      	movs	r3, #255	; 0xff
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f7ff fe86 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4910      	ldr	r1, [pc, #64]	; (800a618 <ull_run_pgfcal+0xbc>)
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f7fe fc48 	bl	8008e6e <dwt_read32bitoffsetreg>
 800a5de:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a5e2:	4298      	cmp	r0, r3
 800a5e4:	bf08      	it	eq
 800a5e6:	f06f 0403 	mvneq.w	r4, #3
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	490b      	ldr	r1, [pc, #44]	; (800a61c <ull_run_pgfcal+0xc0>)
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f7fe fc3d 	bl	8008e6e <dwt_read32bitoffsetreg>
 800a5f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a5f8:	4298      	cmp	r0, r3
 800a5fa:	bf14      	ite	ne
 800a5fc:	4620      	movne	r0, r4
 800a5fe:	f06f 0004 	mvneq.w	r0, #4
 800a602:	b002      	add	sp, #8
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	2400      	movs	r4, #0
 800a60a:	e7ce      	b.n	800a5aa <ull_run_pgfcal+0x4e>
 800a60c:	0004000c 	.word	0x0004000c
 800a610:	00020001 	.word	0x00020001
 800a614:	00040020 	.word	0x00040020
 800a618:	00040014 	.word	0x00040014
 800a61c:	0004001c 	.word	0x0004001c

0800a620 <ull_setinterrupt>:
 800a620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a624:	b083      	sub	sp, #12
 800a626:	4605      	mov	r5, r0
 800a628:	4688      	mov	r8, r1
 800a62a:	4617      	mov	r7, r2
 800a62c:	461c      	mov	r4, r3
 800a62e:	f7f6 f8ef 	bl	8000810 <decamutexon>
 800a632:	4606      	mov	r6, r0
 800a634:	2c02      	cmp	r4, #2
 800a636:	d019      	beq.n	800a66c <ull_setinterrupt+0x4c>
 800a638:	2c04      	cmp	r4, #4
 800a63a:	d017      	beq.n	800a66c <ull_setinterrupt+0x4c>
 800a63c:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800a640:	2b01      	cmp	r3, #1
 800a642:	d03f      	beq.n	800a6c4 <ull_setinterrupt+0xa4>
 800a644:	f04f 0900 	mov.w	r9, #0
 800a648:	f8cd 9000 	str.w	r9, [sp]
 800a64c:	ea6f 0308 	mvn.w	r3, r8
 800a650:	464a      	mov	r2, r9
 800a652:	213c      	movs	r1, #60	; 0x3c
 800a654:	4628      	mov	r0, r5
 800a656:	f7ff fcd1 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a65a:	f8cd 9000 	str.w	r9, [sp]
 800a65e:	43fb      	mvns	r3, r7
 800a660:	464a      	mov	r2, r9
 800a662:	2140      	movs	r1, #64	; 0x40
 800a664:	4628      	mov	r0, r5
 800a666:	f7ff fcc9 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a66a:	e00b      	b.n	800a684 <ull_setinterrupt+0x64>
 800a66c:	4643      	mov	r3, r8
 800a66e:	2200      	movs	r2, #0
 800a670:	213c      	movs	r1, #60	; 0x3c
 800a672:	4628      	mov	r0, r5
 800a674:	f7ff f870 	bl	8009758 <dwt_write32bitoffsetreg>
 800a678:	463b      	mov	r3, r7
 800a67a:	2200      	movs	r2, #0
 800a67c:	2140      	movs	r1, #64	; 0x40
 800a67e:	4628      	mov	r0, r5
 800a680:	f7ff f86a 	bl	8009758 <dwt_write32bitoffsetreg>
 800a684:	3c03      	subs	r4, #3
 800a686:	b2e4      	uxtb	r4, r4
 800a688:	2c01      	cmp	r4, #1
 800a68a:	d92d      	bls.n	800a6e8 <ull_setinterrupt+0xc8>
 800a68c:	2200      	movs	r2, #0
 800a68e:	213c      	movs	r1, #60	; 0x3c
 800a690:	4628      	mov	r0, r5
 800a692:	f7fe fbec 	bl	8008e6e <dwt_read32bitoffsetreg>
 800a696:	4603      	mov	r3, r0
 800a698:	2200      	movs	r2, #0
 800a69a:	2144      	movs	r1, #68	; 0x44
 800a69c:	4628      	mov	r0, r5
 800a69e:	f7ff f85b 	bl	8009758 <dwt_write32bitoffsetreg>
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2140      	movs	r1, #64	; 0x40
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f7fe fbe1 	bl	8008e6e <dwt_read32bitoffsetreg>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2148      	movs	r1, #72	; 0x48
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f7ff f850 	bl	8009758 <dwt_write32bitoffsetreg>
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f7f6 f8ba 	bl	8000832 <decamutexoff>
 800a6be:	b003      	add	sp, #12
 800a6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6c4:	f8cd 8000 	str.w	r8, [sp]
 800a6c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	213c      	movs	r1, #60	; 0x3c
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7ff fc93 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a6d6:	9700      	str	r7, [sp, #0]
 800a6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2140      	movs	r1, #64	; 0x40
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f7ff fc8b 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a6e6:	e7cd      	b.n	800a684 <ull_setinterrupt+0x64>
 800a6e8:	2110      	movs	r1, #16
 800a6ea:	9100      	str	r1, [sp, #0]
 800a6ec:	23ff      	movs	r3, #255	; 0xff
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f7ff fdf5 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a6f6:	e7c9      	b.n	800a68c <ull_setinterrupt+0x6c>

0800a6f8 <prs_ack_enable>:
 800a6f8:	b500      	push	{lr}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	2900      	cmp	r1, #0
 800a6fe:	bf0b      	itete	eq
 800a700:	23ff      	moveq	r3, #255	; 0xff
 800a702:	23f7      	movne	r3, #247	; 0xf7
 800a704:	2200      	moveq	r2, #0
 800a706:	2208      	movne	r2, #8
 800a708:	9200      	str	r2, [sp, #0]
 800a70a:	2201      	movs	r2, #1
 800a70c:	2110      	movs	r1, #16
 800a70e:	f7ff fde7 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800a712:	b003      	add	sp, #12
 800a714:	f85d fb04 	ldr.w	pc, [sp], #4

0800a718 <dwt_modify16bitoffsetreg>:
 800a718:	b510      	push	{r4, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800a720:	f88d 300c 	strb.w	r3, [sp, #12]
 800a724:	0a1b      	lsrs	r3, r3, #8
 800a726:	f88d 300d 	strb.w	r3, [sp, #13]
 800a72a:	f88d 400e 	strb.w	r4, [sp, #14]
 800a72e:	0a24      	lsrs	r4, r4, #8
 800a730:	f88d 400f 	strb.w	r4, [sp, #15]
 800a734:	f248 0302 	movw	r3, #32770	; 0x8002
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	ab03      	add	r3, sp, #12
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	2304      	movs	r3, #4
 800a740:	b292      	uxth	r2, r2
 800a742:	f7fe fb0c 	bl	8008d5e <dwt_xfer3xxx>
 800a746:	b004      	add	sp, #16
 800a748:	bd10      	pop	{r4, pc}
	...

0800a74c <ull_setleds>:
 800a74c:	b530      	push	{r4, r5, lr}
 800a74e:	b083      	sub	sp, #12
 800a750:	4604      	mov	r4, r0
 800a752:	f011 0f01 	tst.w	r1, #1
 800a756:	d01f      	beq.n	800a798 <ull_setleds+0x4c>
 800a758:	460d      	mov	r5, r1
 800a75a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a764:	2200      	movs	r2, #0
 800a766:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a76a:	f7ff fc47 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a76e:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a778:	2200      	movs	r2, #0
 800a77a:	4918      	ldr	r1, [pc, #96]	; (800a7dc <ull_setleds+0x90>)
 800a77c:	4620      	mov	r0, r4
 800a77e:	f7ff fc3d 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a782:	f015 0f02 	tst.w	r5, #2
 800a786:	d11a      	bne.n	800a7be <ull_setleds+0x72>
 800a788:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a78c:	2200      	movs	r2, #0
 800a78e:	4914      	ldr	r1, [pc, #80]	; (800a7e0 <ull_setleds+0x94>)
 800a790:	4620      	mov	r0, r4
 800a792:	f7fe ffe1 	bl	8009758 <dwt_write32bitoffsetreg>
 800a796:	e010      	b.n	800a7ba <ull_setleds+0x6e>
 800a798:	2500      	movs	r5, #0
 800a79a:	9500      	str	r5, [sp, #0]
 800a79c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a7a6:	f7ff fc29 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800a7aa:	9500      	str	r5, [sp, #0]
 800a7ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800a7b0:	462a      	mov	r2, r5
 800a7b2:	490b      	ldr	r1, [pc, #44]	; (800a7e0 <ull_setleds+0x94>)
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f7ff ffaf 	bl	800a718 <dwt_modify16bitoffsetreg>
 800a7ba:	b003      	add	sp, #12
 800a7bc:	bd30      	pop	{r4, r5, pc}
 800a7be:	4d08      	ldr	r5, [pc, #32]	; (800a7e0 <ull_setleds+0x94>)
 800a7c0:	4b08      	ldr	r3, [pc, #32]	; (800a7e4 <ull_setleds+0x98>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7fe ffc6 	bl	8009758 <dwt_write32bitoffsetreg>
 800a7cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7fe ffbf 	bl	8009758 <dwt_write32bitoffsetreg>
 800a7da:	e7ee      	b.n	800a7ba <ull_setleds+0x6e>
 800a7dc:	00110004 	.word	0x00110004
 800a7e0:	00110018 	.word	0x00110018
 800a7e4:	000f0110 	.word	0x000f0110

0800a7e8 <ull_pgf_cal>:
 800a7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	2901      	cmp	r1, #1
 800a7f0:	d009      	beq.n	800a806 <ull_pgf_cal+0x1e>
 800a7f2:	2014      	movs	r0, #20
 800a7f4:	f7f6 f835 	bl	8000862 <deca_usleep>
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f7ff feaf 	bl	800a55c <ull_run_pgfcal>
 800a7fe:	4605      	mov	r5, r0
 800a800:	4628      	mov	r0, r5
 800a802:	b003      	add	sp, #12
 800a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a806:	4e0f      	ldr	r6, [pc, #60]	; (800a844 <ull_pgf_cal+0x5c>)
 800a808:	2200      	movs	r2, #0
 800a80a:	4631      	mov	r1, r6
 800a80c:	f7fe fb45 	bl	8008e9a <dwt_read16bitoffsetreg>
 800a810:	4607      	mov	r7, r0
 800a812:	f240 1307 	movw	r3, #263	; 0x107
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a81c:	2200      	movs	r2, #0
 800a81e:	4631      	mov	r1, r6
 800a820:	4620      	mov	r0, r4
 800a822:	f7ff ff79 	bl	800a718 <dwt_modify16bitoffsetreg>
 800a826:	2014      	movs	r0, #20
 800a828:	f7f6 f81b 	bl	8000862 <deca_usleep>
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7ff fe95 	bl	800a55c <ull_run_pgfcal>
 800a832:	4605      	mov	r5, r0
 800a834:	2200      	movs	r2, #0
 800a836:	9200      	str	r2, [sp, #0]
 800a838:	463b      	mov	r3, r7
 800a83a:	4631      	mov	r1, r6
 800a83c:	4620      	mov	r0, r4
 800a83e:	f7ff ff6b 	bl	800a718 <dwt_modify16bitoffsetreg>
 800a842:	e7dd      	b.n	800a800 <ull_pgf_cal+0x18>
 800a844:	00070048 	.word	0x00070048

0800a848 <ull_setgpiovalue>:
 800a848:	b500      	push	{lr}
 800a84a:	b083      	sub	sp, #12
 800a84c:	2a01      	cmp	r2, #1
 800a84e:	d009      	beq.n	800a864 <ull_setgpiovalue+0x1c>
 800a850:	43cb      	mvns	r3, r1
 800a852:	2200      	movs	r2, #0
 800a854:	9200      	str	r2, [sp, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	4906      	ldr	r1, [pc, #24]	; (800a874 <ull_setgpiovalue+0x2c>)
 800a85a:	f7ff ff5d 	bl	800a718 <dwt_modify16bitoffsetreg>
 800a85e:	b003      	add	sp, #12
 800a860:	f85d fb04 	ldr.w	pc, [sp], #4
 800a864:	9100      	str	r1, [sp, #0]
 800a866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a86a:	2200      	movs	r2, #0
 800a86c:	4901      	ldr	r1, [pc, #4]	; (800a874 <ull_setgpiovalue+0x2c>)
 800a86e:	f7ff ff53 	bl	800a718 <dwt_modify16bitoffsetreg>
 800a872:	e7f4      	b.n	800a85e <ull_setgpiovalue+0x16>
 800a874:	0005000c 	.word	0x0005000c

0800a878 <ull_readaccdata>:
 800a878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87a:	b083      	sub	sp, #12
 800a87c:	4604      	mov	r4, r0
 800a87e:	460f      	mov	r7, r1
 800a880:	4616      	mov	r6, r2
 800a882:	461d      	mov	r5, r3
 800a884:	f248 0340 	movw	r3, #32832	; 0x8040
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a88e:	2200      	movs	r2, #0
 800a890:	4918      	ldr	r1, [pc, #96]	; (800a8f4 <ull_readaccdata+0x7c>)
 800a892:	f7ff ff41 	bl	800a718 <dwt_modify16bitoffsetreg>
 800a896:	19aa      	adds	r2, r5, r6
 800a898:	f243 0301 	movw	r3, #12289	; 0x3001
 800a89c:	429a      	cmp	r2, r3
 800a89e:	dc15      	bgt.n	800a8cc <ull_readaccdata+0x54>
 800a8a0:	2d7f      	cmp	r5, #127	; 0x7f
 800a8a2:	d91d      	bls.n	800a8e0 <ull_readaccdata+0x68>
 800a8a4:	2315      	movs	r3, #21
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	4913      	ldr	r1, [pc, #76]	; (800a8f8 <ull_readaccdata+0x80>)
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f7fe ff54 	bl	8009758 <dwt_write32bitoffsetreg>
 800a8b0:	462b      	mov	r3, r5
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4911      	ldr	r1, [pc, #68]	; (800a8fc <ull_readaccdata+0x84>)
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f7fe ff4e 	bl	8009758 <dwt_write32bitoffsetreg>
 800a8bc:	9700      	str	r7, [sp, #0]
 800a8be:	4633      	mov	r3, r6
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7fe fac7 	bl	8008e5a <dwt_readfromdevice>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	9200      	str	r2, [sp, #0]
 800a8d0:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800a8d4:	4907      	ldr	r1, [pc, #28]	; (800a8f4 <ull_readaccdata+0x7c>)
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f7ff ff1e 	bl	800a718 <dwt_modify16bitoffsetreg>
 800a8dc:	b003      	add	sp, #12
 800a8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e0:	9700      	str	r7, [sp, #0]
 800a8e2:	4633      	mov	r3, r6
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7fe fab5 	bl	8008e5a <dwt_readfromdevice>
 800a8f0:	e7ec      	b.n	800a8cc <ull_readaccdata+0x54>
 800a8f2:	bf00      	nop
 800a8f4:	00110004 	.word	0x00110004
 800a8f8:	001f0004 	.word	0x001f0004
 800a8fc:	001f0008 	.word	0x001f0008

0800a900 <ull_repeated_cw>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	4606      	mov	r6, r0
 800a904:	460c      	mov	r4, r1
 800a906:	4615      	mov	r5, r2
 800a908:	4b0e      	ldr	r3, [pc, #56]	; (800a944 <ull_repeated_cw+0x44>)
 800a90a:	2202      	movs	r2, #2
 800a90c:	490e      	ldr	r1, [pc, #56]	; (800a948 <ull_repeated_cw+0x48>)
 800a90e:	f7fe ff23 	bl	8009758 <dwt_write32bitoffsetreg>
 800a912:	2d0f      	cmp	r5, #15
 800a914:	bfa8      	it	ge
 800a916:	250f      	movge	r5, #15
 800a918:	1e63      	subs	r3, r4, #1
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	bf28      	it	cs
 800a91e:	2404      	movcs	r4, #4
 800a920:	2310      	movs	r3, #16
 800a922:	4123      	asrs	r3, r4
 800a924:	2200      	movs	r2, #0
 800a926:	4909      	ldr	r1, [pc, #36]	; (800a94c <ull_repeated_cw+0x4c>)
 800a928:	4630      	mov	r0, r6
 800a92a:	f7fe ff15 	bl	8009758 <dwt_write32bitoffsetreg>
 800a92e:	1e63      	subs	r3, r4, #1
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	fa05 f303 	lsl.w	r3, r5, r3
 800a936:	2200      	movs	r2, #0
 800a938:	4905      	ldr	r1, [pc, #20]	; (800a950 <ull_repeated_cw+0x50>)
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7fe ff0c 	bl	8009758 <dwt_write32bitoffsetreg>
 800a940:	bd70      	pop	{r4, r5, r6, pc}
 800a942:	bf00      	nop
 800a944:	00d20874 	.word	0x00d20874
 800a948:	00110010 	.word	0x00110010
 800a94c:	00070028 	.word	0x00070028
 800a950:	00080018 	.word	0x00080018

0800a954 <ull_configure>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	b083      	sub	sp, #12
 800a95a:	4604      	mov	r4, r0
 800a95c:	460d      	mov	r5, r1
 800a95e:	f891 9000 	ldrb.w	r9, [r1]
 800a962:	790b      	ldrb	r3, [r1, #4]
 800a964:	2b18      	cmp	r3, #24
 800a966:	d814      	bhi.n	800a992 <ull_configure+0x3e>
 800a968:	78cf      	ldrb	r7, [r1, #3]
 800a96a:	2f18      	cmp	r7, #24
 800a96c:	bf94      	ite	ls
 800a96e:	2700      	movls	r7, #0
 800a970:	2701      	movhi	r7, #1
 800a972:	b2ff      	uxtb	r7, r7
 800a974:	79eb      	ldrb	r3, [r5, #7]
 800a976:	2b01      	cmp	r3, #1
 800a978:	bf0c      	ite	eq
 800a97a:	2110      	moveq	r1, #16
 800a97c:	2100      	movne	r1, #0
 800a97e:	786b      	ldrb	r3, [r5, #1]
 800a980:	3b01      	subs	r3, #1
 800a982:	2b06      	cmp	r3, #6
 800a984:	d810      	bhi.n	800a9a8 <ull_configure+0x54>
 800a986:	e8df f003 	tbb	[pc, r3]
 800a98a:	0f06      	.short	0x0f06
 800a98c:	0f0c120f 	.word	0x0f0c120f
 800a990:	09          	.byte	0x09
 800a991:	00          	.byte	0x00
 800a992:	2701      	movs	r7, #1
 800a994:	e7ed      	b.n	800a972 <ull_configure+0x1e>
 800a996:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800a99a:	e00a      	b.n	800a9b2 <ull_configure+0x5e>
 800a99c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800a9a0:	e007      	b.n	800a9b2 <ull_configure+0x5e>
 800a9a2:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800a9a6:	e004      	b.n	800a9b2 <ull_configure+0x5e>
 800a9a8:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800a9ac:	e001      	b.n	800a9b2 <ull_configure+0x5e>
 800a9ae:	f04f 0a20 	mov.w	sl, #32
 800a9b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9b4:	8a13      	ldrh	r3, [r2, #16]
 800a9b6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a9ba:	8213      	strh	r3, [r2, #16]
 800a9bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a9be:	79ea      	ldrb	r2, [r5, #7]
 800a9c0:	72da      	strb	r2, [r3, #11]
 800a9c2:	7b2e      	ldrb	r6, [r5, #12]
 800a9c4:	1cb3      	adds	r3, r6, #2
 800a9c6:	2601      	movs	r6, #1
 800a9c8:	409e      	lsls	r6, r3
 800a9ca:	fa1f f886 	uxth.w	r8, r6
 800a9ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9d0:	4bca      	ldr	r3, [pc, #808]	; (800acfc <ull_configure+0x3a8>)
 800a9d2:	fb03 f308 	mul.w	r3, r3, r8
 800a9d6:	0bdb      	lsrs	r3, r3, #15
 800a9d8:	8253      	strh	r3, [r2, #18]
 800a9da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a9dc:	7aea      	ldrb	r2, [r5, #11]
 800a9de:	755a      	strb	r2, [r3, #21]
 800a9e0:	7a2b      	ldrb	r3, [r5, #8]
 800a9e2:	015b      	lsls	r3, r3, #5
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	7b6a      	ldrb	r2, [r5, #13]
 800a9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9ee:	7aea      	ldrb	r2, [r5, #11]
 800a9f0:	0312      	lsls	r2, r2, #12
 800a9f2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	4bc0      	ldr	r3, [pc, #768]	; (800ad00 <ull_configure+0x3ac>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2110      	movs	r1, #16
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff fafa 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800aa08:	2f00      	cmp	r7, #0
 800aa0a:	f040 80fc 	bne.w	800ac06 <ull_configure+0x2b2>
 800aa0e:	7aeb      	ldrb	r3, [r5, #11]
 800aa10:	b1f3      	cbz	r3, 800aa50 <ull_configure+0xfc>
 800aa12:	7b6b      	ldrb	r3, [r5, #13]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	f240 8121 	bls.w	800ac5c <ull_configure+0x308>
 800aa1a:	7b2a      	ldrb	r2, [r5, #12]
 800aa1c:	4bb9      	ldr	r3, [pc, #740]	; (800ad04 <ull_configure+0x3b0>)
 800aa1e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800aa22:	0112      	lsls	r2, r2, #4
 800aa24:	0ad3      	lsrs	r3, r2, #11
 800aa26:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800aa2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa2e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800aa32:	bf28      	it	cs
 800aa34:	3301      	addcs	r3, #1
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800aa3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	f64f 7380 	movw	r3, #65408	; 0xff80
 800aa46:	2202      	movs	r2, #2
 800aa48:	49af      	ldr	r1, [pc, #700]	; (800ad08 <ull_configure+0x3b4>)
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f7ff fe64 	bl	800a718 <dwt_modify16bitoffsetreg>
 800aa50:	2394      	movs	r3, #148	; 0x94
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	4bad      	ldr	r3, [pc, #692]	; (800ad0c <ull_configure+0x3b8>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	49ad      	ldr	r1, [pc, #692]	; (800ad10 <ull_configure+0x3bc>)
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f7ff face 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800aa60:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800aa64:	f340 810d 	ble.w	800ac82 <ull_configure+0x32e>
 800aa68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aa6a:	8a13      	ldrh	r3, [r2, #16]
 800aa6c:	f043 0320 	orr.w	r3, r3, #32
 800aa70:	8213      	strh	r3, [r2, #16]
 800aa72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	49a5      	ldr	r1, [pc, #660]	; (800ad14 <ull_configure+0x3c0>)
 800aa80:	4620      	mov	r0, r4
 800aa82:	f7ff fe49 	bl	800a718 <dwt_modify16bitoffsetreg>
 800aa86:	7b6b      	ldrb	r3, [r5, #13]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	f000 8105 	beq.w	800ac98 <ull_configure+0x344>
 800aa8e:	78ab      	ldrb	r3, [r5, #2]
 800aa90:	f043 0310 	orr.w	r3, r3, #16
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	23fc      	movs	r3, #252	; 0xfc
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7ff fc1e 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800aaa4:	1e73      	subs	r3, r6, #1
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800aaae:	4620      	mov	r0, r4
 800aab0:	f7fe ffe0 	bl	8009a74 <dwt_write8bitoffsetreg>
 800aab4:	786b      	ldrb	r3, [r5, #1]
 800aab6:	2b07      	cmp	r3, #7
 800aab8:	bf0c      	ite	eq
 800aaba:	2308      	moveq	r3, #8
 800aabc:	2300      	movne	r3, #0
 800aabe:	2201      	movs	r2, #1
 800aac0:	2124      	movs	r1, #36	; 0x24
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7fe ffd6 	bl	8009a74 <dwt_write8bitoffsetreg>
 800aac8:	7aeb      	ldrb	r3, [r5, #11]
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	2b03      	cmp	r3, #3
 800aad0:	bf0c      	ite	eq
 800aad2:	4b91      	ldreq	r3, [pc, #580]	; (800ad18 <ull_configure+0x3c4>)
 800aad4:	4b91      	ldrne	r3, [pc, #580]	; (800ad1c <ull_configure+0x3c8>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	4991      	ldr	r1, [pc, #580]	; (800ad20 <ull_configure+0x3cc>)
 800aada:	4620      	mov	r0, r4
 800aadc:	f7fe fe3c 	bl	8009758 <dwt_write32bitoffsetreg>
 800aae0:	2200      	movs	r2, #0
 800aae2:	4990      	ldr	r1, [pc, #576]	; (800ad24 <ull_configure+0x3d0>)
 800aae4:	4620      	mov	r0, r4
 800aae6:	f7fe f9c2 	bl	8008e6e <dwt_read32bitoffsetreg>
 800aaea:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800aaee:	f020 001f 	bic.w	r0, r0, #31
 800aaf2:	f1b9 0f09 	cmp.w	r9, #9
 800aaf6:	bf08      	it	eq
 800aaf8:	f040 0001 	orreq.w	r0, r0, #1
 800aafc:	792a      	ldrb	r2, [r5, #4]
 800aafe:	0212      	lsls	r2, r2, #8
 800ab00:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800ab04:	78eb      	ldrb	r3, [r5, #3]
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	796b      	ldrb	r3, [r5, #5]
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	f003 0306 	and.w	r3, r3, #6
 800ab14:	4313      	orrs	r3, r2
 800ab16:	4303      	orrs	r3, r0
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4982      	ldr	r1, [pc, #520]	; (800ad24 <ull_configure+0x3d0>)
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f7fe fe1b 	bl	8009758 <dwt_write32bitoffsetreg>
 800ab22:	79aa      	ldrb	r2, [r5, #6]
 800ab24:	786b      	ldrb	r3, [r5, #1]
 800ab26:	031b      	lsls	r3, r3, #12
 800ab28:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800ab32:	2200      	movs	r2, #0
 800ab34:	2120      	movs	r1, #32
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7ff fa60 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800ab3c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800ab40:	b923      	cbnz	r3, 800ab4c <ull_configure+0x1f8>
 800ab42:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800ab46:	726b      	strb	r3, [r5, #9]
 800ab48:	2300      	movs	r3, #0
 800ab4a:	72ab      	strb	r3, [r5, #10]
 800ab4c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800ab50:	2202      	movs	r2, #2
 800ab52:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7fe fda1 	bl	800969e <dwt_write16bitoffsetreg>
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	4972      	ldr	r1, [pc, #456]	; (800ad28 <ull_configure+0x3d4>)
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7fe f9ac 	bl	8008ebe <dwt_read8bitoffsetreg>
 800ab66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab68:	7bdb      	ldrb	r3, [r3, #15]
 800ab6a:	454b      	cmp	r3, r9
 800ab6c:	f000 809e 	beq.w	800acac <ull_configure+0x358>
 800ab70:	2803      	cmp	r0, #3
 800ab72:	f000 809f 	beq.w	800acb4 <ull_configure+0x360>
 800ab76:	f1b9 0f09 	cmp.w	r9, #9
 800ab7a:	f000 80a0 	beq.w	800acbe <ull_configure+0x36a>
 800ab7e:	4b6b      	ldr	r3, [pc, #428]	; (800ad2c <ull_configure+0x3d8>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	496b      	ldr	r1, [pc, #428]	; (800ad30 <ull_configure+0x3dc>)
 800ab84:	4620      	mov	r0, r4
 800ab86:	f7fe fde7 	bl	8009758 <dwt_write32bitoffsetreg>
 800ab8a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800ab94:	4620      	mov	r0, r4
 800ab96:	f7fe fd82 	bl	800969e <dwt_write16bitoffsetreg>
 800ab9a:	2314      	movs	r3, #20
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4965      	ldr	r1, [pc, #404]	; (800ad34 <ull_configure+0x3e0>)
 800aba0:	4620      	mov	r0, r4
 800aba2:	f7fe ff67 	bl	8009a74 <dwt_write8bitoffsetreg>
 800aba6:	230e      	movs	r3, #14
 800aba8:	2202      	movs	r2, #2
 800abaa:	4963      	ldr	r1, [pc, #396]	; (800ad38 <ull_configure+0x3e4>)
 800abac:	4620      	mov	r0, r4
 800abae:	f7fe ff61 	bl	8009a74 <dwt_write8bitoffsetreg>
 800abb2:	2381      	movs	r3, #129	; 0x81
 800abb4:	2200      	movs	r2, #0
 800abb6:	4961      	ldr	r1, [pc, #388]	; (800ad3c <ull_configure+0x3e8>)
 800abb8:	4620      	mov	r0, r4
 800abba:	f7fe ff5b 	bl	8009a74 <dwt_write8bitoffsetreg>
 800abbe:	2302      	movs	r3, #2
 800abc0:	2200      	movs	r2, #0
 800abc2:	2144      	movs	r1, #68	; 0x44
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7fe ff55 	bl	8009a74 <dwt_write8bitoffsetreg>
 800abca:	2101      	movs	r1, #1
 800abcc:	4620      	mov	r0, r4
 800abce:	f7ff fc45 	bl	800a45c <ull_setdwstate>
 800abd2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800abd6:	f04f 0814 	mov.w	r8, #20
 800abda:	2700      	movs	r7, #0
 800abdc:	2644      	movs	r6, #68	; 0x44
 800abde:	4640      	mov	r0, r8
 800abe0:	f7f5 fe3f 	bl	8000862 <deca_usleep>
 800abe4:	463a      	mov	r2, r7
 800abe6:	4631      	mov	r1, r6
 800abe8:	4620      	mov	r0, r4
 800abea:	f7fe f968 	bl	8008ebe <dwt_read8bitoffsetreg>
 800abee:	f010 0f02 	tst.w	r0, #2
 800abf2:	f040 80b5 	bne.w	800ad60 <ull_configure+0x40c>
 800abf6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800abfa:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800abfe:	d1ee      	bne.n	800abde <ull_configure+0x28a>
 800ac00:	f06f 0001 	mvn.w	r0, #1
 800ac04:	e0de      	b.n	800adc4 <ull_configure+0x470>
 800ac06:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ac08:	8a13      	ldrh	r3, [r2, #16]
 800ac0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ac0e:	8213      	strh	r3, [r2, #16]
 800ac10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	493d      	ldr	r1, [pc, #244]	; (800ad14 <ull_configure+0x3c0>)
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f7ff f9ec 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800ac24:	f240 3306 	movw	r3, #774	; 0x306
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4945      	ldr	r1, [pc, #276]	; (800ad40 <ull_configure+0x3ec>)
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f7fe fd93 	bl	8009758 <dwt_write32bitoffsetreg>
 800ac32:	2300      	movs	r3, #0
 800ac34:	461a      	mov	r2, r3
 800ac36:	4943      	ldr	r1, [pc, #268]	; (800ad44 <ull_configure+0x3f0>)
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f7fe fd8d 	bl	8009758 <dwt_write32bitoffsetreg>
 800ac3e:	4b42      	ldr	r3, [pc, #264]	; (800ad48 <ull_configure+0x3f4>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	4931      	ldr	r1, [pc, #196]	; (800ad08 <ull_configure+0x3b4>)
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7fe fd87 	bl	8009758 <dwt_write32bitoffsetreg>
 800ac4a:	239d      	movs	r3, #157	; 0x9d
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	4b2f      	ldr	r3, [pc, #188]	; (800ad0c <ull_configure+0x3b8>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	492f      	ldr	r1, [pc, #188]	; (800ad10 <ull_configure+0x3bc>)
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7ff f9d1 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800ac5a:	e714      	b.n	800aa86 <ull_configure+0x132>
 800ac5c:	7b2a      	ldrb	r2, [r5, #12]
 800ac5e:	4b29      	ldr	r3, [pc, #164]	; (800ad04 <ull_configure+0x3b0>)
 800ac60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ac64:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800ac68:	fb02 f203 	mul.w	r2, r2, r3
 800ac6c:	0c93      	lsrs	r3, r2, #18
 800ac6e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800ac72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac76:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ac7a:	bf28      	it	cs
 800ac7c:	3301      	addcs	r3, #1
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	e6da      	b.n	800aa38 <ull_configure+0xe4>
 800ac82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4921      	ldr	r1, [pc, #132]	; (800ad14 <ull_configure+0x3c0>)
 800ac90:	4620      	mov	r0, r4
 800ac92:	f7ff fd41 	bl	800a718 <dwt_modify16bitoffsetreg>
 800ac96:	e6f6      	b.n	800aa86 <ull_configure+0x132>
 800ac98:	78ab      	ldrb	r3, [r5, #2]
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	23ec      	movs	r3, #236	; 0xec
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7ff fb1b 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800acaa:	e6fb      	b.n	800aaa4 <ull_configure+0x150>
 800acac:	2803      	cmp	r0, #3
 800acae:	f47f af62 	bne.w	800ab76 <ull_configure+0x222>
 800acb2:	e058      	b.n	800ad66 <ull_configure+0x412>
 800acb4:	2102      	movs	r1, #2
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff fbd0 	bl	800a45c <ull_setdwstate>
 800acbc:	e75b      	b.n	800ab76 <ull_configure+0x222>
 800acbe:	4b23      	ldr	r3, [pc, #140]	; (800ad4c <ull_configure+0x3f8>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	491b      	ldr	r1, [pc, #108]	; (800ad30 <ull_configure+0x3dc>)
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7fe fd47 	bl	8009758 <dwt_write32bitoffsetreg>
 800acca:	f640 733c 	movw	r3, #3900	; 0xf3c
 800acce:	2200      	movs	r2, #0
 800acd0:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800acd4:	4620      	mov	r0, r4
 800acd6:	f7fe fce2 	bl	800969e <dwt_write16bitoffsetreg>
 800acda:	e75e      	b.n	800ab9a <ull_configure+0x246>
 800acdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ace6:	2200      	movs	r2, #0
 800ace8:	490a      	ldr	r1, [pc, #40]	; (800ad14 <ull_configure+0x3c0>)
 800acea:	4620      	mov	r0, r4
 800acec:	f7ff fd14 	bl	800a718 <dwt_modify16bitoffsetreg>
 800acf0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800acf2:	8a13      	ldrh	r3, [r2, #16]
 800acf4:	f043 0308 	orr.w	r3, r3, #8
 800acf8:	8213      	strh	r3, [r2, #16]
 800acfa:	e046      	b.n	800ad8a <ull_configure+0x436>
 800acfc:	00026668 	.word	0x00026668
 800ad00:	fffc4fcf 	.word	0xfffc4fcf
 800ad04:	080123f4 	.word	0x080123f4
 800ad08:	000e0014 	.word	0x000e0014
 800ad0c:	bfffff00 	.word	0xbfffff00
 800ad10:	000e0018 	.word	0x000e0018
 800ad14:	000b0008 	.word	0x000b0008
 800ad18:	af5f35cc 	.word	0xaf5f35cc
 800ad1c:	af5f584c 	.word	0xaf5f584c
 800ad20:	0006000c 	.word	0x0006000c
 800ad24:	00010008 	.word	0x00010008
 800ad28:	000f0030 	.word	0x000f0030
 800ad2c:	1c071134 	.word	0x1c071134
 800ad30:	0007001c 	.word	0x0007001c
 800ad34:	00070050 	.word	0x00070050
 800ad38:	00070018 	.word	0x00070018
 800ad3c:	00090008 	.word	0x00090008
 800ad40:	000e000c 	.word	0x000e000c
 800ad44:	000e0010 	.word	0x000e0010
 800ad48:	000c5a0a 	.word	0x000c5a0a
 800ad4c:	1c010034 	.word	0x1c010034
 800ad50:	2200      	movs	r2, #0
 800ad52:	9200      	str	r2, [sp, #0]
 800ad54:	23fe      	movs	r3, #254	; 0xfe
 800ad56:	491d      	ldr	r1, [pc, #116]	; (800adcc <ull_configure+0x478>)
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f7ff fac1 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800ad5e:	e01e      	b.n	800ad9e <ull_configure+0x44a>
 800ad60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad62:	f883 900f 	strb.w	r9, [r3, #15]
 800ad66:	792b      	ldrb	r3, [r5, #4]
 800ad68:	3b09      	subs	r3, #9
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b0f      	cmp	r3, #15
 800ad6e:	d8ef      	bhi.n	800ad50 <ull_configure+0x3fc>
 800ad70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad72:	7a1b      	ldrb	r3, [r3, #8]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d0b1      	beq.n	800acdc <ull_configure+0x388>
 800ad78:	4649      	mov	r1, r9
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f7fe fda4 	bl	80098c8 <ull_configmrxlut>
 800ad80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ad82:	8a13      	ldrh	r3, [r2, #16]
 800ad84:	f023 0308 	bic.w	r3, r3, #8
 800ad88:	8213      	strh	r3, [r2, #16]
 800ad8a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800ad94:	2200      	movs	r2, #0
 800ad96:	490d      	ldr	r1, [pc, #52]	; (800adcc <ull_configure+0x478>)
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7ff fcbd 	bl	800a718 <dwt_modify16bitoffsetreg>
 800ad9e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800ada2:	bfcc      	ite	gt
 800ada4:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800ada8:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800adb2:	2200      	movs	r2, #0
 800adb4:	4906      	ldr	r1, [pc, #24]	; (800add0 <ull_configure+0x47c>)
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7ff f920 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800adbc:	2101      	movs	r1, #1
 800adbe:	4620      	mov	r0, r4
 800adc0:	f7ff fd12 	bl	800a7e8 <ull_pgf_cal>
 800adc4:	b003      	add	sp, #12
 800adc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adca:	bf00      	nop
 800adcc:	00030018 	.word	0x00030018
 800add0:	00060010 	.word	0x00060010

0800add4 <ull_initialise>:
 800add4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add6:	b083      	sub	sp, #12
 800add8:	4605      	mov	r5, r0
 800adda:	460e      	mov	r6, r1
 800addc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d051      	beq.n	800ae86 <ull_initialise+0xb2>
 800ade2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800ade4:	2300      	movs	r3, #0
 800ade6:	73a3      	strb	r3, [r4, #14]
 800ade8:	2202      	movs	r2, #2
 800adea:	8222      	strh	r2, [r4, #16]
 800adec:	7523      	strb	r3, [r4, #20]
 800adee:	7563      	strb	r3, [r4, #21]
 800adf0:	73e3      	strb	r3, [r4, #15]
 800adf2:	7263      	strb	r3, [r4, #9]
 800adf4:	72a3      	strb	r3, [r4, #10]
 800adf6:	2104      	movs	r1, #4
 800adf8:	4628      	mov	r0, r5
 800adfa:	f7fe fc8b 	bl	8009714 <_dwt_otpread>
 800adfe:	4607      	mov	r7, r0
 800ae00:	2105      	movs	r1, #5
 800ae02:	4628      	mov	r0, r5
 800ae04:	f7fe fc86 	bl	8009714 <_dwt_otpread>
 800ae08:	b10f      	cbz	r7, 800ae0e <ull_initialise+0x3a>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d140      	bne.n	800ae90 <ull_initialise+0xbc>
 800ae0e:	2120      	movs	r1, #32
 800ae10:	4628      	mov	r0, r5
 800ae12:	f7fe fc7f 	bl	8009714 <_dwt_otpread>
 800ae16:	4b35      	ldr	r3, [pc, #212]	; (800aeec <ull_initialise+0x118>)
 800ae18:	4298      	cmp	r0, r3
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2301      	moveq	r3, #1
 800ae1e:	2300      	movne	r3, #0
 800ae20:	7223      	strb	r3, [r4, #8]
 800ae22:	f016 0f10 	tst.w	r6, #16
 800ae26:	d142      	bne.n	800aeae <ull_initialise+0xda>
 800ae28:	f016 0f20 	tst.w	r6, #32
 800ae2c:	d145      	bne.n	800aeba <ull_initialise+0xe6>
 800ae2e:	f016 0f40 	tst.w	r6, #64	; 0x40
 800ae32:	d148      	bne.n	800aec6 <ull_initialise+0xf2>
 800ae34:	f016 0f80 	tst.w	r6, #128	; 0x80
 800ae38:	d14c      	bne.n	800aed4 <ull_initialise+0x100>
 800ae3a:	7aa3      	ldrb	r3, [r4, #10]
 800ae3c:	b90b      	cbnz	r3, 800ae42 <ull_initialise+0x6e>
 800ae3e:	2385      	movs	r3, #133	; 0x85
 800ae40:	72a3      	strb	r3, [r4, #10]
 800ae42:	7a63      	ldrb	r3, [r4, #9]
 800ae44:	b90b      	cbnz	r3, 800ae4a <ull_initialise+0x76>
 800ae46:	2374      	movs	r3, #116	; 0x74
 800ae48:	7263      	strb	r3, [r4, #9]
 800ae4a:	211f      	movs	r1, #31
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7fe fc61 	bl	8009714 <_dwt_otpread>
 800ae52:	7320      	strb	r0, [r4, #12]
 800ae54:	211e      	movs	r1, #30
 800ae56:	4628      	mov	r0, r5
 800ae58:	f7fe fc5c 	bl	8009714 <_dwt_otpread>
 800ae5c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800ae60:	bf12      	itee	ne
 800ae62:	7360      	strbne	r0, [r4, #13]
 800ae64:	232e      	moveq	r3, #46	; 0x2e
 800ae66:	7363      	strbeq	r3, [r4, #13]
 800ae68:	7b63      	ldrb	r3, [r4, #13]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4920      	ldr	r1, [pc, #128]	; (800aef0 <ull_initialise+0x11c>)
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f7fe fe00 	bl	8009a74 <dwt_write8bitoffsetreg>
 800ae74:	2135      	movs	r1, #53	; 0x35
 800ae76:	4628      	mov	r0, r5
 800ae78:	f7fe fc4c 	bl	8009714 <_dwt_otpread>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	bb78      	cbnz	r0, 800aee0 <ull_initialise+0x10c>
 800ae80:	2000      	movs	r0, #0
 800ae82:	b003      	add	sp, #12
 800ae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae86:	2028      	movs	r0, #40	; 0x28
 800ae88:	f006 ffe0 	bl	8011e4c <malloc>
 800ae8c:	6528      	str	r0, [r5, #80]	; 0x50
 800ae8e:	e7a8      	b.n	800ade2 <ull_initialise+0xe>
 800ae90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4915      	ldr	r1, [pc, #84]	; (800aef4 <ull_initialise+0x120>)
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f7ff fc3a 	bl	800a718 <dwt_modify16bitoffsetreg>
 800aea4:	8a23      	ldrh	r3, [r4, #16]
 800aea6:	f043 0310 	orr.w	r3, r3, #16
 800aeaa:	8223      	strh	r3, [r4, #16]
 800aeac:	e7af      	b.n	800ae0e <ull_initialise+0x3a>
 800aeae:	2106      	movs	r1, #6
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f7fe fc2f 	bl	8009714 <_dwt_otpread>
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	e7b6      	b.n	800ae28 <ull_initialise+0x54>
 800aeba:	2107      	movs	r1, #7
 800aebc:	4628      	mov	r0, r5
 800aebe:	f7fe fc29 	bl	8009714 <_dwt_otpread>
 800aec2:	6060      	str	r0, [r4, #4]
 800aec4:	e7b3      	b.n	800ae2e <ull_initialise+0x5a>
 800aec6:	2108      	movs	r1, #8
 800aec8:	4628      	mov	r0, r5
 800aeca:	f7fe fc23 	bl	8009714 <_dwt_otpread>
 800aece:	0c00      	lsrs	r0, r0, #16
 800aed0:	7260      	strb	r0, [r4, #9]
 800aed2:	e7af      	b.n	800ae34 <ull_initialise+0x60>
 800aed4:	2109      	movs	r1, #9
 800aed6:	4628      	mov	r0, r5
 800aed8:	f7fe fc1c 	bl	8009714 <_dwt_otpread>
 800aedc:	72a0      	strb	r0, [r4, #10]
 800aede:	e7ac      	b.n	800ae3a <ull_initialise+0x66>
 800aee0:	2200      	movs	r2, #0
 800aee2:	4905      	ldr	r1, [pc, #20]	; (800aef8 <ull_initialise+0x124>)
 800aee4:	4628      	mov	r0, r5
 800aee6:	f7fe fc37 	bl	8009758 <dwt_write32bitoffsetreg>
 800aeea:	e7c9      	b.n	800ae80 <ull_initialise+0xac>
 800aeec:	10000240 	.word	0x10000240
 800aef0:	00090014 	.word	0x00090014
 800aef4:	000b0008 	.word	0x000b0008
 800aef8:	00090004 	.word	0x00090004

0800aefc <ull_rxenable>:
 800aefc:	b530      	push	{r4, r5, lr}
 800aefe:	b083      	sub	sp, #12
 800af00:	4605      	mov	r5, r0
 800af02:	460c      	mov	r4, r1
 800af04:	b171      	cbz	r1, 800af24 <ull_rxenable+0x28>
 800af06:	f021 0302 	bic.w	r3, r1, #2
 800af0a:	3b01      	subs	r3, #1
 800af0c:	2b0f      	cmp	r3, #15
 800af0e:	d862      	bhi.n	800afd6 <ull_rxenable+0xda>
 800af10:	e8df f003 	tbb	[pc, r3]
 800af14:	24616111 	.word	0x24616111
 800af18:	2d616161 	.word	0x2d616161
 800af1c:	61616161 	.word	0x61616161
 800af20:	3a616161 	.word	0x3a616161
 800af24:	2102      	movs	r1, #2
 800af26:	9101      	str	r1, [sp, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	9200      	str	r2, [sp, #0]
 800af2c:	4613      	mov	r3, r2
 800af2e:	f7fd ff16 	bl	8008d5e <dwt_xfer3xxx>
 800af32:	4620      	mov	r0, r4
 800af34:	e010      	b.n	800af58 <ull_rxenable+0x5c>
 800af36:	2302      	movs	r3, #2
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	9200      	str	r2, [sp, #0]
 800af3e:	4613      	mov	r3, r2
 800af40:	2104      	movs	r1, #4
 800af42:	f7fd ff0c 	bl	8008d5e <dwt_xfer3xxx>
 800af46:	2203      	movs	r2, #3
 800af48:	2144      	movs	r1, #68	; 0x44
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7fd ffb7 	bl	8008ebe <dwt_read8bitoffsetreg>
 800af50:	f010 0f08 	tst.w	r0, #8
 800af54:	d125      	bne.n	800afa2 <ull_rxenable+0xa6>
 800af56:	2000      	movs	r0, #0
 800af58:	b003      	add	sp, #12
 800af5a:	bd30      	pop	{r4, r5, pc}
 800af5c:	2302      	movs	r3, #2
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	9200      	str	r2, [sp, #0]
 800af64:	4613      	mov	r3, r2
 800af66:	210a      	movs	r1, #10
 800af68:	f7fd fef9 	bl	8008d5e <dwt_xfer3xxx>
 800af6c:	e7eb      	b.n	800af46 <ull_rxenable+0x4a>
 800af6e:	2100      	movs	r1, #0
 800af70:	f7fe fc07 	bl	8009782 <_dwt_adjust_delaytime>
 800af74:	2302      	movs	r3, #2
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	9200      	str	r2, [sp, #0]
 800af7c:	4613      	mov	r3, r2
 800af7e:	2108      	movs	r1, #8
 800af80:	4628      	mov	r0, r5
 800af82:	f7fd feec 	bl	8008d5e <dwt_xfer3xxx>
 800af86:	e7de      	b.n	800af46 <ull_rxenable+0x4a>
 800af88:	2101      	movs	r1, #1
 800af8a:	f7fe fbfa 	bl	8009782 <_dwt_adjust_delaytime>
 800af8e:	2302      	movs	r3, #2
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	9200      	str	r2, [sp, #0]
 800af96:	4613      	mov	r3, r2
 800af98:	2106      	movs	r1, #6
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7fd fedf 	bl	8008d5e <dwt_xfer3xxx>
 800afa0:	e7d1      	b.n	800af46 <ull_rxenable+0x4a>
 800afa2:	2302      	movs	r3, #2
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	2100      	movs	r1, #0
 800afa8:	9100      	str	r1, [sp, #0]
 800afaa:	460b      	mov	r3, r1
 800afac:	460a      	mov	r2, r1
 800afae:	4628      	mov	r0, r5
 800afb0:	f7fd fed5 	bl	8008d5e <dwt_xfer3xxx>
 800afb4:	f014 0f02 	tst.w	r4, #2
 800afb8:	d002      	beq.n	800afc0 <ull_rxenable+0xc4>
 800afba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afbe:	e7cb      	b.n	800af58 <ull_rxenable+0x5c>
 800afc0:	2102      	movs	r1, #2
 800afc2:	9101      	str	r1, [sp, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	9200      	str	r2, [sp, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	4628      	mov	r0, r5
 800afcc:	f7fd fec7 	bl	8008d5e <dwt_xfer3xxx>
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afd4:	e7c0      	b.n	800af58 <ull_rxenable+0x5c>
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afda:	e7bd      	b.n	800af58 <ull_rxenable+0x5c>

0800afdc <ull_softreset_no_sema_fcmd>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	4606      	mov	r6, r0
 800afe2:	2502      	movs	r5, #2
 800afe4:	9501      	str	r5, [sp, #4]
 800afe6:	2400      	movs	r4, #0
 800afe8:	9400      	str	r4, [sp, #0]
 800afea:	4623      	mov	r3, r4
 800afec:	4622      	mov	r2, r4
 800afee:	2119      	movs	r1, #25
 800aff0:	f7fd feb5 	bl	8008d5e <dwt_xfer3xxx>
 800aff4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800aff6:	739c      	strb	r4, [r3, #14]
 800aff8:	821d      	strh	r5, [r3, #16]
 800affa:	751c      	strb	r4, [r3, #20]
 800affc:	755c      	strb	r4, [r3, #21]
 800affe:	73dc      	strb	r4, [r3, #15]
 800b000:	b002      	add	sp, #8
 800b002:	bd70      	pop	{r4, r5, r6, pc}

0800b004 <ull_softreset_fcmd>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	4606      	mov	r6, r0
 800b00a:	2502      	movs	r5, #2
 800b00c:	9501      	str	r5, [sp, #4]
 800b00e:	2400      	movs	r4, #0
 800b010:	9400      	str	r4, [sp, #0]
 800b012:	4623      	mov	r3, r4
 800b014:	4622      	mov	r2, r4
 800b016:	2118      	movs	r1, #24
 800b018:	f7fd fea1 	bl	8008d5e <dwt_xfer3xxx>
 800b01c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b01e:	739c      	strb	r4, [r3, #14]
 800b020:	821d      	strh	r5, [r3, #16]
 800b022:	751c      	strb	r4, [r3, #20]
 800b024:	755c      	strb	r4, [r3, #21]
 800b026:	73dc      	strb	r4, [r3, #15]
 800b028:	b002      	add	sp, #8
 800b02a:	bd70      	pop	{r4, r5, r6, pc}

0800b02c <dwt_ioctl>:
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	b091      	sub	sp, #68	; 0x44
 800b032:	4606      	mov	r6, r0
 800b034:	4615      	mov	r5, r2
 800b036:	461c      	mov	r4, r3
 800b038:	299c      	cmp	r1, #156	; 0x9c
 800b03a:	f200 809f 	bhi.w	800b17c <dwt_ioctl+0x150>
 800b03e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b042:	0a54      	.short	0x0a54
 800b044:	00a30a5f 	.word	0x00a30a5f
 800b048:	00c000a7 	.word	0x00c000a7
 800b04c:	0192014c 	.word	0x0192014c
 800b050:	0156016f 	.word	0x0156016f
 800b054:	01ad01a2 	.word	0x01ad01a2
 800b058:	01bd01b5 	.word	0x01bd01b5
 800b05c:	01cd01c5 	.word	0x01cd01c5
 800b060:	01d901d5 	.word	0x01d901d5
 800b064:	027201e1 	.word	0x027201e1
 800b068:	02850280 	.word	0x02850280
 800b06c:	0294028f 	.word	0x0294028f
 800b070:	02a20299 	.word	0x02a20299
 800b074:	02dd02a7 	.word	0x02dd02a7
 800b078:	030502fa 	.word	0x030502fa
 800b07c:	031a0310 	.word	0x031a0310
 800b080:	03480352 	.word	0x03480352
 800b084:	0324033e 	.word	0x0324033e
 800b088:	03810331 	.word	0x03810331
 800b08c:	022f01fc 	.word	0x022f01fc
 800b090:	0245023d 	.word	0x0245023d
 800b094:	097d0259 	.word	0x097d0259
 800b098:	03610982 	.word	0x03610982
 800b09c:	03a3039f 	.word	0x03a3039f
 800b0a0:	03b103ac 	.word	0x03b103ac
 800b0a4:	03e503db 	.word	0x03e503db
 800b0a8:	041703ed 	.word	0x041703ed
 800b0ac:	042e0423 	.word	0x042e0423
 800b0b0:	04390357 	.word	0x04390357
 800b0b4:	04540442 	.word	0x04540442
 800b0b8:	047e046d 	.word	0x047e046d
 800b0bc:	04ca04c0 	.word	0x04ca04c0
 800b0c0:	04ff04f0 	.word	0x04ff04f0
 800b0c4:	0508051a 	.word	0x0508051a
 800b0c8:	056a0524 	.word	0x056a0524
 800b0cc:	05a20582 	.word	0x05a20582
 800b0d0:	05e505d1 	.word	0x05e505d1
 800b0d4:	060a05ee 	.word	0x060a05ee
 800b0d8:	074305f7 	.word	0x074305f7
 800b0dc:	07d30785 	.word	0x07d30785
 800b0e0:	07e407d9 	.word	0x07e407d9
 800b0e4:	081d07fd 	.word	0x081d07fd
 800b0e8:	08310827 	.word	0x08310827
 800b0ec:	0868085f 	.word	0x0868085f
 800b0f0:	0877086e 	.word	0x0877086e
 800b0f4:	08910884 	.word	0x08910884
 800b0f8:	08a4089b 	.word	0x08a4089b
 800b0fc:	08b808ad 	.word	0x08b808ad
 800b100:	08c908c3 	.word	0x08c908c3
 800b104:	08f708ec 	.word	0x08f708ec
 800b108:	090d0902 	.word	0x090d0902
 800b10c:	0959094e 	.word	0x0959094e
 800b110:	09880972 	.word	0x09880972
 800b114:	0a0709fd 	.word	0x0a0709fd
 800b118:	0a670a12 	.word	0x0a670a12
 800b11c:	0a490a1c 	.word	0x0a490a1c
 800b120:	09c60777 	.word	0x09c60777
 800b124:	0ad509e7 	.word	0x0ad509e7
 800b128:	0a740aca 	.word	0x0a740aca
 800b12c:	0a8a0a7f 	.word	0x0a8a0a7f
 800b130:	0aa00a95 	.word	0x0aa00a95
 800b134:	0ab60aab 	.word	0x0ab60aab
 800b138:	0cb50abf 	.word	0x0cb50abf
 800b13c:	0d2a0cef 	.word	0x0d2a0cef
 800b140:	0df90d4d 	.word	0x0df90d4d
 800b144:	0afd0e0e 	.word	0x0afd0e0e
 800b148:	0bf40bc1 	.word	0x0bf40bc1
 800b14c:	0c040bff 	.word	0x0c040bff
 800b150:	0c140c09 	.word	0x0c140c09
 800b154:	0c320c27 	.word	0x0c320c27
 800b158:	0c5c0c47 	.word	0x0c5c0c47
 800b15c:	009d0c98 	.word	0x009d0c98
 800b160:	009d009d 	.word	0x009d009d
 800b164:	009d009d 	.word	0x009d009d
 800b168:	009d009d 	.word	0x009d009d
 800b16c:	0d64009d 	.word	0x0d64009d
 800b170:	0ec20d75 	.word	0x0ec20d75
 800b174:	0db40dbf 	.word	0x0db40dbf
 800b178:	0dca0dd3 	.word	0x0dca0dd3
 800b17c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b180:	4628      	mov	r0, r5
 800b182:	b011      	add	sp, #68	; 0x44
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	6843      	ldr	r3, [r0, #4]
 800b18a:	4798      	blx	r3
 800b18c:	2500      	movs	r5, #0
 800b18e:	e7f7      	b.n	800b180 <dwt_ioctl+0x154>
 800b190:	2202      	movs	r2, #2
 800b192:	49b4      	ldr	r1, [pc, #720]	; (800b464 <dwt_ioctl+0x438>)
 800b194:	f7fd fe93 	bl	8008ebe <dwt_read8bitoffsetreg>
 800b198:	2803      	cmp	r0, #3
 800b19a:	d801      	bhi.n	800b1a0 <dwt_ioctl+0x174>
 800b19c:	2500      	movs	r5, #0
 800b19e:	e7ef      	b.n	800b180 <dwt_ioctl+0x154>
 800b1a0:	f7f5 fb36 	bl	8000810 <decamutexon>
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	2500      	movs	r5, #0
 800b1ac:	9500      	str	r5, [sp, #0]
 800b1ae:	462b      	mov	r3, r5
 800b1b0:	462a      	mov	r2, r5
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7fd fdd2 	bl	8008d5e <dwt_xfer3xxx>
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7f5 fb39 	bl	8000832 <decamutexoff>
 800b1c0:	e7de      	b.n	800b180 <dwt_ioctl+0x154>
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	f001 8602 	beq.w	800cdcc <dwt_ioctl+0x1da0>
 800b1c8:	7824      	ldrb	r4, [r4, #0]
 800b1ca:	f014 0f1d 	tst.w	r4, #29
 800b1ce:	d061      	beq.n	800b294 <dwt_ioctl+0x268>
 800b1d0:	f014 0f01 	tst.w	r4, #1
 800b1d4:	d023      	beq.n	800b21e <dwt_ioctl+0x1f2>
 800b1d6:	f014 0f02 	tst.w	r4, #2
 800b1da:	f04f 0302 	mov.w	r3, #2
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	f04f 0200 	mov.w	r2, #0
 800b1e4:	9200      	str	r2, [sp, #0]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	bf14      	ite	ne
 800b1ea:	210d      	movne	r1, #13
 800b1ec:	2103      	moveq	r1, #3
 800b1ee:	f7fd fdb6 	bl	8008d5e <dwt_xfer3xxx>
 800b1f2:	2203      	movs	r2, #3
 800b1f4:	2144      	movs	r1, #68	; 0x44
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7fd fe61 	bl	8008ebe <dwt_read8bitoffsetreg>
 800b1fc:	f010 0f08 	tst.w	r0, #8
 800b200:	bf08      	it	eq
 800b202:	2500      	moveq	r5, #0
 800b204:	d0bc      	beq.n	800b180 <dwt_ioctl+0x154>
 800b206:	2302      	movs	r3, #2
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	2100      	movs	r1, #0
 800b20c:	9100      	str	r1, [sp, #0]
 800b20e:	460b      	mov	r3, r1
 800b210:	460a      	mov	r2, r1
 800b212:	4630      	mov	r0, r6
 800b214:	f7fd fda3 	bl	8008d5e <dwt_xfer3xxx>
 800b218:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b21c:	e7b0      	b.n	800b180 <dwt_ioctl+0x154>
 800b21e:	f014 0f08 	tst.w	r4, #8
 800b222:	d111      	bne.n	800b248 <dwt_ioctl+0x21c>
 800b224:	f014 0f10 	tst.w	r4, #16
 800b228:	d121      	bne.n	800b26e <dwt_ioctl+0x242>
 800b22a:	f014 0f02 	tst.w	r4, #2
 800b22e:	f04f 0302 	mov.w	r3, #2
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	f04f 0200 	mov.w	r2, #0
 800b238:	9200      	str	r2, [sp, #0]
 800b23a:	4613      	mov	r3, r2
 800b23c:	bf14      	ite	ne
 800b23e:	2110      	movne	r1, #16
 800b240:	2109      	moveq	r1, #9
 800b242:	f7fd fd8c 	bl	8008d5e <dwt_xfer3xxx>
 800b246:	e7d4      	b.n	800b1f2 <dwt_ioctl+0x1c6>
 800b248:	2100      	movs	r1, #0
 800b24a:	f7fe fa9a 	bl	8009782 <_dwt_adjust_delaytime>
 800b24e:	f014 0f02 	tst.w	r4, #2
 800b252:	f04f 0302 	mov.w	r3, #2
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	f04f 0200 	mov.w	r2, #0
 800b25c:	9200      	str	r2, [sp, #0]
 800b25e:	4613      	mov	r3, r2
 800b260:	bf14      	ite	ne
 800b262:	210f      	movne	r1, #15
 800b264:	2107      	moveq	r1, #7
 800b266:	4630      	mov	r0, r6
 800b268:	f7fd fd79 	bl	8008d5e <dwt_xfer3xxx>
 800b26c:	e7c1      	b.n	800b1f2 <dwt_ioctl+0x1c6>
 800b26e:	2101      	movs	r1, #1
 800b270:	f7fe fa87 	bl	8009782 <_dwt_adjust_delaytime>
 800b274:	f014 0f02 	tst.w	r4, #2
 800b278:	f04f 0302 	mov.w	r3, #2
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	f04f 0200 	mov.w	r2, #0
 800b282:	9200      	str	r2, [sp, #0]
 800b284:	4613      	mov	r3, r2
 800b286:	bf14      	ite	ne
 800b288:	210e      	movne	r1, #14
 800b28a:	2105      	moveq	r1, #5
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7fd fd66 	bl	8008d5e <dwt_xfer3xxx>
 800b292:	e7ae      	b.n	800b1f2 <dwt_ioctl+0x1c6>
 800b294:	f014 0f20 	tst.w	r4, #32
 800b298:	d00f      	beq.n	800b2ba <dwt_ioctl+0x28e>
 800b29a:	f014 0f02 	tst.w	r4, #2
 800b29e:	f04f 0302 	mov.w	r3, #2
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	f04f 0500 	mov.w	r5, #0
 800b2a8:	9500      	str	r5, [sp, #0]
 800b2aa:	462b      	mov	r3, r5
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	bf14      	ite	ne
 800b2b0:	2111      	movne	r1, #17
 800b2b2:	210b      	moveq	r1, #11
 800b2b4:	f7fd fd53 	bl	8008d5e <dwt_xfer3xxx>
 800b2b8:	e762      	b.n	800b180 <dwt_ioctl+0x154>
 800b2ba:	f014 0f02 	tst.w	r4, #2
 800b2be:	f04f 0302 	mov.w	r3, #2
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	f04f 0500 	mov.w	r5, #0
 800b2c8:	9500      	str	r5, [sp, #0]
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	462a      	mov	r2, r5
 800b2ce:	bf14      	ite	ne
 800b2d0:	210c      	movne	r1, #12
 800b2d2:	2101      	moveq	r1, #1
 800b2d4:	f7fd fd43 	bl	8008d5e <dwt_xfer3xxx>
 800b2d8:	e752      	b.n	800b180 <dwt_ioctl+0x154>
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	f001 8579 	beq.w	800cdd2 <dwt_ioctl+0x1da6>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2128      	movs	r1, #40	; 0x28
 800b2e6:	f7fe fa37 	bl	8009758 <dwt_write32bitoffsetreg>
 800b2ea:	2500      	movs	r5, #0
 800b2ec:	e748      	b.n	800b180 <dwt_ioctl+0x154>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	495d      	ldr	r1, [pc, #372]	; (800b468 <dwt_ioctl+0x43c>)
 800b2f4:	f7fe fa30 	bl	8009758 <dwt_write32bitoffsetreg>
 800b2f8:	6863      	ldr	r3, [r4, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	495b      	ldr	r1, [pc, #364]	; (800b46c <dwt_ioctl+0x440>)
 800b2fe:	4630      	mov	r0, r6
 800b300:	f7fe fa2a 	bl	8009758 <dwt_write32bitoffsetreg>
 800b304:	68a3      	ldr	r3, [r4, #8]
 800b306:	2200      	movs	r2, #0
 800b308:	4959      	ldr	r1, [pc, #356]	; (800b470 <dwt_ioctl+0x444>)
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7fe fa24 	bl	8009758 <dwt_write32bitoffsetreg>
 800b310:	68e3      	ldr	r3, [r4, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	4957      	ldr	r1, [pc, #348]	; (800b474 <dwt_ioctl+0x448>)
 800b316:	4630      	mov	r0, r6
 800b318:	f7fe fa1e 	bl	8009758 <dwt_write32bitoffsetreg>
 800b31c:	2500      	movs	r5, #0
 800b31e:	e72f      	b.n	800b180 <dwt_ioctl+0x154>
 800b320:	2c00      	cmp	r4, #0
 800b322:	f001 8559 	beq.w	800cdd8 <dwt_ioctl+0x1dac>
 800b326:	8823      	ldrh	r3, [r4, #0]
 800b328:	6865      	ldr	r5, [r4, #4]
 800b32a:	2d03      	cmp	r5, #3
 800b32c:	f201 8557 	bhi.w	800cdde <dwt_ioctl+0x1db2>
 800b330:	e8df f005 	tbb	[pc, r5]
 800b334:	130d0702 	.word	0x130d0702
 800b338:	2200      	movs	r2, #0
 800b33a:	494f      	ldr	r1, [pc, #316]	; (800b478 <dwt_ioctl+0x44c>)
 800b33c:	f7fe f9af 	bl	800969e <dwt_write16bitoffsetreg>
 800b340:	e71e      	b.n	800b180 <dwt_ioctl+0x154>
 800b342:	2202      	movs	r2, #2
 800b344:	494c      	ldr	r1, [pc, #304]	; (800b478 <dwt_ioctl+0x44c>)
 800b346:	f7fe f9aa 	bl	800969e <dwt_write16bitoffsetreg>
 800b34a:	2500      	movs	r5, #0
 800b34c:	e718      	b.n	800b180 <dwt_ioctl+0x154>
 800b34e:	2200      	movs	r2, #0
 800b350:	494a      	ldr	r1, [pc, #296]	; (800b47c <dwt_ioctl+0x450>)
 800b352:	f7fe f9a4 	bl	800969e <dwt_write16bitoffsetreg>
 800b356:	2500      	movs	r5, #0
 800b358:	e712      	b.n	800b180 <dwt_ioctl+0x154>
 800b35a:	2202      	movs	r2, #2
 800b35c:	4947      	ldr	r1, [pc, #284]	; (800b47c <dwt_ioctl+0x450>)
 800b35e:	f7fe f99e 	bl	800969e <dwt_write16bitoffsetreg>
 800b362:	2500      	movs	r5, #0
 800b364:	e70c      	b.n	800b180 <dwt_ioctl+0x154>
 800b366:	2c00      	cmp	r4, #0
 800b368:	f001 853c 	beq.w	800cde4 <dwt_ioctl+0x1db8>
 800b36c:	7823      	ldrb	r3, [r4, #0]
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	f003 0306 	and.w	r3, r3, #6
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	f06f 0306 	mvn.w	r3, #6
 800b37a:	2200      	movs	r2, #0
 800b37c:	4940      	ldr	r1, [pc, #256]	; (800b480 <dwt_ioctl+0x454>)
 800b37e:	f7fe fe3d 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800b382:	2500      	movs	r5, #0
 800b384:	e6fc      	b.n	800b180 <dwt_ioctl+0x154>
 800b386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b390:	2200      	movs	r2, #0
 800b392:	493c      	ldr	r1, [pc, #240]	; (800b484 <dwt_ioctl+0x458>)
 800b394:	f7fe fe32 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800b398:	2500      	movs	r5, #0
 800b39a:	e6f1      	b.n	800b180 <dwt_ioctl+0x154>
 800b39c:	2c00      	cmp	r4, #0
 800b39e:	f001 8524 	beq.w	800cdea <dwt_ioctl+0x1dbe>
 800b3a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3a4:	7b1b      	ldrb	r3, [r3, #12]
 800b3a6:	7023      	strb	r3, [r4, #0]
 800b3a8:	2500      	movs	r5, #0
 800b3aa:	e6e9      	b.n	800b180 <dwt_ioctl+0x154>
 800b3ac:	2c00      	cmp	r4, #0
 800b3ae:	f001 851f 	beq.w	800cdf0 <dwt_ioctl+0x1dc4>
 800b3b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3b4:	7a5b      	ldrb	r3, [r3, #9]
 800b3b6:	7023      	strb	r3, [r4, #0]
 800b3b8:	2500      	movs	r5, #0
 800b3ba:	e6e1      	b.n	800b180 <dwt_ioctl+0x154>
 800b3bc:	2c00      	cmp	r4, #0
 800b3be:	f001 851a 	beq.w	800cdf6 <dwt_ioctl+0x1dca>
 800b3c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3c4:	7a9b      	ldrb	r3, [r3, #10]
 800b3c6:	7023      	strb	r3, [r4, #0]
 800b3c8:	2500      	movs	r5, #0
 800b3ca:	e6d9      	b.n	800b180 <dwt_ioctl+0x154>
 800b3cc:	2c00      	cmp	r4, #0
 800b3ce:	f001 8515 	beq.w	800cdfc <dwt_ioctl+0x1dd0>
 800b3d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6023      	str	r3, [r4, #0]
 800b3d8:	2500      	movs	r5, #0
 800b3da:	e6d1      	b.n	800b180 <dwt_ioctl+0x154>
 800b3dc:	2c00      	cmp	r4, #0
 800b3de:	f001 8510 	beq.w	800ce02 <dwt_ioctl+0x1dd6>
 800b3e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	6023      	str	r3, [r4, #0]
 800b3e8:	2500      	movs	r5, #0
 800b3ea:	e6c9      	b.n	800b180 <dwt_ioctl+0x154>
 800b3ec:	f7fe fc72 	bl	8009cd4 <ull_signal_rx_buff_free>
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	e6c5      	b.n	800b180 <dwt_ioctl+0x154>
 800b3f4:	2c00      	cmp	r4, #0
 800b3f6:	f001 8507 	beq.w	800ce08 <dwt_ioctl+0x1ddc>
 800b3fa:	6821      	ldr	r1, [r4, #0]
 800b3fc:	f7fe f9e7 	bl	80097ce <ull_setrxaftertxdelay>
 800b400:	2500      	movs	r5, #0
 800b402:	e6bd      	b.n	800b180 <dwt_ioctl+0x154>
 800b404:	2c00      	cmp	r4, #0
 800b406:	f001 8502 	beq.w	800ce0e <dwt_ioctl+0x1de2>
 800b40a:	7825      	ldrb	r5, [r4, #0]
 800b40c:	b15d      	cbz	r5, 800b426 <dwt_ioctl+0x3fa>
 800b40e:	6864      	ldr	r4, [r4, #4]
 800b410:	2340      	movs	r3, #64	; 0x40
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	23ff      	movs	r3, #255	; 0xff
 800b416:	2200      	movs	r2, #0
 800b418:	2110      	movs	r1, #16
 800b41a:	f7fe ff61 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800b41e:	2d02      	cmp	r5, #2
 800b420:	d107      	bne.n	800b432 <dwt_ioctl+0x406>
 800b422:	60f4      	str	r4, [r6, #12]
 800b424:	e005      	b.n	800b432 <dwt_ioctl+0x406>
 800b426:	2200      	movs	r2, #0
 800b428:	9200      	str	r2, [sp, #0]
 800b42a:	23bf      	movs	r3, #191	; 0xbf
 800b42c:	2110      	movs	r1, #16
 800b42e:	f7fe ff57 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800b432:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b434:	751d      	strb	r5, [r3, #20]
 800b436:	2500      	movs	r5, #0
 800b438:	e6a2      	b.n	800b180 <dwt_ioctl+0x154>
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	f001 84ea 	beq.w	800ce14 <dwt_ioctl+0x1de8>
 800b440:	6865      	ldr	r5, [r4, #4]
 800b442:	7823      	ldrb	r3, [r4, #0]
 800b444:	2203      	movs	r2, #3
 800b446:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b44a:	f7fe fb13 	bl	8009a74 <dwt_write8bitoffsetreg>
 800b44e:	b9dd      	cbnz	r5, 800b488 <dwt_ioctl+0x45c>
 800b450:	2200      	movs	r2, #0
 800b452:	9200      	str	r2, [sp, #0]
 800b454:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b458:	2110      	movs	r1, #16
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7ff f95c 	bl	800a718 <dwt_modify16bitoffsetreg>
 800b460:	e68e      	b.n	800b180 <dwt_ioctl+0x154>
 800b462:	bf00      	nop
 800b464:	000f0030 	.word	0x000f0030
 800b468:	00010054 	.word	0x00010054
 800b46c:	00010058 	.word	0x00010058
 800b470:	0001005c 	.word	0x0001005c
 800b474:	00010060 	.word	0x00010060
 800b478:	0001000c 	.word	0x0001000c
 800b47c:	00010010 	.word	0x00010010
 800b480:	00010008 	.word	0x00010008
 800b484:	00110004 	.word	0x00110004
 800b488:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b492:	2200      	movs	r2, #0
 800b494:	2110      	movs	r1, #16
 800b496:	4630      	mov	r0, r6
 800b498:	f7fe fdb0 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800b49c:	2500      	movs	r5, #0
 800b49e:	e66f      	b.n	800b180 <dwt_ioctl+0x154>
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	f7fd fce3 	bl	8008e6e <dwt_read32bitoffsetreg>
 800b4a8:	68b2      	ldr	r2, [r6, #8]
 800b4aa:	6813      	ldr	r3, [r2, #0]
 800b4ac:	4043      	eors	r3, r0
 800b4ae:	6852      	ldr	r2, [r2, #4]
 800b4b0:	4213      	tst	r3, r2
 800b4b2:	bf14      	ite	ne
 800b4b4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b4b8:	2500      	moveq	r5, #0
 800b4ba:	e661      	b.n	800b180 <dwt_ioctl+0x154>
 800b4bc:	2c00      	cmp	r4, #0
 800b4be:	f001 84ac 	beq.w	800ce1a <dwt_ioctl+0x1dee>
 800b4c2:	7821      	ldrb	r1, [r4, #0]
 800b4c4:	f7fe ff20 	bl	800a308 <ull_configciadiag>
 800b4c8:	2500      	movs	r5, #0
 800b4ca:	e659      	b.n	800b180 <dwt_ioctl+0x154>
 800b4cc:	b93a      	cbnz	r2, 800b4de <dwt_ioctl+0x4b2>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	9200      	str	r2, [sp, #0]
 800b4d2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b4d6:	49b8      	ldr	r1, [pc, #736]	; (800b7b8 <dwt_ioctl+0x78c>)
 800b4d8:	f7ff f91e 	bl	800a718 <dwt_modify16bitoffsetreg>
 800b4dc:	e650      	b.n	800b180 <dwt_ioctl+0x154>
 800b4de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	49b3      	ldr	r1, [pc, #716]	; (800b7b8 <dwt_ioctl+0x78c>)
 800b4ec:	f7ff f914 	bl	800a718 <dwt_modify16bitoffsetreg>
 800b4f0:	2500      	movs	r5, #0
 800b4f2:	e645      	b.n	800b180 <dwt_ioctl+0x154>
 800b4f4:	f002 0201 	and.w	r2, r2, #1
 800b4f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4fc:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800b500:	2a00      	cmp	r2, #0
 800b502:	bf08      	it	eq
 800b504:	460b      	moveq	r3, r1
 800b506:	02d2      	lsls	r2, r2, #11
 800b508:	f015 0f02 	tst.w	r5, #2
 800b50c:	bf12      	itee	ne
 800b50e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800b512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b516:	b29b      	uxtheq	r3, r3
 800b518:	9200      	str	r2, [sp, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	49a6      	ldr	r1, [pc, #664]	; (800b7b8 <dwt_ioctl+0x78c>)
 800b51e:	f7ff f8fb 	bl	800a718 <dwt_modify16bitoffsetreg>
 800b522:	2500      	movs	r5, #0
 800b524:	e62c      	b.n	800b180 <dwt_ioctl+0x154>
 800b526:	b92a      	cbnz	r2, 800b534 <dwt_ioctl+0x508>
 800b528:	4ba4      	ldr	r3, [pc, #656]	; (800b7bc <dwt_ioctl+0x790>)
 800b52a:	2202      	movs	r2, #2
 800b52c:	49a4      	ldr	r1, [pc, #656]	; (800b7c0 <dwt_ioctl+0x794>)
 800b52e:	f7fe f913 	bl	8009758 <dwt_write32bitoffsetreg>
 800b532:	e625      	b.n	800b180 <dwt_ioctl+0x154>
 800b534:	4ba3      	ldr	r3, [pc, #652]	; (800b7c4 <dwt_ioctl+0x798>)
 800b536:	2202      	movs	r2, #2
 800b538:	49a1      	ldr	r1, [pc, #644]	; (800b7c0 <dwt_ioctl+0x794>)
 800b53a:	f7fe f90d 	bl	8009758 <dwt_write32bitoffsetreg>
 800b53e:	2500      	movs	r5, #0
 800b540:	e61e      	b.n	800b180 <dwt_ioctl+0x154>
 800b542:	4611      	mov	r1, r2
 800b544:	f7fe f957 	bl	80097f6 <ull_setlnapamode>
 800b548:	2500      	movs	r5, #0
 800b54a:	e619      	b.n	800b180 <dwt_ioctl+0x154>
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	f001 8467 	beq.w	800ce20 <dwt_ioctl+0x1df4>
 800b552:	2200      	movs	r2, #0
 800b554:	499c      	ldr	r1, [pc, #624]	; (800b7c8 <dwt_ioctl+0x79c>)
 800b556:	f7fd fcb2 	bl	8008ebe <dwt_read8bitoffsetreg>
 800b55a:	7020      	strb	r0, [r4, #0]
 800b55c:	2500      	movs	r5, #0
 800b55e:	e60f      	b.n	800b180 <dwt_ioctl+0x154>
 800b560:	4621      	mov	r1, r4
 800b562:	f7fe f969 	bl	8009838 <ull_configurestskey>
 800b566:	2500      	movs	r5, #0
 800b568:	e60a      	b.n	800b180 <dwt_ioctl+0x154>
 800b56a:	4621      	mov	r1, r4
 800b56c:	f7fe f988 	bl	8009880 <ull_configurestsiv>
 800b570:	2500      	movs	r5, #0
 800b572:	e605      	b.n	800b180 <dwt_ioctl+0x154>
 800b574:	2301      	movs	r3, #1
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	23ff      	movs	r3, #255	; 0xff
 800b57a:	2200      	movs	r2, #0
 800b57c:	4993      	ldr	r1, [pc, #588]	; (800b7cc <dwt_ioctl+0x7a0>)
 800b57e:	f7fe feaf 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800b582:	2500      	movs	r5, #0
 800b584:	e5fc      	b.n	800b180 <dwt_ioctl+0x154>
 800b586:	4611      	mov	r1, r2
 800b588:	f7fe f99e 	bl	80098c8 <ull_configmrxlut>
 800b58c:	2500      	movs	r5, #0
 800b58e:	e5f7      	b.n	800b180 <dwt_ioctl+0x154>
 800b590:	2318      	movs	r3, #24
 800b592:	2200      	movs	r2, #0
 800b594:	498e      	ldr	r1, [pc, #568]	; (800b7d0 <dwt_ioctl+0x7a4>)
 800b596:	f7fe f8df 	bl	8009758 <dwt_write32bitoffsetreg>
 800b59a:	23e8      	movs	r3, #232	; 0xe8
 800b59c:	2200      	movs	r2, #0
 800b59e:	498d      	ldr	r1, [pc, #564]	; (800b7d4 <dwt_ioctl+0x7a8>)
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7fe f8d9 	bl	8009758 <dwt_write32bitoffsetreg>
 800b5a6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b5a8:	7d9b      	ldrb	r3, [r3, #22]
 800b5aa:	085b      	lsrs	r3, r3, #1
 800b5ac:	d01a      	beq.n	800b5e4 <dwt_ioctl+0x5b8>
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	4989      	ldr	r1, [pc, #548]	; (800b7d8 <dwt_ioctl+0x7ac>)
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7fd fc71 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b5b8:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800b5bc:	3b09      	subs	r3, #9
 800b5be:	2b0f      	cmp	r3, #15
 800b5c0:	f201 8431 	bhi.w	800ce26 <dwt_ioctl+0x1dfa>
 800b5c4:	f000 0001 	and.w	r0, r0, #1
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	bf0c      	ite	eq
 800b5cc:	2105      	moveq	r1, #5
 800b5ce:	2109      	movne	r1, #9
 800b5d0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b5d2:	7a1b      	ldrb	r3, [r3, #8]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	f001 8429 	beq.w	800ce2c <dwt_ioctl+0x1e00>
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7fe f974 	bl	80098c8 <ull_configmrxlut>
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	e5cd      	b.n	800b180 <dwt_ioctl+0x154>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	497c      	ldr	r1, [pc, #496]	; (800b7dc <dwt_ioctl+0x7b0>)
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f7fe fa42 	bl	8009a74 <dwt_write8bitoffsetreg>
 800b5f0:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800b5f2:	7d93      	ldrb	r3, [r2, #22]
 800b5f4:	f043 0302 	orr.w	r3, r3, #2
 800b5f8:	7593      	strb	r3, [r2, #22]
 800b5fa:	e7d8      	b.n	800b5ae <dwt_ioctl+0x582>
 800b5fc:	2c00      	cmp	r4, #0
 800b5fe:	f001 8418 	beq.w	800ce32 <dwt_ioctl+0x1e06>
 800b602:	7824      	ldrb	r4, [r4, #0]
 800b604:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b606:	755c      	strb	r4, [r3, #21]
 800b608:	0323      	lsls	r3, r4, #12
 800b60a:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800b614:	2200      	movs	r2, #0
 800b616:	2110      	movs	r1, #16
 800b618:	f7ff f87e 	bl	800a718 <dwt_modify16bitoffsetreg>
 800b61c:	f004 0403 	and.w	r4, r4, #3
 800b620:	2c03      	cmp	r4, #3
 800b622:	bf0c      	ite	eq
 800b624:	4b6e      	ldreq	r3, [pc, #440]	; (800b7e0 <dwt_ioctl+0x7b4>)
 800b626:	4b6f      	ldrne	r3, [pc, #444]	; (800b7e4 <dwt_ioctl+0x7b8>)
 800b628:	2200      	movs	r2, #0
 800b62a:	496f      	ldr	r1, [pc, #444]	; (800b7e8 <dwt_ioctl+0x7bc>)
 800b62c:	4630      	mov	r0, r6
 800b62e:	f7fe f893 	bl	8009758 <dwt_write32bitoffsetreg>
 800b632:	2500      	movs	r5, #0
 800b634:	e5a4      	b.n	800b180 <dwt_ioctl+0x154>
 800b636:	2c00      	cmp	r4, #0
 800b638:	f001 83fe 	beq.w	800ce38 <dwt_ioctl+0x1e0c>
 800b63c:	8823      	ldrh	r3, [r4, #0]
 800b63e:	2200      	movs	r2, #0
 800b640:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b644:	f7fe f82b 	bl	800969e <dwt_write16bitoffsetreg>
 800b648:	2500      	movs	r5, #0
 800b64a:	e599      	b.n	800b180 <dwt_ioctl+0x154>
 800b64c:	2c00      	cmp	r4, #0
 800b64e:	f001 83f6 	beq.w	800ce3e <dwt_ioctl+0x1e12>
 800b652:	2200      	movs	r2, #0
 800b654:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b658:	f7fd fc1f 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b65c:	8020      	strh	r0, [r4, #0]
 800b65e:	2500      	movs	r5, #0
 800b660:	e58e      	b.n	800b180 <dwt_ioctl+0x154>
 800b662:	2c00      	cmp	r4, #0
 800b664:	f001 83ee 	beq.w	800ce44 <dwt_ioctl+0x1e18>
 800b668:	8823      	ldrh	r3, [r4, #0]
 800b66a:	2200      	movs	r2, #0
 800b66c:	217c      	movs	r1, #124	; 0x7c
 800b66e:	f7fe f816 	bl	800969e <dwt_write16bitoffsetreg>
 800b672:	2500      	movs	r5, #0
 800b674:	e584      	b.n	800b180 <dwt_ioctl+0x154>
 800b676:	2c00      	cmp	r4, #0
 800b678:	f001 83e7 	beq.w	800ce4a <dwt_ioctl+0x1e1e>
 800b67c:	2200      	movs	r2, #0
 800b67e:	217c      	movs	r1, #124	; 0x7c
 800b680:	f7fd fc0b 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b684:	8020      	strh	r0, [r4, #0]
 800b686:	2500      	movs	r5, #0
 800b688:	e57a      	b.n	800b180 <dwt_ioctl+0x154>
 800b68a:	2c00      	cmp	r4, #0
 800b68c:	f001 83e0 	beq.w	800ce50 <dwt_ioctl+0x1e24>
 800b690:	88a3      	ldrh	r3, [r4, #4]
 800b692:	88e2      	ldrh	r2, [r4, #6]
 800b694:	6821      	ldr	r1, [r4, #0]
 800b696:	9100      	str	r1, [sp, #0]
 800b698:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b69c:	f7fd fff4 	bl	8009688 <dwt_writetodevice>
 800b6a0:	2500      	movs	r5, #0
 800b6a2:	e56d      	b.n	800b180 <dwt_ioctl+0x154>
 800b6a4:	2c00      	cmp	r4, #0
 800b6a6:	f001 83d6 	beq.w	800ce56 <dwt_ioctl+0x1e2a>
 800b6aa:	88a3      	ldrh	r3, [r4, #4]
 800b6ac:	88e2      	ldrh	r2, [r4, #6]
 800b6ae:	6821      	ldr	r1, [r4, #0]
 800b6b0:	9100      	str	r1, [sp, #0]
 800b6b2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800b6b6:	f7fd fbd0 	bl	8008e5a <dwt_readfromdevice>
 800b6ba:	2500      	movs	r5, #0
 800b6bc:	e560      	b.n	800b180 <dwt_ioctl+0x154>
 800b6be:	2c00      	cmp	r4, #0
 800b6c0:	f001 83cc 	beq.w	800ce5c <dwt_ioctl+0x1e30>
 800b6c4:	88e3      	ldrh	r3, [r4, #6]
 800b6c6:	88a2      	ldrh	r2, [r4, #4]
 800b6c8:	6821      	ldr	r1, [r4, #0]
 800b6ca:	f7fe f99d 	bl	8009a08 <ull_readrxdata>
 800b6ce:	2500      	movs	r5, #0
 800b6d0:	e556      	b.n	800b180 <dwt_ioctl+0x154>
 800b6d2:	2c00      	cmp	r4, #0
 800b6d4:	f001 83c5 	beq.w	800ce62 <dwt_ioctl+0x1e36>
 800b6d8:	88e3      	ldrh	r3, [r4, #6]
 800b6da:	6822      	ldr	r2, [r4, #0]
 800b6dc:	88a1      	ldrh	r1, [r4, #4]
 800b6de:	f7fe fac7 	bl	8009c70 <ull_writetxdata>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	e54c      	b.n	800b180 <dwt_ioctl+0x154>
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	f7ff fc08 	bl	800aefc <ull_rxenable>
 800b6ec:	2500      	movs	r5, #0
 800b6ee:	e547      	b.n	800b180 <dwt_ioctl+0x154>
 800b6f0:	2c00      	cmp	r4, #0
 800b6f2:	f001 83b9 	beq.w	800ce68 <dwt_ioctl+0x1e3c>
 800b6f6:	7923      	ldrb	r3, [r4, #4]
 800b6f8:	8862      	ldrh	r2, [r4, #2]
 800b6fa:	8821      	ldrh	r1, [r4, #0]
 800b6fc:	f7fe fdbe 	bl	800a27c <ull_writetxfctrl>
 800b700:	2500      	movs	r5, #0
 800b702:	e53d      	b.n	800b180 <dwt_ioctl+0x154>
 800b704:	2c00      	cmp	r4, #0
 800b706:	f001 83b2 	beq.w	800ce6e <dwt_ioctl+0x1e42>
 800b70a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b70c:	7b9b      	ldrb	r3, [r3, #14]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d00c      	beq.n	800b72c <dwt_ioctl+0x700>
 800b712:	2b03      	cmp	r3, #3
 800b714:	d110      	bne.n	800b738 <dwt_ioctl+0x70c>
 800b716:	220c      	movs	r2, #12
 800b718:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b71c:	f7fd fbbd 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b720:	b200      	sxth	r0, r0
 800b722:	f340 030c 	sbfx	r3, r0, #0, #13
 800b726:	8023      	strh	r3, [r4, #0]
 800b728:	2500      	movs	r5, #0
 800b72a:	e529      	b.n	800b180 <dwt_ioctl+0x154>
 800b72c:	2200      	movs	r2, #0
 800b72e:	492f      	ldr	r1, [pc, #188]	; (800b7ec <dwt_ioctl+0x7c0>)
 800b730:	f7fd fbb3 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b734:	b200      	sxth	r0, r0
 800b736:	e7f4      	b.n	800b722 <dwt_ioctl+0x6f6>
 800b738:	2200      	movs	r2, #0
 800b73a:	492d      	ldr	r1, [pc, #180]	; (800b7f0 <dwt_ioctl+0x7c4>)
 800b73c:	f7fd fbad 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b740:	b200      	sxth	r0, r0
 800b742:	e7ee      	b.n	800b722 <dwt_ioctl+0x6f6>
 800b744:	2c00      	cmp	r4, #0
 800b746:	f001 8395 	beq.w	800ce74 <dwt_ioctl+0x1e48>
 800b74a:	ab0c      	add	r3, sp, #48	; 0x30
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	2303      	movs	r3, #3
 800b750:	2200      	movs	r2, #0
 800b752:	4928      	ldr	r1, [pc, #160]	; (800b7f4 <dwt_ioctl+0x7c8>)
 800b754:	f7fd fb81 	bl	8008e5a <dwt_readfromdevice>
 800b758:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800b75c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800b760:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800b764:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b76c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b770:	bf1c      	itt	ne
 800b772:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800b776:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	2500      	movs	r5, #0
 800b77e:	e4ff      	b.n	800b180 <dwt_ioctl+0x154>
 800b780:	f7fe f9d0 	bl	8009b24 <ull_clearaonconfig>
 800b784:	2500      	movs	r5, #0
 800b786:	e4fb      	b.n	800b180 <dwt_ioctl+0x154>
 800b788:	2c00      	cmp	r4, #0
 800b78a:	f001 8376 	beq.w	800ce7a <dwt_ioctl+0x1e4e>
 800b78e:	8861      	ldrh	r1, [r4, #2]
 800b790:	f7fe fdf0 	bl	800a374 <ull_calcbandwidthadj>
 800b794:	7020      	strb	r0, [r4, #0]
 800b796:	2500      	movs	r5, #0
 800b798:	e4f2      	b.n	800b180 <dwt_ioctl+0x154>
 800b79a:	4621      	mov	r1, r4
 800b79c:	f7fd fb9d 	bl	8008eda <ull_readdiagnostics>
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	e4ed      	b.n	800b180 <dwt_ioctl+0x154>
 800b7a4:	2c00      	cmp	r4, #0
 800b7a6:	f001 836b 	beq.w	800ce80 <dwt_ioctl+0x1e54>
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	2170      	movs	r1, #112	; 0x70
 800b7ae:	f7fd fb5e 	bl	8008e6e <dwt_read32bitoffsetreg>
 800b7b2:	6020      	str	r0, [r4, #0]
 800b7b4:	2500      	movs	r5, #0
 800b7b6:	e4e3      	b.n	800b180 <dwt_ioctl+0x154>
 800b7b8:	00110008 	.word	0x00110008
 800b7bc:	00d20874 	.word	0x00d20874
 800b7c0:	00110010 	.word	0x00110010
 800b7c4:	04d28874 	.word	0x04d28874
 800b7c8:	0007001c 	.word	0x0007001c
 800b7cc:	00020004 	.word	0x00020004
 800b7d0:	001f000c 	.word	0x001f000c
 800b7d4:	001f0010 	.word	0x001f0010
 800b7d8:	00010008 	.word	0x00010008
 800b7dc:	00010020 	.word	0x00010020
 800b7e0:	af5f35cc 	.word	0xaf5f35cc
 800b7e4:	af5f584c 	.word	0xaf5f584c
 800b7e8:	0006000c 	.word	0x0006000c
 800b7ec:	0018000c 	.word	0x0018000c
 800b7f0:	000c0020 	.word	0x000c0020
 800b7f4:	00060029 	.word	0x00060029
 800b7f8:	2c00      	cmp	r4, #0
 800b7fa:	f001 8344 	beq.w	800ce86 <dwt_ioctl+0x1e5a>
 800b7fe:	2200      	movs	r2, #0
 800b800:	2170      	movs	r1, #112	; 0x70
 800b802:	f7fd fb34 	bl	8008e6e <dwt_read32bitoffsetreg>
 800b806:	6020      	str	r0, [r4, #0]
 800b808:	2500      	movs	r5, #0
 800b80a:	e4b9      	b.n	800b180 <dwt_ioctl+0x154>
 800b80c:	9400      	str	r4, [sp, #0]
 800b80e:	2305      	movs	r3, #5
 800b810:	2200      	movs	r2, #0
 800b812:	2170      	movs	r1, #112	; 0x70
 800b814:	f7fd fb21 	bl	8008e5a <dwt_readfromdevice>
 800b818:	2500      	movs	r5, #0
 800b81a:	e4b1      	b.n	800b180 <dwt_ioctl+0x154>
 800b81c:	2c00      	cmp	r4, #0
 800b81e:	f001 8335 	beq.w	800ce8c <dwt_ioctl+0x1e60>
 800b822:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b824:	7b9b      	ldrb	r3, [r3, #14]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d014      	beq.n	800b854 <dwt_ioctl+0x828>
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d119      	bne.n	800b862 <dwt_ioctl+0x836>
 800b82e:	2216      	movs	r2, #22
 800b830:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800b834:	f7fd fb31 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b838:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b83c:	b283      	uxth	r3, r0
 800b83e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b842:	d004      	beq.n	800b84e <dwt_ioctl+0x822>
 800b844:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800b848:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800b84c:	b218      	sxth	r0, r3
 800b84e:	8020      	strh	r0, [r4, #0]
 800b850:	2500      	movs	r5, #0
 800b852:	e495      	b.n	800b180 <dwt_ioctl+0x154>
 800b854:	2202      	movs	r2, #2
 800b856:	49d6      	ldr	r1, [pc, #856]	; (800bbb0 <dwt_ioctl+0xb84>)
 800b858:	f7fd fb1f 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b85c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b860:	e7ec      	b.n	800b83c <dwt_ioctl+0x810>
 800b862:	2202      	movs	r2, #2
 800b864:	49d3      	ldr	r1, [pc, #844]	; (800bbb4 <dwt_ioctl+0xb88>)
 800b866:	f7fd fb18 	bl	8008e9a <dwt_read16bitoffsetreg>
 800b86a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800b86e:	e7e5      	b.n	800b83c <dwt_ioctl+0x810>
 800b870:	9400      	str	r4, [sp, #0]
 800b872:	2306      	movs	r3, #6
 800b874:	2200      	movs	r2, #0
 800b876:	49d0      	ldr	r1, [pc, #832]	; (800bbb8 <dwt_ioctl+0xb8c>)
 800b878:	f7fd faef 	bl	8008e5a <dwt_readfromdevice>
 800b87c:	7963      	ldrb	r3, [r4, #5]
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	7163      	strb	r3, [r4, #5]
 800b884:	2500      	movs	r5, #0
 800b886:	e47b      	b.n	800b180 <dwt_ioctl+0x154>
 800b888:	2c00      	cmp	r4, #0
 800b88a:	f001 8302 	beq.w	800ce92 <dwt_ioctl+0x1e66>
 800b88e:	2201      	movs	r2, #1
 800b890:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b894:	f7fd fb13 	bl	8008ebe <dwt_read8bitoffsetreg>
 800b898:	7020      	strb	r0, [r4, #0]
 800b89a:	2500      	movs	r5, #0
 800b89c:	e470      	b.n	800b180 <dwt_ioctl+0x154>
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	f001 82fa 	beq.w	800ce98 <dwt_ioctl+0x1e6c>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800b8aa:	f7fd fb08 	bl	8008ebe <dwt_read8bitoffsetreg>
 800b8ae:	7020      	strb	r0, [r4, #0]
 800b8b0:	2500      	movs	r5, #0
 800b8b2:	e465      	b.n	800b180 <dwt_ioctl+0x154>
 800b8b4:	2c00      	cmp	r4, #0
 800b8b6:	f001 82f2 	beq.w	800ce9e <dwt_ioctl+0x1e72>
 800b8ba:	88a2      	ldrh	r2, [r4, #4]
 800b8bc:	6821      	ldr	r1, [r4, #0]
 800b8be:	f7fe fc07 	bl	800a0d0 <_dwt_otpprogword32>
 800b8c2:	2500      	movs	r5, #0
 800b8c4:	e45c      	b.n	800b180 <dwt_ioctl+0x154>
 800b8c6:	2c00      	cmp	r4, #0
 800b8c8:	f001 82ec 	beq.w	800cea4 <dwt_ioctl+0x1e78>
 800b8cc:	6825      	ldr	r5, [r4, #0]
 800b8ce:	88a4      	ldrh	r4, [r4, #4]
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	f7fe fbfc 	bl	800a0d0 <_dwt_otpprogword32>
 800b8d8:	4621      	mov	r1, r4
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f7fd ff1a 	bl	8009714 <_dwt_otpread>
 800b8e0:	1a2d      	subs	r5, r5, r0
 800b8e2:	bf18      	it	ne
 800b8e4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b8e8:	e44a      	b.n	800b180 <dwt_ioctl+0x154>
 800b8ea:	2a02      	cmp	r2, #2
 800b8ec:	d00e      	beq.n	800b90c <dwt_ioctl+0x8e0>
 800b8ee:	4cb3      	ldr	r4, [pc, #716]	; (800bbbc <dwt_ioctl+0xb90>)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7fe f8bc 	bl	8009a74 <dwt_write8bitoffsetreg>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	2200      	movs	r2, #0
 800b900:	4621      	mov	r1, r4
 800b902:	4630      	mov	r0, r6
 800b904:	f7fe f8b6 	bl	8009a74 <dwt_write8bitoffsetreg>
 800b908:	2500      	movs	r5, #0
 800b90a:	e439      	b.n	800b180 <dwt_ioctl+0x154>
 800b90c:	2300      	movs	r3, #0
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	23fe      	movs	r3, #254	; 0xfe
 800b912:	2201      	movs	r2, #1
 800b914:	49aa      	ldr	r1, [pc, #680]	; (800bbc0 <dwt_ioctl+0xb94>)
 800b916:	f7fe fce3 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800b91a:	e7e8      	b.n	800b8ee <dwt_ioctl+0x8c2>
 800b91c:	2c00      	cmp	r4, #0
 800b91e:	f001 82c4 	beq.w	800ceaa <dwt_ioctl+0x1e7e>
 800b922:	8824      	ldrh	r4, [r4, #0]
 800b924:	b2e2      	uxtb	r2, r4
 800b926:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b92a:	f7fe f94f 	bl	8009bcc <ull_aon_write>
 800b92e:	0a22      	lsrs	r2, r4, #8
 800b930:	f240 1103 	movw	r1, #259	; 0x103
 800b934:	4630      	mov	r0, r6
 800b936:	f7fe f949 	bl	8009bcc <ull_aon_write>
 800b93a:	2500      	movs	r5, #0
 800b93c:	e420      	b.n	800b180 <dwt_ioctl+0x154>
 800b93e:	2c00      	cmp	r4, #0
 800b940:	f001 82b6 	beq.w	800ceb0 <dwt_ioctl+0x1e84>
 800b944:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800bbcc <dwt_ioctl+0xba0>
 800b948:	2310      	movs	r3, #16
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	23ff      	movs	r3, #255	; 0xff
 800b94e:	2200      	movs	r2, #0
 800b950:	4641      	mov	r1, r8
 800b952:	f7fe fcc5 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800b956:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7fe f916 	bl	8009b8c <ull_aon_read>
 800b960:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800b964:	462a      	mov	r2, r5
 800b966:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7fe f92e 	bl	8009bcc <ull_aon_write>
 800b970:	f045 0204 	orr.w	r2, r5, #4
 800b974:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b978:	4630      	mov	r0, r6
 800b97a:	f7fe f927 	bl	8009bcc <ull_aon_write>
 800b97e:	2002      	movs	r0, #2
 800b980:	f7f4 ff64 	bl	800084c <deca_sleep>
 800b984:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800b988:	4630      	mov	r0, r6
 800b98a:	f7fe f8ff 	bl	8009b8c <ull_aon_read>
 800b98e:	4607      	mov	r7, r0
 800b990:	f240 110f 	movw	r1, #271	; 0x10f
 800b994:	4630      	mov	r0, r6
 800b996:	f7fe f8f9 	bl	8009b8c <ull_aon_read>
 800b99a:	4681      	mov	r9, r0
 800b99c:	462a      	mov	r2, r5
 800b99e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7fe f912 	bl	8009bcc <ull_aon_write>
 800b9a8:	2500      	movs	r5, #0
 800b9aa:	9500      	str	r5, [sp, #0]
 800b9ac:	23ef      	movs	r3, #239	; 0xef
 800b9ae:	462a      	mov	r2, r5
 800b9b0:	4641      	mov	r1, r8
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7fe fc94 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800b9b8:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800b9bc:	8027      	strh	r7, [r4, #0]
 800b9be:	f7ff bbdf 	b.w	800b180 <dwt_ioctl+0x154>
 800b9c2:	2c00      	cmp	r4, #0
 800b9c4:	f001 8277 	beq.w	800ceb6 <dwt_ioctl+0x1e8a>
 800b9c8:	78a2      	ldrb	r2, [r4, #2]
 800b9ca:	8821      	ldrh	r1, [r4, #0]
 800b9cc:	f7fe f926 	bl	8009c1c <ull_configuresleep>
 800b9d0:	2500      	movs	r5, #0
 800b9d2:	f7ff bbd5 	b.w	800b180 <dwt_ioctl+0x154>
 800b9d6:	2c00      	cmp	r4, #0
 800b9d8:	f001 8270 	beq.w	800cebc <dwt_ioctl+0x1e90>
 800b9dc:	6824      	ldr	r4, [r4, #0]
 800b9de:	f7fe f8a1 	bl	8009b24 <ull_clearaonconfig>
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	f7f4 ff32 	bl	800084c <deca_sleep>
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	23ff      	movs	r3, #255	; 0xff
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4974      	ldr	r1, [pc, #464]	; (800bbc4 <dwt_ioctl+0xb98>)
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f7fe fc74 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800b9f8:	b97c      	cbnz	r4, 800ba1a <dwt_ioctl+0x9ee>
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff faee 	bl	800afdc <ull_softreset_no_sema_fcmd>
 800ba00:	2001      	movs	r0, #1
 800ba02:	f7f4 ff23 	bl	800084c <deca_sleep>
 800ba06:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ba08:	2500      	movs	r5, #0
 800ba0a:	739d      	strb	r5, [r3, #14]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	821a      	strh	r2, [r3, #16]
 800ba10:	751d      	strb	r5, [r3, #20]
 800ba12:	755d      	strb	r5, [r3, #21]
 800ba14:	73dd      	strb	r5, [r3, #15]
 800ba16:	f7ff bbb3 	b.w	800b180 <dwt_ioctl+0x154>
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f7ff faf2 	bl	800b004 <ull_softreset_fcmd>
 800ba20:	e7ee      	b.n	800ba00 <dwt_ioctl+0x9d4>
 800ba22:	2c00      	cmp	r4, #0
 800ba24:	f001 824d 	beq.w	800cec2 <dwt_ioctl+0x1e96>
 800ba28:	7823      	ldrb	r3, [r4, #0]
 800ba2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba2e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ba30:	7353      	strb	r3, [r2, #13]
 800ba32:	2200      	movs	r2, #0
 800ba34:	4964      	ldr	r1, [pc, #400]	; (800bbc8 <dwt_ioctl+0xb9c>)
 800ba36:	f7fe f81d 	bl	8009a74 <dwt_write8bitoffsetreg>
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	f7ff bba0 	b.w	800b180 <dwt_ioctl+0x154>
 800ba40:	2c00      	cmp	r4, #0
 800ba42:	f001 8241 	beq.w	800cec8 <dwt_ioctl+0x1e9c>
 800ba46:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ba48:	7b5b      	ldrb	r3, [r3, #13]
 800ba4a:	7023      	strb	r3, [r4, #0]
 800ba4c:	2500      	movs	r5, #0
 800ba4e:	f7ff bb97 	b.w	800b180 <dwt_ioctl+0x154>
 800ba52:	2101      	movs	r1, #1
 800ba54:	f7fe faf6 	bl	800a044 <ull_enable_rf_tx>
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7fe fb27 	bl	800a0ac <ull_enable_rftx_blocks>
 800ba5e:	2101      	movs	r1, #1
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7fd fe2d 	bl	80096c0 <ull_force_clocks>
 800ba66:	220f      	movs	r2, #15
 800ba68:	2101      	movs	r1, #1
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7fe ff48 	bl	800a900 <ull_repeated_cw>
 800ba70:	2500      	movs	r5, #0
 800ba72:	f7ff bb85 	b.w	800b180 <dwt_ioctl+0x154>
 800ba76:	2c00      	cmp	r4, #0
 800ba78:	f001 8229 	beq.w	800cece <dwt_ioctl+0x1ea2>
 800ba7c:	6862      	ldr	r2, [r4, #4]
 800ba7e:	6821      	ldr	r1, [r4, #0]
 800ba80:	f7fe ff3e 	bl	800a900 <ull_repeated_cw>
 800ba84:	2500      	movs	r5, #0
 800ba86:	f7ff bb7b 	b.w	800b180 <dwt_ioctl+0x154>
 800ba8a:	2c00      	cmp	r4, #0
 800ba8c:	f001 8222 	beq.w	800ced4 <dwt_ioctl+0x1ea8>
 800ba90:	4d4e      	ldr	r5, [pc, #312]	; (800bbcc <dwt_ioctl+0xba0>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	4629      	mov	r1, r5
 800ba96:	f7fd fa12 	bl	8008ebe <dwt_read8bitoffsetreg>
 800ba9a:	4680      	mov	r8, r0
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	23ff      	movs	r3, #255	; 0xff
 800baa2:	2200      	movs	r2, #0
 800baa4:	4629      	mov	r1, r5
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7fe fc1a 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800baac:	2304      	movs	r3, #4
 800baae:	2200      	movs	r2, #0
 800bab0:	4947      	ldr	r1, [pc, #284]	; (800bbd0 <dwt_ioctl+0xba4>)
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7fd ffde 	bl	8009a74 <dwt_write8bitoffsetreg>
 800bab8:	2301      	movs	r3, #1
 800baba:	2200      	movs	r2, #0
 800babc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bac0:	4630      	mov	r0, r6
 800bac2:	f7fd ffd7 	bl	8009a74 <dwt_write8bitoffsetreg>
 800bac6:	4f43      	ldr	r7, [pc, #268]	; (800bbd4 <dwt_ioctl+0xba8>)
 800bac8:	2500      	movs	r5, #0
 800baca:	462a      	mov	r2, r5
 800bacc:	4639      	mov	r1, r7
 800bace:	4630      	mov	r0, r6
 800bad0:	f7fd f9f5 	bl	8008ebe <dwt_read8bitoffsetreg>
 800bad4:	f010 0f01 	tst.w	r0, #1
 800bad8:	d0f7      	beq.n	800baca <dwt_ioctl+0xa9e>
 800bada:	2200      	movs	r2, #0
 800badc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7fd f9da 	bl	8008e9a <dwt_read16bitoffsetreg>
 800bae6:	4605      	mov	r5, r0
 800bae8:	2300      	movs	r3, #0
 800baea:	461a      	mov	r2, r3
 800baec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800baf0:	4630      	mov	r0, r6
 800baf2:	f7fd ffbf 	bl	8009a74 <dwt_write8bitoffsetreg>
 800baf6:	2300      	movs	r3, #0
 800baf8:	461a      	mov	r2, r3
 800bafa:	4935      	ldr	r1, [pc, #212]	; (800bbd0 <dwt_ioctl+0xba4>)
 800bafc:	4630      	mov	r0, r6
 800bafe:	f7fd ffb9 	bl	8009a74 <dwt_write8bitoffsetreg>
 800bb02:	4643      	mov	r3, r8
 800bb04:	2200      	movs	r2, #0
 800bb06:	4931      	ldr	r1, [pc, #196]	; (800bbcc <dwt_ioctl+0xba0>)
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7fd ffb3 	bl	8009a74 <dwt_write8bitoffsetreg>
 800bb0e:	8025      	strh	r5, [r4, #0]
 800bb10:	2500      	movs	r5, #0
 800bb12:	f7ff bb35 	b.w	800b180 <dwt_ioctl+0x154>
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	f001 81df 	beq.w	800ceda <dwt_ioctl+0x1eae>
 800bb1c:	7923      	ldrb	r3, [r4, #4]
 800bb1e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bb20:	7a92      	ldrb	r2, [r2, #10]
 800bb22:	1a9b      	subs	r3, r3, r2
 800bb24:	ee07 3a90 	vmov	s15, r3
 800bb28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb2c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800bbd8 <dwt_ioctl+0xbac>
 800bb30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb34:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800bb38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb3c:	edc4 7a00 	vstr	s15, [r4]
 800bb40:	2500      	movs	r5, #0
 800bb42:	f7ff bb1d 	b.w	800b180 <dwt_ioctl+0x154>
 800bb46:	2c00      	cmp	r4, #0
 800bb48:	f001 81ca 	beq.w	800cee0 <dwt_ioctl+0x1eb4>
 800bb4c:	7923      	ldrb	r3, [r4, #4]
 800bb4e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bb50:	7a52      	ldrb	r2, [r2, #9]
 800bb52:	1a9b      	subs	r3, r3, r2
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb5c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bbdc <dwt_ioctl+0xbb0>
 800bb60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb64:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800bb68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb6c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800bbe0 <dwt_ioctl+0xbb4>
 800bb70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bb74:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800bb78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb7c:	edc4 7a00 	vstr	s15, [r4]
 800bb80:	2500      	movs	r5, #0
 800bb82:	f7ff bafd 	b.w	800b180 <dwt_ioctl+0x154>
 800bb86:	2c00      	cmp	r4, #0
 800bb88:	f001 81ad 	beq.w	800cee6 <dwt_ioctl+0x1eba>
 800bb8c:	6824      	ldr	r4, [r4, #0]
 800bb8e:	2101      	movs	r1, #1
 800bb90:	f7fe fa58 	bl	800a044 <ull_enable_rf_tx>
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7fe fa89 	bl	800a0ac <ull_enable_rftx_blocks>
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7fd fd8f 	bl	80096c0 <ull_force_clocks>
 800bba2:	4621      	mov	r1, r4
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7fe fc41 	bl	800a42c <ull_repeated_frames>
 800bbaa:	2500      	movs	r5, #0
 800bbac:	f7ff bae8 	b.w	800b180 <dwt_ioctl+0x154>
 800bbb0:	00180014 	.word	0x00180014
 800bbb4:	000c001c 	.word	0x000c001c
 800bbb8:	000c0018 	.word	0x000c0018
 800bbbc:	000a0004 	.word	0x000a0004
 800bbc0:	00110008 	.word	0x00110008
 800bbc4:	00110004 	.word	0x00110004
 800bbc8:	00090014 	.word	0x00090014
 800bbcc:	00070048 	.word	0x00070048
 800bbd0:	00070034 	.word	0x00070034
 800bbd4:	00080004 	.word	0x00080004
 800bbd8:	3f866666 	.word	0x3f866666
 800bbdc:	3ecccccd 	.word	0x3ecccccd
 800bbe0:	437f0000 	.word	0x437f0000
 800bbe4:	2500      	movs	r5, #0
 800bbe6:	9500      	str	r5, [sp, #0]
 800bbe8:	23ef      	movs	r3, #239	; 0xef
 800bbea:	462a      	mov	r2, r5
 800bbec:	49c7      	ldr	r1, [pc, #796]	; (800bf0c <dwt_ioctl+0xee0>)
 800bbee:	f7fe fb77 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800bbf2:	2105      	movs	r1, #5
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7fd fd63 	bl	80096c0 <ull_force_clocks>
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7fd fee5 	bl	80099cc <ull_disable_rf_tx>
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7fd fed8 	bl	80099b8 <ull_disable_rftx_blocks>
 800bc08:	f7ff baba 	b.w	800b180 <dwt_ioctl+0x154>
 800bc0c:	2500      	movs	r5, #0
 800bc0e:	9500      	str	r5, [sp, #0]
 800bc10:	23ef      	movs	r3, #239	; 0xef
 800bc12:	462a      	mov	r2, r5
 800bc14:	49bd      	ldr	r1, [pc, #756]	; (800bf0c <dwt_ioctl+0xee0>)
 800bc16:	f7fe fb63 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800bc1a:	f7ff bab1 	b.w	800b180 <dwt_ioctl+0x154>
 800bc1e:	2c00      	cmp	r4, #0
 800bc20:	f001 8164 	beq.w	800ceec <dwt_ioctl+0x1ec0>
 800bc24:	6821      	ldr	r1, [r4, #0]
 800bc26:	f7fe fc01 	bl	800a42c <ull_repeated_frames>
 800bc2a:	2500      	movs	r5, #0
 800bc2c:	f7ff baa8 	b.w	800b180 <dwt_ioctl+0x154>
 800bc30:	2200      	movs	r2, #0
 800bc32:	49b7      	ldr	r1, [pc, #732]	; (800bf10 <dwt_ioctl+0xee4>)
 800bc34:	f7fd f931 	bl	8008e9a <dwt_read16bitoffsetreg>
 800bc38:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800bc3c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800bc40:	bf18      	it	ne
 800bc42:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800bc46:	b22d      	sxth	r5, r5
 800bc48:	8025      	strh	r5, [r4, #0]
 800bc4a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bc4c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc50:	1aed      	subs	r5, r5, r3
 800bc52:	f7ff ba95 	b.w	800b180 <dwt_ioctl+0x154>
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	f001 814b 	beq.w	800cef2 <dwt_ioctl+0x1ec6>
 800bc5c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bc60:	7a23      	ldrb	r3, [r4, #8]
 800bc62:	f899 2013 	ldrb.w	r2, [r9, #19]
 800bc66:	2aff      	cmp	r2, #255	; 0xff
 800bc68:	f000 8122 	beq.w	800beb0 <dwt_ioctl+0xe84>
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d136      	bne.n	800bcde <dwt_ioctl+0xcb2>
 800bc70:	f8d9 3000 	ldr.w	r3, [r9]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	230c      	movs	r3, #12
 800bc78:	2200      	movs	r2, #0
 800bc7a:	49a6      	ldr	r1, [pc, #664]	; (800bf14 <dwt_ioctl+0xee8>)
 800bc7c:	f7fd fd04 	bl	8009688 <dwt_writetodevice>
 800bc80:	f899 300c 	ldrb.w	r3, [r9, #12]
 800bc84:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800bc88:	18d1      	adds	r1, r2, r3
 800bc8a:	f899 2012 	ldrb.w	r2, [r9, #18]
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d15f      	bne.n	800bd52 <dwt_ioctl+0xd26>
 800bc92:	f899 0010 	ldrb.w	r0, [r9, #16]
 800bc96:	2800      	cmp	r0, #0
 800bc98:	bf0b      	itete	eq
 800bc9a:	227f      	moveq	r2, #127	; 0x7f
 800bc9c:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800bca0:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800bca4:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800bca8:	f899 0013 	ldrb.w	r0, [r9, #19]
 800bcac:	1a12      	subs	r2, r2, r0
 800bcae:	3a02      	subs	r2, #2
 800bcb0:	4291      	cmp	r1, r2
 800bcb2:	f200 8103 	bhi.w	800bebc <dwt_ioctl+0xe90>
 800bcb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bcba:	9200      	str	r2, [sp, #0]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7fd fce1 	bl	8009688 <dwt_writetodevice>
 800bcc6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800bcca:	f899 200c 	ldrb.w	r2, [r9, #12]
 800bcce:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800bcd2:	9100      	str	r1, [sp, #0]
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7fd fcd6 	bl	8009688 <dwt_writetodevice>
 800bcdc:	e04a      	b.n	800bd74 <dwt_ioctl+0xd48>
 800bcde:	f8d9 3000 	ldr.w	r3, [r9]
 800bce2:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800bce6:	7a9a      	ldrb	r2, [r3, #10]
 800bce8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800bcec:	7a5a      	ldrb	r2, [r3, #9]
 800bcee:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800bcf2:	7a1a      	ldrb	r2, [r3, #8]
 800bcf4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800bcf8:	79da      	ldrb	r2, [r3, #7]
 800bcfa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800bcfe:	799a      	ldrb	r2, [r3, #6]
 800bd00:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800bd04:	795a      	ldrb	r2, [r3, #5]
 800bd06:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800bd0a:	791a      	ldrb	r2, [r3, #4]
 800bd0c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800bd10:	78da      	ldrb	r2, [r3, #3]
 800bd12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800bd16:	789a      	ldrb	r2, [r3, #2]
 800bd18:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800bd1c:	785a      	ldrb	r2, [r3, #1]
 800bd1e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800bd22:	781a      	ldrb	r2, [r3, #0]
 800bd24:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800bd2e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800bd32:	0a09      	lsrs	r1, r1, #8
 800bd34:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800bd38:	7b19      	ldrb	r1, [r3, #12]
 800bd3a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800bd3e:	7adb      	ldrb	r3, [r3, #11]
 800bd40:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800bd44:	ab0c      	add	r3, sp, #48	; 0x30
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	2310      	movs	r3, #16
 800bd4a:	4972      	ldr	r1, [pc, #456]	; (800bf14 <dwt_ioctl+0xee8>)
 800bd4c:	f7fd fc9c 	bl	8009688 <dwt_writetodevice>
 800bd50:	e796      	b.n	800bc80 <dwt_ioctl+0xc54>
 800bd52:	2a01      	cmp	r2, #1
 800bd54:	f040 80af 	bne.w	800beb6 <dwt_ioctl+0xe8a>
 800bd58:	f899 3011 	ldrb.w	r3, [r9, #17]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800bd62:	bf08      	it	eq
 800bd64:	237f      	moveq	r3, #127	; 0x7f
 800bd66:	f899 2013 	ldrb.w	r2, [r9, #19]
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	3b02      	subs	r3, #2
 800bd6e:	4299      	cmp	r1, r3
 800bd70:	f200 80a7 	bhi.w	800bec2 <dwt_ioctl+0xe96>
 800bd74:	f899 2010 	ldrb.w	r2, [r9, #16]
 800bd78:	1e53      	subs	r3, r2, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d940      	bls.n	800be02 <dwt_ioctl+0xdd6>
 800bd80:	f899 3011 	ldrb.w	r3, [r9, #17]
 800bd84:	1e59      	subs	r1, r3, #1
 800bd86:	b2c9      	uxtb	r1, r1
 800bd88:	2901      	cmp	r1, #1
 800bd8a:	d947      	bls.n	800be1c <dwt_ioctl+0xdf0>
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	d04c      	beq.n	800be2a <dwt_ioctl+0xdfe>
 800bd90:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800bd94:	2200      	movs	r2, #0
 800bd96:	4960      	ldr	r1, [pc, #384]	; (800bf18 <dwt_ioctl+0xeec>)
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7fd fcdd 	bl	8009758 <dwt_write32bitoffsetreg>
 800bd9e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800bda2:	4a5e      	ldr	r2, [pc, #376]	; (800bf1c <dwt_ioctl+0xef0>)
 800bda4:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800bda8:	f899 300c 	ldrb.w	r3, [r9, #12]
 800bdac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	495a      	ldr	r1, [pc, #360]	; (800bf20 <dwt_ioctl+0xef4>)
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f7fd fcce 	bl	8009758 <dwt_write32bitoffsetreg>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	4958      	ldr	r1, [pc, #352]	; (800bf24 <dwt_ioctl+0xef8>)
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f7fd fe56 	bl	8009a74 <dwt_write8bitoffsetreg>
 800bdc8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800bf28 <dwt_ioctl+0xefc>
 800bdcc:	2700      	movs	r7, #0
 800bdce:	463a      	mov	r2, r7
 800bdd0:	4641      	mov	r1, r8
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7fd f873 	bl	8008ebe <dwt_read8bitoffsetreg>
 800bdd8:	f010 0f05 	tst.w	r0, #5
 800bddc:	d0f7      	beq.n	800bdce <dwt_ioctl+0xda2>
 800bdde:	4605      	mov	r5, r0
 800bde0:	4603      	mov	r3, r0
 800bde2:	2200      	movs	r2, #0
 800bde4:	4950      	ldr	r1, [pc, #320]	; (800bf28 <dwt_ioctl+0xefc>)
 800bde6:	4630      	mov	r0, r6
 800bde8:	f7fd fe44 	bl	8009a74 <dwt_write8bitoffsetreg>
 800bdec:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800bdf0:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d025      	beq.n	800be44 <dwt_ioctl+0xe18>
 800bdf8:	b26b      	sxtb	r3, r5
 800bdfa:	7023      	strb	r3, [r4, #0]
 800bdfc:	2500      	movs	r5, #0
 800bdfe:	f7ff b9bf 	b.w	800b180 <dwt_ioctl+0x154>
 800be02:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800be04:	7b9b      	ldrb	r3, [r3, #14]
 800be06:	2b03      	cmp	r3, #3
 800be08:	f001 8123 	beq.w	800d052 <dwt_ioctl+0x2026>
 800be0c:	f899 3011 	ldrb.w	r3, [r9, #17]
 800be10:	1e5a      	subs	r2, r3, #1
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	2a01      	cmp	r2, #1
 800be16:	d912      	bls.n	800be3e <dwt_ioctl+0xe12>
 800be18:	2201      	movs	r2, #1
 800be1a:	e7b7      	b.n	800bd8c <dwt_ioctl+0xd60>
 800be1c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800be1e:	7b9b      	ldrb	r3, [r3, #14]
 800be20:	2b03      	cmp	r3, #3
 800be22:	bf0c      	ite	eq
 800be24:	2302      	moveq	r3, #2
 800be26:	2301      	movne	r3, #1
 800be28:	e7b2      	b.n	800bd90 <dwt_ioctl+0xd64>
 800be2a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800be2e:	2910      	cmp	r1, #16
 800be30:	d9ae      	bls.n	800bd90 <dwt_ioctl+0xd64>
 800be32:	f06f 0303 	mvn.w	r3, #3
 800be36:	e7e0      	b.n	800bdfa <dwt_ioctl+0xdce>
 800be38:	2202      	movs	r2, #2
 800be3a:	4613      	mov	r3, r2
 800be3c:	e7a8      	b.n	800bd90 <dwt_ioctl+0xd64>
 800be3e:	2201      	movs	r2, #1
 800be40:	4613      	mov	r3, r2
 800be42:	e7a5      	b.n	800bd90 <dwt_ioctl+0xd64>
 800be44:	f899 3012 	ldrb.w	r3, [r9, #18]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d1d5      	bne.n	800bdf8 <dwt_ioctl+0xdcc>
 800be4c:	f899 2011 	ldrb.w	r2, [r9, #17]
 800be50:	1e53      	subs	r3, r2, #1
 800be52:	b2db      	uxtb	r3, r3
 800be54:	2b01      	cmp	r3, #1
 800be56:	d91b      	bls.n	800be90 <dwt_ioctl+0xe64>
 800be58:	2a03      	cmp	r2, #3
 800be5a:	bf0c      	ite	eq
 800be5c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800be60:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800be64:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800be68:	b112      	cbz	r2, 800be70 <dwt_ioctl+0xe44>
 800be6a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800be6e:	b9c3      	cbnz	r3, 800bea2 <dwt_ioctl+0xe76>
 800be70:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800be74:	2900      	cmp	r1, #0
 800be76:	d0bf      	beq.n	800bdf8 <dwt_ioctl+0xdcc>
 800be78:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0bb      	beq.n	800bdf8 <dwt_ioctl+0xdcc>
 800be80:	f899 200c 	ldrb.w	r2, [r9, #12]
 800be84:	9100      	str	r1, [sp, #0]
 800be86:	4639      	mov	r1, r7
 800be88:	4630      	mov	r0, r6
 800be8a:	f7fc ffe6 	bl	8008e5a <dwt_readfromdevice>
 800be8e:	e7b3      	b.n	800bdf8 <dwt_ioctl+0xdcc>
 800be90:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800be92:	7b9b      	ldrb	r3, [r3, #14]
 800be94:	2b03      	cmp	r3, #3
 800be96:	bf0c      	ite	eq
 800be98:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800be9c:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800bea0:	e7e0      	b.n	800be64 <dwt_ioctl+0xe38>
 800bea2:	9200      	str	r2, [sp, #0]
 800bea4:	2200      	movs	r2, #0
 800bea6:	4639      	mov	r1, r7
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7fc ffd6 	bl	8008e5a <dwt_readfromdevice>
 800beae:	e7df      	b.n	800be70 <dwt_ioctl+0xe44>
 800beb0:	f06f 0302 	mvn.w	r3, #2
 800beb4:	e7a1      	b.n	800bdfa <dwt_ioctl+0xdce>
 800beb6:	f06f 0301 	mvn.w	r3, #1
 800beba:	e79e      	b.n	800bdfa <dwt_ioctl+0xdce>
 800bebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bec0:	e79b      	b.n	800bdfa <dwt_ioctl+0xdce>
 800bec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bec6:	e798      	b.n	800bdfa <dwt_ioctl+0xdce>
 800bec8:	7a23      	ldrb	r3, [r4, #8]
 800beca:	79e1      	ldrb	r1, [r4, #7]
 800becc:	79a2      	ldrb	r2, [r4, #6]
 800bece:	00d2      	lsls	r2, r2, #3
 800bed0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800bed4:	4313      	orrs	r3, r2
 800bed6:	7962      	ldrb	r2, [r4, #5]
 800bed8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800bedc:	7922      	ldrb	r2, [r4, #4]
 800bede:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bee2:	78e2      	ldrb	r2, [r4, #3]
 800bee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bee8:	78a2      	ldrb	r2, [r4, #2]
 800beea:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800beee:	7862      	ldrb	r2, [r4, #1]
 800bef0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800bef4:	7822      	ldrb	r2, [r4, #0]
 800bef6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800befa:	b29b      	uxth	r3, r3
 800befc:	2200      	movs	r2, #0
 800befe:	490b      	ldr	r1, [pc, #44]	; (800bf2c <dwt_ioctl+0xf00>)
 800bf00:	f7fd fbcd 	bl	800969e <dwt_write16bitoffsetreg>
 800bf04:	2500      	movs	r5, #0
 800bf06:	f7ff b93b 	b.w	800b180 <dwt_ioctl+0x154>
 800bf0a:	bf00      	nop
 800bf0c:	000f0028 	.word	0x000f0028
 800bf10:	00020008 	.word	0x00020008
 800bf14:	00010034 	.word	0x00010034
 800bf18:	00010044 	.word	0x00010044
 800bf1c:	0001ff80 	.word	0x0001ff80
 800bf20:	00010048 	.word	0x00010048
 800bf24:	0001004c 	.word	0x0001004c
 800bf28:	00010050 	.word	0x00010050
 800bf2c:	00010030 	.word	0x00010030
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	f000 87e1 	beq.w	800cef8 <dwt_ioctl+0x1ecc>
 800bf36:	7863      	ldrb	r3, [r4, #1]
 800bf38:	b133      	cbz	r3, 800bf48 <dwt_ioctl+0xf1c>
 800bf3a:	085b      	lsrs	r3, r3, #1
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	7023      	strb	r3, [r4, #0]
 800bf42:	2500      	movs	r5, #0
 800bf44:	f7ff b91c 	b.w	800b180 <dwt_ioctl+0x154>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	e7f9      	b.n	800bf40 <dwt_ioctl+0xf14>
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	49d0      	ldr	r1, [pc, #832]	; (800c290 <dwt_ioctl+0x1264>)
 800bf50:	f7fc ff8d 	bl	8008e6e <dwt_read32bitoffsetreg>
 800bf54:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bf58:	8023      	strh	r3, [r4, #0]
 800bf5a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bf5e:	8060      	strh	r0, [r4, #2]
 800bf60:	2200      	movs	r2, #0
 800bf62:	49cc      	ldr	r1, [pc, #816]	; (800c294 <dwt_ioctl+0x1268>)
 800bf64:	4630      	mov	r0, r6
 800bf66:	f7fc ff82 	bl	8008e6e <dwt_read32bitoffsetreg>
 800bf6a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800bf6e:	80a3      	strh	r3, [r4, #4]
 800bf70:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800bf74:	80e0      	strh	r0, [r4, #6]
 800bf76:	2200      	movs	r2, #0
 800bf78:	49c7      	ldr	r1, [pc, #796]	; (800c298 <dwt_ioctl+0x126c>)
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f7fc ff77 	bl	8008e6e <dwt_read32bitoffsetreg>
 800bf80:	7220      	strb	r0, [r4, #8]
 800bf82:	0c00      	lsrs	r0, r0, #16
 800bf84:	7260      	strb	r0, [r4, #9]
 800bf86:	2200      	movs	r2, #0
 800bf88:	49c4      	ldr	r1, [pc, #784]	; (800c29c <dwt_ioctl+0x1270>)
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7fc ff6f 	bl	8008e6e <dwt_read32bitoffsetreg>
 800bf90:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bf9a:	8160      	strh	r0, [r4, #10]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	49c0      	ldr	r1, [pc, #768]	; (800c2a0 <dwt_ioctl+0x1274>)
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f7fc ff64 	bl	8008e6e <dwt_read32bitoffsetreg>
 800bfa6:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800bfaa:	f8a4 300f 	strh.w	r3, [r4, #15]
 800bfae:	73a0      	strb	r0, [r4, #14]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	49bc      	ldr	r1, [pc, #752]	; (800c2a4 <dwt_ioctl+0x1278>)
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7fc ff5a 	bl	8008e6e <dwt_read32bitoffsetreg>
 800bfba:	7460      	strb	r0, [r4, #17]
 800bfbc:	0c00      	lsrs	r0, r0, #16
 800bfbe:	74a0      	strb	r0, [r4, #18]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	49b9      	ldr	r1, [pc, #740]	; (800c2a8 <dwt_ioctl+0x127c>)
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7fc ff52 	bl	8008e6e <dwt_read32bitoffsetreg>
 800bfca:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800bfce:	f8a4 0013 	strh.w	r0, [r4, #19]
 800bfd2:	2500      	movs	r5, #0
 800bfd4:	7565      	strb	r5, [r4, #21]
 800bfd6:	75a5      	strb	r5, [r4, #22]
 800bfd8:	462a      	mov	r2, r5
 800bfda:	49b4      	ldr	r1, [pc, #720]	; (800c2ac <dwt_ioctl+0x1280>)
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7fc ff6e 	bl	8008ebe <dwt_read8bitoffsetreg>
 800bfe2:	75e0      	strb	r0, [r4, #23]
 800bfe4:	f7ff b8cc 	b.w	800b180 <dwt_ioctl+0x154>
 800bfe8:	4611      	mov	r1, r2
 800bfea:	f7fd fdbb 	bl	8009b64 <ull_configeventcounters>
 800bfee:	2500      	movs	r5, #0
 800bff0:	f7ff b8c6 	b.w	800b180 <dwt_ioctl+0x154>
 800bff4:	2c00      	cmp	r4, #0
 800bff6:	f000 8782 	beq.w	800cefe <dwt_ioctl+0x1ed2>
 800bffa:	8823      	ldrh	r3, [r4, #0]
 800bffc:	2200      	movs	r2, #0
 800bffe:	49ac      	ldr	r1, [pc, #688]	; (800c2b0 <dwt_ioctl+0x1284>)
 800c000:	f7fd fb4d 	bl	800969e <dwt_write16bitoffsetreg>
 800c004:	2500      	movs	r5, #0
 800c006:	f7ff b8bb 	b.w	800b180 <dwt_ioctl+0x154>
 800c00a:	2c00      	cmp	r4, #0
 800c00c:	f000 877a 	beq.w	800cf04 <dwt_ioctl+0x1ed8>
 800c010:	6825      	ldr	r5, [r4, #0]
 800c012:	b935      	cbnz	r5, 800c022 <dwt_ioctl+0xff6>
 800c014:	2300      	movs	r3, #0
 800c016:	461a      	mov	r2, r3
 800c018:	49a6      	ldr	r1, [pc, #664]	; (800c2b4 <dwt_ioctl+0x1288>)
 800c01a:	f7fd fb40 	bl	800969e <dwt_write16bitoffsetreg>
 800c01e:	f7ff b8af 	b.w	800b180 <dwt_ioctl+0x154>
 800c022:	7962      	ldrb	r2, [r4, #5]
 800c024:	7923      	ldrb	r3, [r4, #4]
 800c026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c02a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c02e:	2200      	movs	r2, #0
 800c030:	49a0      	ldr	r1, [pc, #640]	; (800c2b4 <dwt_ioctl+0x1288>)
 800c032:	f7fd fb34 	bl	800969e <dwt_write16bitoffsetreg>
 800c036:	2500      	movs	r5, #0
 800c038:	f7ff b8a2 	b.w	800b180 <dwt_ioctl+0x154>
 800c03c:	2c00      	cmp	r4, #0
 800c03e:	f000 8764 	beq.w	800cf0a <dwt_ioctl+0x1ede>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	b94b      	cbnz	r3, 800c05a <dwt_ioctl+0x102e>
 800c046:	2500      	movs	r5, #0
 800c048:	9500      	str	r5, [sp, #0]
 800c04a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800c04e:	462a      	mov	r2, r5
 800c050:	2110      	movs	r1, #16
 800c052:	f7fe fb61 	bl	800a718 <dwt_modify16bitoffsetreg>
 800c056:	f7ff b893 	b.w	800b180 <dwt_ioctl+0x154>
 800c05a:	2200      	movs	r2, #0
 800c05c:	2134      	movs	r1, #52	; 0x34
 800c05e:	f7fd fb7b 	bl	8009758 <dwt_write32bitoffsetreg>
 800c062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c06c:	2200      	movs	r2, #0
 800c06e:	2110      	movs	r1, #16
 800c070:	4630      	mov	r0, r6
 800c072:	f7fe fb51 	bl	800a718 <dwt_modify16bitoffsetreg>
 800c076:	2500      	movs	r5, #0
 800c078:	f7ff b882 	b.w	800b180 <dwt_ioctl+0x154>
 800c07c:	2c00      	cmp	r4, #0
 800c07e:	f000 8747 	beq.w	800cf10 <dwt_ioctl+0x1ee4>
 800c082:	8861      	ldrh	r1, [r4, #2]
 800c084:	f7fd fd82 	bl	8009b8c <ull_aon_read>
 800c088:	7020      	strb	r0, [r4, #0]
 800c08a:	2500      	movs	r5, #0
 800c08c:	f7ff b878 	b.w	800b180 <dwt_ioctl+0x154>
 800c090:	2c00      	cmp	r4, #0
 800c092:	f000 8740 	beq.w	800cf16 <dwt_ioctl+0x1eea>
 800c096:	78a2      	ldrb	r2, [r4, #2]
 800c098:	8821      	ldrh	r1, [r4, #0]
 800c09a:	f7fd fd97 	bl	8009bcc <ull_aon_write>
 800c09e:	2500      	movs	r5, #0
 800c0a0:	f7ff b86e 	b.w	800b180 <dwt_ioctl+0x154>
 800c0a4:	4b84      	ldr	r3, [pc, #528]	; (800c2b8 <dwt_ioctl+0x128c>)
 800c0a6:	4a85      	ldr	r2, [pc, #532]	; (800c2bc <dwt_ioctl+0x1290>)
 800c0a8:	2d01      	cmp	r5, #1
 800c0aa:	bf18      	it	ne
 800c0ac:	4613      	movne	r3, r2
 800c0ae:	2d01      	cmp	r5, #1
 800c0b0:	4983      	ldr	r1, [pc, #524]	; (800c2c0 <dwt_ioctl+0x1294>)
 800c0b2:	bf18      	it	ne
 800c0b4:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800c0b8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c0ba:	7b92      	ldrb	r2, [r2, #14]
 800c0bc:	2a01      	cmp	r2, #1
 800c0be:	d012      	beq.n	800c0e6 <dwt_ioctl+0x10ba>
 800c0c0:	2a03      	cmp	r2, #3
 800c0c2:	d117      	bne.n	800c0f4 <dwt_ioctl+0x10c8>
 800c0c4:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800c0c8:	3a01      	subs	r2, #1
 800c0ca:	441a      	add	r2, r3
 800c0cc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c0d0:	f7fc fee3 	bl	8008e9a <dwt_read16bitoffsetreg>
 800c0d4:	09c0      	lsrs	r0, r0, #7
 800c0d6:	8020      	strh	r0, [r4, #0]
 800c0d8:	8825      	ldrh	r5, [r4, #0]
 800c0da:	3500      	adds	r5, #0
 800c0dc:	bf18      	it	ne
 800c0de:	2501      	movne	r5, #1
 800c0e0:	426d      	negs	r5, r5
 800c0e2:	f7ff b84d 	b.w	800b180 <dwt_ioctl+0x154>
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	f7fc fed6 	bl	8008e9a <dwt_read16bitoffsetreg>
 800c0ee:	09c0      	lsrs	r0, r0, #7
 800c0f0:	8020      	strh	r0, [r4, #0]
 800c0f2:	e7f1      	b.n	800c0d8 <dwt_ioctl+0x10ac>
 800c0f4:	2202      	movs	r2, #2
 800c0f6:	f7fc fed0 	bl	8008e9a <dwt_read16bitoffsetreg>
 800c0fa:	09c0      	lsrs	r0, r0, #7
 800c0fc:	8020      	strh	r0, [r4, #0]
 800c0fe:	e7eb      	b.n	800c0d8 <dwt_ioctl+0x10ac>
 800c100:	2c00      	cmp	r4, #0
 800c102:	f000 870b 	beq.w	800cf1c <dwt_ioctl+0x1ef0>
 800c106:	7821      	ldrb	r1, [r4, #0]
 800c108:	f7fe fb20 	bl	800a74c <ull_setleds>
 800c10c:	2500      	movs	r5, #0
 800c10e:	f7ff b837 	b.w	800b180 <dwt_ioctl+0x154>
 800c112:	4611      	mov	r1, r2
 800c114:	f7fe f9a2 	bl	800a45c <ull_setdwstate>
 800c118:	2500      	movs	r5, #0
 800c11a:	f7ff b831 	b.w	800b180 <dwt_ioctl+0x154>
 800c11e:	9400      	str	r4, [sp, #0]
 800c120:	2304      	movs	r3, #4
 800c122:	2200      	movs	r2, #0
 800c124:	211c      	movs	r1, #28
 800c126:	f7fc fe98 	bl	8008e5a <dwt_readfromdevice>
 800c12a:	2500      	movs	r5, #0
 800c12c:	f7ff b828 	b.w	800b180 <dwt_ioctl+0x154>
 800c130:	2c00      	cmp	r4, #0
 800c132:	f000 86f6 	beq.w	800cf22 <dwt_ioctl+0x1ef6>
 800c136:	2202      	movs	r2, #2
 800c138:	2144      	movs	r1, #68	; 0x44
 800c13a:	f7fc feae 	bl	8008e9a <dwt_read16bitoffsetreg>
 800c13e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800c142:	7020      	strb	r0, [r4, #0]
 800c144:	2500      	movs	r5, #0
 800c146:	f7ff b81b 	b.w	800b180 <dwt_ioctl+0x154>
 800c14a:	2c00      	cmp	r4, #0
 800c14c:	f000 86ec 	beq.w	800cf28 <dwt_ioctl+0x1efc>
 800c150:	2200      	movs	r2, #0
 800c152:	2144      	movs	r1, #68	; 0x44
 800c154:	f7fc feb3 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c158:	f000 0001 	and.w	r0, r0, #1
 800c15c:	7020      	strb	r0, [r4, #0]
 800c15e:	2500      	movs	r5, #0
 800c160:	f7ff b80e 	b.w	800b180 <dwt_ioctl+0x154>
 800c164:	2c00      	cmp	r4, #0
 800c166:	f000 86e2 	beq.w	800cf2e <dwt_ioctl+0x1f02>
 800c16a:	8862      	ldrh	r2, [r4, #2]
 800c16c:	8821      	ldrh	r1, [r4, #0]
 800c16e:	f7fe f9d1 	bl	800a514 <ull_configureframefilter>
 800c172:	2500      	movs	r5, #0
 800c174:	f7ff b804 	b.w	800b180 <dwt_ioctl+0x154>
 800c178:	9400      	str	r4, [sp, #0]
 800c17a:	2308      	movs	r3, #8
 800c17c:	2200      	movs	r2, #0
 800c17e:	2104      	movs	r1, #4
 800c180:	f7fd fa82 	bl	8009688 <dwt_writetodevice>
 800c184:	2500      	movs	r5, #0
 800c186:	f7fe bffb 	b.w	800b180 <dwt_ioctl+0x154>
 800c18a:	9400      	str	r4, [sp, #0]
 800c18c:	2308      	movs	r3, #8
 800c18e:	2200      	movs	r2, #0
 800c190:	2104      	movs	r1, #4
 800c192:	f7fc fe62 	bl	8008e5a <dwt_readfromdevice>
 800c196:	2500      	movs	r5, #0
 800c198:	f7fe bff2 	b.w	800b180 <dwt_ioctl+0x154>
 800c19c:	2c00      	cmp	r4, #0
 800c19e:	f000 86c9 	beq.w	800cf34 <dwt_ioctl+0x1f08>
 800c1a2:	8823      	ldrh	r3, [r4, #0]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	210c      	movs	r1, #12
 800c1a8:	f7fd fa79 	bl	800969e <dwt_write16bitoffsetreg>
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	f7fe bfe7 	b.w	800b180 <dwt_ioctl+0x154>
 800c1b2:	2c00      	cmp	r4, #0
 800c1b4:	f000 86c1 	beq.w	800cf3a <dwt_ioctl+0x1f0e>
 800c1b8:	8823      	ldrh	r3, [r4, #0]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	210c      	movs	r1, #12
 800c1be:	f7fd fa6e 	bl	800969e <dwt_write16bitoffsetreg>
 800c1c2:	2500      	movs	r5, #0
 800c1c4:	f7fe bfdc 	b.w	800b180 <dwt_ioctl+0x154>
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f7fd fa3b 	bl	8009644 <ull_readrxtimestamp>
 800c1ce:	2500      	movs	r5, #0
 800c1d0:	f7fe bfd6 	b.w	800b180 <dwt_ioctl+0x154>
 800c1d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1d6:	7b9b      	ldrb	r3, [r3, #14]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d00b      	beq.n	800c1f4 <dwt_ioctl+0x11c8>
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	d112      	bne.n	800c206 <dwt_ioctl+0x11da>
 800c1e0:	9400      	str	r4, [sp, #0]
 800c1e2:	2305      	movs	r3, #5
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c1ea:	f7fc fe36 	bl	8008e5a <dwt_readfromdevice>
 800c1ee:	2500      	movs	r5, #0
 800c1f0:	f7fe bfc6 	b.w	800b180 <dwt_ioctl+0x154>
 800c1f4:	9400      	str	r4, [sp, #0]
 800c1f6:	2305      	movs	r3, #5
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4932      	ldr	r1, [pc, #200]	; (800c2c4 <dwt_ioctl+0x1298>)
 800c1fc:	f7fc fe2d 	bl	8008e5a <dwt_readfromdevice>
 800c200:	2500      	movs	r5, #0
 800c202:	f7fe bfbd 	b.w	800b180 <dwt_ioctl+0x154>
 800c206:	9400      	str	r4, [sp, #0]
 800c208:	2305      	movs	r3, #5
 800c20a:	2200      	movs	r2, #0
 800c20c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800c210:	f7fc fe23 	bl	8008e5a <dwt_readfromdevice>
 800c214:	2500      	movs	r5, #0
 800c216:	f7fe bfb3 	b.w	800b180 <dwt_ioctl+0x154>
 800c21a:	2500      	movs	r5, #0
 800c21c:	f804 5b01 	strb.w	r5, [r4], #1
 800c220:	9400      	str	r4, [sp, #0]
 800c222:	2304      	movs	r3, #4
 800c224:	462a      	mov	r2, r5
 800c226:	216c      	movs	r1, #108	; 0x6c
 800c228:	f7fc fe17 	bl	8008e5a <dwt_readfromdevice>
 800c22c:	f7fe bfa8 	b.w	800b180 <dwt_ioctl+0x154>
 800c230:	2c00      	cmp	r4, #0
 800c232:	f000 8685 	beq.w	800cf40 <dwt_ioctl+0x1f14>
 800c236:	2201      	movs	r2, #1
 800c238:	2160      	movs	r1, #96	; 0x60
 800c23a:	f7fc fe18 	bl	8008e6e <dwt_read32bitoffsetreg>
 800c23e:	6020      	str	r0, [r4, #0]
 800c240:	2500      	movs	r5, #0
 800c242:	f7fe bf9d 	b.w	800b180 <dwt_ioctl+0x154>
 800c246:	2c00      	cmp	r4, #0
 800c248:	f000 867d 	beq.w	800cf46 <dwt_ioctl+0x1f1a>
 800c24c:	2200      	movs	r2, #0
 800c24e:	2160      	movs	r1, #96	; 0x60
 800c250:	f7fc fe0d 	bl	8008e6e <dwt_read32bitoffsetreg>
 800c254:	6020      	str	r0, [r4, #0]
 800c256:	2500      	movs	r5, #0
 800c258:	f7fe bf92 	b.w	800b180 <dwt_ioctl+0x154>
 800c25c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c25e:	7b9b      	ldrb	r3, [r3, #14]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d00b      	beq.n	800c27c <dwt_ioctl+0x1250>
 800c264:	2b03      	cmp	r3, #3
 800c266:	d131      	bne.n	800c2cc <dwt_ioctl+0x12a0>
 800c268:	9400      	str	r4, [sp, #0]
 800c26a:	2305      	movs	r3, #5
 800c26c:	2228      	movs	r2, #40	; 0x28
 800c26e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c272:	f7fc fdf2 	bl	8008e5a <dwt_readfromdevice>
 800c276:	2500      	movs	r5, #0
 800c278:	f7fe bf82 	b.w	800b180 <dwt_ioctl+0x154>
 800c27c:	9400      	str	r4, [sp, #0]
 800c27e:	2305      	movs	r3, #5
 800c280:	2200      	movs	r2, #0
 800c282:	4911      	ldr	r1, [pc, #68]	; (800c2c8 <dwt_ioctl+0x129c>)
 800c284:	f7fc fde9 	bl	8008e5a <dwt_readfromdevice>
 800c288:	2500      	movs	r5, #0
 800c28a:	f7fe bf79 	b.w	800b180 <dwt_ioctl+0x154>
 800c28e:	bf00      	nop
 800c290:	000f0004 	.word	0x000f0004
 800c294:	000f0008 	.word	0x000f0008
 800c298:	000f000c 	.word	0x000f000c
 800c29c:	000f0010 	.word	0x000f0010
 800c2a0:	000f0014 	.word	0x000f0014
 800c2a4:	000f0018 	.word	0x000f0018
 800c2a8:	000f001c 	.word	0x000f001c
 800c2ac:	000f0020 	.word	0x000f0020
 800c2b0:	00060004 	.word	0x00060004
 800c2b4:	0011001c 	.word	0x0011001c
 800c2b8:	00180034 	.word	0x00180034
 800c2bc:	0018002c 	.word	0x0018002c
 800c2c0:	000c0014 	.word	0x000c0014
 800c2c4:	00180020 	.word	0x00180020
 800c2c8:	00180028 	.word	0x00180028
 800c2cc:	9400      	str	r4, [sp, #0]
 800c2ce:	2305      	movs	r3, #5
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	49ce      	ldr	r1, [pc, #824]	; (800c60c <dwt_ioctl+0x15e0>)
 800c2d4:	f7fc fdc1 	bl	8008e5a <dwt_readfromdevice>
 800c2d8:	2500      	movs	r5, #0
 800c2da:	f7fe bf51 	b.w	800b180 <dwt_ioctl+0x154>
 800c2de:	2c00      	cmp	r4, #0
 800c2e0:	f000 8634 	beq.w	800cf4c <dwt_ioctl+0x1f20>
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	211c      	movs	r1, #28
 800c2e8:	f7fc fdc1 	bl	8008e6e <dwt_read32bitoffsetreg>
 800c2ec:	6020      	str	r0, [r4, #0]
 800c2ee:	2500      	movs	r5, #0
 800c2f0:	f7fe bf46 	b.w	800b180 <dwt_ioctl+0x154>
 800c2f4:	2c00      	cmp	r4, #0
 800c2f6:	f000 862c 	beq.w	800cf52 <dwt_ioctl+0x1f26>
 800c2fa:	8825      	ldrh	r5, [r4, #0]
 800c2fc:	6867      	ldr	r7, [r4, #4]
 800c2fe:	7a23      	ldrb	r3, [r4, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	f000 8629 	beq.w	800cf58 <dwt_ioctl+0x1f2c>
 800c306:	463c      	mov	r4, r7
 800c308:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800c30c:	4629      	mov	r1, r5
 800c30e:	4630      	mov	r0, r6
 800c310:	f7fd fa00 	bl	8009714 <_dwt_otpread>
 800c314:	f844 0b04 	str.w	r0, [r4], #4
 800c318:	3501      	adds	r5, #1
 800c31a:	b2ad      	uxth	r5, r5
 800c31c:	42bc      	cmp	r4, r7
 800c31e:	d1f5      	bne.n	800c30c <dwt_ioctl+0x12e0>
 800c320:	2500      	movs	r5, #0
 800c322:	f7fe bf2d 	b.w	800b180 <dwt_ioctl+0x154>
 800c326:	2c00      	cmp	r4, #0
 800c328:	f000 8619 	beq.w	800cf5e <dwt_ioctl+0x1f32>
 800c32c:	7823      	ldrb	r3, [r4, #0]
 800c32e:	2201      	movs	r2, #1
 800c330:	2124      	movs	r1, #36	; 0x24
 800c332:	f7fd fb9f 	bl	8009a74 <dwt_write8bitoffsetreg>
 800c336:	2500      	movs	r5, #0
 800c338:	f7fe bf22 	b.w	800b180 <dwt_ioctl+0x154>
 800c33c:	f7fe f90e 	bl	800a55c <ull_run_pgfcal>
 800c340:	4605      	mov	r5, r0
 800c342:	f7fe bf1d 	b.w	800b180 <dwt_ioctl+0x154>
 800c346:	4611      	mov	r1, r2
 800c348:	f7fe fa4e 	bl	800a7e8 <ull_pgf_cal>
 800c34c:	4605      	mov	r5, r0
 800c34e:	f7fe bf17 	b.w	800b180 <dwt_ioctl+0x154>
 800c352:	2c00      	cmp	r4, #0
 800c354:	f000 8606 	beq.w	800cf64 <dwt_ioctl+0x1f38>
 800c358:	78a5      	ldrb	r5, [r4, #2]
 800c35a:	2101      	movs	r1, #1
 800c35c:	f7fd f9b0 	bl	80096c0 <ull_force_clocks>
 800c360:	2100      	movs	r1, #0
 800c362:	4630      	mov	r0, r6
 800c364:	f7fd fe6e 	bl	800a044 <ull_enable_rf_tx>
 800c368:	4630      	mov	r0, r6
 800c36a:	f7fd fe9f 	bl	800a0ac <ull_enable_rftx_blocks>
 800c36e:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800c372:	2200      	movs	r2, #0
 800c374:	49a6      	ldr	r1, [pc, #664]	; (800c610 <dwt_ioctl+0x15e4>)
 800c376:	4630      	mov	r0, r6
 800c378:	f7fd fb7c 	bl	8009a74 <dwt_write8bitoffsetreg>
 800c37c:	2301      	movs	r3, #1
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	23ff      	movs	r3, #255	; 0xff
 800c382:	2200      	movs	r2, #0
 800c384:	49a3      	ldr	r1, [pc, #652]	; (800c614 <dwt_ioctl+0x15e8>)
 800c386:	4630      	mov	r0, r6
 800c388:	f7fd ffaa 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800c38c:	4fa1      	ldr	r7, [pc, #644]	; (800c614 <dwt_ioctl+0x15e8>)
 800c38e:	2500      	movs	r5, #0
 800c390:	462a      	mov	r2, r5
 800c392:	4639      	mov	r1, r7
 800c394:	4630      	mov	r0, r6
 800c396:	f7fc fd92 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c39a:	f010 0f01 	tst.w	r0, #1
 800c39e:	d1f7      	bne.n	800c390 <dwt_ioctl+0x1364>
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	499d      	ldr	r1, [pc, #628]	; (800c618 <dwt_ioctl+0x15ec>)
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7fc fd78 	bl	8008e9a <dwt_read16bitoffsetreg>
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7fd fb03 	bl	80099b8 <ull_disable_rftx_blocks>
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7fd fb09 	bl	80099cc <ull_disable_rf_tx>
 800c3ba:	2105      	movs	r1, #5
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7fd f97f 	bl	80096c0 <ull_force_clocks>
 800c3c2:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800c3c6:	8025      	strh	r5, [r4, #0]
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	f7fe bed9 	b.w	800b180 <dwt_ioctl+0x154>
 800c3ce:	2102      	movs	r1, #2
 800c3d0:	f7fe f844 	bl	800a45c <ull_setdwstate>
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7fe f840 	bl	800a45c <ull_setdwstate>
 800c3dc:	2432      	movs	r4, #50	; 0x32
 800c3de:	f04f 0814 	mov.w	r8, #20
 800c3e2:	2700      	movs	r7, #0
 800c3e4:	2544      	movs	r5, #68	; 0x44
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	f7f4 fa3b 	bl	8000862 <deca_usleep>
 800c3ec:	463a      	mov	r2, r7
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f7fc fd64 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c3f6:	f010 0f02 	tst.w	r0, #2
 800c3fa:	d105      	bne.n	800c408 <dwt_ioctl+0x13dc>
 800c3fc:	1e63      	subs	r3, r4, #1
 800c3fe:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800c402:	d1f0      	bne.n	800c3e6 <dwt_ioctl+0x13ba>
 800c404:	2501      	movs	r5, #1
 800c406:	e000      	b.n	800c40a <dwt_ioctl+0x13de>
 800c408:	2500      	movs	r5, #0
 800c40a:	426d      	negs	r5, r5
 800c40c:	f7fe beb8 	b.w	800b180 <dwt_ioctl+0x154>
 800c410:	2c00      	cmp	r4, #0
 800c412:	f000 85aa 	beq.w	800cf6a <dwt_ioctl+0x1f3e>
 800c416:	7823      	ldrb	r3, [r4, #0]
 800c418:	031b      	lsls	r3, r3, #12
 800c41a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c41e:	7862      	ldrb	r2, [r4, #1]
 800c420:	2a01      	cmp	r2, #1
 800c422:	bf08      	it	eq
 800c424:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800c42e:	2200      	movs	r2, #0
 800c430:	497a      	ldr	r1, [pc, #488]	; (800c61c <dwt_ioctl+0x15f0>)
 800c432:	f7fd fde3 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800c436:	2500      	movs	r5, #0
 800c438:	f7fe bea2 	b.w	800b180 <dwt_ioctl+0x154>
 800c43c:	2c00      	cmp	r4, #0
 800c43e:	f000 8597 	beq.w	800cf70 <dwt_ioctl+0x1f44>
 800c442:	6862      	ldr	r2, [r4, #4]
 800c444:	6821      	ldr	r1, [r4, #0]
 800c446:	f7fd fefb 	bl	800a240 <ull_setgpiomode>
 800c44a:	2500      	movs	r5, #0
 800c44c:	f7fe be98 	b.w	800b180 <dwt_ioctl+0x154>
 800c450:	2c00      	cmp	r4, #0
 800c452:	f000 8590 	beq.w	800cf76 <dwt_ioctl+0x1f4a>
 800c456:	8823      	ldrh	r3, [r4, #0]
 800c458:	2200      	movs	r2, #0
 800c45a:	4971      	ldr	r1, [pc, #452]	; (800c620 <dwt_ioctl+0x15f4>)
 800c45c:	f7fd f91f 	bl	800969e <dwt_write16bitoffsetreg>
 800c460:	2500      	movs	r5, #0
 800c462:	f7fe be8d 	b.w	800b180 <dwt_ioctl+0x154>
 800c466:	2c00      	cmp	r4, #0
 800c468:	f000 8588 	beq.w	800cf7c <dwt_ioctl+0x1f50>
 800c46c:	6862      	ldr	r2, [r4, #4]
 800c46e:	8821      	ldrh	r1, [r4, #0]
 800c470:	f7fe f9ea 	bl	800a848 <ull_setgpiovalue>
 800c474:	2500      	movs	r5, #0
 800c476:	f7fe be83 	b.w	800b180 <dwt_ioctl+0x154>
 800c47a:	2c00      	cmp	r4, #0
 800c47c:	f000 8581 	beq.w	800cf82 <dwt_ioctl+0x1f56>
 800c480:	7865      	ldrb	r5, [r4, #1]
 800c482:	7823      	ldrb	r3, [r4, #0]
 800c484:	b18b      	cbz	r3, 800c4aa <dwt_ioctl+0x147e>
 800c486:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c488:	2200      	movs	r2, #0
 800c48a:	739a      	strb	r2, [r3, #14]
 800c48c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c490:	2208      	movs	r2, #8
 800c492:	b1e5      	cbz	r5, 800c4ce <dwt_ioctl+0x14a2>
 800c494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c498:	9200      	str	r2, [sp, #0]
 800c49a:	2200      	movs	r2, #0
 800c49c:	2110      	movs	r1, #16
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f7fd fdac 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800c4a4:	2500      	movs	r5, #0
 800c4a6:	f7fe be6b 	b.w	800b180 <dwt_ioctl+0x154>
 800c4aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	739a      	strb	r2, [r3, #14]
 800c4b0:	2318      	movs	r3, #24
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	495b      	ldr	r1, [pc, #364]	; (800c624 <dwt_ioctl+0x15f8>)
 800c4b6:	f7fd f94f 	bl	8009758 <dwt_write32bitoffsetreg>
 800c4ba:	23e8      	movs	r3, #232	; 0xe8
 800c4bc:	2200      	movs	r2, #0
 800c4be:	495a      	ldr	r1, [pc, #360]	; (800c628 <dwt_ioctl+0x15fc>)
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7fd f949 	bl	8009758 <dwt_write32bitoffsetreg>
 800c4c6:	f06f 0308 	mvn.w	r3, #8
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	e7e1      	b.n	800c492 <dwt_ioctl+0x1466>
 800c4ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4d2:	e7e1      	b.n	800c498 <dwt_ioctl+0x146c>
 800c4d4:	2c00      	cmp	r4, #0
 800c4d6:	f000 8557 	beq.w	800cf88 <dwt_ioctl+0x1f5c>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2130      	movs	r1, #48	; 0x30
 800c4e0:	f7fd f93a 	bl	8009758 <dwt_write32bitoffsetreg>
 800c4e4:	2500      	movs	r5, #0
 800c4e6:	f7fe be4b 	b.w	800b180 <dwt_ioctl+0x154>
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	f000 854f 	beq.w	800cf8e <dwt_ioctl+0x1f62>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	f7fc fcbb 	bl	8008e6e <dwt_read32bitoffsetreg>
 800c4f8:	6020      	str	r0, [r4, #0]
 800c4fa:	2500      	movs	r5, #0
 800c4fc:	f7fe be40 	b.w	800b180 <dwt_ioctl+0x154>
 800c500:	4623      	mov	r3, r4
 800c502:	2200      	movs	r2, #0
 800c504:	4629      	mov	r1, r5
 800c506:	f7fd f927 	bl	8009758 <dwt_write32bitoffsetreg>
 800c50a:	2500      	movs	r5, #0
 800c50c:	f7fe be38 	b.w	800b180 <dwt_ioctl+0x154>
 800c510:	2c00      	cmp	r4, #0
 800c512:	f000 853f 	beq.w	800cf94 <dwt_ioctl+0x1f68>
 800c516:	2203      	movs	r2, #3
 800c518:	4944      	ldr	r1, [pc, #272]	; (800c62c <dwt_ioctl+0x1600>)
 800c51a:	f7fc fcd0 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c51e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800c522:	7020      	strb	r0, [r4, #0]
 800c524:	2500      	movs	r5, #0
 800c526:	f7fe be2b 	b.w	800b180 <dwt_ioctl+0x154>
 800c52a:	2c00      	cmp	r4, #0
 800c52c:	f000 8535 	beq.w	800cf9a <dwt_ioctl+0x1f6e>
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	2200      	movs	r2, #0
 800c534:	2144      	movs	r1, #68	; 0x44
 800c536:	f7fd f90f 	bl	8009758 <dwt_write32bitoffsetreg>
 800c53a:	2500      	movs	r5, #0
 800c53c:	f7fe be20 	b.w	800b180 <dwt_ioctl+0x154>
 800c540:	2c00      	cmp	r4, #0
 800c542:	f000 852d 	beq.w	800cfa0 <dwt_ioctl+0x1f74>
 800c546:	8823      	ldrh	r3, [r4, #0]
 800c548:	2200      	movs	r2, #0
 800c54a:	2148      	movs	r1, #72	; 0x48
 800c54c:	f7fd f8a7 	bl	800969e <dwt_write16bitoffsetreg>
 800c550:	2500      	movs	r5, #0
 800c552:	f7fe be15 	b.w	800b180 <dwt_ioctl+0x154>
 800c556:	2c00      	cmp	r4, #0
 800c558:	f000 8525 	beq.w	800cfa6 <dwt_ioctl+0x1f7a>
 800c55c:	2200      	movs	r2, #0
 800c55e:	2144      	movs	r1, #68	; 0x44
 800c560:	f7fc fc85 	bl	8008e6e <dwt_read32bitoffsetreg>
 800c564:	6020      	str	r0, [r4, #0]
 800c566:	2500      	movs	r5, #0
 800c568:	f7fe be0a 	b.w	800b180 <dwt_ioctl+0x154>
 800c56c:	2c00      	cmp	r4, #0
 800c56e:	f000 851d 	beq.w	800cfac <dwt_ioctl+0x1f80>
 800c572:	2200      	movs	r2, #0
 800c574:	2148      	movs	r1, #72	; 0x48
 800c576:	f7fc fc90 	bl	8008e9a <dwt_read16bitoffsetreg>
 800c57a:	6020      	str	r0, [r4, #0]
 800c57c:	2500      	movs	r5, #0
 800c57e:	f7fe bdff 	b.w	800b180 <dwt_ioctl+0x154>
 800c582:	2c00      	cmp	r4, #0
 800c584:	f000 8515 	beq.w	800cfb2 <dwt_ioctl+0x1f86>
 800c588:	7823      	ldrb	r3, [r4, #0]
 800c58a:	2200      	movs	r2, #0
 800c58c:	4928      	ldr	r1, [pc, #160]	; (800c630 <dwt_ioctl+0x1604>)
 800c58e:	f7fd fa71 	bl	8009a74 <dwt_write8bitoffsetreg>
 800c592:	2500      	movs	r5, #0
 800c594:	f7fe bdf4 	b.w	800b180 <dwt_ioctl+0x154>
 800c598:	2c00      	cmp	r4, #0
 800c59a:	f000 850d 	beq.w	800cfb8 <dwt_ioctl+0x1f8c>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2144      	movs	r1, #68	; 0x44
 800c5a2:	f7fc fc8c 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c5a6:	7020      	strb	r0, [r4, #0]
 800c5a8:	2500      	movs	r5, #0
 800c5aa:	f7fe bde9 	b.w	800b180 <dwt_ioctl+0x154>
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	f000 8505 	beq.w	800cfbe <dwt_ioctl+0x1f92>
 800c5b4:	f7fd fa6a 	bl	8009a8c <ull_getframelength>
 800c5b8:	6020      	str	r0, [r4, #0]
 800c5ba:	2500      	movs	r5, #0
 800c5bc:	f7fe bde0 	b.w	800b180 <dwt_ioctl+0x154>
 800c5c0:	2c00      	cmp	r4, #0
 800c5c2:	f000 84ff 	beq.w	800cfc4 <dwt_ioctl+0x1f98>
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	491a      	ldr	r1, [pc, #104]	; (800c634 <dwt_ioctl+0x1608>)
 800c5ca:	f7fc fc66 	bl	8008e9a <dwt_read16bitoffsetreg>
 800c5ce:	8020      	strh	r0, [r4, #0]
 800c5d0:	2500      	movs	r5, #0
 800c5d2:	f7fe bdd5 	b.w	800b180 <dwt_ioctl+0x154>
 800c5d6:	2c00      	cmp	r4, #0
 800c5d8:	f000 84f7 	beq.w	800cfca <dwt_ioctl+0x1f9e>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4916      	ldr	r1, [pc, #88]	; (800c638 <dwt_ioctl+0x160c>)
 800c5e0:	f7fc fc45 	bl	8008e6e <dwt_read32bitoffsetreg>
 800c5e4:	6020      	str	r0, [r4, #0]
 800c5e6:	2500      	movs	r5, #0
 800c5e8:	f7fe bdca 	b.w	800b180 <dwt_ioctl+0x154>
 800c5ec:	2c00      	cmp	r4, #0
 800c5ee:	f000 84ef 	beq.w	800cfd0 <dwt_ioctl+0x1fa4>
 800c5f2:	8823      	ldrh	r3, [r4, #0]
 800c5f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c5fe:	2200      	movs	r2, #0
 800c600:	490d      	ldr	r1, [pc, #52]	; (800c638 <dwt_ioctl+0x160c>)
 800c602:	f7fe f889 	bl	800a718 <dwt_modify16bitoffsetreg>
 800c606:	2500      	movs	r5, #0
 800c608:	f7fe bdba 	b.w	800b180 <dwt_ioctl+0x154>
 800c60c:	000c0008 	.word	0x000c0008
 800c610:	0007001c 	.word	0x0007001c
 800c614:	00080010 	.word	0x00080010
 800c618:	00080014 	.word	0x00080014
 800c61c:	00070014 	.word	0x00070014
 800c620:	00050008 	.word	0x00050008
 800c624:	001f000c 	.word	0x001f000c
 800c628:	001f0010 	.word	0x001f0010
 800c62c:	00030060 	.word	0x00030060
 800c630:	00010018 	.word	0x00010018
 800c634:	0005002c 	.word	0x0005002c
 800c638:	000e001c 	.word	0x000e001c
 800c63c:	2c00      	cmp	r4, #0
 800c63e:	f000 84ca 	beq.w	800cfd6 <dwt_ioctl+0x1faa>
 800c642:	88a7      	ldrh	r7, [r4, #4]
 800c644:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800c648:	7b23      	ldrb	r3, [r4, #12]
 800c64a:	9306      	str	r3, [sp, #24]
 800c64c:	6922      	ldr	r2, [r4, #16]
 800c64e:	9204      	str	r2, [sp, #16]
 800c650:	6962      	ldr	r2, [r4, #20]
 800c652:	9205      	str	r2, [sp, #20]
 800c654:	f00b 0203 	and.w	r2, fp, #3
 800c658:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800c65c:	2b05      	cmp	r3, #5
 800c65e:	d145      	bne.n	800c6ec <dwt_ioctl+0x16c0>
 800c660:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800c664:	bf28      	it	cs
 800c666:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800c66a:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800c9a4 <dwt_ioctl+0x1978>
 800c66e:	2f04      	cmp	r7, #4
 800c670:	d805      	bhi.n	800c67e <dwt_ioctl+0x1652>
 800c672:	eb09 0300 	add.w	r3, r9, r0
 800c676:	785b      	ldrb	r3, [r3, #1]
 800c678:	3b05      	subs	r3, #5
 800c67a:	429f      	cmp	r7, r3
 800c67c:	db3e      	blt.n	800c6fc <dwt_ioctl+0x16d0>
 800c67e:	2a01      	cmp	r2, #1
 800c680:	d87c      	bhi.n	800c77c <dwt_ioctl+0x1750>
 800c682:	4bc4      	ldr	r3, [pc, #784]	; (800c994 <dwt_ioctl+0x1968>)
 800c684:	5c99      	ldrb	r1, [r3, r2]
 800c686:	463e      	mov	r6, r7
 800c688:	42b9      	cmp	r1, r7
 800c68a:	da79      	bge.n	800c780 <dwt_ioctl+0x1754>
 800c68c:	1c55      	adds	r5, r2, #1
 800c68e:	fa53 f585 	uxtab	r5, r3, r5
 800c692:	2300      	movs	r3, #0
 800c694:	440b      	add	r3, r1
 800c696:	b29b      	uxth	r3, r3
 800c698:	3201      	adds	r2, #1
 800c69a:	b2d2      	uxtb	r2, r2
 800c69c:	2a02      	cmp	r2, #2
 800c69e:	d005      	beq.n	800c6ac <dwt_ioctl+0x1680>
 800c6a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c6a4:	eba6 0c03 	sub.w	ip, r6, r3
 800c6a8:	4561      	cmp	r1, ip
 800c6aa:	dbf3      	blt.n	800c694 <dwt_ioctl+0x1668>
 800c6ac:	429f      	cmp	r7, r3
 800c6ae:	bf08      	it	eq
 800c6b0:	9003      	streq	r0, [sp, #12]
 800c6b2:	d069      	beq.n	800c788 <dwt_ioctl+0x175c>
 800c6b4:	f107 0805 	add.w	r8, r7, #5
 800c6b8:	fa1f f888 	uxth.w	r8, r8
 800c6bc:	2580      	movs	r5, #128	; 0x80
 800c6be:	2100      	movs	r1, #0
 800c6c0:	9107      	str	r1, [sp, #28]
 800c6c2:	9103      	str	r1, [sp, #12]
 800c6c4:	9108      	str	r1, [sp, #32]
 800c6c6:	460e      	mov	r6, r1
 800c6c8:	2105      	movs	r1, #5
 800c6ca:	46be      	mov	lr, r7
 800c6cc:	428f      	cmp	r7, r1
 800c6ce:	bf38      	it	cc
 800c6d0:	468e      	movcc	lr, r1
 800c6d2:	f1ae 0e05 	sub.w	lr, lr, #5
 800c6d6:	fa1f fe8e 	uxth.w	lr, lr
 800c6da:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800c994 <dwt_ioctl+0x1968>
 800c6de:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c6e2:	468b      	mov	fp, r1
 800c6e4:	46bc      	mov	ip, r7
 800c6e6:	4637      	mov	r7, r6
 800c6e8:	f000 bcec 	b.w	800d0c4 <dwt_ioctl+0x2098>
 800c6ec:	f240 1331 	movw	r3, #305	; 0x131
 800c6f0:	429f      	cmp	r7, r3
 800c6f2:	bf28      	it	cs
 800c6f4:	461f      	movcs	r7, r3
 800c6f6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800c9a8 <dwt_ioctl+0x197c>
 800c6fa:	e7b8      	b.n	800c66e <dwt_ioctl+0x1642>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9a05      	ldr	r2, [sp, #20]
 800c700:	8013      	strh	r3, [r2, #0]
 800c702:	9a04      	ldr	r2, [sp, #16]
 800c704:	f8c2 b000 	str.w	fp, [r2]
 800c708:	e04d      	b.n	800c7a6 <dwt_ioctl+0x177a>
 800c70a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800c70e:	2300      	movs	r3, #0
 800c710:	9a05      	ldr	r2, [sp, #20]
 800c712:	8013      	strh	r3, [r2, #0]
 800c714:	9b04      	ldr	r3, [sp, #16]
 800c716:	f8c3 b000 	str.w	fp, [r3]
 800c71a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c71e:	e042      	b.n	800c7a6 <dwt_ioctl+0x177a>
 800c720:	fa1f fb81 	uxth.w	fp, r1
 800c724:	9207      	str	r2, [sp, #28]
 800c726:	9003      	str	r0, [sp, #12]
 800c728:	9308      	str	r3, [sp, #32]
 800c72a:	2701      	movs	r7, #1
 800c72c:	f000 bcdb 	b.w	800d0e6 <dwt_ioctl+0x20ba>
 800c730:	2f00      	cmp	r7, #0
 800c732:	f040 849b 	bne.w	800d06c <dwt_ioctl+0x2040>
 800c736:	4598      	cmp	r8, r3
 800c738:	f200 84b0 	bhi.w	800d09c <dwt_ioctl+0x2070>
 800c73c:	2e00      	cmp	r6, #0
 800c73e:	d039      	beq.n	800c7b4 <dwt_ioctl+0x1788>
 800c740:	283f      	cmp	r0, #63	; 0x3f
 800c742:	f000 84d5 	beq.w	800d0f0 <dwt_ioctl+0x20c4>
 800c746:	2700      	movs	r7, #0
 800c748:	f819 1000 	ldrb.w	r1, [r9, r0]
 800c74c:	1a5b      	subs	r3, r3, r1
 800c74e:	b29b      	uxth	r3, r3
 800c750:	1e46      	subs	r6, r0, #1
 800c752:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800c756:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800c75a:	bf18      	it	ne
 800c75c:	2601      	movne	r6, #1
 800c75e:	f000 bca9 	b.w	800d0b4 <dwt_ioctl+0x2088>
 800c762:	9906      	ldr	r1, [sp, #24]
 800c764:	2909      	cmp	r1, #9
 800c766:	f040 84c9 	bne.w	800d0fc <dwt_ioctl+0x20d0>
 800c76a:	213f      	movs	r1, #63	; 0x3f
 800c76c:	9103      	str	r1, [sp, #12]
 800c76e:	e00b      	b.n	800c788 <dwt_ioctl+0x175c>
 800c770:	b2b3      	uxth	r3, r6
 800c772:	3201      	adds	r2, #1
 800c774:	b2d2      	uxtb	r2, r2
 800c776:	213f      	movs	r1, #63	; 0x3f
 800c778:	9103      	str	r1, [sp, #12]
 800c77a:	e005      	b.n	800c788 <dwt_ioctl+0x175c>
 800c77c:	2300      	movs	r3, #0
 800c77e:	e795      	b.n	800c6ac <dwt_ioctl+0x1680>
 800c780:	2300      	movs	r3, #0
 800c782:	e793      	b.n	800c6ac <dwt_ioctl+0x1680>
 800c784:	9003      	str	r0, [sp, #12]
 800c786:	4663      	mov	r3, ip
 800c788:	9905      	ldr	r1, [sp, #20]
 800c78a:	800b      	strh	r3, [r1, #0]
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800c792:	b2d2      	uxtb	r2, r2
 800c794:	0413      	lsls	r3, r2, #16
 800c796:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c79a:	4313      	orrs	r3, r2
 800c79c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c7a0:	9a04      	ldr	r2, [sp, #16]
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	6023      	str	r3, [r4, #0]
 800c7a8:	2500      	movs	r5, #0
 800c7aa:	f7fe bce9 	b.w	800b180 <dwt_ioctl+0x154>
 800c7ae:	9a07      	ldr	r2, [sp, #28]
 800c7b0:	9b08      	ldr	r3, [sp, #32]
 800c7b2:	e7e9      	b.n	800c788 <dwt_ioctl+0x175c>
 800c7b4:	9003      	str	r0, [sp, #12]
 800c7b6:	e7e7      	b.n	800c788 <dwt_ioctl+0x175c>
 800c7b8:	9a07      	ldr	r2, [sp, #28]
 800c7ba:	9b08      	ldr	r3, [sp, #32]
 800c7bc:	e7e4      	b.n	800c788 <dwt_ioctl+0x175c>
 800c7be:	213f      	movs	r1, #63	; 0x3f
 800c7c0:	9103      	str	r1, [sp, #12]
 800c7c2:	e7e1      	b.n	800c788 <dwt_ioctl+0x175c>
 800c7c4:	2c00      	cmp	r4, #0
 800c7c6:	f000 8409 	beq.w	800cfdc <dwt_ioctl+0x1fb0>
 800c7ca:	7827      	ldrb	r7, [r4, #0]
 800c7cc:	7864      	ldrb	r4, [r4, #1]
 800c7ce:	f7f4 f81f 	bl	8000810 <decamutexon>
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	2c02      	cmp	r4, #2
 800c7d6:	d00e      	beq.n	800c7f6 <dwt_ioctl+0x17ca>
 800c7d8:	2c04      	cmp	r4, #4
 800c7da:	d00c      	beq.n	800c7f6 <dwt_ioctl+0x17ca>
 800c7dc:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800c7e0:	2c01      	cmp	r4, #1
 800c7e2:	d01a      	beq.n	800c81a <dwt_ioctl+0x17ee>
 800c7e4:	43fb      	mvns	r3, r7
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	9200      	str	r2, [sp, #0]
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	496a      	ldr	r1, [pc, #424]	; (800c998 <dwt_ioctl+0x196c>)
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7fd fd76 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800c7f4:	e005      	b.n	800c802 <dwt_ioctl+0x17d6>
 800c7f6:	463b      	mov	r3, r7
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	4967      	ldr	r1, [pc, #412]	; (800c998 <dwt_ioctl+0x196c>)
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f7fd f939 	bl	8009a74 <dwt_write8bitoffsetreg>
 800c802:	463b      	mov	r3, r7
 800c804:	2200      	movs	r2, #0
 800c806:	4965      	ldr	r1, [pc, #404]	; (800c99c <dwt_ioctl+0x1970>)
 800c808:	4630      	mov	r0, r6
 800c80a:	f7fc ffa5 	bl	8009758 <dwt_write32bitoffsetreg>
 800c80e:	4628      	mov	r0, r5
 800c810:	f7f4 f80f 	bl	8000832 <decamutexoff>
 800c814:	2500      	movs	r5, #0
 800c816:	f7fe bcb3 	b.w	800b180 <dwt_ioctl+0x154>
 800c81a:	9700      	str	r7, [sp, #0]
 800c81c:	23ff      	movs	r3, #255	; 0xff
 800c81e:	2200      	movs	r2, #0
 800c820:	495d      	ldr	r1, [pc, #372]	; (800c998 <dwt_ioctl+0x196c>)
 800c822:	4630      	mov	r0, r6
 800c824:	f7fd fd5c 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800c828:	e7eb      	b.n	800c802 <dwt_ioctl+0x17d6>
 800c82a:	2302      	movs	r3, #2
 800c82c:	9301      	str	r3, [sp, #4]
 800c82e:	2500      	movs	r5, #0
 800c830:	9500      	str	r5, [sp, #0]
 800c832:	462b      	mov	r3, r5
 800c834:	462a      	mov	r2, r5
 800c836:	211a      	movs	r1, #26
 800c838:	f7fc fa91 	bl	8008d5e <dwt_xfer3xxx>
 800c83c:	f7fe bca0 	b.w	800b180 <dwt_ioctl+0x154>
 800c840:	f7fe fbe0 	bl	800b004 <ull_softreset_fcmd>
 800c844:	2500      	movs	r5, #0
 800c846:	f7fe bc9b 	b.w	800b180 <dwt_ioctl+0x154>
 800c84a:	f7fe fbc7 	bl	800afdc <ull_softreset_no_sema_fcmd>
 800c84e:	2500      	movs	r5, #0
 800c850:	f7fe bc96 	b.w	800b180 <dwt_ioctl+0x154>
 800c854:	2302      	movs	r3, #2
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	2500      	movs	r5, #0
 800c85a:	9500      	str	r5, [sp, #0]
 800c85c:	462b      	mov	r3, r5
 800c85e:	462a      	mov	r2, r5
 800c860:	2114      	movs	r1, #20
 800c862:	f7fc fa7c 	bl	8008d5e <dwt_xfer3xxx>
 800c866:	f7fe bc8b 	b.w	800b180 <dwt_ioctl+0x154>
 800c86a:	2402      	movs	r4, #2
 800c86c:	9401      	str	r4, [sp, #4]
 800c86e:	2500      	movs	r5, #0
 800c870:	9500      	str	r5, [sp, #0]
 800c872:	462b      	mov	r3, r5
 800c874:	462a      	mov	r2, r5
 800c876:	2115      	movs	r1, #21
 800c878:	f7fc fa71 	bl	8008d5e <dwt_xfer3xxx>
 800c87c:	9401      	str	r4, [sp, #4]
 800c87e:	9500      	str	r5, [sp, #0]
 800c880:	462b      	mov	r3, r5
 800c882:	462a      	mov	r2, r5
 800c884:	2115      	movs	r1, #21
 800c886:	4630      	mov	r0, r6
 800c888:	f7fc fa69 	bl	8008d5e <dwt_xfer3xxx>
 800c88c:	f7fe bc78 	b.w	800b180 <dwt_ioctl+0x154>
 800c890:	2302      	movs	r3, #2
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	2500      	movs	r5, #0
 800c896:	9500      	str	r5, [sp, #0]
 800c898:	462b      	mov	r3, r5
 800c89a:	462a      	mov	r2, r5
 800c89c:	2116      	movs	r1, #22
 800c89e:	f7fc fa5e 	bl	8008d5e <dwt_xfer3xxx>
 800c8a2:	f7fe bc6d 	b.w	800b180 <dwt_ioctl+0x154>
 800c8a6:	2c00      	cmp	r4, #0
 800c8a8:	f000 839b 	beq.w	800cfe2 <dwt_ioctl+0x1fb6>
 800c8ac:	b93a      	cbnz	r2, 800c8be <dwt_ioctl+0x1892>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c8b4:	f7fc fb03 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c8b8:	7020      	strb	r0, [r4, #0]
 800c8ba:	f7fe bc61 	b.w	800b180 <dwt_ioctl+0x154>
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c8c4:	f7fc fafb 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c8c8:	7020      	strb	r0, [r4, #0]
 800c8ca:	2500      	movs	r5, #0
 800c8cc:	f7fe bc58 	b.w	800b180 <dwt_ioctl+0x154>
 800c8d0:	2c00      	cmp	r4, #0
 800c8d2:	f000 8389 	beq.w	800cfe8 <dwt_ioctl+0x1fbc>
 800c8d6:	7824      	ldrb	r4, [r4, #0]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c8de:	f7fc faee 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c8e2:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800c8e6:	4323      	orrs	r3, r4
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	f7fd f8c0 	bl	8009a74 <dwt_write8bitoffsetreg>
 800c8f4:	2500      	movs	r5, #0
 800c8f6:	f7fe bc43 	b.w	800b180 <dwt_ioctl+0x154>
 800c8fa:	2c00      	cmp	r4, #0
 800c8fc:	f000 8377 	beq.w	800cfee <dwt_ioctl+0x1fc2>
 800c900:	7824      	ldrb	r4, [r4, #0]
 800c902:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800c906:	d01e      	beq.n	800c946 <dwt_ioctl+0x191a>
 800c908:	2d01      	cmp	r5, #1
 800c90a:	f040 8373 	bne.w	800cff4 <dwt_ioctl+0x1fc8>
 800c90e:	2502      	movs	r5, #2
 800c910:	2201      	movs	r2, #1
 800c912:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c916:	4630      	mov	r0, r6
 800c918:	f7fc fad1 	bl	8008ebe <dwt_read8bitoffsetreg>
 800c91c:	b9ac      	cbnz	r4, 800c94a <dwt_ioctl+0x191e>
 800c91e:	ea20 0305 	bic.w	r3, r0, r5
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2201      	movs	r2, #1
 800c926:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7fd f8a2 	bl	8009a74 <dwt_write8bitoffsetreg>
 800c930:	2200      	movs	r2, #0
 800c932:	2110      	movs	r1, #16
 800c934:	4630      	mov	r0, r6
 800c936:	f7fc fa9a 	bl	8008e6e <dwt_read32bitoffsetreg>
 800c93a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800c93e:	d00b      	beq.n	800c958 <dwt_ioctl+0x192c>
 800c940:	2500      	movs	r5, #0
 800c942:	f7fe bc1d 	b.w	800b180 <dwt_ioctl+0x154>
 800c946:	2504      	movs	r5, #4
 800c948:	e7e2      	b.n	800c910 <dwt_ioctl+0x18e4>
 800c94a:	2c01      	cmp	r4, #1
 800c94c:	f040 8356 	bne.w	800cffc <dwt_ioctl+0x1fd0>
 800c950:	ea40 0305 	orr.w	r3, r0, r5
 800c954:	b2db      	uxtb	r3, r3
 800c956:	e7e5      	b.n	800c924 <dwt_ioctl+0x18f8>
 800c958:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c962:	2200      	movs	r2, #0
 800c964:	2110      	movs	r1, #16
 800c966:	4630      	mov	r0, r6
 800c968:	f7fd fb48 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800c96c:	2500      	movs	r5, #0
 800c96e:	f7fe bc07 	b.w	800b180 <dwt_ioctl+0x154>
 800c972:	2c00      	cmp	r4, #0
 800c974:	f000 8346 	beq.w	800d004 <dwt_ioctl+0x1fd8>
 800c978:	7823      	ldrb	r3, [r4, #0]
 800c97a:	035b      	lsls	r3, r3, #13
 800c97c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800c986:	2200      	movs	r2, #0
 800c988:	4905      	ldr	r1, [pc, #20]	; (800c9a0 <dwt_ioctl+0x1974>)
 800c98a:	f7fd fec5 	bl	800a718 <dwt_modify16bitoffsetreg>
 800c98e:	2500      	movs	r5, #0
 800c990:	f7fe bbf6 	b.w	800b180 <dwt_ioctl+0x154>
 800c994:	080123e8 	.word	0x080123e8
 800c998:	0001001c 	.word	0x0001001c
 800c99c:	00010018 	.word	0x00010018
 800c9a0:	000e000c 	.word	0x000e000c
 800c9a4:	08012368 	.word	0x08012368
 800c9a8:	080123a8 	.word	0x080123a8
 800c9ac:	2c00      	cmp	r4, #0
 800c9ae:	f000 832c 	beq.w	800d00a <dwt_ioctl+0x1fde>
 800c9b2:	7825      	ldrb	r5, [r4, #0]
 800c9b4:	6862      	ldr	r2, [r4, #4]
 800c9b6:	2a01      	cmp	r2, #1
 800c9b8:	bf15      	itete	ne
 800c9ba:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800c9be:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800c9c2:	27df      	movne	r7, #223	; 0xdf
 800c9c4:	27ef      	moveq	r7, #239	; 0xef
 800c9c6:	bf14      	ite	ne
 800c9c8:	f04f 0820 	movne.w	r8, #32
 800c9cc:	f04f 0810 	moveq.w	r8, #16
 800c9d0:	2400      	movs	r4, #0
 800c9d2:	9400      	str	r4, [sp, #0]
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800c9da:	f7fd fb0f 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800c9de:	9400      	str	r4, [sp, #0]
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	49be      	ldr	r1, [pc, #760]	; (800cce0 <dwt_ioctl+0x1cb4>)
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f7fd fc7a 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800c9ec:	2d01      	cmp	r5, #1
 800c9ee:	d003      	beq.n	800c9f8 <dwt_ioctl+0x19cc>
 800c9f0:	b165      	cbz	r5, 800ca0c <dwt_ioctl+0x19e0>
 800c9f2:	2500      	movs	r5, #0
 800c9f4:	f7fe bbc4 	b.w	800b180 <dwt_ioctl+0x154>
 800c9f8:	4625      	mov	r5, r4
 800c9fa:	9400      	str	r4, [sp, #0]
 800c9fc:	463b      	mov	r3, r7
 800c9fe:	4622      	mov	r2, r4
 800ca00:	49b8      	ldr	r1, [pc, #736]	; (800cce4 <dwt_ioctl+0x1cb8>)
 800ca02:	4630      	mov	r0, r6
 800ca04:	f7fd fc6c 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800ca08:	f7fe bbba 	b.w	800b180 <dwt_ioctl+0x154>
 800ca0c:	f8cd 8000 	str.w	r8, [sp]
 800ca10:	23ff      	movs	r3, #255	; 0xff
 800ca12:	2200      	movs	r2, #0
 800ca14:	49b3      	ldr	r1, [pc, #716]	; (800cce4 <dwt_ioctl+0x1cb8>)
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7fd fc62 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800ca1c:	f7fe bbb0 	b.w	800b180 <dwt_ioctl+0x154>
 800ca20:	2c00      	cmp	r4, #0
 800ca22:	f000 82f5 	beq.w	800d010 <dwt_ioctl+0x1fe4>
 800ca26:	7822      	ldrb	r2, [r4, #0]
 800ca28:	f012 0f01 	tst.w	r2, #1
 800ca2c:	d02d      	beq.n	800ca8a <dwt_ioctl+0x1a5e>
 800ca2e:	0157      	lsls	r7, r2, #5
 800ca30:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800ca34:	2440      	movs	r4, #64	; 0x40
 800ca36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800ca3a:	f012 0f04 	tst.w	r2, #4
 800ca3e:	d028      	beq.n	800ca92 <dwt_ioctl+0x1a66>
 800ca40:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800ca44:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800ca48:	0112      	lsls	r2, r2, #4
 800ca4a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800ca4e:	4317      	orrs	r7, r2
 800ca50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ca54:	9200      	str	r2, [sp, #0]
 800ca56:	43db      	mvns	r3, r3
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7fd facc 	bl	8009ffc <dwt_modify32bitoffsetreg>
 800ca64:	43e4      	mvns	r4, r4
 800ca66:	b2a4      	uxth	r4, r4
 800ca68:	2500      	movs	r5, #0
 800ca6a:	9500      	str	r5, [sp, #0]
 800ca6c:	4623      	mov	r3, r4
 800ca6e:	462a      	mov	r2, r5
 800ca70:	499b      	ldr	r1, [pc, #620]	; (800cce0 <dwt_ioctl+0x1cb4>)
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7fd fe50 	bl	800a718 <dwt_modify16bitoffsetreg>
 800ca78:	9700      	str	r7, [sp, #0]
 800ca7a:	4623      	mov	r3, r4
 800ca7c:	462a      	mov	r2, r5
 800ca7e:	4999      	ldr	r1, [pc, #612]	; (800cce4 <dwt_ioctl+0x1cb8>)
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7fd fe49 	bl	800a718 <dwt_modify16bitoffsetreg>
 800ca86:	f7fe bb7b 	b.w	800b180 <dwt_ioctl+0x154>
 800ca8a:	2700      	movs	r7, #0
 800ca8c:	463c      	mov	r4, r7
 800ca8e:	463b      	mov	r3, r7
 800ca90:	e7d3      	b.n	800ca3a <dwt_ioctl+0x1a0e>
 800ca92:	2200      	movs	r2, #0
 800ca94:	e7de      	b.n	800ca54 <dwt_ioctl+0x1a28>
 800ca96:	2308      	movs	r3, #8
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	23ff      	movs	r3, #255	; 0xff
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800caa2:	f7fd fc1d 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800caa6:	4c90      	ldr	r4, [pc, #576]	; (800cce8 <dwt_ioctl+0x1cbc>)
 800caa8:	2302      	movs	r3, #2
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	23ff      	movs	r3, #255	; 0xff
 800caae:	2203      	movs	r2, #3
 800cab0:	4621      	mov	r1, r4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7fd fc14 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800cab8:	2500      	movs	r5, #0
 800caba:	9500      	str	r5, [sp, #0]
 800cabc:	23f7      	movs	r3, #247	; 0xf7
 800cabe:	2201      	movs	r2, #1
 800cac0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7fd fc0b 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800caca:	9500      	str	r5, [sp, #0]
 800cacc:	23fd      	movs	r3, #253	; 0xfd
 800cace:	2203      	movs	r2, #3
 800cad0:	4621      	mov	r1, r4
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7fd fc04 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800cad8:	f7fe bb52 	b.w	800b180 <dwt_ioctl+0x154>
 800cadc:	2c00      	cmp	r4, #0
 800cade:	f000 829a 	beq.w	800d016 <dwt_ioctl+0x1fea>
 800cae2:	8863      	ldrh	r3, [r4, #2]
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800caea:	7822      	ldrb	r2, [r4, #0]
 800caec:	b10a      	cbz	r2, 800caf2 <dwt_ioctl+0x1ac6>
 800caee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	f24f 0307 	movw	r3, #61447	; 0xf007
 800caf8:	2200      	movs	r2, #0
 800cafa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7fd fe0a 	bl	800a718 <dwt_modify16bitoffsetreg>
 800cb04:	2500      	movs	r5, #0
 800cb06:	f7fe bb3b 	b.w	800b180 <dwt_ioctl+0x154>
 800cb0a:	2c00      	cmp	r4, #0
 800cb0c:	f000 8286 	beq.w	800d01c <dwt_ioctl+0x1ff0>
 800cb10:	b2e3      	uxtb	r3, r4
 800cb12:	1c9a      	adds	r2, r3, #2
 800cb14:	2301      	movs	r3, #1
 800cb16:	4093      	lsls	r3, r2
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800cb22:	f7fc ffa7 	bl	8009a74 <dwt_write8bitoffsetreg>
 800cb26:	2500      	movs	r5, #0
 800cb28:	f7fe bb2a 	b.w	800b180 <dwt_ioctl+0x154>
 800cb2c:	2c00      	cmp	r4, #0
 800cb2e:	f000 8278 	beq.w	800d022 <dwt_ioctl+0x1ff6>
 800cb32:	7ae3      	ldrb	r3, [r4, #11]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 8277 	beq.w	800d028 <dwt_ioctl+0x1ffc>
 800cb3a:	7b63      	ldrb	r3, [r4, #13]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d921      	bls.n	800cb84 <dwt_ioctl+0x1b58>
 800cb40:	7b22      	ldrb	r2, [r4, #12]
 800cb42:	4b6a      	ldr	r3, [pc, #424]	; (800ccec <dwt_ioctl+0x1cc0>)
 800cb44:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800cb48:	0112      	lsls	r2, r2, #4
 800cb4a:	0ad3      	lsrs	r3, r2, #11
 800cb4c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cb50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb54:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800cb58:	bf28      	it	cs
 800cb5a:	3301      	addcs	r3, #1
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	f64f 7380 	movw	r3, #65408	; 0xff80
 800cb68:	2202      	movs	r2, #2
 800cb6a:	4961      	ldr	r1, [pc, #388]	; (800ccf0 <dwt_ioctl+0x1cc4>)
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7fd fdd3 	bl	800a718 <dwt_modify16bitoffsetreg>
 800cb72:	2394      	movs	r3, #148	; 0x94
 800cb74:	2200      	movs	r2, #0
 800cb76:	495f      	ldr	r1, [pc, #380]	; (800ccf4 <dwt_ioctl+0x1cc8>)
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7fc ff7b 	bl	8009a74 <dwt_write8bitoffsetreg>
 800cb7e:	2500      	movs	r5, #0
 800cb80:	f7fe bafe 	b.w	800b180 <dwt_ioctl+0x154>
 800cb84:	7b22      	ldrb	r2, [r4, #12]
 800cb86:	4b59      	ldr	r3, [pc, #356]	; (800ccec <dwt_ioctl+0x1cc0>)
 800cb88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800cb8c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800cb90:	fb02 f203 	mul.w	r2, r2, r3
 800cb94:	0c93      	lsrs	r3, r2, #18
 800cb96:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800cb9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb9e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800cba2:	bf28      	it	cs
 800cba4:	3301      	addcs	r3, #1
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	e7d9      	b.n	800cb5e <dwt_ioctl+0x1b32>
 800cbaa:	2c00      	cmp	r4, #0
 800cbac:	f000 823f 	beq.w	800d02e <dwt_ioctl+0x2002>
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4951      	ldr	r1, [pc, #324]	; (800ccf8 <dwt_ioctl+0x1ccc>)
 800cbb4:	f7fc f95b 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cbb8:	6020      	str	r0, [r4, #0]
 800cbba:	2500      	movs	r5, #0
 800cbbc:	f7fe bae0 	b.w	800b180 <dwt_ioctl+0x154>
 800cbc0:	2c00      	cmp	r4, #0
 800cbc2:	f000 8237 	beq.w	800d034 <dwt_ioctl+0x2008>
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	494c      	ldr	r1, [pc, #304]	; (800ccfc <dwt_ioctl+0x1cd0>)
 800cbca:	f7fc f950 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cbce:	6020      	str	r0, [r4, #0]
 800cbd0:	2500      	movs	r5, #0
 800cbd2:	f7fe bad5 	b.w	800b180 <dwt_ioctl+0x154>
 800cbd6:	2c00      	cmp	r4, #0
 800cbd8:	f000 822f 	beq.w	800d03a <dwt_ioctl+0x200e>
 800cbdc:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	f7fe bacc 	b.w	800b180 <dwt_ioctl+0x154>
 800cbe8:	2c00      	cmp	r4, #0
 800cbea:	f000 8229 	beq.w	800d040 <dwt_ioctl+0x2014>
 800cbee:	2500      	movs	r5, #0
 800cbf0:	950b      	str	r5, [sp, #44]	; 0x2c
 800cbf2:	af10      	add	r7, sp, #64	; 0x40
 800cbf4:	2319      	movs	r3, #25
 800cbf6:	f847 3d10 	str.w	r3, [r7, #-16]!
 800cbfa:	9700      	str	r7, [sp, #0]
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	462a      	mov	r2, r5
 800cc00:	493f      	ldr	r1, [pc, #252]	; (800cd00 <dwt_ioctl+0x1cd4>)
 800cc02:	f7fc fd41 	bl	8009688 <dwt_writetodevice>
 800cc06:	f641 7348 	movw	r3, #8008	; 0x1f48
 800cc0a:	930c      	str	r3, [sp, #48]	; 0x30
 800cc0c:	9700      	str	r7, [sp, #0]
 800cc0e:	2304      	movs	r3, #4
 800cc10:	462a      	mov	r2, r5
 800cc12:	493c      	ldr	r1, [pc, #240]	; (800cd04 <dwt_ioctl+0x1cd8>)
 800cc14:	4630      	mov	r0, r6
 800cc16:	f7fc fd37 	bl	8009688 <dwt_writetodevice>
 800cc1a:	ab0b      	add	r3, sp, #44	; 0x2c
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	2304      	movs	r3, #4
 800cc20:	462a      	mov	r2, r5
 800cc22:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7fc f917 	bl	8008e5a <dwt_readfromdevice>
 800cc2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc2e:	6023      	str	r3, [r4, #0]
 800cc30:	f7fe baa6 	b.w	800b180 <dwt_ioctl+0x154>
 800cc34:	2c00      	cmp	r4, #0
 800cc36:	f000 8206 	beq.w	800d046 <dwt_ioctl+0x201a>
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	4932      	ldr	r1, [pc, #200]	; (800cd08 <dwt_ioctl+0x1cdc>)
 800cc3e:	f7fc f916 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cc42:	b280      	uxth	r0, r0
 800cc44:	6020      	str	r0, [r4, #0]
 800cc46:	2200      	movs	r2, #0
 800cc48:	4930      	ldr	r1, [pc, #192]	; (800cd0c <dwt_ioctl+0x1ce0>)
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7fc f90f 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cc50:	0d43      	lsrs	r3, r0, #21
 800cc52:	019b      	lsls	r3, r3, #6
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	6063      	str	r3, [r4, #4]
 800cc58:	2500      	movs	r5, #0
 800cc5a:	f7fe ba91 	b.w	800b180 <dwt_ioctl+0x154>
 800cc5e:	2c00      	cmp	r4, #0
 800cc60:	f000 81f4 	beq.w	800d04c <dwt_ioctl+0x2020>
 800cc64:	7d63      	ldrb	r3, [r4, #21]
 800cc66:	b133      	cbz	r3, 800cc76 <dwt_ioctl+0x1c4a>
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d05b      	beq.n	800cd24 <dwt_ioctl+0x1cf8>
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	f000 8082 	beq.w	800cd76 <dwt_ioctl+0x1d4a>
 800cc72:	23ff      	movs	r3, #255	; 0xff
 800cc74:	e02f      	b.n	800ccd6 <dwt_ioctl+0x1caa>
 800cc76:	2200      	movs	r2, #0
 800cc78:	4925      	ldr	r1, [pc, #148]	; (800cd10 <dwt_ioctl+0x1ce4>)
 800cc7a:	f7fc f8f8 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cc7e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cc82:	6020      	str	r0, [r4, #0]
 800cc84:	2200      	movs	r2, #0
 800cc86:	4923      	ldr	r1, [pc, #140]	; (800cd14 <dwt_ioctl+0x1ce8>)
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7fc f8f0 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cc8e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cc92:	6060      	str	r0, [r4, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	4920      	ldr	r1, [pc, #128]	; (800cd18 <dwt_ioctl+0x1cec>)
 800cc98:	4630      	mov	r0, r6
 800cc9a:	f7fc f8e8 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cc9e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cca2:	60a0      	str	r0, [r4, #8]
 800cca4:	2200      	movs	r2, #0
 800cca6:	491d      	ldr	r1, [pc, #116]	; (800cd1c <dwt_ioctl+0x1cf0>)
 800cca8:	4630      	mov	r0, r6
 800ccaa:	f7fc f8e0 	bl	8008e6e <dwt_read32bitoffsetreg>
 800ccae:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ccb2:	60e0      	str	r0, [r4, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	491a      	ldr	r1, [pc, #104]	; (800cd20 <dwt_ioctl+0x1cf4>)
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f7fc f8d8 	bl	8008e6e <dwt_read32bitoffsetreg>
 800ccbe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800ccc2:	6120      	str	r0, [r4, #16]
 800ccc4:	2203      	movs	r2, #3
 800ccc6:	490c      	ldr	r1, [pc, #48]	; (800ccf8 <dwt_ioctl+0x1ccc>)
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f7fc f8f8 	bl	8008ebe <dwt_read8bitoffsetreg>
 800ccce:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800ccd2:	7520      	strb	r0, [r4, #20]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	75a3      	strb	r3, [r4, #22]
 800ccd8:	2500      	movs	r5, #0
 800ccda:	f7fe ba51 	b.w	800b180 <dwt_ioctl+0x154>
 800ccde:	bf00      	nop
 800cce0:	00050008 	.word	0x00050008
 800cce4:	0005000c 	.word	0x0005000c
 800cce8:	00110008 	.word	0x00110008
 800ccec:	080123f4 	.word	0x080123f4
 800ccf0:	000e0014 	.word	0x000e0014
 800ccf4:	000e0018 	.word	0x000e0018
 800ccf8:	00030060 	.word	0x00030060
 800ccfc:	000f004c 	.word	0x000f004c
 800cd00:	001f0004 	.word	0x001f0004
 800cd04:	001f0008 	.word	0x001f0008
 800cd08:	000c0048 	.word	0x000c0048
 800cd0c:	000c0028 	.word	0x000c0028
 800cd10:	000c0058 	.word	0x000c0058
 800cd14:	000c0030 	.word	0x000c0030
 800cd18:	000c0034 	.word	0x000c0034
 800cd1c:	000c0038 	.word	0x000c0038
 800cd20:	000c002c 	.word	0x000c002c
 800cd24:	2200      	movs	r2, #0
 800cd26:	49d4      	ldr	r1, [pc, #848]	; (800d078 <dwt_ioctl+0x204c>)
 800cd28:	f7fc f8a1 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd2c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cd30:	6020      	str	r0, [r4, #0]
 800cd32:	2200      	movs	r2, #0
 800cd34:	49d1      	ldr	r1, [pc, #836]	; (800d07c <dwt_ioctl+0x2050>)
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7fc f899 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd3c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cd40:	6060      	str	r0, [r4, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	49ce      	ldr	r1, [pc, #824]	; (800d080 <dwt_ioctl+0x2054>)
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7fc f891 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd4c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cd50:	60a0      	str	r0, [r4, #8]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f7fc f888 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd5e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cd62:	60e0      	str	r0, [r4, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	49c7      	ldr	r1, [pc, #796]	; (800d084 <dwt_ioctl+0x2058>)
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7fc f880 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd6e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800cd72:	6120      	str	r0, [r4, #16]
 800cd74:	e7a6      	b.n	800ccc4 <dwt_ioctl+0x1c98>
 800cd76:	2200      	movs	r2, #0
 800cd78:	49c3      	ldr	r1, [pc, #780]	; (800d088 <dwt_ioctl+0x205c>)
 800cd7a:	f7fc f878 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd7e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cd82:	6020      	str	r0, [r4, #0]
 800cd84:	2200      	movs	r2, #0
 800cd86:	49c1      	ldr	r1, [pc, #772]	; (800d08c <dwt_ioctl+0x2060>)
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f7fc f870 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd8e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cd92:	6060      	str	r0, [r4, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	49be      	ldr	r1, [pc, #760]	; (800d090 <dwt_ioctl+0x2064>)
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7fc f868 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cd9e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cda2:	60a0      	str	r0, [r4, #8]
 800cda4:	2200      	movs	r2, #0
 800cda6:	49bb      	ldr	r1, [pc, #748]	; (800d094 <dwt_ioctl+0x2068>)
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f7fc f860 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cdae:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800cdb2:	60e0      	str	r0, [r4, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	49b8      	ldr	r1, [pc, #736]	; (800d098 <dwt_ioctl+0x206c>)
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7fc f858 	bl	8008e6e <dwt_read32bitoffsetreg>
 800cdbe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800cdc2:	6120      	str	r0, [r4, #16]
 800cdc4:	e77e      	b.n	800ccc4 <dwt_ioctl+0x1c98>
 800cdc6:	2500      	movs	r5, #0
 800cdc8:	f7fe b9da 	b.w	800b180 <dwt_ioctl+0x154>
 800cdcc:	2500      	movs	r5, #0
 800cdce:	f7fe b9d7 	b.w	800b180 <dwt_ioctl+0x154>
 800cdd2:	2500      	movs	r5, #0
 800cdd4:	f7fe b9d4 	b.w	800b180 <dwt_ioctl+0x154>
 800cdd8:	2500      	movs	r5, #0
 800cdda:	f7fe b9d1 	b.w	800b180 <dwt_ioctl+0x154>
 800cdde:	2500      	movs	r5, #0
 800cde0:	f7fe b9ce 	b.w	800b180 <dwt_ioctl+0x154>
 800cde4:	2500      	movs	r5, #0
 800cde6:	f7fe b9cb 	b.w	800b180 <dwt_ioctl+0x154>
 800cdea:	2500      	movs	r5, #0
 800cdec:	f7fe b9c8 	b.w	800b180 <dwt_ioctl+0x154>
 800cdf0:	2500      	movs	r5, #0
 800cdf2:	f7fe b9c5 	b.w	800b180 <dwt_ioctl+0x154>
 800cdf6:	2500      	movs	r5, #0
 800cdf8:	f7fe b9c2 	b.w	800b180 <dwt_ioctl+0x154>
 800cdfc:	2500      	movs	r5, #0
 800cdfe:	f7fe b9bf 	b.w	800b180 <dwt_ioctl+0x154>
 800ce02:	2500      	movs	r5, #0
 800ce04:	f7fe b9bc 	b.w	800b180 <dwt_ioctl+0x154>
 800ce08:	2500      	movs	r5, #0
 800ce0a:	f7fe b9b9 	b.w	800b180 <dwt_ioctl+0x154>
 800ce0e:	2500      	movs	r5, #0
 800ce10:	f7fe b9b6 	b.w	800b180 <dwt_ioctl+0x154>
 800ce14:	2500      	movs	r5, #0
 800ce16:	f7fe b9b3 	b.w	800b180 <dwt_ioctl+0x154>
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	f7fe b9b0 	b.w	800b180 <dwt_ioctl+0x154>
 800ce20:	2500      	movs	r5, #0
 800ce22:	f7fe b9ad 	b.w	800b180 <dwt_ioctl+0x154>
 800ce26:	2500      	movs	r5, #0
 800ce28:	f7fe b9aa 	b.w	800b180 <dwt_ioctl+0x154>
 800ce2c:	2500      	movs	r5, #0
 800ce2e:	f7fe b9a7 	b.w	800b180 <dwt_ioctl+0x154>
 800ce32:	2500      	movs	r5, #0
 800ce34:	f7fe b9a4 	b.w	800b180 <dwt_ioctl+0x154>
 800ce38:	2500      	movs	r5, #0
 800ce3a:	f7fe b9a1 	b.w	800b180 <dwt_ioctl+0x154>
 800ce3e:	2500      	movs	r5, #0
 800ce40:	f7fe b99e 	b.w	800b180 <dwt_ioctl+0x154>
 800ce44:	2500      	movs	r5, #0
 800ce46:	f7fe b99b 	b.w	800b180 <dwt_ioctl+0x154>
 800ce4a:	2500      	movs	r5, #0
 800ce4c:	f7fe b998 	b.w	800b180 <dwt_ioctl+0x154>
 800ce50:	2500      	movs	r5, #0
 800ce52:	f7fe b995 	b.w	800b180 <dwt_ioctl+0x154>
 800ce56:	2500      	movs	r5, #0
 800ce58:	f7fe b992 	b.w	800b180 <dwt_ioctl+0x154>
 800ce5c:	2500      	movs	r5, #0
 800ce5e:	f7fe b98f 	b.w	800b180 <dwt_ioctl+0x154>
 800ce62:	2500      	movs	r5, #0
 800ce64:	f7fe b98c 	b.w	800b180 <dwt_ioctl+0x154>
 800ce68:	2500      	movs	r5, #0
 800ce6a:	f7fe b989 	b.w	800b180 <dwt_ioctl+0x154>
 800ce6e:	2500      	movs	r5, #0
 800ce70:	f7fe b986 	b.w	800b180 <dwt_ioctl+0x154>
 800ce74:	2500      	movs	r5, #0
 800ce76:	f7fe b983 	b.w	800b180 <dwt_ioctl+0x154>
 800ce7a:	2500      	movs	r5, #0
 800ce7c:	f7fe b980 	b.w	800b180 <dwt_ioctl+0x154>
 800ce80:	2500      	movs	r5, #0
 800ce82:	f7fe b97d 	b.w	800b180 <dwt_ioctl+0x154>
 800ce86:	2500      	movs	r5, #0
 800ce88:	f7fe b97a 	b.w	800b180 <dwt_ioctl+0x154>
 800ce8c:	2500      	movs	r5, #0
 800ce8e:	f7fe b977 	b.w	800b180 <dwt_ioctl+0x154>
 800ce92:	2500      	movs	r5, #0
 800ce94:	f7fe b974 	b.w	800b180 <dwt_ioctl+0x154>
 800ce98:	2500      	movs	r5, #0
 800ce9a:	f7fe b971 	b.w	800b180 <dwt_ioctl+0x154>
 800ce9e:	2500      	movs	r5, #0
 800cea0:	f7fe b96e 	b.w	800b180 <dwt_ioctl+0x154>
 800cea4:	2500      	movs	r5, #0
 800cea6:	f7fe b96b 	b.w	800b180 <dwt_ioctl+0x154>
 800ceaa:	2500      	movs	r5, #0
 800ceac:	f7fe b968 	b.w	800b180 <dwt_ioctl+0x154>
 800ceb0:	2500      	movs	r5, #0
 800ceb2:	f7fe b965 	b.w	800b180 <dwt_ioctl+0x154>
 800ceb6:	2500      	movs	r5, #0
 800ceb8:	f7fe b962 	b.w	800b180 <dwt_ioctl+0x154>
 800cebc:	2500      	movs	r5, #0
 800cebe:	f7fe b95f 	b.w	800b180 <dwt_ioctl+0x154>
 800cec2:	2500      	movs	r5, #0
 800cec4:	f7fe b95c 	b.w	800b180 <dwt_ioctl+0x154>
 800cec8:	2500      	movs	r5, #0
 800ceca:	f7fe b959 	b.w	800b180 <dwt_ioctl+0x154>
 800cece:	2500      	movs	r5, #0
 800ced0:	f7fe b956 	b.w	800b180 <dwt_ioctl+0x154>
 800ced4:	2500      	movs	r5, #0
 800ced6:	f7fe b953 	b.w	800b180 <dwt_ioctl+0x154>
 800ceda:	2500      	movs	r5, #0
 800cedc:	f7fe b950 	b.w	800b180 <dwt_ioctl+0x154>
 800cee0:	2500      	movs	r5, #0
 800cee2:	f7fe b94d 	b.w	800b180 <dwt_ioctl+0x154>
 800cee6:	2500      	movs	r5, #0
 800cee8:	f7fe b94a 	b.w	800b180 <dwt_ioctl+0x154>
 800ceec:	2500      	movs	r5, #0
 800ceee:	f7fe b947 	b.w	800b180 <dwt_ioctl+0x154>
 800cef2:	2500      	movs	r5, #0
 800cef4:	f7fe b944 	b.w	800b180 <dwt_ioctl+0x154>
 800cef8:	2500      	movs	r5, #0
 800cefa:	f7fe b941 	b.w	800b180 <dwt_ioctl+0x154>
 800cefe:	2500      	movs	r5, #0
 800cf00:	f7fe b93e 	b.w	800b180 <dwt_ioctl+0x154>
 800cf04:	2500      	movs	r5, #0
 800cf06:	f7fe b93b 	b.w	800b180 <dwt_ioctl+0x154>
 800cf0a:	2500      	movs	r5, #0
 800cf0c:	f7fe b938 	b.w	800b180 <dwt_ioctl+0x154>
 800cf10:	2500      	movs	r5, #0
 800cf12:	f7fe b935 	b.w	800b180 <dwt_ioctl+0x154>
 800cf16:	2500      	movs	r5, #0
 800cf18:	f7fe b932 	b.w	800b180 <dwt_ioctl+0x154>
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	f7fe b92f 	b.w	800b180 <dwt_ioctl+0x154>
 800cf22:	2500      	movs	r5, #0
 800cf24:	f7fe b92c 	b.w	800b180 <dwt_ioctl+0x154>
 800cf28:	2500      	movs	r5, #0
 800cf2a:	f7fe b929 	b.w	800b180 <dwt_ioctl+0x154>
 800cf2e:	2500      	movs	r5, #0
 800cf30:	f7fe b926 	b.w	800b180 <dwt_ioctl+0x154>
 800cf34:	2500      	movs	r5, #0
 800cf36:	f7fe b923 	b.w	800b180 <dwt_ioctl+0x154>
 800cf3a:	2500      	movs	r5, #0
 800cf3c:	f7fe b920 	b.w	800b180 <dwt_ioctl+0x154>
 800cf40:	2500      	movs	r5, #0
 800cf42:	f7fe b91d 	b.w	800b180 <dwt_ioctl+0x154>
 800cf46:	2500      	movs	r5, #0
 800cf48:	f7fe b91a 	b.w	800b180 <dwt_ioctl+0x154>
 800cf4c:	2500      	movs	r5, #0
 800cf4e:	f7fe b917 	b.w	800b180 <dwt_ioctl+0x154>
 800cf52:	2500      	movs	r5, #0
 800cf54:	f7fe b914 	b.w	800b180 <dwt_ioctl+0x154>
 800cf58:	2500      	movs	r5, #0
 800cf5a:	f7fe b911 	b.w	800b180 <dwt_ioctl+0x154>
 800cf5e:	2500      	movs	r5, #0
 800cf60:	f7fe b90e 	b.w	800b180 <dwt_ioctl+0x154>
 800cf64:	2500      	movs	r5, #0
 800cf66:	f7fe b90b 	b.w	800b180 <dwt_ioctl+0x154>
 800cf6a:	2500      	movs	r5, #0
 800cf6c:	f7fe b908 	b.w	800b180 <dwt_ioctl+0x154>
 800cf70:	2500      	movs	r5, #0
 800cf72:	f7fe b905 	b.w	800b180 <dwt_ioctl+0x154>
 800cf76:	2500      	movs	r5, #0
 800cf78:	f7fe b902 	b.w	800b180 <dwt_ioctl+0x154>
 800cf7c:	2500      	movs	r5, #0
 800cf7e:	f7fe b8ff 	b.w	800b180 <dwt_ioctl+0x154>
 800cf82:	2500      	movs	r5, #0
 800cf84:	f7fe b8fc 	b.w	800b180 <dwt_ioctl+0x154>
 800cf88:	2500      	movs	r5, #0
 800cf8a:	f7fe b8f9 	b.w	800b180 <dwt_ioctl+0x154>
 800cf8e:	2500      	movs	r5, #0
 800cf90:	f7fe b8f6 	b.w	800b180 <dwt_ioctl+0x154>
 800cf94:	2500      	movs	r5, #0
 800cf96:	f7fe b8f3 	b.w	800b180 <dwt_ioctl+0x154>
 800cf9a:	2500      	movs	r5, #0
 800cf9c:	f7fe b8f0 	b.w	800b180 <dwt_ioctl+0x154>
 800cfa0:	2500      	movs	r5, #0
 800cfa2:	f7fe b8ed 	b.w	800b180 <dwt_ioctl+0x154>
 800cfa6:	2500      	movs	r5, #0
 800cfa8:	f7fe b8ea 	b.w	800b180 <dwt_ioctl+0x154>
 800cfac:	2500      	movs	r5, #0
 800cfae:	f7fe b8e7 	b.w	800b180 <dwt_ioctl+0x154>
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	f7fe b8e4 	b.w	800b180 <dwt_ioctl+0x154>
 800cfb8:	2500      	movs	r5, #0
 800cfba:	f7fe b8e1 	b.w	800b180 <dwt_ioctl+0x154>
 800cfbe:	2500      	movs	r5, #0
 800cfc0:	f7fe b8de 	b.w	800b180 <dwt_ioctl+0x154>
 800cfc4:	2500      	movs	r5, #0
 800cfc6:	f7fe b8db 	b.w	800b180 <dwt_ioctl+0x154>
 800cfca:	2500      	movs	r5, #0
 800cfcc:	f7fe b8d8 	b.w	800b180 <dwt_ioctl+0x154>
 800cfd0:	2500      	movs	r5, #0
 800cfd2:	f7fe b8d5 	b.w	800b180 <dwt_ioctl+0x154>
 800cfd6:	2500      	movs	r5, #0
 800cfd8:	f7fe b8d2 	b.w	800b180 <dwt_ioctl+0x154>
 800cfdc:	2500      	movs	r5, #0
 800cfde:	f7fe b8cf 	b.w	800b180 <dwt_ioctl+0x154>
 800cfe2:	2500      	movs	r5, #0
 800cfe4:	f7fe b8cc 	b.w	800b180 <dwt_ioctl+0x154>
 800cfe8:	2500      	movs	r5, #0
 800cfea:	f7fe b8c9 	b.w	800b180 <dwt_ioctl+0x154>
 800cfee:	2500      	movs	r5, #0
 800cff0:	f7fe b8c6 	b.w	800b180 <dwt_ioctl+0x154>
 800cff4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cff8:	f7fe b8c2 	b.w	800b180 <dwt_ioctl+0x154>
 800cffc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d000:	f7fe b8be 	b.w	800b180 <dwt_ioctl+0x154>
 800d004:	2500      	movs	r5, #0
 800d006:	f7fe b8bb 	b.w	800b180 <dwt_ioctl+0x154>
 800d00a:	2500      	movs	r5, #0
 800d00c:	f7fe b8b8 	b.w	800b180 <dwt_ioctl+0x154>
 800d010:	2500      	movs	r5, #0
 800d012:	f7fe b8b5 	b.w	800b180 <dwt_ioctl+0x154>
 800d016:	2500      	movs	r5, #0
 800d018:	f7fe b8b2 	b.w	800b180 <dwt_ioctl+0x154>
 800d01c:	2500      	movs	r5, #0
 800d01e:	f7fe b8af 	b.w	800b180 <dwt_ioctl+0x154>
 800d022:	2500      	movs	r5, #0
 800d024:	f7fe b8ac 	b.w	800b180 <dwt_ioctl+0x154>
 800d028:	2500      	movs	r5, #0
 800d02a:	f7fe b8a9 	b.w	800b180 <dwt_ioctl+0x154>
 800d02e:	2500      	movs	r5, #0
 800d030:	f7fe b8a6 	b.w	800b180 <dwt_ioctl+0x154>
 800d034:	2500      	movs	r5, #0
 800d036:	f7fe b8a3 	b.w	800b180 <dwt_ioctl+0x154>
 800d03a:	2500      	movs	r5, #0
 800d03c:	f7fe b8a0 	b.w	800b180 <dwt_ioctl+0x154>
 800d040:	2500      	movs	r5, #0
 800d042:	f7fe b89d 	b.w	800b180 <dwt_ioctl+0x154>
 800d046:	2500      	movs	r5, #0
 800d048:	f7fe b89a 	b.w	800b180 <dwt_ioctl+0x154>
 800d04c:	2500      	movs	r5, #0
 800d04e:	f7fe b897 	b.w	800b180 <dwt_ioctl+0x154>
 800d052:	f899 3011 	ldrb.w	r3, [r9, #17]
 800d056:	1e5a      	subs	r2, r3, #1
 800d058:	b2d2      	uxtb	r2, r2
 800d05a:	2a01      	cmp	r2, #1
 800d05c:	f67e aeec 	bls.w	800be38 <dwt_ioctl+0xe0c>
 800d060:	2202      	movs	r2, #2
 800d062:	f7fe be93 	b.w	800bd8c <dwt_ioctl+0xd60>
 800d066:	2f00      	cmp	r7, #0
 800d068:	f43f ab68 	beq.w	800c73c <dwt_ioctl+0x1710>
 800d06c:	f819 1000 	ldrb.w	r1, [r9, r0]
 800d070:	1a5b      	subs	r3, r3, r1
 800d072:	b29b      	uxth	r3, r3
 800d074:	f7ff bb88 	b.w	800c788 <dwt_ioctl+0x175c>
 800d078:	000d0020 	.word	0x000d0020
 800d07c:	000c0064 	.word	0x000c0064
 800d080:	000c0068 	.word	0x000c0068
 800d084:	000c0060 	.word	0x000c0060
 800d088:	000d0068 	.word	0x000d0068
 800d08c:	000d0040 	.word	0x000d0040
 800d090:	000d0044 	.word	0x000d0044
 800d094:	000d0048 	.word	0x000d0048
 800d098:	000d003c 	.word	0x000d003c
 800d09c:	283f      	cmp	r0, #63	; 0x3f
 800d09e:	d027      	beq.n	800d0f0 <dwt_ioctl+0x20c4>
 800d0a0:	2e00      	cmp	r6, #0
 800d0a2:	f47f ab51 	bne.w	800c748 <dwt_ioctl+0x171c>
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d0ac:	f819 1000 	ldrb.w	r1, [r9, r0]
 800d0b0:	440b      	add	r3, r1
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	459c      	cmp	ip, r3
 800d0b6:	f43f ab65 	beq.w	800c784 <dwt_ioctl+0x1758>
 800d0ba:	3d01      	subs	r5, #1
 800d0bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800d0c0:	f43f ab23 	beq.w	800c70a <dwt_ioctl+0x16de>
 800d0c4:	459e      	cmp	lr, r3
 800d0c6:	f4bf ab33 	bcs.w	800c730 <dwt_ioctl+0x1704>
 800d0ca:	4598      	cmp	r8, r3
 800d0cc:	d9cb      	bls.n	800d066 <dwt_ioctl+0x203a>
 800d0ce:	ebac 0103 	sub.w	r1, ip, r3
 800d0d2:	b209      	sxth	r1, r1
 800d0d4:	2900      	cmp	r1, #0
 800d0d6:	bfb8      	it	lt
 800d0d8:	4249      	neglt	r1, r1
 800d0da:	4559      	cmp	r1, fp
 800d0dc:	f77f ab20 	ble.w	800c720 <dwt_ioctl+0x16f4>
 800d0e0:	2f00      	cmp	r7, #0
 800d0e2:	f47f ab64 	bne.w	800c7ae <dwt_ioctl+0x1782>
 800d0e6:	283f      	cmp	r0, #63	; 0x3f
 800d0e8:	d1da      	bne.n	800d0a0 <dwt_ioctl+0x2074>
 800d0ea:	2f00      	cmp	r7, #0
 800d0ec:	f47f ab64 	bne.w	800c7b8 <dwt_ioctl+0x178c>
 800d0f0:	2a03      	cmp	r2, #3
 800d0f2:	f43f ab64 	beq.w	800c7be <dwt_ioctl+0x1792>
 800d0f6:	2a02      	cmp	r2, #2
 800d0f8:	f43f ab33 	beq.w	800c762 <dwt_ioctl+0x1736>
 800d0fc:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800d100:	185e      	adds	r6, r3, r1
 800d102:	4566      	cmp	r6, ip
 800d104:	f77f ab34 	ble.w	800c770 <dwt_ioctl+0x1744>
 800d108:	440b      	add	r3, r1
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	3201      	adds	r2, #1
 800d10e:	b2d2      	uxtb	r2, r2
 800d110:	2700      	movs	r7, #0
 800d112:	f7ff bb19 	b.w	800c748 <dwt_ioctl+0x171c>
 800d116:	bf00      	nop

0800d118 <_init>:
 800d118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d11a:	b085      	sub	sp, #20
 800d11c:	4604      	mov	r4, r0
 800d11e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d120:	6819      	ldr	r1, [r3, #0]
 800d122:	f7fd fe57 	bl	800add4 <ull_initialise>
 800d126:	4606      	mov	r6, r0
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	4798      	blx	r3
 800d12e:	ab03      	add	r3, sp, #12
 800d130:	2200      	movs	r2, #0
 800d132:	4611      	mov	r1, r2
 800d134:	4620      	mov	r0, r4
 800d136:	f7fd ff79 	bl	800b02c <dwt_ioctl>
 800d13a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13e:	6819      	ldr	r1, [r3, #0]
 800d140:	4620      	mov	r0, r4
 800d142:	f7fd fc07 	bl	800a954 <ull_configure>
 800d146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d14a:	6859      	ldr	r1, [r3, #4]
 800d14c:	4620      	mov	r0, r4
 800d14e:	f7fd f953 	bl	800a3f8 <ull_configuretxrf>
 800d152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d156:	89db      	ldrh	r3, [r3, #14]
 800d158:	2200      	movs	r2, #0
 800d15a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800d15e:	4620      	mov	r0, r4
 800d160:	f7fc fa9d 	bl	800969e <dwt_write16bitoffsetreg>
 800d164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d168:	899b      	ldrh	r3, [r3, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	217c      	movs	r1, #124	; 0x7c
 800d16e:	4620      	mov	r0, r4
 800d170:	f7fc fa95 	bl	800969e <dwt_write16bitoffsetreg>
 800d174:	2100      	movs	r1, #0
 800d176:	4620      	mov	r0, r4
 800d178:	f7fc fb29 	bl	80097ce <ull_setrxaftertxdelay>
 800d17c:	2500      	movs	r5, #0
 800d17e:	9500      	str	r5, [sp, #0]
 800d180:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800d184:	462a      	mov	r2, r5
 800d186:	2110      	movs	r1, #16
 800d188:	4620      	mov	r0, r4
 800d18a:	f7fd fac5 	bl	800a718 <dwt_modify16bitoffsetreg>
 800d18e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d192:	895a      	ldrh	r2, [r3, #10]
 800d194:	8919      	ldrh	r1, [r3, #8]
 800d196:	4620      	mov	r0, r4
 800d198:	f7fd f9bc 	bl	800a514 <ull_configureframefilter>
 800d19c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a0:	8a1b      	ldrh	r3, [r3, #16]
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	210c      	movs	r1, #12
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f7fc fa79 	bl	800969e <dwt_write16bitoffsetreg>
 800d1ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b0:	8a5b      	ldrh	r3, [r3, #18]
 800d1b2:	462a      	mov	r2, r5
 800d1b4:	210c      	movs	r1, #12
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f7fc fa71 	bl	800969e <dwt_write16bitoffsetreg>
 800d1bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1be:	7a19      	ldrb	r1, [r3, #8]
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f7fd fac3 	bl	800a74c <ull_setleds>
 800d1c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1c8:	68d9      	ldr	r1, [r3, #12]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f7fc fb13 	bl	80097f6 <ull_setlnapamode>
 800d1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1d2:	7e0b      	ldrb	r3, [r1, #24]
 800d1d4:	694a      	ldr	r2, [r1, #20]
 800d1d6:	6909      	ldr	r1, [r1, #16]
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f7fd fa21 	bl	800a620 <ull_setinterrupt>
 800d1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1e0:	7f9a      	ldrb	r2, [r3, #30]
 800d1e2:	8b99      	ldrh	r1, [r3, #28]
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7fc fd19 	bl	8009c1c <ull_configuresleep>
 800d1ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d1ec:	7b53      	ldrb	r3, [r2, #13]
 800d1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d1f0:	d005      	beq.n	800d1fe <_init+0xe6>
 800d1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1f8:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800d1fc:	d00a      	beq.n	800d214 <_init+0xfc>
 800d1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d200:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d208:	7353      	strb	r3, [r2, #13]
 800d20a:	2200      	movs	r2, #0
 800d20c:	492a      	ldr	r1, [pc, #168]	; (800d2b8 <_init+0x1a0>)
 800d20e:	4620      	mov	r0, r4
 800d210:	f7fc fc30 	bl	8009a74 <dwt_write8bitoffsetreg>
 800d214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d216:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800d21a:	4620      	mov	r0, r4
 800d21c:	f7fd f874 	bl	800a308 <ull_configciadiag>
 800d220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d222:	6a19      	ldr	r1, [r3, #32]
 800d224:	4620      	mov	r0, r4
 800d226:	f7fc fb07 	bl	8009838 <ull_configurestskey>
 800d22a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d22c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d22e:	4620      	mov	r0, r4
 800d230:	f7fc fb26 	bl	8009880 <ull_configurestsiv>
 800d234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d236:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d23a:	bb9b      	cbnz	r3, 800d2a4 <_init+0x18c>
 800d23c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d23e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800d242:	4620      	mov	r0, r4
 800d244:	f7fc fc8e 	bl	8009b64 <ull_configeventcounters>
 800d248:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800d24c:	2d00      	cmp	r5, #0
 800d24e:	db26      	blt.n	800d29e <_init+0x186>
 800d250:	2301      	movs	r3, #1
 800d252:	fa03 f505 	lsl.w	r5, r3, r5
 800d256:	b2af      	uxth	r7, r5
 800d258:	4a18      	ldr	r2, [pc, #96]	; (800d2bc <_init+0x1a4>)
 800d25a:	4639      	mov	r1, r7
 800d25c:	4620      	mov	r0, r4
 800d25e:	f7fc ffef 	bl	800a240 <ull_setgpiomode>
 800d262:	f10d 030a 	add.w	r3, sp, #10
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	2302      	movs	r3, #2
 800d26a:	2200      	movs	r2, #0
 800d26c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d270:	4620      	mov	r0, r4
 800d272:	f7fb fdf2 	bl	8008e5a <dwt_readfromdevice>
 800d276:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d27a:	ea23 0305 	bic.w	r3, r3, r5
 800d27e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d282:	2200      	movs	r2, #0
 800d284:	490e      	ldr	r1, [pc, #56]	; (800d2c0 <_init+0x1a8>)
 800d286:	4620      	mov	r0, r4
 800d288:	f7fc fa09 	bl	800969e <dwt_write16bitoffsetreg>
 800d28c:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800d290:	fab2 f282 	clz	r2, r2
 800d294:	0952      	lsrs	r2, r2, #5
 800d296:	4639      	mov	r1, r7
 800d298:	4620      	mov	r0, r4
 800d29a:	f7fd fad5 	bl	800a848 <ull_setgpiovalue>
 800d29e:	4630      	mov	r0, r6
 800d2a0:	b005      	add	sp, #20
 800d2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	23ff      	movs	r3, #255	; 0xff
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4905      	ldr	r1, [pc, #20]	; (800d2c4 <_init+0x1ac>)
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f7fd f816 	bl	800a2e0 <dwt_modify8bitoffsetreg>
 800d2b4:	e7c2      	b.n	800d23c <_init+0x124>
 800d2b6:	bf00      	nop
 800d2b8:	00090014 	.word	0x00090014
 800d2bc:	01200492 	.word	0x01200492
 800d2c0:	00050008 	.word	0x00050008
 800d2c4:	00020004 	.word	0x00020004

0800d2c8 <ull_wakeup_ic>:
 800d2c8:	b508      	push	{r3, lr}
 800d2ca:	6843      	ldr	r3, [r0, #4]
 800d2cc:	4798      	blx	r3
 800d2ce:	bd08      	pop	{r3, pc}

0800d2d0 <get_sts_mnth>:
 800d2d0:	fb01 f100 	mul.w	r1, r1, r0
 800d2d4:	2a03      	cmp	r2, #3
 800d2d6:	d00a      	beq.n	800d2ee <get_sts_mnth+0x1e>
 800d2d8:	0ac8      	lsrs	r0, r1, #11
 800d2da:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800d2de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d2e2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800d2e6:	bf28      	it	cs
 800d2e8:	3001      	addcs	r0, #1
 800d2ea:	b280      	uxth	r0, r0
 800d2ec:	4770      	bx	lr
 800d2ee:	20b5      	movs	r0, #181	; 0xb5
 800d2f0:	fb00 f101 	mul.w	r1, r0, r1
 800d2f4:	09c9      	lsrs	r1, r1, #7
 800d2f6:	e7ef      	b.n	800d2d8 <get_sts_mnth+0x8>

0800d2f8 <dwt_dbg_fn>:
 800d2f8:	2998      	cmp	r1, #152	; 0x98
 800d2fa:	4802      	ldr	r0, [pc, #8]	; (800d304 <dwt_dbg_fn+0xc>)
 800d2fc:	bf18      	it	ne
 800d2fe:	2000      	movne	r0, #0
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	080124fc 	.word	0x080124fc

0800d308 <_deinit>:
 800d308:	4770      	bx	lr

0800d30a <dwt_xfer3xxx>:
 800d30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	4605      	mov	r5, r0
 800d312:	460f      	mov	r7, r1
 800d314:	461e      	mov	r6, r3
 800d316:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d31a:	1e59      	subs	r1, r3, #1
 800d31c:	b289      	uxth	r1, r1
 800d31e:	2901      	cmp	r1, #1
 800d320:	d91c      	bls.n	800d35c <dwt_xfer3xxx+0x52>
 800d322:	19d0      	adds	r0, r2, r7
 800d324:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d328:	443a      	add	r2, r7
 800d32a:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800d32e:	0082      	lsls	r2, r0, #2
 800d330:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800d334:	ea43 0102 	orr.w	r1, r3, r2
 800d338:	0a09      	lsrs	r1, r1, #8
 800d33a:	f88d 100c 	strb.w	r1, [sp, #12]
 800d33e:	b920      	cbnz	r0, 800d34a <dwt_xfer3xxx+0x40>
 800d340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d344:	d018      	beq.n	800d378 <dwt_xfer3xxx+0x6e>
 800d346:	2b00      	cmp	r3, #0
 800d348:	d037      	beq.n	800d3ba <dwt_xfer3xxx+0xb0>
 800d34a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d34e:	f88d 100c 	strb.w	r1, [sp, #12]
 800d352:	431a      	orrs	r2, r3
 800d354:	f88d 200d 	strb.w	r2, [sp, #13]
 800d358:	2402      	movs	r4, #2
 800d35a:	e005      	b.n	800d368 <dwt_xfer3xxx+0x5e>
 800d35c:	007a      	lsls	r2, r7, #1
 800d35e:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800d362:	f88d 200c 	strb.w	r2, [sp, #12]
 800d366:	2401      	movs	r4, #1
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d006      	beq.n	800d37a <dwt_xfer3xxx+0x70>
 800d36c:	d326      	bcc.n	800d3bc <dwt_xfer3xxx+0xb2>
 800d36e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d372:	2b03      	cmp	r3, #3
 800d374:	d901      	bls.n	800d37a <dwt_xfer3xxx+0x70>
 800d376:	e7fe      	b.n	800d376 <dwt_xfer3xxx+0x6c>
 800d378:	2401      	movs	r4, #1
 800d37a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d37c:	7d1b      	ldrb	r3, [r3, #20]
 800d37e:	b94b      	cbnz	r3, 800d394 <dwt_xfer3xxx+0x8a>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	685d      	ldr	r5, [r3, #4]
 800d384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d386:	4632      	mov	r2, r6
 800d388:	a903      	add	r1, sp, #12
 800d38a:	4620      	mov	r0, r4
 800d38c:	47a8      	blx	r5
 800d38e:	b004      	add	sp, #16
 800d390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d394:	2200      	movs	r2, #0
 800d396:	4621      	mov	r1, r4
 800d398:	a803      	add	r0, sp, #12
 800d39a:	f7f7 fb05 	bl	80049a8 <dwt_generatecrc8>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3a4:	f7f7 fb00 	bl	80049a8 <dwt_generatecrc8>
 800d3a8:	682b      	ldr	r3, [r5, #0]
 800d3aa:	9000      	str	r0, [sp, #0]
 800d3ac:	689d      	ldr	r5, [r3, #8]
 800d3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b0:	4632      	mov	r2, r6
 800d3b2:	a903      	add	r1, sp, #12
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	47a8      	blx	r5
 800d3b8:	e7e9      	b.n	800d38e <dwt_xfer3xxx+0x84>
 800d3ba:	2401      	movs	r4, #1
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	f8d3 8000 	ldr.w	r8, [r3]
 800d3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c4:	4632      	mov	r2, r6
 800d3c6:	a903      	add	r1, sp, #12
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	47c0      	blx	r8
 800d3cc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d1dc      	bne.n	800d38e <dwt_xfer3xxx+0x84>
 800d3d4:	2f18      	cmp	r7, #24
 800d3d6:	d0da      	beq.n	800d38e <dwt_xfer3xxx+0x84>
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4621      	mov	r1, r4
 800d3dc:	a803      	add	r0, sp, #12
 800d3de:	f7f7 fae3 	bl	80049a8 <dwt_generatecrc8>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3e8:	f7f7 fade 	bl	80049a8 <dwt_generatecrc8>
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	2118      	movs	r1, #24
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f000 f866 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800d3f8:	4284      	cmp	r4, r0
 800d3fa:	d0c8      	beq.n	800d38e <dwt_xfer3xxx+0x84>
 800d3fc:	68eb      	ldr	r3, [r5, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d0c5      	beq.n	800d38e <dwt_xfer3xxx+0x84>
 800d402:	4798      	blx	r3
 800d404:	e7c3      	b.n	800d38e <dwt_xfer3xxx+0x84>

0800d406 <dwt_readfromdevice>:
 800d406:	b510      	push	{r4, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	2400      	movs	r4, #0
 800d40c:	9401      	str	r4, [sp, #4]
 800d40e:	9c04      	ldr	r4, [sp, #16]
 800d410:	9400      	str	r4, [sp, #0]
 800d412:	f7ff ff7a 	bl	800d30a <dwt_xfer3xxx>
 800d416:	b002      	add	sp, #8
 800d418:	bd10      	pop	{r4, pc}

0800d41a <dwt_read32bitoffsetreg>:
 800d41a:	b500      	push	{lr}
 800d41c:	b085      	sub	sp, #20
 800d41e:	ab03      	add	r3, sp, #12
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	2304      	movs	r3, #4
 800d424:	b292      	uxth	r2, r2
 800d426:	f7ff ffee 	bl	800d406 <dwt_readfromdevice>
 800d42a:	f10d 030f 	add.w	r3, sp, #15
 800d42e:	f10d 010b 	add.w	r1, sp, #11
 800d432:	2000      	movs	r0, #0
 800d434:	f813 2901 	ldrb.w	r2, [r3], #-1
 800d438:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800d43c:	428b      	cmp	r3, r1
 800d43e:	d1f9      	bne.n	800d434 <dwt_read32bitoffsetreg+0x1a>
 800d440:	b005      	add	sp, #20
 800d442:	f85d fb04 	ldr.w	pc, [sp], #4

0800d446 <dwt_read16bitoffsetreg>:
 800d446:	b500      	push	{lr}
 800d448:	b085      	sub	sp, #20
 800d44a:	ab03      	add	r3, sp, #12
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	2302      	movs	r3, #2
 800d450:	b292      	uxth	r2, r2
 800d452:	f7ff ffd8 	bl	800d406 <dwt_readfromdevice>
 800d456:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d45a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d45e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d462:	b280      	uxth	r0, r0
 800d464:	b005      	add	sp, #20
 800d466:	f85d fb04 	ldr.w	pc, [sp], #4

0800d46a <ull_getrxantennadelay>:
 800d46a:	b508      	push	{r3, lr}
 800d46c:	2200      	movs	r2, #0
 800d46e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800d472:	f7ff ffe8 	bl	800d446 <dwt_read16bitoffsetreg>
 800d476:	bd08      	pop	{r3, pc}

0800d478 <ull_gettxantennadelay>:
 800d478:	b508      	push	{r3, lr}
 800d47a:	2200      	movs	r2, #0
 800d47c:	217c      	movs	r1, #124	; 0x7c
 800d47e:	f7ff ffe2 	bl	800d446 <dwt_read16bitoffsetreg>
 800d482:	bd08      	pop	{r3, pc}

0800d484 <ull_readclockoffset>:
 800d484:	b508      	push	{r3, lr}
 800d486:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d488:	7b9b      	ldrb	r3, [r3, #14]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d00a      	beq.n	800d4a4 <ull_readclockoffset+0x20>
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d10e      	bne.n	800d4b0 <ull_readclockoffset+0x2c>
 800d492:	220c      	movs	r2, #12
 800d494:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d498:	f7ff ffd5 	bl	800d446 <dwt_read16bitoffsetreg>
 800d49c:	b200      	sxth	r0, r0
 800d49e:	f340 000c 	sbfx	r0, r0, #0, #13
 800d4a2:	bd08      	pop	{r3, pc}
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	4905      	ldr	r1, [pc, #20]	; (800d4bc <ull_readclockoffset+0x38>)
 800d4a8:	f7ff ffcd 	bl	800d446 <dwt_read16bitoffsetreg>
 800d4ac:	b200      	sxth	r0, r0
 800d4ae:	e7f6      	b.n	800d49e <ull_readclockoffset+0x1a>
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	4903      	ldr	r1, [pc, #12]	; (800d4c0 <ull_readclockoffset+0x3c>)
 800d4b4:	f7ff ffc7 	bl	800d446 <dwt_read16bitoffsetreg>
 800d4b8:	b200      	sxth	r0, r0
 800d4ba:	e7f0      	b.n	800d49e <ull_readclockoffset+0x1a>
 800d4bc:	0018000c 	.word	0x0018000c
 800d4c0:	000c0020 	.word	0x000c0020

0800d4c4 <dwt_read8bitoffsetreg>:
 800d4c4:	b500      	push	{lr}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	f10d 030f 	add.w	r3, sp, #15
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	b292      	uxth	r2, r2
 800d4d2:	f7ff ff98 	bl	800d406 <dwt_readfromdevice>
 800d4d6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800d4da:	b005      	add	sp, #20
 800d4dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800d4e0 <ull_readcarrierintegrator>:
 800d4e0:	b500      	push	{lr}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	ab03      	add	r3, sp, #12
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	490b      	ldr	r1, [pc, #44]	; (800d51c <ull_readcarrierintegrator+0x3c>)
 800d4ee:	f7ff ff8a 	bl	800d406 <dwt_readfromdevice>
 800d4f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d4f6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800d4fa:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800d4fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d502:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800d506:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d50a:	bf1c      	itt	ne
 800d50c:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800d510:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800d514:	b005      	add	sp, #20
 800d516:	f85d fb04 	ldr.w	pc, [sp], #4
 800d51a:	bf00      	nop
 800d51c:	00060029 	.word	0x00060029

0800d520 <ull_readdiagnostics>:
 800d520:	b530      	push	{r4, r5, lr}
 800d522:	b0bd      	sub	sp, #244	; 0xf4
 800d524:	4605      	mov	r5, r0
 800d526:	460c      	mov	r4, r1
 800d528:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d52a:	7b9a      	ldrb	r2, [r3, #14]
 800d52c:	2a01      	cmp	r2, #1
 800d52e:	d01c      	beq.n	800d56a <ull_readdiagnostics+0x4a>
 800d530:	2a03      	cmp	r2, #3
 800d532:	f040 81f1 	bne.w	800d918 <ull_readdiagnostics+0x3f8>
 800d536:	7d9b      	ldrb	r3, [r3, #22]
 800d538:	f013 0f08 	tst.w	r3, #8
 800d53c:	d10c      	bne.n	800d558 <ull_readdiagnostics+0x38>
 800d53e:	f013 0f04 	tst.w	r3, #4
 800d542:	ab02      	add	r3, sp, #8
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	bf14      	ite	ne
 800d548:	2338      	movne	r3, #56	; 0x38
 800d54a:	2320      	moveq	r3, #32
 800d54c:	2200      	movs	r2, #0
 800d54e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d552:	f7ff ff58 	bl	800d406 <dwt_readfromdevice>
 800d556:	e019      	b.n	800d58c <ull_readdiagnostics+0x6c>
 800d558:	ab02      	add	r3, sp, #8
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	23e8      	movs	r3, #232	; 0xe8
 800d55e:	2200      	movs	r2, #0
 800d560:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d564:	f7ff ff4f 	bl	800d406 <dwt_readfromdevice>
 800d568:	e010      	b.n	800d58c <ull_readdiagnostics+0x6c>
 800d56a:	7d9b      	ldrb	r3, [r3, #22]
 800d56c:	f013 0f08 	tst.w	r3, #8
 800d570:	f040 81c9 	bne.w	800d906 <ull_readdiagnostics+0x3e6>
 800d574:	f013 0f04 	tst.w	r3, #4
 800d578:	ab02      	add	r3, sp, #8
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	bf14      	ite	ne
 800d57e:	2338      	movne	r3, #56	; 0x38
 800d580:	2320      	moveq	r3, #32
 800d582:	2200      	movs	r2, #0
 800d584:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d588:	f7ff ff3d 	bl	800d406 <dwt_readfromdevice>
 800d58c:	f10d 0217 	add.w	r2, sp, #23
 800d590:	f104 031a 	add.w	r3, r4, #26
 800d594:	f104 0020 	add.w	r0, r4, #32
 800d598:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d59c:	f803 1b01 	strb.w	r1, [r3], #1
 800d5a0:	4283      	cmp	r3, r0
 800d5a2:	d1f9      	bne.n	800d598 <ull_readdiagnostics+0x78>
 800d5a4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d5a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d5ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5b4:	8463      	strh	r3, [r4, #34]	; 0x22
 800d5b6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d5ba:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d5be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d5c6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d5ca:	bf1c      	itt	ne
 800d5cc:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d5d0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d5d4:	8423      	strh	r3, [r4, #32]
 800d5d6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800d5da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d5de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d5e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d5e8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d5ea:	7d9b      	ldrb	r3, [r3, #22]
 800d5ec:	f013 0f02 	tst.w	r3, #2
 800d5f0:	f040 817e 	bne.w	800d8f0 <ull_readdiagnostics+0x3d0>
 800d5f4:	aa0a      	add	r2, sp, #40	; 0x28
 800d5f6:	1e63      	subs	r3, r4, #1
 800d5f8:	1d20      	adds	r0, r4, #4
 800d5fa:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d5fe:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d602:	79d1      	ldrb	r1, [r2, #7]
 800d604:	7219      	strb	r1, [r3, #8]
 800d606:	7bd1      	ldrb	r1, [r2, #15]
 800d608:	7459      	strb	r1, [r3, #17]
 800d60a:	4283      	cmp	r3, r0
 800d60c:	d1f5      	bne.n	800d5fa <ull_readdiagnostics+0xda>
 800d60e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800d612:	7163      	strb	r3, [r4, #5]
 800d614:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800d618:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800d61c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d620:	80e3      	strh	r3, [r4, #6]
 800d622:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d626:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d62a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d62e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d632:	f8a4 300d 	strh.w	r3, [r4, #13]
 800d636:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800d63a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800d63e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d642:	f8a4 300f 	strh.w	r3, [r4, #15]
 800d646:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800d64a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800d64e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d652:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d656:	82e3      	strh	r3, [r4, #22]
 800d658:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800d65c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800d660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d664:	8323      	strh	r3, [r4, #24]
 800d666:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d668:	7d9b      	ldrb	r3, [r3, #22]
 800d66a:	f013 0f04 	tst.w	r3, #4
 800d66e:	f040 813f 	bne.w	800d8f0 <ull_readdiagnostics+0x3d0>
 800d672:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800d676:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800d67a:	041b      	lsls	r3, r3, #16
 800d67c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d680:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d684:	4313      	orrs	r3, r2
 800d686:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800d68a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d68e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d692:	6263      	str	r3, [r4, #36]	; 0x24
 800d694:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800d698:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800d69c:	041b      	lsls	r3, r3, #16
 800d69e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d6a2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800d6ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6b6:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800d6ba:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800d6be:	041b      	lsls	r3, r3, #16
 800d6c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d6c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800d6ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6d8:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800d6dc:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800d6e0:	041b      	lsls	r3, r3, #16
 800d6e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d6e6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800d6f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6f8:	6323      	str	r3, [r4, #48]	; 0x30
 800d6fa:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800d6fe:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800d702:	041b      	lsls	r3, r3, #16
 800d704:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d708:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800d70c:	4313      	orrs	r3, r2
 800d70e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800d712:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d716:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d71a:	6363      	str	r3, [r4, #52]	; 0x34
 800d71c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800d720:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800d724:	041b      	lsls	r3, r3, #16
 800d726:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d72a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800d72e:	4313      	orrs	r3, r2
 800d730:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800d734:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d738:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d73c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d73e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800d742:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d74a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800d74c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800d750:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800d754:	041b      	lsls	r3, r3, #16
 800d756:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d75a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800d75e:	4313      	orrs	r3, r2
 800d760:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800d764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d768:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d76c:	6423      	str	r3, [r4, #64]	; 0x40
 800d76e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800d772:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800d776:	041b      	lsls	r3, r3, #16
 800d778:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d77c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800d780:	4313      	orrs	r3, r2
 800d782:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800d786:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d78e:	6463      	str	r3, [r4, #68]	; 0x44
 800d790:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800d794:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800d798:	041b      	lsls	r3, r3, #16
 800d79a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d79e:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800d7a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7b0:	64a3      	str	r3, [r4, #72]	; 0x48
 800d7b2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800d7b6:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800d7ba:	041b      	lsls	r3, r3, #16
 800d7bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7c0:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800d7ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d7d4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800d7d8:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800d7dc:	041b      	lsls	r3, r3, #16
 800d7de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d7e2:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800d7ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d7f4:	6523      	str	r3, [r4, #80]	; 0x50
 800d7f6:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800d7fa:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800d7fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d802:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d806:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800d80a:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800d80e:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800d812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d81a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800d81e:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800d822:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800d826:	041b      	lsls	r3, r3, #16
 800d828:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d82c:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800d830:	4313      	orrs	r3, r2
 800d832:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800d836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d83a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d83e:	65a3      	str	r3, [r4, #88]	; 0x58
 800d840:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800d844:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800d848:	041b      	lsls	r3, r3, #16
 800d84a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d84e:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800d852:	4313      	orrs	r3, r2
 800d854:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800d858:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d860:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d862:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800d866:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800d86a:	041b      	lsls	r3, r3, #16
 800d86c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d870:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800d874:	4313      	orrs	r3, r2
 800d876:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800d87a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d87e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d882:	6623      	str	r3, [r4, #96]	; 0x60
 800d884:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800d888:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800d88c:	041b      	lsls	r3, r3, #16
 800d88e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d892:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800d896:	4313      	orrs	r3, r2
 800d898:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800d89c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8a4:	6663      	str	r3, [r4, #100]	; 0x64
 800d8a6:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800d8aa:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800d8ae:	041b      	lsls	r3, r3, #16
 800d8b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d8b4:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800d8be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8c6:	66a3      	str	r3, [r4, #104]	; 0x68
 800d8c8:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800d8cc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800d8d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d8d8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800d8dc:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800d8e0:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800d8e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8ec:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800d8f0:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f2c0 81d0 	blt.w	800dc9a <ull_readdiagnostics+0x77a>
 800d8fa:	7fe3      	ldrb	r3, [r4, #31]
 800d8fc:	f003 0301 	and.w	r3, r3, #1
 800d900:	77e3      	strb	r3, [r4, #31]
 800d902:	b03d      	add	sp, #244	; 0xf4
 800d904:	bd30      	pop	{r4, r5, pc}
 800d906:	ab02      	add	r3, sp, #8
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	23e8      	movs	r3, #232	; 0xe8
 800d90c:	2200      	movs	r2, #0
 800d90e:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800d912:	f7ff fd78 	bl	800d406 <dwt_readfromdevice>
 800d916:	e639      	b.n	800d58c <ull_readdiagnostics+0x6c>
 800d918:	7d9b      	ldrb	r3, [r3, #22]
 800d91a:	f013 0f01 	tst.w	r3, #1
 800d91e:	f000 81b3 	beq.w	800dc88 <ull_readdiagnostics+0x768>
 800d922:	ab02      	add	r3, sp, #8
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	236c      	movs	r3, #108	; 0x6c
 800d928:	2200      	movs	r2, #0
 800d92a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d92e:	f7ff fd6a 	bl	800d406 <dwt_readfromdevice>
 800d932:	ab1d      	add	r3, sp, #116	; 0x74
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	236c      	movs	r3, #108	; 0x6c
 800d938:	2200      	movs	r2, #0
 800d93a:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800d93e:	4628      	mov	r0, r5
 800d940:	f7ff fd61 	bl	800d406 <dwt_readfromdevice>
 800d944:	aa02      	add	r2, sp, #8
 800d946:	1e63      	subs	r3, r4, #1
 800d948:	1d20      	adds	r0, r4, #4
 800d94a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d94e:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d952:	79d1      	ldrb	r1, [r2, #7]
 800d954:	7219      	strb	r1, [r3, #8]
 800d956:	7bd1      	ldrb	r1, [r2, #15]
 800d958:	7459      	strb	r1, [r3, #17]
 800d95a:	7dd1      	ldrb	r1, [r2, #23]
 800d95c:	7699      	strb	r1, [r3, #26]
 800d95e:	4283      	cmp	r3, r0
 800d960:	d1f3      	bne.n	800d94a <ull_readdiagnostics+0x42a>
 800d962:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800d966:	77e3      	strb	r3, [r4, #31]
 800d968:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d96c:	7163      	strb	r3, [r4, #5]
 800d96e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d972:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d97a:	80e3      	strh	r3, [r4, #6]
 800d97c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d980:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d984:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800d988:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800d98c:	f8a4 200d 	strh.w	r2, [r4, #13]
 800d990:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d994:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800d998:	f8a4 200f 	strh.w	r2, [r4, #15]
 800d99c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d9a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9a4:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800d9a8:	82e3      	strh	r3, [r4, #22]
 800d9aa:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800d9ae:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d9b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9b6:	8323      	strh	r3, [r4, #24]
 800d9b8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800d9bc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800d9c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d9c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d9cc:	bf1c      	itt	ne
 800d9ce:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800d9d2:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800d9d6:	8423      	strh	r3, [r4, #32]
 800d9d8:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800d9dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d9e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9e8:	8463      	strh	r3, [r4, #34]	; 0x22
 800d9ea:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800d9ee:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800d9f2:	041b      	lsls	r3, r3, #16
 800d9f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9f8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800da02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da06:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800da0a:	6263      	str	r3, [r4, #36]	; 0x24
 800da0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800da0e:	7d9b      	ldrb	r3, [r3, #22]
 800da10:	f013 0f01 	tst.w	r3, #1
 800da14:	f43f af6c 	beq.w	800d8f0 <ull_readdiagnostics+0x3d0>
 800da18:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800da1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800da20:	041b      	lsls	r3, r3, #16
 800da22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da26:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800da2a:	4313      	orrs	r3, r2
 800da2c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800da30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da38:	62a3      	str	r3, [r4, #40]	; 0x28
 800da3a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800da3e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800da42:	041b      	lsls	r3, r3, #16
 800da44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da48:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800da4c:	4313      	orrs	r3, r2
 800da4e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800da52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da5c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800da60:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800da64:	041b      	lsls	r3, r3, #16
 800da66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da6a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800da6e:	4313      	orrs	r3, r2
 800da70:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800da74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800da7c:	6323      	str	r3, [r4, #48]	; 0x30
 800da7e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800da82:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800da86:	041b      	lsls	r3, r3, #16
 800da88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da8c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800da90:	4313      	orrs	r3, r2
 800da92:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800da96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da9a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800da9e:	6363      	str	r3, [r4, #52]	; 0x34
 800daa0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800daa4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800daa8:	041b      	lsls	r3, r3, #16
 800daaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800daae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800dab2:	4313      	orrs	r3, r2
 800dab4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800dab8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dabc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dac0:	63a3      	str	r3, [r4, #56]	; 0x38
 800dac2:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800dac6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800daca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dace:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800dad0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800dad4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800dad8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dadc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dae0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800dae2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800dae6:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800daea:	041b      	lsls	r3, r3, #16
 800daec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800daf0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800daf4:	4313      	orrs	r3, r2
 800daf6:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800dafa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dafe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800db02:	6423      	str	r3, [r4, #64]	; 0x40
 800db04:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800db08:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800db0c:	041b      	lsls	r3, r3, #16
 800db0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800db12:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800db16:	4313      	orrs	r3, r2
 800db18:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800db1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db24:	6463      	str	r3, [r4, #68]	; 0x44
 800db26:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800db2a:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800db2e:	041b      	lsls	r3, r3, #16
 800db30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800db34:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800db38:	4313      	orrs	r3, r2
 800db3a:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800db3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db46:	64a3      	str	r3, [r4, #72]	; 0x48
 800db48:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800db4c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800db50:	041b      	lsls	r3, r3, #16
 800db52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800db56:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800db5a:	4313      	orrs	r3, r2
 800db5c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800db60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db68:	64e3      	str	r3, [r4, #76]	; 0x4c
 800db6a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800db6e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800db72:	041b      	lsls	r3, r3, #16
 800db74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800db78:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800db7c:	4313      	orrs	r3, r2
 800db7e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800db82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db86:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db8a:	6523      	str	r3, [r4, #80]	; 0x50
 800db8c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800db90:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800db94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800db9c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800dba0:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800dba4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800dba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dbac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbb0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800dbb4:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800dbb8:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800dbbc:	041b      	lsls	r3, r3, #16
 800dbbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dbc2:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800dbcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dbd0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800dbd4:	65a3      	str	r3, [r4, #88]	; 0x58
 800dbd6:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800dbda:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800dbde:	041b      	lsls	r3, r3, #16
 800dbe0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dbe4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800dbee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dbf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbf6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800dbf8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800dbfc:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800dc00:	041b      	lsls	r3, r3, #16
 800dc02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc06:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800dc10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dc18:	6623      	str	r3, [r4, #96]	; 0x60
 800dc1a:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800dc1e:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800dc22:	041b      	lsls	r3, r3, #16
 800dc24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc28:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800dc32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc36:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dc3a:	6663      	str	r3, [r4, #100]	; 0x64
 800dc3c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800dc40:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800dc44:	041b      	lsls	r3, r3, #16
 800dc46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc4a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800dc54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dc5c:	66a3      	str	r3, [r4, #104]	; 0x68
 800dc5e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800dc62:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800dc66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800dc6e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800dc72:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800dc76:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800dc7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc82:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800dc86:	e633      	b.n	800d8f0 <ull_readdiagnostics+0x3d0>
 800dc88:	ab02      	add	r3, sp, #8
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	2328      	movs	r3, #40	; 0x28
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800dc94:	f7ff fbb7 	bl	800d406 <dwt_readfromdevice>
 800dc98:	e654      	b.n	800d944 <ull_readdiagnostics+0x424>
 800dc9a:	23ff      	movs	r3, #255	; 0xff
 800dc9c:	7723      	strb	r3, [r4, #28]
 800dc9e:	7763      	strb	r3, [r4, #29]
 800dca0:	77a3      	strb	r3, [r4, #30]
 800dca2:	77e3      	strb	r3, [r4, #31]
 800dca4:	e629      	b.n	800d8fa <ull_readdiagnostics+0x3da>
	...

0800dca8 <ull_readrxtimestamp>:
 800dca8:	b500      	push	{lr}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dcae:	7b9b      	ldrb	r3, [r3, #14]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d00b      	beq.n	800dccc <ull_readrxtimestamp+0x24>
 800dcb4:	2b03      	cmp	r3, #3
 800dcb6:	d110      	bne.n	800dcda <ull_readrxtimestamp+0x32>
 800dcb8:	9100      	str	r1, [sp, #0]
 800dcba:	2305      	movs	r3, #5
 800dcbc:	2204      	movs	r2, #4
 800dcbe:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800dcc2:	f7ff fba0 	bl	800d406 <dwt_readfromdevice>
 800dcc6:	b003      	add	sp, #12
 800dcc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dccc:	9100      	str	r1, [sp, #0]
 800dcce:	2305      	movs	r3, #5
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	4905      	ldr	r1, [pc, #20]	; (800dce8 <ull_readrxtimestamp+0x40>)
 800dcd4:	f7ff fb97 	bl	800d406 <dwt_readfromdevice>
 800dcd8:	e7f5      	b.n	800dcc6 <ull_readrxtimestamp+0x1e>
 800dcda:	9100      	str	r1, [sp, #0]
 800dcdc:	2305      	movs	r3, #5
 800dcde:	2200      	movs	r2, #0
 800dce0:	2160      	movs	r1, #96	; 0x60
 800dce2:	f7ff fb90 	bl	800d406 <dwt_readfromdevice>
 800dce6:	e7ee      	b.n	800dcc6 <ull_readrxtimestamp+0x1e>
 800dce8:	00180004 	.word	0x00180004

0800dcec <dwt_writetodevice>:
 800dcec:	b510      	push	{r4, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800dcf4:	9401      	str	r4, [sp, #4]
 800dcf6:	9c04      	ldr	r4, [sp, #16]
 800dcf8:	9400      	str	r4, [sp, #0]
 800dcfa:	f7ff fb06 	bl	800d30a <dwt_xfer3xxx>
 800dcfe:	b002      	add	sp, #8
 800dd00:	bd10      	pop	{r4, pc}

0800dd02 <dwt_write16bitoffsetreg>:
 800dd02:	b500      	push	{lr}
 800dd04:	b085      	sub	sp, #20
 800dd06:	f88d 300c 	strb.w	r3, [sp, #12]
 800dd0a:	0a1b      	lsrs	r3, r3, #8
 800dd0c:	f88d 300d 	strb.w	r3, [sp, #13]
 800dd10:	ab03      	add	r3, sp, #12
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	2302      	movs	r3, #2
 800dd16:	b292      	uxth	r2, r2
 800dd18:	f7ff ffe8 	bl	800dcec <dwt_writetodevice>
 800dd1c:	b005      	add	sp, #20
 800dd1e:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd22 <ull_setrxantennadelay>:
 800dd22:	b508      	push	{r3, lr}
 800dd24:	460b      	mov	r3, r1
 800dd26:	2200      	movs	r2, #0
 800dd28:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800dd2c:	f7ff ffe9 	bl	800dd02 <dwt_write16bitoffsetreg>
 800dd30:	bd08      	pop	{r3, pc}

0800dd32 <ull_settxantennadelay>:
 800dd32:	b508      	push	{r3, lr}
 800dd34:	460b      	mov	r3, r1
 800dd36:	2200      	movs	r2, #0
 800dd38:	217c      	movs	r1, #124	; 0x7c
 800dd3a:	f7ff ffe2 	bl	800dd02 <dwt_write16bitoffsetreg>
 800dd3e:	bd08      	pop	{r3, pc}

0800dd40 <ull_force_clocks>:
 800dd40:	b508      	push	{r3, lr}
 800dd42:	2901      	cmp	r1, #1
 800dd44:	d002      	beq.n	800dd4c <ull_force_clocks+0xc>
 800dd46:	2905      	cmp	r1, #5
 800dd48:	d007      	beq.n	800dd5a <ull_force_clocks+0x1a>
 800dd4a:	bd08      	pop	{r3, pc}
 800dd4c:	f641 0322 	movw	r3, #6178	; 0x1822
 800dd50:	2200      	movs	r2, #0
 800dd52:	4905      	ldr	r1, [pc, #20]	; (800dd68 <ull_force_clocks+0x28>)
 800dd54:	f7ff ffd5 	bl	800dd02 <dwt_write16bitoffsetreg>
 800dd58:	e7f7      	b.n	800dd4a <ull_force_clocks+0xa>
 800dd5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd5e:	2200      	movs	r2, #0
 800dd60:	4901      	ldr	r1, [pc, #4]	; (800dd68 <ull_force_clocks+0x28>)
 800dd62:	f7ff ffce 	bl	800dd02 <dwt_write16bitoffsetreg>
 800dd66:	e7f0      	b.n	800dd4a <ull_force_clocks+0xa>
 800dd68:	00110004 	.word	0x00110004

0800dd6c <__dwt_otp_write_wdata_id_reg>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4605      	mov	r5, r0
 800dd70:	460c      	mov	r4, r1
 800dd72:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dd7e:	f7ff ffc0 	bl	800dd02 <dwt_write16bitoffsetreg>
 800dd82:	b2a3      	uxth	r3, r4
 800dd84:	2200      	movs	r2, #0
 800dd86:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f7ff ffb9 	bl	800dd02 <dwt_write16bitoffsetreg>
 800dd90:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dd94 <_dwt_otpread>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	4604      	mov	r4, r0
 800dd98:	460e      	mov	r6, r1
 800dd9a:	4d0c      	ldr	r5, [pc, #48]	; (800ddcc <_dwt_otpread+0x38>)
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	2200      	movs	r2, #0
 800dda0:	4629      	mov	r1, r5
 800dda2:	f7ff ffae 	bl	800dd02 <dwt_write16bitoffsetreg>
 800dda6:	4633      	mov	r3, r6
 800dda8:	2200      	movs	r2, #0
 800ddaa:	4909      	ldr	r1, [pc, #36]	; (800ddd0 <_dwt_otpread+0x3c>)
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7ff ffa8 	bl	800dd02 <dwt_write16bitoffsetreg>
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4629      	mov	r1, r5
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7ff ffa2 	bl	800dd02 <dwt_write16bitoffsetreg>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4904      	ldr	r1, [pc, #16]	; (800ddd4 <_dwt_otpread+0x40>)
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f7ff fb29 	bl	800d41a <dwt_read32bitoffsetreg>
 800ddc8:	bd70      	pop	{r4, r5, r6, pc}
 800ddca:	bf00      	nop
 800ddcc:	000b0008 	.word	0x000b0008
 800ddd0:	000b0004 	.word	0x000b0004
 800ddd4:	000b0010 	.word	0x000b0010

0800ddd8 <dwt_write32bitoffsetreg>:
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	f88d 300c 	strb.w	r3, [sp, #12]
 800dde0:	0a1c      	lsrs	r4, r3, #8
 800dde2:	f88d 400d 	strb.w	r4, [sp, #13]
 800dde6:	0c1c      	lsrs	r4, r3, #16
 800dde8:	f88d 400e 	strb.w	r4, [sp, #14]
 800ddec:	0e1b      	lsrs	r3, r3, #24
 800ddee:	f88d 300f 	strb.w	r3, [sp, #15]
 800ddf2:	ab03      	add	r3, sp, #12
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	2304      	movs	r3, #4
 800ddf8:	b292      	uxth	r2, r2
 800ddfa:	f7ff ff77 	bl	800dcec <dwt_writetodevice>
 800ddfe:	b004      	add	sp, #16
 800de00:	bd10      	pop	{r4, pc}

0800de02 <_dwt_adjust_delaytime>:
 800de02:	b538      	push	{r3, r4, r5, lr}
 800de04:	4604      	mov	r4, r0
 800de06:	b989      	cbnz	r1, 800de2c <_dwt_adjust_delaytime+0x2a>
 800de08:	2200      	movs	r2, #0
 800de0a:	2128      	movs	r1, #40	; 0x28
 800de0c:	f7ff fb05 	bl	800d41a <dwt_read32bitoffsetreg>
 800de10:	4605      	mov	r5, r0
 800de12:	2201      	movs	r2, #1
 800de14:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800de18:	4620      	mov	r0, r4
 800de1a:	f7ff fb53 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800de1e:	1a2b      	subs	r3, r5, r0
 800de20:	2200      	movs	r2, #0
 800de22:	2128      	movs	r1, #40	; 0x28
 800de24:	4620      	mov	r0, r4
 800de26:	f7ff ffd7 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800de2a:	bd38      	pop	{r3, r4, r5, pc}
 800de2c:	2200      	movs	r2, #0
 800de2e:	2128      	movs	r1, #40	; 0x28
 800de30:	f7ff faf3 	bl	800d41a <dwt_read32bitoffsetreg>
 800de34:	4605      	mov	r5, r0
 800de36:	2201      	movs	r2, #1
 800de38:	217c      	movs	r1, #124	; 0x7c
 800de3a:	4620      	mov	r0, r4
 800de3c:	f7ff fb42 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800de40:	1a2b      	subs	r3, r5, r0
 800de42:	2200      	movs	r2, #0
 800de44:	2128      	movs	r1, #40	; 0x28
 800de46:	4620      	mov	r0, r4
 800de48:	f7ff ffc6 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800de4c:	e7ed      	b.n	800de2a <_dwt_adjust_delaytime+0x28>

0800de4e <ull_setrxaftertxdelay>:
 800de4e:	b538      	push	{r3, r4, r5, lr}
 800de50:	4605      	mov	r5, r0
 800de52:	460c      	mov	r4, r1
 800de54:	2200      	movs	r2, #0
 800de56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800de5a:	f7ff fade 	bl	800d41a <dwt_read32bitoffsetreg>
 800de5e:	0d00      	lsrs	r0, r0, #20
 800de60:	0500      	lsls	r0, r0, #20
 800de62:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800de66:	4303      	orrs	r3, r0
 800de68:	2200      	movs	r2, #0
 800de6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800de6e:	4628      	mov	r0, r5
 800de70:	f7ff ffb2 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800de74:	bd38      	pop	{r3, r4, r5, pc}
	...

0800de78 <ull_setfinegraintxseq>:
 800de78:	b508      	push	{r3, lr}
 800de7a:	b929      	cbnz	r1, 800de88 <ull_setfinegraintxseq+0x10>
 800de7c:	4b05      	ldr	r3, [pc, #20]	; (800de94 <ull_setfinegraintxseq+0x1c>)
 800de7e:	2202      	movs	r2, #2
 800de80:	4905      	ldr	r1, [pc, #20]	; (800de98 <ull_setfinegraintxseq+0x20>)
 800de82:	f7ff ffa9 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800de86:	bd08      	pop	{r3, pc}
 800de88:	4b04      	ldr	r3, [pc, #16]	; (800de9c <ull_setfinegraintxseq+0x24>)
 800de8a:	2202      	movs	r2, #2
 800de8c:	4902      	ldr	r1, [pc, #8]	; (800de98 <ull_setfinegraintxseq+0x20>)
 800de8e:	f7ff ffa3 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800de92:	e7f8      	b.n	800de86 <ull_setfinegraintxseq+0xe>
 800de94:	00d20874 	.word	0x00d20874
 800de98:	00110010 	.word	0x00110010
 800de9c:	04d28874 	.word	0x04d28874

0800dea0 <ull_setlnapamode>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4605      	mov	r5, r0
 800dea4:	460c      	mov	r4, r1
 800dea6:	2200      	movs	r2, #0
 800dea8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800deac:	f7ff fab5 	bl	800d41a <dwt_read32bitoffsetreg>
 800deb0:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800deb4:	f014 0f01 	tst.w	r4, #1
 800deb8:	bf18      	it	ne
 800deba:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800debe:	f014 0f02 	tst.w	r4, #2
 800dec2:	bf18      	it	ne
 800dec4:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800dec8:	f014 0f04 	tst.w	r4, #4
 800decc:	bf18      	it	ne
 800dece:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800ded2:	2200      	movs	r2, #0
 800ded4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ded8:	4628      	mov	r0, r5
 800deda:	f7ff ff7d 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800dede:	bd38      	pop	{r3, r4, r5, pc}

0800dee0 <ull_configurestskey>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4605      	mov	r5, r0
 800dee4:	460c      	mov	r4, r1
 800dee6:	680b      	ldr	r3, [r1, #0]
 800dee8:	2200      	movs	r2, #0
 800deea:	490b      	ldr	r1, [pc, #44]	; (800df18 <ull_configurestskey+0x38>)
 800deec:	f7ff ff74 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800def0:	6863      	ldr	r3, [r4, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	4909      	ldr	r1, [pc, #36]	; (800df1c <ull_configurestskey+0x3c>)
 800def6:	4628      	mov	r0, r5
 800def8:	f7ff ff6e 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800defc:	68a3      	ldr	r3, [r4, #8]
 800defe:	2200      	movs	r2, #0
 800df00:	4907      	ldr	r1, [pc, #28]	; (800df20 <ull_configurestskey+0x40>)
 800df02:	4628      	mov	r0, r5
 800df04:	f7ff ff68 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800df08:	68e3      	ldr	r3, [r4, #12]
 800df0a:	2200      	movs	r2, #0
 800df0c:	4905      	ldr	r1, [pc, #20]	; (800df24 <ull_configurestskey+0x44>)
 800df0e:	4628      	mov	r0, r5
 800df10:	f7ff ff62 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800df14:	bd38      	pop	{r3, r4, r5, pc}
 800df16:	bf00      	nop
 800df18:	0002000c 	.word	0x0002000c
 800df1c:	00020010 	.word	0x00020010
 800df20:	00020014 	.word	0x00020014
 800df24:	00020018 	.word	0x00020018

0800df28 <ull_configurestsiv>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4605      	mov	r5, r0
 800df2c:	460c      	mov	r4, r1
 800df2e:	680b      	ldr	r3, [r1, #0]
 800df30:	2200      	movs	r2, #0
 800df32:	490b      	ldr	r1, [pc, #44]	; (800df60 <ull_configurestsiv+0x38>)
 800df34:	f7ff ff50 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800df38:	6863      	ldr	r3, [r4, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	4909      	ldr	r1, [pc, #36]	; (800df64 <ull_configurestsiv+0x3c>)
 800df3e:	4628      	mov	r0, r5
 800df40:	f7ff ff4a 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800df44:	68a3      	ldr	r3, [r4, #8]
 800df46:	2200      	movs	r2, #0
 800df48:	4907      	ldr	r1, [pc, #28]	; (800df68 <ull_configurestsiv+0x40>)
 800df4a:	4628      	mov	r0, r5
 800df4c:	f7ff ff44 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800df50:	68e3      	ldr	r3, [r4, #12]
 800df52:	2200      	movs	r2, #0
 800df54:	4905      	ldr	r1, [pc, #20]	; (800df6c <ull_configurestsiv+0x44>)
 800df56:	4628      	mov	r0, r5
 800df58:	f7ff ff3e 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800df5c:	bd38      	pop	{r3, r4, r5, pc}
 800df5e:	bf00      	nop
 800df60:	0002001c 	.word	0x0002001c
 800df64:	00020020 	.word	0x00020020
 800df68:	00020024 	.word	0x00020024
 800df6c:	00020028 	.word	0x00020028

0800df70 <ull_configmrxlut>:
 800df70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df74:	4604      	mov	r4, r0
 800df76:	4d35      	ldr	r5, [pc, #212]	; (800e04c <ull_configmrxlut+0xdc>)
 800df78:	4b35      	ldr	r3, [pc, #212]	; (800e050 <ull_configmrxlut+0xe0>)
 800df7a:	2905      	cmp	r1, #5
 800df7c:	bf18      	it	ne
 800df7e:	461d      	movne	r5, r3
 800df80:	4e34      	ldr	r6, [pc, #208]	; (800e054 <ull_configmrxlut+0xe4>)
 800df82:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800df86:	2905      	cmp	r1, #5
 800df88:	bf18      	it	ne
 800df8a:	461e      	movne	r6, r3
 800df8c:	4f32      	ldr	r7, [pc, #200]	; (800e058 <ull_configmrxlut+0xe8>)
 800df8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800df92:	2905      	cmp	r1, #5
 800df94:	bf18      	it	ne
 800df96:	461f      	movne	r7, r3
 800df98:	4a30      	ldr	r2, [pc, #192]	; (800e05c <ull_configmrxlut+0xec>)
 800df9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800df9e:	2905      	cmp	r1, #5
 800dfa0:	bf0c      	ite	eq
 800dfa2:	4690      	moveq	r8, r2
 800dfa4:	4698      	movne	r8, r3
 800dfa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfaa:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800dfae:	2905      	cmp	r1, #5
 800dfb0:	bf0c      	ite	eq
 800dfb2:	4691      	moveq	r9, r2
 800dfb4:	4699      	movne	r9, r3
 800dfb6:	4a2a      	ldr	r2, [pc, #168]	; (800e060 <ull_configmrxlut+0xf0>)
 800dfb8:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800dfbc:	2905      	cmp	r1, #5
 800dfbe:	bf0c      	ite	eq
 800dfc0:	4692      	moveq	sl, r2
 800dfc2:	469a      	movne	sl, r3
 800dfc4:	4b27      	ldr	r3, [pc, #156]	; (800e064 <ull_configmrxlut+0xf4>)
 800dfc6:	4a28      	ldr	r2, [pc, #160]	; (800e068 <ull_configmrxlut+0xf8>)
 800dfc8:	2905      	cmp	r1, #5
 800dfca:	bf0c      	ite	eq
 800dfcc:	469b      	moveq	fp, r3
 800dfce:	4693      	movne	fp, r2
 800dfd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	4925      	ldr	r1, [pc, #148]	; (800e06c <ull_configmrxlut+0xfc>)
 800dfd8:	f7ff fefe 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800dfdc:	4b24      	ldr	r3, [pc, #144]	; (800e070 <ull_configmrxlut+0x100>)
 800dfde:	2200      	movs	r2, #0
 800dfe0:	4924      	ldr	r1, [pc, #144]	; (800e074 <ull_configmrxlut+0x104>)
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f7ff fef8 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800dfe8:	4b23      	ldr	r3, [pc, #140]	; (800e078 <ull_configmrxlut+0x108>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	4923      	ldr	r1, [pc, #140]	; (800e07c <ull_configmrxlut+0x10c>)
 800dfee:	4620      	mov	r0, r4
 800dff0:	f7ff fef2 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800dff4:	465b      	mov	r3, fp
 800dff6:	2200      	movs	r2, #0
 800dff8:	4921      	ldr	r1, [pc, #132]	; (800e080 <ull_configmrxlut+0x110>)
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7ff feec 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e000:	4653      	mov	r3, sl
 800e002:	2200      	movs	r2, #0
 800e004:	491f      	ldr	r1, [pc, #124]	; (800e084 <ull_configmrxlut+0x114>)
 800e006:	4620      	mov	r0, r4
 800e008:	f7ff fee6 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e00c:	464b      	mov	r3, r9
 800e00e:	2200      	movs	r2, #0
 800e010:	491d      	ldr	r1, [pc, #116]	; (800e088 <ull_configmrxlut+0x118>)
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff fee0 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e018:	4643      	mov	r3, r8
 800e01a:	2200      	movs	r2, #0
 800e01c:	491b      	ldr	r1, [pc, #108]	; (800e08c <ull_configmrxlut+0x11c>)
 800e01e:	4620      	mov	r0, r4
 800e020:	f7ff feda 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e024:	463b      	mov	r3, r7
 800e026:	2200      	movs	r2, #0
 800e028:	4919      	ldr	r1, [pc, #100]	; (800e090 <ull_configmrxlut+0x120>)
 800e02a:	4620      	mov	r0, r4
 800e02c:	f7ff fed4 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e030:	4633      	mov	r3, r6
 800e032:	2200      	movs	r2, #0
 800e034:	4917      	ldr	r1, [pc, #92]	; (800e094 <ull_configmrxlut+0x124>)
 800e036:	4620      	mov	r0, r4
 800e038:	f7ff fece 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e03c:	462b      	mov	r3, r5
 800e03e:	2200      	movs	r2, #0
 800e040:	4915      	ldr	r1, [pc, #84]	; (800e098 <ull_configmrxlut+0x128>)
 800e042:	4620      	mov	r0, r4
 800e044:	f7ff fec8 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04c:	00039ff6 	.word	0x00039ff6
 800e050:	00055ffe 	.word	0x00055ffe
 800e054:	00039dfe 	.word	0x00039dfe
 800e058:	00039c7e 	.word	0x00039c7e
 800e05c:	00038efe 	.word	0x00038efe
 800e060:	0003876e 	.word	0x0003876e
 800e064:	0003803e 	.word	0x0003803e
 800e068:	0005407e 	.word	0x0005407e
 800e06c:	0003001c 	.word	0x0003001c
 800e070:	1a491248 	.word	0x1a491248
 800e074:	00030020 	.word	0x00030020
 800e078:	2db248db 	.word	0x2db248db
 800e07c:	00030024 	.word	0x00030024
 800e080:	0003002c 	.word	0x0003002c
 800e084:	00030030 	.word	0x00030030
 800e088:	00030034 	.word	0x00030034
 800e08c:	00030038 	.word	0x00030038
 800e090:	0003003c 	.word	0x0003003c
 800e094:	00030040 	.word	0x00030040
 800e098:	00030044 	.word	0x00030044

0800e09c <ull_disable_rftx_blocks>:
 800e09c:	b508      	push	{r3, lr}
 800e09e:	2300      	movs	r3, #0
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	4902      	ldr	r1, [pc, #8]	; (800e0ac <ull_disable_rftx_blocks+0x10>)
 800e0a4:	f7ff fe98 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e0a8:	bd08      	pop	{r3, pc}
 800e0aa:	bf00      	nop
 800e0ac:	00070004 	.word	0x00070004

0800e0b0 <ull_disable_rf_tx>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	460d      	mov	r5, r1
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	490a      	ldr	r1, [pc, #40]	; (800e0e4 <ull_disable_rf_tx+0x34>)
 800e0bc:	f7ff fe8c 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f7ff fe85 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e0ce:	b905      	cbnz	r5, 800e0d2 <ull_disable_rf_tx+0x22>
 800e0d0:	bd38      	pop	{r3, r4, r5, pc}
 800e0d2:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	4903      	ldr	r1, [pc, #12]	; (800e0e8 <ull_disable_rf_tx+0x38>)
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f7ff fe7c 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e0e0:	e7f6      	b.n	800e0d0 <ull_disable_rf_tx+0x20>
 800e0e2:	bf00      	nop
 800e0e4:	00070048 	.word	0x00070048
 800e0e8:	00070014 	.word	0x00070014

0800e0ec <ull_repeated_cw>:
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	4615      	mov	r5, r2
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	f7ff febf 	bl	800de78 <ull_setfinegraintxseq>
 800e0fa:	2d0f      	cmp	r5, #15
 800e0fc:	bfa8      	it	ge
 800e0fe:	250f      	movge	r5, #15
 800e100:	1e63      	subs	r3, r4, #1
 800e102:	2b03      	cmp	r3, #3
 800e104:	bf28      	it	cs
 800e106:	2404      	movcs	r4, #4
 800e108:	2310      	movs	r3, #16
 800e10a:	4123      	asrs	r3, r4
 800e10c:	2200      	movs	r2, #0
 800e10e:	4907      	ldr	r1, [pc, #28]	; (800e12c <ull_repeated_cw+0x40>)
 800e110:	4630      	mov	r0, r6
 800e112:	f7ff fe61 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e116:	1e63      	subs	r3, r4, #1
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	fa05 f303 	lsl.w	r3, r5, r3
 800e11e:	2200      	movs	r2, #0
 800e120:	4903      	ldr	r1, [pc, #12]	; (800e130 <ull_repeated_cw+0x44>)
 800e122:	4630      	mov	r0, r6
 800e124:	f7ff fe58 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e128:	bd70      	pop	{r4, r5, r6, pc}
 800e12a:	bf00      	nop
 800e12c:	00070028 	.word	0x00070028
 800e130:	00080018 	.word	0x00080018

0800e134 <ull_readrxdata>:
 800e134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e136:	b083      	sub	sp, #12
 800e138:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800e13a:	7ba4      	ldrb	r4, [r4, #14]
 800e13c:	2c03      	cmp	r4, #3
 800e13e:	bf0c      	ite	eq
 800e140:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800e144:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800e148:	189c      	adds	r4, r3, r2
 800e14a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e14e:	da19      	bge.n	800e184 <ull_readrxdata+0x50>
 800e150:	461d      	mov	r5, r3
 800e152:	4616      	mov	r6, r2
 800e154:	460f      	mov	r7, r1
 800e156:	4604      	mov	r4, r0
 800e158:	2b7f      	cmp	r3, #127	; 0x7f
 800e15a:	d915      	bls.n	800e188 <ull_readrxdata+0x54>
 800e15c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800e160:	2200      	movs	r2, #0
 800e162:	490d      	ldr	r1, [pc, #52]	; (800e198 <ull_readrxdata+0x64>)
 800e164:	f7ff fe38 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e168:	462b      	mov	r3, r5
 800e16a:	2200      	movs	r2, #0
 800e16c:	490b      	ldr	r1, [pc, #44]	; (800e19c <ull_readrxdata+0x68>)
 800e16e:	4620      	mov	r0, r4
 800e170:	f7ff fe32 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e174:	9700      	str	r7, [sp, #0]
 800e176:	4633      	mov	r3, r6
 800e178:	2200      	movs	r2, #0
 800e17a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800e17e:	4620      	mov	r0, r4
 800e180:	f7ff f941 	bl	800d406 <dwt_readfromdevice>
 800e184:	b003      	add	sp, #12
 800e186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e188:	9100      	str	r1, [sp, #0]
 800e18a:	4613      	mov	r3, r2
 800e18c:	462a      	mov	r2, r5
 800e18e:	4661      	mov	r1, ip
 800e190:	f7ff f939 	bl	800d406 <dwt_readfromdevice>
 800e194:	e7f6      	b.n	800e184 <ull_readrxdata+0x50>
 800e196:	bf00      	nop
 800e198:	001f0004 	.word	0x001f0004
 800e19c:	001f0008 	.word	0x001f0008

0800e1a0 <dwt_write8bitoffsetreg>:
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	ac04      	add	r4, sp, #16
 800e1a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800e1aa:	9400      	str	r4, [sp, #0]
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	b292      	uxth	r2, r2
 800e1b0:	f7ff fd9c 	bl	800dcec <dwt_writetodevice>
 800e1b4:	b004      	add	sp, #16
 800e1b6:	bd10      	pop	{r4, pc}

0800e1b8 <ull_getframelength>:
 800e1b8:	b510      	push	{r4, lr}
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e1be:	7b9b      	ldrb	r3, [r3, #14]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d013      	beq.n	800e1ec <ull_getframelength+0x34>
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	d11d      	bne.n	800e204 <ull_getframelength+0x4c>
 800e1c8:	23f0      	movs	r3, #240	; 0xf0
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	4912      	ldr	r1, [pc, #72]	; (800e218 <ull_getframelength+0x60>)
 800e1ce:	f7ff ffe7 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f7ff f934 	bl	800d446 <dwt_read16bitoffsetreg>
 800e1de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e1e0:	7ada      	ldrb	r2, [r3, #11]
 800e1e2:	b1a2      	cbz	r2, 800e20e <ull_getframelength+0x56>
 800e1e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e1e8:	83d8      	strh	r0, [r3, #30]
 800e1ea:	bd10      	pop	{r4, pc}
 800e1ec:	230f      	movs	r3, #15
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	4909      	ldr	r1, [pc, #36]	; (800e218 <ull_getframelength+0x60>)
 800e1f2:	f7ff ffd5 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f7ff f922 	bl	800d446 <dwt_read16bitoffsetreg>
 800e202:	e7ec      	b.n	800e1de <ull_getframelength+0x26>
 800e204:	2200      	movs	r2, #0
 800e206:	214c      	movs	r1, #76	; 0x4c
 800e208:	f7ff f91d 	bl	800d446 <dwt_read16bitoffsetreg>
 800e20c:	e7e7      	b.n	800e1de <ull_getframelength+0x26>
 800e20e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e212:	83d8      	strh	r0, [r3, #30]
 800e214:	e7e9      	b.n	800e1ea <ull_getframelength+0x32>
 800e216:	bf00      	nop
 800e218:	00010018 	.word	0x00010018

0800e21c <_dwt_clear_db_events>:
 800e21c:	b510      	push	{r4, lr}
 800e21e:	4604      	mov	r4, r0
 800e220:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e222:	7b9b      	ldrb	r3, [r3, #14]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d004      	beq.n	800e232 <_dwt_clear_db_events+0x16>
 800e228:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e22a:	7b9b      	ldrb	r3, [r3, #14]
 800e22c:	2b03      	cmp	r3, #3
 800e22e:	d006      	beq.n	800e23e <_dwt_clear_db_events+0x22>
 800e230:	bd10      	pop	{r4, pc}
 800e232:	230f      	movs	r3, #15
 800e234:	2200      	movs	r2, #0
 800e236:	4905      	ldr	r1, [pc, #20]	; (800e24c <_dwt_clear_db_events+0x30>)
 800e238:	f7ff ffb2 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e23c:	e7f4      	b.n	800e228 <_dwt_clear_db_events+0xc>
 800e23e:	23f0      	movs	r3, #240	; 0xf0
 800e240:	2200      	movs	r2, #0
 800e242:	4902      	ldr	r1, [pc, #8]	; (800e24c <_dwt_clear_db_events+0x30>)
 800e244:	4620      	mov	r0, r4
 800e246:	f7ff ffab 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e24a:	e7f1      	b.n	800e230 <_dwt_clear_db_events+0x14>
 800e24c:	00010018 	.word	0x00010018

0800e250 <ull_clearaonconfig>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4604      	mov	r4, r0
 800e254:	2300      	movs	r3, #0
 800e256:	461a      	mov	r2, r3
 800e258:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800e25c:	f7ff fd51 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e260:	2300      	movs	r3, #0
 800e262:	461a      	mov	r2, r3
 800e264:	4908      	ldr	r1, [pc, #32]	; (800e288 <ull_clearaonconfig+0x38>)
 800e266:	4620      	mov	r0, r4
 800e268:	f7ff ff9a 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e26c:	4d07      	ldr	r5, [pc, #28]	; (800e28c <ull_clearaonconfig+0x3c>)
 800e26e:	2300      	movs	r3, #0
 800e270:	461a      	mov	r2, r3
 800e272:	4629      	mov	r1, r5
 800e274:	4620      	mov	r0, r4
 800e276:	f7ff ff93 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e27a:	2302      	movs	r3, #2
 800e27c:	2200      	movs	r2, #0
 800e27e:	4629      	mov	r1, r5
 800e280:	4620      	mov	r0, r4
 800e282:	f7ff ff8d 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e286:	bd38      	pop	{r3, r4, r5, pc}
 800e288:	000a0014 	.word	0x000a0014
 800e28c:	000a0004 	.word	0x000a0004

0800e290 <ull_configeventcounters>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4605      	mov	r5, r0
 800e294:	460c      	mov	r4, r1
 800e296:	2302      	movs	r3, #2
 800e298:	2200      	movs	r2, #0
 800e29a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800e29e:	f7ff ff7f 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e2a2:	b904      	cbnz	r4, 800e2a6 <ull_configeventcounters+0x16>
 800e2a4:	bd38      	pop	{r3, r4, r5, pc}
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f7ff ff76 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e2b4:	e7f6      	b.n	800e2a4 <ull_configeventcounters+0x14>
	...

0800e2b8 <ull_aon_read>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	2200      	movs	r2, #0
 800e2c0:	490a      	ldr	r1, [pc, #40]	; (800e2ec <ull_aon_read+0x34>)
 800e2c2:	f7ff fd1e 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e2c6:	4d0a      	ldr	r5, [pc, #40]	; (800e2f0 <ull_aon_read+0x38>)
 800e2c8:	2388      	movs	r3, #136	; 0x88
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f7ff ff66 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f7ff ff60 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	4904      	ldr	r1, [pc, #16]	; (800e2f4 <ull_aon_read+0x3c>)
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f7ff f8ed 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800e2ea:	bd38      	pop	{r3, r4, r5, pc}
 800e2ec:	000a000c 	.word	0x000a000c
 800e2f0:	000a0004 	.word	0x000a0004
 800e2f4:	000a0008 	.word	0x000a0008

0800e2f8 <ull_aon_write>:
 800e2f8:	b570      	push	{r4, r5, r6, lr}
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4615      	mov	r5, r2
 800e300:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e304:	bf34      	ite	cc
 800e306:	2600      	movcc	r6, #0
 800e308:	2620      	movcs	r6, #32
 800e30a:	2200      	movs	r2, #0
 800e30c:	490b      	ldr	r1, [pc, #44]	; (800e33c <ull_aon_write+0x44>)
 800e30e:	f7ff fcf8 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e312:	462b      	mov	r3, r5
 800e314:	2200      	movs	r2, #0
 800e316:	490a      	ldr	r1, [pc, #40]	; (800e340 <ull_aon_write+0x48>)
 800e318:	4620      	mov	r0, r4
 800e31a:	f7ff ff41 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e31e:	4d09      	ldr	r5, [pc, #36]	; (800e344 <ull_aon_write+0x4c>)
 800e320:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800e324:	2200      	movs	r2, #0
 800e326:	4629      	mov	r1, r5
 800e328:	4620      	mov	r0, r4
 800e32a:	f7ff ff39 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e32e:	2300      	movs	r3, #0
 800e330:	461a      	mov	r2, r3
 800e332:	4629      	mov	r1, r5
 800e334:	4620      	mov	r0, r4
 800e336:	f7ff ff33 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e33a:	bd70      	pop	{r4, r5, r6, pc}
 800e33c:	000a000c 	.word	0x000a000c
 800e340:	000a0010 	.word	0x000a0010
 800e344:	000a0004 	.word	0x000a0004

0800e348 <ull_configuresleep>:
 800e348:	b570      	push	{r4, r5, r6, lr}
 800e34a:	4604      	mov	r4, r0
 800e34c:	460d      	mov	r5, r1
 800e34e:	4616      	mov	r6, r2
 800e350:	2200      	movs	r2, #0
 800e352:	f240 110b 	movw	r1, #267	; 0x10b
 800e356:	f7ff ffcf 	bl	800e2f8 <ull_aon_write>
 800e35a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e35e:	4620      	mov	r0, r4
 800e360:	f7ff ffaa 	bl	800e2b8 <ull_aon_read>
 800e364:	f000 021f 	and.w	r2, r0, #31
 800e368:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e36c:	4620      	mov	r0, r4
 800e36e:	f7ff ffc3 	bl	800e2f8 <ull_aon_write>
 800e372:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e374:	8a1a      	ldrh	r2, [r3, #16]
 800e376:	4315      	orrs	r5, r2
 800e378:	821d      	strh	r5, [r3, #16]
 800e37a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e37c:	8a13      	ldrh	r3, [r2, #16]
 800e37e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800e382:	bf1c      	itt	ne
 800e384:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800e388:	8213      	strhne	r3, [r2, #16]
 800e38a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e38c:	8a1b      	ldrh	r3, [r3, #16]
 800e38e:	2200      	movs	r2, #0
 800e390:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800e394:	4620      	mov	r0, r4
 800e396:	f7ff fcb4 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e39a:	4633      	mov	r3, r6
 800e39c:	2200      	movs	r2, #0
 800e39e:	4902      	ldr	r1, [pc, #8]	; (800e3a8 <ull_configuresleep+0x60>)
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f7ff fefd 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	000a0014 	.word	0x000a0014

0800e3ac <ull_setplenfine>:
 800e3ac:	b508      	push	{r3, lr}
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	2124      	movs	r1, #36	; 0x24
 800e3b4:	f7ff fef4 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e3b8:	bd08      	pop	{r3, pc}
	...

0800e3bc <ull_update_nonce_GCM>:
 800e3bc:	b500      	push	{lr}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	9100      	str	r1, [sp, #0]
 800e3c2:	230c      	movs	r3, #12
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	4903      	ldr	r1, [pc, #12]	; (800e3d4 <ull_update_nonce_GCM+0x18>)
 800e3c8:	f7ff fc90 	bl	800dcec <dwt_writetodevice>
 800e3cc:	b003      	add	sp, #12
 800e3ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3d2:	bf00      	nop
 800e3d4:	00010034 	.word	0x00010034

0800e3d8 <ull_update_nonce_CCM>:
 800e3d8:	b500      	push	{lr}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	4613      	mov	r3, r2
 800e3de:	7a8a      	ldrb	r2, [r1, #10]
 800e3e0:	f88d 2008 	strb.w	r2, [sp, #8]
 800e3e4:	7a4a      	ldrb	r2, [r1, #9]
 800e3e6:	f88d 2009 	strb.w	r2, [sp, #9]
 800e3ea:	7a0a      	ldrb	r2, [r1, #8]
 800e3ec:	f88d 200a 	strb.w	r2, [sp, #10]
 800e3f0:	79ca      	ldrb	r2, [r1, #7]
 800e3f2:	f88d 200b 	strb.w	r2, [sp, #11]
 800e3f6:	798a      	ldrb	r2, [r1, #6]
 800e3f8:	f88d 200c 	strb.w	r2, [sp, #12]
 800e3fc:	794a      	ldrb	r2, [r1, #5]
 800e3fe:	f88d 200d 	strb.w	r2, [sp, #13]
 800e402:	790a      	ldrb	r2, [r1, #4]
 800e404:	f88d 200e 	strb.w	r2, [sp, #14]
 800e408:	78ca      	ldrb	r2, [r1, #3]
 800e40a:	f88d 200f 	strb.w	r2, [sp, #15]
 800e40e:	788a      	ldrb	r2, [r1, #2]
 800e410:	f88d 2010 	strb.w	r2, [sp, #16]
 800e414:	784a      	ldrb	r2, [r1, #1]
 800e416:	f88d 2011 	strb.w	r2, [sp, #17]
 800e41a:	780a      	ldrb	r2, [r1, #0]
 800e41c:	f88d 2012 	strb.w	r2, [sp, #18]
 800e420:	2200      	movs	r2, #0
 800e422:	f88d 2013 	strb.w	r2, [sp, #19]
 800e426:	f88d 3014 	strb.w	r3, [sp, #20]
 800e42a:	0a1b      	lsrs	r3, r3, #8
 800e42c:	f88d 3015 	strb.w	r3, [sp, #21]
 800e430:	7b0b      	ldrb	r3, [r1, #12]
 800e432:	f88d 3016 	strb.w	r3, [sp, #22]
 800e436:	7acb      	ldrb	r3, [r1, #11]
 800e438:	f88d 3017 	strb.w	r3, [sp, #23]
 800e43c:	ab02      	add	r3, sp, #8
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	2310      	movs	r3, #16
 800e442:	4903      	ldr	r1, [pc, #12]	; (800e450 <ull_update_nonce_CCM+0x78>)
 800e444:	f7ff fc52 	bl	800dcec <dwt_writetodevice>
 800e448:	b007      	add	sp, #28
 800e44a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e44e:	bf00      	nop
 800e450:	00010034 	.word	0x00010034

0800e454 <ull_writetxdata>:
 800e454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e456:	b083      	sub	sp, #12
 800e458:	185c      	adds	r4, r3, r1
 800e45a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e45e:	da24      	bge.n	800e4aa <ull_writetxdata+0x56>
 800e460:	461c      	mov	r4, r3
 800e462:	4617      	mov	r7, r2
 800e464:	460e      	mov	r6, r1
 800e466:	4605      	mov	r5, r0
 800e468:	2b7f      	cmp	r3, #127	; 0x7f
 800e46a:	d915      	bls.n	800e498 <ull_writetxdata+0x44>
 800e46c:	2314      	movs	r3, #20
 800e46e:	2200      	movs	r2, #0
 800e470:	490f      	ldr	r1, [pc, #60]	; (800e4b0 <ull_writetxdata+0x5c>)
 800e472:	f7ff fcb1 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e476:	4623      	mov	r3, r4
 800e478:	2200      	movs	r2, #0
 800e47a:	490e      	ldr	r1, [pc, #56]	; (800e4b4 <ull_writetxdata+0x60>)
 800e47c:	4628      	mov	r0, r5
 800e47e:	f7ff fcab 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e482:	9700      	str	r7, [sp, #0]
 800e484:	4633      	mov	r3, r6
 800e486:	2200      	movs	r2, #0
 800e488:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800e48c:	4628      	mov	r0, r5
 800e48e:	f7ff fc2d 	bl	800dcec <dwt_writetodevice>
 800e492:	2000      	movs	r0, #0
 800e494:	b003      	add	sp, #12
 800e496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e498:	9200      	str	r2, [sp, #0]
 800e49a:	460b      	mov	r3, r1
 800e49c:	4622      	mov	r2, r4
 800e49e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800e4a2:	f7ff fc23 	bl	800dcec <dwt_writetodevice>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	e7f4      	b.n	800e494 <ull_writetxdata+0x40>
 800e4aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4ae:	e7f1      	b.n	800e494 <ull_writetxdata+0x40>
 800e4b0:	001f0004 	.word	0x001f0004
 800e4b4:	001f0008 	.word	0x001f0008

0800e4b8 <ull_signal_rx_buff_free>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	4604      	mov	r4, r0
 800e4be:	2302      	movs	r3, #2
 800e4c0:	9301      	str	r3, [sp, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	9200      	str	r2, [sp, #0]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	2113      	movs	r1, #19
 800e4ca:	f7fe ff1e 	bl	800d30a <dwt_xfer3xxx>
 800e4ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e4d0:	7b9a      	ldrb	r2, [r3, #14]
 800e4d2:	2a03      	cmp	r2, #3
 800e4d4:	bf0c      	ite	eq
 800e4d6:	2201      	moveq	r2, #1
 800e4d8:	2203      	movne	r2, #3
 800e4da:	739a      	strb	r2, [r3, #14]
 800e4dc:	b002      	add	sp, #8
 800e4de:	bd10      	pop	{r4, pc}

0800e4e0 <ull_isr>:
 800e4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800e4ec:	f7fe ffea 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	2144      	movs	r1, #68	; 0x44
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f7fe ff8f 	bl	800d41a <dwt_read32bitoffsetreg>
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e500:	2200      	movs	r2, #0
 800e502:	83da      	strh	r2, [r3, #30]
 800e504:	f883 2020 	strb.w	r2, [r3, #32]
 800e508:	619a      	str	r2, [r3, #24]
 800e50a:	839a      	strh	r2, [r3, #28]
 800e50c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800e510:	625a      	str	r2, [r3, #36]	; 0x24
 800e512:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e514:	625c      	str	r4, [r3, #36]	; 0x24
 800e516:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e518:	7b9f      	ldrb	r7, [r3, #14]
 800e51a:	2f00      	cmp	r7, #0
 800e51c:	d17f      	bne.n	800e61e <ull_isr+0x13e>
 800e51e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e520:	619e      	str	r6, [r3, #24]
 800e522:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800e526:	f898 3015 	ldrb.w	r3, [r8, #21]
 800e52a:	f003 0303 	and.w	r3, r3, #3
 800e52e:	2b03      	cmp	r3, #3
 800e530:	f000 8090 	beq.w	800e654 <ull_isr+0x174>
 800e534:	f015 0f80 	tst.w	r5, #128	; 0x80
 800e538:	f040 8093 	bne.w	800e662 <ull_isr+0x182>
 800e53c:	f015 0f01 	tst.w	r5, #1
 800e540:	f040 80c1 	bne.w	800e6c6 <ull_isr+0x1e6>
 800e544:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e548:	d00b      	beq.n	800e562 <ull_isr+0x82>
 800e54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e54c:	b113      	cbz	r3, 800e554 <ull_isr+0x74>
 800e54e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e550:	3018      	adds	r0, #24
 800e552:	4798      	blx	r3
 800e554:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800e558:	2202      	movs	r2, #2
 800e55a:	2144      	movs	r1, #68	; 0x44
 800e55c:	4620      	mov	r0, r4
 800e55e:	f7ff fbd0 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e562:	f015 0f08 	tst.w	r5, #8
 800e566:	d107      	bne.n	800e578 <ull_isr+0x98>
 800e568:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e56a:	7b9b      	ldrb	r3, [r3, #14]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 80ea 	beq.w	800e746 <ull_isr+0x266>
 800e572:	2f00      	cmp	r7, #0
 800e574:	f000 80e7 	beq.w	800e746 <ull_isr+0x266>
 800e578:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2020 	strb.w	r2, [r3, #32]
 800e580:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800e584:	f000 80ad 	beq.w	800e6e2 <ull_isr+0x202>
 800e588:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e58a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e58e:	f043 0308 	orr.w	r3, r3, #8
 800e592:	f882 3020 	strb.w	r3, [r2, #32]
 800e596:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800e59a:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800e59e:	d008      	beq.n	800e5b2 <ull_isr+0xd2>
 800e5a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e5a2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e5a6:	f043 0310 	orr.w	r3, r3, #16
 800e5aa:	f882 3020 	strb.w	r3, [r2, #32]
 800e5ae:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800e5b2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e5b6:	d006      	beq.n	800e5c6 <ull_isr+0xe6>
 800e5b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e5ba:	7d53      	ldrb	r3, [r2, #21]
 800e5bc:	f003 0303 	and.w	r3, r3, #3
 800e5c0:	2b03      	cmp	r3, #3
 800e5c2:	f000 809a 	beq.w	800e6fa <ull_isr+0x21a>
 800e5c6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800e5ca:	f040 80a2 	bne.w	800e712 <ull_isr+0x232>
 800e5ce:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2144      	movs	r1, #68	; 0x44
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f7ff fbfe 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f7ff fe1d 	bl	800e21c <_dwt_clear_db_events>
 800e5e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e5e4:	8bc3      	ldrh	r3, [r0, #30]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f040 80a2 	bne.w	800e730 <ull_isr+0x250>
 800e5ec:	7d43      	ldrb	r3, [r0, #21]
 800e5ee:	f003 0303 	and.w	r3, r3, #3
 800e5f2:	2b03      	cmp	r3, #3
 800e5f4:	f000 809c 	beq.w	800e730 <ull_isr+0x250>
 800e5f8:	6983      	ldr	r3, [r0, #24]
 800e5fa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800e5fe:	6183      	str	r3, [r0, #24]
 800e600:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e602:	6993      	ldr	r3, [r2, #24]
 800e604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e608:	6193      	str	r3, [r2, #24]
 800e60a:	69e3      	ldr	r3, [r4, #28]
 800e60c:	b113      	cbz	r3, 800e614 <ull_isr+0x134>
 800e60e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e610:	3018      	adds	r0, #24
 800e612:	4798      	blx	r3
 800e614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e616:	2200      	movs	r2, #0
 800e618:	f883 2020 	strb.w	r2, [r3, #32]
 800e61c:	e08c      	b.n	800e738 <ull_isr+0x258>
 800e61e:	496d      	ldr	r1, [pc, #436]	; (800e7d4 <ull_isr+0x2f4>)
 800e620:	4620      	mov	r0, r4
 800e622:	f7fe ff4f 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800e626:	4607      	mov	r7, r0
 800e628:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e62a:	7b9b      	ldrb	r3, [r3, #14]
 800e62c:	2b03      	cmp	r3, #3
 800e62e:	bf08      	it	eq
 800e630:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800e634:	f017 0f01 	tst.w	r7, #1
 800e638:	bf18      	it	ne
 800e63a:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800e63e:	f017 0f02 	tst.w	r7, #2
 800e642:	bf18      	it	ne
 800e644:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800e648:	f017 0f04 	tst.w	r7, #4
 800e64c:	bf18      	it	ne
 800e64e:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800e652:	e764      	b.n	800e51e <ull_isr+0x3e>
 800e654:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800e658:	bf1c      	itt	ne
 800e65a:	f045 0508 	orrne.w	r5, r5, #8
 800e65e:	b2ed      	uxtbne	r5, r5
 800e660:	e768      	b.n	800e534 <ull_isr+0x54>
 800e662:	2200      	movs	r2, #0
 800e664:	2148      	movs	r1, #72	; 0x48
 800e666:	4620      	mov	r0, r4
 800e668:	f7fe feed 	bl	800d446 <dwt_read16bitoffsetreg>
 800e66c:	f8a8 001c 	strh.w	r0, [r8, #28]
 800e670:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e672:	7d1a      	ldrb	r2, [r3, #20]
 800e674:	b11a      	cbz	r2, 800e67e <ull_isr+0x19e>
 800e676:	699a      	ldr	r2, [r3, #24]
 800e678:	f012 0f04 	tst.w	r2, #4
 800e67c:	d103      	bne.n	800e686 <ull_isr+0x1a6>
 800e67e:	8b9b      	ldrh	r3, [r3, #28]
 800e680:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800e684:	b18b      	cbz	r3, 800e6aa <ull_isr+0x1ca>
 800e686:	2304      	movs	r3, #4
 800e688:	2200      	movs	r2, #0
 800e68a:	2144      	movs	r1, #68	; 0x44
 800e68c:	4620      	mov	r0, r4
 800e68e:	f7ff fd87 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e692:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800e696:	2200      	movs	r2, #0
 800e698:	2148      	movs	r1, #72	; 0x48
 800e69a:	4620      	mov	r0, r4
 800e69c:	f7ff fb31 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e6a0:	6a23      	ldr	r3, [r4, #32]
 800e6a2:	b113      	cbz	r3, 800e6aa <ull_isr+0x1ca>
 800e6a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e6a6:	3018      	adds	r0, #24
 800e6a8:	4798      	blx	r3
 800e6aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e6ac:	8b9b      	ldrh	r3, [r3, #28]
 800e6ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e6b2:	f43f af43 	beq.w	800e53c <ull_isr+0x5c>
 800e6b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	2148      	movs	r1, #72	; 0x48
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7ff fb1f 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e6c4:	e73a      	b.n	800e53c <ull_isr+0x5c>
 800e6c6:	23f8      	movs	r3, #248	; 0xf8
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	2144      	movs	r1, #68	; 0x44
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f7ff fd67 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f43f af35 	beq.w	800e544 <ull_isr+0x64>
 800e6da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e6dc:	3018      	adds	r0, #24
 800e6de:	4798      	blx	r3
 800e6e0:	e730      	b.n	800e544 <ull_isr+0x64>
 800e6e2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800e6e6:	bf1f      	itttt	ne
 800e6e8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800e6ea:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800e6ee:	f043 0304 	orrne.w	r3, r3, #4
 800e6f2:	f882 3020 	strbne.w	r3, [r2, #32]
 800e6f6:	2700      	movs	r7, #0
 800e6f8:	e74f      	b.n	800e59a <ull_isr+0xba>
 800e6fa:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e6fe:	f043 0302 	orr.w	r3, r3, #2
 800e702:	f882 3020 	strb.w	r3, [r2, #32]
 800e706:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e708:	2200      	movs	r2, #0
 800e70a:	83da      	strh	r2, [r3, #30]
 800e70c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800e710:	e75d      	b.n	800e5ce <ull_isr+0xee>
 800e712:	4620      	mov	r0, r4
 800e714:	f7ff fd50 	bl	800e1b8 <ull_getframelength>
 800e718:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800e71c:	f43f af57 	beq.w	800e5ce <ull_isr+0xee>
 800e720:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e722:	f892 3020 	ldrb.w	r3, [r2, #32]
 800e726:	f043 0301 	orr.w	r3, r3, #1
 800e72a:	f882 3020 	strb.w	r3, [r2, #32]
 800e72e:	e74e      	b.n	800e5ce <ull_isr+0xee>
 800e730:	6963      	ldr	r3, [r4, #20]
 800e732:	b10b      	cbz	r3, 800e738 <ull_isr+0x258>
 800e734:	3018      	adds	r0, #24
 800e736:	4798      	blx	r3
 800e738:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e73a:	7b9b      	ldrb	r3, [r3, #14]
 800e73c:	bb03      	cbnz	r3, 800e780 <ull_isr+0x2a0>
 800e73e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e740:	2200      	movs	r2, #0
 800e742:	f883 2020 	strb.w	r2, [r3, #32]
 800e746:	f015 0f10 	tst.w	r5, #16
 800e74a:	d11d      	bne.n	800e788 <ull_isr+0x2a8>
 800e74c:	f015 0f20 	tst.w	r5, #32
 800e750:	d12d      	bne.n	800e7ae <ull_isr+0x2ce>
 800e752:	2200      	movs	r2, #0
 800e754:	4920      	ldr	r1, [pc, #128]	; (800e7d8 <ull_isr+0x2f8>)
 800e756:	4620      	mov	r0, r4
 800e758:	f7fe feb4 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800e75c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e75e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800e762:	f010 0303 	ands.w	r3, r0, #3
 800e766:	d009      	beq.n	800e77c <ull_isr+0x29c>
 800e768:	2200      	movs	r2, #0
 800e76a:	491b      	ldr	r1, [pc, #108]	; (800e7d8 <ull_isr+0x2f8>)
 800e76c:	4620      	mov	r0, r4
 800e76e:	f7ff fd17 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800e772:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e774:	b113      	cbz	r3, 800e77c <ull_isr+0x29c>
 800e776:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e778:	3018      	adds	r0, #24
 800e77a:	4798      	blx	r3
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	4620      	mov	r0, r4
 800e782:	f7ff fe99 	bl	800e4b8 <ull_signal_rx_buff_free>
 800e786:	e7da      	b.n	800e73e <ull_isr+0x25e>
 800e788:	4b14      	ldr	r3, [pc, #80]	; (800e7dc <ull_isr+0x2fc>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	2144      	movs	r1, #68	; 0x44
 800e78e:	4620      	mov	r0, r4
 800e790:	f7ff fb22 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e794:	4620      	mov	r0, r4
 800e796:	f7ff fd41 	bl	800e21c <_dwt_clear_db_events>
 800e79a:	69e3      	ldr	r3, [r4, #28]
 800e79c:	b113      	cbz	r3, 800e7a4 <ull_isr+0x2c4>
 800e79e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e7a0:	3018      	adds	r0, #24
 800e7a2:	4798      	blx	r3
 800e7a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 2020 	strb.w	r2, [r3, #32]
 800e7ac:	e7ce      	b.n	800e74c <ull_isr+0x26c>
 800e7ae:	4b0c      	ldr	r3, [pc, #48]	; (800e7e0 <ull_isr+0x300>)
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	2144      	movs	r1, #68	; 0x44
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f7ff fb0f 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f7ff fd2e 	bl	800e21c <_dwt_clear_db_events>
 800e7c0:	69a3      	ldr	r3, [r4, #24]
 800e7c2:	b113      	cbz	r3, 800e7ca <ull_isr+0x2ea>
 800e7c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e7c6:	3018      	adds	r0, #24
 800e7c8:	4798      	blx	r3
 800e7ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 2020 	strb.w	r2, [r3, #32]
 800e7d2:	e7be      	b.n	800e752 <ull_isr+0x272>
 800e7d4:	00010018 	.word	0x00010018
 800e7d8:	00110038 	.word	0x00110038
 800e7dc:	34059400 	.word	0x34059400
 800e7e0:	10220400 	.word	0x10220400

0800e7e4 <dwt_modify32bitoffsetreg>:
 800e7e4:	b530      	push	{r4, r5, lr}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	9c08      	ldr	r4, [sp, #32]
 800e7ea:	f88d 3008 	strb.w	r3, [sp, #8]
 800e7ee:	0a1d      	lsrs	r5, r3, #8
 800e7f0:	f88d 5009 	strb.w	r5, [sp, #9]
 800e7f4:	0c1d      	lsrs	r5, r3, #16
 800e7f6:	f88d 500a 	strb.w	r5, [sp, #10]
 800e7fa:	0e1b      	lsrs	r3, r3, #24
 800e7fc:	f88d 300b 	strb.w	r3, [sp, #11]
 800e800:	f88d 400c 	strb.w	r4, [sp, #12]
 800e804:	0a23      	lsrs	r3, r4, #8
 800e806:	f88d 300d 	strb.w	r3, [sp, #13]
 800e80a:	0c23      	lsrs	r3, r4, #16
 800e80c:	f88d 300e 	strb.w	r3, [sp, #14]
 800e810:	0e24      	lsrs	r4, r4, #24
 800e812:	f88d 400f 	strb.w	r4, [sp, #15]
 800e816:	f248 0303 	movw	r3, #32771	; 0x8003
 800e81a:	9301      	str	r3, [sp, #4]
 800e81c:	ab02      	add	r3, sp, #8
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	2308      	movs	r3, #8
 800e822:	b292      	uxth	r2, r2
 800e824:	f7fe fd71 	bl	800d30a <dwt_xfer3xxx>
 800e828:	b005      	add	sp, #20
 800e82a:	bd30      	pop	{r4, r5, pc}

0800e82c <ull_enablegpioclocks>:
 800e82c:	b500      	push	{lr}
 800e82e:	b083      	sub	sp, #12
 800e830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e83a:	2200      	movs	r2, #0
 800e83c:	4902      	ldr	r1, [pc, #8]	; (800e848 <ull_enablegpioclocks+0x1c>)
 800e83e:	f7ff ffd1 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800e842:	b003      	add	sp, #12
 800e844:	f85d fb04 	ldr.w	pc, [sp], #4
 800e848:	00110004 	.word	0x00110004

0800e84c <ull_enable_rf_tx>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	4604      	mov	r4, r0
 800e852:	460e      	mov	r6, r1
 800e854:	4d13      	ldr	r5, [pc, #76]	; (800e8a4 <ull_enable_rf_tx+0x58>)
 800e856:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e860:	2200      	movs	r2, #0
 800e862:	4629      	mov	r1, r5
 800e864:	f7ff ffbe 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800e868:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e872:	2200      	movs	r2, #0
 800e874:	4629      	mov	r1, r5
 800e876:	4620      	mov	r0, r4
 800e878:	f7ff ffb4 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800e87c:	4b0a      	ldr	r3, [pc, #40]	; (800e8a8 <ull_enable_rf_tx+0x5c>)
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e884:	2200      	movs	r2, #0
 800e886:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800e88a:	4620      	mov	r0, r4
 800e88c:	f7ff ffaa 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800e890:	b90e      	cbnz	r6, 800e896 <ull_enable_rf_tx+0x4a>
 800e892:	b002      	add	sp, #8
 800e894:	bd70      	pop	{r4, r5, r6, pc}
 800e896:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <ull_enable_rf_tx+0x60>)
 800e898:	2200      	movs	r2, #0
 800e89a:	4905      	ldr	r1, [pc, #20]	; (800e8b0 <ull_enable_rf_tx+0x64>)
 800e89c:	4620      	mov	r0, r4
 800e89e:	f7ff fa9b 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800e8a2:	e7f6      	b.n	800e892 <ull_enable_rf_tx+0x46>
 800e8a4:	00070048 	.word	0x00070048
 800e8a8:	02003c00 	.word	0x02003c00
 800e8ac:	01011100 	.word	0x01011100
 800e8b0:	00070014 	.word	0x00070014

0800e8b4 <ull_enable_rftx_blocks>:
 800e8b4:	b500      	push	{lr}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	4b05      	ldr	r3, [pc, #20]	; (800e8d0 <ull_enable_rftx_blocks+0x1c>)
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	4904      	ldr	r1, [pc, #16]	; (800e8d4 <ull_enable_rftx_blocks+0x20>)
 800e8c4:	f7ff ff8e 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800e8c8:	b003      	add	sp, #12
 800e8ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8ce:	bf00      	nop
 800e8d0:	02003c00 	.word	0x02003c00
 800e8d4:	00070004 	.word	0x00070004

0800e8d8 <_dwt_otpprogword32>:
 800e8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	b083      	sub	sp, #12
 800e8de:	4604      	mov	r4, r0
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	4617      	mov	r7, r2
 800e8e4:	4e56      	ldr	r6, [pc, #344]	; (800ea40 <_dwt_otpprogword32+0x168>)
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	4631      	mov	r1, r6
 800e8ea:	f7fe fd96 	bl	800d41a <dwt_read32bitoffsetreg>
 800e8ee:	4681      	mov	r9, r0
 800e8f0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff ff70 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800e904:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800ea44 <_dwt_otpprogword32+0x16c>
 800e908:	2318      	movs	r3, #24
 800e90a:	2200      	movs	r2, #0
 800e90c:	4641      	mov	r1, r8
 800e90e:	4620      	mov	r0, r4
 800e910:	f7ff f9f7 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e914:	2125      	movs	r1, #37	; 0x25
 800e916:	4620      	mov	r0, r4
 800e918:	f7ff fa28 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e91c:	2102      	movs	r1, #2
 800e91e:	4620      	mov	r0, r4
 800e920:	f7ff fa24 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e924:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800e928:	4620      	mov	r0, r4
 800e92a:	f7ff fa1f 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e92e:	b2f9      	uxtb	r1, r7
 800e930:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e934:	4620      	mov	r0, r4
 800e936:	f7ff fa19 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e93a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e93e:	4620      	mov	r0, r4
 800e940:	f7ff fa14 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e944:	2100      	movs	r1, #0
 800e946:	4620      	mov	r0, r4
 800e948:	f7ff fa10 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e94c:	2102      	movs	r1, #2
 800e94e:	4620      	mov	r0, r4
 800e950:	f7ff fa0c 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e954:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800e958:	4620      	mov	r0, r4
 800e95a:	f7ff fa07 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e95e:	b2e9      	uxtb	r1, r5
 800e960:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e964:	4620      	mov	r0, r4
 800e966:	f7ff fa01 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e96a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800e96e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e972:	4620      	mov	r0, r4
 800e974:	f7ff f9fa 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e978:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800e97c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e980:	4620      	mov	r0, r4
 800e982:	f7ff f9f3 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e986:	0e29      	lsrs	r1, r5, #24
 800e988:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e98c:	4620      	mov	r0, r4
 800e98e:	f7ff f9ed 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e992:	2100      	movs	r1, #0
 800e994:	4620      	mov	r0, r4
 800e996:	f7ff f9e9 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e99a:	213a      	movs	r1, #58	; 0x3a
 800e99c:	4620      	mov	r0, r4
 800e99e:	f7ff f9e5 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e9a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7ff f9e0 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e9ac:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f7ff f9db 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f7ff f9d7 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e9be:	213a      	movs	r1, #58	; 0x3a
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f7ff f9d3 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e9c6:	f240 1101 	movw	r1, #257	; 0x101
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f7ff f9ce 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f7ff f992 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e9de:	2300      	movs	r3, #0
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f7ff f98b 	bl	800dd02 <dwt_write16bitoffsetreg>
 800e9ec:	2002      	movs	r0, #2
 800e9ee:	f7f1 ff2d 	bl	800084c <deca_sleep>
 800e9f2:	213a      	movs	r1, #58	; 0x3a
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f7ff f9b9 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800e9fa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f7ff f9b4 	bl	800dd6c <__dwt_otp_write_wdata_id_reg>
 800ea04:	2302      	movs	r3, #2
 800ea06:	2200      	movs	r2, #0
 800ea08:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f7ff f978 	bl	800dd02 <dwt_write16bitoffsetreg>
 800ea12:	2300      	movs	r3, #0
 800ea14:	461a      	mov	r2, r3
 800ea16:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f7ff f971 	bl	800dd02 <dwt_write16bitoffsetreg>
 800ea20:	2300      	movs	r3, #0
 800ea22:	461a      	mov	r2, r3
 800ea24:	4641      	mov	r1, r8
 800ea26:	4620      	mov	r0, r4
 800ea28:	f7ff f96b 	bl	800dd02 <dwt_write16bitoffsetreg>
 800ea2c:	464b      	mov	r3, r9
 800ea2e:	2200      	movs	r2, #0
 800ea30:	4631      	mov	r1, r6
 800ea32:	4620      	mov	r0, r4
 800ea34:	f7ff f9d0 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ea38:	b003      	add	sp, #12
 800ea3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea3e:	bf00      	nop
 800ea40:	00070044 	.word	0x00070044
 800ea44:	000b0008 	.word	0x000b0008

0800ea48 <ull_setgpiomode>:
 800ea48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	2400      	movs	r4, #0
 800ea4e:	4623      	mov	r3, r4
 800ea50:	2601      	movs	r6, #1
 800ea52:	2707      	movs	r7, #7
 800ea54:	e002      	b.n	800ea5c <ull_setgpiomode+0x14>
 800ea56:	3401      	adds	r4, #1
 800ea58:	2c09      	cmp	r4, #9
 800ea5a:	d009      	beq.n	800ea70 <ull_setgpiomode+0x28>
 800ea5c:	fa06 f504 	lsl.w	r5, r6, r4
 800ea60:	420d      	tst	r5, r1
 800ea62:	d0f8      	beq.n	800ea56 <ull_setgpiomode+0xe>
 800ea64:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800ea68:	fa07 f505 	lsl.w	r5, r7, r5
 800ea6c:	432b      	orrs	r3, r5
 800ea6e:	e7f2      	b.n	800ea56 <ull_setgpiomode+0xe>
 800ea70:	401a      	ands	r2, r3
 800ea72:	9200      	str	r2, [sp, #0]
 800ea74:	43db      	mvns	r3, r3
 800ea76:	2200      	movs	r2, #0
 800ea78:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ea7c:	f7ff feb2 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800ea80:	b003      	add	sp, #12
 800ea82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea84 <ull_writetxfctrl>:
 800ea84:	b500      	push	{lr}
 800ea86:	b083      	sub	sp, #12
 800ea88:	2a7f      	cmp	r2, #127	; 0x7f
 800ea8a:	bf88      	it	hi
 800ea8c:	3280      	addhi	r2, #128	; 0x80
 800ea8e:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800ea92:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ea96:	9100      	str	r1, [sp, #0]
 800ea98:	4b03      	ldr	r3, [pc, #12]	; (800eaa8 <ull_writetxfctrl+0x24>)
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	2120      	movs	r1, #32
 800ea9e:	f7ff fea1 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800eaa2:	b003      	add	sp, #12
 800eaa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800eaa8:	fc00f400 	.word	0xfc00f400

0800eaac <prs_sys_status_and_or>:
 800eaac:	b500      	push	{lr}
 800eaae:	b083      	sub	sp, #12
 800eab0:	9200      	str	r2, [sp, #0]
 800eab2:	460b      	mov	r3, r1
 800eab4:	2200      	movs	r2, #0
 800eab6:	2144      	movs	r1, #68	; 0x44
 800eab8:	f7ff fe94 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800eabc:	2000      	movs	r0, #0
 800eabe:	b003      	add	sp, #12
 800eac0:	f85d fb04 	ldr.w	pc, [sp], #4

0800eac4 <dwt_modify8bitoffsetreg>:
 800eac4:	b500      	push	{lr}
 800eac6:	b085      	sub	sp, #20
 800eac8:	f88d 300c 	strb.w	r3, [sp, #12]
 800eacc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ead0:	f88d 300d 	strb.w	r3, [sp, #13]
 800ead4:	f248 0301 	movw	r3, #32769	; 0x8001
 800ead8:	9301      	str	r3, [sp, #4]
 800eada:	ab03      	add	r3, sp, #12
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	2302      	movs	r3, #2
 800eae0:	b292      	uxth	r2, r2
 800eae2:	f7fe fc12 	bl	800d30a <dwt_xfer3xxx>
 800eae6:	b005      	add	sp, #20
 800eae8:	f85d fb04 	ldr.w	pc, [sp], #4

0800eaec <ull_enablespicrccheck>:
 800eaec:	b570      	push	{r4, r5, r6, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	460d      	mov	r5, r1
 800eaf4:	b159      	cbz	r1, 800eb0e <ull_enablespicrccheck+0x22>
 800eaf6:	4616      	mov	r6, r2
 800eaf8:	2340      	movs	r3, #64	; 0x40
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	23ff      	movs	r3, #255	; 0xff
 800eafe:	2200      	movs	r2, #0
 800eb00:	2110      	movs	r1, #16
 800eb02:	f7ff ffdf 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800eb06:	2d02      	cmp	r5, #2
 800eb08:	d107      	bne.n	800eb1a <ull_enablespicrccheck+0x2e>
 800eb0a:	60e6      	str	r6, [r4, #12]
 800eb0c:	e005      	b.n	800eb1a <ull_enablespicrccheck+0x2e>
 800eb0e:	2200      	movs	r2, #0
 800eb10:	9200      	str	r2, [sp, #0]
 800eb12:	23bf      	movs	r3, #191	; 0xbf
 800eb14:	2110      	movs	r1, #16
 800eb16:	f7ff ffd5 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800eb1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb1c:	751d      	strb	r5, [r3, #20]
 800eb1e:	b002      	add	sp, #8
 800eb20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb24 <ull_configciadiag>:
 800eb24:	b530      	push	{r4, r5, lr}
 800eb26:	b083      	sub	sp, #12
 800eb28:	4604      	mov	r4, r0
 800eb2a:	460d      	mov	r5, r1
 800eb2c:	f011 0f01 	tst.w	r1, #1
 800eb30:	d015      	beq.n	800eb5e <ull_configciadiag+0x3a>
 800eb32:	2300      	movs	r3, #0
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	23ef      	movs	r3, #239	; 0xef
 800eb38:	2202      	movs	r2, #2
 800eb3a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800eb3e:	f7ff ffc1 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800eb42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb44:	759d      	strb	r5, [r3, #22]
 800eb46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb48:	7d9b      	ldrb	r3, [r3, #22]
 800eb4a:	085b      	lsrs	r3, r3, #1
 800eb4c:	d010      	beq.n	800eb70 <ull_configciadiag+0x4c>
 800eb4e:	086b      	lsrs	r3, r5, #1
 800eb50:	2200      	movs	r2, #0
 800eb52:	490e      	ldr	r1, [pc, #56]	; (800eb8c <ull_configciadiag+0x68>)
 800eb54:	4620      	mov	r0, r4
 800eb56:	f7ff fb23 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800eb5a:	b003      	add	sp, #12
 800eb5c:	bd30      	pop	{r4, r5, pc}
 800eb5e:	2310      	movs	r3, #16
 800eb60:	9300      	str	r3, [sp, #0]
 800eb62:	23ff      	movs	r3, #255	; 0xff
 800eb64:	2202      	movs	r2, #2
 800eb66:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800eb6a:	f7ff ffab 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800eb6e:	e7e8      	b.n	800eb42 <ull_configciadiag+0x1e>
 800eb70:	2301      	movs	r3, #1
 800eb72:	9300      	str	r3, [sp, #0]
 800eb74:	23ff      	movs	r3, #255	; 0xff
 800eb76:	2200      	movs	r2, #0
 800eb78:	4904      	ldr	r1, [pc, #16]	; (800eb8c <ull_configciadiag+0x68>)
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f7ff ffa2 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800eb80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800eb82:	7d93      	ldrb	r3, [r2, #22]
 800eb84:	f043 0302 	orr.w	r3, r3, #2
 800eb88:	7593      	strb	r3, [r2, #22]
 800eb8a:	e7e6      	b.n	800eb5a <ull_configciadiag+0x36>
 800eb8c:	00010020 	.word	0x00010020

0800eb90 <ull_configurestsloadiv>:
 800eb90:	b500      	push	{lr}
 800eb92:	b083      	sub	sp, #12
 800eb94:	2301      	movs	r3, #1
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	23ff      	movs	r3, #255	; 0xff
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	4902      	ldr	r1, [pc, #8]	; (800eba8 <ull_configurestsloadiv+0x18>)
 800eb9e:	f7ff ff91 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800eba2:	b003      	add	sp, #12
 800eba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800eba8:	00020004 	.word	0x00020004

0800ebac <ull_adcoffsetscalibration>:
 800ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb0:	b08b      	sub	sp, #44	; 0x2c
 800ebb2:	4607      	mov	r7, r0
 800ebb4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800edd8 <ull_adcoffsetscalibration+0x22c>
 800ebb8:	2200      	movs	r2, #0
 800ebba:	4641      	mov	r1, r8
 800ebbc:	f7fe fc2d 	bl	800d41a <dwt_read32bitoffsetreg>
 800ebc0:	9004      	str	r0, [sp, #16]
 800ebc2:	4c7d      	ldr	r4, [pc, #500]	; (800edb8 <ull_adcoffsetscalibration+0x20c>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f7fe fc26 	bl	800d41a <dwt_read32bitoffsetreg>
 800ebce:	9005      	str	r0, [sp, #20]
 800ebd0:	4d7a      	ldr	r5, [pc, #488]	; (800edbc <ull_adcoffsetscalibration+0x210>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	4629      	mov	r1, r5
 800ebd6:	4638      	mov	r0, r7
 800ebd8:	f7fe fc74 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800ebdc:	9006      	str	r0, [sp, #24]
 800ebde:	4e78      	ldr	r6, [pc, #480]	; (800edc0 <ull_adcoffsetscalibration+0x214>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	f7fe fc18 	bl	800d41a <dwt_read32bitoffsetreg>
 800ebea:	4682      	mov	sl, r0
 800ebec:	9007      	str	r0, [sp, #28]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	4974      	ldr	r1, [pc, #464]	; (800edc4 <ull_adcoffsetscalibration+0x218>)
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	f7fe fc11 	bl	800d41a <dwt_read32bitoffsetreg>
 800ebf8:	4681      	mov	r9, r0
 800ebfa:	4b73      	ldr	r3, [pc, #460]	; (800edc8 <ull_adcoffsetscalibration+0x21c>)
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800ec02:	2200      	movs	r2, #0
 800ec04:	4641      	mov	r1, r8
 800ec06:	4638      	mov	r0, r7
 800ec08:	f7ff fdec 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800ec0c:	464b      	mov	r3, r9
 800ec0e:	2200      	movs	r2, #0
 800ec10:	4631      	mov	r1, r6
 800ec12:	4638      	mov	r0, r7
 800ec14:	f7ff f8e0 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ec18:	4653      	mov	r3, sl
 800ec1a:	00db      	lsls	r3, r3, #3
 800ec1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	2386      	movs	r3, #134	; 0x86
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	f7ff ff49 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ec32:	2300      	movs	r3, #0
 800ec34:	2203      	movs	r2, #3
 800ec36:	4621      	mov	r1, r4
 800ec38:	4638      	mov	r0, r7
 800ec3a:	f7ff fab1 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800ec3e:	f04f 0900 	mov.w	r9, #0
 800ec42:	f8cd 9000 	str.w	r9, [sp]
 800ec46:	23fe      	movs	r3, #254	; 0xfe
 800ec48:	464a      	mov	r2, r9
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	f7ff ff39 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ec52:	464a      	mov	r2, r9
 800ec54:	213c      	movs	r1, #60	; 0x3c
 800ec56:	4638      	mov	r0, r7
 800ec58:	f7fe fbdf 	bl	800d41a <dwt_read32bitoffsetreg>
 800ec5c:	9008      	str	r0, [sp, #32]
 800ec5e:	464a      	mov	r2, r9
 800ec60:	2140      	movs	r1, #64	; 0x40
 800ec62:	4638      	mov	r0, r7
 800ec64:	f7fe fbd9 	bl	800d41a <dwt_read32bitoffsetreg>
 800ec68:	9009      	str	r0, [sp, #36]	; 0x24
 800ec6a:	464b      	mov	r3, r9
 800ec6c:	464a      	mov	r2, r9
 800ec6e:	213c      	movs	r1, #60	; 0x3c
 800ec70:	4638      	mov	r0, r7
 800ec72:	f7ff f8b1 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ec76:	464b      	mov	r3, r9
 800ec78:	464a      	mov	r2, r9
 800ec7a:	2140      	movs	r1, #64	; 0x40
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	f7ff f8ab 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ec82:	f7f5 fe63 	bl	800494c <dwt_forcetrxoff>
 800ec86:	f04f 0b02 	mov.w	fp, #2
 800ec8a:	464c      	mov	r4, r9
 800ec8c:	464d      	mov	r5, r9
 800ec8e:	464e      	mov	r6, r9
 800ec90:	46c8      	mov	r8, r9
 800ec92:	f8cd 900c 	str.w	r9, [sp, #12]
 800ec96:	46ca      	mov	sl, r9
 800ec98:	e00e      	b.n	800ecb8 <ull_adcoffsetscalibration+0x10c>
 800ec9a:	f7f5 fe57 	bl	800494c <dwt_forcetrxoff>
 800ec9e:	9b03      	ldr	r3, [sp, #12]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 8082 	beq.w	800edaa <ull_adcoffsetscalibration+0x1fe>
 800eca6:	f1bb 0f01 	cmp.w	fp, #1
 800ecaa:	f000 8081 	beq.w	800edb0 <ull_adcoffsetscalibration+0x204>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	9303      	str	r3, [sp, #12]
 800ecb2:	f1bb 0b01 	subs.w	fp, fp, #1
 800ecb6:	d043      	beq.n	800ed40 <ull_adcoffsetscalibration+0x194>
 800ecb8:	4650      	mov	r0, sl
 800ecba:	f7f5 fe55 	bl	8004968 <dwt_rxenable>
 800ecbe:	2014      	movs	r0, #20
 800ecc0:	f7f1 fdcf 	bl	8000862 <deca_usleep>
 800ecc4:	f04f 0904 	mov.w	r9, #4
 800ecc8:	f8cd a000 	str.w	sl, [sp]
 800eccc:	23fe      	movs	r3, #254	; 0xfe
 800ecce:	4652      	mov	r2, sl
 800ecd0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f7ff fef5 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	23fe      	movs	r3, #254	; 0xfe
 800ece0:	4652      	mov	r2, sl
 800ece2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800ece6:	4638      	mov	r0, r7
 800ece8:	f7ff feec 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ecec:	4652      	mov	r2, sl
 800ecee:	4937      	ldr	r1, [pc, #220]	; (800edcc <ull_adcoffsetscalibration+0x220>)
 800ecf0:	4638      	mov	r0, r7
 800ecf2:	f7fe fb92 	bl	800d41a <dwt_read32bitoffsetreg>
 800ecf6:	fa58 f880 	uxtab	r8, r8, r0
 800ecfa:	fa1f f888 	uxth.w	r8, r8
 800ecfe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ed02:	441e      	add	r6, r3
 800ed04:	b2b6      	uxth	r6, r6
 800ed06:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ed0a:	441d      	add	r5, r3
 800ed0c:	b2ad      	uxth	r5, r5
 800ed0e:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800ed12:	b2a4      	uxth	r4, r4
 800ed14:	f1b9 0901 	subs.w	r9, r9, #1
 800ed18:	d1d6      	bne.n	800ecc8 <ull_adcoffsetscalibration+0x11c>
 800ed1a:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800ed1e:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800ed22:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800ed26:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800ed2a:	4652      	mov	r2, sl
 800ed2c:	2144      	movs	r1, #68	; 0x44
 800ed2e:	4638      	mov	r0, r7
 800ed30:	f7fe fb73 	bl	800d41a <dwt_read32bitoffsetreg>
 800ed34:	4b26      	ldr	r3, [pc, #152]	; (800edd0 <ull_adcoffsetscalibration+0x224>)
 800ed36:	4218      	tst	r0, r3
 800ed38:	d0af      	beq.n	800ec9a <ull_adcoffsetscalibration+0xee>
 800ed3a:	f7f5 fe07 	bl	800494c <dwt_forcetrxoff>
 800ed3e:	e7b2      	b.n	800eca6 <ull_adcoffsetscalibration+0xfa>
 800ed40:	f04f 0900 	mov.w	r9, #0
 800ed44:	9b08      	ldr	r3, [sp, #32]
 800ed46:	2200      	movs	r2, #0
 800ed48:	213c      	movs	r1, #60	; 0x3c
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	f7ff f844 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ed50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed52:	2200      	movs	r2, #0
 800ed54:	2140      	movs	r1, #64	; 0x40
 800ed56:	4638      	mov	r0, r7
 800ed58:	f7ff f83e 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ed5c:	042b      	lsls	r3, r5, #16
 800ed5e:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800ed62:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800ed66:	4443      	add	r3, r8
 800ed68:	2200      	movs	r2, #0
 800ed6a:	491a      	ldr	r1, [pc, #104]	; (800edd4 <ull_adcoffsetscalibration+0x228>)
 800ed6c:	4638      	mov	r0, r7
 800ed6e:	f7ff f833 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ed72:	9b04      	ldr	r3, [sp, #16]
 800ed74:	2200      	movs	r2, #0
 800ed76:	4918      	ldr	r1, [pc, #96]	; (800edd8 <ull_adcoffsetscalibration+0x22c>)
 800ed78:	4638      	mov	r0, r7
 800ed7a:	f7ff f82d 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ed7e:	9b05      	ldr	r3, [sp, #20]
 800ed80:	2200      	movs	r2, #0
 800ed82:	490d      	ldr	r1, [pc, #52]	; (800edb8 <ull_adcoffsetscalibration+0x20c>)
 800ed84:	4638      	mov	r0, r7
 800ed86:	f7ff f827 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ed8a:	9b06      	ldr	r3, [sp, #24]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	490b      	ldr	r1, [pc, #44]	; (800edbc <ull_adcoffsetscalibration+0x210>)
 800ed90:	4638      	mov	r0, r7
 800ed92:	f7ff fa05 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800ed96:	9b07      	ldr	r3, [sp, #28]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	4909      	ldr	r1, [pc, #36]	; (800edc0 <ull_adcoffsetscalibration+0x214>)
 800ed9c:	4638      	mov	r0, r7
 800ed9e:	f7ff f81b 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800eda2:	4648      	mov	r0, r9
 800eda4:	b00b      	add	sp, #44	; 0x2c
 800eda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edaa:	f04f 0900 	mov.w	r9, #0
 800edae:	e7c9      	b.n	800ed44 <ull_adcoffsetscalibration+0x198>
 800edb0:	f06f 0905 	mvn.w	r9, #5
 800edb4:	e7c6      	b.n	800ed44 <ull_adcoffsetscalibration+0x198>
 800edb6:	bf00      	nop
 800edb8:	00030014 	.word	0x00030014
 800edbc:	00030018 	.word	0x00030018
 800edc0:	0003002c 	.word	0x0003002c
 800edc4:	00030044 	.word	0x00030044
 800edc8:	38010000 	.word	0x38010000
 800edcc:	0003004c 	.word	0x0003004c
 800edd0:	3427ff00 	.word	0x3427ff00
 800edd4:	00030010 	.word	0x00030010
 800edd8:	00070014 	.word	0x00070014

0800eddc <ull_restoreconfig>:
 800eddc:	b510      	push	{r4, lr}
 800edde:	4604      	mov	r4, r0
 800ede0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ede2:	7d9b      	ldrb	r3, [r3, #22]
 800ede4:	085b      	lsrs	r3, r3, #1
 800ede6:	d01a      	beq.n	800ee1e <ull_restoreconfig+0x42>
 800ede8:	2200      	movs	r2, #0
 800edea:	4912      	ldr	r1, [pc, #72]	; (800ee34 <ull_restoreconfig+0x58>)
 800edec:	4620      	mov	r0, r4
 800edee:	f7fe fb2a 	bl	800d446 <dwt_read16bitoffsetreg>
 800edf2:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800edf6:	3b09      	subs	r3, #9
 800edf8:	2b0f      	cmp	r3, #15
 800edfa:	d80c      	bhi.n	800ee16 <ull_restoreconfig+0x3a>
 800edfc:	f000 0001 	and.w	r0, r0, #1
 800ee00:	2800      	cmp	r0, #0
 800ee02:	bf0c      	ite	eq
 800ee04:	2105      	moveq	r1, #5
 800ee06:	2109      	movne	r1, #9
 800ee08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ee0a:	7a1b      	ldrb	r3, [r3, #8]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d002      	beq.n	800ee16 <ull_restoreconfig+0x3a>
 800ee10:	4620      	mov	r0, r4
 800ee12:	f7ff f8ad 	bl	800df70 <ull_configmrxlut>
 800ee16:	4620      	mov	r0, r4
 800ee18:	f7ff fec8 	bl	800ebac <ull_adcoffsetscalibration>
 800ee1c:	bd10      	pop	{r4, pc}
 800ee1e:	2301      	movs	r3, #1
 800ee20:	2200      	movs	r2, #0
 800ee22:	4905      	ldr	r1, [pc, #20]	; (800ee38 <ull_restoreconfig+0x5c>)
 800ee24:	f7ff f9bc 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800ee28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ee2a:	7d93      	ldrb	r3, [r2, #22]
 800ee2c:	f043 0302 	orr.w	r3, r3, #2
 800ee30:	7593      	strb	r3, [r2, #22]
 800ee32:	e7d9      	b.n	800ede8 <ull_restoreconfig+0xc>
 800ee34:	00010008 	.word	0x00010008
 800ee38:	00010020 	.word	0x00010020

0800ee3c <ull_calcbandwidthadj>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	4604      	mov	r4, r0
 800ee42:	460d      	mov	r5, r1
 800ee44:	2101      	movs	r1, #1
 800ee46:	f7fe ff7b 	bl	800dd40 <ull_force_clocks>
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f7ff fcfd 	bl	800e84c <ull_enable_rf_tx>
 800ee52:	4620      	mov	r0, r4
 800ee54:	f7ff fd2e 	bl	800e8b4 <ull_enable_rftx_blocks>
 800ee58:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4915      	ldr	r1, [pc, #84]	; (800eeb4 <ull_calcbandwidthadj+0x78>)
 800ee60:	4620      	mov	r0, r4
 800ee62:	f7fe ff4e 	bl	800dd02 <dwt_write16bitoffsetreg>
 800ee66:	2303      	movs	r3, #3
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	23ff      	movs	r3, #255	; 0xff
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	4912      	ldr	r1, [pc, #72]	; (800eeb8 <ull_calcbandwidthadj+0x7c>)
 800ee70:	4620      	mov	r0, r4
 800ee72:	f7ff fe27 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ee76:	4e10      	ldr	r6, [pc, #64]	; (800eeb8 <ull_calcbandwidthadj+0x7c>)
 800ee78:	2500      	movs	r5, #0
 800ee7a:	462a      	mov	r2, r5
 800ee7c:	4631      	mov	r1, r6
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f7fe fb20 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800ee84:	f010 0f01 	tst.w	r0, #1
 800ee88:	d1f7      	bne.n	800ee7a <ull_calcbandwidthadj+0x3e>
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f7ff f906 	bl	800e09c <ull_disable_rftx_blocks>
 800ee90:	2100      	movs	r1, #0
 800ee92:	4620      	mov	r0, r4
 800ee94:	f7ff f90c 	bl	800e0b0 <ull_disable_rf_tx>
 800ee98:	2105      	movs	r1, #5
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f7fe ff50 	bl	800dd40 <ull_force_clocks>
 800eea0:	2200      	movs	r2, #0
 800eea2:	4906      	ldr	r1, [pc, #24]	; (800eebc <ull_calcbandwidthadj+0x80>)
 800eea4:	4620      	mov	r0, r4
 800eea6:	f7fe fb0d 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800eeaa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800eeae:	b002      	add	sp, #8
 800eeb0:	bd70      	pop	{r4, r5, r6, pc}
 800eeb2:	bf00      	nop
 800eeb4:	0008001c 	.word	0x0008001c
 800eeb8:	00080010 	.word	0x00080010
 800eebc:	0007001c 	.word	0x0007001c

0800eec0 <ull_configuretxrf>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4605      	mov	r5, r0
 800eec4:	460c      	mov	r4, r1
 800eec6:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800eeca:	b149      	cbz	r1, 800eee0 <ull_configuretxrf+0x20>
 800eecc:	f7ff ffb6 	bl	800ee3c <ull_calcbandwidthadj>
 800eed0:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800eed4:	2200      	movs	r2, #0
 800eed6:	4905      	ldr	r1, [pc, #20]	; (800eeec <ull_configuretxrf+0x2c>)
 800eed8:	4628      	mov	r0, r5
 800eeda:	f7fe ff7d 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800eede:	bd38      	pop	{r3, r4, r5, pc}
 800eee0:	7823      	ldrb	r3, [r4, #0]
 800eee2:	2200      	movs	r2, #0
 800eee4:	4902      	ldr	r1, [pc, #8]	; (800eef0 <ull_configuretxrf+0x30>)
 800eee6:	f7ff f95b 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800eeea:	e7f1      	b.n	800eed0 <ull_configuretxrf+0x10>
 800eeec:	00010004 	.word	0x00010004
 800eef0:	0007001c 	.word	0x0007001c

0800eef4 <ull_repeated_frames>:
 800eef4:	b530      	push	{r4, r5, lr}
 800eef6:	b083      	sub	sp, #12
 800eef8:	4604      	mov	r4, r0
 800eefa:	460d      	mov	r5, r1
 800eefc:	2310      	movs	r3, #16
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	23ff      	movs	r3, #255	; 0xff
 800ef02:	2200      	movs	r2, #0
 800ef04:	4906      	ldr	r1, [pc, #24]	; (800ef20 <ull_repeated_frames+0x2c>)
 800ef06:	f7ff fddd 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ef0a:	462b      	mov	r3, r5
 800ef0c:	2d02      	cmp	r5, #2
 800ef0e:	bf38      	it	cc
 800ef10:	2302      	movcc	r3, #2
 800ef12:	2200      	movs	r2, #0
 800ef14:	2128      	movs	r1, #40	; 0x28
 800ef16:	4620      	mov	r0, r4
 800ef18:	f7fe ff5e 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800ef1c:	b003      	add	sp, #12
 800ef1e:	bd30      	pop	{r4, r5, pc}
 800ef20:	000f0028 	.word	0x000f0028

0800ef24 <ull_setdwstate>:
 800ef24:	b530      	push	{r4, r5, lr}
 800ef26:	b083      	sub	sp, #12
 800ef28:	4604      	mov	r4, r0
 800ef2a:	2901      	cmp	r1, #1
 800ef2c:	d01d      	beq.n	800ef6a <ull_setdwstate+0x46>
 800ef2e:	2902      	cmp	r1, #2
 800ef30:	d030      	beq.n	800ef94 <ull_setdwstate+0x70>
 800ef32:	2301      	movs	r3, #1
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	23ff      	movs	r3, #255	; 0xff
 800ef38:	2200      	movs	r2, #0
 800ef3a:	4926      	ldr	r1, [pc, #152]	; (800efd4 <ull_setdwstate+0xb0>)
 800ef3c:	f7ff fdc2 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ef40:	4d25      	ldr	r5, [pc, #148]	; (800efd8 <ull_setdwstate+0xb4>)
 800ef42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4629      	mov	r1, r5
 800ef50:	4620      	mov	r0, r4
 800ef52:	f7ff fc47 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800ef56:	2300      	movs	r3, #0
 800ef58:	9300      	str	r3, [sp, #0]
 800ef5a:	237f      	movs	r3, #127	; 0x7f
 800ef5c:	2202      	movs	r2, #2
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4620      	mov	r0, r4
 800ef62:	f7ff fdaf 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ef66:	b003      	add	sp, #12
 800ef68:	bd30      	pop	{r4, r5, pc}
 800ef6a:	2105      	movs	r1, #5
 800ef6c:	f7fe fee8 	bl	800dd40 <ull_force_clocks>
 800ef70:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4917      	ldr	r1, [pc, #92]	; (800efdc <ull_setdwstate+0xb8>)
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f7ff fc30 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800ef84:	2201      	movs	r2, #1
 800ef86:	9200      	str	r2, [sp, #0]
 800ef88:	23ff      	movs	r3, #255	; 0xff
 800ef8a:	4913      	ldr	r1, [pc, #76]	; (800efd8 <ull_setdwstate+0xb4>)
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f7ff fd99 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800ef92:	e7e8      	b.n	800ef66 <ull_setdwstate+0x42>
 800ef94:	2303      	movs	r3, #3
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	23ff      	movs	r3, #255	; 0xff
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	490d      	ldr	r1, [pc, #52]	; (800efd4 <ull_setdwstate+0xb0>)
 800ef9e:	f7ff fd91 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800efa2:	4d0d      	ldr	r5, [pc, #52]	; (800efd8 <ull_setdwstate+0xb4>)
 800efa4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800efae:	2200      	movs	r2, #0
 800efb0:	4629      	mov	r1, r5
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7ff fc16 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800efb8:	2300      	movs	r3, #0
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	237f      	movs	r3, #127	; 0x7f
 800efbe:	2202      	movs	r2, #2
 800efc0:	4629      	mov	r1, r5
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7ff fd7e 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800efc8:	2105      	movs	r1, #5
 800efca:	4620      	mov	r0, r4
 800efcc:	f7fe feb8 	bl	800dd40 <ull_force_clocks>
 800efd0:	e7c9      	b.n	800ef66 <ull_setdwstate+0x42>
 800efd2:	bf00      	nop
 800efd4:	00110004 	.word	0x00110004
 800efd8:	00110008 	.word	0x00110008
 800efdc:	00090008 	.word	0x00090008

0800efe0 <ull_configureframefilter>:
 800efe0:	b530      	push	{r4, r5, lr}
 800efe2:	b083      	sub	sp, #12
 800efe4:	4605      	mov	r5, r0
 800efe6:	2902      	cmp	r1, #2
 800efe8:	d00e      	beq.n	800f008 <ull_configureframefilter+0x28>
 800efea:	2400      	movs	r4, #0
 800efec:	9400      	str	r4, [sp, #0]
 800efee:	23fe      	movs	r3, #254	; 0xfe
 800eff0:	4622      	mov	r2, r4
 800eff2:	2110      	movs	r1, #16
 800eff4:	f7ff fd66 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800eff8:	4623      	mov	r3, r4
 800effa:	4622      	mov	r2, r4
 800effc:	2114      	movs	r1, #20
 800effe:	4628      	mov	r0, r5
 800f000:	f7fe fe7f 	bl	800dd02 <dwt_write16bitoffsetreg>
 800f004:	b003      	add	sp, #12
 800f006:	bd30      	pop	{r4, r5, pc}
 800f008:	4614      	mov	r4, r2
 800f00a:	2301      	movs	r3, #1
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	23ff      	movs	r3, #255	; 0xff
 800f010:	2200      	movs	r2, #0
 800f012:	2110      	movs	r1, #16
 800f014:	f7ff fd56 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f018:	4623      	mov	r3, r4
 800f01a:	2200      	movs	r2, #0
 800f01c:	2114      	movs	r1, #20
 800f01e:	4628      	mov	r0, r5
 800f020:	f7fe fe6f 	bl	800dd02 <dwt_write16bitoffsetreg>
 800f024:	e7ee      	b.n	800f004 <ull_configureframefilter+0x24>
	...

0800f028 <ull_run_pgfcal>:
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	b082      	sub	sp, #8
 800f02e:	4605      	mov	r5, r0
 800f030:	4c2a      	ldr	r4, [pc, #168]	; (800f0dc <ull_run_pgfcal+0xb4>)
 800f032:	2301      	movs	r3, #1
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	23ff      	movs	r3, #255	; 0xff
 800f038:	2200      	movs	r2, #0
 800f03a:	4621      	mov	r1, r4
 800f03c:	f7ff fd42 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f040:	2310      	movs	r3, #16
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	23ff      	movs	r3, #255	; 0xff
 800f046:	2200      	movs	r2, #0
 800f048:	4621      	mov	r1, r4
 800f04a:	4628      	mov	r0, r5
 800f04c:	f7ff fd3a 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f050:	2403      	movs	r4, #3
 800f052:	f04f 0814 	mov.w	r8, #20
 800f056:	4f22      	ldr	r7, [pc, #136]	; (800f0e0 <ull_run_pgfcal+0xb8>)
 800f058:	2600      	movs	r6, #0
 800f05a:	4640      	mov	r0, r8
 800f05c:	f7f1 fc01 	bl	8000862 <deca_usleep>
 800f060:	4632      	mov	r2, r6
 800f062:	4639      	mov	r1, r7
 800f064:	4628      	mov	r0, r5
 800f066:	f7fe fa2d 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800f06a:	2801      	cmp	r0, #1
 800f06c:	d034      	beq.n	800f0d8 <ull_run_pgfcal+0xb0>
 800f06e:	1e63      	subs	r3, r4, #1
 800f070:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800f074:	d1f1      	bne.n	800f05a <ull_run_pgfcal+0x32>
 800f076:	f06f 0402 	mvn.w	r4, #2
 800f07a:	4e18      	ldr	r6, [pc, #96]	; (800f0dc <ull_run_pgfcal+0xb4>)
 800f07c:	2300      	movs	r3, #0
 800f07e:	461a      	mov	r2, r3
 800f080:	4631      	mov	r1, r6
 800f082:	4628      	mov	r0, r5
 800f084:	f7ff f88c 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f088:	2301      	movs	r3, #1
 800f08a:	2200      	movs	r2, #0
 800f08c:	4914      	ldr	r1, [pc, #80]	; (800f0e0 <ull_run_pgfcal+0xb8>)
 800f08e:	4628      	mov	r0, r5
 800f090:	f7ff f886 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f094:	2301      	movs	r3, #1
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	23ff      	movs	r3, #255	; 0xff
 800f09a:	2202      	movs	r2, #2
 800f09c:	4631      	mov	r1, r6
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f7ff fd10 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	490f      	ldr	r1, [pc, #60]	; (800f0e4 <ull_run_pgfcal+0xbc>)
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	f7fe f9b6 	bl	800d41a <dwt_read32bitoffsetreg>
 800f0ae:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f0b2:	4298      	cmp	r0, r3
 800f0b4:	bf08      	it	eq
 800f0b6:	f06f 0403 	mvneq.w	r4, #3
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	490a      	ldr	r1, [pc, #40]	; (800f0e8 <ull_run_pgfcal+0xc0>)
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f7fe f9ab 	bl	800d41a <dwt_read32bitoffsetreg>
 800f0c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f0c8:	4298      	cmp	r0, r3
 800f0ca:	bf14      	ite	ne
 800f0cc:	4620      	movne	r0, r4
 800f0ce:	f06f 0004 	mvneq.w	r0, #4
 800f0d2:	b002      	add	sp, #8
 800f0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d8:	2400      	movs	r4, #0
 800f0da:	e7ce      	b.n	800f07a <ull_run_pgfcal+0x52>
 800f0dc:	0004000c 	.word	0x0004000c
 800f0e0:	00040020 	.word	0x00040020
 800f0e4:	00040014 	.word	0x00040014
 800f0e8:	0004001c 	.word	0x0004001c

0800f0ec <ull_setinterrupt>:
 800f0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0f0:	b083      	sub	sp, #12
 800f0f2:	4605      	mov	r5, r0
 800f0f4:	4688      	mov	r8, r1
 800f0f6:	4617      	mov	r7, r2
 800f0f8:	461c      	mov	r4, r3
 800f0fa:	f7f1 fb89 	bl	8000810 <decamutexon>
 800f0fe:	4606      	mov	r6, r0
 800f100:	2c02      	cmp	r4, #2
 800f102:	d019      	beq.n	800f138 <ull_setinterrupt+0x4c>
 800f104:	2c04      	cmp	r4, #4
 800f106:	d017      	beq.n	800f138 <ull_setinterrupt+0x4c>
 800f108:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d03f      	beq.n	800f190 <ull_setinterrupt+0xa4>
 800f110:	f04f 0900 	mov.w	r9, #0
 800f114:	f8cd 9000 	str.w	r9, [sp]
 800f118:	ea6f 0308 	mvn.w	r3, r8
 800f11c:	464a      	mov	r2, r9
 800f11e:	213c      	movs	r1, #60	; 0x3c
 800f120:	4628      	mov	r0, r5
 800f122:	f7ff fb5f 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f126:	f8cd 9000 	str.w	r9, [sp]
 800f12a:	43fb      	mvns	r3, r7
 800f12c:	464a      	mov	r2, r9
 800f12e:	2140      	movs	r1, #64	; 0x40
 800f130:	4628      	mov	r0, r5
 800f132:	f7ff fb57 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f136:	e00b      	b.n	800f150 <ull_setinterrupt+0x64>
 800f138:	4643      	mov	r3, r8
 800f13a:	2200      	movs	r2, #0
 800f13c:	213c      	movs	r1, #60	; 0x3c
 800f13e:	4628      	mov	r0, r5
 800f140:	f7fe fe4a 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f144:	463b      	mov	r3, r7
 800f146:	2200      	movs	r2, #0
 800f148:	2140      	movs	r1, #64	; 0x40
 800f14a:	4628      	mov	r0, r5
 800f14c:	f7fe fe44 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f150:	3c03      	subs	r4, #3
 800f152:	b2e4      	uxtb	r4, r4
 800f154:	2c01      	cmp	r4, #1
 800f156:	d92d      	bls.n	800f1b4 <ull_setinterrupt+0xc8>
 800f158:	2200      	movs	r2, #0
 800f15a:	213c      	movs	r1, #60	; 0x3c
 800f15c:	4628      	mov	r0, r5
 800f15e:	f7fe f95c 	bl	800d41a <dwt_read32bitoffsetreg>
 800f162:	4603      	mov	r3, r0
 800f164:	2200      	movs	r2, #0
 800f166:	2144      	movs	r1, #68	; 0x44
 800f168:	4628      	mov	r0, r5
 800f16a:	f7fe fe35 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f16e:	2200      	movs	r2, #0
 800f170:	2140      	movs	r1, #64	; 0x40
 800f172:	4628      	mov	r0, r5
 800f174:	f7fe f951 	bl	800d41a <dwt_read32bitoffsetreg>
 800f178:	4603      	mov	r3, r0
 800f17a:	2200      	movs	r2, #0
 800f17c:	2148      	movs	r1, #72	; 0x48
 800f17e:	4628      	mov	r0, r5
 800f180:	f7fe fe2a 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f184:	4630      	mov	r0, r6
 800f186:	f7f1 fb54 	bl	8000832 <decamutexoff>
 800f18a:	b003      	add	sp, #12
 800f18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f190:	f8cd 8000 	str.w	r8, [sp]
 800f194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f198:	2200      	movs	r2, #0
 800f19a:	213c      	movs	r1, #60	; 0x3c
 800f19c:	4628      	mov	r0, r5
 800f19e:	f7ff fb21 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f1a2:	9700      	str	r7, [sp, #0]
 800f1a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	2140      	movs	r1, #64	; 0x40
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	f7ff fb19 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f1b2:	e7cd      	b.n	800f150 <ull_setinterrupt+0x64>
 800f1b4:	2110      	movs	r1, #16
 800f1b6:	9100      	str	r1, [sp, #0]
 800f1b8:	23ff      	movs	r3, #255	; 0xff
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	4628      	mov	r0, r5
 800f1be:	f7ff fc81 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f1c2:	e7c9      	b.n	800f158 <ull_setinterrupt+0x6c>

0800f1c4 <prs_ack_enable>:
 800f1c4:	b500      	push	{lr}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	2900      	cmp	r1, #0
 800f1ca:	bf0b      	itete	eq
 800f1cc:	23ff      	moveq	r3, #255	; 0xff
 800f1ce:	23f7      	movne	r3, #247	; 0xf7
 800f1d0:	2200      	moveq	r2, #0
 800f1d2:	2208      	movne	r2, #8
 800f1d4:	9200      	str	r2, [sp, #0]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	2110      	movs	r1, #16
 800f1da:	f7ff fc73 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f1de:	b003      	add	sp, #12
 800f1e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800f1e4 <dwt_modify16bitoffsetreg>:
 800f1e4:	b510      	push	{r4, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800f1ec:	f88d 300c 	strb.w	r3, [sp, #12]
 800f1f0:	0a1b      	lsrs	r3, r3, #8
 800f1f2:	f88d 300d 	strb.w	r3, [sp, #13]
 800f1f6:	f88d 400e 	strb.w	r4, [sp, #14]
 800f1fa:	0a24      	lsrs	r4, r4, #8
 800f1fc:	f88d 400f 	strb.w	r4, [sp, #15]
 800f200:	f248 0302 	movw	r3, #32770	; 0x8002
 800f204:	9301      	str	r3, [sp, #4]
 800f206:	ab03      	add	r3, sp, #12
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	2304      	movs	r3, #4
 800f20c:	b292      	uxth	r2, r2
 800f20e:	f7fe f87c 	bl	800d30a <dwt_xfer3xxx>
 800f212:	b004      	add	sp, #16
 800f214:	bd10      	pop	{r4, pc}
	...

0800f218 <ull_configurestsmode>:
 800f218:	b530      	push	{r4, r5, lr}
 800f21a:	b083      	sub	sp, #12
 800f21c:	4605      	mov	r5, r0
 800f21e:	460c      	mov	r4, r1
 800f220:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f222:	7559      	strb	r1, [r3, #21]
 800f224:	030b      	lsls	r3, r1, #12
 800f226:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800f230:	2200      	movs	r2, #0
 800f232:	2110      	movs	r1, #16
 800f234:	f7ff ffd6 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f238:	f004 0403 	and.w	r4, r4, #3
 800f23c:	2c03      	cmp	r4, #3
 800f23e:	bf0c      	ite	eq
 800f240:	4b04      	ldreq	r3, [pc, #16]	; (800f254 <ull_configurestsmode+0x3c>)
 800f242:	4b05      	ldrne	r3, [pc, #20]	; (800f258 <ull_configurestsmode+0x40>)
 800f244:	2200      	movs	r2, #0
 800f246:	4905      	ldr	r1, [pc, #20]	; (800f25c <ull_configurestsmode+0x44>)
 800f248:	4628      	mov	r0, r5
 800f24a:	f7fe fdc5 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f24e:	b003      	add	sp, #12
 800f250:	bd30      	pop	{r4, r5, pc}
 800f252:	bf00      	nop
 800f254:	af5f35cc 	.word	0xaf5f35cc
 800f258:	af5f584c 	.word	0xaf5f584c
 800f25c:	0006000c 	.word	0x0006000c

0800f260 <ull_setleds>:
 800f260:	b530      	push	{r4, r5, lr}
 800f262:	b083      	sub	sp, #12
 800f264:	4604      	mov	r4, r0
 800f266:	f011 0f01 	tst.w	r1, #1
 800f26a:	d01f      	beq.n	800f2ac <ull_setleds+0x4c>
 800f26c:	460d      	mov	r5, r1
 800f26e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800f272:	9300      	str	r3, [sp, #0]
 800f274:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800f278:	2200      	movs	r2, #0
 800f27a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f27e:	f7ff fab1 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f282:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f28c:	2200      	movs	r2, #0
 800f28e:	4918      	ldr	r1, [pc, #96]	; (800f2f0 <ull_setleds+0x90>)
 800f290:	4620      	mov	r0, r4
 800f292:	f7ff faa7 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f296:	f015 0f02 	tst.w	r5, #2
 800f29a:	d11a      	bne.n	800f2d2 <ull_setleds+0x72>
 800f29c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	4914      	ldr	r1, [pc, #80]	; (800f2f4 <ull_setleds+0x94>)
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f7fe fd97 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f2aa:	e010      	b.n	800f2ce <ull_setleds+0x6e>
 800f2ac:	2500      	movs	r5, #0
 800f2ae:	9500      	str	r5, [sp, #0]
 800f2b0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800f2b4:	462a      	mov	r2, r5
 800f2b6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f2ba:	f7ff fa93 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f2be:	9500      	str	r5, [sp, #0]
 800f2c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f2c4:	462a      	mov	r2, r5
 800f2c6:	490b      	ldr	r1, [pc, #44]	; (800f2f4 <ull_setleds+0x94>)
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f7ff ff8b 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f2ce:	b003      	add	sp, #12
 800f2d0:	bd30      	pop	{r4, r5, pc}
 800f2d2:	4d08      	ldr	r5, [pc, #32]	; (800f2f4 <ull_setleds+0x94>)
 800f2d4:	4b08      	ldr	r3, [pc, #32]	; (800f2f8 <ull_setleds+0x98>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4629      	mov	r1, r5
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f7fe fd7c 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f2e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f7fe fd75 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f2ee:	e7ee      	b.n	800f2ce <ull_setleds+0x6e>
 800f2f0:	00110004 	.word	0x00110004
 800f2f4:	00110018 	.word	0x00110018
 800f2f8:	000f0110 	.word	0x000f0110

0800f2fc <ull_pgf_cal>:
 800f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fe:	b083      	sub	sp, #12
 800f300:	4604      	mov	r4, r0
 800f302:	2901      	cmp	r1, #1
 800f304:	d009      	beq.n	800f31a <ull_pgf_cal+0x1e>
 800f306:	2014      	movs	r0, #20
 800f308:	f7f1 faab 	bl	8000862 <deca_usleep>
 800f30c:	4620      	mov	r0, r4
 800f30e:	f7ff fe8b 	bl	800f028 <ull_run_pgfcal>
 800f312:	4605      	mov	r5, r0
 800f314:	4628      	mov	r0, r5
 800f316:	b003      	add	sp, #12
 800f318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f31a:	4e0f      	ldr	r6, [pc, #60]	; (800f358 <ull_pgf_cal+0x5c>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	4631      	mov	r1, r6
 800f320:	f7fe f891 	bl	800d446 <dwt_read16bitoffsetreg>
 800f324:	4607      	mov	r7, r0
 800f326:	f240 1307 	movw	r3, #263	; 0x107
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f330:	2200      	movs	r2, #0
 800f332:	4631      	mov	r1, r6
 800f334:	4620      	mov	r0, r4
 800f336:	f7ff ff55 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f33a:	2014      	movs	r0, #20
 800f33c:	f7f1 fa91 	bl	8000862 <deca_usleep>
 800f340:	4620      	mov	r0, r4
 800f342:	f7ff fe71 	bl	800f028 <ull_run_pgfcal>
 800f346:	4605      	mov	r5, r0
 800f348:	2200      	movs	r2, #0
 800f34a:	9200      	str	r2, [sp, #0]
 800f34c:	463b      	mov	r3, r7
 800f34e:	4631      	mov	r1, r6
 800f350:	4620      	mov	r0, r4
 800f352:	f7ff ff47 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f356:	e7dd      	b.n	800f314 <ull_pgf_cal+0x18>
 800f358:	00070048 	.word	0x00070048

0800f35c <ull_setgpiovalue>:
 800f35c:	b500      	push	{lr}
 800f35e:	b083      	sub	sp, #12
 800f360:	2a01      	cmp	r2, #1
 800f362:	d009      	beq.n	800f378 <ull_setgpiovalue+0x1c>
 800f364:	43cb      	mvns	r3, r1
 800f366:	2200      	movs	r2, #0
 800f368:	9200      	str	r2, [sp, #0]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	4906      	ldr	r1, [pc, #24]	; (800f388 <ull_setgpiovalue+0x2c>)
 800f36e:	f7ff ff39 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f372:	b003      	add	sp, #12
 800f374:	f85d fb04 	ldr.w	pc, [sp], #4
 800f378:	9100      	str	r1, [sp, #0]
 800f37a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f37e:	2200      	movs	r2, #0
 800f380:	4901      	ldr	r1, [pc, #4]	; (800f388 <ull_setgpiovalue+0x2c>)
 800f382:	f7ff ff2f 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f386:	e7f4      	b.n	800f372 <ull_setgpiovalue+0x16>
 800f388:	0005000c 	.word	0x0005000c

0800f38c <ull_readaccdata>:
 800f38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f38e:	b083      	sub	sp, #12
 800f390:	4604      	mov	r4, r0
 800f392:	460f      	mov	r7, r1
 800f394:	4616      	mov	r6, r2
 800f396:	461d      	mov	r5, r3
 800f398:	f248 0340 	movw	r3, #32832	; 0x8040
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	4918      	ldr	r1, [pc, #96]	; (800f408 <ull_readaccdata+0x7c>)
 800f3a6:	f7ff ff1d 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f3aa:	19aa      	adds	r2, r5, r6
 800f3ac:	f243 0301 	movw	r3, #12289	; 0x3001
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	dc15      	bgt.n	800f3e0 <ull_readaccdata+0x54>
 800f3b4:	2d7f      	cmp	r5, #127	; 0x7f
 800f3b6:	d91d      	bls.n	800f3f4 <ull_readaccdata+0x68>
 800f3b8:	2315      	movs	r3, #21
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	4913      	ldr	r1, [pc, #76]	; (800f40c <ull_readaccdata+0x80>)
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f7fe fd0a 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f3c4:	462b      	mov	r3, r5
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4911      	ldr	r1, [pc, #68]	; (800f410 <ull_readaccdata+0x84>)
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f7fe fd04 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f3d0:	9700      	str	r7, [sp, #0]
 800f3d2:	4633      	mov	r3, r6
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f7fe f813 	bl	800d406 <dwt_readfromdevice>
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	9200      	str	r2, [sp, #0]
 800f3e4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800f3e8:	4907      	ldr	r1, [pc, #28]	; (800f408 <ull_readaccdata+0x7c>)
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	f7ff fefa 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f3f0:	b003      	add	sp, #12
 800f3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f4:	9700      	str	r7, [sp, #0]
 800f3f6:	4633      	mov	r3, r6
 800f3f8:	462a      	mov	r2, r5
 800f3fa:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800f3fe:	4620      	mov	r0, r4
 800f400:	f7fe f801 	bl	800d406 <dwt_readfromdevice>
 800f404:	e7ec      	b.n	800f3e0 <ull_readaccdata+0x54>
 800f406:	bf00      	nop
 800f408:	00110004 	.word	0x00110004
 800f40c:	001f0004 	.word	0x001f0004
 800f410:	001f0008 	.word	0x001f0008

0800f414 <ull_configure>:
 800f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f418:	b083      	sub	sp, #12
 800f41a:	4604      	mov	r4, r0
 800f41c:	460d      	mov	r5, r1
 800f41e:	f891 9000 	ldrb.w	r9, [r1]
 800f422:	790b      	ldrb	r3, [r1, #4]
 800f424:	2b18      	cmp	r3, #24
 800f426:	d814      	bhi.n	800f452 <ull_configure+0x3e>
 800f428:	78cf      	ldrb	r7, [r1, #3]
 800f42a:	2f18      	cmp	r7, #24
 800f42c:	bf94      	ite	ls
 800f42e:	2700      	movls	r7, #0
 800f430:	2701      	movhi	r7, #1
 800f432:	b2ff      	uxtb	r7, r7
 800f434:	79eb      	ldrb	r3, [r5, #7]
 800f436:	2b01      	cmp	r3, #1
 800f438:	bf0c      	ite	eq
 800f43a:	2110      	moveq	r1, #16
 800f43c:	2100      	movne	r1, #0
 800f43e:	786b      	ldrb	r3, [r5, #1]
 800f440:	3b01      	subs	r3, #1
 800f442:	2b06      	cmp	r3, #6
 800f444:	d810      	bhi.n	800f468 <ull_configure+0x54>
 800f446:	e8df f003 	tbb	[pc, r3]
 800f44a:	0f06      	.short	0x0f06
 800f44c:	0f0c120f 	.word	0x0f0c120f
 800f450:	09          	.byte	0x09
 800f451:	00          	.byte	0x00
 800f452:	2701      	movs	r7, #1
 800f454:	e7ed      	b.n	800f432 <ull_configure+0x1e>
 800f456:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800f45a:	e00a      	b.n	800f472 <ull_configure+0x5e>
 800f45c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800f460:	e007      	b.n	800f472 <ull_configure+0x5e>
 800f462:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800f466:	e004      	b.n	800f472 <ull_configure+0x5e>
 800f468:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800f46c:	e001      	b.n	800f472 <ull_configure+0x5e>
 800f46e:	f04f 0a20 	mov.w	sl, #32
 800f472:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f474:	8a13      	ldrh	r3, [r2, #16]
 800f476:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f47a:	8213      	strh	r3, [r2, #16]
 800f47c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f47e:	79ea      	ldrb	r2, [r5, #7]
 800f480:	72da      	strb	r2, [r3, #11]
 800f482:	7b2e      	ldrb	r6, [r5, #12]
 800f484:	1cb3      	adds	r3, r6, #2
 800f486:	2601      	movs	r6, #1
 800f488:	409e      	lsls	r6, r3
 800f48a:	fa1f f886 	uxth.w	r8, r6
 800f48e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f490:	4bca      	ldr	r3, [pc, #808]	; (800f7bc <ull_configure+0x3a8>)
 800f492:	fb03 f308 	mul.w	r3, r3, r8
 800f496:	0bdb      	lsrs	r3, r3, #15
 800f498:	8253      	strh	r3, [r2, #18]
 800f49a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f49c:	7aea      	ldrb	r2, [r5, #11]
 800f49e:	755a      	strb	r2, [r3, #21]
 800f4a0:	7a2b      	ldrb	r3, [r5, #8]
 800f4a2:	015b      	lsls	r3, r3, #5
 800f4a4:	f003 0320 	and.w	r3, r3, #32
 800f4a8:	7b6a      	ldrb	r2, [r5, #13]
 800f4aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4ae:	7aea      	ldrb	r2, [r5, #11]
 800f4b0:	0312      	lsls	r2, r2, #12
 800f4b2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	430b      	orrs	r3, r1
 800f4ba:	9300      	str	r3, [sp, #0]
 800f4bc:	4bc0      	ldr	r3, [pc, #768]	; (800f7c0 <ull_configure+0x3ac>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	2110      	movs	r1, #16
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7ff f98e 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f4c8:	2f00      	cmp	r7, #0
 800f4ca:	f040 80fe 	bne.w	800f6ca <ull_configure+0x2b6>
 800f4ce:	7aeb      	ldrb	r3, [r5, #11]
 800f4d0:	b1bb      	cbz	r3, 800f502 <ull_configure+0xee>
 800f4d2:	7b6b      	ldrb	r3, [r5, #13]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	7b28      	ldrb	r0, [r5, #12]
 800f4d8:	bf94      	ite	ls
 800f4da:	2203      	movls	r2, #3
 800f4dc:	2204      	movhi	r2, #4
 800f4de:	2110      	movs	r1, #16
 800f4e0:	4bb8      	ldr	r3, [pc, #736]	; (800f7c4 <ull_configure+0x3b0>)
 800f4e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f4e6:	f7fd fef3 	bl	800d2d0 <get_sts_mnth>
 800f4ea:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800f4ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f4f2:	9000      	str	r0, [sp, #0]
 800f4f4:	f64f 7380 	movw	r3, #65408	; 0xff80
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	49b3      	ldr	r1, [pc, #716]	; (800f7c8 <ull_configure+0x3b4>)
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f7ff fe71 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f502:	2394      	movs	r3, #148	; 0x94
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	4bb1      	ldr	r3, [pc, #708]	; (800f7cc <ull_configure+0x3b8>)
 800f508:	2200      	movs	r2, #0
 800f50a:	49b1      	ldr	r1, [pc, #708]	; (800f7d0 <ull_configure+0x3bc>)
 800f50c:	4620      	mov	r0, r4
 800f50e:	f7ff f969 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f512:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f516:	f340 8103 	ble.w	800f720 <ull_configure+0x30c>
 800f51a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f51c:	8a13      	ldrh	r3, [r2, #16]
 800f51e:	f043 0320 	orr.w	r3, r3, #32
 800f522:	8213      	strh	r3, [r2, #16]
 800f524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f52e:	2200      	movs	r2, #0
 800f530:	49a8      	ldr	r1, [pc, #672]	; (800f7d4 <ull_configure+0x3c0>)
 800f532:	4620      	mov	r0, r4
 800f534:	f7ff fe56 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f538:	7b6b      	ldrb	r3, [r5, #13]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	f000 80fb 	beq.w	800f736 <ull_configure+0x322>
 800f540:	78ab      	ldrb	r3, [r5, #2]
 800f542:	f043 0310 	orr.w	r3, r3, #16
 800f546:	9300      	str	r3, [sp, #0]
 800f548:	23fc      	movs	r3, #252	; 0xfc
 800f54a:	2200      	movs	r2, #0
 800f54c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f550:	4620      	mov	r0, r4
 800f552:	f7ff fab7 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f556:	1e73      	subs	r3, r6, #1
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	2200      	movs	r2, #0
 800f55c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f560:	4620      	mov	r0, r4
 800f562:	f7fe fe1d 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f566:	786b      	ldrb	r3, [r5, #1]
 800f568:	2b07      	cmp	r3, #7
 800f56a:	bf0c      	ite	eq
 800f56c:	2108      	moveq	r1, #8
 800f56e:	2100      	movne	r1, #0
 800f570:	4620      	mov	r0, r4
 800f572:	f7fe ff1b 	bl	800e3ac <ull_setplenfine>
 800f576:	7aeb      	ldrb	r3, [r5, #11]
 800f578:	f003 0303 	and.w	r3, r3, #3
 800f57c:	2b03      	cmp	r3, #3
 800f57e:	bf0c      	ite	eq
 800f580:	4b95      	ldreq	r3, [pc, #596]	; (800f7d8 <ull_configure+0x3c4>)
 800f582:	4b96      	ldrne	r3, [pc, #600]	; (800f7dc <ull_configure+0x3c8>)
 800f584:	2200      	movs	r2, #0
 800f586:	4996      	ldr	r1, [pc, #600]	; (800f7e0 <ull_configure+0x3cc>)
 800f588:	4620      	mov	r0, r4
 800f58a:	f7fe fc25 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f58e:	2200      	movs	r2, #0
 800f590:	4994      	ldr	r1, [pc, #592]	; (800f7e4 <ull_configure+0x3d0>)
 800f592:	4620      	mov	r0, r4
 800f594:	f7fd ff41 	bl	800d41a <dwt_read32bitoffsetreg>
 800f598:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800f59c:	f020 001f 	bic.w	r0, r0, #31
 800f5a0:	f1b9 0f09 	cmp.w	r9, #9
 800f5a4:	bf08      	it	eq
 800f5a6:	f040 0001 	orreq.w	r0, r0, #1
 800f5aa:	792a      	ldrb	r2, [r5, #4]
 800f5ac:	0212      	lsls	r2, r2, #8
 800f5ae:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800f5b2:	78eb      	ldrb	r3, [r5, #3]
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	796b      	ldrb	r3, [r5, #5]
 800f5bc:	005b      	lsls	r3, r3, #1
 800f5be:	f003 0306 	and.w	r3, r3, #6
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	4303      	orrs	r3, r0
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	4986      	ldr	r1, [pc, #536]	; (800f7e4 <ull_configure+0x3d0>)
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f7fe fc04 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f5d0:	79aa      	ldrb	r2, [r5, #6]
 800f5d2:	786b      	ldrb	r3, [r5, #1]
 800f5d4:	031b      	lsls	r3, r3, #12
 800f5d6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	2120      	movs	r1, #32
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff f8fd 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f5ea:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f5ee:	b923      	cbnz	r3, 800f5fa <ull_configure+0x1e6>
 800f5f0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800f5f4:	726b      	strb	r3, [r5, #9]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	72ab      	strb	r3, [r5, #10]
 800f5fa:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800f5fe:	2202      	movs	r2, #2
 800f600:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f604:	4620      	mov	r0, r4
 800f606:	f7fe fb7c 	bl	800dd02 <dwt_write16bitoffsetreg>
 800f60a:	2202      	movs	r2, #2
 800f60c:	4976      	ldr	r1, [pc, #472]	; (800f7e8 <ull_configure+0x3d4>)
 800f60e:	4620      	mov	r0, r4
 800f610:	f7fd ff58 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800f614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f616:	7bdb      	ldrb	r3, [r3, #15]
 800f618:	454b      	cmp	r3, r9
 800f61a:	f000 8096 	beq.w	800f74a <ull_configure+0x336>
 800f61e:	2803      	cmp	r0, #3
 800f620:	f000 8097 	beq.w	800f752 <ull_configure+0x33e>
 800f624:	f1b9 0f09 	cmp.w	r9, #9
 800f628:	f000 8098 	beq.w	800f75c <ull_configure+0x348>
 800f62c:	4b6f      	ldr	r3, [pc, #444]	; (800f7ec <ull_configure+0x3d8>)
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f634:	2200      	movs	r2, #0
 800f636:	496e      	ldr	r1, [pc, #440]	; (800f7f0 <ull_configure+0x3dc>)
 800f638:	4620      	mov	r0, r4
 800f63a:	f7ff f8d3 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f63e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800f642:	2200      	movs	r2, #0
 800f644:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f648:	4620      	mov	r0, r4
 800f64a:	f7fe fb5a 	bl	800dd02 <dwt_write16bitoffsetreg>
 800f64e:	2314      	movs	r3, #20
 800f650:	2201      	movs	r2, #1
 800f652:	4968      	ldr	r1, [pc, #416]	; (800f7f4 <ull_configure+0x3e0>)
 800f654:	4620      	mov	r0, r4
 800f656:	f7fe fda3 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f65a:	230e      	movs	r3, #14
 800f65c:	2202      	movs	r2, #2
 800f65e:	4966      	ldr	r1, [pc, #408]	; (800f7f8 <ull_configure+0x3e4>)
 800f660:	4620      	mov	r0, r4
 800f662:	f7fe fd9d 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f666:	2381      	movs	r3, #129	; 0x81
 800f668:	2200      	movs	r2, #0
 800f66a:	4964      	ldr	r1, [pc, #400]	; (800f7fc <ull_configure+0x3e8>)
 800f66c:	4620      	mov	r0, r4
 800f66e:	f7fe fd97 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f672:	2600      	movs	r6, #0
 800f674:	9600      	str	r6, [sp, #0]
 800f676:	23fc      	movs	r3, #252	; 0xfc
 800f678:	2203      	movs	r2, #3
 800f67a:	4961      	ldr	r1, [pc, #388]	; (800f800 <ull_configure+0x3ec>)
 800f67c:	4620      	mov	r0, r4
 800f67e:	f7ff fa21 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f682:	2302      	movs	r3, #2
 800f684:	4632      	mov	r2, r6
 800f686:	2144      	movs	r1, #68	; 0x44
 800f688:	4620      	mov	r0, r4
 800f68a:	f7fe fd89 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f68e:	2101      	movs	r1, #1
 800f690:	4620      	mov	r0, r4
 800f692:	f7ff fc47 	bl	800ef24 <ull_setdwstate>
 800f696:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800f69a:	f04f 0814 	mov.w	r8, #20
 800f69e:	4637      	mov	r7, r6
 800f6a0:	2644      	movs	r6, #68	; 0x44
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	f7f1 f8dd 	bl	8000862 <deca_usleep>
 800f6a8:	463a      	mov	r2, r7
 800f6aa:	4631      	mov	r1, r6
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f7fd ff09 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800f6b2:	f010 0f02 	tst.w	r0, #2
 800f6b6:	f040 80af 	bne.w	800f818 <ull_configure+0x404>
 800f6ba:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800f6be:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800f6c2:	d1ee      	bne.n	800f6a2 <ull_configure+0x28e>
 800f6c4:	f06f 0001 	mvn.w	r0, #1
 800f6c8:	e0e6      	b.n	800f898 <ull_configure+0x484>
 800f6ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f6cc:	8a13      	ldrh	r3, [r2, #16]
 800f6ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f6d2:	8213      	strh	r3, [r2, #16]
 800f6d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800f6de:	2200      	movs	r2, #0
 800f6e0:	493c      	ldr	r1, [pc, #240]	; (800f7d4 <ull_configure+0x3c0>)
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7ff f87e 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f6e8:	f240 3306 	movw	r3, #774	; 0x306
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4945      	ldr	r1, [pc, #276]	; (800f804 <ull_configure+0x3f0>)
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f7fe fb71 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	4943      	ldr	r1, [pc, #268]	; (800f808 <ull_configure+0x3f4>)
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f7fe fb6b 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f702:	4b42      	ldr	r3, [pc, #264]	; (800f80c <ull_configure+0x3f8>)
 800f704:	2200      	movs	r2, #0
 800f706:	4930      	ldr	r1, [pc, #192]	; (800f7c8 <ull_configure+0x3b4>)
 800f708:	4620      	mov	r0, r4
 800f70a:	f7fe fb65 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f70e:	239d      	movs	r3, #157	; 0x9d
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	4b2e      	ldr	r3, [pc, #184]	; (800f7cc <ull_configure+0x3b8>)
 800f714:	2200      	movs	r2, #0
 800f716:	492e      	ldr	r1, [pc, #184]	; (800f7d0 <ull_configure+0x3bc>)
 800f718:	4620      	mov	r0, r4
 800f71a:	f7ff f863 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f71e:	e70b      	b.n	800f538 <ull_configure+0x124>
 800f720:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800f72a:	2200      	movs	r2, #0
 800f72c:	4929      	ldr	r1, [pc, #164]	; (800f7d4 <ull_configure+0x3c0>)
 800f72e:	4620      	mov	r0, r4
 800f730:	f7ff fd58 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f734:	e700      	b.n	800f538 <ull_configure+0x124>
 800f736:	78ab      	ldrb	r3, [r5, #2]
 800f738:	9300      	str	r3, [sp, #0]
 800f73a:	23ec      	movs	r3, #236	; 0xec
 800f73c:	2200      	movs	r2, #0
 800f73e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800f742:	4620      	mov	r0, r4
 800f744:	f7ff f9be 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f748:	e705      	b.n	800f556 <ull_configure+0x142>
 800f74a:	2803      	cmp	r0, #3
 800f74c:	f47f af6a 	bne.w	800f624 <ull_configure+0x210>
 800f750:	e065      	b.n	800f81e <ull_configure+0x40a>
 800f752:	2102      	movs	r1, #2
 800f754:	4620      	mov	r0, r4
 800f756:	f7ff fbe5 	bl	800ef24 <ull_setdwstate>
 800f75a:	e763      	b.n	800f624 <ull_configure+0x210>
 800f75c:	4b2c      	ldr	r3, [pc, #176]	; (800f810 <ull_configure+0x3fc>)
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f764:	2200      	movs	r2, #0
 800f766:	4922      	ldr	r1, [pc, #136]	; (800f7f0 <ull_configure+0x3dc>)
 800f768:	4620      	mov	r0, r4
 800f76a:	f7ff f83b 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f76e:	f640 733c 	movw	r3, #3900	; 0xf3c
 800f772:	2200      	movs	r2, #0
 800f774:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800f778:	4620      	mov	r0, r4
 800f77a:	f7fe fac2 	bl	800dd02 <dwt_write16bitoffsetreg>
 800f77e:	e766      	b.n	800f64e <ull_configure+0x23a>
 800f780:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f78a:	2200      	movs	r2, #0
 800f78c:	4911      	ldr	r1, [pc, #68]	; (800f7d4 <ull_configure+0x3c0>)
 800f78e:	4620      	mov	r0, r4
 800f790:	f7ff fd28 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f794:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f796:	8a13      	ldrh	r3, [r2, #16]
 800f798:	f043 0308 	orr.w	r3, r3, #8
 800f79c:	8213      	strh	r3, [r2, #16]
 800f79e:	e050      	b.n	800f842 <ull_configure+0x42e>
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	9200      	str	r2, [sp, #0]
 800f7a4:	23fe      	movs	r3, #254	; 0xfe
 800f7a6:	491b      	ldr	r1, [pc, #108]	; (800f814 <ull_configure+0x400>)
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f7ff f98b 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f7ae:	e052      	b.n	800f856 <ull_configure+0x442>
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f7ff fda2 	bl	800f2fc <ull_pgf_cal>
 800f7b8:	e06b      	b.n	800f892 <ull_configure+0x47e>
 800f7ba:	bf00      	nop
 800f7bc:	00026668 	.word	0x00026668
 800f7c0:	fffc4fcf 	.word	0xfffc4fcf
 800f7c4:	08012504 	.word	0x08012504
 800f7c8:	000e0014 	.word	0x000e0014
 800f7cc:	bfffff00 	.word	0xbfffff00
 800f7d0:	000e0018 	.word	0x000e0018
 800f7d4:	000b0008 	.word	0x000b0008
 800f7d8:	af5f35cc 	.word	0xaf5f35cc
 800f7dc:	af5f584c 	.word	0xaf5f584c
 800f7e0:	0006000c 	.word	0x0006000c
 800f7e4:	00010008 	.word	0x00010008
 800f7e8:	000f0030 	.word	0x000f0030
 800f7ec:	1c071134 	.word	0x1c071134
 800f7f0:	0007001c 	.word	0x0007001c
 800f7f4:	00070050 	.word	0x00070050
 800f7f8:	00070018 	.word	0x00070018
 800f7fc:	00090008 	.word	0x00090008
 800f800:	00090004 	.word	0x00090004
 800f804:	000e000c 	.word	0x000e000c
 800f808:	000e0010 	.word	0x000e0010
 800f80c:	000c5a0a 	.word	0x000c5a0a
 800f810:	1c010034 	.word	0x1c010034
 800f814:	00030018 	.word	0x00030018
 800f818:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f81a:	f883 900f 	strb.w	r9, [r3, #15]
 800f81e:	792b      	ldrb	r3, [r5, #4]
 800f820:	3b09      	subs	r3, #9
 800f822:	b2db      	uxtb	r3, r3
 800f824:	2b0f      	cmp	r3, #15
 800f826:	d8bb      	bhi.n	800f7a0 <ull_configure+0x38c>
 800f828:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f82a:	7a1b      	ldrb	r3, [r3, #8]
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d0a7      	beq.n	800f780 <ull_configure+0x36c>
 800f830:	4649      	mov	r1, r9
 800f832:	4620      	mov	r0, r4
 800f834:	f7fe fb9c 	bl	800df70 <ull_configmrxlut>
 800f838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f83a:	8a13      	ldrh	r3, [r2, #16]
 800f83c:	f023 0308 	bic.w	r3, r3, #8
 800f840:	8213      	strh	r3, [r2, #16]
 800f842:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800f84c:	2200      	movs	r2, #0
 800f84e:	4914      	ldr	r1, [pc, #80]	; (800f8a0 <ull_configure+0x48c>)
 800f850:	4620      	mov	r0, r4
 800f852:	f7ff fcc7 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f856:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800f85a:	bfcc      	ite	gt
 800f85c:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800f860:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f86a:	2200      	movs	r2, #0
 800f86c:	490d      	ldr	r1, [pc, #52]	; (800f8a4 <ull_configure+0x490>)
 800f86e:	4620      	mov	r0, r4
 800f870:	f7fe ffb8 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800f874:	2301      	movs	r3, #1
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	23ff      	movs	r3, #255	; 0xff
 800f87a:	2202      	movs	r2, #2
 800f87c:	490a      	ldr	r1, [pc, #40]	; (800f8a8 <ull_configure+0x494>)
 800f87e:	4620      	mov	r0, r4
 800f880:	f7ff f920 	bl	800eac4 <dwt_modify8bitoffsetreg>
 800f884:	2200      	movs	r2, #0
 800f886:	4909      	ldr	r1, [pc, #36]	; (800f8ac <ull_configure+0x498>)
 800f888:	4620      	mov	r0, r4
 800f88a:	f7fd fdc6 	bl	800d41a <dwt_read32bitoffsetreg>
 800f88e:	2800      	cmp	r0, #0
 800f890:	d08e      	beq.n	800f7b0 <ull_configure+0x39c>
 800f892:	4620      	mov	r0, r4
 800f894:	f7ff f98a 	bl	800ebac <ull_adcoffsetscalibration>
 800f898:	b003      	add	sp, #12
 800f89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89e:	bf00      	nop
 800f8a0:	00030018 	.word	0x00030018
 800f8a4:	00060010 	.word	0x00060010
 800f8a8:	0004000c 	.word	0x0004000c
 800f8ac:	00040014 	.word	0x00040014

0800f8b0 <ull_initialise>:
 800f8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b4:	b082      	sub	sp, #8
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	460e      	mov	r6, r1
 800f8ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d05b      	beq.n	800f978 <ull_initialise+0xc8>
 800f8c0:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	73a3      	strb	r3, [r4, #14]
 800f8c6:	2202      	movs	r2, #2
 800f8c8:	8222      	strh	r2, [r4, #16]
 800f8ca:	7523      	strb	r3, [r4, #20]
 800f8cc:	7563      	strb	r3, [r4, #21]
 800f8ce:	73e3      	strb	r3, [r4, #15]
 800f8d0:	7263      	strb	r3, [r4, #9]
 800f8d2:	72a3      	strb	r3, [r4, #10]
 800f8d4:	2104      	movs	r1, #4
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	f7fe fa5c 	bl	800dd94 <_dwt_otpread>
 800f8dc:	4607      	mov	r7, r0
 800f8de:	2105      	movs	r1, #5
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	f7fe fa57 	bl	800dd94 <_dwt_otpread>
 800f8e6:	4680      	mov	r8, r0
 800f8e8:	210a      	movs	r1, #10
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7fe fa52 	bl	800dd94 <_dwt_otpread>
 800f8f0:	b12f      	cbz	r7, 800f8fe <ull_initialise+0x4e>
 800f8f2:	f1b8 0f00 	cmp.w	r8, #0
 800f8f6:	d002      	beq.n	800f8fe <ull_initialise+0x4e>
 800f8f8:	b280      	uxth	r0, r0
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d141      	bne.n	800f982 <ull_initialise+0xd2>
 800f8fe:	2120      	movs	r1, #32
 800f900:	4628      	mov	r0, r5
 800f902:	f7fe fa47 	bl	800dd94 <_dwt_otpread>
 800f906:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800f90a:	bf0c      	ite	eq
 800f90c:	2301      	moveq	r3, #1
 800f90e:	2300      	movne	r3, #0
 800f910:	7223      	strb	r3, [r4, #8]
 800f912:	f016 0f10 	tst.w	r6, #16
 800f916:	d143      	bne.n	800f9a0 <ull_initialise+0xf0>
 800f918:	f016 0f20 	tst.w	r6, #32
 800f91c:	d146      	bne.n	800f9ac <ull_initialise+0xfc>
 800f91e:	f016 0f40 	tst.w	r6, #64	; 0x40
 800f922:	d149      	bne.n	800f9b8 <ull_initialise+0x108>
 800f924:	f016 0f80 	tst.w	r6, #128	; 0x80
 800f928:	d14d      	bne.n	800f9c6 <ull_initialise+0x116>
 800f92a:	7aa3      	ldrb	r3, [r4, #10]
 800f92c:	b90b      	cbnz	r3, 800f932 <ull_initialise+0x82>
 800f92e:	2385      	movs	r3, #133	; 0x85
 800f930:	72a3      	strb	r3, [r4, #10]
 800f932:	7a63      	ldrb	r3, [r4, #9]
 800f934:	b90b      	cbnz	r3, 800f93a <ull_initialise+0x8a>
 800f936:	2374      	movs	r3, #116	; 0x74
 800f938:	7263      	strb	r3, [r4, #9]
 800f93a:	211f      	movs	r1, #31
 800f93c:	4628      	mov	r0, r5
 800f93e:	f7fe fa29 	bl	800dd94 <_dwt_otpread>
 800f942:	7320      	strb	r0, [r4, #12]
 800f944:	211e      	movs	r1, #30
 800f946:	4628      	mov	r0, r5
 800f948:	f7fe fa24 	bl	800dd94 <_dwt_otpread>
 800f94c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800f950:	bf12      	itee	ne
 800f952:	7360      	strbne	r0, [r4, #13]
 800f954:	232e      	moveq	r3, #46	; 0x2e
 800f956:	7363      	strbeq	r3, [r4, #13]
 800f958:	7b63      	ldrb	r3, [r4, #13]
 800f95a:	2200      	movs	r2, #0
 800f95c:	4920      	ldr	r1, [pc, #128]	; (800f9e0 <ull_initialise+0x130>)
 800f95e:	4628      	mov	r0, r5
 800f960:	f7fe fc1e 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800f964:	2135      	movs	r1, #53	; 0x35
 800f966:	4628      	mov	r0, r5
 800f968:	f7fe fa14 	bl	800dd94 <_dwt_otpread>
 800f96c:	4603      	mov	r3, r0
 800f96e:	bb80      	cbnz	r0, 800f9d2 <ull_initialise+0x122>
 800f970:	2000      	movs	r0, #0
 800f972:	b002      	add	sp, #8
 800f974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f978:	2028      	movs	r0, #40	; 0x28
 800f97a:	f002 fa67 	bl	8011e4c <malloc>
 800f97e:	6528      	str	r0, [r5, #80]	; 0x50
 800f980:	e79e      	b.n	800f8c0 <ull_initialise+0x10>
 800f982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f98c:	2200      	movs	r2, #0
 800f98e:	4915      	ldr	r1, [pc, #84]	; (800f9e4 <ull_initialise+0x134>)
 800f990:	4628      	mov	r0, r5
 800f992:	f7ff fc27 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800f996:	8a23      	ldrh	r3, [r4, #16]
 800f998:	f043 0314 	orr.w	r3, r3, #20
 800f99c:	8223      	strh	r3, [r4, #16]
 800f99e:	e7ae      	b.n	800f8fe <ull_initialise+0x4e>
 800f9a0:	2106      	movs	r1, #6
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	f7fe f9f6 	bl	800dd94 <_dwt_otpread>
 800f9a8:	6020      	str	r0, [r4, #0]
 800f9aa:	e7b5      	b.n	800f918 <ull_initialise+0x68>
 800f9ac:	2107      	movs	r1, #7
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f7fe f9f0 	bl	800dd94 <_dwt_otpread>
 800f9b4:	6060      	str	r0, [r4, #4]
 800f9b6:	e7b2      	b.n	800f91e <ull_initialise+0x6e>
 800f9b8:	2108      	movs	r1, #8
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	f7fe f9ea 	bl	800dd94 <_dwt_otpread>
 800f9c0:	0c00      	lsrs	r0, r0, #16
 800f9c2:	7260      	strb	r0, [r4, #9]
 800f9c4:	e7ae      	b.n	800f924 <ull_initialise+0x74>
 800f9c6:	2109      	movs	r1, #9
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f7fe f9e3 	bl	800dd94 <_dwt_otpread>
 800f9ce:	72a0      	strb	r0, [r4, #10]
 800f9d0:	e7ab      	b.n	800f92a <ull_initialise+0x7a>
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	4904      	ldr	r1, [pc, #16]	; (800f9e8 <ull_initialise+0x138>)
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f7fe f9fe 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800f9dc:	e7c8      	b.n	800f970 <ull_initialise+0xc0>
 800f9de:	bf00      	nop
 800f9e0:	00090014 	.word	0x00090014
 800f9e4:	000b0008 	.word	0x000b0008
 800f9e8:	00090004 	.word	0x00090004

0800f9ec <ull_rxenable>:
 800f9ec:	b530      	push	{r4, r5, lr}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	b171      	cbz	r1, 800fa14 <ull_rxenable+0x28>
 800f9f6:	f021 0302 	bic.w	r3, r1, #2
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	2b0f      	cmp	r3, #15
 800f9fe:	d862      	bhi.n	800fac6 <ull_rxenable+0xda>
 800fa00:	e8df f003 	tbb	[pc, r3]
 800fa04:	24616111 	.word	0x24616111
 800fa08:	2d616161 	.word	0x2d616161
 800fa0c:	61616161 	.word	0x61616161
 800fa10:	3a616161 	.word	0x3a616161
 800fa14:	2102      	movs	r1, #2
 800fa16:	9101      	str	r1, [sp, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	9200      	str	r2, [sp, #0]
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	f7fd fc74 	bl	800d30a <dwt_xfer3xxx>
 800fa22:	4620      	mov	r0, r4
 800fa24:	e010      	b.n	800fa48 <ull_rxenable+0x5c>
 800fa26:	2302      	movs	r3, #2
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	9200      	str	r2, [sp, #0]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	2104      	movs	r1, #4
 800fa32:	f7fd fc6a 	bl	800d30a <dwt_xfer3xxx>
 800fa36:	2203      	movs	r2, #3
 800fa38:	2144      	movs	r1, #68	; 0x44
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f7fd fd42 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800fa40:	f010 0f08 	tst.w	r0, #8
 800fa44:	d125      	bne.n	800fa92 <ull_rxenable+0xa6>
 800fa46:	2000      	movs	r0, #0
 800fa48:	b003      	add	sp, #12
 800fa4a:	bd30      	pop	{r4, r5, pc}
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	9301      	str	r3, [sp, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	9200      	str	r2, [sp, #0]
 800fa54:	4613      	mov	r3, r2
 800fa56:	210a      	movs	r1, #10
 800fa58:	f7fd fc57 	bl	800d30a <dwt_xfer3xxx>
 800fa5c:	e7eb      	b.n	800fa36 <ull_rxenable+0x4a>
 800fa5e:	2100      	movs	r1, #0
 800fa60:	f7fe f9cf 	bl	800de02 <_dwt_adjust_delaytime>
 800fa64:	2302      	movs	r3, #2
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	9200      	str	r2, [sp, #0]
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	2108      	movs	r1, #8
 800fa70:	4628      	mov	r0, r5
 800fa72:	f7fd fc4a 	bl	800d30a <dwt_xfer3xxx>
 800fa76:	e7de      	b.n	800fa36 <ull_rxenable+0x4a>
 800fa78:	2101      	movs	r1, #1
 800fa7a:	f7fe f9c2 	bl	800de02 <_dwt_adjust_delaytime>
 800fa7e:	2302      	movs	r3, #2
 800fa80:	9301      	str	r3, [sp, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	9200      	str	r2, [sp, #0]
 800fa86:	4613      	mov	r3, r2
 800fa88:	2106      	movs	r1, #6
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	f7fd fc3d 	bl	800d30a <dwt_xfer3xxx>
 800fa90:	e7d1      	b.n	800fa36 <ull_rxenable+0x4a>
 800fa92:	2302      	movs	r3, #2
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	2100      	movs	r1, #0
 800fa98:	9100      	str	r1, [sp, #0]
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	460a      	mov	r2, r1
 800fa9e:	4628      	mov	r0, r5
 800faa0:	f7fd fc33 	bl	800d30a <dwt_xfer3xxx>
 800faa4:	f014 0f02 	tst.w	r4, #2
 800faa8:	d002      	beq.n	800fab0 <ull_rxenable+0xc4>
 800faaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faae:	e7cb      	b.n	800fa48 <ull_rxenable+0x5c>
 800fab0:	2102      	movs	r1, #2
 800fab2:	9101      	str	r1, [sp, #4]
 800fab4:	2200      	movs	r2, #0
 800fab6:	9200      	str	r2, [sp, #0]
 800fab8:	4613      	mov	r3, r2
 800faba:	4628      	mov	r0, r5
 800fabc:	f7fd fc25 	bl	800d30a <dwt_xfer3xxx>
 800fac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fac4:	e7c0      	b.n	800fa48 <ull_rxenable+0x5c>
 800fac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faca:	e7bd      	b.n	800fa48 <ull_rxenable+0x5c>

0800facc <ull_softreset_no_sema_fcmd>:
 800facc:	b570      	push	{r4, r5, r6, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	4606      	mov	r6, r0
 800fad2:	2502      	movs	r5, #2
 800fad4:	9501      	str	r5, [sp, #4]
 800fad6:	2400      	movs	r4, #0
 800fad8:	9400      	str	r4, [sp, #0]
 800fada:	4623      	mov	r3, r4
 800fadc:	4622      	mov	r2, r4
 800fade:	2119      	movs	r1, #25
 800fae0:	f7fd fc13 	bl	800d30a <dwt_xfer3xxx>
 800fae4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800fae6:	739c      	strb	r4, [r3, #14]
 800fae8:	821d      	strh	r5, [r3, #16]
 800faea:	751c      	strb	r4, [r3, #20]
 800faec:	755c      	strb	r4, [r3, #21]
 800faee:	73dc      	strb	r4, [r3, #15]
 800faf0:	b002      	add	sp, #8
 800faf2:	bd70      	pop	{r4, r5, r6, pc}

0800faf4 <ull_softreset_fcmd>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	4606      	mov	r6, r0
 800fafa:	2502      	movs	r5, #2
 800fafc:	9501      	str	r5, [sp, #4]
 800fafe:	2400      	movs	r4, #0
 800fb00:	9400      	str	r4, [sp, #0]
 800fb02:	4623      	mov	r3, r4
 800fb04:	4622      	mov	r2, r4
 800fb06:	2118      	movs	r1, #24
 800fb08:	f7fd fbff 	bl	800d30a <dwt_xfer3xxx>
 800fb0c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800fb0e:	739c      	strb	r4, [r3, #14]
 800fb10:	821d      	strh	r5, [r3, #16]
 800fb12:	751c      	strb	r4, [r3, #20]
 800fb14:	755c      	strb	r4, [r3, #21]
 800fb16:	73dc      	strb	r4, [r3, #15]
 800fb18:	b002      	add	sp, #8
 800fb1a:	bd70      	pop	{r4, r5, r6, pc}

0800fb1c <dwt_ioctl>:
 800fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb20:	b08d      	sub	sp, #52	; 0x34
 800fb22:	4606      	mov	r6, r0
 800fb24:	4615      	mov	r5, r2
 800fb26:	461c      	mov	r4, r3
 800fb28:	299c      	cmp	r1, #156	; 0x9c
 800fb2a:	f200 809f 	bhi.w	800fc6c <dwt_ioctl+0x150>
 800fb2e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800fb32:	09b9      	.short	0x09b9
 800fb34:	00a109c4 	.word	0x00a109c4
 800fb38:	00c100a6 	.word	0x00c100a6
 800fb3c:	019d0151 	.word	0x019d0151
 800fb40:	015c0176 	.word	0x015c0176
 800fb44:	01b301ae 	.word	0x01b301ae
 800fb48:	01c501bc 	.word	0x01c501bc
 800fb4c:	01d701ce 	.word	0x01d701ce
 800fb50:	01e501e0 	.word	0x01e501e0
 800fb54:	027201ee 	.word	0x027201ee
 800fb58:	027e0278 	.word	0x027e0278
 800fb5c:	028f0289 	.word	0x028f0289
 800fb60:	029a0295 	.word	0x029a0295
 800fb64:	02a502a0 	.word	0x02a502a0
 800fb68:	02b702ae 	.word	0x02b702ae
 800fb6c:	02c902c0 	.word	0x02c902c0
 800fb70:	02f90304 	.word	0x02f90304
 800fb74:	02d202ee 	.word	0x02d202ee
 800fb78:	031e02e0 	.word	0x031e02e0
 800fb7c:	021a01f8 	.word	0x021a01f8
 800fb80:	02420239 	.word	0x02420239
 800fb84:	08ba0258 	.word	0x08ba0258
 800fb88:	031508bf 	.word	0x031508bf
 800fb8c:	032c0327 	.word	0x032c0327
 800fb90:	033c0336 	.word	0x033c0336
 800fb94:	03520347 	.word	0x03520347
 800fb98:	0386035b 	.word	0x0386035b
 800fb9c:	03a9039d 	.word	0x03a9039d
 800fba0:	03b5030a 	.word	0x03b5030a
 800fba4:	03d203bf 	.word	0x03d203bf
 800fba8:	040b03f9 	.word	0x040b03f9
 800fbac:	0457044d 	.word	0x0457044d
 800fbb0:	048c047d 	.word	0x048c047d
 800fbb4:	049504a7 	.word	0x049504a7
 800fbb8:	04f704b1 	.word	0x04f704b1
 800fbbc:	052f050f 	.word	0x052f050f
 800fbc0:	05580544 	.word	0x05580544
 800fbc4:	057d0561 	.word	0x057d0561
 800fbc8:	0692056a 	.word	0x0692056a
 800fbcc:	071106c1 	.word	0x071106c1
 800fbd0:	07220717 	.word	0x07220717
 800fbd4:	075b073b 	.word	0x075b073b
 800fbd8:	078f0765 	.word	0x078f0765
 800fbdc:	07c607bd 	.word	0x07c607bd
 800fbe0:	07d507cc 	.word	0x07d507cc
 800fbe4:	07ef07e2 	.word	0x07ef07e2
 800fbe8:	080207f9 	.word	0x080207f9
 800fbec:	0816080b 	.word	0x0816080b
 800fbf0:	08270821 	.word	0x08270821
 800fbf4:	0855084a 	.word	0x0855084a
 800fbf8:	086b0860 	.word	0x086b0860
 800fbfc:	0898088d 	.word	0x0898088d
 800fc00:	08c508b1 	.word	0x08c508b1
 800fc04:	0959094f 	.word	0x0959094f
 800fc08:	09cc0964 	.word	0x09cc0964
 800fc0c:	09ae096e 	.word	0x09ae096e
 800fc10:	090306b3 	.word	0x090306b3
 800fc14:	0a3a0924 	.word	0x0a3a0924
 800fc18:	09d90a2f 	.word	0x09d90a2f
 800fc1c:	09ef09e4 	.word	0x09ef09e4
 800fc20:	0a0509fa 	.word	0x0a0509fa
 800fc24:	0a1b0a10 	.word	0x0a1b0a10
 800fc28:	0c320a24 	.word	0x0c320a24
 800fc2c:	0ca30c69 	.word	0x0ca30c69
 800fc30:	0e2d0cc5 	.word	0x0e2d0cc5
 800fc34:	0a4a0e41 	.word	0x0a4a0e41
 800fc38:	0b890b57 	.word	0x0b890b57
 800fc3c:	0b970b93 	.word	0x0b970b93
 800fc40:	0ba50b9b 	.word	0x0ba50b9b
 800fc44:	0bc10bb7 	.word	0x0bc10bb7
 800fc48:	0be80bd4 	.word	0x0be80bd4
 800fc4c:	0cdb0c22 	.word	0x0cdb0c22
 800fc50:	0cfd0ce5 	.word	0x0cfd0ce5
 800fc54:	0d2d0d18 	.word	0x0d2d0d18
 800fc58:	0d890d4d 	.word	0x0d890d4d
 800fc5c:	0db70da1 	.word	0x0db70da1
 800fc60:	0efc0dc7 	.word	0x0efc0dc7
 800fc64:	0dec0df6 	.word	0x0dec0df6
 800fc68:	0e000e08 	.word	0x0e000e08
 800fc6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fc70:	f001 be5c 	b.w	801192c <dwt_ioctl+0x1e10>
 800fc74:	f7fd fb28 	bl	800d2c8 <ull_wakeup_ic>
 800fc78:	2500      	movs	r5, #0
 800fc7a:	f001 be57 	b.w	801192c <dwt_ioctl+0x1e10>
 800fc7e:	2202      	movs	r2, #2
 800fc80:	49c0      	ldr	r1, [pc, #768]	; (800ff84 <dwt_ioctl+0x468>)
 800fc82:	f7fd fc1f 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800fc86:	2803      	cmp	r0, #3
 800fc88:	d802      	bhi.n	800fc90 <dwt_ioctl+0x174>
 800fc8a:	2500      	movs	r5, #0
 800fc8c:	f001 be4e 	b.w	801192c <dwt_ioctl+0x1e10>
 800fc90:	f7f0 fdbe 	bl	8000810 <decamutexon>
 800fc94:	4604      	mov	r4, r0
 800fc96:	2302      	movs	r3, #2
 800fc98:	9301      	str	r3, [sp, #4]
 800fc9a:	2500      	movs	r5, #0
 800fc9c:	9500      	str	r5, [sp, #0]
 800fc9e:	462b      	mov	r3, r5
 800fca0:	462a      	mov	r2, r5
 800fca2:	4629      	mov	r1, r5
 800fca4:	4630      	mov	r0, r6
 800fca6:	f7fd fb30 	bl	800d30a <dwt_xfer3xxx>
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f7f0 fdc1 	bl	8000832 <decamutexoff>
 800fcb0:	f001 be3c 	b.w	801192c <dwt_ioctl+0x1e10>
 800fcb4:	2c00      	cmp	r4, #0
 800fcb6:	f001 863d 	beq.w	8011934 <dwt_ioctl+0x1e18>
 800fcba:	7824      	ldrb	r4, [r4, #0]
 800fcbc:	f014 0f1d 	tst.w	r4, #29
 800fcc0:	d063      	beq.n	800fd8a <dwt_ioctl+0x26e>
 800fcc2:	f014 0f01 	tst.w	r4, #1
 800fcc6:	d025      	beq.n	800fd14 <dwt_ioctl+0x1f8>
 800fcc8:	f014 0f02 	tst.w	r4, #2
 800fccc:	f04f 0302 	mov.w	r3, #2
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	f04f 0200 	mov.w	r2, #0
 800fcd6:	9200      	str	r2, [sp, #0]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	bf14      	ite	ne
 800fcdc:	210d      	movne	r1, #13
 800fcde:	2103      	moveq	r1, #3
 800fce0:	f7fd fb13 	bl	800d30a <dwt_xfer3xxx>
 800fce4:	2203      	movs	r2, #3
 800fce6:	2144      	movs	r1, #68	; 0x44
 800fce8:	4630      	mov	r0, r6
 800fcea:	f7fd fbeb 	bl	800d4c4 <dwt_read8bitoffsetreg>
 800fcee:	f010 0f08 	tst.w	r0, #8
 800fcf2:	bf08      	it	eq
 800fcf4:	2500      	moveq	r5, #0
 800fcf6:	f001 8619 	beq.w	801192c <dwt_ioctl+0x1e10>
 800fcfa:	2302      	movs	r3, #2
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	2100      	movs	r1, #0
 800fd00:	9100      	str	r1, [sp, #0]
 800fd02:	460b      	mov	r3, r1
 800fd04:	460a      	mov	r2, r1
 800fd06:	4630      	mov	r0, r6
 800fd08:	f7fd faff 	bl	800d30a <dwt_xfer3xxx>
 800fd0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fd10:	f001 be0c 	b.w	801192c <dwt_ioctl+0x1e10>
 800fd14:	f014 0f08 	tst.w	r4, #8
 800fd18:	d111      	bne.n	800fd3e <dwt_ioctl+0x222>
 800fd1a:	f014 0f10 	tst.w	r4, #16
 800fd1e:	d121      	bne.n	800fd64 <dwt_ioctl+0x248>
 800fd20:	f014 0f02 	tst.w	r4, #2
 800fd24:	f04f 0302 	mov.w	r3, #2
 800fd28:	9301      	str	r3, [sp, #4]
 800fd2a:	f04f 0200 	mov.w	r2, #0
 800fd2e:	9200      	str	r2, [sp, #0]
 800fd30:	4613      	mov	r3, r2
 800fd32:	bf14      	ite	ne
 800fd34:	2110      	movne	r1, #16
 800fd36:	2109      	moveq	r1, #9
 800fd38:	f7fd fae7 	bl	800d30a <dwt_xfer3xxx>
 800fd3c:	e7d2      	b.n	800fce4 <dwt_ioctl+0x1c8>
 800fd3e:	2100      	movs	r1, #0
 800fd40:	f7fe f85f 	bl	800de02 <_dwt_adjust_delaytime>
 800fd44:	f014 0f02 	tst.w	r4, #2
 800fd48:	f04f 0302 	mov.w	r3, #2
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	f04f 0200 	mov.w	r2, #0
 800fd52:	9200      	str	r2, [sp, #0]
 800fd54:	4613      	mov	r3, r2
 800fd56:	bf14      	ite	ne
 800fd58:	210f      	movne	r1, #15
 800fd5a:	2107      	moveq	r1, #7
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	f7fd fad4 	bl	800d30a <dwt_xfer3xxx>
 800fd62:	e7bf      	b.n	800fce4 <dwt_ioctl+0x1c8>
 800fd64:	2101      	movs	r1, #1
 800fd66:	f7fe f84c 	bl	800de02 <_dwt_adjust_delaytime>
 800fd6a:	f014 0f02 	tst.w	r4, #2
 800fd6e:	f04f 0302 	mov.w	r3, #2
 800fd72:	9301      	str	r3, [sp, #4]
 800fd74:	f04f 0200 	mov.w	r2, #0
 800fd78:	9200      	str	r2, [sp, #0]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	bf14      	ite	ne
 800fd7e:	210e      	movne	r1, #14
 800fd80:	2105      	moveq	r1, #5
 800fd82:	4630      	mov	r0, r6
 800fd84:	f7fd fac1 	bl	800d30a <dwt_xfer3xxx>
 800fd88:	e7ac      	b.n	800fce4 <dwt_ioctl+0x1c8>
 800fd8a:	f014 0f20 	tst.w	r4, #32
 800fd8e:	d010      	beq.n	800fdb2 <dwt_ioctl+0x296>
 800fd90:	f014 0f02 	tst.w	r4, #2
 800fd94:	f04f 0302 	mov.w	r3, #2
 800fd98:	9301      	str	r3, [sp, #4]
 800fd9a:	f04f 0500 	mov.w	r5, #0
 800fd9e:	9500      	str	r5, [sp, #0]
 800fda0:	462b      	mov	r3, r5
 800fda2:	462a      	mov	r2, r5
 800fda4:	bf14      	ite	ne
 800fda6:	2111      	movne	r1, #17
 800fda8:	210b      	moveq	r1, #11
 800fdaa:	f7fd faae 	bl	800d30a <dwt_xfer3xxx>
 800fdae:	f001 bdbd 	b.w	801192c <dwt_ioctl+0x1e10>
 800fdb2:	f014 0f02 	tst.w	r4, #2
 800fdb6:	f04f 0302 	mov.w	r3, #2
 800fdba:	9301      	str	r3, [sp, #4]
 800fdbc:	f04f 0500 	mov.w	r5, #0
 800fdc0:	9500      	str	r5, [sp, #0]
 800fdc2:	462b      	mov	r3, r5
 800fdc4:	462a      	mov	r2, r5
 800fdc6:	bf14      	ite	ne
 800fdc8:	210c      	movne	r1, #12
 800fdca:	2101      	moveq	r1, #1
 800fdcc:	f7fd fa9d 	bl	800d30a <dwt_xfer3xxx>
 800fdd0:	f001 bdac 	b.w	801192c <dwt_ioctl+0x1e10>
 800fdd4:	2c00      	cmp	r4, #0
 800fdd6:	f001 85af 	beq.w	8011938 <dwt_ioctl+0x1e1c>
 800fdda:	6823      	ldr	r3, [r4, #0]
 800fddc:	2200      	movs	r2, #0
 800fdde:	2128      	movs	r1, #40	; 0x28
 800fde0:	f7fd fffa 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800fde4:	2500      	movs	r5, #0
 800fde6:	f001 bda1 	b.w	801192c <dwt_ioctl+0x1e10>
 800fdea:	6823      	ldr	r3, [r4, #0]
 800fdec:	2200      	movs	r2, #0
 800fdee:	4966      	ldr	r1, [pc, #408]	; (800ff88 <dwt_ioctl+0x46c>)
 800fdf0:	f7fd fff2 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800fdf4:	6863      	ldr	r3, [r4, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4964      	ldr	r1, [pc, #400]	; (800ff8c <dwt_ioctl+0x470>)
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f7fd ffec 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800fe00:	68a3      	ldr	r3, [r4, #8]
 800fe02:	2200      	movs	r2, #0
 800fe04:	4962      	ldr	r1, [pc, #392]	; (800ff90 <dwt_ioctl+0x474>)
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7fd ffe6 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800fe0c:	68e3      	ldr	r3, [r4, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	4960      	ldr	r1, [pc, #384]	; (800ff94 <dwt_ioctl+0x478>)
 800fe12:	4630      	mov	r0, r6
 800fe14:	f7fd ffe0 	bl	800ddd8 <dwt_write32bitoffsetreg>
 800fe18:	2500      	movs	r5, #0
 800fe1a:	f001 bd87 	b.w	801192c <dwt_ioctl+0x1e10>
 800fe1e:	2c00      	cmp	r4, #0
 800fe20:	f001 858c 	beq.w	801193c <dwt_ioctl+0x1e20>
 800fe24:	8823      	ldrh	r3, [r4, #0]
 800fe26:	6865      	ldr	r5, [r4, #4]
 800fe28:	2d03      	cmp	r5, #3
 800fe2a:	f201 8589 	bhi.w	8011940 <dwt_ioctl+0x1e24>
 800fe2e:	e8df f005 	tbb	[pc, r5]
 800fe32:	0802      	.short	0x0802
 800fe34:	160f      	.short	0x160f
 800fe36:	2200      	movs	r2, #0
 800fe38:	4957      	ldr	r1, [pc, #348]	; (800ff98 <dwt_ioctl+0x47c>)
 800fe3a:	f7fd ff62 	bl	800dd02 <dwt_write16bitoffsetreg>
 800fe3e:	f001 bd75 	b.w	801192c <dwt_ioctl+0x1e10>
 800fe42:	2202      	movs	r2, #2
 800fe44:	4954      	ldr	r1, [pc, #336]	; (800ff98 <dwt_ioctl+0x47c>)
 800fe46:	f7fd ff5c 	bl	800dd02 <dwt_write16bitoffsetreg>
 800fe4a:	2500      	movs	r5, #0
 800fe4c:	f001 bd6e 	b.w	801192c <dwt_ioctl+0x1e10>
 800fe50:	2200      	movs	r2, #0
 800fe52:	4952      	ldr	r1, [pc, #328]	; (800ff9c <dwt_ioctl+0x480>)
 800fe54:	f7fd ff55 	bl	800dd02 <dwt_write16bitoffsetreg>
 800fe58:	2500      	movs	r5, #0
 800fe5a:	f001 bd67 	b.w	801192c <dwt_ioctl+0x1e10>
 800fe5e:	2202      	movs	r2, #2
 800fe60:	494e      	ldr	r1, [pc, #312]	; (800ff9c <dwt_ioctl+0x480>)
 800fe62:	f7fd ff4e 	bl	800dd02 <dwt_write16bitoffsetreg>
 800fe66:	2500      	movs	r5, #0
 800fe68:	f001 bd60 	b.w	801192c <dwt_ioctl+0x1e10>
 800fe6c:	2c00      	cmp	r4, #0
 800fe6e:	f001 8569 	beq.w	8011944 <dwt_ioctl+0x1e28>
 800fe72:	7823      	ldrb	r3, [r4, #0]
 800fe74:	005b      	lsls	r3, r3, #1
 800fe76:	f003 0306 	and.w	r3, r3, #6
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	f06f 0306 	mvn.w	r3, #6
 800fe80:	2200      	movs	r2, #0
 800fe82:	4947      	ldr	r1, [pc, #284]	; (800ffa0 <dwt_ioctl+0x484>)
 800fe84:	f7fe fcae 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800fe88:	2500      	movs	r5, #0
 800fe8a:	f001 bd4f 	b.w	801192c <dwt_ioctl+0x1e10>
 800fe8e:	f7fe fccd 	bl	800e82c <ull_enablegpioclocks>
 800fe92:	2500      	movs	r5, #0
 800fe94:	f001 bd4a 	b.w	801192c <dwt_ioctl+0x1e10>
 800fe98:	2c00      	cmp	r4, #0
 800fe9a:	f001 8555 	beq.w	8011948 <dwt_ioctl+0x1e2c>
 800fe9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fea0:	7b1b      	ldrb	r3, [r3, #12]
 800fea2:	7023      	strb	r3, [r4, #0]
 800fea4:	2500      	movs	r5, #0
 800fea6:	f001 bd41 	b.w	801192c <dwt_ioctl+0x1e10>
 800feaa:	2c00      	cmp	r4, #0
 800feac:	f001 854e 	beq.w	801194c <dwt_ioctl+0x1e30>
 800feb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800feb2:	7a5b      	ldrb	r3, [r3, #9]
 800feb4:	7023      	strb	r3, [r4, #0]
 800feb6:	2500      	movs	r5, #0
 800feb8:	f001 bd38 	b.w	801192c <dwt_ioctl+0x1e10>
 800febc:	2c00      	cmp	r4, #0
 800febe:	f001 8547 	beq.w	8011950 <dwt_ioctl+0x1e34>
 800fec2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fec4:	7a9b      	ldrb	r3, [r3, #10]
 800fec6:	7023      	strb	r3, [r4, #0]
 800fec8:	2500      	movs	r5, #0
 800feca:	f001 bd2f 	b.w	801192c <dwt_ioctl+0x1e10>
 800fece:	2c00      	cmp	r4, #0
 800fed0:	f001 8540 	beq.w	8011954 <dwt_ioctl+0x1e38>
 800fed4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	6023      	str	r3, [r4, #0]
 800feda:	2500      	movs	r5, #0
 800fedc:	f001 bd26 	b.w	801192c <dwt_ioctl+0x1e10>
 800fee0:	2c00      	cmp	r4, #0
 800fee2:	f001 8539 	beq.w	8011958 <dwt_ioctl+0x1e3c>
 800fee6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	6023      	str	r3, [r4, #0]
 800feec:	2500      	movs	r5, #0
 800feee:	f001 bd1d 	b.w	801192c <dwt_ioctl+0x1e10>
 800fef2:	f7fe fae1 	bl	800e4b8 <ull_signal_rx_buff_free>
 800fef6:	2500      	movs	r5, #0
 800fef8:	f001 bd18 	b.w	801192c <dwt_ioctl+0x1e10>
 800fefc:	2c00      	cmp	r4, #0
 800fefe:	f001 852d 	beq.w	801195c <dwt_ioctl+0x1e40>
 800ff02:	6821      	ldr	r1, [r4, #0]
 800ff04:	f7fd ffa3 	bl	800de4e <ull_setrxaftertxdelay>
 800ff08:	2500      	movs	r5, #0
 800ff0a:	f001 bd0f 	b.w	801192c <dwt_ioctl+0x1e10>
 800ff0e:	2c00      	cmp	r4, #0
 800ff10:	f001 8526 	beq.w	8011960 <dwt_ioctl+0x1e44>
 800ff14:	6862      	ldr	r2, [r4, #4]
 800ff16:	7821      	ldrb	r1, [r4, #0]
 800ff18:	f7fe fde8 	bl	800eaec <ull_enablespicrccheck>
 800ff1c:	2500      	movs	r5, #0
 800ff1e:	f001 bd05 	b.w	801192c <dwt_ioctl+0x1e10>
 800ff22:	2c00      	cmp	r4, #0
 800ff24:	f001 851e 	beq.w	8011964 <dwt_ioctl+0x1e48>
 800ff28:	6865      	ldr	r5, [r4, #4]
 800ff2a:	7823      	ldrb	r3, [r4, #0]
 800ff2c:	2203      	movs	r2, #3
 800ff2e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ff32:	f7fe f935 	bl	800e1a0 <dwt_write8bitoffsetreg>
 800ff36:	b94d      	cbnz	r5, 800ff4c <dwt_ioctl+0x430>
 800ff38:	2200      	movs	r2, #0
 800ff3a:	9200      	str	r2, [sp, #0]
 800ff3c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800ff40:	2110      	movs	r1, #16
 800ff42:	4630      	mov	r0, r6
 800ff44:	f7ff f94e 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800ff48:	f001 bcf0 	b.w	801192c <dwt_ioctl+0x1e10>
 800ff4c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff56:	2200      	movs	r2, #0
 800ff58:	2110      	movs	r1, #16
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	f7fe fc42 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 800ff60:	2500      	movs	r5, #0
 800ff62:	f001 bce3 	b.w	801192c <dwt_ioctl+0x1e10>
 800ff66:	2200      	movs	r2, #0
 800ff68:	4611      	mov	r1, r2
 800ff6a:	f7fd fa56 	bl	800d41a <dwt_read32bitoffsetreg>
 800ff6e:	68b2      	ldr	r2, [r6, #8]
 800ff70:	6813      	ldr	r3, [r2, #0]
 800ff72:	4043      	eors	r3, r0
 800ff74:	6852      	ldr	r2, [r2, #4]
 800ff76:	4213      	tst	r3, r2
 800ff78:	bf14      	ite	ne
 800ff7a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800ff7e:	2500      	moveq	r5, #0
 800ff80:	f001 bcd4 	b.w	801192c <dwt_ioctl+0x1e10>
 800ff84:	000f0030 	.word	0x000f0030
 800ff88:	00010054 	.word	0x00010054
 800ff8c:	00010058 	.word	0x00010058
 800ff90:	0001005c 	.word	0x0001005c
 800ff94:	00010060 	.word	0x00010060
 800ff98:	0001000c 	.word	0x0001000c
 800ff9c:	00010010 	.word	0x00010010
 800ffa0:	00010008 	.word	0x00010008
 800ffa4:	2c00      	cmp	r4, #0
 800ffa6:	f001 84df 	beq.w	8011968 <dwt_ioctl+0x1e4c>
 800ffaa:	7821      	ldrb	r1, [r4, #0]
 800ffac:	f7fe fdba 	bl	800eb24 <ull_configciadiag>
 800ffb0:	2500      	movs	r5, #0
 800ffb2:	f001 bcbb 	b.w	801192c <dwt_ioctl+0x1e10>
 800ffb6:	b942      	cbnz	r2, 800ffca <dwt_ioctl+0x4ae>
 800ffb8:	2200      	movs	r2, #0
 800ffba:	9200      	str	r2, [sp, #0]
 800ffbc:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800ffc0:	49d2      	ldr	r1, [pc, #840]	; (801030c <dwt_ioctl+0x7f0>)
 800ffc2:	f7ff f90f 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800ffc6:	f001 bcb1 	b.w	801192c <dwt_ioctl+0x1e10>
 800ffca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ffce:	9300      	str	r3, [sp, #0]
 800ffd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	49cd      	ldr	r1, [pc, #820]	; (801030c <dwt_ioctl+0x7f0>)
 800ffd8:	f7ff f904 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 800ffdc:	2500      	movs	r5, #0
 800ffde:	f001 bca5 	b.w	801192c <dwt_ioctl+0x1e10>
 800ffe2:	f002 0201 	and.w	r2, r2, #1
 800ffe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffea:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800ffee:	2a00      	cmp	r2, #0
 800fff0:	bf08      	it	eq
 800fff2:	460b      	moveq	r3, r1
 800fff4:	02d2      	lsls	r2, r2, #11
 800fff6:	f015 0f02 	tst.w	r5, #2
 800fffa:	bf12      	itee	ne
 800fffc:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8010000:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010004:	b29b      	uxtheq	r3, r3
 8010006:	9200      	str	r2, [sp, #0]
 8010008:	2200      	movs	r2, #0
 801000a:	49c0      	ldr	r1, [pc, #768]	; (801030c <dwt_ioctl+0x7f0>)
 801000c:	f7ff f8ea 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 8010010:	2500      	movs	r5, #0
 8010012:	f001 bc8b 	b.w	801192c <dwt_ioctl+0x1e10>
 8010016:	4611      	mov	r1, r2
 8010018:	f7fd ff2e 	bl	800de78 <ull_setfinegraintxseq>
 801001c:	2500      	movs	r5, #0
 801001e:	f001 bc85 	b.w	801192c <dwt_ioctl+0x1e10>
 8010022:	4611      	mov	r1, r2
 8010024:	f7fd ff3c 	bl	800dea0 <ull_setlnapamode>
 8010028:	2500      	movs	r5, #0
 801002a:	f001 bc7f 	b.w	801192c <dwt_ioctl+0x1e10>
 801002e:	2c00      	cmp	r4, #0
 8010030:	f001 849c 	beq.w	801196c <dwt_ioctl+0x1e50>
 8010034:	2200      	movs	r2, #0
 8010036:	49b6      	ldr	r1, [pc, #728]	; (8010310 <dwt_ioctl+0x7f4>)
 8010038:	f7fd fa44 	bl	800d4c4 <dwt_read8bitoffsetreg>
 801003c:	7020      	strb	r0, [r4, #0]
 801003e:	2500      	movs	r5, #0
 8010040:	f001 bc74 	b.w	801192c <dwt_ioctl+0x1e10>
 8010044:	4621      	mov	r1, r4
 8010046:	f7fd ff4b 	bl	800dee0 <ull_configurestskey>
 801004a:	2500      	movs	r5, #0
 801004c:	f001 bc6e 	b.w	801192c <dwt_ioctl+0x1e10>
 8010050:	4621      	mov	r1, r4
 8010052:	f7fd ff69 	bl	800df28 <ull_configurestsiv>
 8010056:	2500      	movs	r5, #0
 8010058:	f001 bc68 	b.w	801192c <dwt_ioctl+0x1e10>
 801005c:	f7fe fd98 	bl	800eb90 <ull_configurestsloadiv>
 8010060:	2500      	movs	r5, #0
 8010062:	f001 bc63 	b.w	801192c <dwt_ioctl+0x1e10>
 8010066:	4611      	mov	r1, r2
 8010068:	f7fd ff82 	bl	800df70 <ull_configmrxlut>
 801006c:	2500      	movs	r5, #0
 801006e:	f001 bc5d 	b.w	801192c <dwt_ioctl+0x1e10>
 8010072:	f7fe feb3 	bl	800eddc <ull_restoreconfig>
 8010076:	2500      	movs	r5, #0
 8010078:	f001 bc58 	b.w	801192c <dwt_ioctl+0x1e10>
 801007c:	2c00      	cmp	r4, #0
 801007e:	f001 8477 	beq.w	8011970 <dwt_ioctl+0x1e54>
 8010082:	7821      	ldrb	r1, [r4, #0]
 8010084:	f7ff f8c8 	bl	800f218 <ull_configurestsmode>
 8010088:	2500      	movs	r5, #0
 801008a:	f001 bc4f 	b.w	801192c <dwt_ioctl+0x1e10>
 801008e:	2c00      	cmp	r4, #0
 8010090:	f001 8470 	beq.w	8011974 <dwt_ioctl+0x1e58>
 8010094:	8821      	ldrh	r1, [r4, #0]
 8010096:	f7fd fe44 	bl	800dd22 <ull_setrxantennadelay>
 801009a:	2500      	movs	r5, #0
 801009c:	f001 bc46 	b.w	801192c <dwt_ioctl+0x1e10>
 80100a0:	2c00      	cmp	r4, #0
 80100a2:	f001 8469 	beq.w	8011978 <dwt_ioctl+0x1e5c>
 80100a6:	f7fd f9e0 	bl	800d46a <ull_getrxantennadelay>
 80100aa:	8020      	strh	r0, [r4, #0]
 80100ac:	2500      	movs	r5, #0
 80100ae:	f001 bc3d 	b.w	801192c <dwt_ioctl+0x1e10>
 80100b2:	2c00      	cmp	r4, #0
 80100b4:	f001 8462 	beq.w	801197c <dwt_ioctl+0x1e60>
 80100b8:	8821      	ldrh	r1, [r4, #0]
 80100ba:	f7fd fe3a 	bl	800dd32 <ull_settxantennadelay>
 80100be:	2500      	movs	r5, #0
 80100c0:	f001 bc34 	b.w	801192c <dwt_ioctl+0x1e10>
 80100c4:	2c00      	cmp	r4, #0
 80100c6:	f001 845b 	beq.w	8011980 <dwt_ioctl+0x1e64>
 80100ca:	f7fd f9d5 	bl	800d478 <ull_gettxantennadelay>
 80100ce:	8020      	strh	r0, [r4, #0]
 80100d0:	2500      	movs	r5, #0
 80100d2:	f001 bc2b 	b.w	801192c <dwt_ioctl+0x1e10>
 80100d6:	2c00      	cmp	r4, #0
 80100d8:	f001 8454 	beq.w	8011984 <dwt_ioctl+0x1e68>
 80100dc:	88a3      	ldrh	r3, [r4, #4]
 80100de:	88e2      	ldrh	r2, [r4, #6]
 80100e0:	6821      	ldr	r1, [r4, #0]
 80100e2:	9100      	str	r1, [sp, #0]
 80100e4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80100e8:	f7fd fe00 	bl	800dcec <dwt_writetodevice>
 80100ec:	2500      	movs	r5, #0
 80100ee:	f001 bc1d 	b.w	801192c <dwt_ioctl+0x1e10>
 80100f2:	2c00      	cmp	r4, #0
 80100f4:	f001 8448 	beq.w	8011988 <dwt_ioctl+0x1e6c>
 80100f8:	88a3      	ldrh	r3, [r4, #4]
 80100fa:	88e2      	ldrh	r2, [r4, #6]
 80100fc:	6821      	ldr	r1, [r4, #0]
 80100fe:	9100      	str	r1, [sp, #0]
 8010100:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8010104:	f7fd f97f 	bl	800d406 <dwt_readfromdevice>
 8010108:	2500      	movs	r5, #0
 801010a:	f001 bc0f 	b.w	801192c <dwt_ioctl+0x1e10>
 801010e:	2c00      	cmp	r4, #0
 8010110:	f001 843c 	beq.w	801198c <dwt_ioctl+0x1e70>
 8010114:	88e3      	ldrh	r3, [r4, #6]
 8010116:	88a2      	ldrh	r2, [r4, #4]
 8010118:	6821      	ldr	r1, [r4, #0]
 801011a:	f7fe f80b 	bl	800e134 <ull_readrxdata>
 801011e:	2500      	movs	r5, #0
 8010120:	f001 bc04 	b.w	801192c <dwt_ioctl+0x1e10>
 8010124:	2c00      	cmp	r4, #0
 8010126:	f001 8433 	beq.w	8011990 <dwt_ioctl+0x1e74>
 801012a:	88e3      	ldrh	r3, [r4, #6]
 801012c:	6822      	ldr	r2, [r4, #0]
 801012e:	88a1      	ldrh	r1, [r4, #4]
 8010130:	f7fe f990 	bl	800e454 <ull_writetxdata>
 8010134:	2500      	movs	r5, #0
 8010136:	f001 bbf9 	b.w	801192c <dwt_ioctl+0x1e10>
 801013a:	4611      	mov	r1, r2
 801013c:	f7ff fc56 	bl	800f9ec <ull_rxenable>
 8010140:	2500      	movs	r5, #0
 8010142:	f001 bbf3 	b.w	801192c <dwt_ioctl+0x1e10>
 8010146:	2c00      	cmp	r4, #0
 8010148:	f001 8424 	beq.w	8011994 <dwt_ioctl+0x1e78>
 801014c:	7923      	ldrb	r3, [r4, #4]
 801014e:	8862      	ldrh	r2, [r4, #2]
 8010150:	8821      	ldrh	r1, [r4, #0]
 8010152:	f7fe fc97 	bl	800ea84 <ull_writetxfctrl>
 8010156:	2500      	movs	r5, #0
 8010158:	f001 bbe8 	b.w	801192c <dwt_ioctl+0x1e10>
 801015c:	2c00      	cmp	r4, #0
 801015e:	f001 841b 	beq.w	8011998 <dwt_ioctl+0x1e7c>
 8010162:	f7fd f98f 	bl	800d484 <ull_readclockoffset>
 8010166:	8020      	strh	r0, [r4, #0]
 8010168:	2500      	movs	r5, #0
 801016a:	f001 bbdf 	b.w	801192c <dwt_ioctl+0x1e10>
 801016e:	2c00      	cmp	r4, #0
 8010170:	f001 8414 	beq.w	801199c <dwt_ioctl+0x1e80>
 8010174:	f7fd f9b4 	bl	800d4e0 <ull_readcarrierintegrator>
 8010178:	6020      	str	r0, [r4, #0]
 801017a:	2500      	movs	r5, #0
 801017c:	f001 bbd6 	b.w	801192c <dwt_ioctl+0x1e10>
 8010180:	f7fe f866 	bl	800e250 <ull_clearaonconfig>
 8010184:	2500      	movs	r5, #0
 8010186:	f001 bbd1 	b.w	801192c <dwt_ioctl+0x1e10>
 801018a:	2c00      	cmp	r4, #0
 801018c:	f001 8408 	beq.w	80119a0 <dwt_ioctl+0x1e84>
 8010190:	8861      	ldrh	r1, [r4, #2]
 8010192:	f7fe fe53 	bl	800ee3c <ull_calcbandwidthadj>
 8010196:	7020      	strb	r0, [r4, #0]
 8010198:	2500      	movs	r5, #0
 801019a:	f001 bbc7 	b.w	801192c <dwt_ioctl+0x1e10>
 801019e:	4621      	mov	r1, r4
 80101a0:	f7fd f9be 	bl	800d520 <ull_readdiagnostics>
 80101a4:	2500      	movs	r5, #0
 80101a6:	f001 bbc1 	b.w	801192c <dwt_ioctl+0x1e10>
 80101aa:	2c00      	cmp	r4, #0
 80101ac:	f001 83fa 	beq.w	80119a4 <dwt_ioctl+0x1e88>
 80101b0:	2201      	movs	r2, #1
 80101b2:	2170      	movs	r1, #112	; 0x70
 80101b4:	f7fd f931 	bl	800d41a <dwt_read32bitoffsetreg>
 80101b8:	6020      	str	r0, [r4, #0]
 80101ba:	2500      	movs	r5, #0
 80101bc:	f001 bbb6 	b.w	801192c <dwt_ioctl+0x1e10>
 80101c0:	2c00      	cmp	r4, #0
 80101c2:	f001 83f1 	beq.w	80119a8 <dwt_ioctl+0x1e8c>
 80101c6:	2200      	movs	r2, #0
 80101c8:	2170      	movs	r1, #112	; 0x70
 80101ca:	f7fd f926 	bl	800d41a <dwt_read32bitoffsetreg>
 80101ce:	6020      	str	r0, [r4, #0]
 80101d0:	2500      	movs	r5, #0
 80101d2:	f001 bbab 	b.w	801192c <dwt_ioctl+0x1e10>
 80101d6:	9400      	str	r4, [sp, #0]
 80101d8:	2305      	movs	r3, #5
 80101da:	2200      	movs	r2, #0
 80101dc:	2170      	movs	r1, #112	; 0x70
 80101de:	f7fd f912 	bl	800d406 <dwt_readfromdevice>
 80101e2:	2500      	movs	r5, #0
 80101e4:	f001 bba2 	b.w	801192c <dwt_ioctl+0x1e10>
 80101e8:	2c00      	cmp	r4, #0
 80101ea:	f001 83df 	beq.w	80119ac <dwt_ioctl+0x1e90>
 80101ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80101f0:	7b9b      	ldrb	r3, [r3, #14]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d015      	beq.n	8010222 <dwt_ioctl+0x706>
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d11a      	bne.n	8010230 <dwt_ioctl+0x714>
 80101fa:	2216      	movs	r2, #22
 80101fc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010200:	f7fd f921 	bl	800d446 <dwt_read16bitoffsetreg>
 8010204:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8010208:	b283      	uxth	r3, r0
 801020a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801020e:	d004      	beq.n	801021a <dwt_ioctl+0x6fe>
 8010210:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8010214:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8010218:	b218      	sxth	r0, r3
 801021a:	8020      	strh	r0, [r4, #0]
 801021c:	2500      	movs	r5, #0
 801021e:	f001 bb85 	b.w	801192c <dwt_ioctl+0x1e10>
 8010222:	2202      	movs	r2, #2
 8010224:	493b      	ldr	r1, [pc, #236]	; (8010314 <dwt_ioctl+0x7f8>)
 8010226:	f7fd f90e 	bl	800d446 <dwt_read16bitoffsetreg>
 801022a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801022e:	e7eb      	b.n	8010208 <dwt_ioctl+0x6ec>
 8010230:	2202      	movs	r2, #2
 8010232:	4939      	ldr	r1, [pc, #228]	; (8010318 <dwt_ioctl+0x7fc>)
 8010234:	f7fd f907 	bl	800d446 <dwt_read16bitoffsetreg>
 8010238:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801023c:	e7e4      	b.n	8010208 <dwt_ioctl+0x6ec>
 801023e:	9400      	str	r4, [sp, #0]
 8010240:	2306      	movs	r3, #6
 8010242:	2200      	movs	r2, #0
 8010244:	4935      	ldr	r1, [pc, #212]	; (801031c <dwt_ioctl+0x800>)
 8010246:	f7fd f8de 	bl	800d406 <dwt_readfromdevice>
 801024a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801024e:	2b00      	cmp	r3, #0
 8010250:	db06      	blt.n	8010260 <dwt_ioctl+0x744>
 8010252:	7963      	ldrb	r3, [r4, #5]
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	7163      	strb	r3, [r4, #5]
 801025a:	2500      	movs	r5, #0
 801025c:	f001 bb66 	b.w	801192c <dwt_ioctl+0x1e10>
 8010260:	23ff      	movs	r3, #255	; 0xff
 8010262:	70a3      	strb	r3, [r4, #2]
 8010264:	70e3      	strb	r3, [r4, #3]
 8010266:	7123      	strb	r3, [r4, #4]
 8010268:	7163      	strb	r3, [r4, #5]
 801026a:	e7f2      	b.n	8010252 <dwt_ioctl+0x736>
 801026c:	2c00      	cmp	r4, #0
 801026e:	f001 839f 	beq.w	80119b0 <dwt_ioctl+0x1e94>
 8010272:	2201      	movs	r2, #1
 8010274:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010278:	f7fd f924 	bl	800d4c4 <dwt_read8bitoffsetreg>
 801027c:	7020      	strb	r0, [r4, #0]
 801027e:	2500      	movs	r5, #0
 8010280:	f001 bb54 	b.w	801192c <dwt_ioctl+0x1e10>
 8010284:	2c00      	cmp	r4, #0
 8010286:	f001 8395 	beq.w	80119b4 <dwt_ioctl+0x1e98>
 801028a:	2200      	movs	r2, #0
 801028c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010290:	f7fd f918 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8010294:	7020      	strb	r0, [r4, #0]
 8010296:	2500      	movs	r5, #0
 8010298:	f001 bb48 	b.w	801192c <dwt_ioctl+0x1e10>
 801029c:	2c00      	cmp	r4, #0
 801029e:	f001 838b 	beq.w	80119b8 <dwt_ioctl+0x1e9c>
 80102a2:	88a2      	ldrh	r2, [r4, #4]
 80102a4:	6821      	ldr	r1, [r4, #0]
 80102a6:	f7fe fb17 	bl	800e8d8 <_dwt_otpprogword32>
 80102aa:	2500      	movs	r5, #0
 80102ac:	f001 bb3e 	b.w	801192c <dwt_ioctl+0x1e10>
 80102b0:	2c00      	cmp	r4, #0
 80102b2:	f001 8383 	beq.w	80119bc <dwt_ioctl+0x1ea0>
 80102b6:	6825      	ldr	r5, [r4, #0]
 80102b8:	88a4      	ldrh	r4, [r4, #4]
 80102ba:	4622      	mov	r2, r4
 80102bc:	4629      	mov	r1, r5
 80102be:	f7fe fb0b 	bl	800e8d8 <_dwt_otpprogword32>
 80102c2:	4621      	mov	r1, r4
 80102c4:	4630      	mov	r0, r6
 80102c6:	f7fd fd65 	bl	800dd94 <_dwt_otpread>
 80102ca:	1a2d      	subs	r5, r5, r0
 80102cc:	bf18      	it	ne
 80102ce:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80102d2:	f001 bb2b 	b.w	801192c <dwt_ioctl+0x1e10>
 80102d6:	2a02      	cmp	r2, #2
 80102d8:	d00f      	beq.n	80102fa <dwt_ioctl+0x7de>
 80102da:	4c11      	ldr	r4, [pc, #68]	; (8010320 <dwt_ioctl+0x804>)
 80102dc:	2300      	movs	r3, #0
 80102de:	461a      	mov	r2, r3
 80102e0:	4621      	mov	r1, r4
 80102e2:	4630      	mov	r0, r6
 80102e4:	f7fd ff5c 	bl	800e1a0 <dwt_write8bitoffsetreg>
 80102e8:	2302      	movs	r3, #2
 80102ea:	2200      	movs	r2, #0
 80102ec:	4621      	mov	r1, r4
 80102ee:	4630      	mov	r0, r6
 80102f0:	f7fd ff56 	bl	800e1a0 <dwt_write8bitoffsetreg>
 80102f4:	2500      	movs	r5, #0
 80102f6:	f001 bb19 	b.w	801192c <dwt_ioctl+0x1e10>
 80102fa:	2300      	movs	r3, #0
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	23fe      	movs	r3, #254	; 0xfe
 8010300:	2201      	movs	r2, #1
 8010302:	4902      	ldr	r1, [pc, #8]	; (801030c <dwt_ioctl+0x7f0>)
 8010304:	f7fe fbde 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8010308:	e7e7      	b.n	80102da <dwt_ioctl+0x7be>
 801030a:	bf00      	nop
 801030c:	00110008 	.word	0x00110008
 8010310:	0007001c 	.word	0x0007001c
 8010314:	00180014 	.word	0x00180014
 8010318:	000c001c 	.word	0x000c001c
 801031c:	000c0018 	.word	0x000c0018
 8010320:	000a0004 	.word	0x000a0004
 8010324:	2c00      	cmp	r4, #0
 8010326:	f001 834b 	beq.w	80119c0 <dwt_ioctl+0x1ea4>
 801032a:	8824      	ldrh	r4, [r4, #0]
 801032c:	b2e2      	uxtb	r2, r4
 801032e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8010332:	f7fd ffe1 	bl	800e2f8 <ull_aon_write>
 8010336:	0a22      	lsrs	r2, r4, #8
 8010338:	f240 1103 	movw	r1, #259	; 0x103
 801033c:	4630      	mov	r0, r6
 801033e:	f7fd ffdb 	bl	800e2f8 <ull_aon_write>
 8010342:	2500      	movs	r5, #0
 8010344:	f001 baf2 	b.w	801192c <dwt_ioctl+0x1e10>
 8010348:	2c00      	cmp	r4, #0
 801034a:	f001 833b 	beq.w	80119c4 <dwt_ioctl+0x1ea8>
 801034e:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80106c0 <dwt_ioctl+0xba4>
 8010352:	2310      	movs	r3, #16
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	23ff      	movs	r3, #255	; 0xff
 8010358:	2200      	movs	r2, #0
 801035a:	4641      	mov	r1, r8
 801035c:	f7fe fbb2 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8010360:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010364:	4630      	mov	r0, r6
 8010366:	f7fd ffa7 	bl	800e2b8 <ull_aon_read>
 801036a:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 801036e:	462a      	mov	r2, r5
 8010370:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010374:	4630      	mov	r0, r6
 8010376:	f7fd ffbf 	bl	800e2f8 <ull_aon_write>
 801037a:	f045 0204 	orr.w	r2, r5, #4
 801037e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010382:	4630      	mov	r0, r6
 8010384:	f7fd ffb8 	bl	800e2f8 <ull_aon_write>
 8010388:	2002      	movs	r0, #2
 801038a:	f7f0 fa5f 	bl	800084c <deca_sleep>
 801038e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8010392:	4630      	mov	r0, r6
 8010394:	f7fd ff90 	bl	800e2b8 <ull_aon_read>
 8010398:	4607      	mov	r7, r0
 801039a:	f240 110f 	movw	r1, #271	; 0x10f
 801039e:	4630      	mov	r0, r6
 80103a0:	f7fd ff8a 	bl	800e2b8 <ull_aon_read>
 80103a4:	4681      	mov	r9, r0
 80103a6:	462a      	mov	r2, r5
 80103a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80103ac:	4630      	mov	r0, r6
 80103ae:	f7fd ffa3 	bl	800e2f8 <ull_aon_write>
 80103b2:	2500      	movs	r5, #0
 80103b4:	9500      	str	r5, [sp, #0]
 80103b6:	23ef      	movs	r3, #239	; 0xef
 80103b8:	462a      	mov	r2, r5
 80103ba:	4641      	mov	r1, r8
 80103bc:	4630      	mov	r0, r6
 80103be:	f7fe fb81 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80103c2:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80103c6:	8027      	strh	r7, [r4, #0]
 80103c8:	f001 bab0 	b.w	801192c <dwt_ioctl+0x1e10>
 80103cc:	2c00      	cmp	r4, #0
 80103ce:	f001 82fb 	beq.w	80119c8 <dwt_ioctl+0x1eac>
 80103d2:	78a2      	ldrb	r2, [r4, #2]
 80103d4:	8821      	ldrh	r1, [r4, #0]
 80103d6:	f7fd ffb7 	bl	800e348 <ull_configuresleep>
 80103da:	2500      	movs	r5, #0
 80103dc:	f001 baa6 	b.w	801192c <dwt_ioctl+0x1e10>
 80103e0:	2c00      	cmp	r4, #0
 80103e2:	f001 82f3 	beq.w	80119cc <dwt_ioctl+0x1eb0>
 80103e6:	6824      	ldr	r4, [r4, #0]
 80103e8:	f7fd ff32 	bl	800e250 <ull_clearaonconfig>
 80103ec:	2001      	movs	r0, #1
 80103ee:	f7f0 fa2d 	bl	800084c <deca_sleep>
 80103f2:	2303      	movs	r3, #3
 80103f4:	9300      	str	r3, [sp, #0]
 80103f6:	23ff      	movs	r3, #255	; 0xff
 80103f8:	2200      	movs	r2, #0
 80103fa:	49af      	ldr	r1, [pc, #700]	; (80106b8 <dwt_ioctl+0xb9c>)
 80103fc:	4630      	mov	r0, r6
 80103fe:	f7fe fb61 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8010402:	b97c      	cbnz	r4, 8010424 <dwt_ioctl+0x908>
 8010404:	4630      	mov	r0, r6
 8010406:	f7ff fb61 	bl	800facc <ull_softreset_no_sema_fcmd>
 801040a:	2001      	movs	r0, #1
 801040c:	f7f0 fa1e 	bl	800084c <deca_sleep>
 8010410:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010412:	2500      	movs	r5, #0
 8010414:	739d      	strb	r5, [r3, #14]
 8010416:	2202      	movs	r2, #2
 8010418:	821a      	strh	r2, [r3, #16]
 801041a:	751d      	strb	r5, [r3, #20]
 801041c:	755d      	strb	r5, [r3, #21]
 801041e:	73dd      	strb	r5, [r3, #15]
 8010420:	f001 ba84 	b.w	801192c <dwt_ioctl+0x1e10>
 8010424:	4630      	mov	r0, r6
 8010426:	f7ff fb65 	bl	800faf4 <ull_softreset_fcmd>
 801042a:	e7ee      	b.n	801040a <dwt_ioctl+0x8ee>
 801042c:	2c00      	cmp	r4, #0
 801042e:	f001 82cf 	beq.w	80119d0 <dwt_ioctl+0x1eb4>
 8010432:	7823      	ldrb	r3, [r4, #0]
 8010434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010438:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801043a:	7353      	strb	r3, [r2, #13]
 801043c:	2200      	movs	r2, #0
 801043e:	499f      	ldr	r1, [pc, #636]	; (80106bc <dwt_ioctl+0xba0>)
 8010440:	f7fd feae 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8010444:	2500      	movs	r5, #0
 8010446:	f001 ba71 	b.w	801192c <dwt_ioctl+0x1e10>
 801044a:	2c00      	cmp	r4, #0
 801044c:	f001 82c2 	beq.w	80119d4 <dwt_ioctl+0x1eb8>
 8010450:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010452:	7b5b      	ldrb	r3, [r3, #13]
 8010454:	7023      	strb	r3, [r4, #0]
 8010456:	2500      	movs	r5, #0
 8010458:	f001 ba68 	b.w	801192c <dwt_ioctl+0x1e10>
 801045c:	2101      	movs	r1, #1
 801045e:	f7fe f9f5 	bl	800e84c <ull_enable_rf_tx>
 8010462:	4630      	mov	r0, r6
 8010464:	f7fe fa26 	bl	800e8b4 <ull_enable_rftx_blocks>
 8010468:	2101      	movs	r1, #1
 801046a:	4630      	mov	r0, r6
 801046c:	f7fd fc68 	bl	800dd40 <ull_force_clocks>
 8010470:	220f      	movs	r2, #15
 8010472:	2101      	movs	r1, #1
 8010474:	4630      	mov	r0, r6
 8010476:	f7fd fe39 	bl	800e0ec <ull_repeated_cw>
 801047a:	2500      	movs	r5, #0
 801047c:	f001 ba56 	b.w	801192c <dwt_ioctl+0x1e10>
 8010480:	2c00      	cmp	r4, #0
 8010482:	f001 82a9 	beq.w	80119d8 <dwt_ioctl+0x1ebc>
 8010486:	6862      	ldr	r2, [r4, #4]
 8010488:	6821      	ldr	r1, [r4, #0]
 801048a:	f7fd fe2f 	bl	800e0ec <ull_repeated_cw>
 801048e:	2500      	movs	r5, #0
 8010490:	f001 ba4c 	b.w	801192c <dwt_ioctl+0x1e10>
 8010494:	2c00      	cmp	r4, #0
 8010496:	f001 82a1 	beq.w	80119dc <dwt_ioctl+0x1ec0>
 801049a:	4d89      	ldr	r5, [pc, #548]	; (80106c0 <dwt_ioctl+0xba4>)
 801049c:	2200      	movs	r2, #0
 801049e:	4629      	mov	r1, r5
 80104a0:	f7fd f810 	bl	800d4c4 <dwt_read8bitoffsetreg>
 80104a4:	4680      	mov	r8, r0
 80104a6:	2302      	movs	r3, #2
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	23ff      	movs	r3, #255	; 0xff
 80104ac:	2200      	movs	r2, #0
 80104ae:	4629      	mov	r1, r5
 80104b0:	4630      	mov	r0, r6
 80104b2:	f7fe fb07 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80104b6:	2304      	movs	r3, #4
 80104b8:	2200      	movs	r2, #0
 80104ba:	4982      	ldr	r1, [pc, #520]	; (80106c4 <dwt_ioctl+0xba8>)
 80104bc:	4630      	mov	r0, r6
 80104be:	f7fd fe6f 	bl	800e1a0 <dwt_write8bitoffsetreg>
 80104c2:	2301      	movs	r3, #1
 80104c4:	2200      	movs	r2, #0
 80104c6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80104ca:	4630      	mov	r0, r6
 80104cc:	f7fd fe68 	bl	800e1a0 <dwt_write8bitoffsetreg>
 80104d0:	4f7d      	ldr	r7, [pc, #500]	; (80106c8 <dwt_ioctl+0xbac>)
 80104d2:	2500      	movs	r5, #0
 80104d4:	462a      	mov	r2, r5
 80104d6:	4639      	mov	r1, r7
 80104d8:	4630      	mov	r0, r6
 80104da:	f7fc fff3 	bl	800d4c4 <dwt_read8bitoffsetreg>
 80104de:	f010 0f01 	tst.w	r0, #1
 80104e2:	d0f7      	beq.n	80104d4 <dwt_ioctl+0x9b8>
 80104e4:	2200      	movs	r2, #0
 80104e6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80104ea:	4630      	mov	r0, r6
 80104ec:	f7fc ffab 	bl	800d446 <dwt_read16bitoffsetreg>
 80104f0:	4605      	mov	r5, r0
 80104f2:	2300      	movs	r3, #0
 80104f4:	461a      	mov	r2, r3
 80104f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80104fa:	4630      	mov	r0, r6
 80104fc:	f7fd fe50 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8010500:	2300      	movs	r3, #0
 8010502:	461a      	mov	r2, r3
 8010504:	496f      	ldr	r1, [pc, #444]	; (80106c4 <dwt_ioctl+0xba8>)
 8010506:	4630      	mov	r0, r6
 8010508:	f7fd fe4a 	bl	800e1a0 <dwt_write8bitoffsetreg>
 801050c:	4643      	mov	r3, r8
 801050e:	2200      	movs	r2, #0
 8010510:	496b      	ldr	r1, [pc, #428]	; (80106c0 <dwt_ioctl+0xba4>)
 8010512:	4630      	mov	r0, r6
 8010514:	f7fd fe44 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8010518:	8025      	strh	r5, [r4, #0]
 801051a:	2500      	movs	r5, #0
 801051c:	f001 ba06 	b.w	801192c <dwt_ioctl+0x1e10>
 8010520:	2c00      	cmp	r4, #0
 8010522:	f001 825d 	beq.w	80119e0 <dwt_ioctl+0x1ec4>
 8010526:	7923      	ldrb	r3, [r4, #4]
 8010528:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801052a:	7a92      	ldrb	r2, [r2, #10]
 801052c:	1a9b      	subs	r3, r3, r2
 801052e:	ee07 3a90 	vmov	s15, r3
 8010532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010536:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80106cc <dwt_ioctl+0xbb0>
 801053a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801053e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8010542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010546:	edc4 7a00 	vstr	s15, [r4]
 801054a:	2500      	movs	r5, #0
 801054c:	f001 b9ee 	b.w	801192c <dwt_ioctl+0x1e10>
 8010550:	2c00      	cmp	r4, #0
 8010552:	f001 8247 	beq.w	80119e4 <dwt_ioctl+0x1ec8>
 8010556:	7923      	ldrb	r3, [r4, #4]
 8010558:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801055a:	7a52      	ldrb	r2, [r2, #9]
 801055c:	1a9b      	subs	r3, r3, r2
 801055e:	ee07 3a90 	vmov	s15, r3
 8010562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010566:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80106d0 <dwt_ioctl+0xbb4>
 801056a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801056e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8010572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010576:	eddf 6a57 	vldr	s13, [pc, #348]	; 80106d4 <dwt_ioctl+0xbb8>
 801057a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801057e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8010582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010586:	edc4 7a00 	vstr	s15, [r4]
 801058a:	2500      	movs	r5, #0
 801058c:	f001 b9ce 	b.w	801192c <dwt_ioctl+0x1e10>
 8010590:	2c00      	cmp	r4, #0
 8010592:	f001 8229 	beq.w	80119e8 <dwt_ioctl+0x1ecc>
 8010596:	6824      	ldr	r4, [r4, #0]
 8010598:	2101      	movs	r1, #1
 801059a:	f7fe f957 	bl	800e84c <ull_enable_rf_tx>
 801059e:	4630      	mov	r0, r6
 80105a0:	f7fe f988 	bl	800e8b4 <ull_enable_rftx_blocks>
 80105a4:	2101      	movs	r1, #1
 80105a6:	4630      	mov	r0, r6
 80105a8:	f7fd fbca 	bl	800dd40 <ull_force_clocks>
 80105ac:	4621      	mov	r1, r4
 80105ae:	4630      	mov	r0, r6
 80105b0:	f7fe fca0 	bl	800eef4 <ull_repeated_frames>
 80105b4:	2500      	movs	r5, #0
 80105b6:	f001 b9b9 	b.w	801192c <dwt_ioctl+0x1e10>
 80105ba:	2500      	movs	r5, #0
 80105bc:	9500      	str	r5, [sp, #0]
 80105be:	23ef      	movs	r3, #239	; 0xef
 80105c0:	462a      	mov	r2, r5
 80105c2:	4945      	ldr	r1, [pc, #276]	; (80106d8 <dwt_ioctl+0xbbc>)
 80105c4:	f7fe fa7e 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80105c8:	2105      	movs	r1, #5
 80105ca:	4630      	mov	r0, r6
 80105cc:	f7fd fbb8 	bl	800dd40 <ull_force_clocks>
 80105d0:	2101      	movs	r1, #1
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7fd fd6c 	bl	800e0b0 <ull_disable_rf_tx>
 80105d8:	4630      	mov	r0, r6
 80105da:	f7fd fd5f 	bl	800e09c <ull_disable_rftx_blocks>
 80105de:	f001 b9a5 	b.w	801192c <dwt_ioctl+0x1e10>
 80105e2:	2500      	movs	r5, #0
 80105e4:	9500      	str	r5, [sp, #0]
 80105e6:	23ef      	movs	r3, #239	; 0xef
 80105e8:	462a      	mov	r2, r5
 80105ea:	493b      	ldr	r1, [pc, #236]	; (80106d8 <dwt_ioctl+0xbbc>)
 80105ec:	f7fe fa6a 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80105f0:	f001 b99c 	b.w	801192c <dwt_ioctl+0x1e10>
 80105f4:	2c00      	cmp	r4, #0
 80105f6:	f001 81f9 	beq.w	80119ec <dwt_ioctl+0x1ed0>
 80105fa:	6821      	ldr	r1, [r4, #0]
 80105fc:	f7fe fc7a 	bl	800eef4 <ull_repeated_frames>
 8010600:	2500      	movs	r5, #0
 8010602:	f001 b993 	b.w	801192c <dwt_ioctl+0x1e10>
 8010606:	2200      	movs	r2, #0
 8010608:	4934      	ldr	r1, [pc, #208]	; (80106dc <dwt_ioctl+0xbc0>)
 801060a:	f7fc ff1c 	bl	800d446 <dwt_read16bitoffsetreg>
 801060e:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8010612:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010616:	bf18      	it	ne
 8010618:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 801061c:	b22d      	sxth	r5, r5
 801061e:	8025      	strh	r5, [r4, #0]
 8010620:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010622:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010626:	1aed      	subs	r5, r5, r3
 8010628:	f001 b980 	b.w	801192c <dwt_ioctl+0x1e10>
 801062c:	2c00      	cmp	r4, #0
 801062e:	f001 81df 	beq.w	80119f0 <dwt_ioctl+0x1ed4>
 8010632:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010636:	7a23      	ldrb	r3, [r4, #8]
 8010638:	f899 2013 	ldrb.w	r2, [r9, #19]
 801063c:	2aff      	cmp	r2, #255	; 0xff
 801063e:	f000 80fe 	beq.w	801083e <dwt_ioctl+0xd22>
 8010642:	bb93      	cbnz	r3, 80106aa <dwt_ioctl+0xb8e>
 8010644:	f8d9 1000 	ldr.w	r1, [r9]
 8010648:	f7fd feb8 	bl	800e3bc <ull_update_nonce_GCM>
 801064c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8010650:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8010654:	18d1      	adds	r1, r2, r3
 8010656:	f899 2012 	ldrb.w	r2, [r9, #18]
 801065a:	2a00      	cmp	r2, #0
 801065c:	d140      	bne.n	80106e0 <dwt_ioctl+0xbc4>
 801065e:	f899 0010 	ldrb.w	r0, [r9, #16]
 8010662:	2800      	cmp	r0, #0
 8010664:	bf0b      	itete	eq
 8010666:	227f      	moveq	r2, #127	; 0x7f
 8010668:	f44f 6280 	movne.w	r2, #1024	; 0x400
 801066c:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8010670:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8010674:	f899 0013 	ldrb.w	r0, [r9, #19]
 8010678:	1a12      	subs	r2, r2, r0
 801067a:	3a02      	subs	r2, #2
 801067c:	4291      	cmp	r1, r2
 801067e:	f200 80e7 	bhi.w	8010850 <dwt_ioctl+0xd34>
 8010682:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010686:	9200      	str	r2, [sp, #0]
 8010688:	2200      	movs	r2, #0
 801068a:	4629      	mov	r1, r5
 801068c:	4630      	mov	r0, r6
 801068e:	f7fd fb2d 	bl	800dcec <dwt_writetodevice>
 8010692:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8010696:	f899 200c 	ldrb.w	r2, [r9, #12]
 801069a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801069e:	9100      	str	r1, [sp, #0]
 80106a0:	4629      	mov	r1, r5
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7fd fb22 	bl	800dcec <dwt_writetodevice>
 80106a8:	e02b      	b.n	8010702 <dwt_ioctl+0xbe6>
 80106aa:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80106ae:	f8d9 1000 	ldr.w	r1, [r9]
 80106b2:	f7fd fe91 	bl	800e3d8 <ull_update_nonce_CCM>
 80106b6:	e7c9      	b.n	801064c <dwt_ioctl+0xb30>
 80106b8:	00110004 	.word	0x00110004
 80106bc:	00090014 	.word	0x00090014
 80106c0:	00070048 	.word	0x00070048
 80106c4:	00070034 	.word	0x00070034
 80106c8:	00080004 	.word	0x00080004
 80106cc:	3f866666 	.word	0x3f866666
 80106d0:	3ecccccd 	.word	0x3ecccccd
 80106d4:	437f0000 	.word	0x437f0000
 80106d8:	000f0028 	.word	0x000f0028
 80106dc:	00020008 	.word	0x00020008
 80106e0:	2a01      	cmp	r2, #1
 80106e2:	f040 80af 	bne.w	8010844 <dwt_ioctl+0xd28>
 80106e6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80106f0:	bf08      	it	eq
 80106f2:	237f      	moveq	r3, #127	; 0x7f
 80106f4:	f899 2013 	ldrb.w	r2, [r9, #19]
 80106f8:	1a9b      	subs	r3, r3, r2
 80106fa:	3b02      	subs	r3, #2
 80106fc:	4299      	cmp	r1, r3
 80106fe:	f200 80a4 	bhi.w	801084a <dwt_ioctl+0xd2e>
 8010702:	f899 2010 	ldrb.w	r2, [r9, #16]
 8010706:	1e53      	subs	r3, r2, #1
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b01      	cmp	r3, #1
 801070c:	d940      	bls.n	8010790 <dwt_ioctl+0xc74>
 801070e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8010712:	1e59      	subs	r1, r3, #1
 8010714:	b2c9      	uxtb	r1, r1
 8010716:	2901      	cmp	r1, #1
 8010718:	d947      	bls.n	80107aa <dwt_ioctl+0xc8e>
 801071a:	2b04      	cmp	r3, #4
 801071c:	d04c      	beq.n	80107b8 <dwt_ioctl+0xc9c>
 801071e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8010722:	2200      	movs	r2, #0
 8010724:	49ba      	ldr	r1, [pc, #744]	; (8010a10 <dwt_ioctl+0xef4>)
 8010726:	4630      	mov	r0, r6
 8010728:	f7fd fb56 	bl	800ddd8 <dwt_write32bitoffsetreg>
 801072c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8010730:	4ab8      	ldr	r2, [pc, #736]	; (8010a14 <dwt_ioctl+0xef8>)
 8010732:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8010736:	f899 300c 	ldrb.w	r3, [r9, #12]
 801073a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801073e:	4313      	orrs	r3, r2
 8010740:	2200      	movs	r2, #0
 8010742:	49b5      	ldr	r1, [pc, #724]	; (8010a18 <dwt_ioctl+0xefc>)
 8010744:	4630      	mov	r0, r6
 8010746:	f7fd fb47 	bl	800ddd8 <dwt_write32bitoffsetreg>
 801074a:	2301      	movs	r3, #1
 801074c:	2200      	movs	r2, #0
 801074e:	49b3      	ldr	r1, [pc, #716]	; (8010a1c <dwt_ioctl+0xf00>)
 8010750:	4630      	mov	r0, r6
 8010752:	f7fd fd25 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8010756:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8010a20 <dwt_ioctl+0xf04>
 801075a:	2700      	movs	r7, #0
 801075c:	463a      	mov	r2, r7
 801075e:	4641      	mov	r1, r8
 8010760:	4630      	mov	r0, r6
 8010762:	f7fc feaf 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8010766:	f010 0f05 	tst.w	r0, #5
 801076a:	d0f7      	beq.n	801075c <dwt_ioctl+0xc40>
 801076c:	4605      	mov	r5, r0
 801076e:	4603      	mov	r3, r0
 8010770:	2200      	movs	r2, #0
 8010772:	49ab      	ldr	r1, [pc, #684]	; (8010a20 <dwt_ioctl+0xf04>)
 8010774:	4630      	mov	r0, r6
 8010776:	f7fd fd13 	bl	800e1a0 <dwt_write8bitoffsetreg>
 801077a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801077e:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8010782:	2b01      	cmp	r3, #1
 8010784:	d025      	beq.n	80107d2 <dwt_ioctl+0xcb6>
 8010786:	b26b      	sxtb	r3, r5
 8010788:	7023      	strb	r3, [r4, #0]
 801078a:	2500      	movs	r5, #0
 801078c:	f001 b8ce 	b.w	801192c <dwt_ioctl+0x1e10>
 8010790:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010792:	7b9b      	ldrb	r3, [r3, #14]
 8010794:	2b03      	cmp	r3, #3
 8010796:	f001 81af 	beq.w	8011af8 <dwt_ioctl+0x1fdc>
 801079a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801079e:	1e5a      	subs	r2, r3, #1
 80107a0:	b2d2      	uxtb	r2, r2
 80107a2:	2a01      	cmp	r2, #1
 80107a4:	d912      	bls.n	80107cc <dwt_ioctl+0xcb0>
 80107a6:	2201      	movs	r2, #1
 80107a8:	e7b7      	b.n	801071a <dwt_ioctl+0xbfe>
 80107aa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80107ac:	7b9b      	ldrb	r3, [r3, #14]
 80107ae:	2b03      	cmp	r3, #3
 80107b0:	bf0c      	ite	eq
 80107b2:	2302      	moveq	r3, #2
 80107b4:	2301      	movne	r3, #1
 80107b6:	e7b2      	b.n	801071e <dwt_ioctl+0xc02>
 80107b8:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80107bc:	2910      	cmp	r1, #16
 80107be:	d9ae      	bls.n	801071e <dwt_ioctl+0xc02>
 80107c0:	f06f 0303 	mvn.w	r3, #3
 80107c4:	e7e0      	b.n	8010788 <dwt_ioctl+0xc6c>
 80107c6:	2202      	movs	r2, #2
 80107c8:	4613      	mov	r3, r2
 80107ca:	e7a8      	b.n	801071e <dwt_ioctl+0xc02>
 80107cc:	2201      	movs	r2, #1
 80107ce:	4613      	mov	r3, r2
 80107d0:	e7a5      	b.n	801071e <dwt_ioctl+0xc02>
 80107d2:	f899 3012 	ldrb.w	r3, [r9, #18]
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d1d5      	bne.n	8010786 <dwt_ioctl+0xc6a>
 80107da:	f899 2011 	ldrb.w	r2, [r9, #17]
 80107de:	1e53      	subs	r3, r2, #1
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d91b      	bls.n	801081e <dwt_ioctl+0xd02>
 80107e6:	2a03      	cmp	r2, #3
 80107e8:	bf0c      	ite	eq
 80107ea:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 80107ee:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 80107f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80107f6:	b112      	cbz	r2, 80107fe <dwt_ioctl+0xce2>
 80107f8:	f899 300c 	ldrb.w	r3, [r9, #12]
 80107fc:	b9c3      	cbnz	r3, 8010830 <dwt_ioctl+0xd14>
 80107fe:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8010802:	2900      	cmp	r1, #0
 8010804:	d0bf      	beq.n	8010786 <dwt_ioctl+0xc6a>
 8010806:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d0bb      	beq.n	8010786 <dwt_ioctl+0xc6a>
 801080e:	f899 200c 	ldrb.w	r2, [r9, #12]
 8010812:	9100      	str	r1, [sp, #0]
 8010814:	4639      	mov	r1, r7
 8010816:	4630      	mov	r0, r6
 8010818:	f7fc fdf5 	bl	800d406 <dwt_readfromdevice>
 801081c:	e7b3      	b.n	8010786 <dwt_ioctl+0xc6a>
 801081e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010820:	7b9b      	ldrb	r3, [r3, #14]
 8010822:	2b03      	cmp	r3, #3
 8010824:	bf0c      	ite	eq
 8010826:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 801082a:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 801082e:	e7e0      	b.n	80107f2 <dwt_ioctl+0xcd6>
 8010830:	9200      	str	r2, [sp, #0]
 8010832:	2200      	movs	r2, #0
 8010834:	4639      	mov	r1, r7
 8010836:	4630      	mov	r0, r6
 8010838:	f7fc fde5 	bl	800d406 <dwt_readfromdevice>
 801083c:	e7df      	b.n	80107fe <dwt_ioctl+0xce2>
 801083e:	f06f 0302 	mvn.w	r3, #2
 8010842:	e7a1      	b.n	8010788 <dwt_ioctl+0xc6c>
 8010844:	f06f 0301 	mvn.w	r3, #1
 8010848:	e79e      	b.n	8010788 <dwt_ioctl+0xc6c>
 801084a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801084e:	e79b      	b.n	8010788 <dwt_ioctl+0xc6c>
 8010850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010854:	e798      	b.n	8010788 <dwt_ioctl+0xc6c>
 8010856:	7a23      	ldrb	r3, [r4, #8]
 8010858:	79e1      	ldrb	r1, [r4, #7]
 801085a:	79a2      	ldrb	r2, [r4, #6]
 801085c:	00d2      	lsls	r2, r2, #3
 801085e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8010862:	4313      	orrs	r3, r2
 8010864:	7962      	ldrb	r2, [r4, #5]
 8010866:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801086a:	7922      	ldrb	r2, [r4, #4]
 801086c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010870:	78e2      	ldrb	r2, [r4, #3]
 8010872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010876:	78a2      	ldrb	r2, [r4, #2]
 8010878:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 801087c:	7862      	ldrb	r2, [r4, #1]
 801087e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8010882:	7822      	ldrb	r2, [r4, #0]
 8010884:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8010888:	b29b      	uxth	r3, r3
 801088a:	2200      	movs	r2, #0
 801088c:	4965      	ldr	r1, [pc, #404]	; (8010a24 <dwt_ioctl+0xf08>)
 801088e:	f7fd fa38 	bl	800dd02 <dwt_write16bitoffsetreg>
 8010892:	2500      	movs	r5, #0
 8010894:	f001 b84a 	b.w	801192c <dwt_ioctl+0x1e10>
 8010898:	2c00      	cmp	r4, #0
 801089a:	f001 80ab 	beq.w	80119f4 <dwt_ioctl+0x1ed8>
 801089e:	7863      	ldrb	r3, [r4, #1]
 80108a0:	b133      	cbz	r3, 80108b0 <dwt_ioctl+0xd94>
 80108a2:	085b      	lsrs	r3, r3, #1
 80108a4:	3b01      	subs	r3, #1
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	7023      	strb	r3, [r4, #0]
 80108aa:	2500      	movs	r5, #0
 80108ac:	f001 b83e 	b.w	801192c <dwt_ioctl+0x1e10>
 80108b0:	2300      	movs	r3, #0
 80108b2:	e7f9      	b.n	80108a8 <dwt_ioctl+0xd8c>
 80108b4:	2200      	movs	r2, #0
 80108b6:	495c      	ldr	r1, [pc, #368]	; (8010a28 <dwt_ioctl+0xf0c>)
 80108b8:	f7fc fdaf 	bl	800d41a <dwt_read32bitoffsetreg>
 80108bc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80108c0:	8023      	strh	r3, [r4, #0]
 80108c2:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80108c6:	8060      	strh	r0, [r4, #2]
 80108c8:	2200      	movs	r2, #0
 80108ca:	4958      	ldr	r1, [pc, #352]	; (8010a2c <dwt_ioctl+0xf10>)
 80108cc:	4630      	mov	r0, r6
 80108ce:	f7fc fda4 	bl	800d41a <dwt_read32bitoffsetreg>
 80108d2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80108d6:	80a3      	strh	r3, [r4, #4]
 80108d8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80108dc:	80e0      	strh	r0, [r4, #6]
 80108de:	2200      	movs	r2, #0
 80108e0:	4953      	ldr	r1, [pc, #332]	; (8010a30 <dwt_ioctl+0xf14>)
 80108e2:	4630      	mov	r0, r6
 80108e4:	f7fc fd99 	bl	800d41a <dwt_read32bitoffsetreg>
 80108e8:	7220      	strb	r0, [r4, #8]
 80108ea:	0c00      	lsrs	r0, r0, #16
 80108ec:	7260      	strb	r0, [r4, #9]
 80108ee:	2200      	movs	r2, #0
 80108f0:	4950      	ldr	r1, [pc, #320]	; (8010a34 <dwt_ioctl+0xf18>)
 80108f2:	4630      	mov	r0, r6
 80108f4:	f7fc fd91 	bl	800d41a <dwt_read32bitoffsetreg>
 80108f8:	f3c0 430b 	ubfx	r3, r0, #16, #12
 80108fc:	81a3      	strh	r3, [r4, #12]
 80108fe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8010902:	8160      	strh	r0, [r4, #10]
 8010904:	2200      	movs	r2, #0
 8010906:	494c      	ldr	r1, [pc, #304]	; (8010a38 <dwt_ioctl+0xf1c>)
 8010908:	4630      	mov	r0, r6
 801090a:	f7fc fd86 	bl	800d41a <dwt_read32bitoffsetreg>
 801090e:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8010912:	f8a4 300f 	strh.w	r3, [r4, #15]
 8010916:	73a0      	strb	r0, [r4, #14]
 8010918:	2200      	movs	r2, #0
 801091a:	4948      	ldr	r1, [pc, #288]	; (8010a3c <dwt_ioctl+0xf20>)
 801091c:	4630      	mov	r0, r6
 801091e:	f7fc fd7c 	bl	800d41a <dwt_read32bitoffsetreg>
 8010922:	7460      	strb	r0, [r4, #17]
 8010924:	0c00      	lsrs	r0, r0, #16
 8010926:	74a0      	strb	r0, [r4, #18]
 8010928:	2200      	movs	r2, #0
 801092a:	4945      	ldr	r1, [pc, #276]	; (8010a40 <dwt_ioctl+0xf24>)
 801092c:	4630      	mov	r0, r6
 801092e:	f7fc fd74 	bl	800d41a <dwt_read32bitoffsetreg>
 8010932:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8010936:	f8a4 3013 	strh.w	r3, [r4, #19]
 801093a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801093e:	f8a4 0015 	strh.w	r0, [r4, #21]
 8010942:	2200      	movs	r2, #0
 8010944:	493f      	ldr	r1, [pc, #252]	; (8010a44 <dwt_ioctl+0xf28>)
 8010946:	4630      	mov	r0, r6
 8010948:	f7fc fdbc 	bl	800d4c4 <dwt_read8bitoffsetreg>
 801094c:	75e0      	strb	r0, [r4, #23]
 801094e:	2500      	movs	r5, #0
 8010950:	f000 bfec 	b.w	801192c <dwt_ioctl+0x1e10>
 8010954:	4611      	mov	r1, r2
 8010956:	f7fd fc9b 	bl	800e290 <ull_configeventcounters>
 801095a:	2500      	movs	r5, #0
 801095c:	f000 bfe6 	b.w	801192c <dwt_ioctl+0x1e10>
 8010960:	2c00      	cmp	r4, #0
 8010962:	f001 8049 	beq.w	80119f8 <dwt_ioctl+0x1edc>
 8010966:	8823      	ldrh	r3, [r4, #0]
 8010968:	2200      	movs	r2, #0
 801096a:	4937      	ldr	r1, [pc, #220]	; (8010a48 <dwt_ioctl+0xf2c>)
 801096c:	f7fd f9c9 	bl	800dd02 <dwt_write16bitoffsetreg>
 8010970:	2500      	movs	r5, #0
 8010972:	f000 bfdb 	b.w	801192c <dwt_ioctl+0x1e10>
 8010976:	2c00      	cmp	r4, #0
 8010978:	f001 8040 	beq.w	80119fc <dwt_ioctl+0x1ee0>
 801097c:	6825      	ldr	r5, [r4, #0]
 801097e:	b935      	cbnz	r5, 801098e <dwt_ioctl+0xe72>
 8010980:	2300      	movs	r3, #0
 8010982:	461a      	mov	r2, r3
 8010984:	4931      	ldr	r1, [pc, #196]	; (8010a4c <dwt_ioctl+0xf30>)
 8010986:	f7fd f9bc 	bl	800dd02 <dwt_write16bitoffsetreg>
 801098a:	f000 bfcf 	b.w	801192c <dwt_ioctl+0x1e10>
 801098e:	7962      	ldrb	r2, [r4, #5]
 8010990:	7923      	ldrb	r3, [r4, #4]
 8010992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801099a:	2200      	movs	r2, #0
 801099c:	492b      	ldr	r1, [pc, #172]	; (8010a4c <dwt_ioctl+0xf30>)
 801099e:	f7fd f9b0 	bl	800dd02 <dwt_write16bitoffsetreg>
 80109a2:	2500      	movs	r5, #0
 80109a4:	f000 bfc2 	b.w	801192c <dwt_ioctl+0x1e10>
 80109a8:	2c00      	cmp	r4, #0
 80109aa:	f001 8029 	beq.w	8011a00 <dwt_ioctl+0x1ee4>
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	b94b      	cbnz	r3, 80109c6 <dwt_ioctl+0xeaa>
 80109b2:	2500      	movs	r5, #0
 80109b4:	9500      	str	r5, [sp, #0]
 80109b6:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80109ba:	462a      	mov	r2, r5
 80109bc:	2110      	movs	r1, #16
 80109be:	f7fe fc11 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 80109c2:	f000 bfb3 	b.w	801192c <dwt_ioctl+0x1e10>
 80109c6:	2200      	movs	r2, #0
 80109c8:	2134      	movs	r1, #52	; 0x34
 80109ca:	f7fd fa05 	bl	800ddd8 <dwt_write32bitoffsetreg>
 80109ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109d8:	2200      	movs	r2, #0
 80109da:	2110      	movs	r1, #16
 80109dc:	4630      	mov	r0, r6
 80109de:	f7fe fc01 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 80109e2:	2500      	movs	r5, #0
 80109e4:	f000 bfa2 	b.w	801192c <dwt_ioctl+0x1e10>
 80109e8:	2c00      	cmp	r4, #0
 80109ea:	f001 800b 	beq.w	8011a04 <dwt_ioctl+0x1ee8>
 80109ee:	8861      	ldrh	r1, [r4, #2]
 80109f0:	f7fd fc62 	bl	800e2b8 <ull_aon_read>
 80109f4:	7020      	strb	r0, [r4, #0]
 80109f6:	2500      	movs	r5, #0
 80109f8:	f000 bf98 	b.w	801192c <dwt_ioctl+0x1e10>
 80109fc:	2c00      	cmp	r4, #0
 80109fe:	f001 8003 	beq.w	8011a08 <dwt_ioctl+0x1eec>
 8010a02:	78a2      	ldrb	r2, [r4, #2]
 8010a04:	8821      	ldrh	r1, [r4, #0]
 8010a06:	f7fd fc77 	bl	800e2f8 <ull_aon_write>
 8010a0a:	2500      	movs	r5, #0
 8010a0c:	f000 bf8e 	b.w	801192c <dwt_ioctl+0x1e10>
 8010a10:	00010044 	.word	0x00010044
 8010a14:	0001ff80 	.word	0x0001ff80
 8010a18:	00010048 	.word	0x00010048
 8010a1c:	0001004c 	.word	0x0001004c
 8010a20:	00010050 	.word	0x00010050
 8010a24:	00010030 	.word	0x00010030
 8010a28:	000f0004 	.word	0x000f0004
 8010a2c:	000f0008 	.word	0x000f0008
 8010a30:	000f000c 	.word	0x000f000c
 8010a34:	000f0010 	.word	0x000f0010
 8010a38:	000f0014 	.word	0x000f0014
 8010a3c:	000f0018 	.word	0x000f0018
 8010a40:	000f001c 	.word	0x000f001c
 8010a44:	000f0020 	.word	0x000f0020
 8010a48:	00060004 	.word	0x00060004
 8010a4c:	0011001c 	.word	0x0011001c
 8010a50:	4bd5      	ldr	r3, [pc, #852]	; (8010da8 <dwt_ioctl+0x128c>)
 8010a52:	4ad6      	ldr	r2, [pc, #856]	; (8010dac <dwt_ioctl+0x1290>)
 8010a54:	2d01      	cmp	r5, #1
 8010a56:	bf18      	it	ne
 8010a58:	4613      	movne	r3, r2
 8010a5a:	2d01      	cmp	r5, #1
 8010a5c:	49d4      	ldr	r1, [pc, #848]	; (8010db0 <dwt_ioctl+0x1294>)
 8010a5e:	bf18      	it	ne
 8010a60:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8010a64:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010a66:	7b92      	ldrb	r2, [r2, #14]
 8010a68:	2a01      	cmp	r2, #1
 8010a6a:	d012      	beq.n	8010a92 <dwt_ioctl+0xf76>
 8010a6c:	2a03      	cmp	r2, #3
 8010a6e:	d117      	bne.n	8010aa0 <dwt_ioctl+0xf84>
 8010a70:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8010a74:	3a01      	subs	r2, #1
 8010a76:	441a      	add	r2, r3
 8010a78:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010a7c:	f7fc fce3 	bl	800d446 <dwt_read16bitoffsetreg>
 8010a80:	09c0      	lsrs	r0, r0, #7
 8010a82:	8020      	strh	r0, [r4, #0]
 8010a84:	8825      	ldrh	r5, [r4, #0]
 8010a86:	3500      	adds	r5, #0
 8010a88:	bf18      	it	ne
 8010a8a:	2501      	movne	r5, #1
 8010a8c:	426d      	negs	r5, r5
 8010a8e:	f000 bf4d 	b.w	801192c <dwt_ioctl+0x1e10>
 8010a92:	2202      	movs	r2, #2
 8010a94:	4619      	mov	r1, r3
 8010a96:	f7fc fcd6 	bl	800d446 <dwt_read16bitoffsetreg>
 8010a9a:	09c0      	lsrs	r0, r0, #7
 8010a9c:	8020      	strh	r0, [r4, #0]
 8010a9e:	e7f1      	b.n	8010a84 <dwt_ioctl+0xf68>
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	f7fc fcd0 	bl	800d446 <dwt_read16bitoffsetreg>
 8010aa6:	09c0      	lsrs	r0, r0, #7
 8010aa8:	8020      	strh	r0, [r4, #0]
 8010aaa:	e7eb      	b.n	8010a84 <dwt_ioctl+0xf68>
 8010aac:	2c00      	cmp	r4, #0
 8010aae:	f000 87ad 	beq.w	8011a0c <dwt_ioctl+0x1ef0>
 8010ab2:	7821      	ldrb	r1, [r4, #0]
 8010ab4:	f7fe fbd4 	bl	800f260 <ull_setleds>
 8010ab8:	2500      	movs	r5, #0
 8010aba:	f000 bf37 	b.w	801192c <dwt_ioctl+0x1e10>
 8010abe:	4611      	mov	r1, r2
 8010ac0:	f7fe fa30 	bl	800ef24 <ull_setdwstate>
 8010ac4:	2500      	movs	r5, #0
 8010ac6:	f000 bf31 	b.w	801192c <dwt_ioctl+0x1e10>
 8010aca:	9400      	str	r4, [sp, #0]
 8010acc:	2304      	movs	r3, #4
 8010ace:	2200      	movs	r2, #0
 8010ad0:	211c      	movs	r1, #28
 8010ad2:	f7fc fc98 	bl	800d406 <dwt_readfromdevice>
 8010ad6:	2500      	movs	r5, #0
 8010ad8:	f000 bf28 	b.w	801192c <dwt_ioctl+0x1e10>
 8010adc:	2c00      	cmp	r4, #0
 8010ade:	f000 8797 	beq.w	8011a10 <dwt_ioctl+0x1ef4>
 8010ae2:	2202      	movs	r2, #2
 8010ae4:	2144      	movs	r1, #68	; 0x44
 8010ae6:	f7fc fcae 	bl	800d446 <dwt_read16bitoffsetreg>
 8010aea:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8010aee:	7020      	strb	r0, [r4, #0]
 8010af0:	2500      	movs	r5, #0
 8010af2:	f000 bf1b 	b.w	801192c <dwt_ioctl+0x1e10>
 8010af6:	2c00      	cmp	r4, #0
 8010af8:	f000 878c 	beq.w	8011a14 <dwt_ioctl+0x1ef8>
 8010afc:	2200      	movs	r2, #0
 8010afe:	2144      	movs	r1, #68	; 0x44
 8010b00:	f7fc fce0 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8010b04:	f000 0001 	and.w	r0, r0, #1
 8010b08:	7020      	strb	r0, [r4, #0]
 8010b0a:	2500      	movs	r5, #0
 8010b0c:	f000 bf0e 	b.w	801192c <dwt_ioctl+0x1e10>
 8010b10:	2c00      	cmp	r4, #0
 8010b12:	f000 8781 	beq.w	8011a18 <dwt_ioctl+0x1efc>
 8010b16:	8862      	ldrh	r2, [r4, #2]
 8010b18:	8821      	ldrh	r1, [r4, #0]
 8010b1a:	f7fe fa61 	bl	800efe0 <ull_configureframefilter>
 8010b1e:	2500      	movs	r5, #0
 8010b20:	f000 bf04 	b.w	801192c <dwt_ioctl+0x1e10>
 8010b24:	9400      	str	r4, [sp, #0]
 8010b26:	2308      	movs	r3, #8
 8010b28:	2200      	movs	r2, #0
 8010b2a:	2104      	movs	r1, #4
 8010b2c:	f7fd f8de 	bl	800dcec <dwt_writetodevice>
 8010b30:	2500      	movs	r5, #0
 8010b32:	f000 befb 	b.w	801192c <dwt_ioctl+0x1e10>
 8010b36:	9400      	str	r4, [sp, #0]
 8010b38:	2308      	movs	r3, #8
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	2104      	movs	r1, #4
 8010b3e:	f7fc fc62 	bl	800d406 <dwt_readfromdevice>
 8010b42:	2500      	movs	r5, #0
 8010b44:	f000 bef2 	b.w	801192c <dwt_ioctl+0x1e10>
 8010b48:	2c00      	cmp	r4, #0
 8010b4a:	f000 8767 	beq.w	8011a1c <dwt_ioctl+0x1f00>
 8010b4e:	8823      	ldrh	r3, [r4, #0]
 8010b50:	2202      	movs	r2, #2
 8010b52:	210c      	movs	r1, #12
 8010b54:	f7fd f8d5 	bl	800dd02 <dwt_write16bitoffsetreg>
 8010b58:	2500      	movs	r5, #0
 8010b5a:	f000 bee7 	b.w	801192c <dwt_ioctl+0x1e10>
 8010b5e:	2c00      	cmp	r4, #0
 8010b60:	f000 875e 	beq.w	8011a20 <dwt_ioctl+0x1f04>
 8010b64:	8823      	ldrh	r3, [r4, #0]
 8010b66:	2200      	movs	r2, #0
 8010b68:	210c      	movs	r1, #12
 8010b6a:	f7fd f8ca 	bl	800dd02 <dwt_write16bitoffsetreg>
 8010b6e:	2500      	movs	r5, #0
 8010b70:	f000 bedc 	b.w	801192c <dwt_ioctl+0x1e10>
 8010b74:	4621      	mov	r1, r4
 8010b76:	f7fd f897 	bl	800dca8 <ull_readrxtimestamp>
 8010b7a:	2500      	movs	r5, #0
 8010b7c:	f000 bed6 	b.w	801192c <dwt_ioctl+0x1e10>
 8010b80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010b82:	7b9b      	ldrb	r3, [r3, #14]
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d00b      	beq.n	8010ba0 <dwt_ioctl+0x1084>
 8010b88:	2b03      	cmp	r3, #3
 8010b8a:	d112      	bne.n	8010bb2 <dwt_ioctl+0x1096>
 8010b8c:	9400      	str	r4, [sp, #0]
 8010b8e:	2305      	movs	r3, #5
 8010b90:	2220      	movs	r2, #32
 8010b92:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010b96:	f7fc fc36 	bl	800d406 <dwt_readfromdevice>
 8010b9a:	2500      	movs	r5, #0
 8010b9c:	f000 bec6 	b.w	801192c <dwt_ioctl+0x1e10>
 8010ba0:	9400      	str	r4, [sp, #0]
 8010ba2:	2305      	movs	r3, #5
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	4983      	ldr	r1, [pc, #524]	; (8010db4 <dwt_ioctl+0x1298>)
 8010ba8:	f7fc fc2d 	bl	800d406 <dwt_readfromdevice>
 8010bac:	2500      	movs	r5, #0
 8010bae:	f000 bebd 	b.w	801192c <dwt_ioctl+0x1e10>
 8010bb2:	9400      	str	r4, [sp, #0]
 8010bb4:	2305      	movs	r3, #5
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8010bbc:	f7fc fc23 	bl	800d406 <dwt_readfromdevice>
 8010bc0:	2500      	movs	r5, #0
 8010bc2:	f000 beb3 	b.w	801192c <dwt_ioctl+0x1e10>
 8010bc6:	2500      	movs	r5, #0
 8010bc8:	f804 5b01 	strb.w	r5, [r4], #1
 8010bcc:	9400      	str	r4, [sp, #0]
 8010bce:	2304      	movs	r3, #4
 8010bd0:	462a      	mov	r2, r5
 8010bd2:	216c      	movs	r1, #108	; 0x6c
 8010bd4:	f7fc fc17 	bl	800d406 <dwt_readfromdevice>
 8010bd8:	f000 bea8 	b.w	801192c <dwt_ioctl+0x1e10>
 8010bdc:	2c00      	cmp	r4, #0
 8010bde:	f000 8721 	beq.w	8011a24 <dwt_ioctl+0x1f08>
 8010be2:	2201      	movs	r2, #1
 8010be4:	2160      	movs	r1, #96	; 0x60
 8010be6:	f7fc fc18 	bl	800d41a <dwt_read32bitoffsetreg>
 8010bea:	6020      	str	r0, [r4, #0]
 8010bec:	2500      	movs	r5, #0
 8010bee:	f000 be9d 	b.w	801192c <dwt_ioctl+0x1e10>
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	f000 8718 	beq.w	8011a28 <dwt_ioctl+0x1f0c>
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	2160      	movs	r1, #96	; 0x60
 8010bfc:	f7fc fc0d 	bl	800d41a <dwt_read32bitoffsetreg>
 8010c00:	6020      	str	r0, [r4, #0]
 8010c02:	2500      	movs	r5, #0
 8010c04:	f000 be92 	b.w	801192c <dwt_ioctl+0x1e10>
 8010c08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010c0a:	7b9b      	ldrb	r3, [r3, #14]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d00b      	beq.n	8010c28 <dwt_ioctl+0x110c>
 8010c10:	2b03      	cmp	r3, #3
 8010c12:	d112      	bne.n	8010c3a <dwt_ioctl+0x111e>
 8010c14:	9400      	str	r4, [sp, #0]
 8010c16:	2305      	movs	r3, #5
 8010c18:	2228      	movs	r2, #40	; 0x28
 8010c1a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010c1e:	f7fc fbf2 	bl	800d406 <dwt_readfromdevice>
 8010c22:	2500      	movs	r5, #0
 8010c24:	f000 be82 	b.w	801192c <dwt_ioctl+0x1e10>
 8010c28:	9400      	str	r4, [sp, #0]
 8010c2a:	2305      	movs	r3, #5
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4962      	ldr	r1, [pc, #392]	; (8010db8 <dwt_ioctl+0x129c>)
 8010c30:	f7fc fbe9 	bl	800d406 <dwt_readfromdevice>
 8010c34:	2500      	movs	r5, #0
 8010c36:	f000 be79 	b.w	801192c <dwt_ioctl+0x1e10>
 8010c3a:	9400      	str	r4, [sp, #0]
 8010c3c:	2305      	movs	r3, #5
 8010c3e:	2200      	movs	r2, #0
 8010c40:	495e      	ldr	r1, [pc, #376]	; (8010dbc <dwt_ioctl+0x12a0>)
 8010c42:	f7fc fbe0 	bl	800d406 <dwt_readfromdevice>
 8010c46:	2500      	movs	r5, #0
 8010c48:	f000 be70 	b.w	801192c <dwt_ioctl+0x1e10>
 8010c4c:	2c00      	cmp	r4, #0
 8010c4e:	f000 86ed 	beq.w	8011a2c <dwt_ioctl+0x1f10>
 8010c52:	2200      	movs	r2, #0
 8010c54:	211c      	movs	r1, #28
 8010c56:	f7fc fbe0 	bl	800d41a <dwt_read32bitoffsetreg>
 8010c5a:	6020      	str	r0, [r4, #0]
 8010c5c:	2500      	movs	r5, #0
 8010c5e:	f000 be65 	b.w	801192c <dwt_ioctl+0x1e10>
 8010c62:	2c00      	cmp	r4, #0
 8010c64:	f000 86e4 	beq.w	8011a30 <dwt_ioctl+0x1f14>
 8010c68:	8825      	ldrh	r5, [r4, #0]
 8010c6a:	6867      	ldr	r7, [r4, #4]
 8010c6c:	7a23      	ldrb	r3, [r4, #8]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f000 86e0 	beq.w	8011a34 <dwt_ioctl+0x1f18>
 8010c74:	463c      	mov	r4, r7
 8010c76:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	f7fd f889 	bl	800dd94 <_dwt_otpread>
 8010c82:	f844 0b04 	str.w	r0, [r4], #4
 8010c86:	3501      	adds	r5, #1
 8010c88:	b2ad      	uxth	r5, r5
 8010c8a:	42bc      	cmp	r4, r7
 8010c8c:	d1f5      	bne.n	8010c7a <dwt_ioctl+0x115e>
 8010c8e:	2500      	movs	r5, #0
 8010c90:	f000 be4c 	b.w	801192c <dwt_ioctl+0x1e10>
 8010c94:	2c00      	cmp	r4, #0
 8010c96:	f000 86cf 	beq.w	8011a38 <dwt_ioctl+0x1f1c>
 8010c9a:	7821      	ldrb	r1, [r4, #0]
 8010c9c:	f7fd fb86 	bl	800e3ac <ull_setplenfine>
 8010ca0:	2500      	movs	r5, #0
 8010ca2:	f000 be43 	b.w	801192c <dwt_ioctl+0x1e10>
 8010ca6:	f7fe f9bf 	bl	800f028 <ull_run_pgfcal>
 8010caa:	4605      	mov	r5, r0
 8010cac:	f000 be3e 	b.w	801192c <dwt_ioctl+0x1e10>
 8010cb0:	4611      	mov	r1, r2
 8010cb2:	f7fe fb23 	bl	800f2fc <ull_pgf_cal>
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	f000 be38 	b.w	801192c <dwt_ioctl+0x1e10>
 8010cbc:	2c00      	cmp	r4, #0
 8010cbe:	f000 86bd 	beq.w	8011a3c <dwt_ioctl+0x1f20>
 8010cc2:	78a5      	ldrb	r5, [r4, #2]
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	f7fd f83b 	bl	800dd40 <ull_force_clocks>
 8010cca:	2100      	movs	r1, #0
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f7fd fdbd 	bl	800e84c <ull_enable_rf_tx>
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	f7fd fdee 	bl	800e8b4 <ull_enable_rftx_blocks>
 8010cd8:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8010cdc:	2200      	movs	r2, #0
 8010cde:	4938      	ldr	r1, [pc, #224]	; (8010dc0 <dwt_ioctl+0x12a4>)
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7fd fa5d 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	23ff      	movs	r3, #255	; 0xff
 8010cec:	2200      	movs	r2, #0
 8010cee:	4935      	ldr	r1, [pc, #212]	; (8010dc4 <dwt_ioctl+0x12a8>)
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	f7fd fee7 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8010cf6:	4f33      	ldr	r7, [pc, #204]	; (8010dc4 <dwt_ioctl+0x12a8>)
 8010cf8:	2500      	movs	r5, #0
 8010cfa:	462a      	mov	r2, r5
 8010cfc:	4639      	mov	r1, r7
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f7fc fbe0 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8010d04:	f010 0f01 	tst.w	r0, #1
 8010d08:	d1f7      	bne.n	8010cfa <dwt_ioctl+0x11de>
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	492e      	ldr	r1, [pc, #184]	; (8010dc8 <dwt_ioctl+0x12ac>)
 8010d0e:	4630      	mov	r0, r6
 8010d10:	f7fc fb99 	bl	800d446 <dwt_read16bitoffsetreg>
 8010d14:	4605      	mov	r5, r0
 8010d16:	4630      	mov	r0, r6
 8010d18:	f7fd f9c0 	bl	800e09c <ull_disable_rftx_blocks>
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f7fd f9c6 	bl	800e0b0 <ull_disable_rf_tx>
 8010d24:	2105      	movs	r1, #5
 8010d26:	4630      	mov	r0, r6
 8010d28:	f7fd f80a 	bl	800dd40 <ull_force_clocks>
 8010d2c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8010d30:	8025      	strh	r5, [r4, #0]
 8010d32:	2500      	movs	r5, #0
 8010d34:	f000 bdfa 	b.w	801192c <dwt_ioctl+0x1e10>
 8010d38:	2102      	movs	r1, #2
 8010d3a:	f7fe f8f3 	bl	800ef24 <ull_setdwstate>
 8010d3e:	2101      	movs	r1, #1
 8010d40:	4630      	mov	r0, r6
 8010d42:	f7fe f8ef 	bl	800ef24 <ull_setdwstate>
 8010d46:	2432      	movs	r4, #50	; 0x32
 8010d48:	f04f 0814 	mov.w	r8, #20
 8010d4c:	2700      	movs	r7, #0
 8010d4e:	2544      	movs	r5, #68	; 0x44
 8010d50:	4640      	mov	r0, r8
 8010d52:	f7ef fd86 	bl	8000862 <deca_usleep>
 8010d56:	463a      	mov	r2, r7
 8010d58:	4629      	mov	r1, r5
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	f7fc fbb2 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8010d60:	f010 0f02 	tst.w	r0, #2
 8010d64:	d105      	bne.n	8010d72 <dwt_ioctl+0x1256>
 8010d66:	1e63      	subs	r3, r4, #1
 8010d68:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8010d6c:	d1f0      	bne.n	8010d50 <dwt_ioctl+0x1234>
 8010d6e:	2501      	movs	r5, #1
 8010d70:	e000      	b.n	8010d74 <dwt_ioctl+0x1258>
 8010d72:	2500      	movs	r5, #0
 8010d74:	426d      	negs	r5, r5
 8010d76:	f000 bdd9 	b.w	801192c <dwt_ioctl+0x1e10>
 8010d7a:	2c00      	cmp	r4, #0
 8010d7c:	f000 8660 	beq.w	8011a40 <dwt_ioctl+0x1f24>
 8010d80:	7823      	ldrb	r3, [r4, #0]
 8010d82:	031b      	lsls	r3, r3, #12
 8010d84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010d88:	7862      	ldrb	r2, [r4, #1]
 8010d8a:	2a01      	cmp	r2, #1
 8010d8c:	bf08      	it	eq
 8010d8e:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8010d98:	2200      	movs	r2, #0
 8010d9a:	490c      	ldr	r1, [pc, #48]	; (8010dcc <dwt_ioctl+0x12b0>)
 8010d9c:	f7fd fd22 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8010da0:	2500      	movs	r5, #0
 8010da2:	f000 bdc3 	b.w	801192c <dwt_ioctl+0x1e10>
 8010da6:	bf00      	nop
 8010da8:	00180034 	.word	0x00180034
 8010dac:	0018002c 	.word	0x0018002c
 8010db0:	000c0014 	.word	0x000c0014
 8010db4:	00180020 	.word	0x00180020
 8010db8:	00180028 	.word	0x00180028
 8010dbc:	000c0008 	.word	0x000c0008
 8010dc0:	0007001c 	.word	0x0007001c
 8010dc4:	00080010 	.word	0x00080010
 8010dc8:	00080014 	.word	0x00080014
 8010dcc:	00070014 	.word	0x00070014
 8010dd0:	2c00      	cmp	r4, #0
 8010dd2:	f000 8637 	beq.w	8011a44 <dwt_ioctl+0x1f28>
 8010dd6:	6862      	ldr	r2, [r4, #4]
 8010dd8:	6821      	ldr	r1, [r4, #0]
 8010dda:	f7fd fe35 	bl	800ea48 <ull_setgpiomode>
 8010dde:	2500      	movs	r5, #0
 8010de0:	f000 bda4 	b.w	801192c <dwt_ioctl+0x1e10>
 8010de4:	2c00      	cmp	r4, #0
 8010de6:	f000 862f 	beq.w	8011a48 <dwt_ioctl+0x1f2c>
 8010dea:	8823      	ldrh	r3, [r4, #0]
 8010dec:	2200      	movs	r2, #0
 8010dee:	49c4      	ldr	r1, [pc, #784]	; (8011100 <dwt_ioctl+0x15e4>)
 8010df0:	f7fc ff87 	bl	800dd02 <dwt_write16bitoffsetreg>
 8010df4:	2500      	movs	r5, #0
 8010df6:	f000 bd99 	b.w	801192c <dwt_ioctl+0x1e10>
 8010dfa:	2c00      	cmp	r4, #0
 8010dfc:	f000 8626 	beq.w	8011a4c <dwt_ioctl+0x1f30>
 8010e00:	6862      	ldr	r2, [r4, #4]
 8010e02:	8821      	ldrh	r1, [r4, #0]
 8010e04:	f7fe faaa 	bl	800f35c <ull_setgpiovalue>
 8010e08:	2500      	movs	r5, #0
 8010e0a:	f000 bd8f 	b.w	801192c <dwt_ioctl+0x1e10>
 8010e0e:	2c00      	cmp	r4, #0
 8010e10:	f000 861e 	beq.w	8011a50 <dwt_ioctl+0x1f34>
 8010e14:	7865      	ldrb	r5, [r4, #1]
 8010e16:	7823      	ldrb	r3, [r4, #0]
 8010e18:	b18b      	cbz	r3, 8010e3e <dwt_ioctl+0x1322>
 8010e1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	739a      	strb	r2, [r3, #14]
 8010e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e24:	2208      	movs	r2, #8
 8010e26:	b37d      	cbz	r5, 8010e88 <dwt_ioctl+0x136c>
 8010e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010e2c:	9200      	str	r2, [sp, #0]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	2110      	movs	r1, #16
 8010e32:	4630      	mov	r0, r6
 8010e34:	f7fd fcd6 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8010e38:	2500      	movs	r5, #0
 8010e3a:	f000 bd77 	b.w	801192c <dwt_ioctl+0x1e10>
 8010e3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010e40:	2201      	movs	r2, #1
 8010e42:	739a      	strb	r2, [r3, #14]
 8010e44:	2318      	movs	r3, #24
 8010e46:	2200      	movs	r2, #0
 8010e48:	49ae      	ldr	r1, [pc, #696]	; (8011104 <dwt_ioctl+0x15e8>)
 8010e4a:	f7fc ffc5 	bl	800ddd8 <dwt_write32bitoffsetreg>
 8010e4e:	23e8      	movs	r3, #232	; 0xe8
 8010e50:	2200      	movs	r2, #0
 8010e52:	49ad      	ldr	r1, [pc, #692]	; (8011108 <dwt_ioctl+0x15ec>)
 8010e54:	4630      	mov	r0, r6
 8010e56:	f7fc ffbf 	bl	800ddd8 <dwt_write32bitoffsetreg>
 8010e5a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010e5c:	7d9b      	ldrb	r3, [r3, #22]
 8010e5e:	085b      	lsrs	r3, r3, #1
 8010e60:	d003      	beq.n	8010e6a <dwt_ioctl+0x134e>
 8010e62:	f06f 0308 	mvn.w	r3, #8
 8010e66:	2200      	movs	r2, #0
 8010e68:	e7dd      	b.n	8010e26 <dwt_ioctl+0x130a>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	49a7      	ldr	r1, [pc, #668]	; (801110c <dwt_ioctl+0x15f0>)
 8010e70:	4630      	mov	r0, r6
 8010e72:	f7fd f995 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8010e76:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8010e78:	7d93      	ldrb	r3, [r2, #22]
 8010e7a:	f043 0302 	orr.w	r3, r3, #2
 8010e7e:	7593      	strb	r3, [r2, #22]
 8010e80:	f06f 0308 	mvn.w	r3, #8
 8010e84:	2200      	movs	r2, #0
 8010e86:	e7ce      	b.n	8010e26 <dwt_ioctl+0x130a>
 8010e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010e8c:	e7ce      	b.n	8010e2c <dwt_ioctl+0x1310>
 8010e8e:	2c00      	cmp	r4, #0
 8010e90:	f000 85e0 	beq.w	8011a54 <dwt_ioctl+0x1f38>
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	2200      	movs	r2, #0
 8010e98:	2130      	movs	r1, #48	; 0x30
 8010e9a:	f7fc ff9d 	bl	800ddd8 <dwt_write32bitoffsetreg>
 8010e9e:	2500      	movs	r5, #0
 8010ea0:	f000 bd44 	b.w	801192c <dwt_ioctl+0x1e10>
 8010ea4:	2c00      	cmp	r4, #0
 8010ea6:	f000 85d7 	beq.w	8011a58 <dwt_ioctl+0x1f3c>
 8010eaa:	2200      	movs	r2, #0
 8010eac:	4629      	mov	r1, r5
 8010eae:	f7fc fab4 	bl	800d41a <dwt_read32bitoffsetreg>
 8010eb2:	6020      	str	r0, [r4, #0]
 8010eb4:	2500      	movs	r5, #0
 8010eb6:	f000 bd39 	b.w	801192c <dwt_ioctl+0x1e10>
 8010eba:	4623      	mov	r3, r4
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	f7fc ff8a 	bl	800ddd8 <dwt_write32bitoffsetreg>
 8010ec4:	2500      	movs	r5, #0
 8010ec6:	f000 bd31 	b.w	801192c <dwt_ioctl+0x1e10>
 8010eca:	2c00      	cmp	r4, #0
 8010ecc:	f000 85c6 	beq.w	8011a5c <dwt_ioctl+0x1f40>
 8010ed0:	2203      	movs	r2, #3
 8010ed2:	498f      	ldr	r1, [pc, #572]	; (8011110 <dwt_ioctl+0x15f4>)
 8010ed4:	f7fc faf6 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8010ed8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8010edc:	7020      	strb	r0, [r4, #0]
 8010ede:	2500      	movs	r5, #0
 8010ee0:	f000 bd24 	b.w	801192c <dwt_ioctl+0x1e10>
 8010ee4:	2c00      	cmp	r4, #0
 8010ee6:	f000 85bb 	beq.w	8011a60 <dwt_ioctl+0x1f44>
 8010eea:	6823      	ldr	r3, [r4, #0]
 8010eec:	2200      	movs	r2, #0
 8010eee:	2144      	movs	r1, #68	; 0x44
 8010ef0:	f7fc ff72 	bl	800ddd8 <dwt_write32bitoffsetreg>
 8010ef4:	2500      	movs	r5, #0
 8010ef6:	f000 bd19 	b.w	801192c <dwt_ioctl+0x1e10>
 8010efa:	2c00      	cmp	r4, #0
 8010efc:	f000 85b2 	beq.w	8011a64 <dwt_ioctl+0x1f48>
 8010f00:	8823      	ldrh	r3, [r4, #0]
 8010f02:	2200      	movs	r2, #0
 8010f04:	2148      	movs	r1, #72	; 0x48
 8010f06:	f7fc fefc 	bl	800dd02 <dwt_write16bitoffsetreg>
 8010f0a:	2500      	movs	r5, #0
 8010f0c:	f000 bd0e 	b.w	801192c <dwt_ioctl+0x1e10>
 8010f10:	2c00      	cmp	r4, #0
 8010f12:	f000 85a9 	beq.w	8011a68 <dwt_ioctl+0x1f4c>
 8010f16:	2200      	movs	r2, #0
 8010f18:	2144      	movs	r1, #68	; 0x44
 8010f1a:	f7fc fa7e 	bl	800d41a <dwt_read32bitoffsetreg>
 8010f1e:	6020      	str	r0, [r4, #0]
 8010f20:	2500      	movs	r5, #0
 8010f22:	f000 bd03 	b.w	801192c <dwt_ioctl+0x1e10>
 8010f26:	2c00      	cmp	r4, #0
 8010f28:	f000 85a0 	beq.w	8011a6c <dwt_ioctl+0x1f50>
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	2148      	movs	r1, #72	; 0x48
 8010f30:	f7fc fa89 	bl	800d446 <dwt_read16bitoffsetreg>
 8010f34:	6020      	str	r0, [r4, #0]
 8010f36:	2500      	movs	r5, #0
 8010f38:	f000 bcf8 	b.w	801192c <dwt_ioctl+0x1e10>
 8010f3c:	2c00      	cmp	r4, #0
 8010f3e:	f000 8597 	beq.w	8011a70 <dwt_ioctl+0x1f54>
 8010f42:	7823      	ldrb	r3, [r4, #0]
 8010f44:	2200      	movs	r2, #0
 8010f46:	4973      	ldr	r1, [pc, #460]	; (8011114 <dwt_ioctl+0x15f8>)
 8010f48:	f7fd f92a 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8010f4c:	2500      	movs	r5, #0
 8010f4e:	f000 bced 	b.w	801192c <dwt_ioctl+0x1e10>
 8010f52:	2c00      	cmp	r4, #0
 8010f54:	f000 858e 	beq.w	8011a74 <dwt_ioctl+0x1f58>
 8010f58:	2200      	movs	r2, #0
 8010f5a:	2144      	movs	r1, #68	; 0x44
 8010f5c:	f7fc fab2 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8010f60:	7020      	strb	r0, [r4, #0]
 8010f62:	2500      	movs	r5, #0
 8010f64:	f000 bce2 	b.w	801192c <dwt_ioctl+0x1e10>
 8010f68:	2c00      	cmp	r4, #0
 8010f6a:	f000 8585 	beq.w	8011a78 <dwt_ioctl+0x1f5c>
 8010f6e:	f7fd f923 	bl	800e1b8 <ull_getframelength>
 8010f72:	6020      	str	r0, [r4, #0]
 8010f74:	2500      	movs	r5, #0
 8010f76:	f000 bcd9 	b.w	801192c <dwt_ioctl+0x1e10>
 8010f7a:	2c00      	cmp	r4, #0
 8010f7c:	f000 857e 	beq.w	8011a7c <dwt_ioctl+0x1f60>
 8010f80:	2200      	movs	r2, #0
 8010f82:	4965      	ldr	r1, [pc, #404]	; (8011118 <dwt_ioctl+0x15fc>)
 8010f84:	f7fc fa5f 	bl	800d446 <dwt_read16bitoffsetreg>
 8010f88:	8020      	strh	r0, [r4, #0]
 8010f8a:	2500      	movs	r5, #0
 8010f8c:	f000 bcce 	b.w	801192c <dwt_ioctl+0x1e10>
 8010f90:	2c00      	cmp	r4, #0
 8010f92:	f000 8575 	beq.w	8011a80 <dwt_ioctl+0x1f64>
 8010f96:	2200      	movs	r2, #0
 8010f98:	4960      	ldr	r1, [pc, #384]	; (801111c <dwt_ioctl+0x1600>)
 8010f9a:	f7fc fa3e 	bl	800d41a <dwt_read32bitoffsetreg>
 8010f9e:	6020      	str	r0, [r4, #0]
 8010fa0:	2500      	movs	r5, #0
 8010fa2:	f000 bcc3 	b.w	801192c <dwt_ioctl+0x1e10>
 8010fa6:	2c00      	cmp	r4, #0
 8010fa8:	f000 856c 	beq.w	8011a84 <dwt_ioctl+0x1f68>
 8010fac:	8823      	ldrh	r3, [r4, #0]
 8010fae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010fb8:	2200      	movs	r2, #0
 8010fba:	4958      	ldr	r1, [pc, #352]	; (801111c <dwt_ioctl+0x1600>)
 8010fbc:	f7fe f912 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 8010fc0:	2500      	movs	r5, #0
 8010fc2:	f000 bcb3 	b.w	801192c <dwt_ioctl+0x1e10>
 8010fc6:	2c00      	cmp	r4, #0
 8010fc8:	f000 855e 	beq.w	8011a88 <dwt_ioctl+0x1f6c>
 8010fcc:	88a7      	ldrh	r7, [r4, #4]
 8010fce:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8010fd2:	7b23      	ldrb	r3, [r4, #12]
 8010fd4:	9306      	str	r3, [sp, #24]
 8010fd6:	6922      	ldr	r2, [r4, #16]
 8010fd8:	9204      	str	r2, [sp, #16]
 8010fda:	6962      	ldr	r2, [r4, #20]
 8010fdc:	9205      	str	r2, [sp, #20]
 8010fde:	f00b 0203 	and.w	r2, fp, #3
 8010fe2:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8010fe6:	2b05      	cmp	r3, #5
 8010fe8:	d147      	bne.n	801107a <dwt_ioctl+0x155e>
 8010fea:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8010fee:	bf28      	it	cs
 8010ff0:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8010ff4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8011124 <dwt_ioctl+0x1608>
 8010ff8:	2f04      	cmp	r7, #4
 8010ffa:	d805      	bhi.n	8011008 <dwt_ioctl+0x14ec>
 8010ffc:	eb09 0305 	add.w	r3, r9, r5
 8011000:	785b      	ldrb	r3, [r3, #1]
 8011002:	3b05      	subs	r3, #5
 8011004:	429f      	cmp	r7, r3
 8011006:	db40      	blt.n	801108a <dwt_ioctl+0x156e>
 8011008:	2a01      	cmp	r2, #1
 801100a:	f200 80c8 	bhi.w	801119e <dwt_ioctl+0x1682>
 801100e:	4b44      	ldr	r3, [pc, #272]	; (8011120 <dwt_ioctl+0x1604>)
 8011010:	5c99      	ldrb	r1, [r3, r2]
 8011012:	463e      	mov	r6, r7
 8011014:	42b9      	cmp	r1, r7
 8011016:	f280 80c4 	bge.w	80111a2 <dwt_ioctl+0x1686>
 801101a:	1c50      	adds	r0, r2, #1
 801101c:	fa53 f080 	uxtab	r0, r3, r0
 8011020:	2300      	movs	r3, #0
 8011022:	440b      	add	r3, r1
 8011024:	b29b      	uxth	r3, r3
 8011026:	3201      	adds	r2, #1
 8011028:	b2d2      	uxtb	r2, r2
 801102a:	2a02      	cmp	r2, #2
 801102c:	d005      	beq.n	801103a <dwt_ioctl+0x151e>
 801102e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011032:	eba6 0c03 	sub.w	ip, r6, r3
 8011036:	4561      	cmp	r1, ip
 8011038:	dbf3      	blt.n	8011022 <dwt_ioctl+0x1506>
 801103a:	429f      	cmp	r7, r3
 801103c:	bf08      	it	eq
 801103e:	9503      	streq	r5, [sp, #12]
 8011040:	f000 80b4 	beq.w	80111ac <dwt_ioctl+0x1690>
 8011044:	f107 0c05 	add.w	ip, r7, #5
 8011048:	fa1f fc8c 	uxth.w	ip, ip
 801104c:	2680      	movs	r6, #128	; 0x80
 801104e:	2100      	movs	r1, #0
 8011050:	9107      	str	r1, [sp, #28]
 8011052:	9103      	str	r1, [sp, #12]
 8011054:	9108      	str	r1, [sp, #32]
 8011056:	2005      	movs	r0, #5
 8011058:	46b8      	mov	r8, r7
 801105a:	4287      	cmp	r7, r0
 801105c:	bf38      	it	cc
 801105e:	4680      	movcc	r8, r0
 8011060:	f1a8 0805 	sub.w	r8, r8, #5
 8011064:	fa1f f888 	uxth.w	r8, r8
 8011068:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8011120 <dwt_ioctl+0x1604>
 801106c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011070:	4683      	mov	fp, r0
 8011072:	4620      	mov	r0, r4
 8011074:	460c      	mov	r4, r1
 8011076:	4686      	mov	lr, r0
 8011078:	e031      	b.n	80110de <dwt_ioctl+0x15c2>
 801107a:	f240 1331 	movw	r3, #305	; 0x131
 801107e:	429f      	cmp	r7, r3
 8011080:	bf28      	it	cs
 8011082:	461f      	movcs	r7, r3
 8011084:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8011128 <dwt_ioctl+0x160c>
 8011088:	e7b6      	b.n	8010ff8 <dwt_ioctl+0x14dc>
 801108a:	2300      	movs	r3, #0
 801108c:	9a05      	ldr	r2, [sp, #20]
 801108e:	8013      	strh	r3, [r2, #0]
 8011090:	9a04      	ldr	r2, [sp, #16]
 8011092:	f8c2 b000 	str.w	fp, [r2]
 8011096:	e098      	b.n	80111ca <dwt_ioctl+0x16ae>
 8011098:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801109c:	4674      	mov	r4, lr
 801109e:	2300      	movs	r3, #0
 80110a0:	9a05      	ldr	r2, [sp, #20]
 80110a2:	8013      	strh	r3, [r2, #0]
 80110a4:	9b04      	ldr	r3, [sp, #16]
 80110a6:	f8c3 b000 	str.w	fp, [r3]
 80110aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110ae:	e08c      	b.n	80111ca <dwt_ioctl+0x16ae>
 80110b0:	fa1f fb80 	uxth.w	fp, r0
 80110b4:	9207      	str	r2, [sp, #28]
 80110b6:	9503      	str	r5, [sp, #12]
 80110b8:	9308      	str	r3, [sp, #32]
 80110ba:	2401      	movs	r4, #1
 80110bc:	2d3f      	cmp	r5, #63	; 0x3f
 80110be:	d050      	beq.n	8011162 <dwt_ioctl+0x1646>
 80110c0:	2900      	cmp	r1, #0
 80110c2:	d139      	bne.n	8011138 <dwt_ioctl+0x161c>
 80110c4:	3501      	adds	r5, #1
 80110c6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80110ca:	f819 0005 	ldrb.w	r0, [r9, r5]
 80110ce:	4403      	add	r3, r0
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	429f      	cmp	r7, r3
 80110d4:	d067      	beq.n	80111a6 <dwt_ioctl+0x168a>
 80110d6:	3e01      	subs	r6, #1
 80110d8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80110dc:	d0dc      	beq.n	8011098 <dwt_ioctl+0x157c>
 80110de:	4543      	cmp	r3, r8
 80110e0:	d924      	bls.n	801112c <dwt_ioctl+0x1610>
 80110e2:	4563      	cmp	r3, ip
 80110e4:	d222      	bcs.n	801112c <dwt_ioctl+0x1610>
 80110e6:	1af8      	subs	r0, r7, r3
 80110e8:	b200      	sxth	r0, r0
 80110ea:	2800      	cmp	r0, #0
 80110ec:	bfb8      	it	lt
 80110ee:	4240      	neglt	r0, r0
 80110f0:	4558      	cmp	r0, fp
 80110f2:	dddd      	ble.n	80110b0 <dwt_ioctl+0x1594>
 80110f4:	2c00      	cmp	r4, #0
 80110f6:	d0e1      	beq.n	80110bc <dwt_ioctl+0x15a0>
 80110f8:	4674      	mov	r4, lr
 80110fa:	9a07      	ldr	r2, [sp, #28]
 80110fc:	9b08      	ldr	r3, [sp, #32]
 80110fe:	e055      	b.n	80111ac <dwt_ioctl+0x1690>
 8011100:	00050008 	.word	0x00050008
 8011104:	001f000c 	.word	0x001f000c
 8011108:	001f0010 	.word	0x001f0010
 801110c:	00010020 	.word	0x00010020
 8011110:	00030054 	.word	0x00030054
 8011114:	00010018 	.word	0x00010018
 8011118:	0005002c 	.word	0x0005002c
 801111c:	000e001c 	.word	0x000e001c
 8011120:	080124f8 	.word	0x080124f8
 8011124:	08012478 	.word	0x08012478
 8011128:	080124b8 	.word	0x080124b8
 801112c:	b984      	cbnz	r4, 8011150 <dwt_ioctl+0x1634>
 801112e:	4563      	cmp	r3, ip
 8011130:	d3c4      	bcc.n	80110bc <dwt_ioctl+0x15a0>
 8011132:	b199      	cbz	r1, 801115c <dwt_ioctl+0x1640>
 8011134:	2d3f      	cmp	r5, #63	; 0x3f
 8011136:	d014      	beq.n	8011162 <dwt_ioctl+0x1646>
 8011138:	f819 1005 	ldrb.w	r1, [r9, r5]
 801113c:	1a5b      	subs	r3, r3, r1
 801113e:	b29b      	uxth	r3, r3
 8011140:	1e69      	subs	r1, r5, #1
 8011142:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8011146:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 801114a:	bf18      	it	ne
 801114c:	2101      	movne	r1, #1
 801114e:	e7c0      	b.n	80110d2 <dwt_ioctl+0x15b6>
 8011150:	4674      	mov	r4, lr
 8011152:	f819 1005 	ldrb.w	r1, [r9, r5]
 8011156:	1a5b      	subs	r3, r3, r1
 8011158:	b29b      	uxth	r3, r3
 801115a:	e027      	b.n	80111ac <dwt_ioctl+0x1690>
 801115c:	4674      	mov	r4, lr
 801115e:	9503      	str	r5, [sp, #12]
 8011160:	e024      	b.n	80111ac <dwt_ioctl+0x1690>
 8011162:	2c00      	cmp	r4, #0
 8011164:	d134      	bne.n	80111d0 <dwt_ioctl+0x16b4>
 8011166:	2a03      	cmp	r2, #3
 8011168:	d036      	beq.n	80111d8 <dwt_ioctl+0x16bc>
 801116a:	2a02      	cmp	r2, #2
 801116c:	d009      	beq.n	8011182 <dwt_ioctl+0x1666>
 801116e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8011172:	1858      	adds	r0, r3, r1
 8011174:	42b8      	cmp	r0, r7
 8011176:	dd0b      	ble.n	8011190 <dwt_ioctl+0x1674>
 8011178:	440b      	add	r3, r1
 801117a:	b29b      	uxth	r3, r3
 801117c:	3201      	adds	r2, #1
 801117e:	b2d2      	uxtb	r2, r2
 8011180:	e7da      	b.n	8011138 <dwt_ioctl+0x161c>
 8011182:	9906      	ldr	r1, [sp, #24]
 8011184:	2909      	cmp	r1, #9
 8011186:	d1f2      	bne.n	801116e <dwt_ioctl+0x1652>
 8011188:	4674      	mov	r4, lr
 801118a:	213f      	movs	r1, #63	; 0x3f
 801118c:	9103      	str	r1, [sp, #12]
 801118e:	e00d      	b.n	80111ac <dwt_ioctl+0x1690>
 8011190:	4674      	mov	r4, lr
 8011192:	b283      	uxth	r3, r0
 8011194:	3201      	adds	r2, #1
 8011196:	b2d2      	uxtb	r2, r2
 8011198:	213f      	movs	r1, #63	; 0x3f
 801119a:	9103      	str	r1, [sp, #12]
 801119c:	e006      	b.n	80111ac <dwt_ioctl+0x1690>
 801119e:	2300      	movs	r3, #0
 80111a0:	e74b      	b.n	801103a <dwt_ioctl+0x151e>
 80111a2:	2300      	movs	r3, #0
 80111a4:	e749      	b.n	801103a <dwt_ioctl+0x151e>
 80111a6:	4674      	mov	r4, lr
 80111a8:	9503      	str	r5, [sp, #12]
 80111aa:	463b      	mov	r3, r7
 80111ac:	9905      	ldr	r1, [sp, #20]
 80111ae:	800b      	strh	r3, [r1, #0]
 80111b0:	9b03      	ldr	r3, [sp, #12]
 80111b2:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	041a      	lsls	r2, r3, #16
 80111ba:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80111be:	431a      	orrs	r2, r3
 80111c0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80111c4:	9a04      	ldr	r2, [sp, #16]
 80111c6:	6013      	str	r3, [r2, #0]
 80111c8:	2300      	movs	r3, #0
 80111ca:	6023      	str	r3, [r4, #0]
 80111cc:	2500      	movs	r5, #0
 80111ce:	e3ad      	b.n	801192c <dwt_ioctl+0x1e10>
 80111d0:	4674      	mov	r4, lr
 80111d2:	9a07      	ldr	r2, [sp, #28]
 80111d4:	9b08      	ldr	r3, [sp, #32]
 80111d6:	e7e9      	b.n	80111ac <dwt_ioctl+0x1690>
 80111d8:	4674      	mov	r4, lr
 80111da:	213f      	movs	r1, #63	; 0x3f
 80111dc:	9103      	str	r1, [sp, #12]
 80111de:	e7e5      	b.n	80111ac <dwt_ioctl+0x1690>
 80111e0:	2c00      	cmp	r4, #0
 80111e2:	f000 8453 	beq.w	8011a8c <dwt_ioctl+0x1f70>
 80111e6:	7827      	ldrb	r7, [r4, #0]
 80111e8:	7864      	ldrb	r4, [r4, #1]
 80111ea:	f7ef fb11 	bl	8000810 <decamutexon>
 80111ee:	4605      	mov	r5, r0
 80111f0:	2c02      	cmp	r4, #2
 80111f2:	d00e      	beq.n	8011212 <dwt_ioctl+0x16f6>
 80111f4:	2c04      	cmp	r4, #4
 80111f6:	d00c      	beq.n	8011212 <dwt_ioctl+0x16f6>
 80111f8:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 80111fc:	2c01      	cmp	r4, #1
 80111fe:	d019      	beq.n	8011234 <dwt_ioctl+0x1718>
 8011200:	43fb      	mvns	r3, r7
 8011202:	2200      	movs	r2, #0
 8011204:	9200      	str	r2, [sp, #0]
 8011206:	b2db      	uxtb	r3, r3
 8011208:	49c1      	ldr	r1, [pc, #772]	; (8011510 <dwt_ioctl+0x19f4>)
 801120a:	4630      	mov	r0, r6
 801120c:	f7fd fc5a 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8011210:	e005      	b.n	801121e <dwt_ioctl+0x1702>
 8011212:	463b      	mov	r3, r7
 8011214:	2200      	movs	r2, #0
 8011216:	49be      	ldr	r1, [pc, #760]	; (8011510 <dwt_ioctl+0x19f4>)
 8011218:	4630      	mov	r0, r6
 801121a:	f7fc ffc1 	bl	800e1a0 <dwt_write8bitoffsetreg>
 801121e:	463b      	mov	r3, r7
 8011220:	2200      	movs	r2, #0
 8011222:	49bc      	ldr	r1, [pc, #752]	; (8011514 <dwt_ioctl+0x19f8>)
 8011224:	4630      	mov	r0, r6
 8011226:	f7fc fdd7 	bl	800ddd8 <dwt_write32bitoffsetreg>
 801122a:	4628      	mov	r0, r5
 801122c:	f7ef fb01 	bl	8000832 <decamutexoff>
 8011230:	2500      	movs	r5, #0
 8011232:	e37b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011234:	9700      	str	r7, [sp, #0]
 8011236:	23ff      	movs	r3, #255	; 0xff
 8011238:	2200      	movs	r2, #0
 801123a:	49b5      	ldr	r1, [pc, #724]	; (8011510 <dwt_ioctl+0x19f4>)
 801123c:	4630      	mov	r0, r6
 801123e:	f7fd fc41 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8011242:	e7ec      	b.n	801121e <dwt_ioctl+0x1702>
 8011244:	2302      	movs	r3, #2
 8011246:	9301      	str	r3, [sp, #4]
 8011248:	2500      	movs	r5, #0
 801124a:	9500      	str	r5, [sp, #0]
 801124c:	462b      	mov	r3, r5
 801124e:	462a      	mov	r2, r5
 8011250:	211a      	movs	r1, #26
 8011252:	f7fc f85a 	bl	800d30a <dwt_xfer3xxx>
 8011256:	e369      	b.n	801192c <dwt_ioctl+0x1e10>
 8011258:	f7fe fc4c 	bl	800faf4 <ull_softreset_fcmd>
 801125c:	2500      	movs	r5, #0
 801125e:	e365      	b.n	801192c <dwt_ioctl+0x1e10>
 8011260:	f7fe fc34 	bl	800facc <ull_softreset_no_sema_fcmd>
 8011264:	2500      	movs	r5, #0
 8011266:	e361      	b.n	801192c <dwt_ioctl+0x1e10>
 8011268:	2302      	movs	r3, #2
 801126a:	9301      	str	r3, [sp, #4]
 801126c:	2500      	movs	r5, #0
 801126e:	9500      	str	r5, [sp, #0]
 8011270:	462b      	mov	r3, r5
 8011272:	462a      	mov	r2, r5
 8011274:	2114      	movs	r1, #20
 8011276:	f7fc f848 	bl	800d30a <dwt_xfer3xxx>
 801127a:	e357      	b.n	801192c <dwt_ioctl+0x1e10>
 801127c:	2402      	movs	r4, #2
 801127e:	9401      	str	r4, [sp, #4]
 8011280:	2500      	movs	r5, #0
 8011282:	9500      	str	r5, [sp, #0]
 8011284:	462b      	mov	r3, r5
 8011286:	462a      	mov	r2, r5
 8011288:	2115      	movs	r1, #21
 801128a:	f7fc f83e 	bl	800d30a <dwt_xfer3xxx>
 801128e:	9401      	str	r4, [sp, #4]
 8011290:	9500      	str	r5, [sp, #0]
 8011292:	462b      	mov	r3, r5
 8011294:	462a      	mov	r2, r5
 8011296:	2115      	movs	r1, #21
 8011298:	4630      	mov	r0, r6
 801129a:	f7fc f836 	bl	800d30a <dwt_xfer3xxx>
 801129e:	e345      	b.n	801192c <dwt_ioctl+0x1e10>
 80112a0:	2302      	movs	r3, #2
 80112a2:	9301      	str	r3, [sp, #4]
 80112a4:	2500      	movs	r5, #0
 80112a6:	9500      	str	r5, [sp, #0]
 80112a8:	462b      	mov	r3, r5
 80112aa:	462a      	mov	r2, r5
 80112ac:	2116      	movs	r1, #22
 80112ae:	f7fc f82c 	bl	800d30a <dwt_xfer3xxx>
 80112b2:	e33b      	b.n	801192c <dwt_ioctl+0x1e10>
 80112b4:	2c00      	cmp	r4, #0
 80112b6:	f000 83eb 	beq.w	8011a90 <dwt_ioctl+0x1f74>
 80112ba:	b932      	cbnz	r2, 80112ca <dwt_ioctl+0x17ae>
 80112bc:	2200      	movs	r2, #0
 80112be:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80112c2:	f7fc f8ff 	bl	800d4c4 <dwt_read8bitoffsetreg>
 80112c6:	7020      	strb	r0, [r4, #0]
 80112c8:	e330      	b.n	801192c <dwt_ioctl+0x1e10>
 80112ca:	2201      	movs	r2, #1
 80112cc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80112d0:	f7fc f8f8 	bl	800d4c4 <dwt_read8bitoffsetreg>
 80112d4:	7020      	strb	r0, [r4, #0]
 80112d6:	2500      	movs	r5, #0
 80112d8:	e328      	b.n	801192c <dwt_ioctl+0x1e10>
 80112da:	2c00      	cmp	r4, #0
 80112dc:	f000 83da 	beq.w	8011a94 <dwt_ioctl+0x1f78>
 80112e0:	7824      	ldrb	r4, [r4, #0]
 80112e2:	2200      	movs	r2, #0
 80112e4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80112e8:	f7fc f8ec 	bl	800d4c4 <dwt_read8bitoffsetreg>
 80112ec:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 80112f0:	4323      	orrs	r3, r4
 80112f2:	2200      	movs	r2, #0
 80112f4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80112f8:	4630      	mov	r0, r6
 80112fa:	f7fc ff51 	bl	800e1a0 <dwt_write8bitoffsetreg>
 80112fe:	2500      	movs	r5, #0
 8011300:	e314      	b.n	801192c <dwt_ioctl+0x1e10>
 8011302:	2c00      	cmp	r4, #0
 8011304:	f000 83c8 	beq.w	8011a98 <dwt_ioctl+0x1f7c>
 8011308:	7824      	ldrb	r4, [r4, #0]
 801130a:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 801130e:	d01d      	beq.n	801134c <dwt_ioctl+0x1830>
 8011310:	2d01      	cmp	r5, #1
 8011312:	f040 83c3 	bne.w	8011a9c <dwt_ioctl+0x1f80>
 8011316:	2502      	movs	r5, #2
 8011318:	2201      	movs	r2, #1
 801131a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801131e:	4630      	mov	r0, r6
 8011320:	f7fc f8d0 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8011324:	b9a4      	cbnz	r4, 8011350 <dwt_ioctl+0x1834>
 8011326:	ea20 0305 	bic.w	r3, r0, r5
 801132a:	b2db      	uxtb	r3, r3
 801132c:	2201      	movs	r2, #1
 801132e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011332:	4630      	mov	r0, r6
 8011334:	f7fc ff34 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8011338:	2200      	movs	r2, #0
 801133a:	2110      	movs	r1, #16
 801133c:	4630      	mov	r0, r6
 801133e:	f7fc f86c 	bl	800d41a <dwt_read32bitoffsetreg>
 8011342:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8011346:	d00a      	beq.n	801135e <dwt_ioctl+0x1842>
 8011348:	2500      	movs	r5, #0
 801134a:	e2ef      	b.n	801192c <dwt_ioctl+0x1e10>
 801134c:	2504      	movs	r5, #4
 801134e:	e7e3      	b.n	8011318 <dwt_ioctl+0x17fc>
 8011350:	2c01      	cmp	r4, #1
 8011352:	f040 83a6 	bne.w	8011aa2 <dwt_ioctl+0x1f86>
 8011356:	ea40 0305 	orr.w	r3, r0, r5
 801135a:	b2db      	uxtb	r3, r3
 801135c:	e7e6      	b.n	801132c <dwt_ioctl+0x1810>
 801135e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011368:	2200      	movs	r2, #0
 801136a:	2110      	movs	r1, #16
 801136c:	4630      	mov	r0, r6
 801136e:	f7fd fa39 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8011372:	2500      	movs	r5, #0
 8011374:	e2da      	b.n	801192c <dwt_ioctl+0x1e10>
 8011376:	2c00      	cmp	r4, #0
 8011378:	f000 8396 	beq.w	8011aa8 <dwt_ioctl+0x1f8c>
 801137c:	7823      	ldrb	r3, [r4, #0]
 801137e:	035b      	lsls	r3, r3, #13
 8011380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011384:	9300      	str	r3, [sp, #0]
 8011386:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 801138a:	2200      	movs	r2, #0
 801138c:	4962      	ldr	r1, [pc, #392]	; (8011518 <dwt_ioctl+0x19fc>)
 801138e:	f7fd ff29 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 8011392:	2500      	movs	r5, #0
 8011394:	e2ca      	b.n	801192c <dwt_ioctl+0x1e10>
 8011396:	2c00      	cmp	r4, #0
 8011398:	f000 8388 	beq.w	8011aac <dwt_ioctl+0x1f90>
 801139c:	7825      	ldrb	r5, [r4, #0]
 801139e:	6862      	ldr	r2, [r4, #4]
 80113a0:	2a01      	cmp	r2, #1
 80113a2:	bf15      	itete	ne
 80113a4:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 80113a8:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80113ac:	27df      	movne	r7, #223	; 0xdf
 80113ae:	27ef      	moveq	r7, #239	; 0xef
 80113b0:	bf14      	ite	ne
 80113b2:	f04f 0820 	movne.w	r8, #32
 80113b6:	f04f 0810 	moveq.w	r8, #16
 80113ba:	2400      	movs	r4, #0
 80113bc:	9400      	str	r4, [sp, #0]
 80113be:	4622      	mov	r2, r4
 80113c0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80113c4:	f7fd fa0e 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 80113c8:	9400      	str	r4, [sp, #0]
 80113ca:	463b      	mov	r3, r7
 80113cc:	4622      	mov	r2, r4
 80113ce:	4953      	ldr	r1, [pc, #332]	; (801151c <dwt_ioctl+0x1a00>)
 80113d0:	4630      	mov	r0, r6
 80113d2:	f7fd fb77 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80113d6:	2d01      	cmp	r5, #1
 80113d8:	d002      	beq.n	80113e0 <dwt_ioctl+0x18c4>
 80113da:	b155      	cbz	r5, 80113f2 <dwt_ioctl+0x18d6>
 80113dc:	2500      	movs	r5, #0
 80113de:	e2a5      	b.n	801192c <dwt_ioctl+0x1e10>
 80113e0:	4625      	mov	r5, r4
 80113e2:	9400      	str	r4, [sp, #0]
 80113e4:	463b      	mov	r3, r7
 80113e6:	4622      	mov	r2, r4
 80113e8:	494d      	ldr	r1, [pc, #308]	; (8011520 <dwt_ioctl+0x1a04>)
 80113ea:	4630      	mov	r0, r6
 80113ec:	f7fd fb6a 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80113f0:	e29c      	b.n	801192c <dwt_ioctl+0x1e10>
 80113f2:	f8cd 8000 	str.w	r8, [sp]
 80113f6:	23ff      	movs	r3, #255	; 0xff
 80113f8:	2200      	movs	r2, #0
 80113fa:	4949      	ldr	r1, [pc, #292]	; (8011520 <dwt_ioctl+0x1a04>)
 80113fc:	4630      	mov	r0, r6
 80113fe:	f7fd fb61 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8011402:	e293      	b.n	801192c <dwt_ioctl+0x1e10>
 8011404:	2c00      	cmp	r4, #0
 8011406:	f000 8353 	beq.w	8011ab0 <dwt_ioctl+0x1f94>
 801140a:	7822      	ldrb	r2, [r4, #0]
 801140c:	f012 0f01 	tst.w	r2, #1
 8011410:	d02c      	beq.n	801146c <dwt_ioctl+0x1950>
 8011412:	0157      	lsls	r7, r2, #5
 8011414:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8011418:	2440      	movs	r4, #64	; 0x40
 801141a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801141e:	f012 0f04 	tst.w	r2, #4
 8011422:	d027      	beq.n	8011474 <dwt_ioctl+0x1958>
 8011424:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8011428:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 801142c:	0112      	lsls	r2, r2, #4
 801142e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011432:	4317      	orrs	r7, r2
 8011434:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011438:	9200      	str	r2, [sp, #0]
 801143a:	43db      	mvns	r3, r3
 801143c:	2200      	movs	r2, #0
 801143e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011442:	4630      	mov	r0, r6
 8011444:	f7fd f9ce 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8011448:	43e4      	mvns	r4, r4
 801144a:	b2a4      	uxth	r4, r4
 801144c:	2500      	movs	r5, #0
 801144e:	9500      	str	r5, [sp, #0]
 8011450:	4623      	mov	r3, r4
 8011452:	462a      	mov	r2, r5
 8011454:	4931      	ldr	r1, [pc, #196]	; (801151c <dwt_ioctl+0x1a00>)
 8011456:	4630      	mov	r0, r6
 8011458:	f7fd fec4 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 801145c:	9700      	str	r7, [sp, #0]
 801145e:	4623      	mov	r3, r4
 8011460:	462a      	mov	r2, r5
 8011462:	492f      	ldr	r1, [pc, #188]	; (8011520 <dwt_ioctl+0x1a04>)
 8011464:	4630      	mov	r0, r6
 8011466:	f7fd febd 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 801146a:	e25f      	b.n	801192c <dwt_ioctl+0x1e10>
 801146c:	2700      	movs	r7, #0
 801146e:	463c      	mov	r4, r7
 8011470:	463b      	mov	r3, r7
 8011472:	e7d4      	b.n	801141e <dwt_ioctl+0x1902>
 8011474:	2200      	movs	r2, #0
 8011476:	e7df      	b.n	8011438 <dwt_ioctl+0x191c>
 8011478:	2308      	movs	r3, #8
 801147a:	9300      	str	r3, [sp, #0]
 801147c:	23ff      	movs	r3, #255	; 0xff
 801147e:	2201      	movs	r2, #1
 8011480:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8011484:	f7fd fb1e 	bl	800eac4 <dwt_modify8bitoffsetreg>
 8011488:	4c26      	ldr	r4, [pc, #152]	; (8011524 <dwt_ioctl+0x1a08>)
 801148a:	2302      	movs	r3, #2
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	23ff      	movs	r3, #255	; 0xff
 8011490:	2203      	movs	r2, #3
 8011492:	4621      	mov	r1, r4
 8011494:	4630      	mov	r0, r6
 8011496:	f7fd fb15 	bl	800eac4 <dwt_modify8bitoffsetreg>
 801149a:	2500      	movs	r5, #0
 801149c:	9500      	str	r5, [sp, #0]
 801149e:	23f7      	movs	r3, #247	; 0xf7
 80114a0:	2201      	movs	r2, #1
 80114a2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80114a6:	4630      	mov	r0, r6
 80114a8:	f7fd fb0c 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80114ac:	9500      	str	r5, [sp, #0]
 80114ae:	23fd      	movs	r3, #253	; 0xfd
 80114b0:	2203      	movs	r2, #3
 80114b2:	4621      	mov	r1, r4
 80114b4:	4630      	mov	r0, r6
 80114b6:	f7fd fb05 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80114ba:	e237      	b.n	801192c <dwt_ioctl+0x1e10>
 80114bc:	2c00      	cmp	r4, #0
 80114be:	f000 82f9 	beq.w	8011ab4 <dwt_ioctl+0x1f98>
 80114c2:	8863      	ldrh	r3, [r4, #2]
 80114c4:	00db      	lsls	r3, r3, #3
 80114c6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80114ca:	7822      	ldrb	r2, [r4, #0]
 80114cc:	b10a      	cbz	r2, 80114d2 <dwt_ioctl+0x19b6>
 80114ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80114d2:	9300      	str	r3, [sp, #0]
 80114d4:	f24f 0307 	movw	r3, #61447	; 0xf007
 80114d8:	2200      	movs	r2, #0
 80114da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80114de:	4630      	mov	r0, r6
 80114e0:	f7fd fe80 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 80114e4:	2500      	movs	r5, #0
 80114e6:	e221      	b.n	801192c <dwt_ioctl+0x1e10>
 80114e8:	2500      	movs	r5, #0
 80114ea:	9500      	str	r5, [sp, #0]
 80114ec:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80114f0:	462a      	mov	r2, r5
 80114f2:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80114f6:	f7fd fe75 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 80114fa:	e217      	b.n	801192c <dwt_ioctl+0x1e10>
 80114fc:	2c00      	cmp	r4, #0
 80114fe:	f000 82db 	beq.w	8011ab8 <dwt_ioctl+0x1f9c>
 8011502:	2200      	movs	r2, #0
 8011504:	4908      	ldr	r1, [pc, #32]	; (8011528 <dwt_ioctl+0x1a0c>)
 8011506:	f7fb ff9e 	bl	800d446 <dwt_read16bitoffsetreg>
 801150a:	8020      	strh	r0, [r4, #0]
 801150c:	2500      	movs	r5, #0
 801150e:	e20d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011510:	0001001c 	.word	0x0001001c
 8011514:	00010018 	.word	0x00010018
 8011518:	000e000c 	.word	0x000e000c
 801151c:	00050008 	.word	0x00050008
 8011520:	0005000c 	.word	0x0005000c
 8011524:	00110008 	.word	0x00110008
 8011528:	00110048 	.word	0x00110048
 801152c:	2c00      	cmp	r4, #0
 801152e:	f000 82c5 	beq.w	8011abc <dwt_ioctl+0x1fa0>
 8011532:	7823      	ldrb	r3, [r4, #0]
 8011534:	2b01      	cmp	r3, #1
 8011536:	7862      	ldrb	r2, [r4, #1]
 8011538:	78a3      	ldrb	r3, [r4, #2]
 801153a:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801153e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011542:	78e2      	ldrb	r2, [r4, #3]
 8011544:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8011548:	7922      	ldrb	r2, [r4, #4]
 801154a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 801154e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011552:	bf0c      	ite	eq
 8011554:	2202      	moveq	r2, #2
 8011556:	2200      	movne	r2, #0
 8011558:	49b6      	ldr	r1, [pc, #728]	; (8011834 <dwt_ioctl+0x1d18>)
 801155a:	f7fc fbd2 	bl	800dd02 <dwt_write16bitoffsetreg>
 801155e:	2500      	movs	r5, #0
 8011560:	e1e4      	b.n	801192c <dwt_ioctl+0x1e10>
 8011562:	2c00      	cmp	r4, #0
 8011564:	f000 82ac 	beq.w	8011ac0 <dwt_ioctl+0x1fa4>
 8011568:	6863      	ldr	r3, [r4, #4]
 801156a:	7822      	ldrb	r2, [r4, #0]
 801156c:	b13a      	cbz	r2, 801157e <dwt_ioctl+0x1a62>
 801156e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011572:	2200      	movs	r2, #0
 8011574:	49b0      	ldr	r1, [pc, #704]	; (8011838 <dwt_ioctl+0x1d1c>)
 8011576:	f7fc fc2f 	bl	800ddd8 <dwt_write32bitoffsetreg>
 801157a:	2500      	movs	r5, #0
 801157c:	e1d6      	b.n	801192c <dwt_ioctl+0x1e10>
 801157e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011582:	49ae      	ldr	r1, [pc, #696]	; (801183c <dwt_ioctl+0x1d20>)
 8011584:	f7fc fc28 	bl	800ddd8 <dwt_write32bitoffsetreg>
 8011588:	2500      	movs	r5, #0
 801158a:	e1cf      	b.n	801192c <dwt_ioctl+0x1e10>
 801158c:	2c00      	cmp	r4, #0
 801158e:	f000 8299 	beq.w	8011ac4 <dwt_ioctl+0x1fa8>
 8011592:	7823      	ldrb	r3, [r4, #0]
 8011594:	2401      	movs	r4, #1
 8011596:	409c      	lsls	r4, r3
 8011598:	b2e4      	uxtb	r4, r4
 801159a:	2310      	movs	r3, #16
 801159c:	9300      	str	r3, [sp, #0]
 801159e:	23ff      	movs	r3, #255	; 0xff
 80115a0:	2200      	movs	r2, #0
 80115a2:	49a7      	ldr	r1, [pc, #668]	; (8011840 <dwt_ioctl+0x1d24>)
 80115a4:	f7fd fa8e 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80115a8:	43e3      	mvns	r3, r4
 80115aa:	4fa2      	ldr	r7, [pc, #648]	; (8011834 <dwt_ioctl+0x1d18>)
 80115ac:	2500      	movs	r5, #0
 80115ae:	9500      	str	r5, [sp, #0]
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	462a      	mov	r2, r5
 80115b4:	4639      	mov	r1, r7
 80115b6:	4630      	mov	r0, r6
 80115b8:	f7fd fa84 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80115bc:	9400      	str	r4, [sp, #0]
 80115be:	23ff      	movs	r3, #255	; 0xff
 80115c0:	462a      	mov	r2, r5
 80115c2:	4639      	mov	r1, r7
 80115c4:	4630      	mov	r0, r6
 80115c6:	f7fd fa7d 	bl	800eac4 <dwt_modify8bitoffsetreg>
 80115ca:	e1af      	b.n	801192c <dwt_ioctl+0x1e10>
 80115cc:	2c00      	cmp	r4, #0
 80115ce:	f000 827b 	beq.w	8011ac8 <dwt_ioctl+0x1fac>
 80115d2:	7822      	ldrb	r2, [r4, #0]
 80115d4:	7863      	ldrb	r3, [r4, #1]
 80115d6:	b19b      	cbz	r3, 8011600 <dwt_ioctl+0x1ae4>
 80115d8:	2a00      	cmp	r2, #0
 80115da:	f040 8297 	bne.w	8011b0c <dwt_ioctl+0x1ff0>
 80115de:	2400      	movs	r4, #0
 80115e0:	9400      	str	r4, [sp, #0]
 80115e2:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80115e6:	4622      	mov	r2, r4
 80115e8:	2110      	movs	r1, #16
 80115ea:	f7fd f8fb 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 80115ee:	9400      	str	r4, [sp, #0]
 80115f0:	4b94      	ldr	r3, [pc, #592]	; (8011844 <dwt_ioctl+0x1d28>)
 80115f2:	4622      	mov	r2, r4
 80115f4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7fd f8f3 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 80115fe:	e017      	b.n	8011630 <dwt_ioctl+0x1b14>
 8011600:	2a00      	cmp	r2, #0
 8011602:	f000 8285 	beq.w	8011b10 <dwt_ioctl+0x1ff4>
 8011606:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 801160a:	2400      	movs	r4, #0
 801160c:	9400      	str	r4, [sp, #0]
 801160e:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8011612:	4622      	mov	r2, r4
 8011614:	2110      	movs	r1, #16
 8011616:	4630      	mov	r0, r6
 8011618:	f7fd f8e4 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 801161c:	9500      	str	r5, [sp, #0]
 801161e:	4b89      	ldr	r3, [pc, #548]	; (8011844 <dwt_ioctl+0x1d28>)
 8011620:	4622      	mov	r2, r4
 8011622:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011626:	4630      	mov	r0, r6
 8011628:	f7fd f8dc 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 801162c:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8011630:	9400      	str	r4, [sp, #0]
 8011632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011636:	2200      	movs	r2, #0
 8011638:	2110      	movs	r1, #16
 801163a:	4630      	mov	r0, r6
 801163c:	f7fd f8d2 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8011640:	2500      	movs	r5, #0
 8011642:	e173      	b.n	801192c <dwt_ioctl+0x1e10>
 8011644:	2c00      	cmp	r4, #0
 8011646:	f000 8241 	beq.w	8011acc <dwt_ioctl+0x1fb0>
 801164a:	7823      	ldrb	r3, [r4, #0]
 801164c:	b93b      	cbnz	r3, 801165e <dwt_ioctl+0x1b42>
 801164e:	2500      	movs	r5, #0
 8011650:	9500      	str	r5, [sp, #0]
 8011652:	23df      	movs	r3, #223	; 0xdf
 8011654:	2203      	movs	r2, #3
 8011656:	497c      	ldr	r1, [pc, #496]	; (8011848 <dwt_ioctl+0x1d2c>)
 8011658:	f7fd fa34 	bl	800eac4 <dwt_modify8bitoffsetreg>
 801165c:	e166      	b.n	801192c <dwt_ioctl+0x1e10>
 801165e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8011662:	9300      	str	r3, [sp, #0]
 8011664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011668:	2200      	movs	r2, #0
 801166a:	4977      	ldr	r1, [pc, #476]	; (8011848 <dwt_ioctl+0x1d2c>)
 801166c:	f7fd f8ba 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8011670:	2500      	movs	r5, #0
 8011672:	e15b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011674:	2c00      	cmp	r4, #0
 8011676:	f000 822b 	beq.w	8011ad0 <dwt_ioctl+0x1fb4>
 801167a:	7823      	ldrb	r3, [r4, #0]
 801167c:	b93b      	cbnz	r3, 801168e <dwt_ioctl+0x1b72>
 801167e:	2500      	movs	r5, #0
 8011680:	9500      	str	r5, [sp, #0]
 8011682:	237f      	movs	r3, #127	; 0x7f
 8011684:	2203      	movs	r2, #3
 8011686:	4971      	ldr	r1, [pc, #452]	; (801184c <dwt_ioctl+0x1d30>)
 8011688:	f7fd fa1c 	bl	800eac4 <dwt_modify8bitoffsetreg>
 801168c:	e14e      	b.n	801192c <dwt_ioctl+0x1e10>
 801168e:	2380      	movs	r3, #128	; 0x80
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	23ff      	movs	r3, #255	; 0xff
 8011694:	2203      	movs	r2, #3
 8011696:	496d      	ldr	r1, [pc, #436]	; (801184c <dwt_ioctl+0x1d30>)
 8011698:	f7fd fa14 	bl	800eac4 <dwt_modify8bitoffsetreg>
 801169c:	2500      	movs	r5, #0
 801169e:	e145      	b.n	801192c <dwt_ioctl+0x1e10>
 80116a0:	2c00      	cmp	r4, #0
 80116a2:	f000 8217 	beq.w	8011ad4 <dwt_ioctl+0x1fb8>
 80116a6:	b2e3      	uxtb	r3, r4
 80116a8:	1c9a      	adds	r2, r3, #2
 80116aa:	2301      	movs	r3, #1
 80116ac:	4093      	lsls	r3, r2
 80116ae:	3b01      	subs	r3, #1
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	2200      	movs	r2, #0
 80116b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80116b8:	f7fc fd72 	bl	800e1a0 <dwt_write8bitoffsetreg>
 80116bc:	2500      	movs	r5, #0
 80116be:	e135      	b.n	801192c <dwt_ioctl+0x1e10>
 80116c0:	2c00      	cmp	r4, #0
 80116c2:	f000 8209 	beq.w	8011ad8 <dwt_ioctl+0x1fbc>
 80116c6:	7ae3      	ldrb	r3, [r4, #11]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f000 8207 	beq.w	8011adc <dwt_ioctl+0x1fc0>
 80116ce:	7b63      	ldrb	r3, [r4, #13]
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	7b20      	ldrb	r0, [r4, #12]
 80116d4:	bf94      	ite	ls
 80116d6:	2203      	movls	r2, #3
 80116d8:	2204      	movhi	r2, #4
 80116da:	2110      	movs	r1, #16
 80116dc:	4b5c      	ldr	r3, [pc, #368]	; (8011850 <dwt_ioctl+0x1d34>)
 80116de:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80116e2:	f7fb fdf5 	bl	800d2d0 <get_sts_mnth>
 80116e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80116ea:	9000      	str	r0, [sp, #0]
 80116ec:	f64f 7380 	movw	r3, #65408	; 0xff80
 80116f0:	2202      	movs	r2, #2
 80116f2:	4958      	ldr	r1, [pc, #352]	; (8011854 <dwt_ioctl+0x1d38>)
 80116f4:	4630      	mov	r0, r6
 80116f6:	f7fd fd75 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 80116fa:	2394      	movs	r3, #148	; 0x94
 80116fc:	2200      	movs	r2, #0
 80116fe:	4956      	ldr	r1, [pc, #344]	; (8011858 <dwt_ioctl+0x1d3c>)
 8011700:	4630      	mov	r0, r6
 8011702:	f7fc fd4d 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8011706:	2500      	movs	r5, #0
 8011708:	e110      	b.n	801192c <dwt_ioctl+0x1e10>
 801170a:	2c00      	cmp	r4, #0
 801170c:	f000 81e8 	beq.w	8011ae0 <dwt_ioctl+0x1fc4>
 8011710:	2200      	movs	r2, #0
 8011712:	4952      	ldr	r1, [pc, #328]	; (801185c <dwt_ioctl+0x1d40>)
 8011714:	f7fb fe81 	bl	800d41a <dwt_read32bitoffsetreg>
 8011718:	6020      	str	r0, [r4, #0]
 801171a:	2500      	movs	r5, #0
 801171c:	e106      	b.n	801192c <dwt_ioctl+0x1e10>
 801171e:	2c00      	cmp	r4, #0
 8011720:	f000 81e0 	beq.w	8011ae4 <dwt_ioctl+0x1fc8>
 8011724:	2200      	movs	r2, #0
 8011726:	494e      	ldr	r1, [pc, #312]	; (8011860 <dwt_ioctl+0x1d44>)
 8011728:	f7fb fe77 	bl	800d41a <dwt_read32bitoffsetreg>
 801172c:	6020      	str	r0, [r4, #0]
 801172e:	2500      	movs	r5, #0
 8011730:	e0fc      	b.n	801192c <dwt_ioctl+0x1e10>
 8011732:	2c00      	cmp	r4, #0
 8011734:	f000 81d8 	beq.w	8011ae8 <dwt_ioctl+0x1fcc>
 8011738:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 801173c:	6023      	str	r3, [r4, #0]
 801173e:	2500      	movs	r5, #0
 8011740:	e0f4      	b.n	801192c <dwt_ioctl+0x1e10>
 8011742:	2c00      	cmp	r4, #0
 8011744:	f000 81d2 	beq.w	8011aec <dwt_ioctl+0x1fd0>
 8011748:	2500      	movs	r5, #0
 801174a:	950a      	str	r5, [sp, #40]	; 0x28
 801174c:	af0c      	add	r7, sp, #48	; 0x30
 801174e:	2319      	movs	r3, #25
 8011750:	f847 3d04 	str.w	r3, [r7, #-4]!
 8011754:	9700      	str	r7, [sp, #0]
 8011756:	2304      	movs	r3, #4
 8011758:	462a      	mov	r2, r5
 801175a:	4942      	ldr	r1, [pc, #264]	; (8011864 <dwt_ioctl+0x1d48>)
 801175c:	f7fc fac6 	bl	800dcec <dwt_writetodevice>
 8011760:	f641 7348 	movw	r3, #8008	; 0x1f48
 8011764:	930b      	str	r3, [sp, #44]	; 0x2c
 8011766:	9700      	str	r7, [sp, #0]
 8011768:	2304      	movs	r3, #4
 801176a:	462a      	mov	r2, r5
 801176c:	493e      	ldr	r1, [pc, #248]	; (8011868 <dwt_ioctl+0x1d4c>)
 801176e:	4630      	mov	r0, r6
 8011770:	f7fc fabc 	bl	800dcec <dwt_writetodevice>
 8011774:	ab0a      	add	r3, sp, #40	; 0x28
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	2304      	movs	r3, #4
 801177a:	462a      	mov	r2, r5
 801177c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8011780:	4630      	mov	r0, r6
 8011782:	f7fb fe40 	bl	800d406 <dwt_readfromdevice>
 8011786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011788:	6023      	str	r3, [r4, #0]
 801178a:	e0cf      	b.n	801192c <dwt_ioctl+0x1e10>
 801178c:	2c00      	cmp	r4, #0
 801178e:	f000 81af 	beq.w	8011af0 <dwt_ioctl+0x1fd4>
 8011792:	2200      	movs	r2, #0
 8011794:	4935      	ldr	r1, [pc, #212]	; (801186c <dwt_ioctl+0x1d50>)
 8011796:	f7fb fe40 	bl	800d41a <dwt_read32bitoffsetreg>
 801179a:	b280      	uxth	r0, r0
 801179c:	6020      	str	r0, [r4, #0]
 801179e:	2200      	movs	r2, #0
 80117a0:	4933      	ldr	r1, [pc, #204]	; (8011870 <dwt_ioctl+0x1d54>)
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7fb fe39 	bl	800d41a <dwt_read32bitoffsetreg>
 80117a8:	0d43      	lsrs	r3, r0, #21
 80117aa:	019b      	lsls	r3, r3, #6
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	6063      	str	r3, [r4, #4]
 80117b0:	2500      	movs	r5, #0
 80117b2:	e0bb      	b.n	801192c <dwt_ioctl+0x1e10>
 80117b4:	2c00      	cmp	r4, #0
 80117b6:	f000 819d 	beq.w	8011af4 <dwt_ioctl+0x1fd8>
 80117ba:	7d63      	ldrb	r3, [r4, #21]
 80117bc:	b133      	cbz	r3, 80117cc <dwt_ioctl+0x1cb0>
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d062      	beq.n	8011888 <dwt_ioctl+0x1d6c>
 80117c2:	2b02      	cmp	r3, #2
 80117c4:	f000 8089 	beq.w	80118da <dwt_ioctl+0x1dbe>
 80117c8:	23ff      	movs	r3, #255	; 0xff
 80117ca:	e02f      	b.n	801182c <dwt_ioctl+0x1d10>
 80117cc:	2200      	movs	r2, #0
 80117ce:	4929      	ldr	r1, [pc, #164]	; (8011874 <dwt_ioctl+0x1d58>)
 80117d0:	f7fb fe23 	bl	800d41a <dwt_read32bitoffsetreg>
 80117d4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80117d8:	6020      	str	r0, [r4, #0]
 80117da:	2200      	movs	r2, #0
 80117dc:	4926      	ldr	r1, [pc, #152]	; (8011878 <dwt_ioctl+0x1d5c>)
 80117de:	4630      	mov	r0, r6
 80117e0:	f7fb fe1b 	bl	800d41a <dwt_read32bitoffsetreg>
 80117e4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80117e8:	6060      	str	r0, [r4, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	4923      	ldr	r1, [pc, #140]	; (801187c <dwt_ioctl+0x1d60>)
 80117ee:	4630      	mov	r0, r6
 80117f0:	f7fb fe13 	bl	800d41a <dwt_read32bitoffsetreg>
 80117f4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80117f8:	60a0      	str	r0, [r4, #8]
 80117fa:	2200      	movs	r2, #0
 80117fc:	4920      	ldr	r1, [pc, #128]	; (8011880 <dwt_ioctl+0x1d64>)
 80117fe:	4630      	mov	r0, r6
 8011800:	f7fb fe0b 	bl	800d41a <dwt_read32bitoffsetreg>
 8011804:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011808:	60e0      	str	r0, [r4, #12]
 801180a:	2200      	movs	r2, #0
 801180c:	491d      	ldr	r1, [pc, #116]	; (8011884 <dwt_ioctl+0x1d68>)
 801180e:	4630      	mov	r0, r6
 8011810:	f7fb fe03 	bl	800d41a <dwt_read32bitoffsetreg>
 8011814:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011818:	6120      	str	r0, [r4, #16]
 801181a:	2203      	movs	r2, #3
 801181c:	490f      	ldr	r1, [pc, #60]	; (801185c <dwt_ioctl+0x1d40>)
 801181e:	4630      	mov	r0, r6
 8011820:	f7fb fe50 	bl	800d4c4 <dwt_read8bitoffsetreg>
 8011824:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8011828:	7520      	strb	r0, [r4, #20]
 801182a:	2300      	movs	r3, #0
 801182c:	75a3      	strb	r3, [r4, #22]
 801182e:	2500      	movs	r5, #0
 8011830:	e07c      	b.n	801192c <dwt_ioctl+0x1e10>
 8011832:	bf00      	nop
 8011834:	0011003c 	.word	0x0011003c
 8011838:	00110044 	.word	0x00110044
 801183c:	00110040 	.word	0x00110040
 8011840:	00070048 	.word	0x00070048
 8011844:	f7fc0fff 	.word	0xf7fc0fff
 8011848:	000f0028 	.word	0x000f0028
 801184c:	0007001c 	.word	0x0007001c
 8011850:	08012504 	.word	0x08012504
 8011854:	000e0014 	.word	0x000e0014
 8011858:	000e0018 	.word	0x000e0018
 801185c:	00030054 	.word	0x00030054
 8011860:	000f004c 	.word	0x000f004c
 8011864:	001f0004 	.word	0x001f0004
 8011868:	001f0008 	.word	0x001f0008
 801186c:	000c0048 	.word	0x000c0048
 8011870:	000c0028 	.word	0x000c0028
 8011874:	000c0058 	.word	0x000c0058
 8011878:	000c0030 	.word	0x000c0030
 801187c:	000c0034 	.word	0x000c0034
 8011880:	000c0038 	.word	0x000c0038
 8011884:	000c002c 	.word	0x000c002c
 8011888:	2200      	movs	r2, #0
 801188a:	49aa      	ldr	r1, [pc, #680]	; (8011b34 <dwt_ioctl+0x2018>)
 801188c:	f7fb fdc5 	bl	800d41a <dwt_read32bitoffsetreg>
 8011890:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011894:	6020      	str	r0, [r4, #0]
 8011896:	2200      	movs	r2, #0
 8011898:	49a7      	ldr	r1, [pc, #668]	; (8011b38 <dwt_ioctl+0x201c>)
 801189a:	4630      	mov	r0, r6
 801189c:	f7fb fdbd 	bl	800d41a <dwt_read32bitoffsetreg>
 80118a0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80118a4:	6060      	str	r0, [r4, #4]
 80118a6:	2200      	movs	r2, #0
 80118a8:	49a4      	ldr	r1, [pc, #656]	; (8011b3c <dwt_ioctl+0x2020>)
 80118aa:	4630      	mov	r0, r6
 80118ac:	f7fb fdb5 	bl	800d41a <dwt_read32bitoffsetreg>
 80118b0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80118b4:	60a0      	str	r0, [r4, #8]
 80118b6:	2200      	movs	r2, #0
 80118b8:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80118bc:	4630      	mov	r0, r6
 80118be:	f7fb fdac 	bl	800d41a <dwt_read32bitoffsetreg>
 80118c2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80118c6:	60e0      	str	r0, [r4, #12]
 80118c8:	2200      	movs	r2, #0
 80118ca:	499d      	ldr	r1, [pc, #628]	; (8011b40 <dwt_ioctl+0x2024>)
 80118cc:	4630      	mov	r0, r6
 80118ce:	f7fb fda4 	bl	800d41a <dwt_read32bitoffsetreg>
 80118d2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80118d6:	6120      	str	r0, [r4, #16]
 80118d8:	e79f      	b.n	801181a <dwt_ioctl+0x1cfe>
 80118da:	2200      	movs	r2, #0
 80118dc:	4999      	ldr	r1, [pc, #612]	; (8011b44 <dwt_ioctl+0x2028>)
 80118de:	f7fb fd9c 	bl	800d41a <dwt_read32bitoffsetreg>
 80118e2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80118e6:	6020      	str	r0, [r4, #0]
 80118e8:	2200      	movs	r2, #0
 80118ea:	4997      	ldr	r1, [pc, #604]	; (8011b48 <dwt_ioctl+0x202c>)
 80118ec:	4630      	mov	r0, r6
 80118ee:	f7fb fd94 	bl	800d41a <dwt_read32bitoffsetreg>
 80118f2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80118f6:	6060      	str	r0, [r4, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	4994      	ldr	r1, [pc, #592]	; (8011b4c <dwt_ioctl+0x2030>)
 80118fc:	4630      	mov	r0, r6
 80118fe:	f7fb fd8c 	bl	800d41a <dwt_read32bitoffsetreg>
 8011902:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011906:	60a0      	str	r0, [r4, #8]
 8011908:	2200      	movs	r2, #0
 801190a:	4991      	ldr	r1, [pc, #580]	; (8011b50 <dwt_ioctl+0x2034>)
 801190c:	4630      	mov	r0, r6
 801190e:	f7fb fd84 	bl	800d41a <dwt_read32bitoffsetreg>
 8011912:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8011916:	60e0      	str	r0, [r4, #12]
 8011918:	2200      	movs	r2, #0
 801191a:	498e      	ldr	r1, [pc, #568]	; (8011b54 <dwt_ioctl+0x2038>)
 801191c:	4630      	mov	r0, r6
 801191e:	f7fb fd7c 	bl	800d41a <dwt_read32bitoffsetreg>
 8011922:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011926:	6120      	str	r0, [r4, #16]
 8011928:	e777      	b.n	801181a <dwt_ioctl+0x1cfe>
 801192a:	2500      	movs	r5, #0
 801192c:	4628      	mov	r0, r5
 801192e:	b00d      	add	sp, #52	; 0x34
 8011930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011934:	2500      	movs	r5, #0
 8011936:	e7f9      	b.n	801192c <dwt_ioctl+0x1e10>
 8011938:	2500      	movs	r5, #0
 801193a:	e7f7      	b.n	801192c <dwt_ioctl+0x1e10>
 801193c:	2500      	movs	r5, #0
 801193e:	e7f5      	b.n	801192c <dwt_ioctl+0x1e10>
 8011940:	2500      	movs	r5, #0
 8011942:	e7f3      	b.n	801192c <dwt_ioctl+0x1e10>
 8011944:	2500      	movs	r5, #0
 8011946:	e7f1      	b.n	801192c <dwt_ioctl+0x1e10>
 8011948:	2500      	movs	r5, #0
 801194a:	e7ef      	b.n	801192c <dwt_ioctl+0x1e10>
 801194c:	2500      	movs	r5, #0
 801194e:	e7ed      	b.n	801192c <dwt_ioctl+0x1e10>
 8011950:	2500      	movs	r5, #0
 8011952:	e7eb      	b.n	801192c <dwt_ioctl+0x1e10>
 8011954:	2500      	movs	r5, #0
 8011956:	e7e9      	b.n	801192c <dwt_ioctl+0x1e10>
 8011958:	2500      	movs	r5, #0
 801195a:	e7e7      	b.n	801192c <dwt_ioctl+0x1e10>
 801195c:	2500      	movs	r5, #0
 801195e:	e7e5      	b.n	801192c <dwt_ioctl+0x1e10>
 8011960:	2500      	movs	r5, #0
 8011962:	e7e3      	b.n	801192c <dwt_ioctl+0x1e10>
 8011964:	2500      	movs	r5, #0
 8011966:	e7e1      	b.n	801192c <dwt_ioctl+0x1e10>
 8011968:	2500      	movs	r5, #0
 801196a:	e7df      	b.n	801192c <dwt_ioctl+0x1e10>
 801196c:	2500      	movs	r5, #0
 801196e:	e7dd      	b.n	801192c <dwt_ioctl+0x1e10>
 8011970:	2500      	movs	r5, #0
 8011972:	e7db      	b.n	801192c <dwt_ioctl+0x1e10>
 8011974:	2500      	movs	r5, #0
 8011976:	e7d9      	b.n	801192c <dwt_ioctl+0x1e10>
 8011978:	2500      	movs	r5, #0
 801197a:	e7d7      	b.n	801192c <dwt_ioctl+0x1e10>
 801197c:	2500      	movs	r5, #0
 801197e:	e7d5      	b.n	801192c <dwt_ioctl+0x1e10>
 8011980:	2500      	movs	r5, #0
 8011982:	e7d3      	b.n	801192c <dwt_ioctl+0x1e10>
 8011984:	2500      	movs	r5, #0
 8011986:	e7d1      	b.n	801192c <dwt_ioctl+0x1e10>
 8011988:	2500      	movs	r5, #0
 801198a:	e7cf      	b.n	801192c <dwt_ioctl+0x1e10>
 801198c:	2500      	movs	r5, #0
 801198e:	e7cd      	b.n	801192c <dwt_ioctl+0x1e10>
 8011990:	2500      	movs	r5, #0
 8011992:	e7cb      	b.n	801192c <dwt_ioctl+0x1e10>
 8011994:	2500      	movs	r5, #0
 8011996:	e7c9      	b.n	801192c <dwt_ioctl+0x1e10>
 8011998:	2500      	movs	r5, #0
 801199a:	e7c7      	b.n	801192c <dwt_ioctl+0x1e10>
 801199c:	2500      	movs	r5, #0
 801199e:	e7c5      	b.n	801192c <dwt_ioctl+0x1e10>
 80119a0:	2500      	movs	r5, #0
 80119a2:	e7c3      	b.n	801192c <dwt_ioctl+0x1e10>
 80119a4:	2500      	movs	r5, #0
 80119a6:	e7c1      	b.n	801192c <dwt_ioctl+0x1e10>
 80119a8:	2500      	movs	r5, #0
 80119aa:	e7bf      	b.n	801192c <dwt_ioctl+0x1e10>
 80119ac:	2500      	movs	r5, #0
 80119ae:	e7bd      	b.n	801192c <dwt_ioctl+0x1e10>
 80119b0:	2500      	movs	r5, #0
 80119b2:	e7bb      	b.n	801192c <dwt_ioctl+0x1e10>
 80119b4:	2500      	movs	r5, #0
 80119b6:	e7b9      	b.n	801192c <dwt_ioctl+0x1e10>
 80119b8:	2500      	movs	r5, #0
 80119ba:	e7b7      	b.n	801192c <dwt_ioctl+0x1e10>
 80119bc:	2500      	movs	r5, #0
 80119be:	e7b5      	b.n	801192c <dwt_ioctl+0x1e10>
 80119c0:	2500      	movs	r5, #0
 80119c2:	e7b3      	b.n	801192c <dwt_ioctl+0x1e10>
 80119c4:	2500      	movs	r5, #0
 80119c6:	e7b1      	b.n	801192c <dwt_ioctl+0x1e10>
 80119c8:	2500      	movs	r5, #0
 80119ca:	e7af      	b.n	801192c <dwt_ioctl+0x1e10>
 80119cc:	2500      	movs	r5, #0
 80119ce:	e7ad      	b.n	801192c <dwt_ioctl+0x1e10>
 80119d0:	2500      	movs	r5, #0
 80119d2:	e7ab      	b.n	801192c <dwt_ioctl+0x1e10>
 80119d4:	2500      	movs	r5, #0
 80119d6:	e7a9      	b.n	801192c <dwt_ioctl+0x1e10>
 80119d8:	2500      	movs	r5, #0
 80119da:	e7a7      	b.n	801192c <dwt_ioctl+0x1e10>
 80119dc:	2500      	movs	r5, #0
 80119de:	e7a5      	b.n	801192c <dwt_ioctl+0x1e10>
 80119e0:	2500      	movs	r5, #0
 80119e2:	e7a3      	b.n	801192c <dwt_ioctl+0x1e10>
 80119e4:	2500      	movs	r5, #0
 80119e6:	e7a1      	b.n	801192c <dwt_ioctl+0x1e10>
 80119e8:	2500      	movs	r5, #0
 80119ea:	e79f      	b.n	801192c <dwt_ioctl+0x1e10>
 80119ec:	2500      	movs	r5, #0
 80119ee:	e79d      	b.n	801192c <dwt_ioctl+0x1e10>
 80119f0:	2500      	movs	r5, #0
 80119f2:	e79b      	b.n	801192c <dwt_ioctl+0x1e10>
 80119f4:	2500      	movs	r5, #0
 80119f6:	e799      	b.n	801192c <dwt_ioctl+0x1e10>
 80119f8:	2500      	movs	r5, #0
 80119fa:	e797      	b.n	801192c <dwt_ioctl+0x1e10>
 80119fc:	2500      	movs	r5, #0
 80119fe:	e795      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a00:	2500      	movs	r5, #0
 8011a02:	e793      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a04:	2500      	movs	r5, #0
 8011a06:	e791      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a08:	2500      	movs	r5, #0
 8011a0a:	e78f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a0c:	2500      	movs	r5, #0
 8011a0e:	e78d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a10:	2500      	movs	r5, #0
 8011a12:	e78b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a14:	2500      	movs	r5, #0
 8011a16:	e789      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a18:	2500      	movs	r5, #0
 8011a1a:	e787      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a1c:	2500      	movs	r5, #0
 8011a1e:	e785      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a20:	2500      	movs	r5, #0
 8011a22:	e783      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a24:	2500      	movs	r5, #0
 8011a26:	e781      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a28:	2500      	movs	r5, #0
 8011a2a:	e77f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a2c:	2500      	movs	r5, #0
 8011a2e:	e77d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a30:	2500      	movs	r5, #0
 8011a32:	e77b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a34:	2500      	movs	r5, #0
 8011a36:	e779      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a38:	2500      	movs	r5, #0
 8011a3a:	e777      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a3c:	2500      	movs	r5, #0
 8011a3e:	e775      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a40:	2500      	movs	r5, #0
 8011a42:	e773      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a44:	2500      	movs	r5, #0
 8011a46:	e771      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a48:	2500      	movs	r5, #0
 8011a4a:	e76f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a4c:	2500      	movs	r5, #0
 8011a4e:	e76d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a50:	2500      	movs	r5, #0
 8011a52:	e76b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a54:	2500      	movs	r5, #0
 8011a56:	e769      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a58:	2500      	movs	r5, #0
 8011a5a:	e767      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a5c:	2500      	movs	r5, #0
 8011a5e:	e765      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a60:	2500      	movs	r5, #0
 8011a62:	e763      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a64:	2500      	movs	r5, #0
 8011a66:	e761      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a68:	2500      	movs	r5, #0
 8011a6a:	e75f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a6c:	2500      	movs	r5, #0
 8011a6e:	e75d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a70:	2500      	movs	r5, #0
 8011a72:	e75b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a74:	2500      	movs	r5, #0
 8011a76:	e759      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a78:	2500      	movs	r5, #0
 8011a7a:	e757      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a7c:	2500      	movs	r5, #0
 8011a7e:	e755      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a80:	2500      	movs	r5, #0
 8011a82:	e753      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a84:	2500      	movs	r5, #0
 8011a86:	e751      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a88:	2500      	movs	r5, #0
 8011a8a:	e74f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a8c:	2500      	movs	r5, #0
 8011a8e:	e74d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a90:	2500      	movs	r5, #0
 8011a92:	e74b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a94:	2500      	movs	r5, #0
 8011a96:	e749      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a98:	2500      	movs	r5, #0
 8011a9a:	e747      	b.n	801192c <dwt_ioctl+0x1e10>
 8011a9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011aa0:	e744      	b.n	801192c <dwt_ioctl+0x1e10>
 8011aa2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011aa6:	e741      	b.n	801192c <dwt_ioctl+0x1e10>
 8011aa8:	2500      	movs	r5, #0
 8011aaa:	e73f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011aac:	2500      	movs	r5, #0
 8011aae:	e73d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ab0:	2500      	movs	r5, #0
 8011ab2:	e73b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ab4:	2500      	movs	r5, #0
 8011ab6:	e739      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ab8:	2500      	movs	r5, #0
 8011aba:	e737      	b.n	801192c <dwt_ioctl+0x1e10>
 8011abc:	2500      	movs	r5, #0
 8011abe:	e735      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ac0:	2500      	movs	r5, #0
 8011ac2:	e733      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ac4:	2500      	movs	r5, #0
 8011ac6:	e731      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ac8:	2500      	movs	r5, #0
 8011aca:	e72f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011acc:	2500      	movs	r5, #0
 8011ace:	e72d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ad0:	2500      	movs	r5, #0
 8011ad2:	e72b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ad4:	2500      	movs	r5, #0
 8011ad6:	e729      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ad8:	2500      	movs	r5, #0
 8011ada:	e727      	b.n	801192c <dwt_ioctl+0x1e10>
 8011adc:	2500      	movs	r5, #0
 8011ade:	e725      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ae0:	2500      	movs	r5, #0
 8011ae2:	e723      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ae4:	2500      	movs	r5, #0
 8011ae6:	e721      	b.n	801192c <dwt_ioctl+0x1e10>
 8011ae8:	2500      	movs	r5, #0
 8011aea:	e71f      	b.n	801192c <dwt_ioctl+0x1e10>
 8011aec:	2500      	movs	r5, #0
 8011aee:	e71d      	b.n	801192c <dwt_ioctl+0x1e10>
 8011af0:	2500      	movs	r5, #0
 8011af2:	e71b      	b.n	801192c <dwt_ioctl+0x1e10>
 8011af4:	2500      	movs	r5, #0
 8011af6:	e719      	b.n	801192c <dwt_ioctl+0x1e10>
 8011af8:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011afc:	1e5a      	subs	r2, r3, #1
 8011afe:	b2d2      	uxtb	r2, r2
 8011b00:	2a01      	cmp	r2, #1
 8011b02:	f67e ae60 	bls.w	80107c6 <dwt_ioctl+0xcaa>
 8011b06:	2202      	movs	r2, #2
 8011b08:	f7fe be07 	b.w	801071a <dwt_ioctl+0xbfe>
 8011b0c:	4d12      	ldr	r5, [pc, #72]	; (8011b58 <dwt_ioctl+0x203c>)
 8011b0e:	e57c      	b.n	801160a <dwt_ioctl+0x1aee>
 8011b10:	2400      	movs	r4, #0
 8011b12:	9400      	str	r4, [sp, #0]
 8011b14:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8011b18:	4622      	mov	r2, r4
 8011b1a:	2110      	movs	r1, #16
 8011b1c:	f7fc fe62 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8011b20:	9400      	str	r4, [sp, #0]
 8011b22:	4b0e      	ldr	r3, [pc, #56]	; (8011b5c <dwt_ioctl+0x2040>)
 8011b24:	4622      	mov	r2, r4
 8011b26:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	f7fc fe5a 	bl	800e7e4 <dwt_modify32bitoffsetreg>
 8011b30:	e57e      	b.n	8011630 <dwt_ioctl+0x1b14>
 8011b32:	bf00      	nop
 8011b34:	000d0020 	.word	0x000d0020
 8011b38:	000c0064 	.word	0x000c0064
 8011b3c:	000c0068 	.word	0x000c0068
 8011b40:	000c0060 	.word	0x000c0060
 8011b44:	000d0068 	.word	0x000d0068
 8011b48:	000d0040 	.word	0x000d0040
 8011b4c:	000d0044 	.word	0x000d0044
 8011b50:	000d0048 	.word	0x000d0048
 8011b54:	000d003c 	.word	0x000d003c
 8011b58:	08001000 	.word	0x08001000
 8011b5c:	f7fc0fff 	.word	0xf7fc0fff

08011b60 <_init>:
 8011b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b62:	b085      	sub	sp, #20
 8011b64:	4604      	mov	r4, r0
 8011b66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011b68:	6819      	ldr	r1, [r3, #0]
 8011b6a:	f7fd fea1 	bl	800f8b0 <ull_initialise>
 8011b6e:	4606      	mov	r6, r0
 8011b70:	6823      	ldr	r3, [r4, #0]
 8011b72:	691b      	ldr	r3, [r3, #16]
 8011b74:	4798      	blx	r3
 8011b76:	ab03      	add	r3, sp, #12
 8011b78:	2200      	movs	r2, #0
 8011b7a:	4611      	mov	r1, r2
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f7fd ffcd 	bl	800fb1c <dwt_ioctl>
 8011b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b86:	6819      	ldr	r1, [r3, #0]
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f7fd fc43 	bl	800f414 <ull_configure>
 8011b8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b92:	6859      	ldr	r1, [r3, #4]
 8011b94:	4620      	mov	r0, r4
 8011b96:	f7fd f993 	bl	800eec0 <ull_configuretxrf>
 8011b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b9e:	89d9      	ldrh	r1, [r3, #14]
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f7fc f8be 	bl	800dd22 <ull_setrxantennadelay>
 8011ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011baa:	8999      	ldrh	r1, [r3, #12]
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7fc f8c0 	bl	800dd32 <ull_settxantennadelay>
 8011bb2:	2100      	movs	r1, #0
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f7fc f94a 	bl	800de4e <ull_setrxaftertxdelay>
 8011bba:	2500      	movs	r5, #0
 8011bbc:	9500      	str	r5, [sp, #0]
 8011bbe:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8011bc2:	462a      	mov	r2, r5
 8011bc4:	2110      	movs	r1, #16
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f7fd fb0c 	bl	800f1e4 <dwt_modify16bitoffsetreg>
 8011bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bd0:	895a      	ldrh	r2, [r3, #10]
 8011bd2:	8919      	ldrh	r1, [r3, #8]
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f7fd fa03 	bl	800efe0 <ull_configureframefilter>
 8011bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bde:	8a1b      	ldrh	r3, [r3, #16]
 8011be0:	2202      	movs	r2, #2
 8011be2:	210c      	movs	r1, #12
 8011be4:	4620      	mov	r0, r4
 8011be6:	f7fc f88c 	bl	800dd02 <dwt_write16bitoffsetreg>
 8011bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bee:	8a5b      	ldrh	r3, [r3, #18]
 8011bf0:	462a      	mov	r2, r5
 8011bf2:	210c      	movs	r1, #12
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f7fc f884 	bl	800dd02 <dwt_write16bitoffsetreg>
 8011bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bfc:	7a19      	ldrb	r1, [r3, #8]
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f7fd fb2e 	bl	800f260 <ull_setleds>
 8011c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c06:	68d9      	ldr	r1, [r3, #12]
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f7fc f949 	bl	800dea0 <ull_setlnapamode>
 8011c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c10:	7e0b      	ldrb	r3, [r1, #24]
 8011c12:	694a      	ldr	r2, [r1, #20]
 8011c14:	6909      	ldr	r1, [r1, #16]
 8011c16:	4620      	mov	r0, r4
 8011c18:	f7fd fa68 	bl	800f0ec <ull_setinterrupt>
 8011c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c1e:	7f9a      	ldrb	r2, [r3, #30]
 8011c20:	8b99      	ldrh	r1, [r3, #28]
 8011c22:	4620      	mov	r0, r4
 8011c24:	f7fc fb90 	bl	800e348 <ull_configuresleep>
 8011c28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011c2a:	7b53      	ldrb	r3, [r2, #13]
 8011c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8011c2e:	d005      	beq.n	8011c3c <_init+0xdc>
 8011c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c36:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8011c3a:	d00a      	beq.n	8011c52 <_init+0xf2>
 8011c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c46:	7353      	strb	r3, [r2, #13]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	4928      	ldr	r1, [pc, #160]	; (8011cec <_init+0x18c>)
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f7fc faa7 	bl	800e1a0 <dwt_write8bitoffsetreg>
 8011c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c54:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f7fc ff63 	bl	800eb24 <ull_configciadiag>
 8011c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c60:	6a19      	ldr	r1, [r3, #32]
 8011c62:	4620      	mov	r0, r4
 8011c64:	f7fc f93c 	bl	800dee0 <ull_configurestskey>
 8011c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f7fc f95b 	bl	800df28 <ull_configurestsiv>
 8011c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c74:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011c78:	bb9b      	cbnz	r3, 8011ce2 <_init+0x182>
 8011c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c7c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8011c80:	4620      	mov	r0, r4
 8011c82:	f7fc fb05 	bl	800e290 <ull_configeventcounters>
 8011c86:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8011c8a:	2d00      	cmp	r5, #0
 8011c8c:	db26      	blt.n	8011cdc <_init+0x17c>
 8011c8e:	2301      	movs	r3, #1
 8011c90:	fa03 f505 	lsl.w	r5, r3, r5
 8011c94:	b2af      	uxth	r7, r5
 8011c96:	4a16      	ldr	r2, [pc, #88]	; (8011cf0 <_init+0x190>)
 8011c98:	4639      	mov	r1, r7
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f7fc fed4 	bl	800ea48 <ull_setgpiomode>
 8011ca0:	f10d 030a 	add.w	r3, sp, #10
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	2302      	movs	r3, #2
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f7fb fba9 	bl	800d406 <dwt_readfromdevice>
 8011cb4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011cb8:	ea23 0305 	bic.w	r3, r3, r5
 8011cbc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	490c      	ldr	r1, [pc, #48]	; (8011cf4 <_init+0x194>)
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f7fc f81c 	bl	800dd02 <dwt_write16bitoffsetreg>
 8011cca:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8011cce:	fab2 f282 	clz	r2, r2
 8011cd2:	0952      	lsrs	r2, r2, #5
 8011cd4:	4639      	mov	r1, r7
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f7fd fb40 	bl	800f35c <ull_setgpiovalue>
 8011cdc:	4630      	mov	r0, r6
 8011cde:	b005      	add	sp, #20
 8011ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f7fc ff54 	bl	800eb90 <ull_configurestsloadiv>
 8011ce8:	e7c7      	b.n	8011c7a <_init+0x11a>
 8011cea:	bf00      	nop
 8011cec:	00090014 	.word	0x00090014
 8011cf0:	01200492 	.word	0x01200492
 8011cf4:	00050008 	.word	0x00050008

08011cf8 <__register_exitproc>:
 8011cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cfc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011db8 <__register_exitproc+0xc0>
 8011d00:	4606      	mov	r6, r0
 8011d02:	f8d8 0000 	ldr.w	r0, [r8]
 8011d06:	461f      	mov	r7, r3
 8011d08:	460d      	mov	r5, r1
 8011d0a:	4691      	mov	r9, r2
 8011d0c:	f000 f89a 	bl	8011e44 <__retarget_lock_acquire_recursive>
 8011d10:	4b25      	ldr	r3, [pc, #148]	; (8011da8 <__register_exitproc+0xb0>)
 8011d12:	681c      	ldr	r4, [r3, #0]
 8011d14:	b934      	cbnz	r4, 8011d24 <__register_exitproc+0x2c>
 8011d16:	4c25      	ldr	r4, [pc, #148]	; (8011dac <__register_exitproc+0xb4>)
 8011d18:	601c      	str	r4, [r3, #0]
 8011d1a:	4b25      	ldr	r3, [pc, #148]	; (8011db0 <__register_exitproc+0xb8>)
 8011d1c:	b113      	cbz	r3, 8011d24 <__register_exitproc+0x2c>
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011d24:	6863      	ldr	r3, [r4, #4]
 8011d26:	2b1f      	cmp	r3, #31
 8011d28:	dd07      	ble.n	8011d3a <__register_exitproc+0x42>
 8011d2a:	f8d8 0000 	ldr.w	r0, [r8]
 8011d2e:	f000 f88b 	bl	8011e48 <__retarget_lock_release_recursive>
 8011d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d3a:	b34e      	cbz	r6, 8011d90 <__register_exitproc+0x98>
 8011d3c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011d40:	b988      	cbnz	r0, 8011d66 <__register_exitproc+0x6e>
 8011d42:	4b1c      	ldr	r3, [pc, #112]	; (8011db4 <__register_exitproc+0xbc>)
 8011d44:	b923      	cbnz	r3, 8011d50 <__register_exitproc+0x58>
 8011d46:	f8d8 0000 	ldr.w	r0, [r8]
 8011d4a:	f000 f87c 	bl	8011e46 <__retarget_lock_release>
 8011d4e:	e7f0      	b.n	8011d32 <__register_exitproc+0x3a>
 8011d50:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011d54:	f000 f87a 	bl	8011e4c <malloc>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d0f4      	beq.n	8011d46 <__register_exitproc+0x4e>
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011d62:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011d66:	6863      	ldr	r3, [r4, #4]
 8011d68:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	409a      	lsls	r2, r3
 8011d70:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011d74:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011d7e:	2e02      	cmp	r6, #2
 8011d80:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011d84:	bf02      	ittt	eq
 8011d86:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011d8a:	4313      	orreq	r3, r2
 8011d8c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8011d90:	6863      	ldr	r3, [r4, #4]
 8011d92:	f8d8 0000 	ldr.w	r0, [r8]
 8011d96:	1c5a      	adds	r2, r3, #1
 8011d98:	3302      	adds	r3, #2
 8011d9a:	6062      	str	r2, [r4, #4]
 8011d9c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011da0:	f000 f852 	bl	8011e48 <__retarget_lock_release_recursive>
 8011da4:	2000      	movs	r0, #0
 8011da6:	e7c6      	b.n	8011d36 <__register_exitproc+0x3e>
 8011da8:	2000033c 	.word	0x2000033c
 8011dac:	200002b0 	.word	0x200002b0
 8011db0:	08012574 	.word	0x08012574
 8011db4:	08011e4d 	.word	0x08011e4d
 8011db8:	20000074 	.word	0x20000074

08011dbc <atexit>:
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	4601      	mov	r1, r0
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7ff bf98 	b.w	8011cf8 <__register_exitproc>

08011dc8 <__errno>:
 8011dc8:	4b01      	ldr	r3, [pc, #4]	; (8011dd0 <__errno+0x8>)
 8011dca:	6818      	ldr	r0, [r3, #0]
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	20000078 	.word	0x20000078

08011dd4 <__libc_fini_array>:
 8011dd4:	b538      	push	{r3, r4, r5, lr}
 8011dd6:	4d07      	ldr	r5, [pc, #28]	; (8011df4 <__libc_fini_array+0x20>)
 8011dd8:	4c07      	ldr	r4, [pc, #28]	; (8011df8 <__libc_fini_array+0x24>)
 8011dda:	1b64      	subs	r4, r4, r5
 8011ddc:	10a4      	asrs	r4, r4, #2
 8011dde:	b91c      	cbnz	r4, 8011de8 <__libc_fini_array+0x14>
 8011de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011de4:	f000 b91c 	b.w	8012020 <_fini>
 8011de8:	3c01      	subs	r4, #1
 8011dea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011dee:	4798      	blx	r3
 8011df0:	e7f5      	b.n	8011dde <__libc_fini_array+0xa>
 8011df2:	bf00      	nop
 8011df4:	08012598 	.word	0x08012598
 8011df8:	0801259c 	.word	0x0801259c

08011dfc <__libc_init_array>:
 8011dfc:	b570      	push	{r4, r5, r6, lr}
 8011dfe:	4d0d      	ldr	r5, [pc, #52]	; (8011e34 <__libc_init_array+0x38>)
 8011e00:	4c0d      	ldr	r4, [pc, #52]	; (8011e38 <__libc_init_array+0x3c>)
 8011e02:	1b64      	subs	r4, r4, r5
 8011e04:	10a4      	asrs	r4, r4, #2
 8011e06:	2600      	movs	r6, #0
 8011e08:	42a6      	cmp	r6, r4
 8011e0a:	d109      	bne.n	8011e20 <__libc_init_array+0x24>
 8011e0c:	4d0b      	ldr	r5, [pc, #44]	; (8011e3c <__libc_init_array+0x40>)
 8011e0e:	4c0c      	ldr	r4, [pc, #48]	; (8011e40 <__libc_init_array+0x44>)
 8011e10:	f000 f900 	bl	8012014 <_init>
 8011e14:	1b64      	subs	r4, r4, r5
 8011e16:	10a4      	asrs	r4, r4, #2
 8011e18:	2600      	movs	r6, #0
 8011e1a:	42a6      	cmp	r6, r4
 8011e1c:	d105      	bne.n	8011e2a <__libc_init_array+0x2e>
 8011e1e:	bd70      	pop	{r4, r5, r6, pc}
 8011e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e24:	4798      	blx	r3
 8011e26:	3601      	adds	r6, #1
 8011e28:	e7ee      	b.n	8011e08 <__libc_init_array+0xc>
 8011e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e2e:	4798      	blx	r3
 8011e30:	3601      	adds	r6, #1
 8011e32:	e7f2      	b.n	8011e1a <__libc_init_array+0x1e>
 8011e34:	08012580 	.word	0x08012580
 8011e38:	08012580 	.word	0x08012580
 8011e3c:	08012580 	.word	0x08012580
 8011e40:	08012598 	.word	0x08012598

08011e44 <__retarget_lock_acquire_recursive>:
 8011e44:	4770      	bx	lr

08011e46 <__retarget_lock_release>:
 8011e46:	4770      	bx	lr

08011e48 <__retarget_lock_release_recursive>:
 8011e48:	4770      	bx	lr
	...

08011e4c <malloc>:
 8011e4c:	4b02      	ldr	r3, [pc, #8]	; (8011e58 <malloc+0xc>)
 8011e4e:	4601      	mov	r1, r0
 8011e50:	6818      	ldr	r0, [r3, #0]
 8011e52:	f000 b847 	b.w	8011ee4 <_malloc_r>
 8011e56:	bf00      	nop
 8011e58:	20000078 	.word	0x20000078

08011e5c <memcmp>:
 8011e5c:	b510      	push	{r4, lr}
 8011e5e:	3901      	subs	r1, #1
 8011e60:	4402      	add	r2, r0
 8011e62:	4290      	cmp	r0, r2
 8011e64:	d101      	bne.n	8011e6a <memcmp+0xe>
 8011e66:	2000      	movs	r0, #0
 8011e68:	e005      	b.n	8011e76 <memcmp+0x1a>
 8011e6a:	7803      	ldrb	r3, [r0, #0]
 8011e6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011e70:	42a3      	cmp	r3, r4
 8011e72:	d001      	beq.n	8011e78 <memcmp+0x1c>
 8011e74:	1b18      	subs	r0, r3, r4
 8011e76:	bd10      	pop	{r4, pc}
 8011e78:	3001      	adds	r0, #1
 8011e7a:	e7f2      	b.n	8011e62 <memcmp+0x6>

08011e7c <memset>:
 8011e7c:	4402      	add	r2, r0
 8011e7e:	4603      	mov	r3, r0
 8011e80:	4293      	cmp	r3, r2
 8011e82:	d100      	bne.n	8011e86 <memset+0xa>
 8011e84:	4770      	bx	lr
 8011e86:	f803 1b01 	strb.w	r1, [r3], #1
 8011e8a:	e7f9      	b.n	8011e80 <memset+0x4>

08011e8c <__malloc_lock>:
 8011e8c:	4801      	ldr	r0, [pc, #4]	; (8011e94 <__malloc_lock+0x8>)
 8011e8e:	f7ff bfd9 	b.w	8011e44 <__retarget_lock_acquire_recursive>
 8011e92:	bf00      	nop
 8011e94:	20000341 	.word	0x20000341

08011e98 <__malloc_unlock>:
 8011e98:	4801      	ldr	r0, [pc, #4]	; (8011ea0 <__malloc_unlock+0x8>)
 8011e9a:	f7ff bfd5 	b.w	8011e48 <__retarget_lock_release_recursive>
 8011e9e:	bf00      	nop
 8011ea0:	20000341 	.word	0x20000341

08011ea4 <sbrk_aligned>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	4e0e      	ldr	r6, [pc, #56]	; (8011ee0 <sbrk_aligned+0x3c>)
 8011ea8:	460c      	mov	r4, r1
 8011eaa:	6831      	ldr	r1, [r6, #0]
 8011eac:	4605      	mov	r5, r0
 8011eae:	b911      	cbnz	r1, 8011eb6 <sbrk_aligned+0x12>
 8011eb0:	f000 f88c 	bl	8011fcc <_sbrk_r>
 8011eb4:	6030      	str	r0, [r6, #0]
 8011eb6:	4621      	mov	r1, r4
 8011eb8:	4628      	mov	r0, r5
 8011eba:	f000 f887 	bl	8011fcc <_sbrk_r>
 8011ebe:	1c43      	adds	r3, r0, #1
 8011ec0:	d00a      	beq.n	8011ed8 <sbrk_aligned+0x34>
 8011ec2:	1cc4      	adds	r4, r0, #3
 8011ec4:	f024 0403 	bic.w	r4, r4, #3
 8011ec8:	42a0      	cmp	r0, r4
 8011eca:	d007      	beq.n	8011edc <sbrk_aligned+0x38>
 8011ecc:	1a21      	subs	r1, r4, r0
 8011ece:	4628      	mov	r0, r5
 8011ed0:	f000 f87c 	bl	8011fcc <_sbrk_r>
 8011ed4:	3001      	adds	r0, #1
 8011ed6:	d101      	bne.n	8011edc <sbrk_aligned+0x38>
 8011ed8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011edc:	4620      	mov	r0, r4
 8011ede:	bd70      	pop	{r4, r5, r6, pc}
 8011ee0:	20000348 	.word	0x20000348

08011ee4 <_malloc_r>:
 8011ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee8:	1ccd      	adds	r5, r1, #3
 8011eea:	f025 0503 	bic.w	r5, r5, #3
 8011eee:	3508      	adds	r5, #8
 8011ef0:	2d0c      	cmp	r5, #12
 8011ef2:	bf38      	it	cc
 8011ef4:	250c      	movcc	r5, #12
 8011ef6:	2d00      	cmp	r5, #0
 8011ef8:	4607      	mov	r7, r0
 8011efa:	db01      	blt.n	8011f00 <_malloc_r+0x1c>
 8011efc:	42a9      	cmp	r1, r5
 8011efe:	d905      	bls.n	8011f0c <_malloc_r+0x28>
 8011f00:	230c      	movs	r3, #12
 8011f02:	603b      	str	r3, [r7, #0]
 8011f04:	2600      	movs	r6, #0
 8011f06:	4630      	mov	r0, r6
 8011f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f0c:	4e2e      	ldr	r6, [pc, #184]	; (8011fc8 <_malloc_r+0xe4>)
 8011f0e:	f7ff ffbd 	bl	8011e8c <__malloc_lock>
 8011f12:	6833      	ldr	r3, [r6, #0]
 8011f14:	461c      	mov	r4, r3
 8011f16:	bb34      	cbnz	r4, 8011f66 <_malloc_r+0x82>
 8011f18:	4629      	mov	r1, r5
 8011f1a:	4638      	mov	r0, r7
 8011f1c:	f7ff ffc2 	bl	8011ea4 <sbrk_aligned>
 8011f20:	1c43      	adds	r3, r0, #1
 8011f22:	4604      	mov	r4, r0
 8011f24:	d14d      	bne.n	8011fc2 <_malloc_r+0xde>
 8011f26:	6834      	ldr	r4, [r6, #0]
 8011f28:	4626      	mov	r6, r4
 8011f2a:	2e00      	cmp	r6, #0
 8011f2c:	d140      	bne.n	8011fb0 <_malloc_r+0xcc>
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	4631      	mov	r1, r6
 8011f32:	4638      	mov	r0, r7
 8011f34:	eb04 0803 	add.w	r8, r4, r3
 8011f38:	f000 f848 	bl	8011fcc <_sbrk_r>
 8011f3c:	4580      	cmp	r8, r0
 8011f3e:	d13a      	bne.n	8011fb6 <_malloc_r+0xd2>
 8011f40:	6821      	ldr	r1, [r4, #0]
 8011f42:	3503      	adds	r5, #3
 8011f44:	1a6d      	subs	r5, r5, r1
 8011f46:	f025 0503 	bic.w	r5, r5, #3
 8011f4a:	3508      	adds	r5, #8
 8011f4c:	2d0c      	cmp	r5, #12
 8011f4e:	bf38      	it	cc
 8011f50:	250c      	movcc	r5, #12
 8011f52:	4629      	mov	r1, r5
 8011f54:	4638      	mov	r0, r7
 8011f56:	f7ff ffa5 	bl	8011ea4 <sbrk_aligned>
 8011f5a:	3001      	adds	r0, #1
 8011f5c:	d02b      	beq.n	8011fb6 <_malloc_r+0xd2>
 8011f5e:	6823      	ldr	r3, [r4, #0]
 8011f60:	442b      	add	r3, r5
 8011f62:	6023      	str	r3, [r4, #0]
 8011f64:	e00e      	b.n	8011f84 <_malloc_r+0xa0>
 8011f66:	6822      	ldr	r2, [r4, #0]
 8011f68:	1b52      	subs	r2, r2, r5
 8011f6a:	d41e      	bmi.n	8011faa <_malloc_r+0xc6>
 8011f6c:	2a0b      	cmp	r2, #11
 8011f6e:	d916      	bls.n	8011f9e <_malloc_r+0xba>
 8011f70:	1961      	adds	r1, r4, r5
 8011f72:	42a3      	cmp	r3, r4
 8011f74:	6025      	str	r5, [r4, #0]
 8011f76:	bf18      	it	ne
 8011f78:	6059      	strne	r1, [r3, #4]
 8011f7a:	6863      	ldr	r3, [r4, #4]
 8011f7c:	bf08      	it	eq
 8011f7e:	6031      	streq	r1, [r6, #0]
 8011f80:	5162      	str	r2, [r4, r5]
 8011f82:	604b      	str	r3, [r1, #4]
 8011f84:	4638      	mov	r0, r7
 8011f86:	f104 060b 	add.w	r6, r4, #11
 8011f8a:	f7ff ff85 	bl	8011e98 <__malloc_unlock>
 8011f8e:	f026 0607 	bic.w	r6, r6, #7
 8011f92:	1d23      	adds	r3, r4, #4
 8011f94:	1af2      	subs	r2, r6, r3
 8011f96:	d0b6      	beq.n	8011f06 <_malloc_r+0x22>
 8011f98:	1b9b      	subs	r3, r3, r6
 8011f9a:	50a3      	str	r3, [r4, r2]
 8011f9c:	e7b3      	b.n	8011f06 <_malloc_r+0x22>
 8011f9e:	6862      	ldr	r2, [r4, #4]
 8011fa0:	42a3      	cmp	r3, r4
 8011fa2:	bf0c      	ite	eq
 8011fa4:	6032      	streq	r2, [r6, #0]
 8011fa6:	605a      	strne	r2, [r3, #4]
 8011fa8:	e7ec      	b.n	8011f84 <_malloc_r+0xa0>
 8011faa:	4623      	mov	r3, r4
 8011fac:	6864      	ldr	r4, [r4, #4]
 8011fae:	e7b2      	b.n	8011f16 <_malloc_r+0x32>
 8011fb0:	4634      	mov	r4, r6
 8011fb2:	6876      	ldr	r6, [r6, #4]
 8011fb4:	e7b9      	b.n	8011f2a <_malloc_r+0x46>
 8011fb6:	230c      	movs	r3, #12
 8011fb8:	603b      	str	r3, [r7, #0]
 8011fba:	4638      	mov	r0, r7
 8011fbc:	f7ff ff6c 	bl	8011e98 <__malloc_unlock>
 8011fc0:	e7a1      	b.n	8011f06 <_malloc_r+0x22>
 8011fc2:	6025      	str	r5, [r4, #0]
 8011fc4:	e7de      	b.n	8011f84 <_malloc_r+0xa0>
 8011fc6:	bf00      	nop
 8011fc8:	20000344 	.word	0x20000344

08011fcc <_sbrk_r>:
 8011fcc:	b538      	push	{r3, r4, r5, lr}
 8011fce:	4d06      	ldr	r5, [pc, #24]	; (8011fe8 <_sbrk_r+0x1c>)
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	4608      	mov	r0, r1
 8011fd6:	602b      	str	r3, [r5, #0]
 8011fd8:	f7ef fc1a 	bl	8001810 <_sbrk>
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	d102      	bne.n	8011fe6 <_sbrk_r+0x1a>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	b103      	cbz	r3, 8011fe6 <_sbrk_r+0x1a>
 8011fe4:	6023      	str	r3, [r4, #0]
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	20000454 	.word	0x20000454

08011fec <__stack_chk_init>:
 8011fec:	4b03      	ldr	r3, [pc, #12]	; (8011ffc <__stack_chk_init+0x10>)
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	b912      	cbnz	r2, 8011ff8 <__stack_chk_init+0xc>
 8011ff2:	f5a2 0276 	sub.w	r2, r2, #16121856	; 0xf60000
 8011ff6:	601a      	str	r2, [r3, #0]
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop
 8011ffc:	20000458 	.word	0x20000458

08012000 <register_fini>:
 8012000:	4b02      	ldr	r3, [pc, #8]	; (801200c <register_fini+0xc>)
 8012002:	b113      	cbz	r3, 801200a <register_fini+0xa>
 8012004:	4802      	ldr	r0, [pc, #8]	; (8012010 <register_fini+0x10>)
 8012006:	f7ff bed9 	b.w	8011dbc <atexit>
 801200a:	4770      	bx	lr
 801200c:	00000000 	.word	0x00000000
 8012010:	08011dd5 	.word	0x08011dd5

08012014 <_init>:
 8012014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012016:	bf00      	nop
 8012018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801201a:	bc08      	pop	{r3}
 801201c:	469e      	mov	lr, r3
 801201e:	4770      	bx	lr

08012020 <_fini>:
 8012020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012022:	bf00      	nop
 8012024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012026:	bc08      	pop	{r3}
 8012028:	469e      	mov	lr, r3
 801202a:	4770      	bx	lr
